
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20002740 	.word	0x20002740
}
   4:	00002495 	.word	0x00002495
   8:	000086f9 	.word	0x000086f9
   c:	000024f5 	.word	0x000024f5
  10:	000024f5 	.word	0x000024f5
  14:	000024f5 	.word	0x000024f5
  18:	000024f5 	.word	0x000024f5
  1c:	000024f5 	.word	0x000024f5
	...
  2c:	00002275 	.word	0x00002275
  30:	000024f5 	.word	0x000024f5
  34:	00000000 	.word	0x00000000
  38:	0000221d 	.word	0x0000221d
  3c:	0000197d 	.word	0x0000197d

00000040 <_irq_vector_table>:
  40:	00002455 00002455 00002455 00002455     U$..U$..U$..U$..
  50:	00002455 00002455 00002455 00002455     U$..U$..U$..U$..
  60:	00002455 00002455 00002455 00002455     U$..U$..U$..U$..
  70:	00002455 00002455 00002455 00002455     U$..U$..U$..U$..
  80:	00002455 00002455 00002455 00002455     U$..U$..U$..U$..
  90:	00002455 00002455 00002455 00002455     U$..U$..U$..U$..
  a0:	00002455 00002455 00002455 00002455     U$..U$..U$..U$..
  b0:	00002455 00002455 00002455 00002455     U$..U$..U$..U$..
  c0:	00002455 00002455 00002455 00002455     U$..U$..U$..U$..
  d0:	00002455 00002455 00002455 00002455     U$..U$..U$..U$..
  e0:	00002455 00002455 00002455 00002455     U$..U$..U$..U$..
  f0:	00002455 00002455 00002455 00002455     U$..U$..U$..U$..
 100:	00002455 00002455 00002455 00002455     U$..U$..U$..U$..
 110:	00002455 00002455 00002455 00002455     U$..U$..U$..U$..
 120:	00002455 00002455 00002455 00002455     U$..U$..U$..U$..
 130:	00002455 00002455 00002455 00002455     U$..U$..U$..U$..
 140:	00002455 00002455 00002455 00002455     U$..U$..U$..U$..
 150:	00002455                                U$..

00000154 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	281ee6de 8fcebb4c 00003502 0000003c     ...(L....5..<...
 210:	0000c000 00000001 00000000 00000000     ................
 220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000023c <__aeabi_uldivmod>:
     23c:	b953      	cbnz	r3, 254 <__aeabi_uldivmod+0x18>
     23e:	b94a      	cbnz	r2, 254 <__aeabi_uldivmod+0x18>
     240:	2900      	cmp	r1, #0
     242:	bf08      	it	eq
     244:	2800      	cmpeq	r0, #0
     246:	bf1c      	itt	ne
     248:	f04f 31ff 	movne.w	r1, #4294967295
     24c:	f04f 30ff 	movne.w	r0, #4294967295
     250:	f000 b970 	b.w	534 <__aeabi_idiv0>
     254:	f1ad 0c08 	sub.w	ip, sp, #8
     258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     25c:	f000 f806 	bl	26c <__udivmoddi4>
     260:	f8dd e004 	ldr.w	lr, [sp, #4]
     264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     268:	b004      	add	sp, #16
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	9e08      	ldr	r6, [sp, #32]
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	468a      	mov	sl, r1
     278:	2b00      	cmp	r3, #0
     27a:	d17f      	bne.n	37c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xfc>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d941      	bls.n	306 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x86>
     282:	fab2 f282 	clz	r2, r2
     286:	b14a      	cbz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     288:	f1c2 0120 	rsb	r1, r2, #32
     28c:	fa05 f302 	lsl.w	r3, r5, r2
     290:	4097      	lsls	r7, r2
     292:	4094      	lsls	r4, r2
     294:	fa20 f101 	lsr.w	r1, r0, r1
     298:	ea41 0a03 	orr.w	sl, r1, r3
     29c:	ea4f 4817 	mov.w	r8, r7, lsr #16
     2a0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     2a4:	fa1f f987 	uxth.w	r9, r7
     2a8:	fbba fef8 	udiv	lr, sl, r8
     2ac:	fb08 a31e 	mls	r3, r8, lr, sl
     2b0:	fb0e f109 	mul.w	r1, lr, r9
     2b4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     2b8:	4299      	cmp	r1, r3
     2ba:	d906      	bls.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     2bc:	18fb      	adds	r3, r7, r3
     2be:	d202      	bcs.n	2c6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x46>
     2c0:	4299      	cmp	r1, r3
     2c2:	f200 8124 	bhi.w	50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
     2c6:	f10e 3eff 	add.w	lr, lr, #4294967295
     2ca:	1a59      	subs	r1, r3, r1
     2cc:	b2a3      	uxth	r3, r4
     2ce:	fbb1 f0f8 	udiv	r0, r1, r8
     2d2:	fb08 1110 	mls	r1, r8, r0, r1
     2d6:	fb00 f909 	mul.w	r9, r0, r9
     2da:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     2de:	45a1      	cmp	r9, r4
     2e0:	d905      	bls.n	2ee <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6e>
     2e2:	193c      	adds	r4, r7, r4
     2e4:	d202      	bcs.n	2ec <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6c>
     2e6:	45a1      	cmp	r9, r4
     2e8:	f200 810e 	bhi.w	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
     2ec:	3801      	subs	r0, #1
     2ee:	eba4 0409 	sub.w	r4, r4, r9
     2f2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     2f6:	2100      	movs	r1, #0
     2f8:	b11e      	cbz	r6, 302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     2fa:	40d4      	lsrs	r4, r2
     2fc:	2300      	movs	r3, #0
     2fe:	e9c6 4300 	strd	r4, r3, [r6]
     302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     306:	b902      	cbnz	r2, 30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     308:	deff      	udf	#255	; 0xff
     30a:	fab2 f282 	clz	r2, r2
     30e:	2a00      	cmp	r2, #0
     310:	d14f      	bne.n	3b2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x132>
     312:	1bcb      	subs	r3, r1, r7
     314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     318:	fa1f f887 	uxth.w	r8, r7
     31c:	2101      	movs	r1, #1
     31e:	0c25      	lsrs	r5, r4, #16
     320:	fbb3 fcfe 	udiv	ip, r3, lr
     324:	fb0e 301c 	mls	r0, lr, ip, r3
     328:	462b      	mov	r3, r5
     32a:	fb08 f90c 	mul.w	r9, r8, ip
     32e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     332:	45a9      	cmp	r9, r5
     334:	d90a      	bls.n	34c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xcc>
     336:	197d      	adds	r5, r7, r5
     338:	bf2c      	ite	cs
     33a:	2301      	movcs	r3, #1
     33c:	2300      	movcc	r3, #0
     33e:	45a9      	cmp	r9, r5
     340:	d902      	bls.n	348 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc8>
     342:	2b00      	cmp	r3, #0
     344:	f000 80d9 	beq.w	4fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12>
     348:	f10c 3cff 	add.w	ip, ip, #4294967295
     34c:	eba5 0509 	sub.w	r5, r5, r9
     350:	b2a3      	uxth	r3, r4
     352:	fbb5 f0fe 	udiv	r0, r5, lr
     356:	fb0e 5510 	mls	r5, lr, r0, r5
     35a:	fb08 f800 	mul.w	r8, r8, r0
     35e:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     362:	45a0      	cmp	r8, r4
     364:	d905      	bls.n	372 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf2>
     366:	193c      	adds	r4, r7, r4
     368:	d202      	bcs.n	370 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf0>
     36a:	45a0      	cmp	r8, r4
     36c:	f200 80c9 	bhi.w	502 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a>
     370:	3801      	subs	r0, #1
     372:	eba4 0408 	sub.w	r4, r4, r8
     376:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     37a:	e7bd      	b.n	2f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x78>
     37c:	428b      	cmp	r3, r1
     37e:	d908      	bls.n	392 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x112>
     380:	2e00      	cmp	r6, #0
     382:	f000 80b1 	beq.w	4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
     386:	2100      	movs	r1, #0
     388:	e9c6 0500 	strd	r0, r5, [r6]
     38c:	4608      	mov	r0, r1
     38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     392:	fab3 f183 	clz	r1, r3
     396:	2900      	cmp	r1, #0
     398:	d146      	bne.n	428 <CONFIG_FLASH_SIZE+0x28>
     39a:	42ab      	cmp	r3, r5
     39c:	f0c0 80a7 	bcc.w	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     3a0:	4282      	cmp	r2, r0
     3a2:	f240 80a4 	bls.w	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     3a6:	4608      	mov	r0, r1
     3a8:	2e00      	cmp	r6, #0
     3aa:	d0aa      	beq.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     3ac:	e9c6 4a00 	strd	r4, sl, [r6]
     3b0:	e7a7      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     3b2:	f1c2 0020 	rsb	r0, r2, #32
     3b6:	4097      	lsls	r7, r2
     3b8:	fa01 f302 	lsl.w	r3, r1, r2
     3bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     3c0:	40c1      	lsrs	r1, r0
     3c2:	fa24 f500 	lsr.w	r5, r4, r0
     3c6:	fa1f f887 	uxth.w	r8, r7
     3ca:	4094      	lsls	r4, r2
     3cc:	431d      	orrs	r5, r3
     3ce:	fbb1 f0fe 	udiv	r0, r1, lr
     3d2:	0c2b      	lsrs	r3, r5, #16
     3d4:	fb0e 1110 	mls	r1, lr, r0, r1
     3d8:	fb00 fc08 	mul.w	ip, r0, r8
     3dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     3e0:	459c      	cmp	ip, r3
     3e2:	d909      	bls.n	3f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x178>
     3e4:	18fb      	adds	r3, r7, r3
     3e6:	bf2c      	ite	cs
     3e8:	2101      	movcs	r1, #1
     3ea:	2100      	movcc	r1, #0
     3ec:	459c      	cmp	ip, r3
     3ee:	d902      	bls.n	3f6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x176>
     3f0:	2900      	cmp	r1, #0
     3f2:	f000 8095 	beq.w	520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>
     3f6:	3801      	subs	r0, #1
     3f8:	eba3 030c 	sub.w	r3, r3, ip
     3fc:	b2ad      	uxth	r5, r5
     3fe:	fbb3 f1fe 	udiv	r1, r3, lr
     402:	fb0e 3311 	mls	r3, lr, r1, r3
     406:	fb01 fc08 	mul.w	ip, r1, r8
     40a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     40e:	45ac      	cmp	ip, r5
     410:	d905      	bls.n	41e <CONFIG_FLASH_SIZE+0x1e>
     412:	197d      	adds	r5, r7, r5
     414:	d202      	bcs.n	41c <CONFIG_FLASH_SIZE+0x1c>
     416:	45ac      	cmp	ip, r5
     418:	f200 8089 	bhi.w	52e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x46>
     41c:	3901      	subs	r1, #1
     41e:	eba5 030c 	sub.w	r3, r5, ip
     422:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     426:	e77a      	b.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     428:	f1c1 0420 	rsb	r4, r1, #32
     42c:	408b      	lsls	r3, r1
     42e:	fa02 f701 	lsl.w	r7, r2, r1
     432:	fa05 fc01 	lsl.w	ip, r5, r1
     436:	40e2      	lsrs	r2, r4
     438:	fa20 f804 	lsr.w	r8, r0, r4
     43c:	40e5      	lsrs	r5, r4
     43e:	fa00 fe01 	lsl.w	lr, r0, r1
     442:	4313      	orrs	r3, r2
     444:	ea48 020c 	orr.w	r2, r8, ip
     448:	ea4f 4813 	mov.w	r8, r3, lsr #16
     44c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     450:	fa1f f983 	uxth.w	r9, r3
     454:	fbb5 faf8 	udiv	sl, r5, r8
     458:	fb08 551a 	mls	r5, r8, sl, r5
     45c:	fb0a f009 	mul.w	r0, sl, r9
     460:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     464:	4560      	cmp	r0, ip
     466:	d90a      	bls.n	47e <CONFIG_FLASH_SIZE+0x7e>
     468:	eb13 0c0c 	adds.w	ip, r3, ip
     46c:	bf2c      	ite	cs
     46e:	2501      	movcs	r5, #1
     470:	2500      	movcc	r5, #0
     472:	4560      	cmp	r0, ip
     474:	d901      	bls.n	47a <CONFIG_FLASH_SIZE+0x7a>
     476:	2d00      	cmp	r5, #0
     478:	d055      	beq.n	526 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3e>
     47a:	f10a 3aff 	add.w	sl, sl, #4294967295
     47e:	ebac 0c00 	sub.w	ip, ip, r0
     482:	b292      	uxth	r2, r2
     484:	fbbc f0f8 	udiv	r0, ip, r8
     488:	fb08 cc10 	mls	ip, r8, r0, ip
     48c:	fb00 f909 	mul.w	r9, r0, r9
     490:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     494:	45e1      	cmp	r9, ip
     496:	d905      	bls.n	4a4 <CONFIG_FLASH_SIZE+0xa4>
     498:	eb13 0c0c 	adds.w	ip, r3, ip
     49c:	d201      	bcs.n	4a2 <CONFIG_FLASH_SIZE+0xa2>
     49e:	45e1      	cmp	r9, ip
     4a0:	d83b      	bhi.n	51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
     4a2:	3801      	subs	r0, #1
     4a4:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     4a8:	ebac 0c09 	sub.w	ip, ip, r9
     4ac:	fba0 8907 	umull	r8, r9, r0, r7
     4b0:	45cc      	cmp	ip, r9
     4b2:	4645      	mov	r5, r8
     4b4:	464a      	mov	r2, r9
     4b6:	d302      	bcc.n	4be <CONFIG_FLASH_SIZE+0xbe>
     4b8:	d106      	bne.n	4c8 <CONFIG_FLASH_SIZE+0xc8>
     4ba:	45c6      	cmp	lr, r8
     4bc:	d204      	bcs.n	4c8 <CONFIG_FLASH_SIZE+0xc8>
     4be:	3801      	subs	r0, #1
     4c0:	ebb8 0507 	subs.w	r5, r8, r7
     4c4:	eb69 0203 	sbc.w	r2, r9, r3
     4c8:	b32e      	cbz	r6, 516 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2e>
     4ca:	ebbe 0305 	subs.w	r3, lr, r5
     4ce:	eb6c 0c02 	sbc.w	ip, ip, r2
     4d2:	fa23 f201 	lsr.w	r2, r3, r1
     4d6:	fa0c f404 	lsl.w	r4, ip, r4
     4da:	fa2c f301 	lsr.w	r3, ip, r1
     4de:	2100      	movs	r1, #0
     4e0:	4314      	orrs	r4, r2
     4e2:	e9c6 4300 	strd	r4, r3, [r6]
     4e6:	e70c      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     4e8:	4631      	mov	r1, r6
     4ea:	4630      	mov	r0, r6
     4ec:	e709      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     4ee:	1a84      	subs	r4, r0, r2
     4f0:	eb65 0303 	sbc.w	r3, r5, r3
     4f4:	2001      	movs	r0, #1
     4f6:	469a      	mov	sl, r3
     4f8:	e756      	b.n	3a8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x128>
     4fa:	f1ac 0c02 	sub.w	ip, ip, #2
     4fe:	443d      	add	r5, r7
     500:	e724      	b.n	34c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xcc>
     502:	3802      	subs	r0, #2
     504:	443c      	add	r4, r7
     506:	e734      	b.n	372 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf2>
     508:	3802      	subs	r0, #2
     50a:	443c      	add	r4, r7
     50c:	e6ef      	b.n	2ee <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6e>
     50e:	f1ae 0e02 	sub.w	lr, lr, #2
     512:	443b      	add	r3, r7
     514:	e6d9      	b.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     516:	4631      	mov	r1, r6
     518:	e6f3      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     51a:	3802      	subs	r0, #2
     51c:	449c      	add	ip, r3
     51e:	e7c1      	b.n	4a4 <CONFIG_FLASH_SIZE+0xa4>
     520:	3802      	subs	r0, #2
     522:	443b      	add	r3, r7
     524:	e768      	b.n	3f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x178>
     526:	f1aa 0a02 	sub.w	sl, sl, #2
     52a:	449c      	add	ip, r3
     52c:	e7a7      	b.n	47e <CONFIG_FLASH_SIZE+0x7e>
     52e:	3902      	subs	r1, #2
     530:	443d      	add	r5, r7
     532:	e774      	b.n	41e <CONFIG_FLASH_SIZE+0x1e>

00000534 <__aeabi_idiv0>:
     534:	4770      	bx	lr
     536:	bf00      	nop

00000538 <__gnu_cmse_nonsecure_call>:
     538:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     53c:	4627      	mov	r7, r4
     53e:	46a0      	mov	r8, r4
     540:	46a1      	mov	r9, r4
     542:	46a2      	mov	sl, r4
     544:	46a3      	mov	fp, r4
     546:	46a4      	mov	ip, r4
     548:	b0a2      	sub	sp, #136	; 0x88
     54a:	ec2d 0a00 	vlstm	sp
     54e:	f384 8800 	msr	CPSR_f, r4
     552:	4625      	mov	r5, r4
     554:	4626      	mov	r6, r4
     556:	47a4      	blxns	r4
     558:	ec3d 0a00 	vlldm	sp
     55c:	b022      	add	sp, #136	; 0x88
     55e:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
	...

00000564 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     564:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     566:	6844      	ldr	r4, [r0, #4]
     568:	4605      	mov	r5, r0

	return method & SYS_NOTIFY_METHOD_MASK;
     56a:	f004 0403 	and.w	r4, r4, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
     56e:	2c03      	cmp	r4, #3
	notify->result = res;
     570:	6081      	str	r1, [r0, #8]
	switch (method) {
     572:	d002      	beq.n	57a <sys_notify_finalize+0x16>
     574:	b12c      	cbz	r4, 582 <sys_notify_finalize+0x1e>
     576:	2000      	movs	r0, #0
     578:	e000      	b.n	57c <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     57a:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     57c:	2300      	movs	r3, #0
     57e:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     580:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
     582:	2245      	movs	r2, #69	; 0x45
     584:	4904      	ldr	r1, [pc, #16]	; (598 <sys_notify_finalize+0x34>)
     586:	4805      	ldr	r0, [pc, #20]	; (59c <sys_notify_finalize+0x38>)
     588:	f007 ff1a 	bl	83c0 <printk>
     58c:	2145      	movs	r1, #69	; 0x45
     58e:	4802      	ldr	r0, [pc, #8]	; (598 <sys_notify_finalize+0x34>)
     590:	f007 ffe2 	bl	8558 <assert_post_action>
     594:	e7ef      	b.n	576 <sys_notify_finalize+0x12>
     596:	bf00      	nop
     598:	0000926f 	.word	0x0000926f
     59c:	00009292 	.word	0x00009292

000005a0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     5a0:	680b      	ldr	r3, [r1, #0]
     5a2:	3301      	adds	r3, #1
     5a4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     5a6:	4b01      	ldr	r3, [pc, #4]	; (5ac <char_out+0xc>)
     5a8:	681b      	ldr	r3, [r3, #0]
     5aa:	4718      	bx	r3
     5ac:	20000000 	.word	0x20000000

000005b0 <__printk_hook_install>:
	_char_out = fn;
     5b0:	4b01      	ldr	r3, [pc, #4]	; (5b8 <__printk_hook_install+0x8>)
     5b2:	6018      	str	r0, [r3, #0]
}
     5b4:	4770      	bx	lr
     5b6:	bf00      	nop
     5b8:	20000000 	.word	0x20000000

000005bc <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     5bc:	b507      	push	{r0, r1, r2, lr}
     5be:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     5c0:	2100      	movs	r1, #0
{
     5c2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     5c4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     5c6:	4803      	ldr	r0, [pc, #12]	; (5d4 <vprintk+0x18>)
     5c8:	a901      	add	r1, sp, #4
     5ca:	f000 fa6d 	bl	aa8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     5ce:	b003      	add	sp, #12
     5d0:	f85d fb04 	ldr.w	pc, [sp], #4
     5d4:	000005a1 	.word	0x000005a1

000005d8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     5d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5dc:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
     5e0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     5e2:	f01a 0f08 	tst.w	sl, #8
{
     5e6:	4693      	mov	fp, r2
	if (processing) {
     5e8:	d01c      	beq.n	624 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
     5ea:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     5ec:	bf0c      	ite	eq
     5ee:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     5f2:	f04a 0a20 	orrne.w	sl, sl, #32
     5f6:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     5fa:	f104 0014 	add.w	r0, r4, #20
     5fe:	f003 fc63 	bl	3ec8 <z_spin_unlock_valid>
     602:	b940      	cbnz	r0, 616 <process_event+0x3e>
     604:	49ba      	ldr	r1, [pc, #744]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     606:	48bb      	ldr	r0, [pc, #748]	; (8f4 <CONFIG_ISR_STACK_SIZE+0xf4>)
     608:	22ac      	movs	r2, #172	; 0xac
     60a:	f007 fed9 	bl	83c0 <printk>
     60e:	21ac      	movs	r1, #172	; 0xac
     610:	48b7      	ldr	r0, [pc, #732]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     612:	f007 ffa1 	bl	8558 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     616:	f38b 8811 	msr	BASEPRI, fp
     61a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     61e:	b003      	add	sp, #12
     620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
     624:	4fb4      	ldr	r7, [pc, #720]	; (8f8 <CONFIG_ISR_STACK_SIZE+0xf8>)
     626:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     62a:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
     62e:	2902      	cmp	r1, #2
     630:	d106      	bne.n	640 <process_event+0x68>
			evt = process_recheck(mgr);
     632:	4620      	mov	r0, r4
     634:	f007 fed1 	bl	83da <process_recheck>
		if (evt == EVT_NOP) {
     638:	2800      	cmp	r0, #0
     63a:	d0de      	beq.n	5fa <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     63c:	2801      	cmp	r0, #1
     63e:	d165      	bne.n	70c <process_event+0x134>
			res = mgr->last_res;
     640:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     644:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
     646:	f1b9 0f00 	cmp.w	r9, #0
     64a:	da19      	bge.n	680 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     64c:	2600      	movs	r6, #0
		*clients = mgr->clients;
     64e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     650:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
     654:	e9c4 6600 	strd	r6, r6, [r4]
     658:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     65c:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     65e:	8ba3      	ldrh	r3, [r4, #28]
     660:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     664:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     666:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
     668:	d003      	beq.n	672 <process_event+0x9a>
		if (do_monitors
     66a:	68a2      	ldr	r2, [r4, #8]
     66c:	2a00      	cmp	r2, #0
     66e:	f040 80f1 	bne.w	854 <CONFIG_ISR_STACK_SIZE+0x54>
		    || !sys_slist_is_empty(&clients)
     672:	b915      	cbnz	r5, 67a <process_event+0xa2>
		    || (transit != NULL)) {
     674:	2e00      	cmp	r6, #0
     676:	f000 812b 	beq.w	8d0 <CONFIG_ISR_STACK_SIZE+0xd0>
     67a:	f04f 0a00 	mov.w	sl, #0
     67e:	e0eb      	b.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     680:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     684:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     686:	2901      	cmp	r1, #1
     688:	d822      	bhi.n	6d0 <process_event+0xf8>
	list->head = NULL;
     68a:	2100      	movs	r1, #0
     68c:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
     690:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
     692:	6825      	ldr	r5, [r4, #0]
     694:	b29b      	uxth	r3, r3
	list->tail = NULL;
     696:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     69a:	d10c      	bne.n	6b6 <process_event+0xde>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     69c:	428d      	cmp	r5, r1
     69e:	462a      	mov	r2, r5
     6a0:	bf38      	it	cc
     6a2:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     6a4:	b12a      	cbz	r2, 6b2 <process_event+0xda>
				mgr->refs += 1U;
     6a6:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     6a8:	6812      	ldr	r2, [r2, #0]
     6aa:	3101      	adds	r1, #1
     6ac:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     6ae:	2a00      	cmp	r2, #0
     6b0:	d1f8      	bne.n	6a4 <process_event+0xcc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6b2:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
     6b6:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     6b8:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     6ba:	f007 fe8e 	bl	83da <process_recheck>
     6be:	4606      	mov	r6, r0
     6c0:	2800      	cmp	r0, #0
     6c2:	d0cc      	beq.n	65e <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     6c4:	8ba3      	ldrh	r3, [r4, #28]
     6c6:	f043 0320 	orr.w	r3, r3, #32
     6ca:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
     6cc:	2600      	movs	r6, #0
     6ce:	e7c6      	b.n	65e <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
     6d0:	2a04      	cmp	r2, #4
     6d2:	d10d      	bne.n	6f0 <process_event+0x118>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6d4:	f023 0307 	bic.w	r3, r3, #7
     6d8:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
     6da:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     6dc:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     6de:	f007 fe7c 	bl	83da <process_recheck>
     6e2:	4605      	mov	r5, r0
     6e4:	b180      	cbz	r0, 708 <process_event+0x130>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     6e6:	f042 0220 	orr.w	r2, r2, #32
     6ea:	2500      	movs	r5, #0
     6ec:	83a2      	strh	r2, [r4, #28]
     6ee:	e7ed      	b.n	6cc <process_event+0xf4>
		__ASSERT_NO_MSG(false);
     6f0:	f240 121b 	movw	r2, #283	; 0x11b
     6f4:	4639      	mov	r1, r7
     6f6:	4640      	mov	r0, r8
     6f8:	f007 fe62 	bl	83c0 <printk>
     6fc:	f240 111b 	movw	r1, #283	; 0x11b
     700:	4638      	mov	r0, r7
     702:	f007 ff29 	bl	8558 <assert_post_action>
     706:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     708:	462e      	mov	r6, r5
     70a:	e7a8      	b.n	65e <process_event+0x86>
		} else if (evt == EVT_START) {
     70c:	2803      	cmp	r0, #3
     70e:	d131      	bne.n	774 <process_event+0x19c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     710:	f1ba 0f00 	cmp.w	sl, #0
     714:	d00a      	beq.n	72c <process_event+0x154>
     716:	4639      	mov	r1, r7
     718:	4640      	mov	r0, r8
     71a:	f44f 72ab 	mov.w	r2, #342	; 0x156
     71e:	f007 fe4f 	bl	83c0 <printk>
     722:	f44f 71ab 	mov.w	r1, #342	; 0x156
     726:	4638      	mov	r0, r7
     728:	f007 ff16 	bl	8558 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     72c:	6823      	ldr	r3, [r4, #0]
     72e:	b953      	cbnz	r3, 746 <process_event+0x16e>
     730:	4639      	mov	r1, r7
     732:	4640      	mov	r0, r8
     734:	f240 1257 	movw	r2, #343	; 0x157
     738:	f007 fe42 	bl	83c0 <printk>
     73c:	f240 1157 	movw	r1, #343	; 0x157
     740:	4638      	mov	r0, r7
     742:	f007 ff09 	bl	8558 <assert_post_action>
			transit = mgr->transitions->start;
     746:	6923      	ldr	r3, [r4, #16]
     748:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
     74a:	b956      	cbnz	r6, 762 <process_event+0x18a>
     74c:	4639      	mov	r1, r7
     74e:	4640      	mov	r0, r8
     750:	f44f 72ad 	mov.w	r2, #346	; 0x15a
     754:	f007 fe34 	bl	83c0 <printk>
     758:	f44f 71ad 	mov.w	r1, #346	; 0x15a
     75c:	4638      	mov	r0, r7
     75e:	f007 fefb 	bl	8558 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     762:	8ba3      	ldrh	r3, [r4, #28]
     764:	f023 0307 	bic.w	r3, r3, #7
     768:	f043 0306 	orr.w	r3, r3, #6
}
     76c:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
     76e:	83a3      	strh	r3, [r4, #28]
		res = 0;
     770:	46a9      	mov	r9, r5
}
     772:	e774      	b.n	65e <process_event+0x86>
		} else if (evt == EVT_STOP) {
     774:	2804      	cmp	r0, #4
     776:	d12e      	bne.n	7d6 <process_event+0x1fe>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     778:	f1ba 0f02 	cmp.w	sl, #2
     77c:	d00a      	beq.n	794 <process_event+0x1bc>
     77e:	4639      	mov	r1, r7
     780:	4640      	mov	r0, r8
     782:	f240 125d 	movw	r2, #349	; 0x15d
     786:	f007 fe1b 	bl	83c0 <printk>
     78a:	f240 115d 	movw	r1, #349	; 0x15d
     78e:	4638      	mov	r0, r7
     790:	f007 fee2 	bl	8558 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
     794:	8be3      	ldrh	r3, [r4, #30]
     796:	b153      	cbz	r3, 7ae <process_event+0x1d6>
     798:	4639      	mov	r1, r7
     79a:	4640      	mov	r0, r8
     79c:	f44f 72af 	mov.w	r2, #350	; 0x15e
     7a0:	f007 fe0e 	bl	83c0 <printk>
     7a4:	f44f 71af 	mov.w	r1, #350	; 0x15e
     7a8:	4638      	mov	r0, r7
     7aa:	f007 fed5 	bl	8558 <assert_post_action>
			transit = mgr->transitions->stop;
     7ae:	6923      	ldr	r3, [r4, #16]
     7b0:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
     7b2:	b956      	cbnz	r6, 7ca <process_event+0x1f2>
     7b4:	4639      	mov	r1, r7
     7b6:	4640      	mov	r0, r8
     7b8:	f240 1261 	movw	r2, #353	; 0x161
     7bc:	f007 fe00 	bl	83c0 <printk>
     7c0:	f240 1161 	movw	r1, #353	; 0x161
     7c4:	4638      	mov	r0, r7
     7c6:	f007 fec7 	bl	8558 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     7ca:	8ba3      	ldrh	r3, [r4, #28]
     7cc:	f023 0307 	bic.w	r3, r3, #7
     7d0:	f043 0304 	orr.w	r3, r3, #4
     7d4:	e7ca      	b.n	76c <process_event+0x194>
		} else if (evt == EVT_RESET) {
     7d6:	2805      	cmp	r0, #5
     7d8:	d12e      	bne.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     7da:	f1ba 0f01 	cmp.w	sl, #1
     7de:	d00a      	beq.n	7f6 <process_event+0x21e>
     7e0:	4639      	mov	r1, r7
     7e2:	4640      	mov	r0, r8
     7e4:	f44f 72b2 	mov.w	r2, #356	; 0x164
     7e8:	f007 fdea 	bl	83c0 <printk>
     7ec:	f44f 71b2 	mov.w	r1, #356	; 0x164
     7f0:	4638      	mov	r0, r7
     7f2:	f007 feb1 	bl	8558 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     7f6:	6823      	ldr	r3, [r4, #0]
     7f8:	b953      	cbnz	r3, 810 <CONFIG_ISR_STACK_SIZE+0x10>
     7fa:	4639      	mov	r1, r7
     7fc:	4640      	mov	r0, r8
     7fe:	f240 1265 	movw	r2, #357	; 0x165
     802:	f007 fddd 	bl	83c0 <printk>
     806:	f240 1165 	movw	r1, #357	; 0x165
     80a:	4638      	mov	r0, r7
     80c:	f007 fea4 	bl	8558 <assert_post_action>
			transit = mgr->transitions->reset;
     810:	6923      	ldr	r3, [r4, #16]
     812:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
     814:	b956      	cbnz	r6, 82c <CONFIG_ISR_STACK_SIZE+0x2c>
     816:	4639      	mov	r1, r7
     818:	4640      	mov	r0, r8
     81a:	f44f 72b4 	mov.w	r2, #360	; 0x168
     81e:	f007 fdcf 	bl	83c0 <printk>
     822:	f44f 71b4 	mov.w	r1, #360	; 0x168
     826:	4638      	mov	r0, r7
     828:	f007 fe96 	bl	8558 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     82c:	8ba3      	ldrh	r3, [r4, #28]
     82e:	f023 0307 	bic.w	r3, r3, #7
     832:	f043 0305 	orr.w	r3, r3, #5
     836:	e799      	b.n	76c <process_event+0x194>
			__ASSERT_NO_MSG(false);
     838:	2500      	movs	r5, #0
     83a:	f240 126b 	movw	r2, #363	; 0x16b
     83e:	4639      	mov	r1, r7
     840:	4640      	mov	r0, r8
     842:	f007 fdbd 	bl	83c0 <printk>
     846:	f240 116b 	movw	r1, #363	; 0x16b
     84a:	4638      	mov	r0, r7
     84c:	f007 fe84 	bl	8558 <assert_post_action>
		onoff_transition_fn transit = NULL;
     850:	462e      	mov	r6, r5
     852:	e78d      	b.n	770 <process_event+0x198>
				   && !sys_slist_is_empty(&mgr->monitors);
     854:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     858:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     85c:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
     85e:	f104 0314 	add.w	r3, r4, #20
     862:	4618      	mov	r0, r3
     864:	9301      	str	r3, [sp, #4]
     866:	f003 fb2f 	bl	3ec8 <z_spin_unlock_valid>
     86a:	b940      	cbnz	r0, 87e <CONFIG_ISR_STACK_SIZE+0x7e>
     86c:	4640      	mov	r0, r8
     86e:	4920      	ldr	r1, [pc, #128]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     870:	22ac      	movs	r2, #172	; 0xac
     872:	f007 fda5 	bl	83c0 <printk>
     876:	21ac      	movs	r1, #172	; 0xac
     878:	481d      	ldr	r0, [pc, #116]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     87a:	f007 fe6d 	bl	8558 <assert_post_action>
     87e:	f38b 8811 	msr	BASEPRI, fp
     882:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     886:	f1ba 0f00 	cmp.w	sl, #0
     88a:	d139      	bne.n	900 <CONFIG_ISR_STACK_SIZE+0x100>
	while (!sys_slist_is_empty(list)) {
     88c:	2d00      	cmp	r5, #0
     88e:	d14c      	bne.n	92a <CONFIG_ISR_STACK_SIZE+0x12a>
			if (transit != NULL) {
     890:	b116      	cbz	r6, 898 <CONFIG_ISR_STACK_SIZE+0x98>
				transit(mgr, transition_complete);
     892:	4620      	mov	r0, r4
     894:	4919      	ldr	r1, [pc, #100]	; (8fc <CONFIG_ISR_STACK_SIZE+0xfc>)
     896:	47b0      	blx	r6
	__asm__ volatile(
     898:	f04f 0320 	mov.w	r3, #32
     89c:	f3ef 8b11 	mrs	fp, BASEPRI
     8a0:	f383 8811 	msr	BASEPRI, r3
     8a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     8a8:	9801      	ldr	r0, [sp, #4]
     8aa:	f003 faff 	bl	3eac <z_spin_lock_valid>
     8ae:	b940      	cbnz	r0, 8c2 <CONFIG_ISR_STACK_SIZE+0xc2>
     8b0:	4640      	mov	r0, r8
     8b2:	490f      	ldr	r1, [pc, #60]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     8b4:	2281      	movs	r2, #129	; 0x81
     8b6:	f007 fd83 	bl	83c0 <printk>
     8ba:	2181      	movs	r1, #129	; 0x81
     8bc:	480c      	ldr	r0, [pc, #48]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     8be:	f007 fe4b 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
     8c2:	9801      	ldr	r0, [sp, #4]
     8c4:	f003 fb0e 	bl	3ee4 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     8c8:	8ba3      	ldrh	r3, [r4, #28]
     8ca:	f023 0308 	bic.w	r3, r3, #8
     8ce:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     8d0:	8ba3      	ldrh	r3, [r4, #28]
     8d2:	06da      	lsls	r2, r3, #27
     8d4:	d531      	bpl.n	93a <CONFIG_ISR_STACK_SIZE+0x13a>
			evt = EVT_COMPLETE;
     8d6:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     8d8:	f023 0310 	bic.w	r3, r3, #16
     8dc:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
     8de:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
     8e2:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
     8e6:	2900      	cmp	r1, #0
     8e8:	f47f aea1 	bne.w	62e <process_event+0x56>
out:
     8ec:	e685      	b.n	5fa <process_event+0x22>
     8ee:	bf00      	nop
     8f0:	000092cc 	.word	0x000092cc
     8f4:	00009292 	.word	0x00009292
     8f8:	000092aa 	.word	0x000092aa
     8fc:	0000094d 	.word	0x0000094d
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     900:	68a1      	ldr	r1, [r4, #8]
     902:	2900      	cmp	r1, #0
     904:	d0c2      	beq.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
	return node->next;
     906:	680b      	ldr	r3, [r1, #0]
     908:	2b00      	cmp	r3, #0
     90a:	bf38      	it	cc
     90c:	2300      	movcc	r3, #0
     90e:	469a      	mov	sl, r3
		mon->callback(mgr, mon, state, res);
     910:	4620      	mov	r0, r4
     912:	464b      	mov	r3, r9
     914:	f8d1 b004 	ldr.w	fp, [r1, #4]
     918:	9a00      	ldr	r2, [sp, #0]
     91a:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     91c:	f1ba 0f00 	cmp.w	sl, #0
     920:	d0b4      	beq.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     922:	4651      	mov	r1, sl
     924:	f8da 3000 	ldr.w	r3, [sl]
     928:	e7ee      	b.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     92a:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     92c:	464b      	mov	r3, r9
     92e:	4620      	mov	r0, r4
     930:	9a00      	ldr	r2, [sp, #0]
     932:	682d      	ldr	r5, [r5, #0]
     934:	f007 fd6d 	bl	8412 <notify_one>
     938:	e7a8      	b.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     93a:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     93e:	bf1e      	ittt	ne
     940:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
     944:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     946:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
     948:	e7c9      	b.n	8de <CONFIG_ISR_STACK_SIZE+0xde>
     94a:	bf00      	nop

0000094c <transition_complete>:
{
     94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     94e:	4604      	mov	r4, r0
     950:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     952:	f100 0614 	add.w	r6, r0, #20
     956:	f04f 0320 	mov.w	r3, #32
     95a:	f3ef 8711 	mrs	r7, BASEPRI
     95e:	f383 8811 	msr	BASEPRI, r3
     962:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     966:	4630      	mov	r0, r6
     968:	f003 faa0 	bl	3eac <z_spin_lock_valid>
     96c:	b940      	cbnz	r0, 980 <transition_complete+0x34>
     96e:	490a      	ldr	r1, [pc, #40]	; (998 <transition_complete+0x4c>)
     970:	480a      	ldr	r0, [pc, #40]	; (99c <transition_complete+0x50>)
     972:	2281      	movs	r2, #129	; 0x81
     974:	f007 fd24 	bl	83c0 <printk>
     978:	2181      	movs	r1, #129	; 0x81
     97a:	4807      	ldr	r0, [pc, #28]	; (998 <transition_complete+0x4c>)
     97c:	f007 fdec 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
     980:	4630      	mov	r0, r6
     982:	f003 faaf 	bl	3ee4 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
     986:	463a      	mov	r2, r7
     988:	4620      	mov	r0, r4
	mgr->last_res = res;
     98a:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
     98c:	2101      	movs	r1, #1
}
     98e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
     992:	f7ff be21 	b.w	5d8 <process_event>
     996:	bf00      	nop
     998:	000092cc 	.word	0x000092cc
     99c:	00009292 	.word	0x00009292

000009a0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
     9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     9a4:	4604      	mov	r4, r0
     9a6:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
     9a8:	f007 fd49 	bl	843e <validate_args>

	if (rv < 0) {
     9ac:	1e05      	subs	r5, r0, #0
     9ae:	db54      	blt.n	a5a <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     9b0:	f104 0914 	add.w	r9, r4, #20
     9b4:	f04f 0320 	mov.w	r3, #32
     9b8:	f3ef 8a11 	mrs	sl, BASEPRI
     9bc:	f383 8811 	msr	BASEPRI, r3
     9c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     9c4:	4648      	mov	r0, r9
     9c6:	f003 fa71 	bl	3eac <z_spin_lock_valid>
     9ca:	b940      	cbnz	r0, 9de <onoff_request+0x3e>
     9cc:	4933      	ldr	r1, [pc, #204]	; (a9c <onoff_request+0xfc>)
     9ce:	4834      	ldr	r0, [pc, #208]	; (aa0 <onoff_request+0x100>)
     9d0:	2281      	movs	r2, #129	; 0x81
     9d2:	f007 fcf5 	bl	83c0 <printk>
     9d6:	2181      	movs	r1, #129	; 0x81
     9d8:	4830      	ldr	r0, [pc, #192]	; (a9c <onoff_request+0xfc>)
     9da:	f007 fdbd 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
     9de:	4648      	mov	r0, r9
     9e0:	f003 fa80 	bl	3ee4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
     9e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
     9e8:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     9ea:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
     9ec:	428b      	cmp	r3, r1
     9ee:	f002 0607 	and.w	r6, r2, #7
     9f2:	d04a      	beq.n	a8a <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
     9f4:	2e02      	cmp	r6, #2
     9f6:	d11f      	bne.n	a38 <onoff_request+0x98>
	rv = state;
     9f8:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
     9fa:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
     9fe:	3301      	adds	r3, #1
     a00:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     a02:	4648      	mov	r0, r9
     a04:	f003 fa60 	bl	3ec8 <z_spin_unlock_valid>
     a08:	b940      	cbnz	r0, a1c <onoff_request+0x7c>
     a0a:	4924      	ldr	r1, [pc, #144]	; (a9c <onoff_request+0xfc>)
     a0c:	4824      	ldr	r0, [pc, #144]	; (aa0 <onoff_request+0x100>)
     a0e:	22ac      	movs	r2, #172	; 0xac
     a10:	f007 fcd6 	bl	83c0 <printk>
     a14:	21ac      	movs	r1, #172	; 0xac
     a16:	4821      	ldr	r0, [pc, #132]	; (a9c <onoff_request+0xfc>)
     a18:	f007 fd9e 	bl	8558 <assert_post_action>
	__asm__ volatile(
     a1c:	f38a 8811 	msr	BASEPRI, sl
     a20:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
     a24:	f1b8 0f00 	cmp.w	r8, #0
     a28:	d017      	beq.n	a5a <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
     a2a:	2300      	movs	r3, #0
     a2c:	4632      	mov	r2, r6
     a2e:	4639      	mov	r1, r7
     a30:	4620      	mov	r0, r4
     a32:	f007 fcee 	bl	8412 <notify_one>
     a36:	e010      	b.n	a5a <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
     a38:	0793      	lsls	r3, r2, #30
     a3a:	d001      	beq.n	a40 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
     a3c:	2e06      	cmp	r6, #6
     a3e:	d10f      	bne.n	a60 <onoff_request+0xc0>
	parent->next = child;
     a40:	2300      	movs	r3, #0
     a42:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
     a44:	6863      	ldr	r3, [r4, #4]
     a46:	b9eb      	cbnz	r3, a84 <onoff_request+0xe4>
	list->head = node;
     a48:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
     a4c:	4635      	mov	r5, r6
     a4e:	b9f6      	cbnz	r6, a8e <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
     a50:	4652      	mov	r2, sl
     a52:	2102      	movs	r1, #2
     a54:	4620      	mov	r0, r4
     a56:	f7ff fdbf 	bl	5d8 <process_event>
		}
	}

	return rv;
}
     a5a:	4628      	mov	r0, r5
     a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
     a60:	2e05      	cmp	r6, #5
     a62:	d017      	beq.n	a94 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     a64:	2e01      	cmp	r6, #1
     a66:	d00a      	beq.n	a7e <onoff_request+0xde>
     a68:	490e      	ldr	r1, [pc, #56]	; (aa4 <onoff_request+0x104>)
     a6a:	480d      	ldr	r0, [pc, #52]	; (aa0 <onoff_request+0x100>)
     a6c:	f240 12c9 	movw	r2, #457	; 0x1c9
     a70:	f007 fca6 	bl	83c0 <printk>
     a74:	f240 11c9 	movw	r1, #457	; 0x1c9
     a78:	480a      	ldr	r0, [pc, #40]	; (aa4 <onoff_request+0x104>)
     a7a:	f007 fd6d 	bl	8558 <assert_post_action>
		rv = -EIO;
     a7e:	f06f 0504 	mvn.w	r5, #4
     a82:	e004      	b.n	a8e <onoff_request+0xee>
	parent->next = child;
     a84:	601f      	str	r7, [r3, #0]
	list->tail = node;
     a86:	6067      	str	r7, [r4, #4]
}
     a88:	e7e0      	b.n	a4c <onoff_request+0xac>
		rv = -EAGAIN;
     a8a:	f06f 050a 	mvn.w	r5, #10
     a8e:	f04f 0800 	mov.w	r8, #0
     a92:	e7b6      	b.n	a02 <onoff_request+0x62>
		rv = -ENOTSUP;
     a94:	f06f 0585 	mvn.w	r5, #133	; 0x85
     a98:	e7f9      	b.n	a8e <onoff_request+0xee>
     a9a:	bf00      	nop
     a9c:	000092cc 	.word	0x000092cc
     aa0:	00009292 	.word	0x00009292
     aa4:	000092aa 	.word	0x000092aa

00000aa8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     aac:	468b      	mov	fp, r1
     aae:	4692      	mov	sl, r2
     ab0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     ab2:	2500      	movs	r5, #0
{
     ab4:	b091      	sub	sp, #68	; 0x44
     ab6:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     ab8:	f89a 0000 	ldrb.w	r0, [sl]
     abc:	b908      	cbnz	r0, ac2 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     abe:	4628      	mov	r0, r5
     ac0:	e35e      	b.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
		if (*fp != '%') {
     ac2:	2825      	cmp	r0, #37	; 0x25
     ac4:	f10a 0701 	add.w	r7, sl, #1
     ac8:	d007      	beq.n	ada <cbvprintf+0x32>
			OUTC('%');
     aca:	4659      	mov	r1, fp
     acc:	9b02      	ldr	r3, [sp, #8]
     ace:	4798      	blx	r3
     ad0:	2800      	cmp	r0, #0
     ad2:	f2c0 8355 	blt.w	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
     ad6:	3501      	adds	r5, #1
			break;
     ad8:	e210      	b.n	efc <cbvprintf+0x454>
		} state = {
     ada:	2218      	movs	r2, #24
     adc:	2100      	movs	r1, #0
     ade:	a80a      	add	r0, sp, #40	; 0x28
     ae0:	f007 fe8d 	bl	87fe <memset>
	if (*sp == '%') {
     ae4:	f89a 3001 	ldrb.w	r3, [sl, #1]
     ae8:	2b25      	cmp	r3, #37	; 0x25
     aea:	d078      	beq.n	bde <cbvprintf+0x136>
     aec:	2200      	movs	r2, #0
     aee:	4694      	mov	ip, r2
     af0:	4616      	mov	r6, r2
     af2:	4696      	mov	lr, r2
     af4:	4610      	mov	r0, r2
     af6:	4639      	mov	r1, r7
		switch (*sp) {
     af8:	f817 3b01 	ldrb.w	r3, [r7], #1
     afc:	2b2b      	cmp	r3, #43	; 0x2b
     afe:	f000 809d 	beq.w	c3c <cbvprintf+0x194>
     b02:	f200 8094 	bhi.w	c2e <cbvprintf+0x186>
     b06:	2b20      	cmp	r3, #32
     b08:	f000 809b 	beq.w	c42 <cbvprintf+0x19a>
     b0c:	2b23      	cmp	r3, #35	; 0x23
     b0e:	f000 809a 	beq.w	c46 <cbvprintf+0x19e>
     b12:	b128      	cbz	r0, b20 <cbvprintf+0x78>
     b14:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b18:	f040 0004 	orr.w	r0, r0, #4
     b1c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b20:	f1be 0f00 	cmp.w	lr, #0
     b24:	d005      	beq.n	b32 <cbvprintf+0x8a>
     b26:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b2a:	f040 0008 	orr.w	r0, r0, #8
     b2e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b32:	b12e      	cbz	r6, b40 <cbvprintf+0x98>
     b34:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b38:	f040 0010 	orr.w	r0, r0, #16
     b3c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b40:	f1bc 0f00 	cmp.w	ip, #0
     b44:	d005      	beq.n	b52 <cbvprintf+0xaa>
     b46:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b4a:	f040 0020 	orr.w	r0, r0, #32
     b4e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b52:	b12a      	cbz	r2, b60 <cbvprintf+0xb8>
     b54:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     b5c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     b60:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b64:	f002 0044 	and.w	r0, r2, #68	; 0x44
     b68:	2844      	cmp	r0, #68	; 0x44
     b6a:	d103      	bne.n	b74 <cbvprintf+0xcc>
		conv->flag_zero = false;
     b6c:	f36f 1286 	bfc	r2, #6, #1
     b70:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     b74:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     b78:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     b7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     b7e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     b82:	d17b      	bne.n	c7c <cbvprintf+0x1d4>
		conv->width_star = true;
     b84:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     b88:	1c4b      	adds	r3, r1, #1
     b8a:	f042 0201 	orr.w	r2, r2, #1
     b8e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     b92:	781a      	ldrb	r2, [r3, #0]
     b94:	2a2e      	cmp	r2, #46	; 0x2e
     b96:	bf0c      	ite	eq
     b98:	2101      	moveq	r1, #1
     b9a:	2100      	movne	r1, #0
     b9c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     ba0:	f361 0241 	bfi	r2, r1, #1, #1
     ba4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     ba8:	d174      	bne.n	c94 <cbvprintf+0x1ec>
	if (*sp == '*') {
     baa:	785a      	ldrb	r2, [r3, #1]
     bac:	2a2a      	cmp	r2, #42	; 0x2a
     bae:	d06a      	beq.n	c86 <cbvprintf+0x1de>
	size_t val = 0;
     bb0:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     bb2:	260a      	movs	r6, #10
     bb4:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     bb6:	4618      	mov	r0, r3
     bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
     bbc:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     bc0:	2f09      	cmp	r7, #9
     bc2:	f240 808e 	bls.w	ce2 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     bc6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     bca:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     bcc:	f3c2 0040 	ubfx	r0, r2, #1, #1
     bd0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     bd4:	f361 0241 	bfi	r2, r1, #1, #1
     bd8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     bdc:	e05a      	b.n	c94 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     bde:	f10a 0702 	add.w	r7, sl, #2
     be2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     be6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     bea:	07d9      	lsls	r1, r3, #31
     bec:	f140 8149 	bpl.w	e82 <cbvprintf+0x3da>
			width = va_arg(ap, int);
     bf0:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     bf4:	f1b9 0f00 	cmp.w	r9, #0
     bf8:	da07      	bge.n	c0a <cbvprintf+0x162>
				conv->flag_dash = true;
     bfa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
     bfe:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
     c02:	f042 0204 	orr.w	r2, r2, #4
     c06:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
     c0a:	075a      	lsls	r2, r3, #29
     c0c:	f140 8142 	bpl.w	e94 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
     c10:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     c14:	f1b8 0f00 	cmp.w	r8, #0
     c18:	f280 8141 	bge.w	e9e <cbvprintf+0x3f6>
				conv->prec_present = false;
     c1c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     c20:	f36f 0341 	bfc	r3, #1, #1
     c24:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     c28:	f04f 38ff 	mov.w	r8, #4294967295
     c2c:	e137      	b.n	e9e <cbvprintf+0x3f6>
		switch (*sp) {
     c2e:	2b2d      	cmp	r3, #45	; 0x2d
     c30:	d00c      	beq.n	c4c <cbvprintf+0x1a4>
     c32:	2b30      	cmp	r3, #48	; 0x30
     c34:	f47f af6d 	bne.w	b12 <cbvprintf+0x6a>
			conv->flag_zero = true;
     c38:	2201      	movs	r2, #1
	} while (loop);
     c3a:	e75c      	b.n	af6 <cbvprintf+0x4e>
			conv->flag_plus = true;
     c3c:	f04f 0e01 	mov.w	lr, #1
     c40:	e759      	b.n	af6 <cbvprintf+0x4e>
			conv->flag_space = true;
     c42:	2601      	movs	r6, #1
     c44:	e757      	b.n	af6 <cbvprintf+0x4e>
			conv->flag_hash = true;
     c46:	f04f 0c01 	mov.w	ip, #1
     c4a:	e754      	b.n	af6 <cbvprintf+0x4e>
		switch (*sp) {
     c4c:	2001      	movs	r0, #1
     c4e:	e752      	b.n	af6 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     c50:	4633      	mov	r3, r6
     c52:	fb0c 0202 	mla	r2, ip, r2, r0
     c56:	3a30      	subs	r2, #48	; 0x30
     c58:	461e      	mov	r6, r3
     c5a:	f816 0b01 	ldrb.w	r0, [r6], #1
     c5e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     c62:	2f09      	cmp	r7, #9
     c64:	d9f4      	bls.n	c50 <cbvprintf+0x1a8>
	if (sp != wp) {
     c66:	4299      	cmp	r1, r3
     c68:	d093      	beq.n	b92 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     c6a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     c6e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     c70:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     c72:	f362 0141 	bfi	r1, r2, #1, #1
     c76:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     c7a:	e78a      	b.n	b92 <cbvprintf+0xea>
     c7c:	460b      	mov	r3, r1
	size_t val = 0;
     c7e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     c80:	f04f 0c0a 	mov.w	ip, #10
     c84:	e7e8      	b.n	c58 <cbvprintf+0x1b0>
		conv->prec_star = true;
     c86:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     c8a:	3302      	adds	r3, #2
		conv->prec_star = true;
     c8c:	f042 0204 	orr.w	r2, r2, #4
     c90:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
     c94:	461f      	mov	r7, r3
     c96:	f817 2b01 	ldrb.w	r2, [r7], #1
     c9a:	2a6c      	cmp	r2, #108	; 0x6c
     c9c:	d041      	beq.n	d22 <cbvprintf+0x27a>
     c9e:	d825      	bhi.n	cec <cbvprintf+0x244>
     ca0:	2a68      	cmp	r2, #104	; 0x68
     ca2:	d02b      	beq.n	cfc <cbvprintf+0x254>
     ca4:	2a6a      	cmp	r2, #106	; 0x6a
     ca6:	d046      	beq.n	d36 <cbvprintf+0x28e>
     ca8:	2a4c      	cmp	r2, #76	; 0x4c
     caa:	d04c      	beq.n	d46 <cbvprintf+0x29e>
     cac:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     cae:	f817 2b01 	ldrb.w	r2, [r7], #1
     cb2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
     cb6:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
     cb8:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     cbc:	f200 80d9 	bhi.w	e72 <cbvprintf+0x3ca>
     cc0:	2a57      	cmp	r2, #87	; 0x57
     cc2:	d84d      	bhi.n	d60 <cbvprintf+0x2b8>
     cc4:	2a41      	cmp	r2, #65	; 0x41
     cc6:	d003      	beq.n	cd0 <cbvprintf+0x228>
     cc8:	3a45      	subs	r2, #69	; 0x45
     cca:	2a02      	cmp	r2, #2
     ccc:	f200 80d1 	bhi.w	e72 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
     cd0:	2204      	movs	r2, #4
     cd2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     cd6:	f362 0302 	bfi	r3, r2, #0, #3
     cda:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     cde:	2301      	movs	r3, #1
			break;
     ce0:	e09e      	b.n	e20 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
     ce2:	fb06 2101 	mla	r1, r6, r1, r2
     ce6:	4603      	mov	r3, r0
     ce8:	3930      	subs	r1, #48	; 0x30
     cea:	e764      	b.n	bb6 <cbvprintf+0x10e>
	switch (*sp) {
     cec:	2a74      	cmp	r2, #116	; 0x74
     cee:	d026      	beq.n	d3e <cbvprintf+0x296>
     cf0:	2a7a      	cmp	r2, #122	; 0x7a
     cf2:	d1db      	bne.n	cac <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     cf4:	2206      	movs	r2, #6
     cf6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     cfa:	e00d      	b.n	d18 <cbvprintf+0x270>
		if (*++sp == 'h') {
     cfc:	785a      	ldrb	r2, [r3, #1]
     cfe:	2a68      	cmp	r2, #104	; 0x68
     d00:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     d04:	d106      	bne.n	d14 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     d06:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     d08:	f361 02c6 	bfi	r2, r1, #3, #4
     d0c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     d10:	1c9f      	adds	r7, r3, #2
     d12:	e7cc      	b.n	cae <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     d14:	4613      	mov	r3, r2
     d16:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     d18:	f362 03c6 	bfi	r3, r2, #3, #4
     d1c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     d20:	e7c5      	b.n	cae <cbvprintf+0x206>
		if (*++sp == 'l') {
     d22:	785a      	ldrb	r2, [r3, #1]
     d24:	2a6c      	cmp	r2, #108	; 0x6c
     d26:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     d2a:	d101      	bne.n	d30 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     d2c:	2104      	movs	r1, #4
     d2e:	e7eb      	b.n	d08 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     d30:	4613      	mov	r3, r2
     d32:	2203      	movs	r2, #3
     d34:	e7f0      	b.n	d18 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     d36:	2205      	movs	r2, #5
     d38:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d3c:	e7ec      	b.n	d18 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     d3e:	2207      	movs	r2, #7
     d40:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d44:	e7e8      	b.n	d18 <cbvprintf+0x270>
		conv->unsupported = true;
     d46:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     d4a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     d4e:	f023 0302 	bic.w	r3, r3, #2
     d52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     d56:	f043 0302 	orr.w	r3, r3, #2
     d5a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     d5e:	e7a6      	b.n	cae <cbvprintf+0x206>
     d60:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     d64:	2920      	cmp	r1, #32
     d66:	f200 8084 	bhi.w	e72 <cbvprintf+0x3ca>
     d6a:	a001      	add	r0, pc, #4	; (adr r0, d70 <cbvprintf+0x2c8>)
     d6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     d70:	00000e35 	.word	0x00000e35
     d74:	00000e73 	.word	0x00000e73
     d78:	00000e73 	.word	0x00000e73
     d7c:	00000e73 	.word	0x00000e73
     d80:	00000e73 	.word	0x00000e73
     d84:	00000e73 	.word	0x00000e73
     d88:	00000e73 	.word	0x00000e73
     d8c:	00000e73 	.word	0x00000e73
     d90:	00000e73 	.word	0x00000e73
     d94:	00000cd1 	.word	0x00000cd1
     d98:	00000e73 	.word	0x00000e73
     d9c:	00000e35 	.word	0x00000e35
     da0:	00000df5 	.word	0x00000df5
     da4:	00000cd1 	.word	0x00000cd1
     da8:	00000cd1 	.word	0x00000cd1
     dac:	00000cd1 	.word	0x00000cd1
     db0:	00000e73 	.word	0x00000e73
     db4:	00000df5 	.word	0x00000df5
     db8:	00000e73 	.word	0x00000e73
     dbc:	00000e73 	.word	0x00000e73
     dc0:	00000e73 	.word	0x00000e73
     dc4:	00000e73 	.word	0x00000e73
     dc8:	00000e3d 	.word	0x00000e3d
     dcc:	00000e35 	.word	0x00000e35
     dd0:	00000e59 	.word	0x00000e59
     dd4:	00000e73 	.word	0x00000e73
     dd8:	00000e73 	.word	0x00000e73
     ddc:	00000e59 	.word	0x00000e59
     de0:	00000e73 	.word	0x00000e73
     de4:	00000e35 	.word	0x00000e35
     de8:	00000e73 	.word	0x00000e73
     dec:	00000e73 	.word	0x00000e73
     df0:	00000e35 	.word	0x00000e35
		conv->specifier_cat = SPECIFIER_SINT;
     df4:	2001      	movs	r0, #1
     df6:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     dfa:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     dfe:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     e02:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     e04:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     e08:	bf02      	ittt	eq
     e0a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     e0e:	f041 0101 	orreq.w	r1, r1, #1
     e12:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     e16:	2a63      	cmp	r2, #99	; 0x63
     e18:	d131      	bne.n	e7e <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
     e1a:	3b00      	subs	r3, #0
     e1c:	bf18      	it	ne
     e1e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     e20:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     e24:	f3c2 0140 	ubfx	r1, r2, #1, #1
     e28:	430b      	orrs	r3, r1
     e2a:	f363 0241 	bfi	r2, r3, #1, #1
     e2e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     e32:	e6d8      	b.n	be6 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     e34:	2002      	movs	r0, #2
     e36:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     e3a:	e7de      	b.n	dfa <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
     e3c:	2103      	movs	r1, #3
     e3e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     e42:	f003 0378 	and.w	r3, r3, #120	; 0x78
     e46:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     e4a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     e4e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     e50:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     e54:	4143      	adcs	r3, r0
     e56:	e7e3      	b.n	e20 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
     e58:	2103      	movs	r1, #3
     e5a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     e5e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     e62:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     e66:	bf14      	ite	ne
     e68:	2301      	movne	r3, #1
     e6a:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
     e6c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     e70:	e7d6      	b.n	e20 <cbvprintf+0x378>
		conv->invalid = true;
     e72:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     e76:	f043 0301 	orr.w	r3, r3, #1
     e7a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     e7e:	2300      	movs	r3, #0
     e80:	e7ce      	b.n	e20 <cbvprintf+0x378>
		} else if (conv->width_present) {
     e82:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     e86:	2a00      	cmp	r2, #0
		int width = -1;
     e88:	bfac      	ite	ge
     e8a:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
     e8e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
     e92:	e6ba      	b.n	c0a <cbvprintf+0x162>
		} else if (conv->prec_present) {
     e94:	079b      	lsls	r3, r3, #30
     e96:	f57f aec7 	bpl.w	c28 <cbvprintf+0x180>
			precision = conv->prec_value;
     e9a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
     e9e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     ea0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     ea4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
     ea8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
     eac:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     eb0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     eb2:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     eb6:	d136      	bne.n	f26 <cbvprintf+0x47e>
			switch (length_mod) {
     eb8:	1ed3      	subs	r3, r2, #3
     eba:	2b04      	cmp	r3, #4
     ebc:	d820      	bhi.n	f00 <cbvprintf+0x458>
     ebe:	e8df f003 	tbb	[pc, r3]
     ec2:	0703      	.short	0x0703
     ec4:	1f07      	.short	0x1f07
     ec6:	1f          	.byte	0x1f
     ec7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     ec8:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     ecc:	17c1      	asrs	r1, r0, #31
     ece:	e004      	b.n	eda <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
     ed0:	3407      	adds	r4, #7
     ed2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     ed6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     eda:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     ede:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     ee2:	f013 0603 	ands.w	r6, r3, #3
     ee6:	d054      	beq.n	f92 <cbvprintf+0x4ea>
			OUTS(sp, fp);
     ee8:	463b      	mov	r3, r7
     eea:	4652      	mov	r2, sl
     eec:	4659      	mov	r1, fp
     eee:	9802      	ldr	r0, [sp, #8]
     ef0:	f007 fb1c 	bl	852c <outs>
     ef4:	2800      	cmp	r0, #0
     ef6:	f2c0 8143 	blt.w	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
     efa:	4405      	add	r5, r0
			continue;
     efc:	46ba      	mov	sl, r7
     efe:	e5db      	b.n	ab8 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     f00:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     f04:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     f06:	ea4f 71e0 	mov.w	r1, r0, asr #31
     f0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     f0e:	d105      	bne.n	f1c <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
     f10:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     f14:	930a      	str	r3, [sp, #40]	; 0x28
     f16:	2300      	movs	r3, #0
     f18:	930b      	str	r3, [sp, #44]	; 0x2c
     f1a:	e7e0      	b.n	ede <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
     f1c:	2a02      	cmp	r2, #2
     f1e:	d1de      	bne.n	ede <cbvprintf+0x436>
				value->sint = (short)value->sint;
     f20:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     f24:	e7d2      	b.n	ecc <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
     f26:	2b02      	cmp	r3, #2
     f28:	d123      	bne.n	f72 <cbvprintf+0x4ca>
			switch (length_mod) {
     f2a:	1ed3      	subs	r3, r2, #3
     f2c:	2b04      	cmp	r3, #4
     f2e:	d813      	bhi.n	f58 <cbvprintf+0x4b0>
     f30:	e8df f003 	tbb	[pc, r3]
     f34:	120a0a03 	.word	0x120a0a03
     f38:	12          	.byte	0x12
     f39:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
     f3a:	2100      	movs	r1, #0
					value->uint = (wchar_t)va_arg(ap,
     f3c:	6820      	ldr	r0, [r4, #0]
     f3e:	1d23      	adds	r3, r4, #4
     f40:	900a      	str	r0, [sp, #40]	; 0x28
     f42:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     f44:	461c      	mov	r4, r3
     f46:	e7ca      	b.n	ede <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
     f48:	3407      	adds	r4, #7
     f4a:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     f4e:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     f52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     f56:	e7f5      	b.n	f44 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
     f58:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     f5c:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     f5e:	930a      	str	r3, [sp, #40]	; 0x28
     f60:	f04f 0300 	mov.w	r3, #0
     f64:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     f66:	d0d3      	beq.n	f10 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
     f68:	2a02      	cmp	r2, #2
     f6a:	d1b8      	bne.n	ede <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
     f6c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     f70:	e7d0      	b.n	f14 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
     f72:	2b04      	cmp	r3, #4
     f74:	d107      	bne.n	f86 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
     f76:	3407      	adds	r4, #7
     f78:	f024 0407 	bic.w	r4, r4, #7
     f7c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     f80:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     f84:	e7ab      	b.n	ede <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
     f86:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     f88:	bf04      	itt	eq
     f8a:	f854 3b04 	ldreq.w	r3, [r4], #4
     f8e:	930a      	streq	r3, [sp, #40]	; 0x28
     f90:	e7a5      	b.n	ede <cbvprintf+0x436>
		switch (conv->specifier) {
     f92:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     f96:	2878      	cmp	r0, #120	; 0x78
     f98:	d8b0      	bhi.n	efc <cbvprintf+0x454>
     f9a:	2862      	cmp	r0, #98	; 0x62
     f9c:	d822      	bhi.n	fe4 <cbvprintf+0x53c>
     f9e:	2825      	cmp	r0, #37	; 0x25
     fa0:	f43f ad93 	beq.w	aca <cbvprintf+0x22>
     fa4:	2858      	cmp	r0, #88	; 0x58
     fa6:	d1a9      	bne.n	efc <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
     fa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     fac:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     fb0:	9300      	str	r3, [sp, #0]
     fb2:	aa0c      	add	r2, sp, #48	; 0x30
     fb4:	ab04      	add	r3, sp, #16
     fb6:	f007 fa6e 	bl	8496 <encode_uint>
     fba:	4682      	mov	sl, r0
			if (precision >= 0) {
     fbc:	f1b8 0f00 	cmp.w	r8, #0
     fc0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     fc4:	db0c      	blt.n	fe0 <cbvprintf+0x538>
				conv->flag_zero = false;
     fc6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     fca:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     fce:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     fd2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     fd4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     fd8:	d902      	bls.n	fe0 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
     fda:	eba8 0303 	sub.w	r3, r8, r3
     fde:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     fe0:	4680      	mov	r8, r0
     fe2:	e03d      	b.n	1060 <CONFIG_MAIN_STACK_SIZE+0x60>
     fe4:	3863      	subs	r0, #99	; 0x63
     fe6:	2815      	cmp	r0, #21
     fe8:	d888      	bhi.n	efc <cbvprintf+0x454>
     fea:	a101      	add	r1, pc, #4	; (adr r1, ff0 <cbvprintf+0x548>)
     fec:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     ff0:	00001071 	.word	0x00001071
     ff4:	000010d5 	.word	0x000010d5
     ff8:	00000efd 	.word	0x00000efd
     ffc:	00000efd 	.word	0x00000efd
    1000:	00000efd 	.word	0x00000efd
    1004:	00000efd 	.word	0x00000efd
    1008:	000010d5 	.word	0x000010d5
    100c:	00000efd 	.word	0x00000efd
    1010:	00000efd 	.word	0x00000efd
    1014:	00000efd 	.word	0x00000efd
    1018:	00000efd 	.word	0x00000efd
    101c:	00001133 	.word	0x00001133
    1020:	00001101 	.word	0x00001101
    1024:	00001105 	.word	0x00001105
    1028:	00000efd 	.word	0x00000efd
    102c:	00000efd 	.word	0x00000efd
    1030:	00001049 	.word	0x00001049
    1034:	00000efd 	.word	0x00000efd
    1038:	00001101 	.word	0x00001101
    103c:	00000efd 	.word	0x00000efd
    1040:	00000efd 	.word	0x00000efd
    1044:	00001101 	.word	0x00001101
			if (precision >= 0) {
    1048:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    104c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1050:	db0a      	blt.n	1068 <CONFIG_MAIN_STACK_SIZE+0x68>
				len = strnlen(bps, precision);
    1052:	4641      	mov	r1, r8
    1054:	4650      	mov	r0, sl
    1056:	f007 fb6b 	bl	8730 <strnlen>
		char sign = 0;
    105a:	2600      	movs	r6, #0
			bpe = bps + len;
    105c:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    1060:	f1ba 0f00 	cmp.w	sl, #0
    1064:	d10c      	bne.n	1080 <CONFIG_MAIN_STACK_SIZE+0x80>
    1066:	e749      	b.n	efc <cbvprintf+0x454>
				len = strlen(bps);
    1068:	4650      	mov	r0, sl
    106a:	f007 fb5a 	bl	8722 <strlen>
    106e:	e7f4      	b.n	105a <CONFIG_MAIN_STACK_SIZE+0x5a>
			break;
    1070:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bpe = buf + 1;
    1074:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1078:	f88d 3010 	strb.w	r3, [sp, #16]
			bps = buf;
    107c:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    1080:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1084:	b106      	cbz	r6, 1088 <CONFIG_MAIN_STACK_SIZE+0x88>
			nj_len += 1U;
    1086:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1088:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    108c:	06d0      	lsls	r0, r2, #27
    108e:	d56b      	bpl.n	1168 <CONFIG_MAIN_STACK_SIZE+0x168>
			nj_len += 2U;
    1090:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1092:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1094:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    1096:	bf48      	it	mi
    1098:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    109a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    109c:	bf48      	it	mi
    109e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    10a0:	f1b9 0f00 	cmp.w	r9, #0
    10a4:	dd79      	ble.n	119a <CONFIG_MAIN_STACK_SIZE+0x19a>
			if (!conv->flag_dash) {
    10a6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    10aa:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    10ae:	f3c2 0380 	ubfx	r3, r2, #2, #1
    10b2:	9303      	str	r3, [sp, #12]
    10b4:	0753      	lsls	r3, r2, #29
    10b6:	d470      	bmi.n	119a <CONFIG_MAIN_STACK_SIZE+0x19a>
				if (conv->flag_zero) {
    10b8:	0650      	lsls	r0, r2, #25
    10ba:	d564      	bpl.n	1186 <CONFIG_MAIN_STACK_SIZE+0x186>
					if (sign != 0) {
    10bc:	b146      	cbz	r6, 10d0 <CONFIG_MAIN_STACK_SIZE+0xd0>
						OUTC(sign);
    10be:	4659      	mov	r1, fp
    10c0:	4630      	mov	r0, r6
    10c2:	9b02      	ldr	r3, [sp, #8]
    10c4:	4798      	blx	r3
    10c6:	2800      	cmp	r0, #0
    10c8:	db5a      	blt.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
						sign = 0;
    10ca:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    10cc:	3501      	adds	r5, #1
						sign = 0;
    10ce:	461e      	mov	r6, r3
					pad = '0';
    10d0:	2330      	movs	r3, #48	; 0x30
    10d2:	e059      	b.n	1188 <CONFIG_MAIN_STACK_SIZE+0x188>
			if (conv->flag_plus) {
    10d4:	071e      	lsls	r6, r3, #28
    10d6:	d411      	bmi.n	10fc <CONFIG_MAIN_STACK_SIZE+0xfc>
				sign = ' ';
    10d8:	f013 0610 	ands.w	r6, r3, #16
    10dc:	bf18      	it	ne
    10de:	2620      	movne	r6, #32
			sint = value->sint;
    10e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    10e4:	2a00      	cmp	r2, #0
    10e6:	f173 0100 	sbcs.w	r1, r3, #0
    10ea:	f6bf af5d 	bge.w	fa8 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
    10ee:	4252      	negs	r2, r2
    10f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    10f4:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    10f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    10fa:	e755      	b.n	fa8 <cbvprintf+0x500>
				sign = '+';
    10fc:	262b      	movs	r6, #43	; 0x2b
    10fe:	e7ef      	b.n	10e0 <CONFIG_MAIN_STACK_SIZE+0xe0>
		switch (conv->specifier) {
    1100:	2600      	movs	r6, #0
    1102:	e751      	b.n	fa8 <cbvprintf+0x500>
			if (value->ptr != NULL) {
    1104:	980a      	ldr	r0, [sp, #40]	; 0x28
    1106:	b348      	cbz	r0, 115c <CONFIG_MAIN_STACK_SIZE+0x15c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1108:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    110c:	9300      	str	r3, [sp, #0]
    110e:	2100      	movs	r1, #0
    1110:	ab04      	add	r3, sp, #16
    1112:	aa0c      	add	r2, sp, #48	; 0x30
    1114:	f007 f9bf 	bl	8496 <encode_uint>
				conv->altform_0c = true;
    1118:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    111c:	4682      	mov	sl, r0
				conv->altform_0c = true;
    111e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1122:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1126:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    112a:	2600      	movs	r6, #0
				conv->altform_0c = true;
    112c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    1130:	e744      	b.n	fbc <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
    1132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1134:	2a07      	cmp	r2, #7
    1136:	f63f aee1 	bhi.w	efc <cbvprintf+0x454>
    113a:	e8df f002 	tbb	[pc, r2]
    113e:	040d      	.short	0x040d
    1140:	08080d06 	.word	0x08080d06
    1144:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    1146:	701d      	strb	r5, [r3, #0]
		break;
    1148:	e6d8      	b.n	efc <cbvprintf+0x454>
		*(short *)dp = (short)count;
    114a:	801d      	strh	r5, [r3, #0]
		break;
    114c:	e6d6      	b.n	efc <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
    114e:	4628      	mov	r0, r5
    1150:	17e9      	asrs	r1, r5, #31
    1152:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    1156:	e6d1      	b.n	efc <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1158:	601d      	str	r5, [r3, #0]
		break;
    115a:	e6cf      	b.n	efc <cbvprintf+0x454>
			bpe = bps + 5;
    115c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1224 <CONFIG_MAIN_STACK_SIZE+0x224>
    1160:	4606      	mov	r6, r0
			bps = "(nil)";
    1162:	f1a8 0a05 	sub.w	sl, r8, #5
    1166:	e78b      	b.n	1080 <CONFIG_MAIN_STACK_SIZE+0x80>
		} else if (conv->altform_0) {
    1168:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    116a:	bf48      	it	mi
    116c:	3301      	addmi	r3, #1
    116e:	e790      	b.n	1092 <CONFIG_MAIN_STACK_SIZE+0x92>
					OUTC(pad);
    1170:	4618      	mov	r0, r3
    1172:	9303      	str	r3, [sp, #12]
    1174:	4659      	mov	r1, fp
    1176:	9b02      	ldr	r3, [sp, #8]
    1178:	4798      	blx	r3
    117a:	2800      	cmp	r0, #0
    117c:	9b03      	ldr	r3, [sp, #12]
    117e:	da04      	bge.n	118a <CONFIG_MAIN_STACK_SIZE+0x18a>
#undef OUTS
#undef OUTC
}
    1180:	b011      	add	sp, #68	; 0x44
    1182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1186:	2320      	movs	r3, #32
    1188:	444d      	add	r5, r9
    118a:	464a      	mov	r2, r9
				while (width-- > 0) {
    118c:	2a00      	cmp	r2, #0
    118e:	eba5 0109 	sub.w	r1, r5, r9
    1192:	f109 39ff 	add.w	r9, r9, #4294967295
    1196:	dceb      	bgt.n	1170 <CONFIG_MAIN_STACK_SIZE+0x170>
    1198:	460d      	mov	r5, r1
		if (sign != 0) {
    119a:	b136      	cbz	r6, 11aa <CONFIG_MAIN_STACK_SIZE+0x1aa>
			OUTC(sign);
    119c:	4659      	mov	r1, fp
    119e:	4630      	mov	r0, r6
    11a0:	9b02      	ldr	r3, [sp, #8]
    11a2:	4798      	blx	r3
    11a4:	2800      	cmp	r0, #0
    11a6:	dbeb      	blt.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
    11a8:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    11aa:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    11ae:	06d9      	lsls	r1, r3, #27
    11b0:	d401      	bmi.n	11b6 <CONFIG_MAIN_STACK_SIZE+0x1b6>
    11b2:	071a      	lsls	r2, r3, #28
    11b4:	d506      	bpl.n	11c4 <CONFIG_MAIN_STACK_SIZE+0x1c4>
				OUTC('0');
    11b6:	4659      	mov	r1, fp
    11b8:	2030      	movs	r0, #48	; 0x30
    11ba:	9b02      	ldr	r3, [sp, #8]
    11bc:	4798      	blx	r3
    11be:	2800      	cmp	r0, #0
    11c0:	dbde      	blt.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
    11c2:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    11c4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    11c8:	06db      	lsls	r3, r3, #27
    11ca:	d507      	bpl.n	11dc <CONFIG_MAIN_STACK_SIZE+0x1dc>
				OUTC(conv->specifier);
    11cc:	4659      	mov	r1, fp
    11ce:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    11d2:	9b02      	ldr	r3, [sp, #8]
    11d4:	4798      	blx	r3
    11d6:	2800      	cmp	r0, #0
    11d8:	dbd2      	blt.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
    11da:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    11dc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    11de:	442e      	add	r6, r5
    11e0:	1b73      	subs	r3, r6, r5
    11e2:	2b00      	cmp	r3, #0
    11e4:	dc16      	bgt.n	1214 <CONFIG_MAIN_STACK_SIZE+0x214>
			OUTS(bps, bpe);
    11e6:	4643      	mov	r3, r8
    11e8:	4652      	mov	r2, sl
    11ea:	4659      	mov	r1, fp
    11ec:	9802      	ldr	r0, [sp, #8]
    11ee:	f007 f99d 	bl	852c <outs>
    11f2:	2800      	cmp	r0, #0
    11f4:	dbc4      	blt.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
    11f6:	4405      	add	r5, r0
		while (width > 0) {
    11f8:	44a9      	add	r9, r5
    11fa:	eba9 0305 	sub.w	r3, r9, r5
    11fe:	2b00      	cmp	r3, #0
    1200:	f77f ae7c 	ble.w	efc <cbvprintf+0x454>
			OUTC(' ');
    1204:	4659      	mov	r1, fp
    1206:	2020      	movs	r0, #32
    1208:	9b02      	ldr	r3, [sp, #8]
    120a:	4798      	blx	r3
    120c:	2800      	cmp	r0, #0
    120e:	dbb7      	blt.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
    1210:	3501      	adds	r5, #1
			--width;
    1212:	e7f2      	b.n	11fa <CONFIG_MAIN_STACK_SIZE+0x1fa>
				OUTC('0');
    1214:	4659      	mov	r1, fp
    1216:	2030      	movs	r0, #48	; 0x30
    1218:	9b02      	ldr	r3, [sp, #8]
    121a:	4798      	blx	r3
    121c:	2800      	cmp	r0, #0
    121e:	dbaf      	blt.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
    1220:	3501      	adds	r5, #1
    1222:	e7dd      	b.n	11e0 <CONFIG_MAIN_STACK_SIZE+0x1e0>
    1224:	000092f7 	.word	0x000092f7

00001228 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    1228:	4604      	mov	r4, r0
    122a:	b508      	push	{r3, lr}
	__asm__ volatile(
    122c:	f04f 0220 	mov.w	r2, #32
    1230:	f3ef 8311 	mrs	r3, BASEPRI
    1234:	f382 8811 	msr	BASEPRI, r2
    1238:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    123c:	f007 fa1d 	bl	867a <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    1240:	4620      	mov	r0, r4
    1242:	f001 fbd1 	bl	29e8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1246:	4803      	ldr	r0, [pc, #12]	; (1254 <sys_reboot+0x2c>)
    1248:	f007 f8ba 	bl	83c0 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    124c:	f001 f89c 	bl	2388 <arch_cpu_idle>
    1250:	e7fc      	b.n	124c <sys_reboot+0x24>
    1252:	bf00      	nop
    1254:	000092f8 	.word	0x000092f8

00001258 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    1258:	6802      	ldr	r2, [r0, #0]
{
    125a:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    125c:	0953      	lsrs	r3, r2, #5
{
    125e:	4604      	mov	r4, r0
    switch (port)
    1260:	d029      	beq.n	12b6 <nrf_gpio_pin_port_decode+0x5e>
    1262:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    1264:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1268:	bf18      	it	ne
    126a:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    126c:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
    1270:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    1272:	07db      	lsls	r3, r3, #31
    1274:	d40a      	bmi.n	128c <nrf_gpio_pin_port_decode+0x34>
    1276:	4912      	ldr	r1, [pc, #72]	; (12c0 <nrf_gpio_pin_port_decode+0x68>)
    1278:	4812      	ldr	r0, [pc, #72]	; (12c4 <nrf_gpio_pin_port_decode+0x6c>)
    127a:	f44f 7205 	mov.w	r2, #532	; 0x214
    127e:	f007 f89f 	bl	83c0 <printk>
    1282:	f44f 7105 	mov.w	r1, #532	; 0x214
    1286:	480e      	ldr	r0, [pc, #56]	; (12c0 <nrf_gpio_pin_port_decode+0x68>)
    1288:	f007 f966 	bl	8558 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    128c:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    128e:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    1292:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    1294:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    1296:	d00c      	beq.n	12b2 <nrf_gpio_pin_port_decode+0x5a>
    1298:	2b01      	cmp	r3, #1
    129a:	d00f      	beq.n	12bc <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
    129c:	4908      	ldr	r1, [pc, #32]	; (12c0 <nrf_gpio_pin_port_decode+0x68>)
    129e:	4809      	ldr	r0, [pc, #36]	; (12c4 <nrf_gpio_pin_port_decode+0x6c>)
    12a0:	f240 2219 	movw	r2, #537	; 0x219
    12a4:	f007 f88c 	bl	83c0 <printk>
    12a8:	f240 2119 	movw	r1, #537	; 0x219
    12ac:	4804      	ldr	r0, [pc, #16]	; (12c0 <nrf_gpio_pin_port_decode+0x68>)
    12ae:	f007 f953 	bl	8558 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    12b2:	4805      	ldr	r0, [pc, #20]	; (12c8 <nrf_gpio_pin_port_decode+0x70>)
}
    12b4:	bd10      	pop	{r4, pc}
    switch (port)
    12b6:	f04f 33ff 	mov.w	r3, #4294967295
    12ba:	e7d7      	b.n	126c <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    12bc:	4803      	ldr	r0, [pc, #12]	; (12cc <nrf_gpio_pin_port_decode+0x74>)
    12be:	e7f9      	b.n	12b4 <nrf_gpio_pin_port_decode+0x5c>
    12c0:	00009321 	.word	0x00009321
    12c4:	00009292 	.word	0x00009292
    12c8:	50842500 	.word	0x50842500
    12cc:	50842800 	.word	0x50842800

000012d0 <nordicsemi_nrf53_init>:

#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf53_init(const struct device *arg)
{
    12d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    12d2:	f04f 0320 	mov.w	r3, #32
    12d6:	f3ef 8711 	mrs	r7, BASEPRI
    12da:	f383 8811 	msr	BASEPRI, r3
    12de:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    12e2:	2401      	movs	r4, #1
    12e4:	4b19      	ldr	r3, [pc, #100]	; (134c <nordicsemi_nrf53_init+0x7c>)
    12e6:	2600      	movs	r6, #0
    12e8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    12ec:	2302      	movs	r3, #2
    12ee:	4d18      	ldr	r5, [pc, #96]	; (1350 <nordicsemi_nrf53_init+0x80>)
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    12f0:	a801      	add	r0, sp, #4
    12f2:	f8c5 36d0 	str.w	r3, [r5, #1744]	; 0x6d0
			NRF_OSCILLATORS_LFXO_CAP_7PF :
		IS_ENABLED(CONFIG_SOC_LFXO_CAP_INT_9PF) ?
			NRF_OSCILLATORS_LFXO_CAP_9PF :
			NRF_OSCILLATORS_LFXO_CAP_EXTERNAL);
	/* This can only be done from secure code. */
	nrf_gpio_pin_mcu_select(PIN_XL1, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
    12f6:	9601      	str	r6, [sp, #4]
    12f8:	f7ff ffae 	bl	1258 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    12fc:	9b01      	ldr	r3, [sp, #4]
    12fe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    1302:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    1306:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    130a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    130e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    1312:	a801      	add	r0, sp, #4
    1314:	9401      	str	r4, [sp, #4]
    1316:	f7ff ff9f 	bl	1258 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    131a:	9b01      	ldr	r3, [sp, #4]
    131c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    1320:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    1324:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    1328:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    132c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    1330:	f8c5 4704 	str.w	r4, [r5, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    1334:	f8c5 4904 	str.w	r4, [r5, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    1338:	f8c5 4b00 	str.w	r4, [r5, #2816]	; 0xb00
	__asm__ volatile(
    133c:	f387 8811 	msr	BASEPRI, r7
    1340:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1344:	4630      	mov	r0, r6
    1346:	b003      	add	sp, #12
    1348:	bdf0      	pop	{r4, r5, r6, r7, pc}
    134a:	bf00      	nop
    134c:	50001000 	.word	0x50001000
    1350:	50004000 	.word	0x50004000

00001354 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1354:	b148      	cbz	r0, 136a <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    1356:	4b05      	ldr	r3, [pc, #20]	; (136c <arch_busy_wait+0x18>)
    1358:	681a      	ldr	r2, [r3, #0]
    135a:	4b05      	ldr	r3, [pc, #20]	; (1370 <arch_busy_wait+0x1c>)
    135c:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1360:	4b04      	ldr	r3, [pc, #16]	; (1374 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    1362:	4350      	muls	r0, r2
    1364:	f043 0301 	orr.w	r3, r3, #1
    1368:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    136a:	4770      	bx	lr
    136c:	20000040 	.word	0x20000040
    1370:	000f4240 	.word	0x000f4240
    1374:	00008e60 	.word	0x00008e60

00001378 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
    1378:	b084      	sub	sp, #16
    137a:	ab04      	add	r3, sp, #16
    137c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    1380:	f89d 3004 	ldrb.w	r3, [sp, #4]
    1384:	2b06      	cmp	r3, #6
    1386:	d107      	bne.n	1398 <pm_power_state_set+0x20>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    1388:	2201      	movs	r2, #1
    138a:	4b04      	ldr	r3, [pc, #16]	; (139c <pm_power_state_set+0x24>)
    138c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1390:	f3bf 8f4f 	dsb	sy
        __WFE();
    1394:	bf20      	wfe
    while (true)
    1396:	e7fd      	b.n	1394 <pm_power_state_set+0x1c>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    1398:	b004      	add	sp, #16
    139a:	4770      	bx	lr
    139c:	50004000 	.word	0x50004000

000013a0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    13a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13a2:	4605      	mov	r5, r0
	__asm__ volatile(
    13a4:	f04f 0320 	mov.w	r3, #32
    13a8:	f3ef 8611 	mrs	r6, BASEPRI
    13ac:	f383 8811 	msr	BASEPRI, r3
    13b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    13b4:	4819      	ldr	r0, [pc, #100]	; (141c <pm_state_notify+0x7c>)
    13b6:	f002 fd79 	bl	3eac <z_spin_lock_valid>
    13ba:	b940      	cbnz	r0, 13ce <pm_state_notify+0x2e>
    13bc:	4918      	ldr	r1, [pc, #96]	; (1420 <pm_state_notify+0x80>)
    13be:	4819      	ldr	r0, [pc, #100]	; (1424 <pm_state_notify+0x84>)
    13c0:	2281      	movs	r2, #129	; 0x81
    13c2:	f006 fffd 	bl	83c0 <printk>
    13c6:	2181      	movs	r1, #129	; 0x81
    13c8:	4815      	ldr	r0, [pc, #84]	; (1420 <pm_state_notify+0x80>)
    13ca:	f007 f8c5 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    13ce:	4813      	ldr	r0, [pc, #76]	; (141c <pm_state_notify+0x7c>)
    13d0:	f002 fd88 	bl	3ee4 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    13d4:	4b14      	ldr	r3, [pc, #80]	; (1428 <pm_state_notify+0x88>)
    13d6:	681c      	ldr	r4, [r3, #0]
    13d8:	2c00      	cmp	r4, #0
    13da:	bf38      	it	cc
    13dc:	2400      	movcc	r4, #0
    13de:	b15c      	cbz	r4, 13f8 <pm_state_notify+0x58>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    13e0:	4f12      	ldr	r7, [pc, #72]	; (142c <pm_state_notify+0x8c>)
			callback = notifier->state_exit;
    13e2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    13e6:	2d00      	cmp	r5, #0
    13e8:	bf08      	it	eq
    13ea:	4613      	moveq	r3, r2
		if (callback) {
    13ec:	b10b      	cbz	r3, 13f2 <pm_state_notify+0x52>
			callback(z_power_state.state);
    13ee:	7838      	ldrb	r0, [r7, #0]
    13f0:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    13f2:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    13f4:	2c00      	cmp	r4, #0
    13f6:	d1f4      	bne.n	13e2 <pm_state_notify+0x42>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    13f8:	4808      	ldr	r0, [pc, #32]	; (141c <pm_state_notify+0x7c>)
    13fa:	f002 fd65 	bl	3ec8 <z_spin_unlock_valid>
    13fe:	b940      	cbnz	r0, 1412 <pm_state_notify+0x72>
    1400:	4907      	ldr	r1, [pc, #28]	; (1420 <pm_state_notify+0x80>)
    1402:	4808      	ldr	r0, [pc, #32]	; (1424 <pm_state_notify+0x84>)
    1404:	22ac      	movs	r2, #172	; 0xac
    1406:	f006 ffdb 	bl	83c0 <printk>
    140a:	21ac      	movs	r1, #172	; 0xac
    140c:	4804      	ldr	r0, [pc, #16]	; (1420 <pm_state_notify+0x80>)
    140e:	f007 f8a3 	bl	8558 <assert_post_action>
	__asm__ volatile(
    1412:	f386 8811 	msr	BASEPRI, r6
    1416:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    141a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    141c:	20000278 	.word	0x20000278
    1420:	000092cc 	.word	0x000092cc
    1424:	00009292 	.word	0x00009292
    1428:	2000027c 	.word	0x2000027c
    142c:	20000284 	.word	0x20000284

00001430 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    1430:	4b08      	ldr	r3, [pc, #32]	; (1454 <pm_system_resume+0x24>)
{
    1432:	b510      	push	{r4, lr}
	if (!post_ops_done) {
    1434:	681c      	ldr	r4, [r3, #0]
    1436:	b95c      	cbnz	r4, 1450 <pm_system_resume+0x20>
		post_ops_done = 1;
    1438:	2201      	movs	r2, #1
    143a:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
    143c:	4b06      	ldr	r3, [pc, #24]	; (1458 <pm_system_resume+0x28>)
    143e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1442:	f007 f893 	bl	856c <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    1446:	4620      	mov	r0, r4
	}
}
    1448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
    144c:	f7ff bfa8 	b.w	13a0 <pm_state_notify>
}
    1450:	bd10      	pop	{r4, pc}
    1452:	bf00      	nop
    1454:	20000004 	.word	0x20000004
    1458:	20000284 	.word	0x20000284

0000145c <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    145c:	b5f0      	push	{r4, r5, r6, r7, lr}
    145e:	b085      	sub	sp, #20
	z_power_state = pm_policy_next_state(ticks);
    1460:	466e      	mov	r6, sp
    1462:	4c1d      	ldr	r4, [pc, #116]	; (14d8 <pm_system_suspend+0x7c>)
    1464:	4601      	mov	r1, r0
{
    1466:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    1468:	4630      	mov	r0, r6
    146a:	f007 f897 	bl	859c <pm_policy_next_state>
    146e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1472:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    1476:	7820      	ldrb	r0, [r4, #0]
    1478:	b360      	cbz	r0, 14d4 <pm_system_suspend+0x78>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
    147a:	2000      	movs	r0, #0
    147c:	4b17      	ldr	r3, [pc, #92]	; (14dc <pm_system_suspend+0x80>)
    147e:	6018      	str	r0, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    1480:	1c6b      	adds	r3, r5, #1
    1482:	d019      	beq.n	14b8 <pm_system_suspend+0x5c>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
    1484:	4291      	cmp	r1, r2
    1486:	d208      	bcs.n	149a <pm_system_suspend+0x3e>
    1488:	4915      	ldr	r1, [pc, #84]	; (14e0 <pm_system_suspend+0x84>)
    148a:	4816      	ldr	r0, [pc, #88]	; (14e4 <pm_system_suspend+0x88>)
    148c:	22bd      	movs	r2, #189	; 0xbd
    148e:	f006 ff97 	bl	83c0 <printk>
    1492:	21bd      	movs	r1, #189	; 0xbd
    1494:	4812      	ldr	r0, [pc, #72]	; (14e0 <pm_system_suspend+0x84>)
    1496:	f007 f85f 	bl	8558 <assert_post_action>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    149a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    149e:	2100      	movs	r1, #0
    14a0:	68a7      	ldr	r7, [r4, #8]
    14a2:	4811      	ldr	r0, [pc, #68]	; (14e8 <pm_system_suspend+0x8c>)
    14a4:	2300      	movs	r3, #0
    14a6:	fbe6 0107 	umlal	r0, r1, r6, r7
    14aa:	4a10      	ldr	r2, [pc, #64]	; (14ec <pm_system_suspend+0x90>)
    14ac:	f7fe fec6 	bl	23c <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    14b0:	2101      	movs	r1, #1
    14b2:	1a28      	subs	r0, r5, r0
    14b4:	f004 f83a 	bl	552c <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    14b8:	f002 ffe0 	bl	447c <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    14bc:	2001      	movs	r0, #1
    14be:	f7ff ff6f 	bl	13a0 <pm_state_notify>
	pm_power_state_set(z_power_state);
    14c2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    14c6:	f7ff ff57 	bl	1378 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    14ca:	f7ff ffb1 	bl	1430 <pm_system_resume>
	k_sched_unlock();
    14ce:	f003 f9bd 	bl	484c <k_sched_unlock>

	return z_power_state.state;
    14d2:	7820      	ldrb	r0, [r4, #0]
}
    14d4:	b005      	add	sp, #20
    14d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14d8:	20000284 	.word	0x20000284
    14dc:	20000004 	.word	0x20000004
    14e0:	00009358 	.word	0x00009358
    14e4:	00009292 	.word	0x00009292
    14e8:	000f423f 	.word	0x000f423f
    14ec:	000f4240 	.word	0x000f4240

000014f0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    14f0:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    14f2:	4807      	ldr	r0, [pc, #28]	; (1510 <uart_console_init+0x20>)
    14f4:	f002 f9e4 	bl	38c0 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    14f8:	4c06      	ldr	r4, [pc, #24]	; (1514 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    14fa:	4b07      	ldr	r3, [pc, #28]	; (1518 <uart_console_init+0x28>)
    14fc:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    14fe:	4620      	mov	r0, r4
    1500:	f001 fd38 	bl	2f74 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1504:	4620      	mov	r0, r4
    1506:	f7ff f853 	bl	5b0 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    150a:	2000      	movs	r0, #0
    150c:	bd10      	pop	{r4, pc}
    150e:	bf00      	nop
    1510:	00009383 	.word	0x00009383
    1514:	0000151d 	.word	0x0000151d
    1518:	20000290 	.word	0x20000290

0000151c <console_out>:
	if ('\n' == c) {
    151c:	280a      	cmp	r0, #10
{
    151e:	b538      	push	{r3, r4, r5, lr}
    1520:	4604      	mov	r4, r0
    1522:	4d07      	ldr	r5, [pc, #28]	; (1540 <console_out+0x24>)
	if ('\n' == c) {
    1524:	d104      	bne.n	1530 <console_out+0x14>
    1526:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1528:	6883      	ldr	r3, [r0, #8]
    152a:	210d      	movs	r1, #13
    152c:	685b      	ldr	r3, [r3, #4]
    152e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    1530:	6828      	ldr	r0, [r5, #0]
    1532:	6883      	ldr	r3, [r0, #8]
    1534:	b2e1      	uxtb	r1, r4
    1536:	685b      	ldr	r3, [r3, #4]
    1538:	4798      	blx	r3
}
    153a:	4620      	mov	r0, r4
    153c:	bd38      	pop	{r3, r4, r5, pc}
    153e:	bf00      	nop
    1540:	20000290 	.word	0x20000290

00001544 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1548:	4c0e      	ldr	r4, [pc, #56]	; (1584 <onoff_start+0x40>)
{
    154a:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
    154c:	1b05      	subs	r5, r0, r4
    154e:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    1552:	250c      	movs	r5, #12
    1554:	435d      	muls	r5, r3
    1556:	f105 0088 	add.w	r0, r5, #136	; 0x88
{
    155a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    155c:	4420      	add	r0, r4
    155e:	2140      	movs	r1, #64	; 0x40
    1560:	f007 f821 	bl	85a6 <set_starting_state>
	if (err < 0) {
    1564:	1e01      	subs	r1, r0, #0
    1566:	db08      	blt.n	157a <onoff_start+0x36>
	subdata->cb = cb;
    1568:	4b07      	ldr	r3, [pc, #28]	; (1588 <onoff_start+0x44>)
    156a:	442c      	add	r4, r5
	subdata->user_data = user_data;
    156c:	e9c4 3620 	strd	r3, r6, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
    1570:	4b06      	ldr	r3, [pc, #24]	; (158c <onoff_start+0x48>)
    1572:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    1574:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    1578:	4718      	bx	r3
		notify(mgr, err);
    157a:	4638      	mov	r0, r7
    157c:	4633      	mov	r3, r6
}
    157e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    1582:	4718      	bx	r3
    1584:	200002a8 	.word	0x200002a8
    1588:	00008609 	.word	0x00008609
    158c:	00008e7c 	.word	0x00008e7c

00001590 <get_status>:
{
    1590:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    1592:	b2cc      	uxtb	r4, r1
    1594:	2c03      	cmp	r4, #3
{
    1596:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    1598:	d908      	bls.n	15ac <get_status+0x1c>
    159a:	4909      	ldr	r1, [pc, #36]	; (15c0 <get_status+0x30>)
    159c:	4809      	ldr	r0, [pc, #36]	; (15c4 <get_status+0x34>)
    159e:	227e      	movs	r2, #126	; 0x7e
    15a0:	f006 ff0e 	bl	83c0 <printk>
    15a4:	217e      	movs	r1, #126	; 0x7e
    15a6:	4806      	ldr	r0, [pc, #24]	; (15c0 <get_status+0x30>)
    15a8:	f006 ffd6 	bl	8558 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    15ac:	210c      	movs	r1, #12
    15ae:	692b      	ldr	r3, [r5, #16]
    15b0:	fb04 3401 	mla	r4, r4, r1, r3
    15b4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
    15b8:	f000 0007 	and.w	r0, r0, #7
    15bc:	bd38      	pop	{r3, r4, r5, pc}
    15be:	bf00      	nop
    15c0:	0000938a 	.word	0x0000938a
    15c4:	00009292 	.word	0x00009292

000015c8 <stop>:
{
    15c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15ca:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    15cc:	2c03      	cmp	r4, #3
{
    15ce:	4605      	mov	r5, r0
    15d0:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    15d2:	6907      	ldr	r7, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    15d4:	d90a      	bls.n	15ec <stop+0x24>
    15d6:	4919      	ldr	r1, [pc, #100]	; (163c <stop+0x74>)
    15d8:	4819      	ldr	r0, [pc, #100]	; (1640 <stop+0x78>)
    15da:	f240 1253 	movw	r2, #339	; 0x153
    15de:	f006 feef 	bl	83c0 <printk>
    15e2:	f240 1153 	movw	r1, #339	; 0x153
    15e6:	4815      	ldr	r0, [pc, #84]	; (163c <stop+0x74>)
    15e8:	f006 ffb6 	bl	8558 <assert_post_action>
	__asm__ volatile(
    15ec:	f04f 0320 	mov.w	r3, #32
    15f0:	f3ef 8211 	mrs	r2, BASEPRI
    15f4:	f383 8811 	msr	BASEPRI, r3
    15f8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    15fc:	230c      	movs	r3, #12
    15fe:	fb03 7104 	mla	r1, r3, r4, r7
    1602:	f8d1 1088 	ldr.w	r1, [r1, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    1606:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    160a:	d001      	beq.n	1610 <stop+0x48>
    160c:	428e      	cmp	r6, r1
    160e:	d112      	bne.n	1636 <stop+0x6e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    1610:	2101      	movs	r1, #1
	int err = 0;
    1612:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    1614:	fb03 7304 	mla	r3, r3, r4, r7
    1618:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	__asm__ volatile(
    161c:	f382 8811 	msr	BASEPRI, r2
    1620:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    1624:	b930      	cbnz	r0, 1634 <stop+0x6c>
	get_sub_config(dev, type)->stop();
    1626:	230c      	movs	r3, #12
    1628:	6869      	ldr	r1, [r5, #4]
    162a:	fb03 1404 	mla	r4, r3, r4, r1
    162e:	6863      	ldr	r3, [r4, #4]
    1630:	4798      	blx	r3
	return 0;
    1632:	2000      	movs	r0, #0
}
    1634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    1636:	f04f 30ff 	mov.w	r0, #4294967295
    163a:	e7ef      	b.n	161c <stop+0x54>
    163c:	0000938a 	.word	0x0000938a
    1640:	00009292 	.word	0x00009292

00001644 <onoff_stop>:
{
    1644:	b570      	push	{r4, r5, r6, lr}
    1646:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    1648:	4906      	ldr	r1, [pc, #24]	; (1664 <onoff_stop+0x20>)
{
    164a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    164c:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    164e:	1149      	asrs	r1, r1, #5
    1650:	2240      	movs	r2, #64	; 0x40
    1652:	4805      	ldr	r0, [pc, #20]	; (1668 <onoff_stop+0x24>)
    1654:	f7ff ffb8 	bl	15c8 <stop>
	notify(mgr, res);
    1658:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    165a:	4601      	mov	r1, r0
	notify(mgr, res);
    165c:	4620      	mov	r0, r4
}
    165e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1662:	4718      	bx	r3
    1664:	200002a8 	.word	0x200002a8
    1668:	200000bc 	.word	0x200000bc

0000166c <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    166c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1670:	2200      	movs	r2, #0
    1672:	2101      	movs	r1, #1
{
    1674:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1676:	2005      	movs	r0, #5
    1678:	f000 fe2a 	bl	22d0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    167c:	2005      	movs	r0, #5
    167e:	f000 fe09 	bl	2294 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1682:	4811      	ldr	r0, [pc, #68]	; (16c8 <clk_init+0x5c>)
    1684:	f001 ff50 	bl	3528 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1688:	4b10      	ldr	r3, [pc, #64]	; (16cc <clk_init+0x60>)
    168a:	4298      	cmp	r0, r3
    168c:	d119      	bne.n	16c2 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    168e:	f001 ff6b 	bl	3568 <nrfx_clock_enable>
    1692:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1694:	f04f 080c 	mov.w	r8, #12
    1698:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
    169a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 16d0 <clk_init+0x64>
						get_sub_data(dev, i);
    169e:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    16a0:	4649      	mov	r1, r9
    16a2:	eb05 1044 	add.w	r0, r5, r4, lsl #5
    16a6:	f006 fed9 	bl	845c <onoff_manager_init>
		if (err < 0) {
    16aa:	2800      	cmp	r0, #0
    16ac:	db07      	blt.n	16be <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    16ae:	fb08 5504 	mla	r5, r8, r4, r5
    16b2:	3401      	adds	r4, #1
	for (enum clock_control_nrf_type i = 0;
    16b4:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    16b6:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
	for (enum clock_control_nrf_type i = 0;
    16ba:	d1f0      	bne.n	169e <clk_init+0x32>
	}

	return 0;
    16bc:	2000      	movs	r0, #0
}
    16be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    16c2:	f06f 0004 	mvn.w	r0, #4
    16c6:	e7fa      	b.n	16be <clk_init+0x52>
    16c8:	0000170d 	.word	0x0000170d
    16cc:	0bad0000 	.word	0x0bad0000
    16d0:	00008eac 	.word	0x00008eac

000016d4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    16d4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    16d6:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    16d8:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    16da:	434b      	muls	r3, r1
    16dc:	4809      	ldr	r0, [pc, #36]	; (1704 <clkstarted_handle.constprop.0+0x30>)
static void clkstarted_handle(const struct device *dev,
    16de:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    16e0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    16e2:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
    16e4:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    16e8:	4418      	add	r0, r3
	sub_data->cb = NULL;
    16ea:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    16ee:	f006 ff78 	bl	85e2 <set_on_state>
	if (callback) {
    16f2:	b12d      	cbz	r5, 1700 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
    16f4:	4632      	mov	r2, r6
    16f6:	462b      	mov	r3, r5
}
    16f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    16fc:	4802      	ldr	r0, [pc, #8]	; (1708 <clkstarted_handle.constprop.0+0x34>)
    16fe:	4718      	bx	r3
}
    1700:	bd70      	pop	{r4, r5, r6, pc}
    1702:	bf00      	nop
    1704:	200002a8 	.word	0x200002a8
    1708:	200000bc 	.word	0x200000bc

0000170c <clock_event_handler>:
{
    170c:	b508      	push	{r3, lr}
    170e:	2805      	cmp	r0, #5
    1710:	d821      	bhi.n	1756 <clock_event_handler+0x4a>
    1712:	e8df f000 	tbb	[pc, r0]
    1716:	1103      	.short	0x1103
    1718:	0d0f1320 	.word	0x0d0f1320
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    171c:	4b13      	ldr	r3, [pc, #76]	; (176c <clock_event_handler+0x60>)
    171e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    1722:	f010 0007 	ands.w	r0, r0, #7
    1726:	d11f      	bne.n	1768 <clock_event_handler+0x5c>
}
    1728:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    172c:	f7ff bfd2 	b.w	16d4 <clkstarted_handle.constprop.0>
    1730:	2002      	movs	r0, #2
    1732:	e7f9      	b.n	1728 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    1734:	2003      	movs	r0, #3
    1736:	e7f7      	b.n	1728 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1738:	2001      	movs	r0, #1
    173a:	e7f5      	b.n	1728 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
    173c:	490c      	ldr	r1, [pc, #48]	; (1770 <clock_event_handler+0x64>)
    173e:	f240 2266 	movw	r2, #614	; 0x266
    1742:	480c      	ldr	r0, [pc, #48]	; (1774 <clock_event_handler+0x68>)
    1744:	f006 fe3c 	bl	83c0 <printk>
    1748:	f240 2166 	movw	r1, #614	; 0x266
}
    174c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    1750:	4807      	ldr	r0, [pc, #28]	; (1770 <clock_event_handler+0x64>)
    1752:	f006 bf01 	b.w	8558 <assert_post_action>
    1756:	4906      	ldr	r1, [pc, #24]	; (1770 <clock_event_handler+0x64>)
    1758:	f240 226a 	movw	r2, #618	; 0x26a
    175c:	4805      	ldr	r0, [pc, #20]	; (1774 <clock_event_handler+0x68>)
    175e:	f006 fe2f 	bl	83c0 <printk>
    1762:	f240 216a 	movw	r1, #618	; 0x26a
    1766:	e7f1      	b.n	174c <clock_event_handler+0x40>
}
    1768:	bd08      	pop	{r3, pc}
    176a:	bf00      	nop
    176c:	200002a8 	.word	0x200002a8
    1770:	0000938a 	.word	0x0000938a
    1774:	00009292 	.word	0x00009292

00001778 <generic_hfclk_start>:
{
    1778:	b508      	push	{r3, lr}
	__asm__ volatile(
    177a:	f04f 0320 	mov.w	r3, #32
    177e:	f3ef 8111 	mrs	r1, BASEPRI
    1782:	f383 8811 	msr	BASEPRI, r3
    1786:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    178a:	4a12      	ldr	r2, [pc, #72]	; (17d4 <generic_hfclk_start+0x5c>)
    178c:	6813      	ldr	r3, [r2, #0]
    178e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    1792:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    1796:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1798:	d00c      	beq.n	17b4 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    179a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    179e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    17a2:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    17a6:	f013 0301 	ands.w	r3, r3, #1
    17aa:	d003      	beq.n	17b4 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    17ac:	480a      	ldr	r0, [pc, #40]	; (17d8 <generic_hfclk_start+0x60>)
    17ae:	f006 ff18 	bl	85e2 <set_on_state>
			already_started = true;
    17b2:	2301      	movs	r3, #1
	__asm__ volatile(
    17b4:	f381 8811 	msr	BASEPRI, r1
    17b8:	f3bf 8f6f 	isb	sy
	if (already_started) {
    17bc:	b123      	cbz	r3, 17c8 <generic_hfclk_start+0x50>
}
    17be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    17c2:	2000      	movs	r0, #0
    17c4:	f7ff bf86 	b.w	16d4 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    17c8:	2001      	movs	r0, #1
}
    17ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    17ce:	f001 beed 	b.w	35ac <nrfx_clock_start>
    17d2:	bf00      	nop
    17d4:	20000358 	.word	0x20000358
    17d8:	20000330 	.word	0x20000330

000017dc <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    17dc:	4b07      	ldr	r3, [pc, #28]	; (17fc <generic_hfclk_stop+0x20>)
    17de:	e8d3 2fef 	ldaex	r2, [r3]
    17e2:	f022 0102 	bic.w	r1, r2, #2
    17e6:	e8c3 1fe0 	stlex	r0, r1, [r3]
    17ea:	2800      	cmp	r0, #0
    17ec:	d1f7      	bne.n	17de <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    17ee:	07d3      	lsls	r3, r2, #31
    17f0:	d402      	bmi.n	17f8 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    17f2:	2001      	movs	r0, #1
    17f4:	f001 bf50 	b.w	3698 <nrfx_clock_stop>
}
    17f8:	4770      	bx	lr
    17fa:	bf00      	nop
    17fc:	20000358 	.word	0x20000358

00001800 <api_blocking_start>:
{
    1800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1802:	2200      	movs	r2, #0
    1804:	2301      	movs	r3, #1
    1806:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    180a:	466b      	mov	r3, sp
    180c:	4a08      	ldr	r2, [pc, #32]	; (1830 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    180e:	f8cd d000 	str.w	sp, [sp]
    1812:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1816:	f006 ff15 	bl	8644 <api_start>
	if (err < 0) {
    181a:	2800      	cmp	r0, #0
    181c:	db05      	blt.n	182a <api_blocking_start+0x2a>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    181e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1822:	2300      	movs	r3, #0
    1824:	4668      	mov	r0, sp
    1826:	f002 fd1f 	bl	4268 <z_impl_k_sem_take>
}
    182a:	b005      	add	sp, #20
    182c:	f85d fb04 	ldr.w	pc, [sp], #4
    1830:	0000863f 	.word	0x0000863f

00001834 <z_nrf_clock_control_lf_on>:
{
    1834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1838:	2201      	movs	r2, #1
    183a:	4605      	mov	r5, r0
    183c:	4946      	ldr	r1, [pc, #280]	; (1958 <z_nrf_clock_control_lf_on+0x124>)
    183e:	e8d1 3fef 	ldaex	r3, [r1]
    1842:	e8c1 2fe0 	stlex	r0, r2, [r1]
    1846:	2800      	cmp	r0, #0
    1848:	d1f9      	bne.n	183e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    184a:	b99b      	cbnz	r3, 1874 <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    184c:	4943      	ldr	r1, [pc, #268]	; (195c <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    184e:	4844      	ldr	r0, [pc, #272]	; (1960 <z_nrf_clock_control_lf_on+0x12c>)
    1850:	604b      	str	r3, [r1, #4]
    1852:	60cb      	str	r3, [r1, #12]
    1854:	608a      	str	r2, [r1, #8]
    1856:	f7ff f8a3 	bl	9a0 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    185a:	2800      	cmp	r0, #0
    185c:	da0a      	bge.n	1874 <z_nrf_clock_control_lf_on+0x40>
    185e:	4941      	ldr	r1, [pc, #260]	; (1964 <z_nrf_clock_control_lf_on+0x130>)
    1860:	4841      	ldr	r0, [pc, #260]	; (1968 <z_nrf_clock_control_lf_on+0x134>)
    1862:	f240 2226 	movw	r2, #550	; 0x226
    1866:	f006 fdab 	bl	83c0 <printk>
    186a:	f240 2126 	movw	r1, #550	; 0x226
    186e:	483d      	ldr	r0, [pc, #244]	; (1964 <z_nrf_clock_control_lf_on+0x130>)
    1870:	f006 fe72 	bl	8558 <assert_post_action>
	switch (start_mode) {
    1874:	b3ad      	cbz	r5, 18e2 <z_nrf_clock_control_lf_on+0xae>
    1876:	1e6b      	subs	r3, r5, #1
    1878:	2b01      	cmp	r3, #1
    187a:	d859      	bhi.n	1930 <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    187c:	2d01      	cmp	r5, #1
    187e:	d107      	bne.n	1890 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1880:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1884:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1888:	f003 0303 	and.w	r3, r3, #3
    188c:	2b02      	cmp	r3, #2
    188e:	d028      	beq.n	18e2 <z_nrf_clock_control_lf_on+0xae>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1890:	f007 f917 	bl	8ac2 <k_is_in_isr>
    1894:	4604      	mov	r4, r0
    1896:	b918      	cbnz	r0, 18a0 <z_nrf_clock_control_lf_on+0x6c>
	return !z_sys_post_kernel;
    1898:	4b34      	ldr	r3, [pc, #208]	; (196c <z_nrf_clock_control_lf_on+0x138>)
	int key = isr_mode ? irq_lock() : 0;
    189a:	781b      	ldrb	r3, [r3, #0]
    189c:	2b00      	cmp	r3, #0
    189e:	d154      	bne.n	194a <z_nrf_clock_control_lf_on+0x116>
	__asm__ volatile(
    18a0:	f04f 0320 	mov.w	r3, #32
    18a4:	f3ef 8611 	mrs	r6, BASEPRI
    18a8:	f383 8811 	msr	BASEPRI, r3
    18ac:	f3bf 8f6f 	isb	sy
    18b0:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    18b2:	4f2f      	ldr	r7, [pc, #188]	; (1970 <z_nrf_clock_control_lf_on+0x13c>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18b4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1974 <z_nrf_clock_control_lf_on+0x140>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    18b8:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 1978 <z_nrf_clock_control_lf_on+0x144>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    18bc:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    18c0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    18c4:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    18c8:	03d2      	lsls	r2, r2, #15
    18ca:	d50c      	bpl.n	18e6 <z_nrf_clock_control_lf_on+0xb2>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    18cc:	f003 0303 	and.w	r3, r3, #3
    18d0:	2b02      	cmp	r3, #2
    18d2:	d001      	beq.n	18d8 <z_nrf_clock_control_lf_on+0xa4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    18d4:	2d01      	cmp	r5, #1
    18d6:	d106      	bne.n	18e6 <z_nrf_clock_control_lf_on+0xb2>
	if (isr_mode) {
    18d8:	b324      	cbz	r4, 1924 <z_nrf_clock_control_lf_on+0xf0>
	__asm__ volatile(
    18da:	f386 8811 	msr	BASEPRI, r6
    18de:	f3bf 8f6f 	isb	sy
}
    18e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    18e6:	b1c4      	cbz	r4, 191a <z_nrf_clock_control_lf_on+0xe6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    18e8:	4630      	mov	r0, r6
    18ea:	f000 fd5b 	bl	23a4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    18ee:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    18f2:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    18f6:	b2db      	uxtb	r3, r3
    18f8:	2b01      	cmp	r3, #1
    18fa:	d1df      	bne.n	18bc <z_nrf_clock_control_lf_on+0x88>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    18fc:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    18fe:	2900      	cmp	r1, #0
    1900:	d0dc      	beq.n	18bc <z_nrf_clock_control_lf_on+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1902:	2100      	movs	r1, #0
    1904:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1906:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    1908:	2102      	movs	r1, #2
    190a:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    190e:	2220      	movs	r2, #32
    1910:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1914:	f8c9 3000 	str.w	r3, [r9]
}
    1918:	e7d0      	b.n	18bc <z_nrf_clock_control_lf_on+0x88>
	return z_impl_k_sleep(timeout);
    191a:	2100      	movs	r1, #0
    191c:	2021      	movs	r0, #33	; 0x21
    191e:	f003 fba5 	bl	506c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1922:	e7e4      	b.n	18ee <z_nrf_clock_control_lf_on+0xba>
    p_reg->INTENSET = mask;
    1924:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1928:	2202      	movs	r2, #2
    192a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    192e:	e7d8      	b.n	18e2 <z_nrf_clock_control_lf_on+0xae>
		__ASSERT_NO_MSG(false);
    1930:	490c      	ldr	r1, [pc, #48]	; (1964 <z_nrf_clock_control_lf_on+0x130>)
    1932:	480d      	ldr	r0, [pc, #52]	; (1968 <z_nrf_clock_control_lf_on+0x134>)
    1934:	f44f 720e 	mov.w	r2, #568	; 0x238
    1938:	f006 fd42 	bl	83c0 <printk>
}
    193c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    1940:	f44f 710e 	mov.w	r1, #568	; 0x238
    1944:	4807      	ldr	r0, [pc, #28]	; (1964 <z_nrf_clock_control_lf_on+0x130>)
    1946:	f006 be07 	b.w	8558 <assert_post_action>
    p_reg->INTENCLR = mask;
    194a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    194e:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    1950:	4606      	mov	r6, r0
    1952:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    1956:	e7ac      	b.n	18b2 <z_nrf_clock_control_lf_on+0x7e>
    1958:	2000035c 	.word	0x2000035c
    195c:	20000298 	.word	0x20000298
    1960:	200002c8 	.word	0x200002c8
    1964:	0000938a 	.word	0x0000938a
    1968:	00009292 	.word	0x00009292
    196c:	2000173d 	.word	0x2000173d
    1970:	50005104 	.word	0x50005104
    1974:	e000e100 	.word	0xe000e100
    1978:	50005008 	.word	0x50005008

0000197c <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
    197c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    197e:	4c06      	ldr	r4, [pc, #24]	; (1998 <sys_clock_isr+0x1c>)
    1980:	4806      	ldr	r0, [pc, #24]	; (199c <sys_clock_isr+0x20>)
    1982:	4621      	mov	r1, r4
    1984:	2217      	movs	r2, #23
    1986:	f006 fd1b 	bl	83c0 <printk>
    198a:	4620      	mov	r0, r4
}
    198c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    1990:	2117      	movs	r1, #23
    1992:	f006 bde1 	b.w	8558 <assert_post_action>
    1996:	bf00      	nop
    1998:	000093f6 	.word	0x000093f6
    199c:	00009292 	.word	0x00009292

000019a0 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    19a0:	4a04      	ldr	r2, [pc, #16]	; (19b4 <sys_clock_timeout_handler+0x14>)
    19a2:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    19a4:	1ac8      	subs	r0, r1, r3
    19a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    19aa:	4403      	add	r3, r0
    19ac:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    19ae:	f003 bdfb 	b.w	55a8 <sys_clock_announce>
    19b2:	bf00      	nop
    19b4:	20000370 	.word	0x20000370

000019b8 <set_absolute_alarm>:
{
    19b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    19bc:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    19c0:	f04f 0900 	mov.w	r9, #0
    19c4:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    19c6:	f100 0450 	add.w	r4, r0, #80	; 0x50
    19ca:	f106 2650 	add.w	r6, r6, #1342197760	; 0x50005000
    19ce:	00a4      	lsls	r4, r4, #2
    19d0:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
    19d4:	b2a4      	uxth	r4, r4
    19d6:	f104 2450 	add.w	r4, r4, #1342197760	; 0x50005000
    return p_reg->CC[ch];
    19da:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    19de:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1a4c <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    19e2:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    19e6:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    19ea:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    19ec:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    19f0:	eba3 030a 	sub.w	r3, r3, sl
    19f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    19f8:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    19fc:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    19fe:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    1a02:	d102      	bne.n	1a0a <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    1a04:	2013      	movs	r0, #19
    1a06:	f007 f896 	bl	8b36 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    1a0a:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    1a0e:	1aab      	subs	r3, r5, r2
    1a10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    1a14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    1a18:	bf88      	it	hi
    1a1a:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1a1c:	f8c4 9000 	str.w	r9, [r4]
    1a20:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    1a22:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    1a26:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    1a2a:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    1a2e:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    1a32:	459a      	cmp	sl, r3
    1a34:	d006      	beq.n	1a44 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    1a36:	1aeb      	subs	r3, r5, r3
    1a38:	3b02      	subs	r3, #2
    1a3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    1a3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    1a42:	d801      	bhi.n	1a48 <set_absolute_alarm+0x90>
}
    1a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    1a48:	462b      	mov	r3, r5
    1a4a:	e7cf      	b.n	19ec <set_absolute_alarm+0x34>
    1a4c:	50015000 	.word	0x50015000

00001a50 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    1a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    1a52:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1a54:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1a56:	4e0f      	ldr	r6, [pc, #60]	; (1a94 <rtc_nrf_isr+0x44>)
    1a58:	4b0f      	ldr	r3, [pc, #60]	; (1a98 <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
    1a5a:	4a10      	ldr	r2, [pc, #64]	; (1a9c <rtc_nrf_isr+0x4c>)
    1a5c:	4618      	mov	r0, r3
    1a5e:	681d      	ldr	r5, [r3, #0]
    1a60:	b104      	cbz	r4, 1a64 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    1a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a64:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    1a68:	03c9      	lsls	r1, r1, #15
    1a6a:	d5fa      	bpl.n	1a62 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1a6c:	6831      	ldr	r1, [r6, #0]
    1a6e:	2900      	cmp	r1, #0
    1a70:	d0f7      	beq.n	1a62 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1a72:	6034      	str	r4, [r6, #0]
    1a74:	6831      	ldr	r1, [r6, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    1a76:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1a7a:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    1a7e:	2401      	movs	r4, #1
    return p_reg->CC[ch];
    1a80:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
    1a84:	b125      	cbz	r5, 1a90 <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
    1a86:	2000      	movs	r0, #0
    1a88:	685a      	ldr	r2, [r3, #4]
    1a8a:	601f      	str	r7, [r3, #0]
    1a8c:	47a8      	blx	r5
    1a8e:	e7e3      	b.n	1a58 <rtc_nrf_isr+0x8>
    1a90:	6005      	str	r5, [r0, #0]
}
    1a92:	e7e6      	b.n	1a62 <rtc_nrf_isr+0x12>
    1a94:	50015140 	.word	0x50015140
    1a98:	20000364 	.word	0x20000364
    1a9c:	50015000 	.word	0x50015000

00001aa0 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    1aa0:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    1aa2:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    1aa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1aa8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    1aac:	4d0d      	ldr	r5, [pc, #52]	; (1ae4 <sys_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    1aae:	2101      	movs	r1, #1
    1ab0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    1ab4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1ab8:	4b0b      	ldr	r3, [pc, #44]	; (1ae8 <sys_clock_driver_init+0x48>)
    1aba:	2015      	movs	r0, #21
    1abc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1ac0:	4622      	mov	r2, r4
    1ac2:	f000 fc05 	bl	22d0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    1ac6:	2015      	movs	r0, #21
    1ac8:	f000 fbe4 	bl	2294 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1acc:	2301      	movs	r3, #1
    1ace:	4a07      	ldr	r2, [pc, #28]	; (1aec <sys_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    1ad0:	2002      	movs	r0, #2
    1ad2:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    1ad4:	4a06      	ldr	r2, [pc, #24]	; (1af0 <sys_clock_driver_init+0x50>)
    1ad6:	602b      	str	r3, [r5, #0]
    1ad8:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    1ada:	f7ff feab 	bl	1834 <z_nrf_clock_control_lf_on>

	return 0;
}
    1ade:	4620      	mov	r0, r4
    1ae0:	bd38      	pop	{r3, r4, r5, pc}
    1ae2:	bf00      	nop
    1ae4:	50015000 	.word	0x50015000
    1ae8:	e000e100 	.word	0xe000e100
    1aec:	50015008 	.word	0x50015008
    1af0:	2000036c 	.word	0x2000036c

00001af4 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1af4:	4b13      	ldr	r3, [pc, #76]	; (1b44 <sys_clock_set_timeout+0x50>)
    1af6:	f1b0 3fff 	cmp.w	r0, #4294967295
    1afa:	bf08      	it	eq
    1afc:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    1afe:	3801      	subs	r0, #1
    1b00:	2800      	cmp	r0, #0
    1b02:	dd1c      	ble.n	1b3e <sys_clock_set_timeout+0x4a>
    1b04:	4298      	cmp	r0, r3
    1b06:	bfa8      	it	ge
    1b08:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    1b0a:	4b0f      	ldr	r3, [pc, #60]	; (1b48 <sys_clock_set_timeout+0x54>)
    1b0c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    1b10:	4b0e      	ldr	r3, [pc, #56]	; (1b4c <sys_clock_set_timeout+0x58>)
    1b12:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    1b14:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    1b16:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    1b1a:	bf18      	it	ne
    1b1c:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
    1b1e:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1b22:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
    1b24:	4a0a      	ldr	r2, [pc, #40]	; (1b50 <sys_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1b26:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    1b28:	480a      	ldr	r0, [pc, #40]	; (1b54 <sys_clock_set_timeout+0x60>)
    1b2a:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    1b2c:	2000      	movs	r0, #0
    1b2e:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    1b30:	4a04      	ldr	r2, [pc, #16]	; (1b44 <sys_clock_set_timeout+0x50>)
    1b32:	4293      	cmp	r3, r2
    1b34:	bf94      	ite	ls
    1b36:	18c9      	addls	r1, r1, r3
    1b38:	1889      	addhi	r1, r1, r2
    1b3a:	f7ff bf3d 	b.w	19b8 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    1b3e:	2000      	movs	r0, #0
    1b40:	e7e3      	b.n	1b0a <sys_clock_set_timeout+0x16>
    1b42:	bf00      	nop
    1b44:	007fffff 	.word	0x007fffff
    1b48:	50015000 	.word	0x50015000
    1b4c:	20000370 	.word	0x20000370
    1b50:	20000364 	.word	0x20000364
    1b54:	000019a1 	.word	0x000019a1

00001b58 <sys_clock_elapsed>:
    1b58:	4b04      	ldr	r3, [pc, #16]	; (1b6c <sys_clock_elapsed+0x14>)
    1b5a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    1b5e:	4b04      	ldr	r3, [pc, #16]	; (1b70 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    1b60:	681b      	ldr	r3, [r3, #0]
    1b62:	1ac0      	subs	r0, r0, r3
}
    1b64:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b68:	4770      	bx	lr
    1b6a:	bf00      	nop
    1b6c:	50015000 	.word	0x50015000
    1b70:	20000370 	.word	0x20000370

00001b74 <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
    1b74:	2800      	cmp	r0, #0
    1b76:	db0d      	blt.n	1b94 <__NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b78:	2201      	movs	r2, #1
    1b7a:	0943      	lsrs	r3, r0, #5
    1b7c:	f000 001f 	and.w	r0, r0, #31
    1b80:	fa02 f000 	lsl.w	r0, r2, r0
    1b84:	4a04      	ldr	r2, [pc, #16]	; (1b98 <__NVIC_DisableIRQ+0x24>)
    1b86:	3320      	adds	r3, #32
    1b88:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1b8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b90:	f3bf 8f6f 	isb	sy
}
    1b94:	4770      	bx	lr
    1b96:	bf00      	nop
    1b98:	e000e100 	.word	0xe000e100

00001b9c <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
    1b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    1b9e:	2800      	cmp	r0, #0
{
    1ba0:	461c      	mov	r4, r3
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    1ba2:	bf14      	ite	ne
    1ba4:	f44f 5300 	movne.w	r3, #8192	; 0x2000
    1ba8:	f44f 4380 	moveq.w	r3, #16384	; 0x4000

	__ASSERT_NO_MSG(end >= start);
	if (end <= start) {
    1bac:	428a      	cmp	r2, r1
{
    1bae:	4615      	mov	r5, r2
	if (end <= start) {
    1bb0:	d83f      	bhi.n	1c32 <config_regions+0x96>
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
	PRINT("\n");
}
    1bb2:	b003      	add	sp, #12
    1bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bb6:	463a      	mov	r2, r7
		if (ram) {
    1bb8:	2800      	cmp	r0, #0
    1bba:	d037      	beq.n	1c2c <config_regions+0x90>
			NRF_SPU->RAMREGION[i].PERM = perm;
    1bbc:	f502 77e0 	add.w	r7, r2, #448	; 0x1c0
			NRF_SPU->FLASHREGION[i].PERM = perm;
    1bc0:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
    1bc4:	1c57      	adds	r7, r2, #1
    1bc6:	42bd      	cmp	r5, r7
    1bc8:	d1f5      	bne.n	1bb6 <config_regions+0x1a>
	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
    1bca:	435d      	muls	r5, r3
    1bcc:	481a      	ldr	r0, [pc, #104]	; (1c38 <config_regions+0x9c>)
    1bce:	434b      	muls	r3, r1
    1bd0:	9500      	str	r5, [sp, #0]
    1bd2:	f006 fbf5 	bl	83c0 <printk>
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
    1bd6:	4b19      	ldr	r3, [pc, #100]	; (1c3c <config_regions+0xa0>)
    1bd8:	f014 0f10 	tst.w	r4, #16
    1bdc:	4918      	ldr	r1, [pc, #96]	; (1c40 <config_regions+0xa4>)
    1bde:	4819      	ldr	r0, [pc, #100]	; (1c44 <config_regions+0xa8>)
    1be0:	bf08      	it	eq
    1be2:	4619      	moveq	r1, r3
    1be4:	f006 fbec 	bl	83c0 <printk>
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
    1be8:	f014 0f04 	tst.w	r4, #4
    1bec:	bf14      	ite	ne
    1bee:	2172      	movne	r1, #114	; 0x72
    1bf0:	212d      	moveq	r1, #45	; 0x2d
    1bf2:	4815      	ldr	r0, [pc, #84]	; (1c48 <config_regions+0xac>)
    1bf4:	f006 fbe4 	bl	83c0 <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
    1bf8:	f014 0f02 	tst.w	r4, #2
    1bfc:	bf14      	ite	ne
    1bfe:	2177      	movne	r1, #119	; 0x77
    1c00:	212d      	moveq	r1, #45	; 0x2d
    1c02:	4811      	ldr	r0, [pc, #68]	; (1c48 <config_regions+0xac>)
    1c04:	f006 fbdc 	bl	83c0 <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
    1c08:	f014 0f01 	tst.w	r4, #1
    1c0c:	bf0c      	ite	eq
    1c0e:	212d      	moveq	r1, #45	; 0x2d
    1c10:	2178      	movne	r1, #120	; 0x78
    1c12:	480d      	ldr	r0, [pc, #52]	; (1c48 <config_regions+0xac>)
    1c14:	f006 fbd4 	bl	83c0 <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
    1c18:	216c      	movs	r1, #108	; 0x6c
    1c1a:	480b      	ldr	r0, [pc, #44]	; (1c48 <config_regions+0xac>)
    1c1c:	f006 fbd0 	bl	83c0 <printk>
	PRINT("\n");
    1c20:	480a      	ldr	r0, [pc, #40]	; (1c4c <config_regions+0xb0>)
}
    1c22:	b003      	add	sp, #12
    1c24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
    1c28:	f006 bbca 	b.w	83c0 <printk>
			NRF_SPU->FLASHREGION[i].PERM = perm;
    1c2c:	f502 77c0 	add.w	r7, r2, #384	; 0x180
    1c30:	e7c6      	b.n	1bc0 <config_regions+0x24>
    1c32:	460a      	mov	r2, r1
    1c34:	4e06      	ldr	r6, [pc, #24]	; (1c50 <config_regions+0xb4>)
    1c36:	e7bf      	b.n	1bb8 <config_regions+0x1c>
    1c38:	00009447 	.word	0x00009447
    1c3c:	0000943b 	.word	0x0000943b
    1c40:	00009432 	.word	0x00009432
    1c44:	00009619 	.word	0x00009619
    1c48:	00009461 	.word	0x00009461
    1c4c:	0000a093 	.word	0x0000a093
    1c50:	50003000 	.word	0x50003000

00001c54 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
    1c54:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    1c56:	f44f 3480 	mov.w	r4, #65536	; 0x10000
{
    1c5a:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    1c5c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1c60:	4825      	ldr	r0, [pc, #148]	; (1cf8 <spm_jump+0xa4>)
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    1c62:	4d26      	ldr	r5, [pc, #152]	; (1cfc <spm_jump+0xa8>)
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    1c64:	f006 fbac 	bl	83c0 <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    1c68:	6821      	ldr	r1, [r4, #0]
    1c6a:	4825      	ldr	r0, [pc, #148]	; (1d00 <spm_jump+0xac>)
    1c6c:	f006 fba8 	bl	83c0 <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    1c70:	6829      	ldr	r1, [r5, #0]
    1c72:	4824      	ldr	r0, [pc, #144]	; (1d04 <spm_jump+0xb0>)
    1c74:	f006 fba4 	bl	83c0 <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    1c78:	2210      	movs	r2, #16
    1c7a:	2100      	movs	r1, #0
    1c7c:	4668      	mov	r0, sp
    1c7e:	f006 fdbe 	bl	87fe <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
    1c82:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
    1c84:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    1c86:	9300      	str	r3, [sp, #0]
    1c88:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
    1c8a:	f000 ff13 	bl	2ab4 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
    1c8e:	2001      	movs	r0, #1
    1c90:	f000 ff40 	bl	2b14 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
    1c94:	2000      	movs	r0, #0
    1c96:	f000 ff29 	bl	2aec <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
    1c9a:	2000      	movs	r0, #0
    1c9c:	f000 ff4e 	bl	2b3c <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
    1ca0:	2101      	movs	r1, #1
    1ca2:	2000      	movs	r0, #0
    1ca4:	f000 ff68 	bl	2b78 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
    1ca8:	f000 ff5c 	bl	2b64 <tz_nonsecure_fpu_access_enable>
	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    1cac:	4816      	ldr	r0, [pc, #88]	; (1d08 <spm_jump+0xb4>)
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    1cae:	682c      	ldr	r4, [r5, #0]
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    1cb0:	f006 fb86 	bl	83c0 <printk>
	NVIC_DisableIRQ(id);
    1cb4:	2008      	movs	r0, #8
    1cb6:	f7ff ff5d 	bl	1b74 <__NVIC_DisableIRQ>
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1cba:	4a14      	ldr	r2, [pc, #80]	; (1d0c <spm_jump+0xb8>)
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    1cbc:	f024 0401 	bic.w	r4, r4, #1
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1cc0:	f8d2 3820 	ldr.w	r3, [r2, #2080]	; 0x820
	return present && (usel || split);
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	da07      	bge.n	1cd8 <spm_jump+0x84>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    1cc8:	f003 0303 	and.w	r3, r3, #3
	return present && (usel || split);
    1ccc:	3b02      	subs	r3, #2
    1cce:	2b01      	cmp	r3, #1
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    1cd0:	bf9c      	itt	ls
    1cd2:	4b0f      	ldrls	r3, [pc, #60]	; (1d10 <spm_jump+0xbc>)
    1cd4:	f8c2 3820 	strls.w	r3, [r2, #2080]	; 0x820
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    1cd8:	2101      	movs	r1, #1
    1cda:	2008      	movs	r0, #8
    1cdc:	f006 fcd5 	bl	868a <irq_target_state_set>
  __ASM volatile ("dsb 0xF":::"memory");
    1ce0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ce4:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
    1ce8:	0864      	lsrs	r4, r4, #1
    1cea:	0064      	lsls	r4, r4, #1
    1cec:	4620      	mov	r0, r4
    1cee:	4621      	mov	r1, r4
    1cf0:	4622      	mov	r2, r4
    1cf2:	4623      	mov	r3, r4
    1cf4:	f7fe fc20 	bl	538 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
    1cf8:	00009464 	.word	0x00009464
    1cfc:	00010004 	.word	0x00010004
    1d00:	0000947b 	.word	0x0000947b
    1d04:	00009490 	.word	0x00009490
    1d08:	000094ae 	.word	0x000094ae
    1d0c:	50003000 	.word	0x50003000
    1d10:	80000100 	.word	0x80000100

00001d14 <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
    1d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
    1d18:	485f      	ldr	r0, [pc, #380]	; (1e98 <spm_config+0x184>)
    1d1a:	f006 fb51 	bl	83c0 <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
    1d1e:	2100      	movs	r1, #0
    1d20:	f240 1317 	movw	r3, #279	; 0x117
    1d24:	4608      	mov	r0, r1
    1d26:	2204      	movs	r2, #4
    1d28:	f7ff ff38 	bl	1b9c <config_regions>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    1d2c:	4d5b      	ldr	r5, [pc, #364]	; (1e9c <spm_config+0x188>)
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
    1d2e:	f240 1307 	movw	r3, #263	; 0x107
    1d32:	2240      	movs	r2, #64	; 0x40
    1d34:	2104      	movs	r1, #4
    1d36:	2000      	movs	r0, #0
    1d38:	f7ff ff30 	bl	1b9c <config_regions>
	PRINT("\n");
    1d3c:	4858      	ldr	r0, [pc, #352]	; (1ea0 <spm_config+0x18c>)
    1d3e:	f006 fb3f 	bl	83c0 <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    1d42:	f3c5 040d 	ubfx	r4, r5, #0, #14
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    1d46:	4b57      	ldr	r3, [pc, #348]	; (1ea4 <spm_config+0x190>)
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    1d48:	f5c4 4480 	rsb	r4, r4, #16384	; 0x4000
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    1d4c:	429c      	cmp	r4, r3
    1d4e:	d208      	bcs.n	1d62 <spm_config+0x4e>
    1d50:	4955      	ldr	r1, [pc, #340]	; (1ea8 <spm_config+0x194>)
    1d52:	4856      	ldr	r0, [pc, #344]	; (1eac <spm_config+0x198>)
    1d54:	2282      	movs	r2, #130	; 0x82
    1d56:	f006 fb33 	bl	83c0 <printk>
    1d5a:	2182      	movs	r1, #130	; 0x82
    1d5c:	4852      	ldr	r0, [pc, #328]	; (1ea8 <spm_config+0x194>)
    1d5e:	f006 fbfb 	bl	8558 <assert_post_action>
                                            uint8_t            flash_nsc_id,
                                            nrf_spu_nsc_size_t flash_nsc_size,
                                            uint8_t            region_number,
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    1d62:	4e53      	ldr	r6, [pc, #332]	; (1eb0 <spm_config+0x19c>)
	nrf_spu_flashnsc_set(NRF_SPU, 0, FLASH_NSC_SIZE_REG(nsc_size),
    1d64:	f3c4 1443 	ubfx	r4, r4, #5, #4
    1d68:	f8d6 2500 	ldr.w	r2, [r6, #1280]	; 0x500
    1d6c:	f3c5 3585 	ubfx	r5, r5, #14, #6
    1d70:	05d2      	lsls	r2, r2, #23
    1d72:	d50a      	bpl.n	1d8a <spm_config+0x76>
    1d74:	494f      	ldr	r1, [pc, #316]	; (1eb4 <spm_config+0x1a0>)
    1d76:	484d      	ldr	r0, [pc, #308]	; (1eac <spm_config+0x198>)
    1d78:	f44f 72bd 	mov.w	r2, #378	; 0x17a
    1d7c:	f006 fb20 	bl	83c0 <printk>
    1d80:	f44f 71bd 	mov.w	r1, #378	; 0x17a
    1d84:	484b      	ldr	r0, [pc, #300]	; (1eb4 <spm_config+0x1a0>)
    1d86:	f006 fbe7 	bl	8558 <assert_post_action>
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));
    1d8a:	f8d6 3504 	ldr.w	r3, [r6, #1284]	; 0x504
    1d8e:	05db      	lsls	r3, r3, #23
    1d90:	d50a      	bpl.n	1da8 <spm_config+0x94>
    1d92:	4948      	ldr	r1, [pc, #288]	; (1eb4 <spm_config+0x1a0>)
    1d94:	4845      	ldr	r0, [pc, #276]	; (1eac <spm_config+0x198>)
    1d96:	f240 127b 	movw	r2, #379	; 0x17b
    1d9a:	f006 fb11 	bl	83c0 <printk>
    1d9e:	f240 117b 	movw	r1, #379	; 0x17b
    1da2:	4844      	ldr	r0, [pc, #272]	; (1eb4 <spm_config+0x1a0>)
    1da4:	f006 fbd8 	bl	8558 <assert_post_action>

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
    1da8:	4b41      	ldr	r3, [pc, #260]	; (1eb0 <spm_config+0x19c>)
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
    1daa:	4843      	ldr	r0, [pc, #268]	; (1eb8 <spm_config+0x1a4>)
    1dac:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
    1db0:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    1db4:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
    1db8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    1dbc:	0152      	lsls	r2, r2, #5
    1dbe:	f006 faff 	bl	83c0 <printk>
	PRINT("\n");
    1dc2:	4837      	ldr	r0, [pc, #220]	; (1ea0 <spm_config+0x18c>)
    1dc4:	f006 fafc 	bl	83c0 <printk>
	int err = spm_secure_services_init();
    1dc8:	f000 f88c 	bl	1ee4 <spm_secure_services_init>
	if (err != 0) {
    1dcc:	4601      	mov	r1, r0
    1dce:	b110      	cbz	r0, 1dd6 <spm_config+0xc2>
		PRINT("Could not initialize secure services (err %d).\n", err);
    1dd0:	483a      	ldr	r0, [pc, #232]	; (1ebc <spm_config+0x1a8>)
    1dd2:	f006 faf5 	bl	83c0 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    1dd6:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
    1dd8:	4839      	ldr	r0, [pc, #228]	; (1ec0 <spm_config+0x1ac>)
    1dda:	f006 faf1 	bl	83c0 <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
    1dde:	f240 1317 	movw	r3, #279	; 0x117
    1de2:	2204      	movs	r2, #4
    1de4:	2100      	movs	r1, #0
    1de6:	2001      	movs	r0, #1
    1de8:	f7ff fed8 	bl	1b9c <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
    1dec:	4d30      	ldr	r5, [pc, #192]	; (1eb0 <spm_config+0x19c>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
    1dee:	f240 1307 	movw	r3, #263	; 0x107
    1df2:	2240      	movs	r2, #64	; 0x40
    1df4:	2104      	movs	r1, #4
    1df6:	2001      	movs	r0, #1
    1df8:	f7ff fed0 	bl	1b9c <config_regions>
	PRINT("\n");
    1dfc:	4828      	ldr	r0, [pc, #160]	; (1ea0 <spm_config+0x18c>)
    1dfe:	f006 fadf 	bl	83c0 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    1e02:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
    1e06:	482f      	ldr	r0, [pc, #188]	; (1ec4 <spm_config+0x1b0>)
    1e08:	f006 fada 	bl	83c0 <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
    1e0c:	4e2e      	ldr	r6, [pc, #184]	; (1ec8 <spm_config+0x1b4>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
    1e0e:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
    1e12:	4f2e      	ldr	r7, [pc, #184]	; (1ecc <spm_config+0x1b8>)
		NRF_SPU->GPIOPORT[1].PERM = 0;
    1e14:	f8c5 44c8 	str.w	r4, [r5, #1224]	; 0x4c8
		PRINT("%02u %-21s%s", i, periph[i].name,
    1e18:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1ee0 <spm_config+0x1cc>
    1e1c:	4d2c      	ldr	r5, [pc, #176]	; (1ed0 <spm_config+0x1bc>)
    1e1e:	f895 9005 	ldrb.w	r9, [r5, #5]
    1e22:	4621      	mov	r1, r4
    1e24:	f1b9 0f00 	cmp.w	r9, #0
    1e28:	bf14      	ite	ne
    1e2a:	4633      	movne	r3, r6
    1e2c:	463b      	moveq	r3, r7
    1e2e:	4640      	mov	r0, r8
    1e30:	682a      	ldr	r2, [r5, #0]
    1e32:	f006 fac5 	bl	83c0 <printk>
		if (!periph[i].nonsecure) {
    1e36:	f1b9 0f00 	cmp.w	r9, #0
    1e3a:	d10c      	bne.n	1e56 <spm_config+0x142>
			PRINT("\tSKIP\n");
    1e3c:	4825      	ldr	r0, [pc, #148]	; (1ed4 <spm_config+0x1c0>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    1e3e:	3401      	adds	r4, #1
			PRINT("\tOK\n");
    1e40:	f006 fabe 	bl	83c0 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    1e44:	2c2d      	cmp	r4, #45	; 0x2d
    1e46:	f105 0508 	add.w	r5, r5, #8
    1e4a:	d1e8      	bne.n	1e1e <spm_config+0x10a>
	PRINT("\n");
    1e4c:	4814      	ldr	r0, [pc, #80]	; (1ea0 <spm_config+0x18c>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
    1e4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
    1e52:	f006 bab5 	b.w	83c0 <printk>
		err = spm_config_peripheral(periph[i].id, false);
    1e56:	f895 9004 	ldrb.w	r9, [r5, #4]
	NVIC_DisableIRQ(id);
    1e5a:	f995 0004 	ldrsb.w	r0, [r5, #4]
    1e5e:	f7ff fe89 	bl	1b74 <__NVIC_DisableIRQ>
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1e62:	ea4f 0389 	mov.w	r3, r9, lsl #2
    1e66:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    1e6a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    1e6e:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1e72:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    1e76:	d006      	beq.n	1e86 <spm_config+0x172>
	return present && (usel || split);
    1e78:	2a00      	cmp	r2, #0
    1e7a:	da07      	bge.n	1e8c <spm_config+0x178>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    1e7c:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
    1e80:	3a02      	subs	r2, #2
    1e82:	2a01      	cmp	r2, #1
    1e84:	d802      	bhi.n	1e8c <spm_config+0x178>
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    1e86:	4a14      	ldr	r2, [pc, #80]	; (1ed8 <spm_config+0x1c4>)
    1e88:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    1e8c:	2101      	movs	r1, #1
    1e8e:	4648      	mov	r0, r9
    1e90:	f006 fbfb 	bl	868a <irq_target_state_set>
			PRINT("\tOK\n");
    1e94:	4811      	ldr	r0, [pc, #68]	; (1edc <spm_config+0x1c8>)
    1e96:	e7d2      	b.n	1e3e <spm_config+0x12a>
    1e98:	000094e4 	.word	0x000094e4
    1e9c:	0000bfe0 	.word	0x0000bfe0
    1ea0:	0000a093 	.word	0x0000a093
    1ea4:	00000020 	.word	0x00000020
    1ea8:	00009508 	.word	0x00009508
    1eac:	00009292 	.word	0x00009292
    1eb0:	50003000 	.word	0x50003000
    1eb4:	00009529 	.word	0x00009529
    1eb8:	0000955b 	.word	0x0000955b
    1ebc:	000095a1 	.word	0x000095a1
    1ec0:	000095d1 	.word	0x000095d1
    1ec4:	000095f3 	.word	0x000095f3
    1ec8:	000094d9 	.word	0x000094d9
    1ecc:	0000943f 	.word	0x0000943f
    1ed0:	00008eb8 	.word	0x00008eb8
    1ed4:	0000961c 	.word	0x0000961c
    1ed8:	80000100 	.word	0x80000100
    1edc:	00009623 	.word	0x00009623
    1ee0:	0000960f 	.word	0x0000960f

00001ee4 <spm_secure_services_init>:
int spm_secure_services_init(void)
{
	int err = 0;

#ifdef CONFIG_SPM_SERVICE_RNG
	err = nrf_cc3xx_platform_ctr_drbg_init(&ctr_drbg_ctx, NULL, 0);
    1ee4:	2200      	movs	r2, #0
    1ee6:	4802      	ldr	r0, [pc, #8]	; (1ef0 <spm_secure_services_init+0xc>)
    1ee8:	4611      	mov	r1, r2
    1eea:	f003 bcb7 	b.w	585c <nrf_cc3xx_platform_ctr_drbg_init>
    1eee:	bf00      	nop
    1ef0:	20000374 	.word	0x20000374

00001ef4 <__acle_se_spm_request_read_nse>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read_nse(void *destination, uint32_t addr, size_t len)
{
    1ef4:	b570      	push	{r4, r5, r6, lr}
    1ef6:	460c      	mov	r4, r1
    1ef8:	4615      	mov	r5, r2
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
    1efa:	4606      	mov	r6, r0
    1efc:	b950      	cbnz	r0, 1f14 <__acle_se_spm_request_read_nse+0x20>
		return -EINVAL;
    1efe:	f06f 0015 	mvn.w	r0, #21
			return 0;
		}
	}

	return -EPERM;
}
    1f02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1f06:	4671      	mov	r1, lr
    1f08:	4672      	mov	r2, lr
    1f0a:	4673      	mov	r3, lr
    1f0c:	46f4      	mov	ip, lr
    1f0e:	f38e 8c00 	msr	CPSR_fs, lr
    1f12:	4774      	bxns	lr
	if (destination == NULL || len <= 0) {
    1f14:	2a00      	cmp	r2, #0
    1f16:	d0f2      	beq.n	1efe <__acle_se_spm_request_read_nse+0xa>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1f18:	f006 fbfe 	bl	8718 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)destination)) {
    1f1c:	2801      	cmp	r0, #1
    1f1e:	d0ee      	beq.n	1efe <__acle_se_spm_request_read_nse+0xa>
		if (addr >= start && addr + len <= start + size) {
    1f20:	4b0c      	ldr	r3, [pc, #48]	; (1f54 <__acle_se_spm_request_read_nse+0x60>)
    1f22:	429c      	cmp	r4, r3
    1f24:	d90b      	bls.n	1f3e <__acle_se_spm_request_read_nse+0x4a>
    1f26:	192a      	adds	r2, r5, r4
    1f28:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
    1f2c:	429a      	cmp	r2, r3
    1f2e:	d809      	bhi.n	1f44 <__acle_se_spm_request_read_nse+0x50>
			memcpy(destination, (const void *)addr, len);
    1f30:	462a      	mov	r2, r5
    1f32:	4621      	mov	r1, r4
    1f34:	4630      	mov	r0, r6
    1f36:	f006 fc37 	bl	87a8 <memcpy>
			return 0;
    1f3a:	2000      	movs	r0, #0
    1f3c:	e7e1      	b.n	1f02 <__acle_se_spm_request_read_nse+0xe>
		if (addr >= start && addr + len <= start + size) {
    1f3e:	4b06      	ldr	r3, [pc, #24]	; (1f58 <__acle_se_spm_request_read_nse+0x64>)
    1f40:	429c      	cmp	r4, r3
    1f42:	d903      	bls.n	1f4c <__acle_se_spm_request_read_nse+0x58>
    1f44:	4b05      	ldr	r3, [pc, #20]	; (1f5c <__acle_se_spm_request_read_nse+0x68>)
    1f46:	192a      	adds	r2, r5, r4
    1f48:	429a      	cmp	r2, r3
    1f4a:	d9f1      	bls.n	1f30 <__acle_se_spm_request_read_nse+0x3c>
	return -EPERM;
    1f4c:	f04f 30ff 	mov.w	r0, #4294967295
    1f50:	e7d7      	b.n	1f02 <__acle_se_spm_request_read_nse+0xe>
    1f52:	bf00      	nop
    1f54:	00ff0203 	.word	0x00ff0203
    1f58:	00ff012f 	.word	0x00ff012f
    1f5c:	00ff0138 	.word	0x00ff0138

00001f60 <__acle_se_spm_request_random_number_nse>:


#ifdef CONFIG_SPM_SERVICE_RNG
__TZ_NONSECURE_ENTRY_FUNC
int spm_request_random_number_nse(uint8_t *output, size_t len, size_t *olen)
{
    1f60:	b570      	push	{r4, r5, r6, lr}
    1f62:	4606      	mov	r6, r0
    1f64:	460d      	mov	r5, r1
    1f66:	4614      	mov	r4, r2
	return arm_cmse_addr_is_secure(ptr) == 1;
    1f68:	f006 fbd6 	bl	8718 <arm_cmse_addr_is_secure>
	int err = -EINVAL;

	if (ptr_in_secure_area((intptr_t)output) ||
    1f6c:	2801      	cmp	r0, #1
    1f6e:	d00d      	beq.n	1f8c <__acle_se_spm_request_random_number_nse+0x2c>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1f70:	4620      	mov	r0, r4
    1f72:	f006 fbd1 	bl	8718 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)output) ||
    1f76:	2801      	cmp	r0, #1
    1f78:	d008      	beq.n	1f8c <__acle_se_spm_request_random_number_nse+0x2c>
	    ptr_in_secure_area((intptr_t)olen)) {
		return -EINVAL;
	}

	err = nrf_cc3xx_platform_ctr_drbg_get(&ctr_drbg_ctx, output, len, olen);
    1f7a:	4623      	mov	r3, r4
    1f7c:	462a      	mov	r2, r5
    1f7e:	4631      	mov	r1, r6
    1f80:	4808      	ldr	r0, [pc, #32]	; (1fa4 <__acle_se_spm_request_random_number_nse+0x44>)
    1f82:	f003 fc9f 	bl	58c4 <nrf_cc3xx_platform_ctr_drbg_get>
	if (*olen != len) {
    1f86:	6823      	ldr	r3, [r4, #0]
    1f88:	42ab      	cmp	r3, r5
    1f8a:	d001      	beq.n	1f90 <__acle_se_spm_request_random_number_nse+0x30>
		return -EINVAL;
    1f8c:	f06f 0015 	mvn.w	r0, #21
	}

	return err;
}
    1f90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1f94:	4671      	mov	r1, lr
    1f96:	4672      	mov	r2, lr
    1f98:	4673      	mov	r3, lr
    1f9a:	46f4      	mov	ip, lr
    1f9c:	f38e 8c00 	msr	CPSR_fs, lr
    1fa0:	4774      	bxns	lr
    1fa2:	bf00      	nop
    1fa4:	20000374 	.word	0x20000374

00001fa8 <__acle_se_spm_firmware_info_nse>:
#endif /* CONFIG_SPM_SERVICE_S0_ACTIVE */

#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info_nse(uint32_t fw_address, struct fw_info *info)
{
    1fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fac:	4681      	mov	r9, r0
	const struct fw_info *tmp_info;

	if (info == NULL) {
    1fae:	460d      	mov	r5, r1
{
    1fb0:	b085      	sub	sp, #20
	if (info == NULL) {
    1fb2:	b381      	cbz	r1, 2016 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x16>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1fb4:	f006 fbb0 	bl	8718 <arm_cmse_addr_is_secure>
		return -EINVAL;
	}

	/* Ensure that fw_address is within secure area */
	if (!ptr_in_secure_area(fw_address)) {
    1fb8:	2801      	cmp	r0, #1
    1fba:	d12c      	bne.n	2016 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x16>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1fbc:	4628      	mov	r0, r5
    1fbe:	f006 fbab 	bl	8718 <arm_cmse_addr_is_secure>
		return -EINVAL;
	}

	/* Ensure that *info is in non-secure RAM */
	if (ptr_in_secure_area((intptr_t)info)) {
    1fc2:	2801      	cmp	r0, #1
    1fc4:	d027      	beq.n	2016 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x16>
 */
static inline const struct fw_info *fw_info_find(uint32_t firmware_address)
{
	const struct fw_info *finfo;

	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    1fc6:	f04f 0800 	mov.w	r8, #0
    1fca:	f8df b05c 	ldr.w	fp, [pc, #92]	; 2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1fce:	f8df a05c 	ldr.w	sl, [pc, #92]	; 202c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2c>
    1fd2:	af01      	add	r7, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
    1fd4:	f85b 6b04 	ldr.w	r6, [fp], #4
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1fd8:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
    1fdc:	444e      	add	r6, r9
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1fde:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
    1fe2:	220c      	movs	r2, #12
    1fe4:	4639      	mov	r1, r7
    1fe6:	4630      	mov	r0, r6
    1fe8:	f006 fbb7 	bl	875a <memcmp>
    1fec:	4604      	mov	r4, r0
    1fee:	b900      	cbnz	r0, 1ff2 <__acle_se_spm_firmware_info_nse+0x4a>
		if (finfo) {
    1ff0:	b9a6      	cbnz	r6, 201c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    1ff2:	f108 0801 	add.w	r8, r8, #1
    1ff6:	f1b8 0f05 	cmp.w	r8, #5
    1ffa:	d1eb      	bne.n	1fd4 <__acle_se_spm_firmware_info_nse+0x2c>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
    1ffc:	f06f 040d 	mvn.w	r4, #13
}
    2000:	4620      	mov	r0, r4
    2002:	b005      	add	sp, #20
    2004:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2008:	4671      	mov	r1, lr
    200a:	4672      	mov	r2, lr
    200c:	4673      	mov	r3, lr
    200e:	46f4      	mov	ip, lr
    2010:	f38e 8c00 	msr	CPSR_fs, lr
    2014:	4774      	bxns	lr
		return -EINVAL;
    2016:	f06f 0415 	mvn.w	r4, #21
    201a:	e7f1      	b.n	2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>
		memcpy(info, tmp_info, sizeof(*tmp_info));
    201c:	223c      	movs	r2, #60	; 0x3c
    201e:	4631      	mov	r1, r6
    2020:	4628      	mov	r0, r5
    2022:	f006 fbc1 	bl	87a8 <memcpy>
		return 0;
    2026:	e7eb      	b.n	2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>
    2028:	00009020 	.word	0x00009020
    202c:	00008e30 	.word	0x00008e30

00002030 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    2030:	4801      	ldr	r0, [pc, #4]	; (2038 <nrf_cc3xx_platform_abort_init+0x8>)
    2032:	f003 bc0b 	b.w	584c <nrf_cc3xx_platform_set_abort>
    2036:	bf00      	nop
    2038:	00009034 	.word	0x00009034

0000203c <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    203c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    203e:	b308      	cbz	r0, 2084 <mutex_unlock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2040:	6843      	ldr	r3, [r0, #4]
    2042:	2b04      	cmp	r3, #4
    2044:	d007      	beq.n	2056 <mutex_unlock_platform+0x1a>
    2046:	2b08      	cmp	r3, #8
    2048:	d013      	beq.n	2072 <mutex_unlock_platform+0x36>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    204a:	b1f3      	cbz	r3, 208a <mutex_unlock_platform+0x4e>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    204c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    204e:	f002 f839 	bl	40c4 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    2052:	2000      	movs	r0, #0
    2054:	e00c      	b.n	2070 <mutex_unlock_platform+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2056:	2200      	movs	r2, #0
    2058:	6803      	ldr	r3, [r0, #0]
    205a:	e8d3 1fef 	ldaex	r1, [r3]
    205e:	2901      	cmp	r1, #1
    2060:	d103      	bne.n	206a <mutex_unlock_platform+0x2e>
    2062:	e8c3 2fe0 	stlex	r0, r2, [r3]
    2066:	2800      	cmp	r0, #0
    2068:	d1f7      	bne.n	205a <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    206a:	4809      	ldr	r0, [pc, #36]	; (2090 <mutex_unlock_platform+0x54>)
    206c:	bf08      	it	eq
    206e:	4610      	moveq	r0, r2
    }
}
    2070:	bd08      	pop	{r3, pc}
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    2072:	6803      	ldr	r3, [r0, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    2074:	2000      	movs	r0, #0
    2076:	781b      	ldrb	r3, [r3, #0]
    2078:	4a06      	ldr	r2, [pc, #24]	; (2094 <mutex_unlock_platform+0x58>)
    207a:	f503 7380 	add.w	r3, r3, #256	; 0x100
    207e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    2082:	e7f5      	b.n	2070 <mutex_unlock_platform+0x34>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2084:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2088:	e7f2      	b.n	2070 <mutex_unlock_platform+0x34>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    208a:	4803      	ldr	r0, [pc, #12]	; (2098 <mutex_unlock_platform+0x5c>)
    208c:	e7f0      	b.n	2070 <mutex_unlock_platform+0x34>
    208e:	bf00      	nop
    2090:	ffff8fe9 	.word	0xffff8fe9
    2094:	50030000 	.word	0x50030000
    2098:	ffff8fea 	.word	0xffff8fea

0000209c <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    209c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    209e:	4604      	mov	r4, r0
    20a0:	b918      	cbnz	r0, 20aa <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    20a2:	4b0d      	ldr	r3, [pc, #52]	; (20d8 <mutex_free_platform+0x3c>)
    20a4:	480d      	ldr	r0, [pc, #52]	; (20dc <mutex_free_platform+0x40>)
    20a6:	685b      	ldr	r3, [r3, #4]
    20a8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    20aa:	6861      	ldr	r1, [r4, #4]
    20ac:	2908      	cmp	r1, #8
    20ae:	d00d      	beq.n	20cc <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    20b0:	f031 0304 	bics.w	r3, r1, #4
    20b4:	d00a      	beq.n	20cc <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    20b6:	f011 0102 	ands.w	r1, r1, #2
    20ba:	d008      	beq.n	20ce <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    20bc:	4621      	mov	r1, r4
    20be:	4808      	ldr	r0, [pc, #32]	; (20e0 <mutex_free_platform+0x44>)
    20c0:	f001 fdce 	bl	3c60 <k_mem_slab_free>
        mutex->mutex = NULL;
    20c4:	2300      	movs	r3, #0
    20c6:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    20c8:	2300      	movs	r3, #0
    20ca:	6063      	str	r3, [r4, #4]
}
    20cc:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    20ce:	2214      	movs	r2, #20
    20d0:	6820      	ldr	r0, [r4, #0]
    20d2:	f006 fb94 	bl	87fe <memset>
    20d6:	e7f7      	b.n	20c8 <mutex_free_platform+0x2c>
    20d8:	2000004c 	.word	0x2000004c
    20dc:	000097dd 	.word	0x000097dd
    20e0:	20000530 	.word	0x20000530

000020e4 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    20e4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    20e6:	4604      	mov	r4, r0
    20e8:	b918      	cbnz	r0, 20f2 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    20ea:	4b16      	ldr	r3, [pc, #88]	; (2144 <mutex_init_platform+0x60>)
    20ec:	4816      	ldr	r0, [pc, #88]	; (2148 <mutex_init_platform+0x64>)
    20ee:	685b      	ldr	r3, [r3, #4]
    20f0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    20f2:	6863      	ldr	r3, [r4, #4]
    20f4:	2b04      	cmp	r3, #4
    20f6:	d023      	beq.n	2140 <mutex_init_platform+0x5c>
    20f8:	2b08      	cmp	r3, #8
    20fa:	d021      	beq.n	2140 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    20fc:	b9cb      	cbnz	r3, 2132 <mutex_init_platform+0x4e>
    20fe:	6823      	ldr	r3, [r4, #0]
    2100:	b9bb      	cbnz	r3, 2132 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2102:	f04f 32ff 	mov.w	r2, #4294967295
    2106:	f04f 33ff 	mov.w	r3, #4294967295
    210a:	4621      	mov	r1, r4
    210c:	480f      	ldr	r0, [pc, #60]	; (214c <mutex_init_platform+0x68>)
    210e:	f001 fd4d 	bl	3bac <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2112:	b908      	cbnz	r0, 2118 <mutex_init_platform+0x34>
    2114:	6823      	ldr	r3, [r4, #0]
    2116:	b91b      	cbnz	r3, 2120 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    2118:	4b0a      	ldr	r3, [pc, #40]	; (2144 <mutex_init_platform+0x60>)
    211a:	480d      	ldr	r0, [pc, #52]	; (2150 <mutex_init_platform+0x6c>)
    211c:	685b      	ldr	r3, [r3, #4]
    211e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2120:	2214      	movs	r2, #20
    2122:	2100      	movs	r1, #0
    2124:	6820      	ldr	r0, [r4, #0]
    2126:	f006 fb6a 	bl	87fe <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    212a:	6863      	ldr	r3, [r4, #4]
    212c:	f043 0302 	orr.w	r3, r3, #2
    2130:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    2132:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2134:	f006 fcd4 	bl	8ae0 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2138:	6863      	ldr	r3, [r4, #4]
    213a:	f043 0301 	orr.w	r3, r3, #1
    213e:	6063      	str	r3, [r4, #4]
}
    2140:	bd10      	pop	{r4, pc}
    2142:	bf00      	nop
    2144:	2000004c 	.word	0x2000004c
    2148:	000097dd 	.word	0x000097dd
    214c:	20000530 	.word	0x20000530
    2150:	00009803 	.word	0x00009803

00002154 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2154:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    2156:	b340      	cbz	r0, 21aa <mutex_lock_platform+0x56>
    switch (mutex->flags) {
    2158:	6843      	ldr	r3, [r0, #4]
    215a:	2b04      	cmp	r3, #4
    215c:	d00b      	beq.n	2176 <mutex_lock_platform+0x22>
    215e:	2b08      	cmp	r3, #8
    2160:	d016      	beq.n	2190 <mutex_lock_platform+0x3c>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2162:	b303      	cbz	r3, 21a6 <mutex_lock_platform+0x52>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2164:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2166:	f04f 32ff 	mov.w	r2, #4294967295
    216a:	f04f 33ff 	mov.w	r3, #4294967295
    216e:	f001 fed7 	bl	3f20 <z_impl_k_mutex_lock>
        if (ret == 0) {
    2172:	b158      	cbz	r0, 218c <mutex_lock_platform+0x38>
    2174:	e015      	b.n	21a2 <mutex_lock_platform+0x4e>
    2176:	2201      	movs	r2, #1
    2178:	6803      	ldr	r3, [r0, #0]
    217a:	e8d3 1fef 	ldaex	r1, [r3]
    217e:	2900      	cmp	r1, #0
    2180:	d103      	bne.n	218a <mutex_lock_platform+0x36>
    2182:	e8c3 2fe0 	stlex	r0, r2, [r3]
    2186:	2800      	cmp	r0, #0
    2188:	d1f7      	bne.n	217a <mutex_lock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    218a:	d10a      	bne.n	21a2 <mutex_lock_platform+0x4e>
    218c:	2000      	movs	r0, #0
}
    218e:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    2190:	6803      	ldr	r3, [r0, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    2192:	4a07      	ldr	r2, [pc, #28]	; (21b0 <mutex_lock_platform+0x5c>)
    2194:	781b      	ldrb	r3, [r3, #0]
    2196:	f503 7380 	add.w	r3, r3, #256	; 0x100
    219a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    219e:	2b00      	cmp	r3, #0
    21a0:	d0f4      	beq.n	218c <mutex_lock_platform+0x38>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    21a2:	4804      	ldr	r0, [pc, #16]	; (21b4 <mutex_lock_platform+0x60>)
    21a4:	e7f3      	b.n	218e <mutex_lock_platform+0x3a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    21a6:	4804      	ldr	r0, [pc, #16]	; (21b8 <mutex_lock_platform+0x64>)
    21a8:	e7f1      	b.n	218e <mutex_lock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    21aa:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    21ae:	e7ee      	b.n	218e <mutex_lock_platform+0x3a>
    21b0:	50030000 	.word	0x50030000
    21b4:	ffff8fe9 	.word	0xffff8fe9
    21b8:	ffff8fea 	.word	0xffff8fea

000021bc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    21bc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    21be:	4906      	ldr	r1, [pc, #24]	; (21d8 <nrf_cc3xx_platform_mutex_init+0x1c>)
    21c0:	2340      	movs	r3, #64	; 0x40
    21c2:	2214      	movs	r2, #20
    21c4:	4805      	ldr	r0, [pc, #20]	; (21dc <nrf_cc3xx_platform_mutex_init+0x20>)
    21c6:	f006 fc60 	bl	8a8a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    21ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    21ce:	4904      	ldr	r1, [pc, #16]	; (21e0 <nrf_cc3xx_platform_mutex_init+0x24>)
    21d0:	4804      	ldr	r0, [pc, #16]	; (21e4 <nrf_cc3xx_platform_mutex_init+0x28>)
    21d2:	f003 bbe3 	b.w	599c <nrf_cc3xx_platform_set_mutexes>
    21d6:	bf00      	nop
    21d8:	20000550 	.word	0x20000550
    21dc:	20000530 	.word	0x20000530
    21e0:	0000904c 	.word	0x0000904c
    21e4:	0000903c 	.word	0x0000903c

000021e8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    21e8:	4a09      	ldr	r2, [pc, #36]	; (2210 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    21ea:	490a      	ldr	r1, [pc, #40]	; (2214 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    21ec:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    21ee:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    21f0:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    21f2:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    21f4:	4908      	ldr	r1, [pc, #32]	; (2218 <arch_swap+0x30>)
    21f6:	684b      	ldr	r3, [r1, #4]
    21f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    21fc:	604b      	str	r3, [r1, #4]
    21fe:	2300      	movs	r3, #0
    2200:	f383 8811 	msr	BASEPRI, r3
    2204:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2208:	6893      	ldr	r3, [r2, #8]
}
    220a:	6f98      	ldr	r0, [r3, #120]	; 0x78
    220c:	4770      	bx	lr
    220e:	bf00      	nop
    2210:	20000c30 	.word	0x20000c30
    2214:	000090cc 	.word	0x000090cc
    2218:	e000ed00 	.word	0xe000ed00

0000221c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    221c:	4913      	ldr	r1, [pc, #76]	; (226c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    221e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2220:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2224:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2226:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    222a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    222e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2230:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2234:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2238:	4f0d      	ldr	r7, [pc, #52]	; (2270 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    223a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    223e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    2240:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2242:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2244:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2246:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2248:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    224a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    224e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2252:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2256:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    225a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    225e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    2260:	f006 fa42 	bl	86e8 <configure_builtin_stack_guard>
    pop {r2, lr}
    2264:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2268:	4770      	bx	lr
    226a:	0000      	.short	0x0000
    ldr r1, =_kernel
    226c:	20000c30 	.word	0x20000c30
    ldr v4, =_SCS_ICSR
    2270:	e000ed04 	.word	0xe000ed04

00002274 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    2274:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2278:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    227a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    227e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2282:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2284:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2288:	2902      	cmp	r1, #2
    beq _oops
    228a:	d0ff      	beq.n	228c <_oops>

0000228c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    228c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    228e:	f006 fa2f 	bl	86f0 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2292:	bd01      	pop	{r0, pc}

00002294 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2294:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2296:	2b00      	cmp	r3, #0
    2298:	db08      	blt.n	22ac <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    229a:	2201      	movs	r2, #1
    229c:	f000 001f 	and.w	r0, r0, #31
    22a0:	fa02 f000 	lsl.w	r0, r2, r0
    22a4:	4a02      	ldr	r2, [pc, #8]	; (22b0 <arch_irq_enable+0x1c>)
    22a6:	095b      	lsrs	r3, r3, #5
    22a8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    22ac:	4770      	bx	lr
    22ae:	bf00      	nop
    22b0:	e000e100 	.word	0xe000e100

000022b4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    22b4:	4b05      	ldr	r3, [pc, #20]	; (22cc <arch_irq_is_enabled+0x18>)
    22b6:	0942      	lsrs	r2, r0, #5
    22b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    22bc:	2301      	movs	r3, #1
    22be:	f000 001f 	and.w	r0, r0, #31
    22c2:	fa03 f000 	lsl.w	r0, r3, r0
}
    22c6:	4010      	ands	r0, r2
    22c8:	4770      	bx	lr
    22ca:	bf00      	nop
    22cc:	e000e100 	.word	0xe000e100

000022d0 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    22d0:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    22d2:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    22d4:	2c07      	cmp	r4, #7
{
    22d6:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    22d8:	d908      	bls.n	22ec <z_arm_irq_priority_set+0x1c>
    22da:	490d      	ldr	r1, [pc, #52]	; (2310 <z_arm_irq_priority_set+0x40>)
    22dc:	480d      	ldr	r0, [pc, #52]	; (2314 <z_arm_irq_priority_set+0x44>)
    22de:	2258      	movs	r2, #88	; 0x58
    22e0:	f006 f86e 	bl	83c0 <printk>
    22e4:	2158      	movs	r1, #88	; 0x58
    22e6:	480a      	ldr	r0, [pc, #40]	; (2310 <z_arm_irq_priority_set+0x40>)
    22e8:	f006 f936 	bl	8558 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    22ec:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    22ee:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22f0:	bfac      	ite	ge
    22f2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22f6:	4b08      	ldrlt	r3, [pc, #32]	; (2318 <z_arm_irq_priority_set+0x48>)
    22f8:	ea4f 1444 	mov.w	r4, r4, lsl #5
    22fc:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22fe:	bfab      	itete	ge
    2300:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2304:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2308:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    230c:	555c      	strblt	r4, [r3, r5]
}
    230e:	bd38      	pop	{r3, r4, r5, pc}
    2310:	00009830 	.word	0x00009830
    2314:	00009292 	.word	0x00009292
    2318:	e000ed14 	.word	0xe000ed14

0000231c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    231c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2320:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    2322:	490b      	ldr	r1, [pc, #44]	; (2350 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    2324:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    2328:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    232a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    232e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2332:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    2334:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    2338:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    233c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2340:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2344:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2346:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2348:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    234a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    234c:	4770      	bx	lr
    234e:	bf00      	nop
    2350:	00008483 	.word	0x00008483

00002354 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2354:	4b08      	ldr	r3, [pc, #32]	; (2378 <arch_switch_to_main_thread+0x24>)
    2356:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    2358:	6e43      	ldr	r3, [r0, #100]	; 0x64
    235a:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    235e:	4610      	mov	r0, r2
    2360:	f381 8809 	msr	PSP, r1
    2364:	2100      	movs	r1, #0
    2366:	b663      	cpsie	if
    2368:	f381 8811 	msr	BASEPRI, r1
    236c:	f3bf 8f6f 	isb	sy
    2370:	2200      	movs	r2, #0
    2372:	2300      	movs	r3, #0
    2374:	f006 f885 	bl	8482 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2378:	20000c30 	.word	0x20000c30

0000237c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    237c:	4901      	ldr	r1, [pc, #4]	; (2384 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    237e:	2210      	movs	r2, #16
	str	r2, [r1]
    2380:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2382:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2384:	e000ed10 	.word	0xe000ed10

00002388 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2388:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    238a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    238c:	f380 8811 	msr	BASEPRI, r0
	isb
    2390:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2394:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2398:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    239a:	b662      	cpsie	i
	isb
    239c:	f3bf 8f6f 	isb	sy

	bx	lr
    23a0:	4770      	bx	lr
    23a2:	bf00      	nop

000023a4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    23a4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    23a6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    23a8:	f381 8811 	msr	BASEPRI, r1

	wfe
    23ac:	bf20      	wfe

	msr	BASEPRI, r0
    23ae:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    23b2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    23b4:	4770      	bx	lr
    23b6:	bf00      	nop

000023b8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    23b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    23ba:	4605      	mov	r5, r0

	if (esf != NULL) {
    23bc:	460c      	mov	r4, r1
    23be:	b1c9      	cbz	r1, 23f4 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    23c0:	688b      	ldr	r3, [r1, #8]
    23c2:	4810      	ldr	r0, [pc, #64]	; (2404 <z_arm_fatal_error+0x4c>)
    23c4:	9300      	str	r3, [sp, #0]
    23c6:	e9d1 2300 	ldrd	r2, r3, [r1]
    23ca:	2145      	movs	r1, #69	; 0x45
    23cc:	f006 f8d9 	bl	8582 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    23d0:	6963      	ldr	r3, [r4, #20]
    23d2:	2145      	movs	r1, #69	; 0x45
    23d4:	9300      	str	r3, [sp, #0]
    23d6:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    23da:	480b      	ldr	r0, [pc, #44]	; (2408 <z_arm_fatal_error+0x50>)
    23dc:	f006 f8d1 	bl	8582 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    23e0:	2145      	movs	r1, #69	; 0x45
    23e2:	69e2      	ldr	r2, [r4, #28]
    23e4:	4809      	ldr	r0, [pc, #36]	; (240c <z_arm_fatal_error+0x54>)
    23e6:	f006 f8cc 	bl	8582 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    23ea:	2145      	movs	r1, #69	; 0x45
    23ec:	69a2      	ldr	r2, [r4, #24]
    23ee:	4808      	ldr	r0, [pc, #32]	; (2410 <z_arm_fatal_error+0x58>)
    23f0:	f006 f8c7 	bl	8582 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    23f4:	4621      	mov	r1, r4
    23f6:	4628      	mov	r0, r5
}
    23f8:	b003      	add	sp, #12
    23fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    23fe:	f001 ba8b 	b.w	3918 <z_fatal_error>
    2402:	bf00      	nop
    2404:	00009866 	.word	0x00009866
    2408:	0000989a 	.word	0x0000989a
    240c:	000098ce 	.word	0x000098ce
    2410:	000098e2 	.word	0x000098e2

00002414 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2414:	bf30      	wfi
    b z_SysNmiOnReset
    2416:	f7ff bffd 	b.w	2414 <z_SysNmiOnReset>
    241a:	bf00      	nop

0000241c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    241c:	4a0b      	ldr	r2, [pc, #44]	; (244c <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    241e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2420:	4b0b      	ldr	r3, [pc, #44]	; (2450 <z_arm_prep_c+0x34>)
    2422:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2426:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2428:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    242c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2430:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2434:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    243c:	f001 fac8 	bl	39d0 <z_bss_zero>
	z_data_copy();
    2440:	f002 fede 	bl	5200 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2444:	f000 fb18 	bl	2a78 <z_arm_interrupt_init>
	z_cstart();
    2448:	f001 fae6 	bl	3a18 <z_cstart>
    244c:	00000000 	.word	0x00000000
    2450:	e000ed00 	.word	0xe000ed00

00002454 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2454:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2456:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2458:	4a0b      	ldr	r2, [pc, #44]	; (2488 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    245a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    245c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    245e:	bf1e      	ittt	ne
	movne	r1, #0
    2460:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2462:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    2464:	f006 fb35 	blne	8ad2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2468:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    246a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    246e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2472:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2476:	4905      	ldr	r1, [pc, #20]	; (248c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2478:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    247a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    247c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    247e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2482:	4903      	ldr	r1, [pc, #12]	; (2490 <_isr_wrapper+0x3c>)
	bx r1
    2484:	4708      	bx	r1
    2486:	0000      	.short	0x0000
	ldr r2, =_kernel
    2488:	20000c30 	.word	0x20000c30
	ldr r1, =_sw_isr_table
    248c:	00008ba0 	.word	0x00008ba0
	ldr r1, =z_arm_int_exit
    2490:	000029cd 	.word	0x000029cd

00002494 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2494:	2000      	movs	r0, #0
    msr CONTROL, r0
    2496:	f380 8814 	msr	CONTROL, r0
    isb
    249a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    249e:	2000      	movs	r0, #0
    msr MSPLIM, r0
    24a0:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    24a4:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    24a8:	f006 f85e 	bl	8568 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    24ac:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    24ae:	490e      	ldr	r1, [pc, #56]	; (24e8 <__start+0x54>)
    str r0, [r1]
    24b0:	6008      	str	r0, [r1, #0]
    dsb
    24b2:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    24b6:	480d      	ldr	r0, [pc, #52]	; (24ec <__start+0x58>)
    msr msp, r0
    24b8:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    24bc:	f000 fab6 	bl	2a2c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    24c0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    24c2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    24c6:	480a      	ldr	r0, [pc, #40]	; (24f0 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    24c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    24cc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    24ce:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    24d2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    24d6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    24d8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    24da:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    24de:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    24e2:	f7ff ff9b 	bl	241c <z_arm_prep_c>
    24e6:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    24e8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    24ec:	20002740 	.word	0x20002740
    ldr r0, =z_interrupt_stacks
    24f0:	20002880 	.word	0x20002880

000024f4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    24f4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    24f8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    24fc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    24fe:	4672      	mov	r2, lr
	bl z_arm_fault
    2500:	f000 f970 	bl	27e4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2504:	bd01      	pop	{r0, pc}
    2506:	bf00      	nop

00002508 <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2508:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    250a:	4c2b      	ldr	r4, [pc, #172]	; (25b8 <mem_manage_fault.isra.0+0xb0>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    250c:	4606      	mov	r6, r0
    250e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2510:	482a      	ldr	r0, [pc, #168]	; (25bc <mem_manage_fault.isra.0+0xb4>)
    2512:	2145      	movs	r1, #69	; 0x45
    2514:	f006 f835 	bl	8582 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2518:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    251a:	06d0      	lsls	r0, r2, #27
    251c:	d503      	bpl.n	2526 <mem_manage_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    251e:	2145      	movs	r1, #69	; 0x45
    2520:	4827      	ldr	r0, [pc, #156]	; (25c0 <mem_manage_fault.isra.0+0xb8>)
    2522:	f006 f82e 	bl	8582 <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2526:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2528:	0719      	lsls	r1, r3, #28
    252a:	d503      	bpl.n	2534 <mem_manage_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    252c:	2145      	movs	r1, #69	; 0x45
    252e:	4825      	ldr	r0, [pc, #148]	; (25c4 <mem_manage_fault.isra.0+0xbc>)
    2530:	f006 f827 	bl	8582 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2534:	4c20      	ldr	r4, [pc, #128]	; (25b8 <mem_manage_fault.isra.0+0xb0>)
    2536:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2538:	079a      	lsls	r2, r3, #30
    253a:	d510      	bpl.n	255e <mem_manage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    253c:	2145      	movs	r1, #69	; 0x45
    253e:	4822      	ldr	r0, [pc, #136]	; (25c8 <mem_manage_fault.isra.0+0xc0>)
    2540:	f006 f81f 	bl	8582 <z_log_minimal_printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    2544:	6b62      	ldr	r2, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2546:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2548:	061b      	lsls	r3, r3, #24
    254a:	d508      	bpl.n	255e <mem_manage_fault.isra.0+0x56>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    254c:	2145      	movs	r1, #69	; 0x45
    254e:	481f      	ldr	r0, [pc, #124]	; (25cc <mem_manage_fault.isra.0+0xc4>)
    2550:	f006 f817 	bl	8582 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    2554:	b11e      	cbz	r6, 255e <mem_manage_fault.isra.0+0x56>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2556:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2558:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    255c:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    255e:	4c16      	ldr	r4, [pc, #88]	; (25b8 <mem_manage_fault.isra.0+0xb0>)
    2560:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2562:	07d6      	lsls	r6, r2, #31
    2564:	d503      	bpl.n	256e <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    2566:	2145      	movs	r1, #69	; 0x45
    2568:	4819      	ldr	r0, [pc, #100]	; (25d0 <mem_manage_fault.isra.0+0xc8>)
    256a:	f006 f80a 	bl	8582 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    256e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2570:	0698      	lsls	r0, r3, #26
    2572:	d503      	bpl.n	257c <mem_manage_fault.isra.0+0x74>
		PR_FAULT_INFO(
    2574:	2145      	movs	r1, #69	; 0x45
    2576:	4817      	ldr	r0, [pc, #92]	; (25d4 <mem_manage_fault.isra.0+0xcc>)
    2578:	f006 f803 	bl	8582 <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    257c:	4b0e      	ldr	r3, [pc, #56]	; (25b8 <mem_manage_fault.isra.0+0xb0>)
    257e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2580:	06d1      	lsls	r1, r2, #27
    2582:	d402      	bmi.n	258a <mem_manage_fault.isra.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2586:	0792      	lsls	r2, r2, #30
    2588:	d50d      	bpl.n	25a6 <mem_manage_fault.isra.0+0x9e>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    258c:	06db      	lsls	r3, r3, #27
    258e:	d50a      	bpl.n	25a6 <mem_manage_fault.isra.0+0x9e>
    2590:	4911      	ldr	r1, [pc, #68]	; (25d8 <mem_manage_fault.isra.0+0xd0>)
    2592:	4812      	ldr	r0, [pc, #72]	; (25dc <mem_manage_fault.isra.0+0xd4>)
    2594:	f240 124f 	movw	r2, #335	; 0x14f
    2598:	f005 ff12 	bl	83c0 <printk>
    259c:	f240 114f 	movw	r1, #335	; 0x14f
    25a0:	480d      	ldr	r0, [pc, #52]	; (25d8 <mem_manage_fault.isra.0+0xd0>)
    25a2:	f005 ffd9 	bl	8558 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    25a6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    25a8:	4a03      	ldr	r2, [pc, #12]	; (25b8 <mem_manage_fault.isra.0+0xb0>)
    25aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    25ac:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    25b0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    25b2:	7028      	strb	r0, [r5, #0]

	return reason;
}
    25b4:	bd70      	pop	{r4, r5, r6, pc}
    25b6:	bf00      	nop
    25b8:	e000ed00 	.word	0xe000ed00
    25bc:	00009915 	.word	0x00009915
    25c0:	00009930 	.word	0x00009930
    25c4:	00009968 	.word	0x00009968
    25c8:	00009980 	.word	0x00009980
    25cc:	0000999d 	.word	0x0000999d
    25d0:	000099b8 	.word	0x000099b8
    25d4:	000099dc 	.word	0x000099dc
    25d8:	00009a10 	.word	0x00009a10
    25dc:	00009292 	.word	0x00009292

000025e0 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    25e0:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    25e2:	4c23      	ldr	r4, [pc, #140]	; (2670 <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    25e4:	4606      	mov	r6, r0
    25e6:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    25e8:	4822      	ldr	r0, [pc, #136]	; (2674 <bus_fault.isra.0+0x94>)
    25ea:	2145      	movs	r1, #69	; 0x45
    25ec:	f005 ffc9 	bl	8582 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    25f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    25f2:	04d1      	lsls	r1, r2, #19
    25f4:	d503      	bpl.n	25fe <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    25f6:	2145      	movs	r1, #69	; 0x45
    25f8:	481f      	ldr	r0, [pc, #124]	; (2678 <bus_fault.isra.0+0x98>)
    25fa:	f005 ffc2 	bl	8582 <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    25fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2600:	051a      	lsls	r2, r3, #20
    2602:	d503      	bpl.n	260c <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    2604:	2145      	movs	r1, #69	; 0x45
    2606:	481d      	ldr	r0, [pc, #116]	; (267c <bus_fault.isra.0+0x9c>)
    2608:	f005 ffbb 	bl	8582 <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    260c:	4c18      	ldr	r4, [pc, #96]	; (2670 <bus_fault.isra.0+0x90>)
    260e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2610:	059b      	lsls	r3, r3, #22
    2612:	d510      	bpl.n	2636 <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    2614:	481a      	ldr	r0, [pc, #104]	; (2680 <bus_fault.isra.0+0xa0>)
    2616:	2145      	movs	r1, #69	; 0x45
    2618:	f005 ffb3 	bl	8582 <z_log_minimal_printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    261c:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    261e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2620:	0418      	lsls	r0, r3, #16
    2622:	d508      	bpl.n	2636 <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2624:	2145      	movs	r1, #69	; 0x45
    2626:	4817      	ldr	r0, [pc, #92]	; (2684 <bus_fault.isra.0+0xa4>)
    2628:	f005 ffab 	bl	8582 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    262c:	b11e      	cbz	r6, 2636 <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    262e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2630:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2634:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2636:	4c0e      	ldr	r4, [pc, #56]	; (2670 <bus_fault.isra.0+0x90>)
    2638:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    263a:	0559      	lsls	r1, r3, #21
    263c:	d503      	bpl.n	2646 <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    263e:	2145      	movs	r1, #69	; 0x45
    2640:	4811      	ldr	r0, [pc, #68]	; (2688 <bus_fault.isra.0+0xa8>)
    2642:	f005 ff9e 	bl	8582 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2646:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2648:	05da      	lsls	r2, r3, #23
    264a:	d50b      	bpl.n	2664 <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    264c:	2145      	movs	r1, #69	; 0x45
    264e:	480f      	ldr	r0, [pc, #60]	; (268c <bus_fault.isra.0+0xac>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2650:	f005 ff97 	bl	8582 <z_log_minimal_printk>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    2654:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2656:	4a06      	ldr	r2, [pc, #24]	; (2670 <bus_fault.isra.0+0x90>)
    2658:	6a93      	ldr	r3, [r2, #40]	; 0x28
    265a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    265e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2660:	7028      	strb	r0, [r5, #0]

	return reason;
}
    2662:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2664:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2666:	049b      	lsls	r3, r3, #18
    2668:	d5f4      	bpl.n	2654 <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    266a:	2145      	movs	r1, #69	; 0x45
    266c:	4808      	ldr	r0, [pc, #32]	; (2690 <bus_fault.isra.0+0xb0>)
    266e:	e7ef      	b.n	2650 <bus_fault.isra.0+0x70>
    2670:	e000ed00 	.word	0xe000ed00
    2674:	00009a4a 	.word	0x00009a4a
    2678:	00009a65 	.word	0x00009a65
    267c:	00009968 	.word	0x00009968
    2680:	00009a7b 	.word	0x00009a7b
    2684:	00009a99 	.word	0x00009a99
    2688:	00009ab3 	.word	0x00009ab3
    268c:	00009ad3 	.word	0x00009ad3
    2690:	000099dc 	.word	0x000099dc

00002694 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2694:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2696:	4c21      	ldr	r4, [pc, #132]	; (271c <usage_fault.isra.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    2698:	2145      	movs	r1, #69	; 0x45
    269a:	4821      	ldr	r0, [pc, #132]	; (2720 <usage_fault.isra.0+0x8c>)
    269c:	f005 ff71 	bl	8582 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    26a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    26a2:	0195      	lsls	r5, r2, #6
    26a4:	d503      	bpl.n	26ae <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    26a6:	2145      	movs	r1, #69	; 0x45
    26a8:	481e      	ldr	r0, [pc, #120]	; (2724 <usage_fault.isra.0+0x90>)
    26aa:	f005 ff6a 	bl	8582 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    26ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    26b0:	01dc      	lsls	r4, r3, #7
    26b2:	d503      	bpl.n	26bc <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    26b4:	2145      	movs	r1, #69	; 0x45
    26b6:	481c      	ldr	r0, [pc, #112]	; (2728 <usage_fault.isra.0+0x94>)
    26b8:	f005 ff63 	bl	8582 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    26bc:	4d17      	ldr	r5, [pc, #92]	; (271c <usage_fault.isra.0+0x88>)
    26be:	6aac      	ldr	r4, [r5, #40]	; 0x28
    26c0:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    26c4:	d004      	beq.n	26d0 <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    26c6:	2145      	movs	r1, #69	; 0x45
    26c8:	4818      	ldr	r0, [pc, #96]	; (272c <usage_fault.isra.0+0x98>)
    26ca:	f005 ff5a 	bl	8582 <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    26ce:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    26d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    26d2:	0318      	lsls	r0, r3, #12
    26d4:	d503      	bpl.n	26de <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    26d6:	2145      	movs	r1, #69	; 0x45
    26d8:	4815      	ldr	r0, [pc, #84]	; (2730 <usage_fault.isra.0+0x9c>)
    26da:	f005 ff52 	bl	8582 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    26de:	4d0f      	ldr	r5, [pc, #60]	; (271c <usage_fault.isra.0+0x88>)
    26e0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    26e2:	0351      	lsls	r1, r2, #13
    26e4:	d503      	bpl.n	26ee <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    26e6:	2145      	movs	r1, #69	; 0x45
    26e8:	4812      	ldr	r0, [pc, #72]	; (2734 <usage_fault.isra.0+0xa0>)
    26ea:	f005 ff4a 	bl	8582 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    26ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
    26f0:	039a      	lsls	r2, r3, #14
    26f2:	d503      	bpl.n	26fc <usage_fault.isra.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    26f4:	2145      	movs	r1, #69	; 0x45
    26f6:	4810      	ldr	r0, [pc, #64]	; (2738 <usage_fault.isra.0+0xa4>)
    26f8:	f005 ff43 	bl	8582 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    26fc:	4d07      	ldr	r5, [pc, #28]	; (271c <usage_fault.isra.0+0x88>)
    26fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2700:	03db      	lsls	r3, r3, #15
    2702:	d503      	bpl.n	270c <usage_fault.isra.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2704:	2145      	movs	r1, #69	; 0x45
    2706:	480d      	ldr	r0, [pc, #52]	; (273c <usage_fault.isra.0+0xa8>)
    2708:	f005 ff3b 	bl	8582 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    270c:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    270e:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2710:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2714:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2718:	62ab      	str	r3, [r5, #40]	; 0x28
}
    271a:	bd38      	pop	{r3, r4, r5, pc}
    271c:	e000ed00 	.word	0xe000ed00
    2720:	00009af0 	.word	0x00009af0
    2724:	00009b0d 	.word	0x00009b0d
    2728:	00009b25 	.word	0x00009b25
    272c:	00009b44 	.word	0x00009b44
    2730:	00009b73 	.word	0x00009b73
    2734:	00009b96 	.word	0x00009b96
    2738:	00009bc0 	.word	0x00009bc0
    273c:	00009bdf 	.word	0x00009bdf

00002740 <secure_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void secure_fault(const z_arch_esf_t *esf)
    2740:	b510      	push	{r4, lr}
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    2742:	4c1e      	ldr	r4, [pc, #120]	; (27bc <secure_fault.isra.0+0x7c>)
	PR_FAULT_INFO("***** SECURE FAULT *****");
    2744:	481e      	ldr	r0, [pc, #120]	; (27c0 <secure_fault.isra.0+0x80>)
    2746:	2145      	movs	r1, #69	; 0x45
    2748:	f005 ff1b 	bl	8582 <z_log_minimal_printk>
	STORE_xFAR(sfar, SAU->SFAR);
    274c:	69a2      	ldr	r2, [r4, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    274e:	6963      	ldr	r3, [r4, #20]
    2750:	0658      	lsls	r0, r3, #25
    2752:	d503      	bpl.n	275c <secure_fault.isra.0+0x1c>
		PR_EXC("  Address: 0x%x", sfar);
    2754:	2145      	movs	r1, #69	; 0x45
    2756:	481b      	ldr	r0, [pc, #108]	; (27c4 <secure_fault.isra.0+0x84>)
    2758:	f005 ff13 	bl	8582 <z_log_minimal_printk>
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    275c:	6963      	ldr	r3, [r4, #20]
    275e:	07d9      	lsls	r1, r3, #31
    2760:	d508      	bpl.n	2774 <secure_fault.isra.0+0x34>
		PR_FAULT_INFO("  Invalid entry point");
    2762:	2145      	movs	r1, #69	; 0x45
    2764:	4818      	ldr	r0, [pc, #96]	; (27c8 <secure_fault.isra.0+0x88>)
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state error");
    2766:	f005 ff0c 	bl	8582 <z_log_minimal_printk>
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    276a:	6963      	ldr	r3, [r4, #20]
    276c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2770:	6163      	str	r3, [r4, #20]
}
    2772:	bd10      	pop	{r4, pc}
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    2774:	6963      	ldr	r3, [r4, #20]
    2776:	079a      	lsls	r2, r3, #30
    2778:	d502      	bpl.n	2780 <secure_fault.isra.0+0x40>
		PR_FAULT_INFO("  Invalid integrity signature");
    277a:	2145      	movs	r1, #69	; 0x45
    277c:	4813      	ldr	r0, [pc, #76]	; (27cc <secure_fault.isra.0+0x8c>)
    277e:	e7f2      	b.n	2766 <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    2780:	6963      	ldr	r3, [r4, #20]
    2782:	075b      	lsls	r3, r3, #29
    2784:	d502      	bpl.n	278c <secure_fault.isra.0+0x4c>
		PR_FAULT_INFO("  Invalid exception return");
    2786:	2145      	movs	r1, #69	; 0x45
    2788:	4811      	ldr	r0, [pc, #68]	; (27d0 <secure_fault.isra.0+0x90>)
    278a:	e7ec      	b.n	2766 <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    278c:	6963      	ldr	r3, [r4, #20]
    278e:	0718      	lsls	r0, r3, #28
    2790:	d502      	bpl.n	2798 <secure_fault.isra.0+0x58>
		PR_FAULT_INFO("  Attribution unit violation");
    2792:	2145      	movs	r1, #69	; 0x45
    2794:	480f      	ldr	r0, [pc, #60]	; (27d4 <secure_fault.isra.0+0x94>)
    2796:	e7e6      	b.n	2766 <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    2798:	6963      	ldr	r3, [r4, #20]
    279a:	06d9      	lsls	r1, r3, #27
    279c:	d502      	bpl.n	27a4 <secure_fault.isra.0+0x64>
		PR_FAULT_INFO("  Invalid transition");
    279e:	2145      	movs	r1, #69	; 0x45
    27a0:	480d      	ldr	r0, [pc, #52]	; (27d8 <secure_fault.isra.0+0x98>)
    27a2:	e7e0      	b.n	2766 <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    27a4:	6963      	ldr	r3, [r4, #20]
    27a6:	069a      	lsls	r2, r3, #26
    27a8:	d502      	bpl.n	27b0 <secure_fault.isra.0+0x70>
		PR_FAULT_INFO("  Lazy state preservation");
    27aa:	2145      	movs	r1, #69	; 0x45
    27ac:	480b      	ldr	r0, [pc, #44]	; (27dc <secure_fault.isra.0+0x9c>)
    27ae:	e7da      	b.n	2766 <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    27b0:	6963      	ldr	r3, [r4, #20]
    27b2:	061b      	lsls	r3, r3, #24
    27b4:	d5d9      	bpl.n	276a <secure_fault.isra.0+0x2a>
		PR_FAULT_INFO("  Lazy state error");
    27b6:	2145      	movs	r1, #69	; 0x45
    27b8:	4809      	ldr	r0, [pc, #36]	; (27e0 <secure_fault.isra.0+0xa0>)
    27ba:	e7d4      	b.n	2766 <secure_fault.isra.0+0x26>
    27bc:	e000edd0 	.word	0xe000edd0
    27c0:	00009c0f 	.word	0x00009c0f
    27c4:	00009c2d 	.word	0x00009c2d
    27c8:	00009c42 	.word	0x00009c42
    27cc:	00009c5d 	.word	0x00009c5d
    27d0:	00009c80 	.word	0x00009c80
    27d4:	00009ca0 	.word	0x00009ca0
    27d8:	00009cc2 	.word	0x00009cc2
    27dc:	00009cdc 	.word	0x00009cdc
    27e0:	00009cfb 	.word	0x00009cfb

000027e4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    27e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    27e8:	4b62      	ldr	r3, [pc, #392]	; (2974 <z_arm_fault+0x190>)
{
    27ea:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    27ec:	685c      	ldr	r4, [r3, #4]
    27ee:	2600      	movs	r6, #0
{
    27f0:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    27f2:	f3c4 0708 	ubfx	r7, r4, #0, #9
    27f6:	f386 8811 	msr	BASEPRI, r6
    27fa:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    27fe:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2802:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2806:	d11e      	bne.n	2846 <z_arm_fault+0x62>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    2808:	f012 0301 	ands.w	r3, r2, #1
    280c:	d039      	beq.n	2882 <z_arm_fault+0x9e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    280e:	f012 0340 	ands.w	r3, r2, #64	; 0x40
    2812:	f002 0808 	and.w	r8, r2, #8
    2816:	f040 80a6 	bne.w	2966 <z_arm_fault+0x182>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    281a:	0752      	lsls	r2, r2, #29
			secure_esf = (z_arch_esf_t *)msp;
    281c:	bf54      	ite	pl
    281e:	4605      	movpl	r5, r0
	*nested_exc = false;
    2820:	461e      	movmi	r6, r3
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    2822:	682a      	ldr	r2, [r5, #0]
    2824:	4b54      	ldr	r3, [pc, #336]	; (2978 <z_arm_fault+0x194>)
			*nested_exc = true;
    2826:	bf58      	it	pl
    2828:	2601      	movpl	r6, #1
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    282a:	4413      	add	r3, r2
    282c:	2b01      	cmp	r3, #1
		sec_ret_addr = secure_esf->basic.pc;
    282e:	bf98      	it	ls
    2830:	6c2a      	ldrls	r2, [r5, #64]	; 0x40
	PR_FAULT_INFO("  S instruction address:  0x%x", sec_ret_addr);
    2832:	2145      	movs	r1, #69	; 0x45
    2834:	4851      	ldr	r0, [pc, #324]	; (297c <z_arm_fault+0x198>)
    2836:	f005 fea4 	bl	8582 <z_log_minimal_printk>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    283a:	f1b8 0f00 	cmp.w	r8, #0
    283e:	d01d      	beq.n	287c <z_arm_fault+0x98>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    2840:	f3ef 8589 	mrs	r5, PSP_NS

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    2844:	b95d      	cbnz	r5, 285e <z_arm_fault+0x7a>
    2846:	f240 32e1 	movw	r2, #993	; 0x3e1
    284a:	494d      	ldr	r1, [pc, #308]	; (2980 <z_arm_fault+0x19c>)
    284c:	484d      	ldr	r0, [pc, #308]	; (2984 <z_arm_fault+0x1a0>)
    284e:	f005 fdb7 	bl	83c0 <printk>
    2852:	f240 31e1 	movw	r1, #993	; 0x3e1
    2856:	484a      	ldr	r0, [pc, #296]	; (2980 <z_arm_fault+0x19c>)
    2858:	f005 fe7e 	bl	8558 <assert_post_action>
    285c:	2500      	movs	r5, #0
	*recoverable = false;
    285e:	2300      	movs	r3, #0
    2860:	1efa      	subs	r2, r7, #3
    2862:	4698      	mov	r8, r3
    2864:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    2868:	4613      	mov	r3, r2
    286a:	2b09      	cmp	r3, #9
    286c:	d869      	bhi.n	2942 <z_arm_fault+0x15e>
    286e:	e8df f003 	tbb	[pc, r3]
    2872:	590a      	.short	0x590a
    2874:	6861385d 	.word	0x6861385d
    2878:	65686868 	.word	0x65686868
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    287c:	f3ef 8588 	mrs	r5, MSP_NS
  return(result);
    2880:	e7e0      	b.n	2844 <z_arm_fault+0x60>
	*nested_exc = false;
    2882:	461e      	mov	r6, r3
    2884:	e7df      	b.n	2846 <z_arm_fault+0x62>
	PR_FAULT_INFO("***** HARD FAULT *****");
    2886:	2145      	movs	r1, #69	; 0x45
    2888:	483f      	ldr	r0, [pc, #252]	; (2988 <z_arm_fault+0x1a4>)
    288a:	f005 fe7a 	bl	8582 <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    288e:	4b39      	ldr	r3, [pc, #228]	; (2974 <z_arm_fault+0x190>)
	*recoverable = false;
    2890:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2894:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    2896:	f014 0402 	ands.w	r4, r4, #2
    289a:	d004      	beq.n	28a6 <z_arm_fault+0xc2>
		PR_EXC("  Bus fault on vector table read");
    289c:	2145      	movs	r1, #69	; 0x45
    289e:	483b      	ldr	r0, [pc, #236]	; (298c <z_arm_fault+0x1a8>)
	PR_FAULT_INFO(
    28a0:	f005 fe6f 	bl	8582 <z_log_minimal_printk>
    28a4:	e048      	b.n	2938 <z_arm_fault+0x154>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    28a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28a8:	005b      	lsls	r3, r3, #1
    28aa:	d522      	bpl.n	28f2 <z_arm_fault+0x10e>
		PR_EXC("  Fault escalation (see below)");
    28ac:	2145      	movs	r1, #69	; 0x45
    28ae:	4838      	ldr	r0, [pc, #224]	; (2990 <z_arm_fault+0x1ac>)
    28b0:	f005 fe67 	bl	8582 <z_log_minimal_printk>
		if (SCB_MMFSR != 0) {
    28b4:	4b37      	ldr	r3, [pc, #220]	; (2994 <z_arm_fault+0x1b0>)
    28b6:	781b      	ldrb	r3, [r3, #0]
    28b8:	b133      	cbz	r3, 28c8 <z_arm_fault+0xe4>
			reason = mem_manage_fault(esf, 1, recoverable);
    28ba:	2001      	movs	r0, #1
    28bc:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    28c0:	f7ff fe22 	bl	2508 <mem_manage_fault.isra.0>
    28c4:	4604      	mov	r4, r0
		break;
    28c6:	e014      	b.n	28f2 <z_arm_fault+0x10e>
		} else if (SCB_BFSR != 0) {
    28c8:	4b33      	ldr	r3, [pc, #204]	; (2998 <z_arm_fault+0x1b4>)
    28ca:	781b      	ldrb	r3, [r3, #0]
    28cc:	b12b      	cbz	r3, 28da <z_arm_fault+0xf6>
			reason = bus_fault(esf, 1, recoverable);
    28ce:	2001      	movs	r0, #1
    28d0:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    28d4:	f7ff fe84 	bl	25e0 <bus_fault.isra.0>
    28d8:	e7f4      	b.n	28c4 <z_arm_fault+0xe0>
		} else if (SCB_UFSR != 0) {
    28da:	4b30      	ldr	r3, [pc, #192]	; (299c <z_arm_fault+0x1b8>)
    28dc:	881b      	ldrh	r3, [r3, #0]
    28de:	b29b      	uxth	r3, r3
    28e0:	b113      	cbz	r3, 28e8 <z_arm_fault+0x104>
		reason = usage_fault(esf);
    28e2:	f7ff fed7 	bl	2694 <usage_fault.isra.0>
    28e6:	e7ed      	b.n	28c4 <z_arm_fault+0xe0>
		} else if (SAU->SFSR != 0) {
    28e8:	4b2d      	ldr	r3, [pc, #180]	; (29a0 <z_arm_fault+0x1bc>)
    28ea:	695b      	ldr	r3, [r3, #20]
    28ec:	b10b      	cbz	r3, 28f2 <z_arm_fault+0x10e>
			secure_fault(esf);
    28ee:	f7ff ff27 	bl	2740 <secure_fault.isra.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    28f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    28f6:	b993      	cbnz	r3, 291e <z_arm_fault+0x13a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    28f8:	2220      	movs	r2, #32
    28fa:	4629      	mov	r1, r5
    28fc:	a802      	add	r0, sp, #8
    28fe:	f005 ff53 	bl	87a8 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2902:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2904:	b356      	cbz	r6, 295c <z_arm_fault+0x178>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2906:	f3c3 0208 	ubfx	r2, r3, #0, #9
    290a:	b922      	cbnz	r2, 2916 <z_arm_fault+0x132>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    290c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2910:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2914:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2916:	4620      	mov	r0, r4
    2918:	a902      	add	r1, sp, #8
    291a:	f7ff fd4d 	bl	23b8 <z_arm_fatal_error>
}
    291e:	b00a      	add	sp, #40	; 0x28
    2920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    2924:	2000      	movs	r0, #0
    2926:	f10d 0107 	add.w	r1, sp, #7
    292a:	e7c9      	b.n	28c0 <z_arm_fault+0xdc>
		reason = bus_fault(esf, 0, recoverable);
    292c:	2000      	movs	r0, #0
    292e:	f10d 0107 	add.w	r1, sp, #7
    2932:	e7cf      	b.n	28d4 <z_arm_fault+0xf0>
		secure_fault(esf);
    2934:	f7ff ff04 	bl	2740 <secure_fault.isra.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2938:	2400      	movs	r4, #0
}
    293a:	e7da      	b.n	28f2 <z_arm_fault+0x10e>
	PR_FAULT_INFO(
    293c:	2145      	movs	r1, #69	; 0x45
    293e:	4819      	ldr	r0, [pc, #100]	; (29a4 <z_arm_fault+0x1c0>)
    2940:	e7ae      	b.n	28a0 <z_arm_fault+0xbc>
	PR_FAULT_INFO("***** %s %d) *****",
    2942:	4919      	ldr	r1, [pc, #100]	; (29a8 <z_arm_fault+0x1c4>)
    2944:	f414 7ff8 	tst.w	r4, #496	; 0x1f0
    2948:	4a18      	ldr	r2, [pc, #96]	; (29ac <z_arm_fault+0x1c8>)
    294a:	4819      	ldr	r0, [pc, #100]	; (29b0 <z_arm_fault+0x1cc>)
    294c:	bf08      	it	eq
    294e:	460a      	moveq	r2, r1
    2950:	f1a7 0310 	sub.w	r3, r7, #16
    2954:	2145      	movs	r1, #69	; 0x45
    2956:	f005 fe14 	bl	8582 <z_log_minimal_printk>
    295a:	e7ed      	b.n	2938 <z_arm_fault+0x154>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    295c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2960:	f023 0301 	bic.w	r3, r3, #1
    2964:	e7d6      	b.n	2914 <z_arm_fault+0x130>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2966:	f1b8 0f00 	cmp.w	r8, #0
    296a:	f47f af6b 	bne.w	2844 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)msp;
    296e:	4605      	mov	r5, r0
			*nested_exc = true;
    2970:	2601      	movs	r6, #1
    2972:	e767      	b.n	2844 <z_arm_fault+0x60>
    2974:	e000ed00 	.word	0xe000ed00
    2978:	0105eda6 	.word	0x0105eda6
    297c:	00009d41 	.word	0x00009d41
    2980:	00009a10 	.word	0x00009a10
    2984:	00009292 	.word	0x00009292
    2988:	00009d65 	.word	0x00009d65
    298c:	00009d81 	.word	0x00009d81
    2990:	00009da7 	.word	0x00009da7
    2994:	e000ed28 	.word	0xe000ed28
    2998:	e000ed29 	.word	0xe000ed29
    299c:	e000ed2a 	.word	0xe000ed2a
    29a0:	e000edd0 	.word	0xe000edd0
    29a4:	00009dcb 	.word	0x00009dcb
    29a8:	00009d13 	.word	0x00009d13
    29ac:	00009d28 	.word	0x00009d28
    29b0:	00009df4 	.word	0x00009df4

000029b4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    29b4:	4b04      	ldr	r3, [pc, #16]	; (29c8 <z_arm_fault_init+0x14>)
    29b6:	695a      	ldr	r2, [r3, #20]
    29b8:	f042 0210 	orr.w	r2, r2, #16
    29bc:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    29be:	695a      	ldr	r2, [r3, #20]
    29c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    29c4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    29c6:	4770      	bx	lr
    29c8:	e000ed00 	.word	0xe000ed00

000029cc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    29cc:	4b04      	ldr	r3, [pc, #16]	; (29e0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    29ce:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    29d0:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    29d2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    29d4:	d003      	beq.n	29de <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    29d6:	4903      	ldr	r1, [pc, #12]	; (29e4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    29d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    29dc:	600a      	str	r2, [r1, #0]

000029de <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    29de:	4770      	bx	lr
	ldr r3, =_kernel
    29e0:	20000c30 	.word	0x20000c30
	ldr r1, =_SCS_ICSR
    29e4:	e000ed04 	.word	0xe000ed04

000029e8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    29e8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    29ec:	4905      	ldr	r1, [pc, #20]	; (2a04 <sys_arch_reboot+0x1c>)
    29ee:	4b06      	ldr	r3, [pc, #24]	; (2a08 <sys_arch_reboot+0x20>)
    29f0:	68ca      	ldr	r2, [r1, #12]
    29f2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    29f6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    29f8:	60cb      	str	r3, [r1, #12]
    29fa:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    29fe:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2a00:	e7fd      	b.n	29fe <sys_arch_reboot+0x16>
    2a02:	bf00      	nop
    2a04:	e000ed00 	.word	0xe000ed00
    2a08:	05fa0004 	.word	0x05fa0004

00002a0c <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    2a0c:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    2a0e:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2a10:	4a05      	ldr	r2, [pc, #20]	; (2a28 <z_arm_clear_arm_mpu_config+0x1c>)
    2a12:	6811      	ldr	r1, [r2, #0]
	int num_regions =
    2a14:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
    2a18:	428b      	cmp	r3, r1
    2a1a:	d100      	bne.n	2a1e <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    2a1c:	4770      	bx	lr
  mpu->RNR = rnr;
    2a1e:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    2a20:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    2a22:	3301      	adds	r3, #1
    2a24:	e7f8      	b.n	2a18 <z_arm_clear_arm_mpu_config+0xc>
    2a26:	bf00      	nop
    2a28:	e000ed90 	.word	0xe000ed90

00002a2c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2a2c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2a2e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2a30:	2400      	movs	r4, #0
    2a32:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2a36:	f7ff ffe9 	bl	2a0c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2a3a:	4a0e      	ldr	r2, [pc, #56]	; (2a74 <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
    2a3c:	4623      	mov	r3, r4
    2a3e:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
    2a40:	f04f 34ff 	mov.w	r4, #4294967295
    2a44:	f103 0020 	add.w	r0, r3, #32
    2a48:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2a4a:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    2a4c:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2a50:	d1f8      	bne.n	2a44 <z_arm_init_arch_hw_at_boot+0x18>
    2a52:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2a54:	f04f 30ff 	mov.w	r0, #4294967295
    2a58:	f103 0260 	add.w	r2, r3, #96	; 0x60
    2a5c:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2a5e:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2a60:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2a64:	d1f8      	bne.n	2a58 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    2a66:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2a68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a6c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2a70:	bd10      	pop	{r4, pc}
    2a72:	bf00      	nop
    2a74:	e000e100 	.word	0xe000e100

00002a78 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2a78:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a7a:	2120      	movs	r1, #32
    2a7c:	4803      	ldr	r0, [pc, #12]	; (2a8c <z_arm_interrupt_init+0x14>)
    2a7e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2a80:	3301      	adds	r3, #1
    2a82:	2b45      	cmp	r3, #69	; 0x45
    2a84:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2a88:	d1f9      	bne.n	2a7e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2a8a:	4770      	bx	lr
    2a8c:	e000e100 	.word	0xe000e100

00002a90 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2a90:	4b06      	ldr	r3, [pc, #24]	; (2aac <z_impl_k_thread_abort+0x1c>)
    2a92:	689b      	ldr	r3, [r3, #8]
    2a94:	4283      	cmp	r3, r0
    2a96:	d107      	bne.n	2aa8 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2a98:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2a9c:	b123      	cbz	r3, 2aa8 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2a9e:	4a04      	ldr	r2, [pc, #16]	; (2ab0 <z_impl_k_thread_abort+0x20>)
    2aa0:	6853      	ldr	r3, [r2, #4]
    2aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2aa6:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    2aa8:	f002 bb16 	b.w	50d8 <z_thread_abort>
    2aac:	20000c30 	.word	0x20000c30
    2ab0:	e000ed00 	.word	0xe000ed00

00002ab4 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    2ab4:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    2ab6:	4b0c      	ldr	r3, [pc, #48]	; (2ae8 <tz_nonsecure_state_setup+0x34>)
    2ab8:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    2aba:	6803      	ldr	r3, [r0, #0]
    2abc:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    2ac0:	6843      	ldr	r3, [r0, #4]
    2ac2:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    2ac6:	7b02      	ldrb	r2, [r0, #12]
    2ac8:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    2acc:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    2ad0:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    2ad4:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    2ad6:	bf48      	it	mi
    2ad8:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    2adc:	b109      	cbz	r1, 2ae2 <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    2ade:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    2ae2:	f383 8894 	msr	CONTROL_NS, r3
}
    2ae6:	4770      	bx	lr
    2ae8:	e002ed00 	.word	0xe002ed00

00002aec <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2aec:	4a08      	ldr	r2, [pc, #32]	; (2b10 <tz_nbanked_exception_target_state_set+0x24>)
    2aee:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    2af0:	b148      	cbz	r0, 2b06 <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    2af2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2af6:	041b      	lsls	r3, r3, #16
    2af8:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    2afa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    2afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    2b02:	60d3      	str	r3, [r2, #12]
}
    2b04:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2b06:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    2b08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2b0c:	e7f5      	b.n	2afa <tz_nbanked_exception_target_state_set+0xe>
    2b0e:	bf00      	nop
    2b10:	e000ed00 	.word	0xe000ed00

00002b14 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2b14:	4a08      	ldr	r2, [pc, #32]	; (2b38 <tz_nonsecure_exception_prio_config+0x24>)
    2b16:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    2b18:	b140      	cbz	r0, 2b2c <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2b1a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    2b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    2b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    2b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    2b28:	60d3      	str	r3, [r2, #12]
}
    2b2a:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    2b2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    2b30:	041b      	lsls	r3, r3, #16
    2b32:	0c1b      	lsrs	r3, r3, #16
    2b34:	e7f4      	b.n	2b20 <tz_nonsecure_exception_prio_config+0xc>
    2b36:	bf00      	nop
    2b38:	e000ed00 	.word	0xe000ed00

00002b3c <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2b3c:	4a08      	ldr	r2, [pc, #32]	; (2b60 <tz_nonsecure_system_reset_req_block+0x24>)
    2b3e:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    2b40:	b140      	cbz	r0, 2b54 <tz_nonsecure_system_reset_req_block+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2b42:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    2b44:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    2b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    2b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    2b50:	60d3      	str	r3, [r2, #12]
}
    2b52:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    2b54:	f023 0308 	bic.w	r3, r3, #8
    2b58:	041b      	lsls	r3, r3, #16
    2b5a:	0c1b      	lsrs	r3, r3, #16
    2b5c:	e7f4      	b.n	2b48 <tz_nonsecure_system_reset_req_block+0xc>
    2b5e:	bf00      	nop
    2b60:	e000ed00 	.word	0xe000ed00

00002b64 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    2b64:	4a03      	ldr	r2, [pc, #12]	; (2b74 <tz_nonsecure_fpu_access_enable+0x10>)
    2b66:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2b6a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2b6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    2b72:	4770      	bx	lr
    2b74:	e000ed00 	.word	0xe000ed00

00002b78 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
    2b78:	4b08      	ldr	r3, [pc, #32]	; (2b9c <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    2b7a:	681a      	ldr	r2, [r3, #0]
    2b7c:	b118      	cbz	r0, 2b86 <tz_sau_configure+0xe>
    2b7e:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    2b82:	601a      	str	r2, [r3, #0]
		}
	}
}
    2b84:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    2b86:	f022 0201 	bic.w	r2, r2, #1
    2b8a:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    2b8c:	681a      	ldr	r2, [r3, #0]
		if (allns) {
    2b8e:	b111      	cbz	r1, 2b96 <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    2b90:	f042 0202 	orr.w	r2, r2, #2
    2b94:	e7f5      	b.n	2b82 <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    2b96:	f022 0202 	bic.w	r2, r2, #2
    2b9a:	e7f2      	b.n	2b82 <tz_sau_configure+0xa>
    2b9c:	e000edd0 	.word	0xe000edd0

00002ba0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    2ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2ba2:	4c09      	ldr	r4, [pc, #36]	; (2bc8 <z_arm_configure_static_mpu_regions+0x28>)
    2ba4:	4a09      	ldr	r2, [pc, #36]	; (2bcc <z_arm_configure_static_mpu_regions+0x2c>)
    2ba6:	4623      	mov	r3, r4
    2ba8:	2101      	movs	r1, #1
    2baa:	4809      	ldr	r0, [pc, #36]	; (2bd0 <z_arm_configure_static_mpu_regions+0x30>)
    2bac:	f000 f91a 	bl	2de4 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    2bb0:	2300      	movs	r3, #0
    2bb2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    2bb4:	4b07      	ldr	r3, [pc, #28]	; (2bd4 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2bb6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    2bb8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2bba:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    2bbc:	9301      	str	r3, [sp, #4]
    2bbe:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2bc0:	f000 f92c 	bl	2e1c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    2bc4:	b004      	add	sp, #16
    2bc6:	bd10      	pop	{r4, pc}
    2bc8:	20008000 	.word	0x20008000
    2bcc:	20000000 	.word	0x20000000
    2bd0:	00009060 	.word	0x00009060
    2bd4:	20000170 	.word	0x20000170

00002bd8 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    2bd8:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2bda:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    2bdc:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2bde:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    2be2:	f004 031f 	and.w	r3, r4, #31
    2be6:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2be8:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2bea:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2bec:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    2bf0:	4904      	ldr	r1, [pc, #16]	; (2c04 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2bf2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    2bf6:	f043 0301 	orr.w	r3, r3, #1
    2bfa:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    2bfc:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    2bfe:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    2c00:	bd10      	pop	{r4, pc}
    2c02:	bf00      	nop
    2c04:	e000ed90 	.word	0xe000ed90

00002c08 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    2c08:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    2c0a:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    2c0c:	680c      	ldr	r4, [r1, #0]
{
    2c0e:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    2c10:	890a      	ldrh	r2, [r1, #8]
    2c12:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    2c14:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2c16:	3b01      	subs	r3, #1
    2c18:	f024 041f 	bic.w	r4, r4, #31
    2c1c:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    2c1e:	f002 021f 	and.w	r2, r2, #31
    2c22:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2c26:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    2c2a:	2807      	cmp	r0, #7
    2c2c:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    2c2e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2c32:	9303      	str	r3, [sp, #12]
    2c34:	d909      	bls.n	2c4a <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2c36:	4602      	mov	r2, r0
    2c38:	2145      	movs	r1, #69	; 0x45
    2c3a:	4806      	ldr	r0, [pc, #24]	; (2c54 <mpu_configure_region+0x4c>)
    2c3c:	f005 fca1 	bl	8582 <z_log_minimal_printk>
    2c40:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    2c44:	4620      	mov	r0, r4
    2c46:	b005      	add	sp, #20
    2c48:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    2c4a:	4669      	mov	r1, sp
    2c4c:	f7ff ffc4 	bl	2bd8 <region_init>
	return region_allocate_and_init(index,
    2c50:	e7f8      	b.n	2c44 <mpu_configure_region+0x3c>
    2c52:	bf00      	nop
    2c54:	00009e10 	.word	0x00009e10

00002c58 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c5c:	4689      	mov	r9, r1
    2c5e:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2c60:	4606      	mov	r6, r0
    2c62:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    2c66:	4d52      	ldr	r5, [pc, #328]	; (2db0 <mpu_configure_regions_and_partition.constprop.0+0x158>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2c68:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    2c6a:	45c8      	cmp	r8, r9
    2c6c:	da23      	bge.n	2cb6 <mpu_configure_regions_and_partition.constprop.0+0x5e>
		if (regions[i].size == 0U) {
    2c6e:	6877      	ldr	r7, [r6, #4]
    2c70:	2f00      	cmp	r7, #0
    2c72:	d042      	beq.n	2cfa <mpu_configure_regions_and_partition.constprop.0+0xa2>
		&&
    2c74:	2f1f      	cmp	r7, #31
    2c76:	d917      	bls.n	2ca8 <mpu_configure_regions_and_partition.constprop.0+0x50>
		&&
    2c78:	06fb      	lsls	r3, r7, #27
    2c7a:	d115      	bne.n	2ca8 <mpu_configure_regions_and_partition.constprop.0+0x50>
		((part->start &
    2c7c:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    2c80:	f01a 0f1f 	tst.w	sl, #31
    2c84:	d110      	bne.n	2ca8 <mpu_configure_regions_and_partition.constprop.0+0x50>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2c86:	4650      	mov	r0, sl
    2c88:	f005 fd3d 	bl	8706 <arm_cmse_mpu_region_get>
    2c8c:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2c8e:	eb07 000a 	add.w	r0, r7, sl
    2c92:	3801      	subs	r0, #1
    2c94:	f005 fd37 	bl	8706 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2c98:	4583      	cmp	fp, r0
    2c9a:	d010      	beq.n	2cbe <mpu_configure_regions_and_partition.constprop.0+0x66>
	return -EINVAL;
    2c9c:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    2ca0:	465a      	mov	r2, fp
    2ca2:	2145      	movs	r1, #69	; 0x45
    2ca4:	4843      	ldr	r0, [pc, #268]	; (2db4 <mpu_configure_regions_and_partition.constprop.0+0x15c>)
    2ca6:	e002      	b.n	2cae <mpu_configure_regions_and_partition.constprop.0+0x56>
			LOG_ERR("Partition %u: sanity check failed.", i);
    2ca8:	4642      	mov	r2, r8
    2caa:	2145      	movs	r1, #69	; 0x45
    2cac:	4842      	ldr	r0, [pc, #264]	; (2db8 <mpu_configure_regions_and_partition.constprop.0+0x160>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2cae:	f005 fc68 	bl	8582 <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    2cb2:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    2cb6:	4620      	mov	r0, r4
    2cb8:	b005      	add	sp, #20
    2cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    2cbe:	f11b 0f16 	cmn.w	fp, #22
    2cc2:	d0ed      	beq.n	2ca0 <mpu_configure_regions_and_partition.constprop.0+0x48>
			(u_reg_index > (reg_index - 1))) {
    2cc4:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    2cc6:	455b      	cmp	r3, fp
    2cc8:	dbea      	blt.n	2ca0 <mpu_configure_regions_and_partition.constprop.0+0x48>
	MPU->RNR = index;
    2cca:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2cce:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    2cd0:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2cd4:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2cd6:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    2cda:	e9d6 3200 	ldrd	r3, r2, [r6]
    2cde:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    2ce0:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2ce2:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    2ce6:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    2cea:	d11c      	bne.n	2d26 <mpu_configure_regions_and_partition.constprop.0+0xce>
    2cec:	4557      	cmp	r7, sl
    2cee:	d108      	bne.n	2d02 <mpu_configure_regions_and_partition.constprop.0+0xaa>
			mpu_configure_region(u_reg_index, &regions[i]);
    2cf0:	4631      	mov	r1, r6
    2cf2:	fa5f f08b 	uxtb.w	r0, fp
    2cf6:	f7ff ff87 	bl	2c08 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    2cfa:	f108 0801 	add.w	r8, r8, #1
    2cfe:	360c      	adds	r6, #12
    2d00:	e7b3      	b.n	2c6a <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    2d02:	4631      	mov	r1, r6
	MPU->RNR = index;
    2d04:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2d08:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    2d0a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2d0e:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    2d12:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2d14:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    2d16:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    2d18:	f7ff ff76 	bl	2c08 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    2d1c:	f110 0f16 	cmn.w	r0, #22
    2d20:	d0c7      	beq.n	2cb2 <mpu_configure_regions_and_partition.constprop.0+0x5a>
			reg_index++;
    2d22:	1c44      	adds	r4, r0, #1
    2d24:	e7e9      	b.n	2cfa <mpu_configure_regions_and_partition.constprop.0+0xa2>
		} else if (reg_last == u_reg_last) {
    2d26:	3b01      	subs	r3, #1
    2d28:	4557      	cmp	r7, sl
    2d2a:	b2e0      	uxtb	r0, r4
    2d2c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    2d30:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
    2d34:	d106      	bne.n	2d44 <mpu_configure_regions_and_partition.constprop.0+0xec>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2d36:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    2d38:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2d3a:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    2d3e:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2d40:	612b      	str	r3, [r5, #16]
			reg_index =
    2d42:	e7e9      	b.n	2d18 <mpu_configure_regions_and_partition.constprop.0+0xc0>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2d44:	6929      	ldr	r1, [r5, #16]
    2d46:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    2d4a:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2d4c:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    2d4e:	4631      	mov	r1, r6
    2d50:	f7ff ff5a 	bl	2c08 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    2d54:	f110 0f16 	cmn.w	r0, #22
    2d58:	d0ab      	beq.n	2cb2 <mpu_configure_regions_and_partition.constprop.0+0x5a>
	MPU->RNR = index;
    2d5a:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    2d5e:	68ea      	ldr	r2, [r5, #12]
    2d60:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    2d64:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
    2d66:	f362 0304 	bfi	r3, r2, #0, #5
    2d6a:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2d6e:	692b      	ldr	r3, [r5, #16]
    2d70:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2d74:	085b      	lsrs	r3, r3, #1
    2d76:	f363 1247 	bfi	r2, r3, #5, #3
    2d7a:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    2d7e:	e9d6 3200 	ldrd	r3, r2, [r6]
    2d82:	4413      	add	r3, r2
    2d84:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    2d86:	f023 031f 	bic.w	r3, r3, #31
    2d8a:	443b      	add	r3, r7
			reg_index++;
    2d8c:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    2d8e:	eba3 0a0a 	sub.w	sl, r3, sl
    2d92:	b2e0      	uxtb	r0, r4
    2d94:	f02a 031f 	bic.w	r3, sl, #31
	if (index > (get_num_regions() - 1U)) {
    2d98:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    2d9a:	9303      	str	r3, [sp, #12]
    2d9c:	d903      	bls.n	2da6 <mpu_configure_regions_and_partition.constprop.0+0x14e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2d9e:	4602      	mov	r2, r0
    2da0:	2145      	movs	r1, #69	; 0x45
    2da2:	4806      	ldr	r0, [pc, #24]	; (2dbc <mpu_configure_regions_and_partition.constprop.0+0x164>)
    2da4:	e783      	b.n	2cae <mpu_configure_regions_and_partition.constprop.0+0x56>
	region_init(index, region_conf);
    2da6:	4669      	mov	r1, sp
    2da8:	f7ff ff16 	bl	2bd8 <region_init>
    2dac:	e7b9      	b.n	2d22 <mpu_configure_regions_and_partition.constprop.0+0xca>
    2dae:	bf00      	nop
    2db0:	e000ed90 	.word	0xe000ed90
    2db4:	00009e63 	.word	0x00009e63
    2db8:	00009e3b 	.word	0x00009e3b
    2dbc:	00009e10 	.word	0x00009e10

00002dc0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2dc0:	2205      	movs	r2, #5
    2dc2:	4b03      	ldr	r3, [pc, #12]	; (2dd0 <arm_core_mpu_enable+0x10>)
    2dc4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2dc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2dca:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2dce:	4770      	bx	lr
    2dd0:	e000ed90 	.word	0xe000ed90

00002dd4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2dd4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2dd8:	2200      	movs	r2, #0
    2dda:	4b01      	ldr	r3, [pc, #4]	; (2de0 <arm_core_mpu_disable+0xc>)
    2ddc:	605a      	str	r2, [r3, #4]
}
    2dde:	4770      	bx	lr
    2de0:	e000ed90 	.word	0xe000ed90

00002de4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2de4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2de6:	4c0a      	ldr	r4, [pc, #40]	; (2e10 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    2de8:	7822      	ldrb	r2, [r4, #0]
    2dea:	f7ff ff35 	bl	2c58 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2dee:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    2df0:	3016      	adds	r0, #22
    2df2:	d10c      	bne.n	2e0e <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2df4:	4907      	ldr	r1, [pc, #28]	; (2e14 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    2df6:	4808      	ldr	r0, [pc, #32]	; (2e18 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    2df8:	f240 1205 	movw	r2, #261	; 0x105
    2dfc:	f005 fae0 	bl	83c0 <printk>
			regions_num);
	}
}
    2e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2e04:	f240 1105 	movw	r1, #261	; 0x105
    2e08:	4802      	ldr	r0, [pc, #8]	; (2e14 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    2e0a:	f005 bba5 	b.w	8558 <assert_post_action>
}
    2e0e:	bd10      	pop	{r4, pc}
    2e10:	2000173c 	.word	0x2000173c
    2e14:	00009e8b 	.word	0x00009e8b
    2e18:	00009292 	.word	0x00009292

00002e1c <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    2e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e20:	4d2d      	ldr	r5, [pc, #180]	; (2ed8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>)
    2e22:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2e24:	4606      	mov	r6, r0
    2e26:	f04f 0800 	mov.w	r8, #0
    2e2a:	46ab      	mov	fp, r5
	MPU->RNR = index;
    2e2c:	4f2b      	ldr	r7, [pc, #172]	; (2edc <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2e2e:	45d0      	cmp	r8, sl
    2e30:	db02      	blt.n	2e38 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    2e32:	b003      	add	sp, #12
    2e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    2e38:	f8d6 9004 	ldr.w	r9, [r6, #4]
    2e3c:	f1b9 0f00 	cmp.w	r9, #0
    2e40:	d044      	beq.n	2ecc <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    2e42:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2e44:	4608      	mov	r0, r1
    2e46:	9101      	str	r1, [sp, #4]
    2e48:	f005 fc5d 	bl	8706 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2e4c:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2e4e:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2e50:	eb09 0001 	add.w	r0, r9, r1
    2e54:	3801      	subs	r0, #1
    2e56:	f005 fc56 	bl	8706 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2e5a:	4284      	cmp	r4, r0
    2e5c:	f04f 0214 	mov.w	r2, #20
    2e60:	4b1f      	ldr	r3, [pc, #124]	; (2ee0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
    2e62:	d013      	beq.n	2e8c <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    2e64:	f06f 0315 	mvn.w	r3, #21
    2e68:	fb02 f808 	mul.w	r8, r2, r8
    2e6c:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    2e70:	f240 1215 	movw	r2, #277	; 0x115
    2e74:	491b      	ldr	r1, [pc, #108]	; (2ee4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    2e76:	481c      	ldr	r0, [pc, #112]	; (2ee8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    2e78:	f005 faa2 	bl	83c0 <printk>
    2e7c:	f240 1115 	movw	r1, #277	; 0x115
    2e80:	4818      	ldr	r0, [pc, #96]	; (2ee4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
}
    2e82:	b003      	add	sp, #12
    2e84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    2e88:	f005 bb66 	b.w	8558 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    2e8c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    2e90:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    2e92:	d0ed      	beq.n	2e70 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    2e94:	7819      	ldrb	r1, [r3, #0]
    2e96:	42a1      	cmp	r1, r4
    2e98:	ddea      	ble.n	2e70 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    2e9a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    2e9e:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    2ea0:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    2ea2:	68fc      	ldr	r4, [r7, #12]
    2ea4:	f100 0108 	add.w	r1, r0, #8
    2ea8:	7b00      	ldrb	r0, [r0, #12]
    2eaa:	f364 0004 	bfi	r0, r4, #0, #5
    2eae:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2eb0:	6938      	ldr	r0, [r7, #16]
    2eb2:	790c      	ldrb	r4, [r1, #4]
    2eb4:	0840      	lsrs	r0, r0, #1
    2eb6:	f360 1447 	bfi	r4, r0, #5, #3
    2eba:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    2ebc:	68f9      	ldr	r1, [r7, #12]
    2ebe:	f021 011f 	bic.w	r1, r1, #31
    2ec2:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    2ec4:	6939      	ldr	r1, [r7, #16]
    2ec6:	f021 011f 	bic.w	r1, r1, #31
    2eca:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2ecc:	f108 0801 	add.w	r8, r8, #1
    2ed0:	3514      	adds	r5, #20
    2ed2:	360c      	adds	r6, #12
    2ed4:	e7ab      	b.n	2e2e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    2ed6:	bf00      	nop
    2ed8:	20000a50 	.word	0x20000a50
    2edc:	e000ed90 	.word	0xe000ed90
    2ee0:	2000173c 	.word	0x2000173c
    2ee4:	00009e8b 	.word	0x00009e8b
    2ee8:	00009292 	.word	0x00009292

00002eec <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    2eec:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2eee:	4d1b      	ldr	r5, [pc, #108]	; (2f5c <z_arm_mpu_init+0x70>)
    2ef0:	682e      	ldr	r6, [r5, #0]
    2ef2:	2e08      	cmp	r6, #8
    2ef4:	d90d      	bls.n	2f12 <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    2ef6:	f44f 729e 	mov.w	r2, #316	; 0x13c
    2efa:	4919      	ldr	r1, [pc, #100]	; (2f60 <z_arm_mpu_init+0x74>)
    2efc:	4819      	ldr	r0, [pc, #100]	; (2f64 <z_arm_mpu_init+0x78>)
    2efe:	f005 fa5f 	bl	83c0 <printk>
    2f02:	4817      	ldr	r0, [pc, #92]	; (2f60 <z_arm_mpu_init+0x74>)
    2f04:	f44f 719e 	mov.w	r1, #316	; 0x13c
    2f08:	f005 fb26 	bl	8558 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    2f0c:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    2f10:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
    2f12:	f7ff ff5f 	bl	2dd4 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2f16:	2000      	movs	r0, #0
	MPU->MAIR0 =
    2f18:	4c13      	ldr	r4, [pc, #76]	; (2f68 <z_arm_mpu_init+0x7c>)
    2f1a:	4a14      	ldr	r2, [pc, #80]	; (2f6c <z_arm_mpu_init+0x80>)
    2f1c:	6322      	str	r2, [r4, #48]	; 0x30
    2f1e:	4286      	cmp	r6, r0
    2f20:	d115      	bne.n	2f4e <z_arm_mpu_init+0x62>
	static_regions_num = mpu_config.num_regions;
    2f22:	4b13      	ldr	r3, [pc, #76]	; (2f70 <z_arm_mpu_init+0x84>)
    2f24:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
    2f26:	f7ff ff4b 	bl	2dc0 <arm_core_mpu_enable>
	__ASSERT(
    2f2a:	6823      	ldr	r3, [r4, #0]
    2f2c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2f30:	2b08      	cmp	r3, #8
    2f32:	d00a      	beq.n	2f4a <z_arm_mpu_init+0x5e>
    2f34:	490a      	ldr	r1, [pc, #40]	; (2f60 <z_arm_mpu_init+0x74>)
    2f36:	480b      	ldr	r0, [pc, #44]	; (2f64 <z_arm_mpu_init+0x78>)
    2f38:	f44f 72cf 	mov.w	r2, #414	; 0x19e
    2f3c:	f005 fa40 	bl	83c0 <printk>
    2f40:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    2f44:	4806      	ldr	r0, [pc, #24]	; (2f60 <z_arm_mpu_init+0x74>)
    2f46:	f005 fb07 	bl	8558 <assert_post_action>
	return 0;
    2f4a:	2000      	movs	r0, #0
    2f4c:	e7e0      	b.n	2f10 <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    2f4e:	6869      	ldr	r1, [r5, #4]
    2f50:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    2f54:	f7ff fe40 	bl	2bd8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2f58:	3001      	adds	r0, #1
    2f5a:	e7e0      	b.n	2f1e <z_arm_mpu_init+0x32>
    2f5c:	0000906c 	.word	0x0000906c
    2f60:	00009e8b 	.word	0x00009e8b
    2f64:	00009292 	.word	0x00009292
    2f68:	e000ed90 	.word	0xe000ed90
    2f6c:	0044ffaa 	.word	0x0044ffaa
    2f70:	2000173c 	.word	0x2000173c

00002f74 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2f74:	4b01      	ldr	r3, [pc, #4]	; (2f7c <__stdout_hook_install+0x8>)
    2f76:	6018      	str	r0, [r3, #0]
}
    2f78:	4770      	bx	lr
    2f7a:	bf00      	nop
    2f7c:	20000028 	.word	0x20000028

00002f80 <remoteproc_mgr_boot>:
{
	/* UARTE */
	/* Assign specific GPIOs that will be used to get UARTE from
	 * nRF5340 Network MCU.
	 */
	CPUNET_UARTE_PORT_TRX->PIN_CNF[CPUNET_UARTE_PIN_TX] =
    2f80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2f84:	4a07      	ldr	r2, [pc, #28]	; (2fa4 <remoteproc_mgr_boot+0x24>)

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    2f86:	2000      	movs	r0, #0
	CPUNET_UARTE_PORT_TRX->PIN_CNF[CPUNET_UARTE_PIN_TX] =
    2f88:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	CPUNET_UARTE_PORT_TRX->PIN_CNF[CPUNET_UARTE_PIN_RX] =
    2f8c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_RTS] =
    2f90:	f842 3cd4 	str.w	r3, [r2, #-212]
	NRF_P0->PIN_CNF[CPUNET_UARTE_PIN_CTS] =
    2f94:	f842 3cd8 	str.w	r3, [r2, #-216]
	NRF_SPU->EXTDOMAIN[0].PERM = 1 << 4;
    2f98:	2210      	movs	r2, #16
    2f9a:	4b03      	ldr	r3, [pc, #12]	; (2fa8 <remoteproc_mgr_boot+0x28>)
    2f9c:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
}
    2fa0:	4770      	bx	lr
    2fa2:	bf00      	nop
    2fa4:	50842800 	.word	0x50842800
    2fa8:	50003000 	.word	0x50003000

00002fac <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2fac:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2fae:	794b      	ldrb	r3, [r1, #5]
    2fb0:	2b01      	cmp	r3, #1
    2fb2:	d02c      	beq.n	300e <uarte_nrfx_configure+0x62>
    2fb4:	2b03      	cmp	r3, #3
    2fb6:	d127      	bne.n	3008 <uarte_nrfx_configure+0x5c>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2fb8:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2fba:	798b      	ldrb	r3, [r1, #6]
    2fbc:	2b03      	cmp	r3, #3
    2fbe:	d123      	bne.n	3008 <uarte_nrfx_configure+0x5c>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2fc0:	79cd      	ldrb	r5, [r1, #7]
    2fc2:	b12d      	cbz	r5, 2fd0 <uarte_nrfx_configure+0x24>
    2fc4:	2d01      	cmp	r5, #1
    2fc6:	d11f      	bne.n	3008 <uarte_nrfx_configure+0x5c>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    2fc8:	6843      	ldr	r3, [r0, #4]
    2fca:	685b      	ldr	r3, [r3, #4]
    2fcc:	079b      	lsls	r3, r3, #30
    2fce:	d01b      	beq.n	3008 <uarte_nrfx_configure+0x5c>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2fd0:	790a      	ldrb	r2, [r1, #4]
    2fd2:	2a01      	cmp	r2, #1
    2fd4:	d01d      	beq.n	3012 <uarte_nrfx_configure+0x66>
    2fd6:	2a02      	cmp	r2, #2
    2fd8:	d01f      	beq.n	301a <uarte_nrfx_configure+0x6e>
    2fda:	b9aa      	cbnz	r2, 3008 <uarte_nrfx_configure+0x5c>
    2fdc:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2fde:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2fe0:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
    2fe2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2fe6:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
    2fe8:	d06e      	beq.n	30c8 <uarte_nrfx_configure+0x11c>
    2fea:	d833      	bhi.n	3054 <uarte_nrfx_configure+0xa8>
    2fec:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2ff0:	d06d      	beq.n	30ce <uarte_nrfx_configure+0x122>
    2ff2:	d81c      	bhi.n	302e <uarte_nrfx_configure+0x82>
    2ff4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2ff8:	d06b      	beq.n	30d2 <uarte_nrfx_configure+0x126>
    2ffa:	d810      	bhi.n	301e <uarte_nrfx_configure+0x72>
    2ffc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3000:	d06a      	beq.n	30d8 <uarte_nrfx_configure+0x12c>
    3002:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3006:	d06a      	beq.n	30de <uarte_nrfx_configure+0x132>
    3008:	f06f 0085 	mvn.w	r0, #133	; 0x85
    300c:	e05b      	b.n	30c6 <uarte_nrfx_configure+0x11a>
	switch (cfg->stop_bits) {
    300e:	2700      	movs	r7, #0
    3010:	e7d3      	b.n	2fba <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    3012:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3016:	220e      	movs	r2, #14
    3018:	e7e1      	b.n	2fde <uarte_nrfx_configure+0x32>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    301a:	2400      	movs	r4, #0
    301c:	e7fb      	b.n	3016 <uarte_nrfx_configure+0x6a>
	switch (baudrate) {
    301e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3022:	d05f      	beq.n	30e4 <uarte_nrfx_configure+0x138>
    3024:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3028:	d1ee      	bne.n	3008 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    302a:	4b39      	ldr	r3, [pc, #228]	; (3110 <uarte_nrfx_configure+0x164>)
    302c:	e03e      	b.n	30ac <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    302e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3032:	d05a      	beq.n	30ea <uarte_nrfx_configure+0x13e>
    3034:	d807      	bhi.n	3046 <uarte_nrfx_configure+0x9a>
    3036:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    303a:	d058      	beq.n	30ee <uarte_nrfx_configure+0x142>
    303c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3040:	d1e2      	bne.n	3008 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3042:	4b34      	ldr	r3, [pc, #208]	; (3114 <uarte_nrfx_configure+0x168>)
    3044:	e032      	b.n	30ac <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    3046:	f647 2c12 	movw	ip, #31250	; 0x7a12
    304a:	4563      	cmp	r3, ip
    304c:	d1dc      	bne.n	3008 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    304e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3052:	e02b      	b.n	30ac <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    3054:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3058:	d04b      	beq.n	30f2 <uarte_nrfx_configure+0x146>
    305a:	d813      	bhi.n	3084 <uarte_nrfx_configure+0xd8>
    305c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3060:	d04a      	beq.n	30f8 <uarte_nrfx_configure+0x14c>
    3062:	d809      	bhi.n	3078 <uarte_nrfx_configure+0xcc>
    3064:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    3068:	4563      	cmp	r3, ip
    306a:	d047      	beq.n	30fc <uarte_nrfx_configure+0x150>
    306c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3070:	d1ca      	bne.n	3008 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3072:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3076:	e019      	b.n	30ac <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    3078:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    307c:	d1c4      	bne.n	3008 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    307e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3082:	e013      	b.n	30ac <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    3084:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3088:	d03b      	beq.n	3102 <uarte_nrfx_configure+0x156>
    308a:	d809      	bhi.n	30a0 <uarte_nrfx_configure+0xf4>
    308c:	f8df c098 	ldr.w	ip, [pc, #152]	; 3128 <uarte_nrfx_configure+0x17c>
    3090:	4563      	cmp	r3, ip
    3092:	d039      	beq.n	3108 <uarte_nrfx_configure+0x15c>
    3094:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3098:	d1b6      	bne.n	3008 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    309a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    309e:	e005      	b.n	30ac <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    30a0:	f8df c088 	ldr.w	ip, [pc, #136]	; 312c <uarte_nrfx_configure+0x180>
    30a4:	4563      	cmp	r3, ip
    30a6:	d1af      	bne.n	3008 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    30a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    30ac:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    30b0:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
    30b2:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
    30b4:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
    30b6:	4322      	orrs	r2, r4
    30b8:	3304      	adds	r3, #4
    30ba:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    30bc:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
    30c0:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    30c4:	2000      	movs	r0, #0
}
    30c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    30c8:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    30cc:	e7ee      	b.n	30ac <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    30ce:	4b12      	ldr	r3, [pc, #72]	; (3118 <uarte_nrfx_configure+0x16c>)
    30d0:	e7ec      	b.n	30ac <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    30d2:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    30d6:	e7e9      	b.n	30ac <uarte_nrfx_configure+0x100>
		nrf_baudrate = 0x00014000;
    30d8:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    30dc:	e7e6      	b.n	30ac <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    30de:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    30e2:	e7e3      	b.n	30ac <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    30e4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    30e8:	e7e0      	b.n	30ac <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    30ea:	4b0c      	ldr	r3, [pc, #48]	; (311c <uarte_nrfx_configure+0x170>)
    30ec:	e7de      	b.n	30ac <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    30ee:	4b0c      	ldr	r3, [pc, #48]	; (3120 <uarte_nrfx_configure+0x174>)
    30f0:	e7dc      	b.n	30ac <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    30f2:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    30f6:	e7d9      	b.n	30ac <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    30f8:	4b0a      	ldr	r3, [pc, #40]	; (3124 <uarte_nrfx_configure+0x178>)
    30fa:	e7d7      	b.n	30ac <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    30fc:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3100:	e7d4      	b.n	30ac <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3102:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3106:	e7d1      	b.n	30ac <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3108:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    310c:	e7ce      	b.n	30ac <uarte_nrfx_configure+0x100>
    310e:	bf00      	nop
    3110:	0013b000 	.word	0x0013b000
    3114:	004ea000 	.word	0x004ea000
    3118:	00275000 	.word	0x00275000
    311c:	0075c000 	.word	0x0075c000
    3120:	003af000 	.word	0x003af000
    3124:	013a9000 	.word	0x013a9000
    3128:	0003d090 	.word	0x0003d090
    312c:	000f4240 	.word	0x000f4240

00003130 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3130:	6802      	ldr	r2, [r0, #0]
{
    3132:	b510      	push	{r4, lr}
    switch (port)
    3134:	0953      	lsrs	r3, r2, #5
{
    3136:	4604      	mov	r4, r0
    switch (port)
    3138:	d029      	beq.n	318e <nrf_gpio_pin_port_decode+0x5e>
    313a:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    313c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3140:	bf18      	it	ne
    3142:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    3144:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3148:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    314a:	07db      	lsls	r3, r3, #31
    314c:	d40a      	bmi.n	3164 <nrf_gpio_pin_port_decode+0x34>
    314e:	4912      	ldr	r1, [pc, #72]	; (3198 <nrf_gpio_pin_port_decode+0x68>)
    3150:	4812      	ldr	r0, [pc, #72]	; (319c <nrf_gpio_pin_port_decode+0x6c>)
    3152:	f44f 7205 	mov.w	r2, #532	; 0x214
    3156:	f005 f933 	bl	83c0 <printk>
    315a:	f44f 7105 	mov.w	r1, #532	; 0x214
    315e:	480e      	ldr	r0, [pc, #56]	; (3198 <nrf_gpio_pin_port_decode+0x68>)
    3160:	f005 f9fa 	bl	8558 <assert_post_action>
    uint32_t pin_number = *p_pin;
    3164:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3166:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    316a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    316c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    316e:	d00c      	beq.n	318a <nrf_gpio_pin_port_decode+0x5a>
    3170:	2b01      	cmp	r3, #1
    3172:	d00f      	beq.n	3194 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
    3174:	4908      	ldr	r1, [pc, #32]	; (3198 <nrf_gpio_pin_port_decode+0x68>)
    3176:	4809      	ldr	r0, [pc, #36]	; (319c <nrf_gpio_pin_port_decode+0x6c>)
    3178:	f240 2219 	movw	r2, #537	; 0x219
    317c:	f005 f920 	bl	83c0 <printk>
    3180:	f240 2119 	movw	r1, #537	; 0x219
    3184:	4804      	ldr	r0, [pc, #16]	; (3198 <nrf_gpio_pin_port_decode+0x68>)
    3186:	f005 f9e7 	bl	8558 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    318a:	4805      	ldr	r0, [pc, #20]	; (31a0 <nrf_gpio_pin_port_decode+0x70>)
}
    318c:	bd10      	pop	{r4, pc}
    switch (port)
    318e:	f04f 33ff 	mov.w	r3, #4294967295
    3192:	e7d7      	b.n	3144 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    3194:	4803      	ldr	r0, [pc, #12]	; (31a4 <nrf_gpio_pin_port_decode+0x74>)
    3196:	e7f9      	b.n	318c <nrf_gpio_pin_port_decode+0x5c>
    3198:	00009321 	.word	0x00009321
    319c:	00009292 	.word	0x00009292
    31a0:	50842500 	.word	0x50842500
    31a4:	50842800 	.word	0x50842800

000031a8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    31a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31aa:	4605      	mov	r5, r0
    31ac:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    31ae:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    31b0:	f005 fc87 	bl	8ac2 <k_is_in_isr>
    31b4:	b910      	cbnz	r0, 31bc <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    31b6:	4b2c      	ldr	r3, [pc, #176]	; (3268 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    31b8:	781b      	ldrb	r3, [r3, #0]
    31ba:	b983      	cbnz	r3, 31de <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    31bc:	f04f 0320 	mov.w	r3, #32
    31c0:	f3ef 8411 	mrs	r4, BASEPRI
    31c4:	f383 8811 	msr	BASEPRI, r3
    31c8:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    31cc:	4628      	mov	r0, r5
    31ce:	f005 fb85 	bl	88dc <is_tx_ready>
    31d2:	bb28      	cbnz	r0, 3220 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    31d4:	f384 8811 	msr	BASEPRI, r4
    31d8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    31dc:	e7ee      	b.n	31bc <uarte_nrfx_poll_out+0x14>
{
    31de:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    31e0:	4628      	mov	r0, r5
    31e2:	f005 fb7b 	bl	88dc <is_tx_ready>
    31e6:	b970      	cbnz	r0, 3206 <uarte_nrfx_poll_out+0x5e>
    31e8:	2001      	movs	r0, #1
    31ea:	f005 fc42 	bl	8a72 <nrfx_busy_wait>
    31ee:	3c01      	subs	r4, #1
    31f0:	d1f6      	bne.n	31e0 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    31f2:	2100      	movs	r1, #0
    31f4:	2021      	movs	r0, #33	; 0x21
    31f6:	f001 ff39 	bl	506c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    31fa:	e7f0      	b.n	31de <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    31fc:	f384 8811 	msr	BASEPRI, r4
    3200:	f3bf 8f6f 	isb	sy
}
    3204:	e7f5      	b.n	31f2 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    3206:	f04f 0320 	mov.w	r3, #32
    320a:	f3ef 8411 	mrs	r4, BASEPRI
    320e:	f383 8811 	msr	BASEPRI, r3
    3212:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3216:	4628      	mov	r0, r5
    3218:	f005 fb60 	bl	88dc <is_tx_ready>
    321c:	2800      	cmp	r0, #0
    321e:	d0ed      	beq.n	31fc <uarte_nrfx_poll_out+0x54>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    3220:	2201      	movs	r2, #1
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    3222:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3226:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    3228:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    322a:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    322e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3232:	2200      	movs	r2, #0
    3234:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3238:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    323c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    3240:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3244:	684a      	ldr	r2, [r1, #4]
    3246:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3248:	bf41      	itttt	mi
    324a:	2208      	movmi	r2, #8
    324c:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3250:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    3254:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3258:	2201      	movs	r2, #1
    325a:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    325c:	f384 8811 	msr	BASEPRI, r4
    3260:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    3264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3266:	bf00      	nop
    3268:	2000173d 	.word	0x2000173d

0000326c <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
    326c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3270:	460f      	mov	r7, r1
    3272:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
    3274:	b940      	cbnz	r0, 3288 <entropy_cc3xx_rng_get_entropy+0x1c>
    3276:	491a      	ldr	r1, [pc, #104]	; (32e0 <entropy_cc3xx_rng_get_entropy+0x74>)
    3278:	481a      	ldr	r0, [pc, #104]	; (32e4 <entropy_cc3xx_rng_get_entropy+0x78>)
    327a:	2226      	movs	r2, #38	; 0x26
    327c:	f005 f8a0 	bl	83c0 <printk>
    3280:	2126      	movs	r1, #38	; 0x26
    3282:	4817      	ldr	r0, [pc, #92]	; (32e0 <entropy_cc3xx_rng_get_entropy+0x74>)
    3284:	f005 f968 	bl	8558 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
    3288:	b947      	cbnz	r7, 329c <entropy_cc3xx_rng_get_entropy+0x30>
    328a:	4915      	ldr	r1, [pc, #84]	; (32e0 <entropy_cc3xx_rng_get_entropy+0x74>)
    328c:	4815      	ldr	r0, [pc, #84]	; (32e4 <entropy_cc3xx_rng_get_entropy+0x78>)
    328e:	2227      	movs	r2, #39	; 0x27
    3290:	f005 f896 	bl	83c0 <printk>
    3294:	2127      	movs	r1, #39	; 0x27
    3296:	4812      	ldr	r0, [pc, #72]	; (32e0 <entropy_cc3xx_rng_get_entropy+0x74>)
    3298:	f005 f95e 	bl	8558 <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    329c:	f44f 6580 	mov.w	r5, #1024	; 0x400
    32a0:	2400      	movs	r4, #0
    32a2:	f06f 0015 	mvn.w	r0, #21
			/** This is a call from a secure app, in which
			 * case entropy is gathered using CC3xx HW
			 * using the CTR_DRBG features of the
			 * nrf_cc310_platform/nrf_cc312_platform library.
			 */
			res = nrf_cc3xx_platform_ctr_drbg_get(&ctr_drbg_ctx,
    32a6:	f8df 8040 	ldr.w	r8, [pc, #64]	; 32e8 <entropy_cc3xx_rng_get_entropy+0x7c>
	while (offset < length) {
    32aa:	42a6      	cmp	r6, r4
    32ac:	d802      	bhi.n	32b4 <entropy_cc3xx_rng_get_entropy+0x48>
		offset += chunk_size;
	}
#endif

	return res;
}
    32ae:	b002      	add	sp, #8
    32b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    32b4:	1b33      	subs	r3, r6, r4
    32b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    32ba:	bf38      	it	cc
    32bc:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(&ctr_drbg_ctx,
    32be:	4640      	mov	r0, r8
    32c0:	ab01      	add	r3, sp, #4
    32c2:	462a      	mov	r2, r5
    32c4:	1939      	adds	r1, r7, r4
    32c6:	f002 fafd 	bl	58c4 <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
    32ca:	9b01      	ldr	r3, [sp, #4]
    32cc:	42ab      	cmp	r3, r5
    32ce:	d103      	bne.n	32d8 <entropy_cc3xx_rng_get_entropy+0x6c>
		if (res != 0) {
    32d0:	2800      	cmp	r0, #0
    32d2:	d1ec      	bne.n	32ae <entropy_cc3xx_rng_get_entropy+0x42>
		offset += chunk_size;
    32d4:	442c      	add	r4, r5
    32d6:	e7e8      	b.n	32aa <entropy_cc3xx_rng_get_entropy+0x3e>
			return -EINVAL;
    32d8:	f06f 0015 	mvn.w	r0, #21
    32dc:	e7e7      	b.n	32ae <entropy_cc3xx_rng_get_entropy+0x42>
    32de:	bf00      	nop
    32e0:	00009efa 	.word	0x00009efa
    32e4:	00009292 	.word	0x00009292
    32e8:	20000a6c 	.word	0x20000a6c

000032ec <entropy_cc3xx_rng_init>:
		}

	#elif !defined(CONFIG_SPM)
		int ret = 0;

		ret = nrf_cc3xx_platform_ctr_drbg_init(&ctr_drbg_ctx, NULL, 0);
    32ec:	2200      	movs	r2, #0
{
    32ee:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(&ctr_drbg_ctx, NULL, 0);
    32f0:	4611      	mov	r1, r2
    32f2:	4804      	ldr	r0, [pc, #16]	; (3304 <entropy_cc3xx_rng_init+0x18>)
    32f4:	f002 fab2 	bl	585c <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
    32f8:	2800      	cmp	r0, #0
			return -EINVAL;
		}
	#endif

	return 0;
}
    32fa:	bf18      	it	ne
    32fc:	f06f 0015 	mvnne.w	r0, #21
    3300:	bd08      	pop	{r3, pc}
    3302:	bf00      	nop
    3304:	20000a6c 	.word	0x20000a6c

00003308 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    3308:	4803      	ldr	r0, [pc, #12]	; (3318 <k_sys_fatal_error_handler+0x10>)
    330a:	2145      	movs	r1, #69	; 0x45
{
    330c:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    330e:	f005 f938 	bl	8582 <z_log_minimal_printk>
		sys_arch_reboot(0);
    3312:	2000      	movs	r0, #0
    3314:	f7ff fb68 	bl	29e8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    3318:	00009f35 	.word	0x00009f35

0000331c <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
    331c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    3320:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    3322:	4c21      	ldr	r4, [pc, #132]	; (33a8 <check_ext_api_requests+0x8c>)
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
    3324:	4e21      	ldr	r6, [pc, #132]	; (33ac <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    3326:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    332a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 33b4 <check_ext_api_requests+0x98>
{
    332e:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    3330:	45a8      	cmp	r8, r5
    3332:	d803      	bhi.n	333c <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    3334:	2000      	movs	r0, #0
    3336:	b005      	add	sp, #20
    3338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
    333c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    333e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    3342:	681f      	ldr	r7, [r3, #0]
    3344:	ab01      	add	r3, sp, #4
    3346:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    334a:	220c      	movs	r2, #12
    334c:	4619      	mov	r1, r3
    334e:	4638      	mov	r0, r7
    3350:	f005 fa03 	bl	875a <memcmp>
    3354:	b990      	cbnz	r0, 337c <check_ext_api_requests+0x60>
    3356:	b18f      	cbz	r7, 337c <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    3358:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
    335a:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    335c:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    335e:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    3360:	4291      	cmp	r1, r2
    3362:	d10b      	bne.n	337c <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    3364:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
    3366:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    3368:	4291      	cmp	r1, r2
    336a:	d807      	bhi.n	337c <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
    336c:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    336e:	4291      	cmp	r1, r2
    3370:	d904      	bls.n	337c <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
    3372:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    3374:	695b      	ldr	r3, [r3, #20]
    3376:	ea32 0303 	bics.w	r3, r2, r3
    337a:	d00a      	beq.n	3392 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    337c:	6a27      	ldr	r7, [r4, #32]
    337e:	b167      	cbz	r7, 339a <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    3380:	480b      	ldr	r0, [pc, #44]	; (33b0 <check_ext_api_requests+0x94>)
    3382:	f005 f81d 	bl	83c0 <printk>
			k_panic();
    3386:	4040      	eors	r0, r0
    3388:	f380 8811 	msr	BASEPRI, r0
    338c:	f04f 0004 	mov.w	r0, #4
    3390:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    3392:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    3394:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    3396:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    3398:	e7ca      	b.n	3330 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    339a:	4648      	mov	r0, r9
    339c:	f005 f810 	bl	83c0 <printk>
			*ext_api_req->ext_api = NULL;
    33a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    33a2:	601f      	str	r7, [r3, #0]
    33a4:	e7f5      	b.n	3392 <check_ext_api_requests+0x76>
    33a6:	bf00      	nop
    33a8:	0000023c 	.word	0x0000023c
    33ac:	00008e3c 	.word	0x00008e3c
    33b0:	00009f57 	.word	0x00009f57
    33b4:	00009f80 	.word	0x00009f80

000033b8 <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    33b8:	4b06      	ldr	r3, [pc, #24]	; (33d4 <nrf53_errata_42+0x1c>)
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    33ba:	681b      	ldr	r3, [r3, #0]
    33bc:	2b07      	cmp	r3, #7
    33be:	d107      	bne.n	33d0 <nrf53_errata_42+0x18>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    33c0:	4b05      	ldr	r3, [pc, #20]	; (33d8 <nrf53_errata_42+0x20>)
    33c2:	681b      	ldr	r3, [r3, #0]
    33c4:	3b02      	subs	r3, #2
    33c6:	2b03      	cmp	r3, #3
    33c8:	d802      	bhi.n	33d0 <nrf53_errata_42+0x18>
    33ca:	4a04      	ldr	r2, [pc, #16]	; (33dc <nrf53_errata_42+0x24>)
    33cc:	5cd0      	ldrb	r0, [r2, r3]
    33ce:	4770      	bx	lr
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    33d0:	2000      	movs	r0, #0
    #endif
}
    33d2:	4770      	bx	lr
    33d4:	00ff0130 	.word	0x00ff0130
    33d8:	00ff0134 	.word	0x00ff0134
    33dc:	00009fb3 	.word	0x00009fb3

000033e0 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    33e0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    33e4:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    33e8:	4b03      	ldr	r3, [pc, #12]	; (33f8 <SystemCoreClockUpdate+0x18>)
    33ea:	f002 0203 	and.w	r2, r2, #3
    33ee:	40d3      	lsrs	r3, r2
    33f0:	4a02      	ldr	r2, [pc, #8]	; (33fc <SystemCoreClockUpdate+0x1c>)
    33f2:	6013      	str	r3, [r2, #0]
#endif
}
    33f4:	4770      	bx	lr
    33f6:	bf00      	nop
    33f8:	07a12000 	.word	0x07a12000
    33fc:	20000040 	.word	0x20000040

00003400 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    3400:	4a3d      	ldr	r2, [pc, #244]	; (34f8 <SystemInit+0xf8>)
{
    3402:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    3404:	6813      	ldr	r3, [r2, #0]
    3406:	f043 0302 	orr.w	r3, r3, #2
    340a:	6013      	str	r3, [r2, #0]
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    340c:	f7ff ffd4 	bl	33b8 <nrf53_errata_42>
    3410:	b148      	cbz	r0, 3426 <SystemInit+0x26>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    3412:	4b3a      	ldr	r3, [pc, #232]	; (34fc <SystemInit+0xfc>)
    3414:	681a      	ldr	r2, [r3, #0]
    3416:	b932      	cbnz	r2, 3426 <SystemInit+0x26>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    3418:	210d      	movs	r1, #13
    341a:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    341c:	2101      	movs	r1, #1
    341e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    3422:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    3424:	601a      	str	r2, [r3, #0]
{
    3426:	2200      	movs	r2, #0
    3428:	00d3      	lsls	r3, r2, #3
    342a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    342e:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    3432:	3101      	adds	r1, #1
    3434:	d007      	beq.n	3446 <SystemInit+0x46>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    3436:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    343a:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    343c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    3440:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    3442:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    3444:	d1f0      	bne.n	3428 <SystemInit+0x28>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    3446:	f7ff ffb7 	bl	33b8 <nrf53_errata_42>
    344a:	2800      	cmp	r0, #0
    344c:	d14e      	bne.n	34ec <SystemInit+0xec>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    344e:	f7ff ffb3 	bl	33b8 <nrf53_errata_42>
    3452:	b138      	cbz	r0, 3464 <SystemInit+0x64>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    3454:	4b2a      	ldr	r3, [pc, #168]	; (3500 <SystemInit+0x100>)
    3456:	4a2b      	ldr	r2, [pc, #172]	; (3504 <SystemInit+0x104>)
    3458:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    345a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    345e:	2201      	movs	r2, #1
    3460:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    3464:	4b28      	ldr	r3, [pc, #160]	; (3508 <SystemInit+0x108>)
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    3466:	681b      	ldr	r3, [r3, #0]
    3468:	2b07      	cmp	r3, #7
    346a:	d10a      	bne.n	3482 <SystemInit+0x82>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    346c:	4b27      	ldr	r3, [pc, #156]	; (350c <SystemInit+0x10c>)
    346e:	681b      	ldr	r3, [r3, #0]
    3470:	3b02      	subs	r3, #2
    3472:	2b03      	cmp	r3, #3
    3474:	d805      	bhi.n	3482 <SystemInit+0x82>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    3476:	4a26      	ldr	r2, [pc, #152]	; (3510 <SystemInit+0x110>)
    3478:	5cd3      	ldrb	r3, [r2, r3]
    347a:	b113      	cbz	r3, 3482 <SystemInit+0x82>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    347c:	2200      	movs	r2, #0
    347e:	4b25      	ldr	r3, [pc, #148]	; (3514 <SystemInit+0x114>)
    3480:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    3482:	f7ff ff99 	bl	33b8 <nrf53_errata_42>
    3486:	b150      	cbz	r0, 349e <SystemInit+0x9e>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    3488:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    348c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3490:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    3492:	bf42      	ittt	mi
    3494:	2200      	movmi	r2, #0
    3496:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    349a:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    349e:	4b1a      	ldr	r3, [pc, #104]	; (3508 <SystemInit+0x108>)
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    34a0:	681b      	ldr	r3, [r3, #0]
    34a2:	2b07      	cmp	r3, #7
    34a4:	d109      	bne.n	34ba <SystemInit+0xba>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    34a6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    34aa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    34ae:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    34b0:	bf44      	itt	mi
    34b2:	f06f 0201 	mvnmi.w	r2, #1
    34b6:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    34ba:	f7ff ff7d 	bl	33b8 <nrf53_errata_42>
    34be:	b110      	cbz	r0, 34c6 <SystemInit+0xc6>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    34c0:	2265      	movs	r2, #101	; 0x65
    34c2:	4b15      	ldr	r3, [pc, #84]	; (3518 <SystemInit+0x118>)
    34c4:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    34c6:	4a15      	ldr	r2, [pc, #84]	; (351c <SystemInit+0x11c>)
    34c8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    34cc:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    34d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    34d4:	4a12      	ldr	r2, [pc, #72]	; (3520 <SystemInit+0x120>)
    34d6:	4b13      	ldr	r3, [pc, #76]	; (3524 <SystemInit+0x124>)
    34d8:	6811      	ldr	r1, [r2, #0]
    34da:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    34de:	69d2      	ldr	r2, [r2, #28]
    34e0:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    34e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    34e8:	f7ff bf7a 	b.w	33e0 <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    34ec:	2229      	movs	r2, #41	; 0x29
    34ee:	4b0a      	ldr	r3, [pc, #40]	; (3518 <SystemInit+0x118>)
    34f0:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    34f2:	2203      	movs	r2, #3
    34f4:	631a      	str	r2, [r3, #48]	; 0x30
    34f6:	e7aa      	b.n	344e <SystemInit+0x4e>
    34f8:	e000edd0 	.word	0xe000edd0
    34fc:	50004a20 	.word	0x50004a20
    3500:	50039530 	.word	0x50039530
    3504:	beef0044 	.word	0xbeef0044
    3508:	00ff0130 	.word	0x00ff0130
    350c:	00ff0134 	.word	0x00ff0134
    3510:	00009fb7 	.word	0x00009fb7
    3514:	5003254c 	.word	0x5003254c
    3518:	5000470c 	.word	0x5000470c
    351c:	e000ed00 	.word	0xe000ed00
    3520:	00ff8000 	.word	0x00ff8000
    3524:	50006000 	.word	0x50006000

00003528 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    3528:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    352a:	4604      	mov	r4, r0
    352c:	b940      	cbnz	r0, 3540 <nrfx_clock_init+0x18>
    352e:	4909      	ldr	r1, [pc, #36]	; (3554 <nrfx_clock_init+0x2c>)
    3530:	4809      	ldr	r0, [pc, #36]	; (3558 <nrfx_clock_init+0x30>)
    3532:	22b5      	movs	r2, #181	; 0xb5
    3534:	f004 ff44 	bl	83c0 <printk>
    3538:	21b5      	movs	r1, #181	; 0xb5
    353a:	4806      	ldr	r0, [pc, #24]	; (3554 <nrfx_clock_init+0x2c>)
    353c:	f005 f80c 	bl	8558 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3540:	4b06      	ldr	r3, [pc, #24]	; (355c <nrfx_clock_init+0x34>)
    3542:	791a      	ldrb	r2, [r3, #4]
    3544:	b922      	cbnz	r2, 3550 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3546:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    3548:	4805      	ldr	r0, [pc, #20]	; (3560 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
    354a:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    354c:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    354e:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3550:	4804      	ldr	r0, [pc, #16]	; (3564 <nrfx_clock_init+0x3c>)
    return err_code;
    3552:	e7fc      	b.n	354e <nrfx_clock_init+0x26>
    3554:	00009fbb 	.word	0x00009fbb
    3558:	00009292 	.word	0x00009292
    355c:	20000c28 	.word	0x20000c28
    3560:	0bad0000 	.word	0x0bad0000
    3564:	0bad000c 	.word	0x0bad000c

00003568 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    3568:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    356a:	4b0d      	ldr	r3, [pc, #52]	; (35a0 <nrfx_clock_enable+0x38>)
    356c:	791b      	ldrb	r3, [r3, #4]
    356e:	b943      	cbnz	r3, 3582 <nrfx_clock_enable+0x1a>
    3570:	490c      	ldr	r1, [pc, #48]	; (35a4 <nrfx_clock_enable+0x3c>)
    3572:	480d      	ldr	r0, [pc, #52]	; (35a8 <nrfx_clock_enable+0x40>)
    3574:	22ce      	movs	r2, #206	; 0xce
    3576:	f004 ff23 	bl	83c0 <printk>
    357a:	21ce      	movs	r1, #206	; 0xce
    357c:	4809      	ldr	r0, [pc, #36]	; (35a4 <nrfx_clock_enable+0x3c>)
    357e:	f004 ffeb 	bl	8558 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    3582:	2005      	movs	r0, #5
    3584:	f7fe fe96 	bl	22b4 <arch_irq_is_enabled>
    3588:	b910      	cbnz	r0, 3590 <nrfx_clock_enable+0x28>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    358a:	2005      	movs	r0, #5
    358c:	f7fe fe82 	bl	2294 <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    3590:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3594:	2201      	movs	r2, #1
    3596:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    359a:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    359e:	bd08      	pop	{r3, pc}
    35a0:	20000c28 	.word	0x20000c28
    35a4:	00009fbb 	.word	0x00009fbb
    35a8:	00009292 	.word	0x00009292

000035ac <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    35ac:	4b33      	ldr	r3, [pc, #204]	; (367c <nrfx_clock_start+0xd0>)
{
    35ae:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    35b0:	791b      	ldrb	r3, [r3, #4]
{
    35b2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    35b4:	b953      	cbnz	r3, 35cc <nrfx_clock_start+0x20>
    35b6:	4932      	ldr	r1, [pc, #200]	; (3680 <nrfx_clock_start+0xd4>)
    35b8:	4832      	ldr	r0, [pc, #200]	; (3684 <nrfx_clock_start+0xd8>)
    35ba:	f44f 7285 	mov.w	r2, #266	; 0x10a
    35be:	f004 feff 	bl	83c0 <printk>
    35c2:	f44f 7185 	mov.w	r1, #266	; 0x10a
    35c6:	482e      	ldr	r0, [pc, #184]	; (3680 <nrfx_clock_start+0xd4>)
    35c8:	f004 ffc6 	bl	8558 <assert_post_action>
    switch (domain)
    35cc:	2c03      	cmp	r4, #3
    35ce:	d848      	bhi.n	3662 <nrfx_clock_start+0xb6>
    35d0:	e8df f004 	tbb	[pc, r4]
    35d4:	3a2d2202 	.word	0x3a2d2202
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    35d8:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    35dc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    35e0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    35e4:	03c9      	lsls	r1, r1, #15
    35e6:	d511      	bpl.n	360c <nrfx_clock_start+0x60>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    35e8:	f003 0303 	and.w	r3, r3, #3
    35ec:	2b02      	cmp	r3, #2
    35ee:	d10d      	bne.n	360c <nrfx_clock_start+0x60>
    p_reg->LFCLKSRC = (uint32_t)(source);
    35f0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    35f4:	2200      	movs	r2, #0
    35f6:	4b24      	ldr	r3, [pc, #144]	; (3688 <nrfx_clock_start+0xdc>)
    35f8:	601a      	str	r2, [r3, #0]
    35fa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    35fc:	2202      	movs	r2, #2
    35fe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3602:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3606:	2201      	movs	r2, #1
    3608:	609a      	str	r2, [r3, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    360a:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    360c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3610:	2201      	movs	r2, #1
    3612:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    3616:	e7ed      	b.n	35f4 <nrfx_clock_start+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3618:	2200      	movs	r2, #0
    361a:	4b1c      	ldr	r3, [pc, #112]	; (368c <nrfx_clock_start+0xe0>)
    361c:	601a      	str	r2, [r3, #0]
    361e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3620:	2201      	movs	r2, #1
    3622:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3626:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    362a:	601a      	str	r2, [r3, #0]
}
    362c:	e7ed      	b.n	360a <nrfx_clock_start+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    362e:	2200      	movs	r2, #0
    3630:	4b17      	ldr	r3, [pc, #92]	; (3690 <nrfx_clock_start+0xe4>)
    3632:	601a      	str	r2, [r3, #0]
    3634:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3636:	f44f 7200 	mov.w	r2, #512	; 0x200
    363a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    363e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3642:	2201      	movs	r2, #1
    3644:	621a      	str	r2, [r3, #32]
}
    3646:	e7e0      	b.n	360a <nrfx_clock_start+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3648:	2200      	movs	r2, #0
    364a:	4b12      	ldr	r3, [pc, #72]	; (3694 <nrfx_clock_start+0xe8>)
    364c:	601a      	str	r2, [r3, #0]
    364e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3650:	f44f 7280 	mov.w	r2, #256	; 0x100
    3654:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3658:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    365c:	2201      	movs	r2, #1
    365e:	619a      	str	r2, [r3, #24]
}
    3660:	e7d3      	b.n	360a <nrfx_clock_start+0x5e>
            NRFX_ASSERT(0);
    3662:	4907      	ldr	r1, [pc, #28]	; (3680 <nrfx_clock_start+0xd4>)
    3664:	4807      	ldr	r0, [pc, #28]	; (3684 <nrfx_clock_start+0xd8>)
    3666:	f44f 729e 	mov.w	r2, #316	; 0x13c
    366a:	f004 fea9 	bl	83c0 <printk>
}
    366e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
    3672:	f44f 719e 	mov.w	r1, #316	; 0x13c
    3676:	4802      	ldr	r0, [pc, #8]	; (3680 <nrfx_clock_start+0xd4>)
    3678:	f004 bf6e 	b.w	8558 <assert_post_action>
    367c:	20000c28 	.word	0x20000c28
    3680:	00009fbb 	.word	0x00009fbb
    3684:	00009292 	.word	0x00009292
    3688:	50005104 	.word	0x50005104
    368c:	50005100 	.word	0x50005100
    3690:	50005124 	.word	0x50005124
    3694:	50005120 	.word	0x50005120

00003698 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3698:	4b44      	ldr	r3, [pc, #272]	; (37ac <nrfx_clock_stop+0x114>)
{
    369a:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    369c:	791b      	ldrb	r3, [r3, #4]
{
    369e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    36a0:	b953      	cbnz	r3, 36b8 <nrfx_clock_stop+0x20>
    36a2:	4943      	ldr	r1, [pc, #268]	; (37b0 <nrfx_clock_stop+0x118>)
    36a4:	4843      	ldr	r0, [pc, #268]	; (37b4 <nrfx_clock_stop+0x11c>)
    36a6:	f240 1243 	movw	r2, #323	; 0x143
    36aa:	f004 fe89 	bl	83c0 <printk>
    36ae:	f240 1143 	movw	r1, #323	; 0x143
    36b2:	483f      	ldr	r0, [pc, #252]	; (37b0 <nrfx_clock_stop+0x118>)
    36b4:	f004 ff50 	bl	8558 <assert_post_action>
    switch (domain)
    36b8:	2c03      	cmp	r4, #3
    36ba:	d85a      	bhi.n	3772 <nrfx_clock_stop+0xda>
    36bc:	e8df f004 	tbb	[pc, r4]
    36c0:	4c3f2302 	.word	0x4c3f2302
    p_reg->INTENCLR = mask;
    36c4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    36c8:	2202      	movs	r2, #2
    36ca:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    36ce:	2200      	movs	r2, #0
    36d0:	f503 7382 	add.w	r3, r3, #260	; 0x104
    36d4:	601a      	str	r2, [r3, #0]
    36d6:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    36d8:	4b37      	ldr	r3, [pc, #220]	; (37b8 <nrfx_clock_stop+0x120>)
    36da:	2201      	movs	r2, #1
    36dc:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    36e0:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    36e4:	601a      	str	r2, [r3, #0]
    switch (domain)
    36e6:	2c02      	cmp	r4, #2
    36e8:	d050      	beq.n	378c <nrfx_clock_stop+0xf4>
    36ea:	2c03      	cmp	r4, #3
    36ec:	d051      	beq.n	3792 <nrfx_clock_stop+0xfa>
    36ee:	2c00      	cmp	r4, #0
    36f0:	d152      	bne.n	3798 <nrfx_clock_stop+0x100>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    36f2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    36f6:	03db      	lsls	r3, r3, #15
    36f8:	d520      	bpl.n	373c <nrfx_clock_stop+0xa4>
    36fa:	2001      	movs	r0, #1
    36fc:	f005 f9b9 	bl	8a72 <nrfx_busy_wait>
    3700:	3d01      	subs	r5, #1
    3702:	d1f0      	bne.n	36e6 <nrfx_clock_stop+0x4e>
    3704:	e01a      	b.n	373c <nrfx_clock_stop+0xa4>
    p_reg->INTENCLR = mask;
    3706:	2301      	movs	r3, #1
    3708:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    370c:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    370e:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3712:	4a2a      	ldr	r2, [pc, #168]	; (37bc <nrfx_clock_stop+0x124>)
    p_reg->INTENCLR = mask;
    3714:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3718:	6011      	str	r1, [r2, #0]
    371a:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    371c:	4a28      	ldr	r2, [pc, #160]	; (37c0 <nrfx_clock_stop+0x128>)
    371e:	6013      	str	r3, [r2, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3720:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3724:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3728:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    372c:	03d2      	lsls	r2, r2, #15
    372e:	d505      	bpl.n	373c <nrfx_clock_stop+0xa4>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3730:	b123      	cbz	r3, 373c <nrfx_clock_stop+0xa4>
    3732:	2001      	movs	r0, #1
    3734:	f005 f99d 	bl	8a72 <nrfx_busy_wait>
    3738:	3d01      	subs	r5, #1
    373a:	d1f1      	bne.n	3720 <nrfx_clock_stop+0x88>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    373c:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    373e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3742:	f44f 7200 	mov.w	r2, #512	; 0x200
    3746:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    374a:	2200      	movs	r2, #0
    374c:	f503 7392 	add.w	r3, r3, #292	; 0x124
    3750:	601a      	str	r2, [r3, #0]
    3752:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3754:	4b1b      	ldr	r3, [pc, #108]	; (37c4 <nrfx_clock_stop+0x12c>)
    3756:	e7c0      	b.n	36da <nrfx_clock_stop+0x42>
    p_reg->INTENCLR = mask;
    3758:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    375c:	f44f 7280 	mov.w	r2, #256	; 0x100
    3760:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3764:	2200      	movs	r2, #0
    3766:	f503 7390 	add.w	r3, r3, #288	; 0x120
    376a:	601a      	str	r2, [r3, #0]
    376c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    376e:	4b16      	ldr	r3, [pc, #88]	; (37c8 <nrfx_clock_stop+0x130>)
    3770:	e7b3      	b.n	36da <nrfx_clock_stop+0x42>
            NRFX_ASSERT(0);
    3772:	490f      	ldr	r1, [pc, #60]	; (37b0 <nrfx_clock_stop+0x118>)
    3774:	480f      	ldr	r0, [pc, #60]	; (37b4 <nrfx_clock_stop+0x11c>)
    3776:	f240 125f 	movw	r2, #351	; 0x15f
    377a:	f004 fe21 	bl	83c0 <printk>
    377e:	f240 115f 	movw	r1, #351	; 0x15f
    3782:	480b      	ldr	r0, [pc, #44]	; (37b0 <nrfx_clock_stop+0x118>)
}
    3784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            NRFX_ASSERT(0);
    3788:	f004 bee6 	b.w	8558 <assert_post_action>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    378c:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    3790:	e7b1      	b.n	36f6 <nrfx_clock_stop+0x5e>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    3792:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    3796:	e7ae      	b.n	36f6 <nrfx_clock_stop+0x5e>
            NRFX_ASSERT(0);
    3798:	490c      	ldr	r1, [pc, #48]	; (37cc <nrfx_clock_stop+0x134>)
    379a:	4806      	ldr	r0, [pc, #24]	; (37b4 <nrfx_clock_stop+0x11c>)
    379c:	f44f 724f 	mov.w	r2, #828	; 0x33c
    37a0:	f004 fe0e 	bl	83c0 <printk>
    37a4:	f44f 714f 	mov.w	r1, #828	; 0x33c
    37a8:	4808      	ldr	r0, [pc, #32]	; (37cc <nrfx_clock_stop+0x134>)
    37aa:	e7eb      	b.n	3784 <nrfx_clock_stop+0xec>
    37ac:	20000c28 	.word	0x20000c28
    37b0:	00009fbb 	.word	0x00009fbb
    37b4:	00009292 	.word	0x00009292
    37b8:	5000500c 	.word	0x5000500c
    37bc:	50005100 	.word	0x50005100
    37c0:	50005004 	.word	0x50005004
    37c4:	50005024 	.word	0x50005024
    37c8:	5000501c 	.word	0x5000501c
    37cc:	00009ff8 	.word	0x00009ff8

000037d0 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    37d0:	4b26      	ldr	r3, [pc, #152]	; (386c <nrfx_power_clock_irq_handler+0x9c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    37d2:	b510      	push	{r4, lr}
    37d4:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    37d6:	b152      	cbz	r2, 37ee <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    37d8:	2000      	movs	r0, #0
    37da:	6018      	str	r0, [r3, #0]
    37dc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    37de:	2201      	movs	r2, #1
    37e0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    37e4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    37e8:	4b21      	ldr	r3, [pc, #132]	; (3870 <nrfx_power_clock_irq_handler+0xa0>)
    37ea:	681b      	ldr	r3, [r3, #0]
    37ec:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    37ee:	4b21      	ldr	r3, [pc, #132]	; (3874 <nrfx_power_clock_irq_handler+0xa4>)
    37f0:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    37f2:	b18a      	cbz	r2, 3818 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    37f4:	2200      	movs	r2, #0
    37f6:	601a      	str	r2, [r3, #0]
    37f8:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    37fa:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    37fe:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3802:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3806:	f002 0203 	and.w	r2, r2, #3
    380a:	2a01      	cmp	r2, #1
    380c:	f04f 0102 	mov.w	r1, #2
    3810:	d124      	bne.n	385c <nrfx_power_clock_irq_handler+0x8c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3812:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3816:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3818:	4b17      	ldr	r3, [pc, #92]	; (3878 <nrfx_power_clock_irq_handler+0xa8>)
    381a:	681a      	ldr	r2, [r3, #0]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    381c:	b162      	cbz	r2, 3838 <nrfx_power_clock_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    381e:	2200      	movs	r2, #0
    3820:	601a      	str	r2, [r3, #0]
    3822:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    3824:	f44f 7280 	mov.w	r2, #256	; 0x100
    3828:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    382c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    3830:	4b0f      	ldr	r3, [pc, #60]	; (3870 <nrfx_power_clock_irq_handler+0xa0>)
    3832:	2004      	movs	r0, #4
    3834:	681b      	ldr	r3, [r3, #0]
    3836:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3838:	4b10      	ldr	r3, [pc, #64]	; (387c <nrfx_power_clock_irq_handler+0xac>)
    383a:	681a      	ldr	r2, [r3, #0]
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    383c:	b1aa      	cbz	r2, 386a <nrfx_power_clock_irq_handler+0x9a>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    383e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3842:	2200      	movs	r2, #0
    3844:	601a      	str	r2, [r3, #0]
    3846:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    3848:	f44f 7200 	mov.w	r2, #512	; 0x200
    384c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3850:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    3854:	4b06      	ldr	r3, [pc, #24]	; (3870 <nrfx_power_clock_irq_handler+0xa0>)
    3856:	2005      	movs	r0, #5
    3858:	681b      	ldr	r3, [r3, #0]
    385a:	4718      	bx	r3
    385c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3860:	4b03      	ldr	r3, [pc, #12]	; (3870 <nrfx_power_clock_irq_handler+0xa0>)
    3862:	2001      	movs	r0, #1
    3864:	681b      	ldr	r3, [r3, #0]
    3866:	4798      	blx	r3
    3868:	e7d6      	b.n	3818 <nrfx_power_clock_irq_handler+0x48>
}
    386a:	bd10      	pop	{r4, pc}
    386c:	50005100 	.word	0x50005100
    3870:	20000c28 	.word	0x20000c28
    3874:	50005104 	.word	0x50005104
    3878:	50005120 	.word	0x50005120
    387c:	50005124 	.word	0x50005124

00003880 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3880:	4b0e      	ldr	r3, [pc, #56]	; (38bc <z_sys_init_run_level+0x3c>)
{
    3882:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3884:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3888:	3001      	adds	r0, #1
    388a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    388e:	42a6      	cmp	r6, r4
    3890:	d800      	bhi.n	3894 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    3892:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    3894:	e9d4 3500 	ldrd	r3, r5, [r4]
    3898:	4628      	mov	r0, r5
    389a:	4798      	blx	r3
		if (dev != NULL) {
    389c:	b165      	cbz	r5, 38b8 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    389e:	68eb      	ldr	r3, [r5, #12]
    38a0:	b130      	cbz	r0, 38b0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    38a2:	2800      	cmp	r0, #0
    38a4:	bfb8      	it	lt
    38a6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    38a8:	28ff      	cmp	r0, #255	; 0xff
    38aa:	bfa8      	it	ge
    38ac:	20ff      	movge	r0, #255	; 0xff
    38ae:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    38b0:	785a      	ldrb	r2, [r3, #1]
    38b2:	f042 0201 	orr.w	r2, r2, #1
    38b6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    38b8:	3408      	adds	r4, #8
    38ba:	e7e8      	b.n	388e <z_sys_init_run_level+0xe>
    38bc:	000090b8 	.word	0x000090b8

000038c0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    38c0:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    38c2:	4605      	mov	r5, r0
    38c4:	b910      	cbnz	r0, 38cc <z_impl_device_get_binding+0xc>
		return NULL;
    38c6:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    38c8:	4620      	mov	r0, r4
    38ca:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    38cc:	7803      	ldrb	r3, [r0, #0]
    38ce:	2b00      	cmp	r3, #0
    38d0:	d0f9      	beq.n	38c6 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    38d2:	4a0f      	ldr	r2, [pc, #60]	; (3910 <z_impl_device_get_binding+0x50>)
    38d4:	4c0f      	ldr	r4, [pc, #60]	; (3914 <z_impl_device_get_binding+0x54>)
    38d6:	4616      	mov	r6, r2
    38d8:	4294      	cmp	r4, r2
    38da:	d108      	bne.n	38ee <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    38dc:	4c0d      	ldr	r4, [pc, #52]	; (3914 <z_impl_device_get_binding+0x54>)
    38de:	42b4      	cmp	r4, r6
    38e0:	d0f1      	beq.n	38c6 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    38e2:	4620      	mov	r0, r4
    38e4:	f005 f8c8 	bl	8a78 <z_device_ready>
    38e8:	b950      	cbnz	r0, 3900 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    38ea:	3418      	adds	r4, #24
    38ec:	e7f7      	b.n	38de <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    38ee:	4620      	mov	r0, r4
    38f0:	f005 f8c2 	bl	8a78 <z_device_ready>
    38f4:	b110      	cbz	r0, 38fc <z_impl_device_get_binding+0x3c>
    38f6:	6823      	ldr	r3, [r4, #0]
    38f8:	42ab      	cmp	r3, r5
    38fa:	d0e5      	beq.n	38c8 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    38fc:	3418      	adds	r4, #24
    38fe:	e7eb      	b.n	38d8 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    3900:	4628      	mov	r0, r5
    3902:	6821      	ldr	r1, [r4, #0]
    3904:	f004 ff1d 	bl	8742 <strcmp>
    3908:	2800      	cmp	r0, #0
    390a:	d1ee      	bne.n	38ea <z_impl_device_get_binding+0x2a>
    390c:	e7dc      	b.n	38c8 <z_impl_device_get_binding+0x8>
    390e:	bf00      	nop
    3910:	2000011c 	.word	0x2000011c
    3914:	200000bc 	.word	0x200000bc

00003918 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    391a:	4604      	mov	r4, r0
    391c:	460e      	mov	r6, r1
	__asm__ volatile(
    391e:	f04f 0320 	mov.w	r3, #32
    3922:	f3ef 8711 	mrs	r7, BASEPRI
    3926:	f383 8811 	msr	BASEPRI, r3
    392a:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    392e:	f001 fbcd 	bl	50cc <z_impl_k_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    3932:	2200      	movs	r2, #0
    3934:	2c04      	cmp	r4, #4
    3936:	bf98      	it	ls
    3938:	4b1d      	ldrls	r3, [pc, #116]	; (39b0 <z_fatal_error+0x98>)
    393a:	4605      	mov	r5, r0
	switch (reason) {
    393c:	bf94      	ite	ls
    393e:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
    3942:	4b1c      	ldrhi	r3, [pc, #112]	; (39b4 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    3944:	9200      	str	r2, [sp, #0]
    3946:	2145      	movs	r1, #69	; 0x45
    3948:	4622      	mov	r2, r4
    394a:	481b      	ldr	r0, [pc, #108]	; (39b8 <z_fatal_error+0xa0>)
    394c:	f004 fe19 	bl	8582 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    3950:	b13e      	cbz	r6, 3962 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    3952:	69f3      	ldr	r3, [r6, #28]
    3954:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3958:	b11b      	cbz	r3, 3962 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
    395a:	2145      	movs	r1, #69	; 0x45
    395c:	4817      	ldr	r0, [pc, #92]	; (39bc <z_fatal_error+0xa4>)
    395e:	f004 fe10 	bl	8582 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    3962:	b135      	cbz	r5, 3972 <z_fatal_error+0x5a>
    3964:	4628      	mov	r0, r5
    3966:	f005 f8b2 	bl	8ace <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    396a:	4603      	mov	r3, r0
    396c:	b108      	cbz	r0, 3972 <z_fatal_error+0x5a>
    396e:	7802      	ldrb	r2, [r0, #0]
    3970:	b902      	cbnz	r2, 3974 <z_fatal_error+0x5c>
		thread_name = "unknown";
    3972:	4b13      	ldr	r3, [pc, #76]	; (39c0 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    3974:	462a      	mov	r2, r5
    3976:	2145      	movs	r1, #69	; 0x45
    3978:	4812      	ldr	r0, [pc, #72]	; (39c4 <z_fatal_error+0xac>)
    397a:	f004 fe02 	bl	8582 <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    397e:	4631      	mov	r1, r6
    3980:	4620      	mov	r0, r4
    3982:	f7ff fcc1 	bl	3308 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    3986:	2c04      	cmp	r4, #4
    3988:	d108      	bne.n	399c <z_fatal_error+0x84>
    398a:	490f      	ldr	r1, [pc, #60]	; (39c8 <z_fatal_error+0xb0>)
    398c:	480f      	ldr	r0, [pc, #60]	; (39cc <z_fatal_error+0xb4>)
    398e:	228f      	movs	r2, #143	; 0x8f
    3990:	f004 fd16 	bl	83c0 <printk>
    3994:	218f      	movs	r1, #143	; 0x8f
    3996:	480c      	ldr	r0, [pc, #48]	; (39c8 <z_fatal_error+0xb0>)
    3998:	f004 fdde 	bl	8558 <assert_post_action>
	__asm__ volatile(
    399c:	f387 8811 	msr	BASEPRI, r7
    39a0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    39a4:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    39a6:	b003      	add	sp, #12
    39a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    39ac:	f7ff b870 	b.w	2a90 <z_impl_k_thread_abort>
    39b0:	000090d0 	.word	0x000090d0
    39b4:	0000a02c 	.word	0x0000a02c
    39b8:	0000a042 	.word	0x0000a042
    39bc:	0000a06f 	.word	0x0000a06f
    39c0:	0000a03a 	.word	0x0000a03a
    39c4:	0000a095 	.word	0x0000a095
    39c8:	0000a0b2 	.word	0x0000a0b2
    39cc:	00009292 	.word	0x00009292

000039d0 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    39d0:	4802      	ldr	r0, [pc, #8]	; (39dc <z_bss_zero+0xc>)
    39d2:	4a03      	ldr	r2, [pc, #12]	; (39e0 <z_bss_zero+0x10>)
    39d4:	2100      	movs	r1, #0
    39d6:	1a12      	subs	r2, r2, r0
    39d8:	f004 bf11 	b.w	87fe <memset>
    39dc:	20000170 	.word	0x20000170
    39e0:	20001740 	.word	0x20001740

000039e4 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    39e4:	2201      	movs	r2, #1
{
    39e6:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    39e8:	4b09      	ldr	r3, [pc, #36]	; (3a10 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    39ea:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    39ec:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    39ee:	f7ff ff47 	bl	3880 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    39f2:	f001 fecb 	bl	578c <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    39f6:	2003      	movs	r0, #3
    39f8:	f7ff ff42 	bl	3880 <z_sys_init_run_level>

	z_init_static_threads();
    39fc:	f000 f9d6 	bl	3dac <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
    3a00:	f004 fcc4 	bl	838c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3a04:	4a03      	ldr	r2, [pc, #12]	; (3a14 <bg_thread_main+0x30>)
    3a06:	7b13      	ldrb	r3, [r2, #12]
    3a08:	f023 0301 	bic.w	r3, r3, #1
    3a0c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3a0e:	bd08      	pop	{r3, pc}
    3a10:	2000173d 	.word	0x2000173d
    3a14:	200001f0 	.word	0x200001f0

00003a18 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    3a18:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    3a1c:	4b3f      	ldr	r3, [pc, #252]	; (3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>)
    3a1e:	b0a7      	sub	sp, #156	; 0x9c
	uint32_t msp =
    3a20:	f503 6700 	add.w	r7, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3a24:	f387 8808 	msr	MSP, r7
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    3a28:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3a2c:	2400      	movs	r4, #0
    3a2e:	23e0      	movs	r3, #224	; 0xe0
    3a30:	4d3b      	ldr	r5, [pc, #236]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3a32:	f04f 0b01 	mov.w	fp, #1
    3a36:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3a3a:	77ec      	strb	r4, [r5, #31]
    3a3c:	762c      	strb	r4, [r5, #24]
    3a3e:	766c      	strb	r4, [r5, #25]
    3a40:	76ac      	strb	r4, [r5, #26]
    3a42:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3a44:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    3a46:	4e37      	ldr	r6, [pc, #220]	; (3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>)
    3a48:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3a4c:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    3a4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3a50:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>
    3a54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    3a58:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    3a5a:	63ac      	str	r4, [r5, #56]	; 0x38
	/* Set NMI, Hard, and Bus Faults as Non-Secure.
	 * NMI and Bus Faults targeting the Secure state will
	 * escalate to a SecureFault or SecureHardFault.
	 */
	SCB->AIRCR =
		(SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk)))
    3a5c:	68eb      	ldr	r3, [r5, #12]
	z_setup_new_thread(thread, stack,
    3a5e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>
    3a62:	b29b      	uxth	r3, r3
		| SCB_AIRCR_BFHFNMINS_Msk
		| ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos) &
    3a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    3a68:	f443 3308 	orr.w	r3, r3, #139264	; 0x22000
	SCB->AIRCR =
    3a6c:	60eb      	str	r3, [r5, #12]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3a6e:	f7fe ffa1 	bl	29b4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3a72:	f7fe fc83 	bl	237c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3a76:	f04f 33ff 	mov.w	r3, #4294967295
    3a7a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3a7c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3a7e:	f7ff fa35 	bl	2eec <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3a82:	f7ff f88d 	bl	2ba0 <z_arm_configure_static_mpu_regions>
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    3a86:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    3a8a:	4d27      	ldr	r5, [pc, #156]	; (3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    3a8c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    3a90:	ab06      	add	r3, sp, #24
    3a92:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
    3a94:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3a98:	f004 ffed 	bl	8a76 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3a9c:	4620      	mov	r0, r4
    3a9e:	f7ff feef 	bl	3880 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3aa2:	2001      	movs	r0, #1
    3aa4:	f7ff feec 	bl	3880 <z_sys_init_run_level>
	z_sched_init();
    3aa8:	f001 f9c0 	bl	4e2c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3aac:	4b1f      	ldr	r3, [pc, #124]	; (3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>)
	_kernel.ready_q.cache = &z_main_thread;
    3aae:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3ab0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    3ab4:	491e      	ldr	r1, [pc, #120]	; (3b30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x98>)
    3ab6:	9305      	str	r3, [sp, #20]
    3ab8:	4630      	mov	r0, r6
    3aba:	4653      	mov	r3, sl
    3abc:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    3ac0:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3ac4:	9400      	str	r4, [sp, #0]
    3ac6:	f000 f91d 	bl	3d04 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3aca:	7b73      	ldrb	r3, [r6, #13]
    3acc:	4681      	mov	r9, r0
    3ace:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    3ad2:	4630      	mov	r0, r6
    3ad4:	7373      	strb	r3, [r6, #13]
    3ad6:	f001 f821 	bl	4b1c <z_ready_thread>
	z_setup_new_thread(thread, stack,
    3ada:	230f      	movs	r3, #15
    3adc:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3ae0:	e9cd 4302 	strd	r4, r3, [sp, #8]
    3ae4:	4913      	ldr	r1, [pc, #76]	; (3b34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9c>)
    3ae6:	4b14      	ldr	r3, [pc, #80]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3ae8:	4640      	mov	r0, r8
    3aea:	e9cd b404 	strd	fp, r4, [sp, #16]
    3aee:	e9cd 5400 	strd	r5, r4, [sp]
    3af2:	f000 f907 	bl	3d04 <z_setup_new_thread>
    3af6:	f898 300d 	ldrb.w	r3, [r8, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3afa:	4652      	mov	r2, sl
    3afc:	f023 0304 	bic.w	r3, r3, #4
    3b00:	f888 300d 	strb.w	r3, [r8, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3b04:	f105 0318 	add.w	r3, r5, #24
    3b08:	4649      	mov	r1, r9
    3b0a:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
    3b0c:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3b10:	f8c5 800c 	str.w	r8, [r5, #12]
		_kernel.cpus[i].id = i;
    3b14:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    3b16:	606f      	str	r7, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3b18:	f7fe fc1c 	bl	2354 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3b1c:	20002880 	.word	0x20002880
    3b20:	e000ed00 	.word	0xe000ed00
    3b24:	200001f0 	.word	0x200001f0
    3b28:	20000c30 	.word	0x20000c30
    3b2c:	0000a11e 	.word	0x0000a11e
    3b30:	20001740 	.word	0x20001740
    3b34:	20002740 	.word	0x20002740
    3b38:	00003ef5 	.word	0x00003ef5
    3b3c:	000039e5 	.word	0x000039e5
    3b40:	20000170 	.word	0x20000170

00003b44 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    3b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3b48:	4d14      	ldr	r5, [pc, #80]	; (3b9c <init_mem_slab_module+0x58>)
    3b4a:	4c15      	ldr	r4, [pc, #84]	; (3ba0 <init_mem_slab_module+0x5c>)
    3b4c:	46a8      	mov	r8, r5
    3b4e:	4e15      	ldr	r6, [pc, #84]	; (3ba4 <init_mem_slab_module+0x60>)
    3b50:	42ac      	cmp	r4, r5
    3b52:	d908      	bls.n	3b66 <init_mem_slab_module+0x22>
    3b54:	4631      	mov	r1, r6
    3b56:	4814      	ldr	r0, [pc, #80]	; (3ba8 <init_mem_slab_module+0x64>)
    3b58:	223c      	movs	r2, #60	; 0x3c
    3b5a:	f004 fc31 	bl	83c0 <printk>
    3b5e:	213c      	movs	r1, #60	; 0x3c
    3b60:	4630      	mov	r0, r6
    3b62:	f004 fcf9 	bl	8558 <assert_post_action>
    3b66:	4544      	cmp	r4, r8
    3b68:	d302      	bcc.n	3b70 <init_mem_slab_module+0x2c>
			goto out;
		}
		z_object_init(slab);
	}

out:
    3b6a:	2000      	movs	r0, #0
	return rc;
}
    3b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    3b70:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    3b74:	ea42 0301 	orr.w	r3, r2, r1
    3b78:	f013 0303 	ands.w	r3, r3, #3
    3b7c:	d10b      	bne.n	3b96 <init_mem_slab_module+0x52>
	for (j = 0U; j < slab->num_blocks; j++) {
    3b7e:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    3b80:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    3b82:	4283      	cmp	r3, r0
    3b84:	d101      	bne.n	3b8a <init_mem_slab_module+0x46>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3b86:	3420      	adds	r4, #32
    3b88:	e7e2      	b.n	3b50 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    3b8a:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    3b8c:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    3b8e:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
    3b90:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
    3b92:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    3b94:	e7f5      	b.n	3b82 <init_mem_slab_module+0x3e>
		return -EINVAL;
    3b96:	f06f 0015 	mvn.w	r0, #21
	return rc;
    3b9a:	e7e7      	b.n	3b6c <init_mem_slab_module+0x28>
    3b9c:	2000011c 	.word	0x2000011c
    3ba0:	2000011c 	.word	0x2000011c
    3ba4:	0000a126 	.word	0x0000a126
    3ba8:	00009292 	.word	0x00009292

00003bac <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3bac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3bb0:	4604      	mov	r4, r0
    3bb2:	460d      	mov	r5, r1
    3bb4:	4690      	mov	r8, r2
    3bb6:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    3bb8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    3bbc:	f04f 0320 	mov.w	r3, #32
    3bc0:	f3ef 8711 	mrs	r7, BASEPRI
    3bc4:	f383 8811 	msr	BASEPRI, r3
    3bc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3bcc:	4630      	mov	r0, r6
    3bce:	f000 f96d 	bl	3eac <z_spin_lock_valid>
    3bd2:	b940      	cbnz	r0, 3be6 <k_mem_slab_alloc+0x3a>
    3bd4:	491f      	ldr	r1, [pc, #124]	; (3c54 <k_mem_slab_alloc+0xa8>)
    3bd6:	4820      	ldr	r0, [pc, #128]	; (3c58 <k_mem_slab_alloc+0xac>)
    3bd8:	2281      	movs	r2, #129	; 0x81
    3bda:	f004 fbf1 	bl	83c0 <printk>
    3bde:	2181      	movs	r1, #129	; 0x81
    3be0:	481c      	ldr	r0, [pc, #112]	; (3c54 <k_mem_slab_alloc+0xa8>)
    3be2:	f004 fcb9 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    3be6:	4630      	mov	r0, r6
    3be8:	f000 f97c 	bl	3ee4 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3bec:	69a3      	ldr	r3, [r4, #24]
    3bee:	b1c3      	cbz	r3, 3c22 <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
    3bf0:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    3bf2:	681b      	ldr	r3, [r3, #0]
    3bf4:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    3bf6:	69e3      	ldr	r3, [r4, #28]
    3bf8:	3301      	adds	r3, #1
    3bfa:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3bfc:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3bfe:	4630      	mov	r0, r6
    3c00:	f000 f962 	bl	3ec8 <z_spin_unlock_valid>
    3c04:	b940      	cbnz	r0, 3c18 <k_mem_slab_alloc+0x6c>
    3c06:	4913      	ldr	r1, [pc, #76]	; (3c54 <k_mem_slab_alloc+0xa8>)
    3c08:	4813      	ldr	r0, [pc, #76]	; (3c58 <k_mem_slab_alloc+0xac>)
    3c0a:	22ac      	movs	r2, #172	; 0xac
    3c0c:	f004 fbd8 	bl	83c0 <printk>
    3c10:	21ac      	movs	r1, #172	; 0xac
    3c12:	4810      	ldr	r0, [pc, #64]	; (3c54 <k_mem_slab_alloc+0xa8>)
    3c14:	f004 fca0 	bl	8558 <assert_post_action>
	__asm__ volatile(
    3c18:	f387 8811 	msr	BASEPRI, r7
    3c1c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    3c20:	e013      	b.n	3c4a <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    3c22:	ea58 0209 	orrs.w	r2, r8, r9
    3c26:	d103      	bne.n	3c30 <k_mem_slab_alloc+0x84>
		result = -ENOMEM;
    3c28:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
    3c2c:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    3c2e:	e7e6      	b.n	3bfe <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    3c30:	4622      	mov	r2, r4
    3c32:	4639      	mov	r1, r7
    3c34:	4630      	mov	r0, r6
    3c36:	e9cd 8900 	strd	r8, r9, [sp]
    3c3a:	f000 fd89 	bl	4750 <z_pend_curr>
		if (result == 0) {
    3c3e:	4604      	mov	r4, r0
    3c40:	b918      	cbnz	r0, 3c4a <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
    3c42:	4b06      	ldr	r3, [pc, #24]	; (3c5c <k_mem_slab_alloc+0xb0>)
    3c44:	689b      	ldr	r3, [r3, #8]
    3c46:	695b      	ldr	r3, [r3, #20]
    3c48:	602b      	str	r3, [r5, #0]
}
    3c4a:	4620      	mov	r0, r4
    3c4c:	b003      	add	sp, #12
    3c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3c52:	bf00      	nop
    3c54:	000092cc 	.word	0x000092cc
    3c58:	00009292 	.word	0x00009292
    3c5c:	20000c30 	.word	0x20000c30

00003c60 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    3c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c64:	4604      	mov	r4, r0
    3c66:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    3c68:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    3c6c:	f04f 0320 	mov.w	r3, #32
    3c70:	f3ef 8711 	mrs	r7, BASEPRI
    3c74:	f383 8811 	msr	BASEPRI, r3
    3c78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3c7c:	4630      	mov	r0, r6
    3c7e:	f000 f915 	bl	3eac <z_spin_lock_valid>
    3c82:	b940      	cbnz	r0, 3c96 <k_mem_slab_free+0x36>
    3c84:	491d      	ldr	r1, [pc, #116]	; (3cfc <k_mem_slab_free+0x9c>)
    3c86:	481e      	ldr	r0, [pc, #120]	; (3d00 <k_mem_slab_free+0xa0>)
    3c88:	2281      	movs	r2, #129	; 0x81
    3c8a:	f004 fb99 	bl	83c0 <printk>
    3c8e:	2181      	movs	r1, #129	; 0x81
    3c90:	481a      	ldr	r0, [pc, #104]	; (3cfc <k_mem_slab_free+0x9c>)
    3c92:	f004 fc61 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    3c96:	4630      	mov	r0, r6
    3c98:	f000 f924 	bl	3ee4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    3c9c:	f8d4 8018 	ldr.w	r8, [r4, #24]
    3ca0:	f1b8 0f00 	cmp.w	r8, #0
    3ca4:	d10f      	bne.n	3cc6 <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    3ca6:	4620      	mov	r0, r4
    3ca8:	f001 f882 	bl	4db0 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    3cac:	b158      	cbz	r0, 3cc6 <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    3cae:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3cb0:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    3cb4:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    3cb6:	f000 ff31 	bl	4b1c <z_ready_thread>
			z_reschedule(&slab->lock, key);
    3cba:	4639      	mov	r1, r7
    3cbc:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    3cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    3cc2:	f000 bba5 	b.w	4410 <z_reschedule>
	**(char ***) mem = slab->free_list;
    3cc6:	682b      	ldr	r3, [r5, #0]
    3cc8:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3cca:	4630      	mov	r0, r6
    3ccc:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    3cce:	682b      	ldr	r3, [r5, #0]
    3cd0:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    3cd2:	69e3      	ldr	r3, [r4, #28]
    3cd4:	3b01      	subs	r3, #1
    3cd6:	61e3      	str	r3, [r4, #28]
    3cd8:	f000 f8f6 	bl	3ec8 <z_spin_unlock_valid>
    3cdc:	b940      	cbnz	r0, 3cf0 <k_mem_slab_free+0x90>
    3cde:	4907      	ldr	r1, [pc, #28]	; (3cfc <k_mem_slab_free+0x9c>)
    3ce0:	4807      	ldr	r0, [pc, #28]	; (3d00 <k_mem_slab_free+0xa0>)
    3ce2:	22ac      	movs	r2, #172	; 0xac
    3ce4:	f004 fb6c 	bl	83c0 <printk>
    3ce8:	21ac      	movs	r1, #172	; 0xac
    3cea:	4804      	ldr	r0, [pc, #16]	; (3cfc <k_mem_slab_free+0x9c>)
    3cec:	f004 fc34 	bl	8558 <assert_post_action>
	__asm__ volatile(
    3cf0:	f387 8811 	msr	BASEPRI, r7
    3cf4:	f3bf 8f6f 	isb	sy
}
    3cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cfc:	000092cc 	.word	0x000092cc
    3d00:	00009292 	.word	0x00009292

00003d04 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3d08:	b085      	sub	sp, #20
    3d0a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    3d0e:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    3d10:	f1b9 0f0f 	cmp.w	r9, #15
{
    3d14:	460f      	mov	r7, r1
    3d16:	4615      	mov	r5, r2
    3d18:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    3d1a:	d12e      	bne.n	3d7a <z_setup_new_thread+0x76>
    3d1c:	4b1f      	ldr	r3, [pc, #124]	; (3d9c <z_setup_new_thread+0x98>)
    3d1e:	4598      	cmp	r8, r3
    3d20:	d12f      	bne.n	3d82 <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3d22:	f104 0358 	add.w	r3, r4, #88	; 0x58
    3d26:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    3d2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
    3d2c:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
    3d2e:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    3d30:	2304      	movs	r3, #4
    3d32:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3d34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3d36:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3d38:	9302      	str	r3, [sp, #8]
    3d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3d3c:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3d40:	9301      	str	r3, [sp, #4]
    3d42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
    3d44:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
    3d46:	e9c4 7019 	strd	r7, r0, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3d4a:	9300      	str	r3, [sp, #0]
    3d4c:	462a      	mov	r2, r5
    3d4e:	4643      	mov	r3, r8
    3d50:	4639      	mov	r1, r7
    3d52:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    3d54:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    3d58:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
    3d5a:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
    3d5e:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    3d60:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3d62:	f7fe fadb 	bl	231c <arch_new_thread>
	if (!_current) {
    3d66:	4b0e      	ldr	r3, [pc, #56]	; (3da0 <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
    3d68:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    3d6a:	689b      	ldr	r3, [r3, #8]
    3d6c:	b103      	cbz	r3, 3d70 <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
    3d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    3d70:	4628      	mov	r0, r5
    3d72:	6723      	str	r3, [r4, #112]	; 0x70
    3d74:	b005      	add	sp, #20
    3d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    3d7a:	f109 0310 	add.w	r3, r9, #16
    3d7e:	2b1e      	cmp	r3, #30
    3d80:	d9cf      	bls.n	3d22 <z_setup_new_thread+0x1e>
    3d82:	f44f 7202 	mov.w	r2, #520	; 0x208
    3d86:	4907      	ldr	r1, [pc, #28]	; (3da4 <z_setup_new_thread+0xa0>)
    3d88:	4807      	ldr	r0, [pc, #28]	; (3da8 <z_setup_new_thread+0xa4>)
    3d8a:	f004 fb19 	bl	83c0 <printk>
    3d8e:	f44f 7102 	mov.w	r1, #520	; 0x208
    3d92:	4804      	ldr	r0, [pc, #16]	; (3da4 <z_setup_new_thread+0xa0>)
    3d94:	f004 fbe0 	bl	8558 <assert_post_action>
    3d98:	e7c3      	b.n	3d22 <z_setup_new_thread+0x1e>
    3d9a:	bf00      	nop
    3d9c:	00003ef5 	.word	0x00003ef5
    3da0:	20000c30 	.word	0x20000c30
    3da4:	0000a14b 	.word	0x0000a14b
    3da8:	00009292 	.word	0x00009292

00003dac <z_init_static_threads>:
{
    3dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    3db0:	4f39      	ldr	r7, [pc, #228]	; (3e98 <z_init_static_threads+0xec>)
    3db2:	4d3a      	ldr	r5, [pc, #232]	; (3e9c <z_init_static_threads+0xf0>)
    3db4:	463e      	mov	r6, r7
    3db6:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 3ea4 <z_init_static_threads+0xf8>
{
    3dba:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    3dbc:	42bd      	cmp	r5, r7
    3dbe:	d90a      	bls.n	3dd6 <z_init_static_threads+0x2a>
    3dc0:	4641      	mov	r1, r8
    3dc2:	4837      	ldr	r0, [pc, #220]	; (3ea0 <z_init_static_threads+0xf4>)
    3dc4:	f44f 7236 	mov.w	r2, #728	; 0x2d8
    3dc8:	f004 fafa 	bl	83c0 <printk>
    3dcc:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    3dd0:	4640      	mov	r0, r8
    3dd2:	f004 fbc1 	bl	8558 <assert_post_action>
    3dd6:	42b5      	cmp	r5, r6
    3dd8:	f105 0430 	add.w	r4, r5, #48	; 0x30
    3ddc:	d31d      	bcc.n	3e1a <z_init_static_threads+0x6e>
	k_sched_lock();
    3dde:	f000 fb4d 	bl	447c <k_sched_lock>
		} else {
			return (t * to_hz + off) / from_hz;
    3de2:	f240 38e7 	movw	r8, #999	; 0x3e7
    3de6:	f04f 0900 	mov.w	r9, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    3dea:	4c2c      	ldr	r4, [pc, #176]	; (3e9c <z_init_static_threads+0xf0>)
    3dec:	4d2d      	ldr	r5, [pc, #180]	; (3ea4 <z_init_static_threads+0xf8>)
    3dee:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 3ea0 <z_init_static_threads+0xf4>
    3df2:	42b4      	cmp	r4, r6
    3df4:	d90a      	bls.n	3e0c <z_init_static_threads+0x60>
    3df6:	4629      	mov	r1, r5
    3df8:	4650      	mov	r0, sl
    3dfa:	f240 22f7 	movw	r2, #759	; 0x2f7
    3dfe:	f004 fadf 	bl	83c0 <printk>
    3e02:	f240 21f7 	movw	r1, #759	; 0x2f7
    3e06:	4628      	mov	r0, r5
    3e08:	f004 fba6 	bl	8558 <assert_post_action>
    3e0c:	42b4      	cmp	r4, r6
    3e0e:	d321      	bcc.n	3e54 <z_init_static_threads+0xa8>
}
    3e10:	b006      	add	sp, #24
    3e12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    3e16:	f000 bd19 	b.w	484c <k_sched_unlock>
		z_setup_new_thread(
    3e1a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3e1e:	9305      	str	r3, [sp, #20]
    3e20:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3e24:	9304      	str	r3, [sp, #16]
    3e26:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3e2a:	9303      	str	r3, [sp, #12]
    3e2c:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3e30:	9302      	str	r3, [sp, #8]
    3e32:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3e36:	9301      	str	r3, [sp, #4]
    3e38:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3e3c:	9300      	str	r3, [sp, #0]
    3e3e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3e42:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    3e46:	f7ff ff5d 	bl	3d04 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3e4a:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3e4e:	655d      	str	r5, [r3, #84]	; 0x54
    3e50:	4625      	mov	r5, r4
    3e52:	e7b3      	b.n	3dbc <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3e54:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3e56:	1c5a      	adds	r2, r3, #1
    3e58:	d00f      	beq.n	3e7a <z_init_static_threads+0xce>
    3e5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3e5e:	4640      	mov	r0, r8
    3e60:	4649      	mov	r1, r9
					    K_MSEC(thread_data->init_delay));
    3e62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3e66:	fbc2 0103 	smlal	r0, r1, r2, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3e6a:	4549      	cmp	r1, r9
    3e6c:	bf08      	it	eq
    3e6e:	4540      	cmpeq	r0, r8
			schedule_new_thread(thread_data->init_thread,
    3e70:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3e72:	d104      	bne.n	3e7e <z_init_static_threads+0xd2>
	z_sched_start(thread);
    3e74:	4638      	mov	r0, r7
    3e76:	f000 fe87 	bl	4b88 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    3e7a:	3430      	adds	r4, #48	; 0x30
    3e7c:	e7b9      	b.n	3df2 <z_init_static_threads+0x46>
    3e7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3e82:	2300      	movs	r3, #0
    3e84:	f7fc f9da 	bl	23c <__aeabi_uldivmod>
    3e88:	4602      	mov	r2, r0
    3e8a:	460b      	mov	r3, r1

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3e8c:	f107 0018 	add.w	r0, r7, #24
    3e90:	4905      	ldr	r1, [pc, #20]	; (3ea8 <z_init_static_threads+0xfc>)
    3e92:	f001 fa1f 	bl	52d4 <z_add_timeout>
    3e96:	e7f0      	b.n	3e7a <z_init_static_threads+0xce>
    3e98:	2000011c 	.word	0x2000011c
    3e9c:	2000011c 	.word	0x2000011c
    3ea0:	00009292 	.word	0x00009292
    3ea4:	0000a14b 	.word	0x0000a14b
    3ea8:	00004c0d 	.word	0x00004c0d

00003eac <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    3eac:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    3eae:	b138      	cbz	r0, 3ec0 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    3eb0:	4b04      	ldr	r3, [pc, #16]	; (3ec4 <z_spin_lock_valid+0x18>)
    3eb2:	f000 0003 	and.w	r0, r0, #3
    3eb6:	7d1b      	ldrb	r3, [r3, #20]
    3eb8:	1ac0      	subs	r0, r0, r3
    3eba:	bf18      	it	ne
    3ebc:	2001      	movne	r0, #1
    3ebe:	4770      	bx	lr
			return false;
		}
	}
	return true;
    3ec0:	2001      	movs	r0, #1
}
    3ec2:	4770      	bx	lr
    3ec4:	20000c30 	.word	0x20000c30

00003ec8 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    3ec8:	4905      	ldr	r1, [pc, #20]	; (3ee0 <z_spin_unlock_valid+0x18>)
{
    3eca:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    3ecc:	688a      	ldr	r2, [r1, #8]
    3ece:	7d08      	ldrb	r0, [r1, #20]
    3ed0:	6819      	ldr	r1, [r3, #0]
    3ed2:	4302      	orrs	r2, r0
    3ed4:	2000      	movs	r0, #0
    3ed6:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
    3ed8:	bf04      	itt	eq
    3eda:	6018      	streq	r0, [r3, #0]
	return true;
    3edc:	2001      	moveq	r0, #1
}
    3ede:	4770      	bx	lr
    3ee0:	20000c30 	.word	0x20000c30

00003ee4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    3ee4:	4a02      	ldr	r2, [pc, #8]	; (3ef0 <z_spin_lock_set_owner+0xc>)
    3ee6:	7d11      	ldrb	r1, [r2, #20]
    3ee8:	6893      	ldr	r3, [r2, #8]
    3eea:	430b      	orrs	r3, r1
    3eec:	6003      	str	r3, [r0, #0]
}
    3eee:	4770      	bx	lr
    3ef0:	20000c30 	.word	0x20000c30

00003ef4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    3ef4:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    3ef6:	4c09      	ldr	r4, [pc, #36]	; (3f1c <idle+0x28>)
	__asm__ volatile(
    3ef8:	f04f 0220 	mov.w	r2, #32
    3efc:	f3ef 8311 	mrs	r3, BASEPRI
    3f00:	f382 8811 	msr	BASEPRI, r2
    3f04:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    3f08:	f001 fada 	bl	54c0 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    3f0c:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    3f0e:	f7fd faa5 	bl	145c <pm_system_suspend>
    3f12:	2800      	cmp	r0, #0
    3f14:	d1f0      	bne.n	3ef8 <idle+0x4>
	arch_cpu_idle();
    3f16:	f7fe fa37 	bl	2388 <arch_cpu_idle>
}
    3f1a:	e7ed      	b.n	3ef8 <idle+0x4>
    3f1c:	20000c30 	.word	0x20000c30

00003f20 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3f20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3f24:	4604      	mov	r4, r0
    3f26:	4616      	mov	r6, r2
    3f28:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3f2a:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    3f2e:	b143      	cbz	r3, 3f42 <z_impl_k_mutex_lock+0x22>
    3f30:	495f      	ldr	r1, [pc, #380]	; (40b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>)
    3f32:	4860      	ldr	r0, [pc, #384]	; (40b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>)
    3f34:	2265      	movs	r2, #101	; 0x65
    3f36:	f004 fa43 	bl	83c0 <printk>
    3f3a:	2165      	movs	r1, #101	; 0x65
    3f3c:	485c      	ldr	r0, [pc, #368]	; (40b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>)
    3f3e:	f004 fb0b 	bl	8558 <assert_post_action>
    3f42:	f04f 0320 	mov.w	r3, #32
    3f46:	f3ef 8811 	mrs	r8, BASEPRI
    3f4a:	f383 8811 	msr	BASEPRI, r3
    3f4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3f52:	4859      	ldr	r0, [pc, #356]	; (40b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>)
    3f54:	f7ff ffaa 	bl	3eac <z_spin_lock_valid>
    3f58:	b940      	cbnz	r0, 3f6c <z_impl_k_mutex_lock+0x4c>
    3f5a:	4958      	ldr	r1, [pc, #352]	; (40bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>)
    3f5c:	4855      	ldr	r0, [pc, #340]	; (40b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>)
    3f5e:	2281      	movs	r2, #129	; 0x81
    3f60:	f004 fa2e 	bl	83c0 <printk>
    3f64:	2181      	movs	r1, #129	; 0x81
    3f66:	4855      	ldr	r0, [pc, #340]	; (40bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>)
    3f68:	f004 faf6 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    3f6c:	4852      	ldr	r0, [pc, #328]	; (40b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>)
    3f6e:	f7ff ffb9 	bl	3ee4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3f72:	68e3      	ldr	r3, [r4, #12]
    3f74:	4a52      	ldr	r2, [pc, #328]	; (40c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>)
    3f76:	b1d3      	cbz	r3, 3fae <z_impl_k_mutex_lock+0x8e>
    3f78:	68a0      	ldr	r0, [r4, #8]
    3f7a:	6891      	ldr	r1, [r2, #8]
    3f7c:	4288      	cmp	r0, r1
    3f7e:	d033      	beq.n	3fe8 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3f80:	ea56 0307 	orrs.w	r3, r6, r7
    3f84:	d132      	bne.n	3fec <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3f86:	484c      	ldr	r0, [pc, #304]	; (40b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>)
    3f88:	f7ff ff9e 	bl	3ec8 <z_spin_unlock_valid>
    3f8c:	b940      	cbnz	r0, 3fa0 <z_impl_k_mutex_lock+0x80>
    3f8e:	494b      	ldr	r1, [pc, #300]	; (40bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>)
    3f90:	4848      	ldr	r0, [pc, #288]	; (40b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>)
    3f92:	22ac      	movs	r2, #172	; 0xac
    3f94:	f004 fa14 	bl	83c0 <printk>
    3f98:	21ac      	movs	r1, #172	; 0xac
    3f9a:	4848      	ldr	r0, [pc, #288]	; (40bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>)
    3f9c:	f004 fadc 	bl	8558 <assert_post_action>
	__asm__ volatile(
    3fa0:	f388 8811 	msr	BASEPRI, r8
    3fa4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    3fa8:	f06f 000f 	mvn.w	r0, #15
    3fac:	e019      	b.n	3fe2 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
    3fae:	6891      	ldr	r1, [r2, #8]
    3fb0:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    3fb4:	3301      	adds	r3, #1
    3fb6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    3fb8:	6893      	ldr	r3, [r2, #8]
    3fba:	483f      	ldr	r0, [pc, #252]	; (40b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3fbc:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    3fbe:	60a3      	str	r3, [r4, #8]
    3fc0:	f7ff ff82 	bl	3ec8 <z_spin_unlock_valid>
    3fc4:	b940      	cbnz	r0, 3fd8 <z_impl_k_mutex_lock+0xb8>
    3fc6:	493d      	ldr	r1, [pc, #244]	; (40bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>)
    3fc8:	483a      	ldr	r0, [pc, #232]	; (40b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>)
    3fca:	22ac      	movs	r2, #172	; 0xac
    3fcc:	f004 f9f8 	bl	83c0 <printk>
    3fd0:	21ac      	movs	r1, #172	; 0xac
    3fd2:	483a      	ldr	r0, [pc, #232]	; (40bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>)
    3fd4:	f004 fac0 	bl	8558 <assert_post_action>
    3fd8:	f388 8811 	msr	BASEPRI, r8
    3fdc:	f3bf 8f6f 	isb	sy
		return 0;
    3fe0:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    3fe2:	b002      	add	sp, #8
    3fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    3fe8:	6921      	ldr	r1, [r4, #16]
    3fea:	e7e3      	b.n	3fb4 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3fec:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3ff0:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3ff4:	4299      	cmp	r1, r3
    3ff6:	bfa8      	it	ge
    3ff8:	4619      	movge	r1, r3
    3ffa:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3ffe:	428b      	cmp	r3, r1
    4000:	dd3c      	ble.n	407c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    4002:	f000 fe4b 	bl	4c9c <z_set_prio>
    4006:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4008:	4622      	mov	r2, r4
    400a:	4641      	mov	r1, r8
    400c:	e9cd 6700 	strd	r6, r7, [sp]
    4010:	4829      	ldr	r0, [pc, #164]	; (40b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>)
    4012:	f000 fb9d 	bl	4750 <z_pend_curr>
	if (got_mutex == 0) {
    4016:	2800      	cmp	r0, #0
    4018:	d0e3      	beq.n	3fe2 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
    401a:	f04f 0320 	mov.w	r3, #32
    401e:	f3ef 8611 	mrs	r6, BASEPRI
    4022:	f383 8811 	msr	BASEPRI, r3
    4026:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    402a:	4823      	ldr	r0, [pc, #140]	; (40b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>)
    402c:	f7ff ff3e 	bl	3eac <z_spin_lock_valid>
    4030:	b940      	cbnz	r0, 4044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>
    4032:	4922      	ldr	r1, [pc, #136]	; (40bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>)
    4034:	481f      	ldr	r0, [pc, #124]	; (40b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>)
    4036:	2281      	movs	r2, #129	; 0x81
    4038:	f004 f9c2 	bl	83c0 <printk>
    403c:	2181      	movs	r1, #129	; 0x81
    403e:	481f      	ldr	r0, [pc, #124]	; (40bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>)
    4040:	f004 fa8a 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    4044:	481c      	ldr	r0, [pc, #112]	; (40b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>)
    4046:	f7ff ff4d 	bl	3ee4 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    404a:	6823      	ldr	r3, [r4, #0]
    404c:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    404e:	429c      	cmp	r4, r3
    4050:	d007      	beq.n	4062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4052:	b133      	cbz	r3, 4062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
    4054:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4058:	4299      	cmp	r1, r3
    405a:	bfa8      	it	ge
    405c:	4619      	movge	r1, r3
    405e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4062:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    4064:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4068:	4299      	cmp	r1, r3
    406a:	d109      	bne.n	4080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
	if (resched) {
    406c:	b16d      	cbz	r5, 408a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
		z_reschedule(&lock, key);
    406e:	4631      	mov	r1, r6
    4070:	4811      	ldr	r0, [pc, #68]	; (40b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>)
    4072:	f000 f9cd 	bl	4410 <z_reschedule>
	return -EAGAIN;
    4076:	f06f 000a 	mvn.w	r0, #10
    407a:	e7b2      	b.n	3fe2 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
    407c:	2500      	movs	r5, #0
    407e:	e7c3      	b.n	4008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
		return z_set_prio(mutex->owner, new_prio);
    4080:	f000 fe0c 	bl	4c9c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4084:	2800      	cmp	r0, #0
    4086:	d1f2      	bne.n	406e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
    4088:	e7f0      	b.n	406c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    408a:	480b      	ldr	r0, [pc, #44]	; (40b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>)
    408c:	f7ff ff1c 	bl	3ec8 <z_spin_unlock_valid>
    4090:	b940      	cbnz	r0, 40a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
    4092:	490a      	ldr	r1, [pc, #40]	; (40bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>)
    4094:	4807      	ldr	r0, [pc, #28]	; (40b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>)
    4096:	22ac      	movs	r2, #172	; 0xac
    4098:	f004 f992 	bl	83c0 <printk>
    409c:	21ac      	movs	r1, #172	; 0xac
    409e:	4807      	ldr	r0, [pc, #28]	; (40bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>)
    40a0:	f004 fa5a 	bl	8558 <assert_post_action>
	__asm__ volatile(
    40a4:	f386 8811 	msr	BASEPRI, r6
    40a8:	f3bf 8f6f 	isb	sy
    40ac:	e7e3      	b.n	4076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
    40ae:	bf00      	nop
    40b0:	0000a16e 	.word	0x0000a16e
    40b4:	00009292 	.word	0x00009292
    40b8:	20000c60 	.word	0x20000c60
    40bc:	000092cc 	.word	0x000092cc
    40c0:	20000c30 	.word	0x20000c30

000040c4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    40c4:	b538      	push	{r3, r4, r5, lr}
    40c6:	4604      	mov	r4, r0
    40c8:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    40cc:	b143      	cbz	r3, 40e0 <z_impl_k_mutex_unlock+0x1c>
    40ce:	4945      	ldr	r1, [pc, #276]	; (41e4 <z_impl_k_mutex_unlock+0x120>)
    40d0:	4845      	ldr	r0, [pc, #276]	; (41e8 <z_impl_k_mutex_unlock+0x124>)
    40d2:	22c7      	movs	r2, #199	; 0xc7
    40d4:	f004 f974 	bl	83c0 <printk>
    40d8:	21c7      	movs	r1, #199	; 0xc7
    40da:	4842      	ldr	r0, [pc, #264]	; (41e4 <z_impl_k_mutex_unlock+0x120>)
    40dc:	f004 fa3c 	bl	8558 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    40e0:	68a3      	ldr	r3, [r4, #8]
    40e2:	2b00      	cmp	r3, #0
    40e4:	d078      	beq.n	41d8 <z_impl_k_mutex_unlock+0x114>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    40e6:	4d41      	ldr	r5, [pc, #260]	; (41ec <z_impl_k_mutex_unlock+0x128>)
    40e8:	68aa      	ldr	r2, [r5, #8]
    40ea:	4293      	cmp	r3, r2
    40ec:	d177      	bne.n	41de <z_impl_k_mutex_unlock+0x11a>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    40ee:	68e3      	ldr	r3, [r4, #12]
    40f0:	b943      	cbnz	r3, 4104 <z_impl_k_mutex_unlock+0x40>
    40f2:	493c      	ldr	r1, [pc, #240]	; (41e4 <z_impl_k_mutex_unlock+0x120>)
    40f4:	483c      	ldr	r0, [pc, #240]	; (41e8 <z_impl_k_mutex_unlock+0x124>)
    40f6:	22df      	movs	r2, #223	; 0xdf
    40f8:	f004 f962 	bl	83c0 <printk>
    40fc:	21df      	movs	r1, #223	; 0xdf
    40fe:	4839      	ldr	r0, [pc, #228]	; (41e4 <z_impl_k_mutex_unlock+0x120>)
    4100:	f004 fa2a 	bl	8558 <assert_post_action>
    4104:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
    4108:	b143      	cbz	r3, 411c <z_impl_k_mutex_unlock+0x58>
    410a:	4939      	ldr	r1, [pc, #228]	; (41f0 <z_impl_k_mutex_unlock+0x12c>)
    410c:	4836      	ldr	r0, [pc, #216]	; (41e8 <z_impl_k_mutex_unlock+0x124>)
    410e:	22fe      	movs	r2, #254	; 0xfe
    4110:	f004 f956 	bl	83c0 <printk>
    4114:	21fe      	movs	r1, #254	; 0xfe
    4116:	4836      	ldr	r0, [pc, #216]	; (41f0 <z_impl_k_mutex_unlock+0x12c>)
    4118:	f004 fa1e 	bl	8558 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    411c:	68ab      	ldr	r3, [r5, #8]
    411e:	7bdb      	ldrb	r3, [r3, #15]
    4120:	2b01      	cmp	r3, #1
    4122:	d108      	bne.n	4136 <z_impl_k_mutex_unlock+0x72>
    4124:	4932      	ldr	r1, [pc, #200]	; (41f0 <z_impl_k_mutex_unlock+0x12c>)
    4126:	4830      	ldr	r0, [pc, #192]	; (41e8 <z_impl_k_mutex_unlock+0x124>)
    4128:	22ff      	movs	r2, #255	; 0xff
    412a:	f004 f949 	bl	83c0 <printk>
    412e:	21ff      	movs	r1, #255	; 0xff
    4130:	482f      	ldr	r0, [pc, #188]	; (41f0 <z_impl_k_mutex_unlock+0x12c>)
    4132:	f004 fa11 	bl	8558 <assert_post_action>

	--_current->base.sched_locked;
    4136:	68aa      	ldr	r2, [r5, #8]
    4138:	7bd3      	ldrb	r3, [r2, #15]
    413a:	3b01      	subs	r3, #1
    413c:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    413e:	68e3      	ldr	r3, [r4, #12]
    4140:	2b01      	cmp	r3, #1
    4142:	d005      	beq.n	4150 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
    4144:	3b01      	subs	r3, #1
    4146:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    4148:	f000 fb80 	bl	484c <k_sched_unlock>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    414c:	2000      	movs	r0, #0
}
    414e:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4150:	f04f 0320 	mov.w	r3, #32
    4154:	f3ef 8511 	mrs	r5, BASEPRI
    4158:	f383 8811 	msr	BASEPRI, r3
    415c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4160:	4824      	ldr	r0, [pc, #144]	; (41f4 <z_impl_k_mutex_unlock+0x130>)
    4162:	f7ff fea3 	bl	3eac <z_spin_lock_valid>
    4166:	b940      	cbnz	r0, 417a <z_impl_k_mutex_unlock+0xb6>
    4168:	4923      	ldr	r1, [pc, #140]	; (41f8 <z_impl_k_mutex_unlock+0x134>)
    416a:	481f      	ldr	r0, [pc, #124]	; (41e8 <z_impl_k_mutex_unlock+0x124>)
    416c:	2281      	movs	r2, #129	; 0x81
    416e:	f004 f927 	bl	83c0 <printk>
    4172:	2181      	movs	r1, #129	; 0x81
    4174:	4820      	ldr	r0, [pc, #128]	; (41f8 <z_impl_k_mutex_unlock+0x134>)
    4176:	f004 f9ef 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    417a:	481e      	ldr	r0, [pc, #120]	; (41f4 <z_impl_k_mutex_unlock+0x130>)
    417c:	f7ff feb2 	bl	3ee4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4180:	68a0      	ldr	r0, [r4, #8]
    4182:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    4184:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4188:	4299      	cmp	r1, r3
    418a:	d001      	beq.n	4190 <z_impl_k_mutex_unlock+0xcc>
		return z_set_prio(mutex->owner, new_prio);
    418c:	f000 fd86 	bl	4c9c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4190:	4620      	mov	r0, r4
    4192:	f000 fe0d 	bl	4db0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    4196:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4198:	b158      	cbz	r0, 41b2 <z_impl_k_mutex_unlock+0xee>
		mutex->owner_orig_prio = new_owner->base.prio;
    419a:	f990 200e 	ldrsb.w	r2, [r0, #14]
    419e:	6122      	str	r2, [r4, #16]
    41a0:	2200      	movs	r2, #0
    41a2:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    41a4:	f000 fcba 	bl	4b1c <z_ready_thread>
		z_reschedule(&lock, key);
    41a8:	4629      	mov	r1, r5
    41aa:	4812      	ldr	r0, [pc, #72]	; (41f4 <z_impl_k_mutex_unlock+0x130>)
    41ac:	f000 f930 	bl	4410 <z_reschedule>
    41b0:	e7ca      	b.n	4148 <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
    41b2:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    41b4:	480f      	ldr	r0, [pc, #60]	; (41f4 <z_impl_k_mutex_unlock+0x130>)
    41b6:	f7ff fe87 	bl	3ec8 <z_spin_unlock_valid>
    41ba:	b940      	cbnz	r0, 41ce <z_impl_k_mutex_unlock+0x10a>
    41bc:	490e      	ldr	r1, [pc, #56]	; (41f8 <z_impl_k_mutex_unlock+0x134>)
    41be:	480a      	ldr	r0, [pc, #40]	; (41e8 <z_impl_k_mutex_unlock+0x124>)
    41c0:	22ac      	movs	r2, #172	; 0xac
    41c2:	f004 f8fd 	bl	83c0 <printk>
    41c6:	21ac      	movs	r1, #172	; 0xac
    41c8:	480b      	ldr	r0, [pc, #44]	; (41f8 <z_impl_k_mutex_unlock+0x134>)
    41ca:	f004 f9c5 	bl	8558 <assert_post_action>
	__asm__ volatile(
    41ce:	f385 8811 	msr	BASEPRI, r5
    41d2:	f3bf 8f6f 	isb	sy
    41d6:	e7b7      	b.n	4148 <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
    41d8:	f06f 0015 	mvn.w	r0, #21
    41dc:	e7b7      	b.n	414e <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
    41de:	f04f 30ff 	mov.w	r0, #4294967295
    41e2:	e7b4      	b.n	414e <z_impl_k_mutex_unlock+0x8a>
    41e4:	0000a16e 	.word	0x0000a16e
    41e8:	00009292 	.word	0x00009292
    41ec:	20000c30 	.word	0x20000c30
    41f0:	0000a190 	.word	0x0000a190
    41f4:	20000c60 	.word	0x20000c60
    41f8:	000092cc 	.word	0x000092cc

000041fc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    41fc:	b538      	push	{r3, r4, r5, lr}
    41fe:	4604      	mov	r4, r0
	__asm__ volatile(
    4200:	f04f 0320 	mov.w	r3, #32
    4204:	f3ef 8511 	mrs	r5, BASEPRI
    4208:	f383 8811 	msr	BASEPRI, r3
    420c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4210:	4812      	ldr	r0, [pc, #72]	; (425c <z_impl_k_sem_give+0x60>)
    4212:	f7ff fe4b 	bl	3eac <z_spin_lock_valid>
    4216:	b940      	cbnz	r0, 422a <z_impl_k_sem_give+0x2e>
    4218:	4911      	ldr	r1, [pc, #68]	; (4260 <z_impl_k_sem_give+0x64>)
    421a:	4812      	ldr	r0, [pc, #72]	; (4264 <z_impl_k_sem_give+0x68>)
    421c:	2281      	movs	r2, #129	; 0x81
    421e:	f004 f8cf 	bl	83c0 <printk>
    4222:	2181      	movs	r1, #129	; 0x81
    4224:	480e      	ldr	r0, [pc, #56]	; (4260 <z_impl_k_sem_give+0x64>)
    4226:	f004 f997 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    422a:	480c      	ldr	r0, [pc, #48]	; (425c <z_impl_k_sem_give+0x60>)
    422c:	f7ff fe5a 	bl	3ee4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4230:	4620      	mov	r0, r4
    4232:	f000 fdbd 	bl	4db0 <z_unpend_first_thread>

	if (thread != NULL) {
    4236:	b148      	cbz	r0, 424c <z_impl_k_sem_give+0x50>
    4238:	2200      	movs	r2, #0
    423a:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    423c:	f000 fc6e 	bl	4b1c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    4240:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    4242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    4246:	4805      	ldr	r0, [pc, #20]	; (425c <z_impl_k_sem_give+0x60>)
    4248:	f000 b8e2 	b.w	4410 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    424c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    4250:	429a      	cmp	r2, r3
    4252:	bf18      	it	ne
    4254:	3301      	addne	r3, #1
    4256:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    4258:	e7f2      	b.n	4240 <z_impl_k_sem_give+0x44>
    425a:	bf00      	nop
    425c:	20000c64 	.word	0x20000c64
    4260:	000092cc 	.word	0x000092cc
    4264:	00009292 	.word	0x00009292

00004268 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    426a:	4604      	mov	r4, r0
    426c:	4616      	mov	r6, r2
    426e:	461f      	mov	r7, r3
    4270:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    4274:	b15b      	cbz	r3, 428e <z_impl_k_sem_take+0x26>
    4276:	ea56 0307 	orrs.w	r3, r6, r7
    427a:	d008      	beq.n	428e <z_impl_k_sem_take+0x26>
    427c:	492b      	ldr	r1, [pc, #172]	; (432c <z_impl_k_sem_take+0xc4>)
    427e:	482c      	ldr	r0, [pc, #176]	; (4330 <z_impl_k_sem_take+0xc8>)
    4280:	2279      	movs	r2, #121	; 0x79
    4282:	f004 f89d 	bl	83c0 <printk>
    4286:	2179      	movs	r1, #121	; 0x79
    4288:	4828      	ldr	r0, [pc, #160]	; (432c <z_impl_k_sem_take+0xc4>)
    428a:	f004 f965 	bl	8558 <assert_post_action>
    428e:	f04f 0320 	mov.w	r3, #32
    4292:	f3ef 8511 	mrs	r5, BASEPRI
    4296:	f383 8811 	msr	BASEPRI, r3
    429a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    429e:	4825      	ldr	r0, [pc, #148]	; (4334 <z_impl_k_sem_take+0xcc>)
    42a0:	f7ff fe04 	bl	3eac <z_spin_lock_valid>
    42a4:	b940      	cbnz	r0, 42b8 <z_impl_k_sem_take+0x50>
    42a6:	4924      	ldr	r1, [pc, #144]	; (4338 <z_impl_k_sem_take+0xd0>)
    42a8:	4821      	ldr	r0, [pc, #132]	; (4330 <z_impl_k_sem_take+0xc8>)
    42aa:	2281      	movs	r2, #129	; 0x81
    42ac:	f004 f888 	bl	83c0 <printk>
    42b0:	2181      	movs	r1, #129	; 0x81
    42b2:	4821      	ldr	r0, [pc, #132]	; (4338 <z_impl_k_sem_take+0xd0>)
    42b4:	f004 f950 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    42b8:	481e      	ldr	r0, [pc, #120]	; (4334 <z_impl_k_sem_take+0xcc>)
    42ba:	f7ff fe13 	bl	3ee4 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    42be:	68a3      	ldr	r3, [r4, #8]
    42c0:	b1ab      	cbz	r3, 42ee <z_impl_k_sem_take+0x86>
		sem->count--;
    42c2:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    42c4:	481b      	ldr	r0, [pc, #108]	; (4334 <z_impl_k_sem_take+0xcc>)
    42c6:	60a3      	str	r3, [r4, #8]
    42c8:	f7ff fdfe 	bl	3ec8 <z_spin_unlock_valid>
    42cc:	b940      	cbnz	r0, 42e0 <z_impl_k_sem_take+0x78>
    42ce:	491a      	ldr	r1, [pc, #104]	; (4338 <z_impl_k_sem_take+0xd0>)
    42d0:	4817      	ldr	r0, [pc, #92]	; (4330 <z_impl_k_sem_take+0xc8>)
    42d2:	22ac      	movs	r2, #172	; 0xac
    42d4:	f004 f874 	bl	83c0 <printk>
    42d8:	21ac      	movs	r1, #172	; 0xac
    42da:	4817      	ldr	r0, [pc, #92]	; (4338 <z_impl_k_sem_take+0xd0>)
    42dc:	f004 f93c 	bl	8558 <assert_post_action>
	__asm__ volatile(
    42e0:	f385 8811 	msr	BASEPRI, r5
    42e4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    42e8:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    42ea:	b003      	add	sp, #12
    42ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    42ee:	ea56 0307 	orrs.w	r3, r6, r7
    42f2:	d113      	bne.n	431c <z_impl_k_sem_take+0xb4>
    42f4:	480f      	ldr	r0, [pc, #60]	; (4334 <z_impl_k_sem_take+0xcc>)
    42f6:	f7ff fde7 	bl	3ec8 <z_spin_unlock_valid>
    42fa:	b940      	cbnz	r0, 430e <z_impl_k_sem_take+0xa6>
    42fc:	490e      	ldr	r1, [pc, #56]	; (4338 <z_impl_k_sem_take+0xd0>)
    42fe:	480c      	ldr	r0, [pc, #48]	; (4330 <z_impl_k_sem_take+0xc8>)
    4300:	22ac      	movs	r2, #172	; 0xac
    4302:	f004 f85d 	bl	83c0 <printk>
    4306:	21ac      	movs	r1, #172	; 0xac
    4308:	480b      	ldr	r0, [pc, #44]	; (4338 <z_impl_k_sem_take+0xd0>)
    430a:	f004 f925 	bl	8558 <assert_post_action>
    430e:	f385 8811 	msr	BASEPRI, r5
    4312:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    4316:	f06f 000f 	mvn.w	r0, #15
    431a:	e7e6      	b.n	42ea <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    431c:	4622      	mov	r2, r4
    431e:	4629      	mov	r1, r5
    4320:	e9cd 6700 	strd	r6, r7, [sp]
    4324:	4803      	ldr	r0, [pc, #12]	; (4334 <z_impl_k_sem_take+0xcc>)
    4326:	f000 fa13 	bl	4750 <z_pend_curr>
	return ret;
    432a:	e7de      	b.n	42ea <z_impl_k_sem_take+0x82>
    432c:	0000a1bb 	.word	0x0000a1bb
    4330:	00009292 	.word	0x00009292
    4334:	20000c64 	.word	0x20000c64
    4338:	000092cc 	.word	0x000092cc

0000433c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    433c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    433e:	4c08      	ldr	r4, [pc, #32]	; (4360 <z_reset_time_slice+0x24>)
    4340:	6823      	ldr	r3, [r4, #0]
    4342:	b15b      	cbz	r3, 435c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    4344:	f7fd fc08 	bl	1b58 <sys_clock_elapsed>
    4348:	4603      	mov	r3, r0
    434a:	6820      	ldr	r0, [r4, #0]
    434c:	4a05      	ldr	r2, [pc, #20]	; (4364 <z_reset_time_slice+0x28>)
    434e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    4350:	2100      	movs	r1, #0
	}
}
    4352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    4356:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    4358:	f001 b8e8 	b.w	552c <z_set_timeout_expiry>
}
    435c:	bd10      	pop	{r4, pc}
    435e:	bf00      	nop
    4360:	20000c74 	.word	0x20000c74
    4364:	20000c30 	.word	0x20000c30

00004368 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    4368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    436a:	4604      	mov	r4, r0
    436c:	460d      	mov	r5, r1
	__asm__ volatile(
    436e:	f04f 0320 	mov.w	r3, #32
    4372:	f3ef 8611 	mrs	r6, BASEPRI
    4376:	f383 8811 	msr	BASEPRI, r3
    437a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    437e:	481e      	ldr	r0, [pc, #120]	; (43f8 <k_sched_time_slice_set+0x90>)
    4380:	f7ff fd94 	bl	3eac <z_spin_lock_valid>
    4384:	b940      	cbnz	r0, 4398 <k_sched_time_slice_set+0x30>
    4386:	491d      	ldr	r1, [pc, #116]	; (43fc <k_sched_time_slice_set+0x94>)
    4388:	481d      	ldr	r0, [pc, #116]	; (4400 <k_sched_time_slice_set+0x98>)
    438a:	2281      	movs	r2, #129	; 0x81
    438c:	f004 f818 	bl	83c0 <printk>
    4390:	2181      	movs	r1, #129	; 0x81
    4392:	481a      	ldr	r0, [pc, #104]	; (43fc <k_sched_time_slice_set+0x94>)
    4394:	f004 f8e0 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    4398:	4817      	ldr	r0, [pc, #92]	; (43f8 <k_sched_time_slice_set+0x90>)
    439a:	f7ff fda3 	bl	3ee4 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
    439e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    43a2:	2200      	movs	r2, #0
    43a4:	f240 30e7 	movw	r0, #999	; 0x3e7
    43a8:	2100      	movs	r1, #0
    43aa:	4b16      	ldr	r3, [pc, #88]	; (4404 <k_sched_time_slice_set+0x9c>)
    43ac:	fbe7 0104 	umlal	r0, r1, r7, r4
    43b0:	611a      	str	r2, [r3, #16]
    43b2:	2300      	movs	r3, #0
    43b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    43b8:	f7fb ff40 	bl	23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    43bc:	2c00      	cmp	r4, #0
    43be:	4b12      	ldr	r3, [pc, #72]	; (4408 <k_sched_time_slice_set+0xa0>)
    43c0:	dc16      	bgt.n	43f0 <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    43c2:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    43c4:	4b11      	ldr	r3, [pc, #68]	; (440c <k_sched_time_slice_set+0xa4>)
    43c6:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    43c8:	f7ff ffb8 	bl	433c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    43cc:	480a      	ldr	r0, [pc, #40]	; (43f8 <k_sched_time_slice_set+0x90>)
    43ce:	f7ff fd7b 	bl	3ec8 <z_spin_unlock_valid>
    43d2:	b940      	cbnz	r0, 43e6 <k_sched_time_slice_set+0x7e>
    43d4:	4909      	ldr	r1, [pc, #36]	; (43fc <k_sched_time_slice_set+0x94>)
    43d6:	480a      	ldr	r0, [pc, #40]	; (4400 <k_sched_time_slice_set+0x98>)
    43d8:	22ac      	movs	r2, #172	; 0xac
    43da:	f003 fff1 	bl	83c0 <printk>
    43de:	21ac      	movs	r1, #172	; 0xac
    43e0:	4806      	ldr	r0, [pc, #24]	; (43fc <k_sched_time_slice_set+0x94>)
    43e2:	f004 f8b9 	bl	8558 <assert_post_action>
	__asm__ volatile(
    43e6:	f386 8811 	msr	BASEPRI, r6
    43ea:	f3bf 8f6f 	isb	sy
	}
}
    43ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    43f0:	2802      	cmp	r0, #2
    43f2:	bfb8      	it	lt
    43f4:	2002      	movlt	r0, #2
    43f6:	e7e4      	b.n	43c2 <k_sched_time_slice_set+0x5a>
    43f8:	20000c6c 	.word	0x20000c6c
    43fc:	000092cc 	.word	0x000092cc
    4400:	00009292 	.word	0x00009292
    4404:	20000c30 	.word	0x20000c30
    4408:	20000c74 	.word	0x20000c74
    440c:	20000c70 	.word	0x20000c70

00004410 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    4410:	b510      	push	{r4, lr}
    4412:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4414:	460c      	mov	r4, r1
    4416:	b9c1      	cbnz	r1, 444a <z_reschedule+0x3a>
    4418:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
    441c:	b9aa      	cbnz	r2, 444a <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
    441e:	4a14      	ldr	r2, [pc, #80]	; (4470 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
    4420:	6a51      	ldr	r1, [r2, #36]	; 0x24
    4422:	6892      	ldr	r2, [r2, #8]
    4424:	4291      	cmp	r1, r2
    4426:	d010      	beq.n	444a <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4428:	f7ff fd4e 	bl	3ec8 <z_spin_unlock_valid>
    442c:	b940      	cbnz	r0, 4440 <z_reschedule+0x30>
    442e:	4911      	ldr	r1, [pc, #68]	; (4474 <z_reschedule+0x64>)
    4430:	4811      	ldr	r0, [pc, #68]	; (4478 <z_reschedule+0x68>)
    4432:	22c3      	movs	r2, #195	; 0xc3
    4434:	f003 ffc4 	bl	83c0 <printk>
    4438:	21c3      	movs	r1, #195	; 0xc3
    443a:	480e      	ldr	r0, [pc, #56]	; (4474 <z_reschedule+0x64>)
    443c:	f004 f88c 	bl	8558 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    4440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
    4444:	2000      	movs	r0, #0
    4446:	f7fd becf 	b.w	21e8 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    444a:	4618      	mov	r0, r3
    444c:	f7ff fd3c 	bl	3ec8 <z_spin_unlock_valid>
    4450:	b940      	cbnz	r0, 4464 <z_reschedule+0x54>
    4452:	4908      	ldr	r1, [pc, #32]	; (4474 <z_reschedule+0x64>)
    4454:	4808      	ldr	r0, [pc, #32]	; (4478 <z_reschedule+0x68>)
    4456:	22ac      	movs	r2, #172	; 0xac
    4458:	f003 ffb2 	bl	83c0 <printk>
    445c:	21ac      	movs	r1, #172	; 0xac
    445e:	4805      	ldr	r0, [pc, #20]	; (4474 <z_reschedule+0x64>)
    4460:	f004 f87a 	bl	8558 <assert_post_action>
    4464:	f384 8811 	msr	BASEPRI, r4
    4468:	f3bf 8f6f 	isb	sy
    446c:	bd10      	pop	{r4, pc}
    446e:	bf00      	nop
    4470:	20000c30 	.word	0x20000c30
    4474:	000092cc 	.word	0x000092cc
    4478:	00009292 	.word	0x00009292

0000447c <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    447c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    447e:	f04f 0320 	mov.w	r3, #32
    4482:	f3ef 8511 	mrs	r5, BASEPRI
    4486:	f383 8811 	msr	BASEPRI, r3
    448a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    448e:	4820      	ldr	r0, [pc, #128]	; (4510 <k_sched_lock+0x94>)
    4490:	f7ff fd0c 	bl	3eac <z_spin_lock_valid>
    4494:	b940      	cbnz	r0, 44a8 <k_sched_lock+0x2c>
    4496:	491f      	ldr	r1, [pc, #124]	; (4514 <k_sched_lock+0x98>)
    4498:	481f      	ldr	r0, [pc, #124]	; (4518 <k_sched_lock+0x9c>)
    449a:	2281      	movs	r2, #129	; 0x81
    449c:	f003 ff90 	bl	83c0 <printk>
    44a0:	2181      	movs	r1, #129	; 0x81
    44a2:	481c      	ldr	r0, [pc, #112]	; (4514 <k_sched_lock+0x98>)
    44a4:	f004 f858 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    44a8:	4819      	ldr	r0, [pc, #100]	; (4510 <k_sched_lock+0x94>)
    44aa:	f7ff fd1b 	bl	3ee4 <z_spin_lock_set_owner>
    44ae:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    44b2:	b143      	cbz	r3, 44c6 <k_sched_lock+0x4a>
    44b4:	4919      	ldr	r1, [pc, #100]	; (451c <k_sched_lock+0xa0>)
    44b6:	4818      	ldr	r0, [pc, #96]	; (4518 <k_sched_lock+0x9c>)
    44b8:	22fe      	movs	r2, #254	; 0xfe
    44ba:	f003 ff81 	bl	83c0 <printk>
    44be:	21fe      	movs	r1, #254	; 0xfe
    44c0:	4816      	ldr	r0, [pc, #88]	; (451c <k_sched_lock+0xa0>)
    44c2:	f004 f849 	bl	8558 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    44c6:	4c16      	ldr	r4, [pc, #88]	; (4520 <k_sched_lock+0xa4>)
    44c8:	68a2      	ldr	r2, [r4, #8]
    44ca:	7bd2      	ldrb	r2, [r2, #15]
    44cc:	2a01      	cmp	r2, #1
    44ce:	d108      	bne.n	44e2 <k_sched_lock+0x66>
    44d0:	4912      	ldr	r1, [pc, #72]	; (451c <k_sched_lock+0xa0>)
    44d2:	4811      	ldr	r0, [pc, #68]	; (4518 <k_sched_lock+0x9c>)
    44d4:	22ff      	movs	r2, #255	; 0xff
    44d6:	f003 ff73 	bl	83c0 <printk>
    44da:	21ff      	movs	r1, #255	; 0xff
    44dc:	480f      	ldr	r0, [pc, #60]	; (451c <k_sched_lock+0xa0>)
    44de:	f004 f83b 	bl	8558 <assert_post_action>
	--_current->base.sched_locked;
    44e2:	68a2      	ldr	r2, [r4, #8]
    44e4:	7bd3      	ldrb	r3, [r2, #15]
    44e6:	3b01      	subs	r3, #1
    44e8:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    44ea:	4809      	ldr	r0, [pc, #36]	; (4510 <k_sched_lock+0x94>)
    44ec:	f7ff fcec 	bl	3ec8 <z_spin_unlock_valid>
    44f0:	b940      	cbnz	r0, 4504 <k_sched_lock+0x88>
    44f2:	4908      	ldr	r1, [pc, #32]	; (4514 <k_sched_lock+0x98>)
    44f4:	4808      	ldr	r0, [pc, #32]	; (4518 <k_sched_lock+0x9c>)
    44f6:	22ac      	movs	r2, #172	; 0xac
    44f8:	f003 ff62 	bl	83c0 <printk>
    44fc:	21ac      	movs	r1, #172	; 0xac
    44fe:	4805      	ldr	r0, [pc, #20]	; (4514 <k_sched_lock+0x98>)
    4500:	f004 f82a 	bl	8558 <assert_post_action>
	__asm__ volatile(
    4504:	f385 8811 	msr	BASEPRI, r5
    4508:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    450c:	bd38      	pop	{r3, r4, r5, pc}
    450e:	bf00      	nop
    4510:	20000c6c 	.word	0x20000c6c
    4514:	000092cc 	.word	0x000092cc
    4518:	00009292 	.word	0x00009292
    451c:	0000a190 	.word	0x0000a190
    4520:	20000c30 	.word	0x20000c30

00004524 <z_priq_dumb_remove>:
	sys_dlist_append(pq, &thread->base.qnode_dlist);
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4524:	4b0b      	ldr	r3, [pc, #44]	; (4554 <z_priq_dumb_remove+0x30>)
{
    4526:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4528:	4299      	cmp	r1, r3
{
    452a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    452c:	d10a      	bne.n	4544 <z_priq_dumb_remove+0x20>
    452e:	490a      	ldr	r1, [pc, #40]	; (4558 <z_priq_dumb_remove+0x34>)
    4530:	480a      	ldr	r0, [pc, #40]	; (455c <z_priq_dumb_remove+0x38>)
    4532:	f44f 7271 	mov.w	r2, #964	; 0x3c4
    4536:	f003 ff43 	bl	83c0 <printk>
    453a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    453e:	4806      	ldr	r0, [pc, #24]	; (4558 <z_priq_dumb_remove+0x34>)
    4540:	f004 f80a 	bl	8558 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    4544:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    4548:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    454a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    454c:	2300      	movs	r3, #0
	node->prev = NULL;
    454e:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    4552:	bd10      	pop	{r4, pc}
    4554:	20000170 	.word	0x20000170
    4558:	0000a1db 	.word	0x0000a1db
    455c:	00009292 	.word	0x00009292

00004560 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    4560:	6883      	ldr	r3, [r0, #8]
{
    4562:	b510      	push	{r4, lr}
    4564:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    4566:	b953      	cbnz	r3, 457e <unpend_thread_no_timeout+0x1e>
    4568:	490a      	ldr	r1, [pc, #40]	; (4594 <unpend_thread_no_timeout+0x34>)
    456a:	480b      	ldr	r0, [pc, #44]	; (4598 <unpend_thread_no_timeout+0x38>)
    456c:	f240 224f 	movw	r2, #591	; 0x24f
    4570:	f003 ff26 	bl	83c0 <printk>
    4574:	f240 214f 	movw	r1, #591	; 0x24f
    4578:	4806      	ldr	r0, [pc, #24]	; (4594 <unpend_thread_no_timeout+0x34>)
    457a:	f003 ffed 	bl	8558 <assert_post_action>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    457e:	4621      	mov	r1, r4
    4580:	68a0      	ldr	r0, [r4, #8]
    4582:	f7ff ffcf 	bl	4524 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4586:	7b63      	ldrb	r3, [r4, #13]
    4588:	f023 0302 	bic.w	r3, r3, #2
    458c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    458e:	2300      	movs	r3, #0
    4590:	60a3      	str	r3, [r4, #8]
}
    4592:	bd10      	pop	{r4, pc}
    4594:	0000a1db 	.word	0x0000a1db
    4598:	00009292 	.word	0x00009292

0000459c <update_cache>:
{
    459c:	b538      	push	{r3, r4, r5, lr}
    459e:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    45a0:	4812      	ldr	r0, [pc, #72]	; (45ec <update_cache+0x50>)
    45a2:	f004 faba 	bl	8b1a <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    45a6:	4d12      	ldr	r5, [pc, #72]	; (45f0 <update_cache+0x54>)
    45a8:	4604      	mov	r4, r0
    45aa:	b900      	cbnz	r0, 45ae <update_cache+0x12>
    45ac:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    45ae:	b9aa      	cbnz	r2, 45dc <update_cache+0x40>
	__ASSERT(_current != NULL, "");
    45b0:	68ab      	ldr	r3, [r5, #8]
    45b2:	b943      	cbnz	r3, 45c6 <update_cache+0x2a>
    45b4:	490f      	ldr	r1, [pc, #60]	; (45f4 <update_cache+0x58>)
    45b6:	4810      	ldr	r0, [pc, #64]	; (45f8 <update_cache+0x5c>)
    45b8:	2285      	movs	r2, #133	; 0x85
    45ba:	f003 ff01 	bl	83c0 <printk>
    45be:	2185      	movs	r1, #133	; 0x85
    45c0:	480c      	ldr	r0, [pc, #48]	; (45f4 <update_cache+0x58>)
    45c2:	f003 ffc9 	bl	8558 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    45c6:	68ab      	ldr	r3, [r5, #8]
    45c8:	7b5a      	ldrb	r2, [r3, #13]
    45ca:	06d2      	lsls	r2, r2, #27
    45cc:	d106      	bne.n	45dc <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    45ce:	69a2      	ldr	r2, [r4, #24]
    45d0:	b922      	cbnz	r2, 45dc <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
    45d2:	89da      	ldrh	r2, [r3, #14]
    45d4:	2a7f      	cmp	r2, #127	; 0x7f
    45d6:	d901      	bls.n	45dc <update_cache+0x40>
		_kernel.ready_q.cache = _current;
    45d8:	626b      	str	r3, [r5, #36]	; 0x24
}
    45da:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    45dc:	68ab      	ldr	r3, [r5, #8]
    45de:	42a3      	cmp	r3, r4
    45e0:	d001      	beq.n	45e6 <update_cache+0x4a>
			z_reset_time_slice();
    45e2:	f7ff feab 	bl	433c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    45e6:	626c      	str	r4, [r5, #36]	; 0x24
}
    45e8:	e7f7      	b.n	45da <update_cache+0x3e>
    45ea:	bf00      	nop
    45ec:	20000c58 	.word	0x20000c58
    45f0:	20000c30 	.word	0x20000c30
    45f4:	0000a1db 	.word	0x0000a1db
    45f8:	00009292 	.word	0x00009292

000045fc <unready_thread>:
{
    45fc:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    45fe:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    4602:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    4604:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    4606:	7b43      	ldrb	r3, [r0, #13]
    4608:	da06      	bge.n	4618 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    460a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
    460e:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4610:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    4612:	4806      	ldr	r0, [pc, #24]	; (462c <unready_thread+0x30>)
    4614:	f7ff ff86 	bl	4524 <z_priq_dumb_remove>
	update_cache(thread == _current);
    4618:	4b05      	ldr	r3, [pc, #20]	; (4630 <unready_thread+0x34>)
    461a:	6898      	ldr	r0, [r3, #8]
    461c:	1b03      	subs	r3, r0, r4
    461e:	4258      	negs	r0, r3
    4620:	4158      	adcs	r0, r3
}
    4622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    4626:	f7ff bfb9 	b.w	459c <update_cache>
    462a:	bf00      	nop
    462c:	20000c58 	.word	0x20000c58
    4630:	20000c30 	.word	0x20000c30

00004634 <add_to_waitq_locked>:
{
    4634:	b538      	push	{r3, r4, r5, lr}
    4636:	4604      	mov	r4, r0
    4638:	460d      	mov	r5, r1
	unready_thread(thread);
    463a:	f7ff ffdf 	bl	45fc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    463e:	7b63      	ldrb	r3, [r4, #13]
    4640:	f043 0302 	orr.w	r3, r3, #2
    4644:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4646:	b325      	cbz	r5, 4692 <add_to_waitq_locked+0x5e>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4648:	4b18      	ldr	r3, [pc, #96]	; (46ac <add_to_waitq_locked+0x78>)
		thread->base.pended_on = wait_q;
    464a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    464c:	429c      	cmp	r4, r3
    464e:	d10a      	bne.n	4666 <add_to_waitq_locked+0x32>
    4650:	4917      	ldr	r1, [pc, #92]	; (46b0 <add_to_waitq_locked+0x7c>)
    4652:	4818      	ldr	r0, [pc, #96]	; (46b4 <add_to_waitq_locked+0x80>)
    4654:	f240 32b5 	movw	r2, #949	; 0x3b5
    4658:	f003 feb2 	bl	83c0 <printk>
    465c:	f240 31b5 	movw	r1, #949	; 0x3b5
    4660:	4813      	ldr	r0, [pc, #76]	; (46b0 <add_to_waitq_locked+0x7c>)
    4662:	f003 ff79 	bl	8558 <assert_post_action>
	return list->head == list;
    4666:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4668:	429d      	cmp	r5, r3
    466a:	bf08      	it	eq
    466c:	2300      	moveq	r3, #0
    466e:	2b00      	cmp	r3, #0
    4670:	bf38      	it	cc
    4672:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4674:	b19b      	cbz	r3, 469e <add_to_waitq_locked+0x6a>
	int32_t b1 = thread_1->base.prio;
    4676:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    467a:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    467e:	4291      	cmp	r1, r2
    4680:	d008      	beq.n	4694 <add_to_waitq_locked+0x60>
		return b2 - b1;
    4682:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    4684:	2a00      	cmp	r2, #0
    4686:	dd05      	ble.n	4694 <add_to_waitq_locked+0x60>
	sys_dnode_t *const prev = successor->prev;
    4688:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    468a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    468e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4690:	605c      	str	r4, [r3, #4]
}
    4692:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    4694:	686a      	ldr	r2, [r5, #4]
    4696:	4293      	cmp	r3, r2
    4698:	d001      	beq.n	469e <add_to_waitq_locked+0x6a>
    469a:	681b      	ldr	r3, [r3, #0]
    469c:	e7ea      	b.n	4674 <add_to_waitq_locked+0x40>
	sys_dnode_t *const tail = list->tail;
    469e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    46a0:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    46a4:	601c      	str	r4, [r3, #0]
	list->tail = node;
    46a6:	606c      	str	r4, [r5, #4]
    46a8:	e7f3      	b.n	4692 <add_to_waitq_locked+0x5e>
    46aa:	bf00      	nop
    46ac:	20000170 	.word	0x20000170
    46b0:	0000a1db 	.word	0x0000a1db
    46b4:	00009292 	.word	0x00009292

000046b8 <pend>:
{
    46b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    46bc:	4604      	mov	r4, r0
    46be:	460d      	mov	r5, r1
    46c0:	4616      	mov	r6, r2
    46c2:	461f      	mov	r7, r3
	__asm__ volatile(
    46c4:	f04f 0320 	mov.w	r3, #32
    46c8:	f3ef 8811 	mrs	r8, BASEPRI
    46cc:	f383 8811 	msr	BASEPRI, r3
    46d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    46d4:	481a      	ldr	r0, [pc, #104]	; (4740 <pend+0x88>)
    46d6:	f7ff fbe9 	bl	3eac <z_spin_lock_valid>
    46da:	b940      	cbnz	r0, 46ee <pend+0x36>
    46dc:	4919      	ldr	r1, [pc, #100]	; (4744 <pend+0x8c>)
    46de:	481a      	ldr	r0, [pc, #104]	; (4748 <pend+0x90>)
    46e0:	2281      	movs	r2, #129	; 0x81
    46e2:	f003 fe6d 	bl	83c0 <printk>
    46e6:	2181      	movs	r1, #129	; 0x81
    46e8:	4816      	ldr	r0, [pc, #88]	; (4744 <pend+0x8c>)
    46ea:	f003 ff35 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    46ee:	4814      	ldr	r0, [pc, #80]	; (4740 <pend+0x88>)
    46f0:	f7ff fbf8 	bl	3ee4 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    46f4:	4620      	mov	r0, r4
    46f6:	4629      	mov	r1, r5
    46f8:	f7ff ff9c 	bl	4634 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    46fc:	4810      	ldr	r0, [pc, #64]	; (4740 <pend+0x88>)
    46fe:	f7ff fbe3 	bl	3ec8 <z_spin_unlock_valid>
    4702:	b940      	cbnz	r0, 4716 <pend+0x5e>
    4704:	490f      	ldr	r1, [pc, #60]	; (4744 <pend+0x8c>)
    4706:	4810      	ldr	r0, [pc, #64]	; (4748 <pend+0x90>)
    4708:	22ac      	movs	r2, #172	; 0xac
    470a:	f003 fe59 	bl	83c0 <printk>
    470e:	21ac      	movs	r1, #172	; 0xac
    4710:	480c      	ldr	r0, [pc, #48]	; (4744 <pend+0x8c>)
    4712:	f003 ff21 	bl	8558 <assert_post_action>
	__asm__ volatile(
    4716:	f388 8811 	msr	BASEPRI, r8
    471a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    471e:	1c7b      	adds	r3, r7, #1
    4720:	bf08      	it	eq
    4722:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    4726:	d008      	beq.n	473a <pend+0x82>
    4728:	4632      	mov	r2, r6
    472a:	463b      	mov	r3, r7
    472c:	f104 0018 	add.w	r0, r4, #24
    4730:	4906      	ldr	r1, [pc, #24]	; (474c <pend+0x94>)
}
    4732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4736:	f000 bdcd 	b.w	52d4 <z_add_timeout>
    473a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    473e:	bf00      	nop
    4740:	20000c6c 	.word	0x20000c6c
    4744:	000092cc 	.word	0x000092cc
    4748:	00009292 	.word	0x00009292
    474c:	00004c0d 	.word	0x00004c0d

00004750 <z_pend_curr>:
{
    4750:	b538      	push	{r3, r4, r5, lr}
    4752:	4605      	mov	r5, r0
	pending_current = _current;
    4754:	4b0d      	ldr	r3, [pc, #52]	; (478c <z_pend_curr+0x3c>)
{
    4756:	460c      	mov	r4, r1
	pending_current = _current;
    4758:	6898      	ldr	r0, [r3, #8]
    475a:	4b0d      	ldr	r3, [pc, #52]	; (4790 <z_pend_curr+0x40>)
{
    475c:	4611      	mov	r1, r2
	pending_current = _current;
    475e:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    4760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    4764:	f7ff ffa8 	bl	46b8 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4768:	4628      	mov	r0, r5
    476a:	f7ff fbad 	bl	3ec8 <z_spin_unlock_valid>
    476e:	b940      	cbnz	r0, 4782 <z_pend_curr+0x32>
    4770:	4908      	ldr	r1, [pc, #32]	; (4794 <z_pend_curr+0x44>)
    4772:	4809      	ldr	r0, [pc, #36]	; (4798 <z_pend_curr+0x48>)
    4774:	22c3      	movs	r2, #195	; 0xc3
    4776:	f003 fe23 	bl	83c0 <printk>
    477a:	21c3      	movs	r1, #195	; 0xc3
    477c:	4805      	ldr	r0, [pc, #20]	; (4794 <z_pend_curr+0x44>)
    477e:	f003 feeb 	bl	8558 <assert_post_action>
    4782:	4620      	mov	r0, r4
}
    4784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4788:	f7fd bd2e 	b.w	21e8 <arch_swap>
    478c:	20000c30 	.word	0x20000c30
    4790:	20000c68 	.word	0x20000c68
    4794:	000092cc 	.word	0x000092cc
    4798:	00009292 	.word	0x00009292

0000479c <z_impl_k_thread_suspend>:
{
    479c:	b570      	push	{r4, r5, r6, lr}
    479e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    47a0:	3018      	adds	r0, #24
    47a2:	f000 fe51 	bl	5448 <z_abort_timeout>
	__asm__ volatile(
    47a6:	f04f 0320 	mov.w	r3, #32
    47aa:	f3ef 8611 	mrs	r6, BASEPRI
    47ae:	f383 8811 	msr	BASEPRI, r3
    47b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    47b6:	4820      	ldr	r0, [pc, #128]	; (4838 <z_impl_k_thread_suspend+0x9c>)
    47b8:	f7ff fb78 	bl	3eac <z_spin_lock_valid>
    47bc:	b940      	cbnz	r0, 47d0 <z_impl_k_thread_suspend+0x34>
    47be:	491f      	ldr	r1, [pc, #124]	; (483c <z_impl_k_thread_suspend+0xa0>)
    47c0:	481f      	ldr	r0, [pc, #124]	; (4840 <z_impl_k_thread_suspend+0xa4>)
    47c2:	2281      	movs	r2, #129	; 0x81
    47c4:	f003 fdfc 	bl	83c0 <printk>
    47c8:	2181      	movs	r1, #129	; 0x81
    47ca:	481c      	ldr	r0, [pc, #112]	; (483c <z_impl_k_thread_suspend+0xa0>)
    47cc:	f003 fec4 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    47d0:	4819      	ldr	r0, [pc, #100]	; (4838 <z_impl_k_thread_suspend+0x9c>)
    47d2:	f7ff fb87 	bl	3ee4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    47d6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    47da:	7b63      	ldrb	r3, [r4, #13]
    47dc:	2a00      	cmp	r2, #0
    47de:	da06      	bge.n	47ee <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    47e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
    47e4:	4621      	mov	r1, r4
    47e6:	4817      	ldr	r0, [pc, #92]	; (4844 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    47e8:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    47ea:	f7ff fe9b 	bl	4524 <z_priq_dumb_remove>
		update_cache(thread == _current);
    47ee:	4d16      	ldr	r5, [pc, #88]	; (4848 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    47f0:	7b63      	ldrb	r3, [r4, #13]
    47f2:	68a8      	ldr	r0, [r5, #8]
    47f4:	f043 0310 	orr.w	r3, r3, #16
    47f8:	7363      	strb	r3, [r4, #13]
    47fa:	1b03      	subs	r3, r0, r4
    47fc:	4258      	negs	r0, r3
    47fe:	4158      	adcs	r0, r3
    4800:	f7ff fecc 	bl	459c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4804:	480c      	ldr	r0, [pc, #48]	; (4838 <z_impl_k_thread_suspend+0x9c>)
    4806:	f7ff fb5f 	bl	3ec8 <z_spin_unlock_valid>
    480a:	b940      	cbnz	r0, 481e <z_impl_k_thread_suspend+0x82>
    480c:	490b      	ldr	r1, [pc, #44]	; (483c <z_impl_k_thread_suspend+0xa0>)
    480e:	480c      	ldr	r0, [pc, #48]	; (4840 <z_impl_k_thread_suspend+0xa4>)
    4810:	22ac      	movs	r2, #172	; 0xac
    4812:	f003 fdd5 	bl	83c0 <printk>
    4816:	21ac      	movs	r1, #172	; 0xac
    4818:	4808      	ldr	r0, [pc, #32]	; (483c <z_impl_k_thread_suspend+0xa0>)
    481a:	f003 fe9d 	bl	8558 <assert_post_action>
	__asm__ volatile(
    481e:	f386 8811 	msr	BASEPRI, r6
    4822:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    4826:	68ab      	ldr	r3, [r5, #8]
    4828:	42a3      	cmp	r3, r4
    482a:	d103      	bne.n	4834 <z_impl_k_thread_suspend+0x98>
}
    482c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    4830:	f004 b969 	b.w	8b06 <z_reschedule_unlocked>
}
    4834:	bd70      	pop	{r4, r5, r6, pc}
    4836:	bf00      	nop
    4838:	20000c6c 	.word	0x20000c6c
    483c:	000092cc 	.word	0x000092cc
    4840:	00009292 	.word	0x00009292
    4844:	20000c58 	.word	0x20000c58
    4848:	20000c30 	.word	0x20000c30

0000484c <k_sched_unlock>:
{
    484c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    484e:	f04f 0320 	mov.w	r3, #32
    4852:	f3ef 8511 	mrs	r5, BASEPRI
    4856:	f383 8811 	msr	BASEPRI, r3
    485a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    485e:	4824      	ldr	r0, [pc, #144]	; (48f0 <k_sched_unlock+0xa4>)
    4860:	f7ff fb24 	bl	3eac <z_spin_lock_valid>
    4864:	b940      	cbnz	r0, 4878 <k_sched_unlock+0x2c>
    4866:	4923      	ldr	r1, [pc, #140]	; (48f4 <k_sched_unlock+0xa8>)
    4868:	4823      	ldr	r0, [pc, #140]	; (48f8 <k_sched_unlock+0xac>)
    486a:	2281      	movs	r2, #129	; 0x81
    486c:	f003 fda8 	bl	83c0 <printk>
    4870:	2181      	movs	r1, #129	; 0x81
    4872:	4820      	ldr	r0, [pc, #128]	; (48f4 <k_sched_unlock+0xa8>)
    4874:	f003 fe70 	bl	8558 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    4878:	4c20      	ldr	r4, [pc, #128]	; (48fc <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
    487a:	481d      	ldr	r0, [pc, #116]	; (48f0 <k_sched_unlock+0xa4>)
    487c:	f7ff fb32 	bl	3ee4 <z_spin_lock_set_owner>
    4880:	68a2      	ldr	r2, [r4, #8]
    4882:	7bd2      	ldrb	r2, [r2, #15]
    4884:	b952      	cbnz	r2, 489c <k_sched_unlock+0x50>
    4886:	491e      	ldr	r1, [pc, #120]	; (4900 <k_sched_unlock+0xb4>)
    4888:	481b      	ldr	r0, [pc, #108]	; (48f8 <k_sched_unlock+0xac>)
    488a:	f240 3252 	movw	r2, #850	; 0x352
    488e:	f003 fd97 	bl	83c0 <printk>
    4892:	f240 3152 	movw	r1, #850	; 0x352
    4896:	481a      	ldr	r0, [pc, #104]	; (4900 <k_sched_unlock+0xb4>)
    4898:	f003 fe5e 	bl	8558 <assert_post_action>
    489c:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    48a0:	b153      	cbz	r3, 48b8 <k_sched_unlock+0x6c>
    48a2:	4917      	ldr	r1, [pc, #92]	; (4900 <k_sched_unlock+0xb4>)
    48a4:	4814      	ldr	r0, [pc, #80]	; (48f8 <k_sched_unlock+0xac>)
    48a6:	f240 3253 	movw	r2, #851	; 0x353
    48aa:	f003 fd89 	bl	83c0 <printk>
    48ae:	f240 3153 	movw	r1, #851	; 0x353
    48b2:	4813      	ldr	r0, [pc, #76]	; (4900 <k_sched_unlock+0xb4>)
    48b4:	f003 fe50 	bl	8558 <assert_post_action>
		++_current->base.sched_locked;
    48b8:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
    48ba:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    48bc:	7bd3      	ldrb	r3, [r2, #15]
    48be:	3301      	adds	r3, #1
    48c0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    48c2:	f7ff fe6b 	bl	459c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    48c6:	480a      	ldr	r0, [pc, #40]	; (48f0 <k_sched_unlock+0xa4>)
    48c8:	f7ff fafe 	bl	3ec8 <z_spin_unlock_valid>
    48cc:	b940      	cbnz	r0, 48e0 <k_sched_unlock+0x94>
    48ce:	4909      	ldr	r1, [pc, #36]	; (48f4 <k_sched_unlock+0xa8>)
    48d0:	4809      	ldr	r0, [pc, #36]	; (48f8 <k_sched_unlock+0xac>)
    48d2:	22ac      	movs	r2, #172	; 0xac
    48d4:	f003 fd74 	bl	83c0 <printk>
    48d8:	21ac      	movs	r1, #172	; 0xac
    48da:	4806      	ldr	r0, [pc, #24]	; (48f4 <k_sched_unlock+0xa8>)
    48dc:	f003 fe3c 	bl	8558 <assert_post_action>
	__asm__ volatile(
    48e0:	f385 8811 	msr	BASEPRI, r5
    48e4:	f3bf 8f6f 	isb	sy
}
    48e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    48ec:	f004 b90b 	b.w	8b06 <z_reschedule_unlocked>
    48f0:	20000c6c 	.word	0x20000c6c
    48f4:	000092cc 	.word	0x000092cc
    48f8:	00009292 	.word	0x00009292
    48fc:	20000c30 	.word	0x20000c30
    4900:	0000a1db 	.word	0x0000a1db

00004904 <move_thread_to_end_of_prio_q>:
{
    4904:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    4906:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    490a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    490c:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    490e:	7b43      	ldrb	r3, [r0, #13]
    4910:	da06      	bge.n	4920 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
    4916:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4918:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    491a:	4820      	ldr	r0, [pc, #128]	; (499c <move_thread_to_end_of_prio_q+0x98>)
    491c:	f7ff fe02 	bl	4524 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4920:	7b63      	ldrb	r3, [r4, #13]
    4922:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4926:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4928:	4b1d      	ldr	r3, [pc, #116]	; (49a0 <move_thread_to_end_of_prio_q+0x9c>)
    492a:	429c      	cmp	r4, r3
    492c:	d10a      	bne.n	4944 <move_thread_to_end_of_prio_q+0x40>
    492e:	491d      	ldr	r1, [pc, #116]	; (49a4 <move_thread_to_end_of_prio_q+0xa0>)
    4930:	481d      	ldr	r0, [pc, #116]	; (49a8 <move_thread_to_end_of_prio_q+0xa4>)
    4932:	f240 32b5 	movw	r2, #949	; 0x3b5
    4936:	f003 fd43 	bl	83c0 <printk>
    493a:	f240 31b5 	movw	r1, #949	; 0x3b5
    493e:	4819      	ldr	r0, [pc, #100]	; (49a4 <move_thread_to_end_of_prio_q+0xa0>)
    4940:	f003 fe0a 	bl	8558 <assert_post_action>
	return list->head == list;
    4944:	4a19      	ldr	r2, [pc, #100]	; (49ac <move_thread_to_end_of_prio_q+0xa8>)
    4946:	4611      	mov	r1, r2
    4948:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    494c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    494e:	428b      	cmp	r3, r1
    4950:	bf08      	it	eq
    4952:	2300      	moveq	r3, #0
    4954:	2b00      	cmp	r3, #0
    4956:	bf38      	it	cc
    4958:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    495a:	b1cb      	cbz	r3, 4990 <move_thread_to_end_of_prio_q+0x8c>
	int32_t b1 = thread_1->base.prio;
    495c:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4960:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    4964:	4286      	cmp	r6, r0
    4966:	d00f      	beq.n	4988 <move_thread_to_end_of_prio_q+0x84>
		return b2 - b1;
    4968:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    496a:	2800      	cmp	r0, #0
    496c:	dd0c      	ble.n	4988 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
    496e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    4970:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    4974:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    4976:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    4978:	6890      	ldr	r0, [r2, #8]
    497a:	1b03      	subs	r3, r0, r4
    497c:	4258      	negs	r0, r3
    497e:	4158      	adcs	r0, r3
}
    4980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    4984:	f7ff be0a 	b.w	459c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4988:	42ab      	cmp	r3, r5
    498a:	d001      	beq.n	4990 <move_thread_to_end_of_prio_q+0x8c>
    498c:	681b      	ldr	r3, [r3, #0]
    498e:	e7e4      	b.n	495a <move_thread_to_end_of_prio_q+0x56>
	node->prev = tail;
    4990:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    4994:	602c      	str	r4, [r5, #0]
	list->tail = node;
    4996:	62d4      	str	r4, [r2, #44]	; 0x2c
}
    4998:	e7ee      	b.n	4978 <move_thread_to_end_of_prio_q+0x74>
    499a:	bf00      	nop
    499c:	20000c58 	.word	0x20000c58
    49a0:	20000170 	.word	0x20000170
    49a4:	0000a1db 	.word	0x0000a1db
    49a8:	00009292 	.word	0x00009292
    49ac:	20000c30 	.word	0x20000c30

000049b0 <z_time_slice>:
{
    49b0:	b570      	push	{r4, r5, r6, lr}
    49b2:	4604      	mov	r4, r0
	__asm__ volatile(
    49b4:	f04f 0320 	mov.w	r3, #32
    49b8:	f3ef 8511 	mrs	r5, BASEPRI
    49bc:	f383 8811 	msr	BASEPRI, r3
    49c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    49c4:	4825      	ldr	r0, [pc, #148]	; (4a5c <z_time_slice+0xac>)
    49c6:	f7ff fa71 	bl	3eac <z_spin_lock_valid>
    49ca:	b940      	cbnz	r0, 49de <z_time_slice+0x2e>
    49cc:	4924      	ldr	r1, [pc, #144]	; (4a60 <z_time_slice+0xb0>)
    49ce:	4825      	ldr	r0, [pc, #148]	; (4a64 <z_time_slice+0xb4>)
    49d0:	2281      	movs	r2, #129	; 0x81
    49d2:	f003 fcf5 	bl	83c0 <printk>
    49d6:	2181      	movs	r1, #129	; 0x81
    49d8:	4821      	ldr	r0, [pc, #132]	; (4a60 <z_time_slice+0xb0>)
    49da:	f003 fdbd 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    49de:	481f      	ldr	r0, [pc, #124]	; (4a5c <z_time_slice+0xac>)
    49e0:	f7ff fa80 	bl	3ee4 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    49e4:	4b20      	ldr	r3, [pc, #128]	; (4a68 <z_time_slice+0xb8>)
    49e6:	4a21      	ldr	r2, [pc, #132]	; (4a6c <z_time_slice+0xbc>)
    49e8:	6898      	ldr	r0, [r3, #8]
    49ea:	6811      	ldr	r1, [r2, #0]
    49ec:	4288      	cmp	r0, r1
    49ee:	4619      	mov	r1, r3
    49f0:	d113      	bne.n	4a1a <z_time_slice+0x6a>
			z_reset_time_slice();
    49f2:	f7ff fca3 	bl	433c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    49f6:	4819      	ldr	r0, [pc, #100]	; (4a5c <z_time_slice+0xac>)
    49f8:	f7ff fa66 	bl	3ec8 <z_spin_unlock_valid>
    49fc:	b940      	cbnz	r0, 4a10 <z_time_slice+0x60>
    49fe:	4918      	ldr	r1, [pc, #96]	; (4a60 <z_time_slice+0xb0>)
    4a00:	4818      	ldr	r0, [pc, #96]	; (4a64 <z_time_slice+0xb4>)
    4a02:	22ac      	movs	r2, #172	; 0xac
    4a04:	f003 fcdc 	bl	83c0 <printk>
    4a08:	21ac      	movs	r1, #172	; 0xac
    4a0a:	4815      	ldr	r0, [pc, #84]	; (4a60 <z_time_slice+0xb0>)
    4a0c:	f003 fda4 	bl	8558 <assert_post_action>
	__asm__ volatile(
    4a10:	f385 8811 	msr	BASEPRI, r5
    4a14:	f3bf 8f6f 	isb	sy
}
    4a18:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    4a1a:	2600      	movs	r6, #0
    4a1c:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4a1e:	4a14      	ldr	r2, [pc, #80]	; (4a70 <z_time_slice+0xc0>)
    4a20:	6812      	ldr	r2, [r2, #0]
    4a22:	b1ba      	cbz	r2, 4a54 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
    4a24:	89c2      	ldrh	r2, [r0, #14]
    4a26:	2a7f      	cmp	r2, #127	; 0x7f
    4a28:	d814      	bhi.n	4a54 <z_time_slice+0xa4>
		&& !z_is_thread_prevented_from_running(thread)
    4a2a:	7b42      	ldrb	r2, [r0, #13]
    4a2c:	06d2      	lsls	r2, r2, #27
    4a2e:	d111      	bne.n	4a54 <z_time_slice+0xa4>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4a30:	4a10      	ldr	r2, [pc, #64]	; (4a74 <z_time_slice+0xc4>)
    4a32:	f990 600e 	ldrsb.w	r6, [r0, #14]
    4a36:	6812      	ldr	r2, [r2, #0]
    4a38:	4296      	cmp	r6, r2
    4a3a:	db0b      	blt.n	4a54 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
    4a3c:	4a0e      	ldr	r2, [pc, #56]	; (4a78 <z_time_slice+0xc8>)
    4a3e:	4290      	cmp	r0, r2
    4a40:	d008      	beq.n	4a54 <z_time_slice+0xa4>
		if (ticks >= _current_cpu->slice_ticks) {
    4a42:	691a      	ldr	r2, [r3, #16]
    4a44:	42a2      	cmp	r2, r4
    4a46:	dc02      	bgt.n	4a4e <z_time_slice+0x9e>
			move_thread_to_end_of_prio_q(_current);
    4a48:	f7ff ff5c 	bl	4904 <move_thread_to_end_of_prio_q>
    4a4c:	e7d1      	b.n	49f2 <z_time_slice+0x42>
			_current_cpu->slice_ticks -= ticks;
    4a4e:	1b12      	subs	r2, r2, r4
    4a50:	611a      	str	r2, [r3, #16]
    4a52:	e7d0      	b.n	49f6 <z_time_slice+0x46>
		_current_cpu->slice_ticks = 0;
    4a54:	2300      	movs	r3, #0
    4a56:	610b      	str	r3, [r1, #16]
    4a58:	e7cd      	b.n	49f6 <z_time_slice+0x46>
    4a5a:	bf00      	nop
    4a5c:	20000c6c 	.word	0x20000c6c
    4a60:	000092cc 	.word	0x000092cc
    4a64:	00009292 	.word	0x00009292
    4a68:	20000c30 	.word	0x20000c30
    4a6c:	20000c68 	.word	0x20000c68
    4a70:	20000c74 	.word	0x20000c74
    4a74:	20000c70 	.word	0x20000c70
    4a78:	20000170 	.word	0x20000170

00004a7c <ready_thread>:
{
    4a7c:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4a7e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    4a82:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4a84:	2a00      	cmp	r2, #0
    4a86:	7b43      	ldrb	r3, [r0, #13]
    4a88:	db3f      	blt.n	4b0a <ready_thread+0x8e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4a8a:	06da      	lsls	r2, r3, #27
    4a8c:	d13d      	bne.n	4b0a <ready_thread+0x8e>
	return !sys_dnode_is_linked(&to->node);
    4a8e:	6985      	ldr	r5, [r0, #24]
    4a90:	2d00      	cmp	r5, #0
    4a92:	d13a      	bne.n	4b0a <ready_thread+0x8e>
	thread->base.thread_state |= _THREAD_QUEUED;
    4a94:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4a98:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4a9a:	4b1c      	ldr	r3, [pc, #112]	; (4b0c <ready_thread+0x90>)
    4a9c:	4298      	cmp	r0, r3
    4a9e:	d10a      	bne.n	4ab6 <ready_thread+0x3a>
    4aa0:	491b      	ldr	r1, [pc, #108]	; (4b10 <ready_thread+0x94>)
    4aa2:	481c      	ldr	r0, [pc, #112]	; (4b14 <ready_thread+0x98>)
    4aa4:	f240 32b5 	movw	r2, #949	; 0x3b5
    4aa8:	f003 fc8a 	bl	83c0 <printk>
    4aac:	f240 31b5 	movw	r1, #949	; 0x3b5
    4ab0:	4817      	ldr	r0, [pc, #92]	; (4b10 <ready_thread+0x94>)
    4ab2:	f003 fd51 	bl	8558 <assert_post_action>
	return list->head == list;
    4ab6:	4918      	ldr	r1, [pc, #96]	; (4b18 <ready_thread+0x9c>)
    4ab8:	460b      	mov	r3, r1
    4aba:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4abe:	4298      	cmp	r0, r3
    4ac0:	bf18      	it	ne
    4ac2:	4605      	movne	r5, r0
    4ac4:	2d00      	cmp	r5, #0
    4ac6:	461a      	mov	r2, r3
    4ac8:	462b      	mov	r3, r5
    4aca:	bf38      	it	cc
    4acc:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4ace:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4ad0:	b1b3      	cbz	r3, 4b00 <ready_thread+0x84>
	int32_t b1 = thread_1->base.prio;
    4ad2:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4ad6:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    4ada:	4286      	cmp	r6, r0
    4adc:	d00c      	beq.n	4af8 <ready_thread+0x7c>
		return b2 - b1;
    4ade:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4ae0:	2800      	cmp	r0, #0
    4ae2:	dd09      	ble.n	4af8 <ready_thread+0x7c>
	sys_dnode_t *const prev = successor->prev;
    4ae4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4ae6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4aea:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4aec:	605c      	str	r4, [r3, #4]
		update_cache(0);
    4aee:	2000      	movs	r0, #0
}
    4af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    4af4:	f7ff bd52 	b.w	459c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4af8:	42ab      	cmp	r3, r5
    4afa:	d001      	beq.n	4b00 <ready_thread+0x84>
    4afc:	681b      	ldr	r3, [r3, #0]
    4afe:	e7e7      	b.n	4ad0 <ready_thread+0x54>
	node->prev = tail;
    4b00:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    4b04:	602c      	str	r4, [r5, #0]
	list->tail = node;
    4b06:	62cc      	str	r4, [r1, #44]	; 0x2c
}
    4b08:	e7f1      	b.n	4aee <ready_thread+0x72>
}
    4b0a:	bd70      	pop	{r4, r5, r6, pc}
    4b0c:	20000170 	.word	0x20000170
    4b10:	0000a1db 	.word	0x0000a1db
    4b14:	00009292 	.word	0x00009292
    4b18:	20000c30 	.word	0x20000c30

00004b1c <z_ready_thread>:
{
    4b1c:	b538      	push	{r3, r4, r5, lr}
    4b1e:	4604      	mov	r4, r0
	__asm__ volatile(
    4b20:	f04f 0320 	mov.w	r3, #32
    4b24:	f3ef 8511 	mrs	r5, BASEPRI
    4b28:	f383 8811 	msr	BASEPRI, r3
    4b2c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4b30:	4812      	ldr	r0, [pc, #72]	; (4b7c <z_ready_thread+0x60>)
    4b32:	f7ff f9bb 	bl	3eac <z_spin_lock_valid>
    4b36:	b940      	cbnz	r0, 4b4a <z_ready_thread+0x2e>
    4b38:	4911      	ldr	r1, [pc, #68]	; (4b80 <z_ready_thread+0x64>)
    4b3a:	4812      	ldr	r0, [pc, #72]	; (4b84 <z_ready_thread+0x68>)
    4b3c:	2281      	movs	r2, #129	; 0x81
    4b3e:	f003 fc3f 	bl	83c0 <printk>
    4b42:	2181      	movs	r1, #129	; 0x81
    4b44:	480e      	ldr	r0, [pc, #56]	; (4b80 <z_ready_thread+0x64>)
    4b46:	f003 fd07 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    4b4a:	480c      	ldr	r0, [pc, #48]	; (4b7c <z_ready_thread+0x60>)
    4b4c:	f7ff f9ca 	bl	3ee4 <z_spin_lock_set_owner>
			ready_thread(thread);
    4b50:	4620      	mov	r0, r4
    4b52:	f7ff ff93 	bl	4a7c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4b56:	4809      	ldr	r0, [pc, #36]	; (4b7c <z_ready_thread+0x60>)
    4b58:	f7ff f9b6 	bl	3ec8 <z_spin_unlock_valid>
    4b5c:	b940      	cbnz	r0, 4b70 <z_ready_thread+0x54>
    4b5e:	4908      	ldr	r1, [pc, #32]	; (4b80 <z_ready_thread+0x64>)
    4b60:	4808      	ldr	r0, [pc, #32]	; (4b84 <z_ready_thread+0x68>)
    4b62:	22ac      	movs	r2, #172	; 0xac
    4b64:	f003 fc2c 	bl	83c0 <printk>
    4b68:	21ac      	movs	r1, #172	; 0xac
    4b6a:	4805      	ldr	r0, [pc, #20]	; (4b80 <z_ready_thread+0x64>)
    4b6c:	f003 fcf4 	bl	8558 <assert_post_action>
	__asm__ volatile(
    4b70:	f385 8811 	msr	BASEPRI, r5
    4b74:	f3bf 8f6f 	isb	sy
}
    4b78:	bd38      	pop	{r3, r4, r5, pc}
    4b7a:	bf00      	nop
    4b7c:	20000c6c 	.word	0x20000c6c
    4b80:	000092cc 	.word	0x000092cc
    4b84:	00009292 	.word	0x00009292

00004b88 <z_sched_start>:
{
    4b88:	b538      	push	{r3, r4, r5, lr}
    4b8a:	4604      	mov	r4, r0
	__asm__ volatile(
    4b8c:	f04f 0320 	mov.w	r3, #32
    4b90:	f3ef 8511 	mrs	r5, BASEPRI
    4b94:	f383 8811 	msr	BASEPRI, r3
    4b98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4b9c:	4818      	ldr	r0, [pc, #96]	; (4c00 <z_sched_start+0x78>)
    4b9e:	f7ff f985 	bl	3eac <z_spin_lock_valid>
    4ba2:	b940      	cbnz	r0, 4bb6 <z_sched_start+0x2e>
    4ba4:	4917      	ldr	r1, [pc, #92]	; (4c04 <z_sched_start+0x7c>)
    4ba6:	4818      	ldr	r0, [pc, #96]	; (4c08 <z_sched_start+0x80>)
    4ba8:	2281      	movs	r2, #129	; 0x81
    4baa:	f003 fc09 	bl	83c0 <printk>
    4bae:	2181      	movs	r1, #129	; 0x81
    4bb0:	4814      	ldr	r0, [pc, #80]	; (4c04 <z_sched_start+0x7c>)
    4bb2:	f003 fcd1 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    4bb6:	4812      	ldr	r0, [pc, #72]	; (4c00 <z_sched_start+0x78>)
    4bb8:	f7ff f994 	bl	3ee4 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    4bbc:	7b63      	ldrb	r3, [r4, #13]
    4bbe:	075a      	lsls	r2, r3, #29
    4bc0:	d411      	bmi.n	4be6 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4bc2:	480f      	ldr	r0, [pc, #60]	; (4c00 <z_sched_start+0x78>)
    4bc4:	f7ff f980 	bl	3ec8 <z_spin_unlock_valid>
    4bc8:	b940      	cbnz	r0, 4bdc <z_sched_start+0x54>
    4bca:	490e      	ldr	r1, [pc, #56]	; (4c04 <z_sched_start+0x7c>)
    4bcc:	480e      	ldr	r0, [pc, #56]	; (4c08 <z_sched_start+0x80>)
    4bce:	22ac      	movs	r2, #172	; 0xac
    4bd0:	f003 fbf6 	bl	83c0 <printk>
    4bd4:	21ac      	movs	r1, #172	; 0xac
    4bd6:	480b      	ldr	r0, [pc, #44]	; (4c04 <z_sched_start+0x7c>)
    4bd8:	f003 fcbe 	bl	8558 <assert_post_action>
	__asm__ volatile(
    4bdc:	f385 8811 	msr	BASEPRI, r5
    4be0:	f3bf 8f6f 	isb	sy
}
    4be4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4be6:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    4bea:	4620      	mov	r0, r4
    4bec:	7363      	strb	r3, [r4, #13]
    4bee:	f7ff ff45 	bl	4a7c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4bf2:	4629      	mov	r1, r5
}
    4bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    4bf8:	4801      	ldr	r0, [pc, #4]	; (4c00 <z_sched_start+0x78>)
    4bfa:	f7ff bc09 	b.w	4410 <z_reschedule>
    4bfe:	bf00      	nop
    4c00:	20000c6c 	.word	0x20000c6c
    4c04:	000092cc 	.word	0x000092cc
    4c08:	00009292 	.word	0x00009292

00004c0c <z_thread_timeout>:
{
    4c0c:	b570      	push	{r4, r5, r6, lr}
    4c0e:	4604      	mov	r4, r0
	__asm__ volatile(
    4c10:	f04f 0320 	mov.w	r3, #32
    4c14:	f3ef 8611 	mrs	r6, BASEPRI
    4c18:	f383 8811 	msr	BASEPRI, r3
    4c1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4c20:	481b      	ldr	r0, [pc, #108]	; (4c90 <z_thread_timeout+0x84>)
    4c22:	f7ff f943 	bl	3eac <z_spin_lock_valid>
    4c26:	b940      	cbnz	r0, 4c3a <z_thread_timeout+0x2e>
    4c28:	491a      	ldr	r1, [pc, #104]	; (4c94 <z_thread_timeout+0x88>)
    4c2a:	481b      	ldr	r0, [pc, #108]	; (4c98 <z_thread_timeout+0x8c>)
    4c2c:	2281      	movs	r2, #129	; 0x81
    4c2e:	f003 fbc7 	bl	83c0 <printk>
    4c32:	2181      	movs	r1, #129	; 0x81
    4c34:	4817      	ldr	r0, [pc, #92]	; (4c94 <z_thread_timeout+0x88>)
    4c36:	f003 fc8f 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    4c3a:	4815      	ldr	r0, [pc, #84]	; (4c90 <z_thread_timeout+0x84>)
    4c3c:	f7ff f952 	bl	3ee4 <z_spin_lock_set_owner>
		if (!killed) {
    4c40:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    4c44:	f013 0f28 	tst.w	r3, #40	; 0x28
    4c48:	d110      	bne.n	4c6c <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
    4c4a:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    4c4e:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    4c52:	b113      	cbz	r3, 4c5a <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
    4c54:	4628      	mov	r0, r5
    4c56:	f7ff fc83 	bl	4560 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4c5a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
    4c5e:	4628      	mov	r0, r5
    4c60:	f023 0314 	bic.w	r3, r3, #20
    4c64:	f804 3c0b 	strb.w	r3, [r4, #-11]
    4c68:	f7ff ff08 	bl	4a7c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4c6c:	4808      	ldr	r0, [pc, #32]	; (4c90 <z_thread_timeout+0x84>)
    4c6e:	f7ff f92b 	bl	3ec8 <z_spin_unlock_valid>
    4c72:	b940      	cbnz	r0, 4c86 <z_thread_timeout+0x7a>
    4c74:	4907      	ldr	r1, [pc, #28]	; (4c94 <z_thread_timeout+0x88>)
    4c76:	4808      	ldr	r0, [pc, #32]	; (4c98 <z_thread_timeout+0x8c>)
    4c78:	22ac      	movs	r2, #172	; 0xac
    4c7a:	f003 fba1 	bl	83c0 <printk>
    4c7e:	21ac      	movs	r1, #172	; 0xac
    4c80:	4804      	ldr	r0, [pc, #16]	; (4c94 <z_thread_timeout+0x88>)
    4c82:	f003 fc69 	bl	8558 <assert_post_action>
	__asm__ volatile(
    4c86:	f386 8811 	msr	BASEPRI, r6
    4c8a:	f3bf 8f6f 	isb	sy
}
    4c8e:	bd70      	pop	{r4, r5, r6, pc}
    4c90:	20000c6c 	.word	0x20000c6c
    4c94:	000092cc 	.word	0x000092cc
    4c98:	00009292 	.word	0x00009292

00004c9c <z_set_prio>:
{
    4c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c9e:	4604      	mov	r4, r0
    4ca0:	460e      	mov	r6, r1
	__asm__ volatile(
    4ca2:	f04f 0320 	mov.w	r3, #32
    4ca6:	f3ef 8711 	mrs	r7, BASEPRI
    4caa:	f383 8811 	msr	BASEPRI, r3
    4cae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4cb2:	4838      	ldr	r0, [pc, #224]	; (4d94 <z_set_prio+0xf8>)
    4cb4:	f7ff f8fa 	bl	3eac <z_spin_lock_valid>
    4cb8:	b940      	cbnz	r0, 4ccc <z_set_prio+0x30>
    4cba:	4937      	ldr	r1, [pc, #220]	; (4d98 <z_set_prio+0xfc>)
    4cbc:	4837      	ldr	r0, [pc, #220]	; (4d9c <z_set_prio+0x100>)
    4cbe:	2281      	movs	r2, #129	; 0x81
    4cc0:	f003 fb7e 	bl	83c0 <printk>
    4cc4:	2181      	movs	r1, #129	; 0x81
    4cc6:	4834      	ldr	r0, [pc, #208]	; (4d98 <z_set_prio+0xfc>)
    4cc8:	f003 fc46 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    4ccc:	4831      	ldr	r0, [pc, #196]	; (4d94 <z_set_prio+0xf8>)
    4cce:	f7ff f909 	bl	3ee4 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4cd2:	7b63      	ldrb	r3, [r4, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
    4cd4:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4cd6:	06da      	lsls	r2, r3, #27
    4cd8:	d158      	bne.n	4d8c <z_set_prio+0xf0>
    4cda:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    4cdc:	2d00      	cmp	r5, #0
    4cde:	d155      	bne.n	4d8c <z_set_prio+0xf0>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4ce4:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    4ce6:	4621      	mov	r1, r4
    4ce8:	482d      	ldr	r0, [pc, #180]	; (4da0 <z_set_prio+0x104>)
    4cea:	f7ff fc1b 	bl	4524 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4cee:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    4cf0:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    4cf2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4cf6:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4cf8:	4b2a      	ldr	r3, [pc, #168]	; (4da4 <z_set_prio+0x108>)
    4cfa:	429c      	cmp	r4, r3
    4cfc:	d10a      	bne.n	4d14 <z_set_prio+0x78>
    4cfe:	492a      	ldr	r1, [pc, #168]	; (4da8 <z_set_prio+0x10c>)
    4d00:	4826      	ldr	r0, [pc, #152]	; (4d9c <z_set_prio+0x100>)
    4d02:	f240 32b5 	movw	r2, #949	; 0x3b5
    4d06:	f003 fb5b 	bl	83c0 <printk>
    4d0a:	f240 31b5 	movw	r1, #949	; 0x3b5
    4d0e:	4826      	ldr	r0, [pc, #152]	; (4da8 <z_set_prio+0x10c>)
    4d10:	f003 fc22 	bl	8558 <assert_post_action>
	return list->head == list;
    4d14:	4925      	ldr	r1, [pc, #148]	; (4dac <z_set_prio+0x110>)
    4d16:	460b      	mov	r3, r1
    4d18:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d1c:	4298      	cmp	r0, r3
    4d1e:	bf18      	it	ne
    4d20:	4605      	movne	r5, r0
    4d22:	2d00      	cmp	r5, #0
    4d24:	461a      	mov	r2, r3
    4d26:	462b      	mov	r3, r5
    4d28:	bf38      	it	cc
    4d2a:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4d2c:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d2e:	b343      	cbz	r3, 4d82 <z_set_prio+0xe6>
	int32_t b1 = thread_1->base.prio;
    4d30:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4d34:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    4d38:	4286      	cmp	r6, r0
    4d3a:	d01e      	beq.n	4d7a <z_set_prio+0xde>
		return b2 - b1;
    4d3c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4d3e:	2800      	cmp	r0, #0
    4d40:	dd1b      	ble.n	4d7a <z_set_prio+0xde>
	sys_dnode_t *const prev = successor->prev;
    4d42:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4d44:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4d48:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4d4a:	605c      	str	r4, [r3, #4]
			update_cache(1);
    4d4c:	2001      	movs	r0, #1
    4d4e:	f7ff fc25 	bl	459c <update_cache>
    4d52:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4d54:	480f      	ldr	r0, [pc, #60]	; (4d94 <z_set_prio+0xf8>)
    4d56:	f7ff f8b7 	bl	3ec8 <z_spin_unlock_valid>
    4d5a:	b940      	cbnz	r0, 4d6e <z_set_prio+0xd2>
    4d5c:	490e      	ldr	r1, [pc, #56]	; (4d98 <z_set_prio+0xfc>)
    4d5e:	480f      	ldr	r0, [pc, #60]	; (4d9c <z_set_prio+0x100>)
    4d60:	22ac      	movs	r2, #172	; 0xac
    4d62:	f003 fb2d 	bl	83c0 <printk>
    4d66:	21ac      	movs	r1, #172	; 0xac
    4d68:	480b      	ldr	r0, [pc, #44]	; (4d98 <z_set_prio+0xfc>)
    4d6a:	f003 fbf5 	bl	8558 <assert_post_action>
	__asm__ volatile(
    4d6e:	f387 8811 	msr	BASEPRI, r7
    4d72:	f3bf 8f6f 	isb	sy
}
    4d76:	4620      	mov	r0, r4
    4d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    4d7a:	42ab      	cmp	r3, r5
    4d7c:	d001      	beq.n	4d82 <z_set_prio+0xe6>
    4d7e:	681b      	ldr	r3, [r3, #0]
    4d80:	e7d5      	b.n	4d2e <z_set_prio+0x92>
	node->prev = tail;
    4d82:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    4d86:	602c      	str	r4, [r5, #0]
	list->tail = node;
    4d88:	62cc      	str	r4, [r1, #44]	; 0x2c
}
    4d8a:	e7df      	b.n	4d4c <z_set_prio+0xb0>
			thread->base.prio = prio;
    4d8c:	73a6      	strb	r6, [r4, #14]
    4d8e:	2400      	movs	r4, #0
    4d90:	e7e0      	b.n	4d54 <z_set_prio+0xb8>
    4d92:	bf00      	nop
    4d94:	20000c6c 	.word	0x20000c6c
    4d98:	000092cc 	.word	0x000092cc
    4d9c:	00009292 	.word	0x00009292
    4da0:	20000c58 	.word	0x20000c58
    4da4:	20000170 	.word	0x20000170
    4da8:	0000a1db 	.word	0x0000a1db
    4dac:	20000c30 	.word	0x20000c30

00004db0 <z_unpend_first_thread>:
{
    4db0:	b538      	push	{r3, r4, r5, lr}
    4db2:	4604      	mov	r4, r0
	__asm__ volatile(
    4db4:	f04f 0320 	mov.w	r3, #32
    4db8:	f3ef 8511 	mrs	r5, BASEPRI
    4dbc:	f383 8811 	msr	BASEPRI, r3
    4dc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4dc4:	4816      	ldr	r0, [pc, #88]	; (4e20 <z_unpend_first_thread+0x70>)
    4dc6:	f7ff f871 	bl	3eac <z_spin_lock_valid>
    4dca:	b940      	cbnz	r0, 4dde <z_unpend_first_thread+0x2e>
    4dcc:	4915      	ldr	r1, [pc, #84]	; (4e24 <z_unpend_first_thread+0x74>)
    4dce:	4816      	ldr	r0, [pc, #88]	; (4e28 <z_unpend_first_thread+0x78>)
    4dd0:	2281      	movs	r2, #129	; 0x81
    4dd2:	f003 faf5 	bl	83c0 <printk>
    4dd6:	2181      	movs	r1, #129	; 0x81
    4dd8:	4812      	ldr	r0, [pc, #72]	; (4e24 <z_unpend_first_thread+0x74>)
    4dda:	f003 fbbd 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    4dde:	4810      	ldr	r0, [pc, #64]	; (4e20 <z_unpend_first_thread+0x70>)
    4de0:	f7ff f880 	bl	3ee4 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    4de4:	4620      	mov	r0, r4
    4de6:	f003 fe98 	bl	8b1a <z_priq_dumb_best>
		if (thread != NULL) {
    4dea:	4604      	mov	r4, r0
    4dec:	b128      	cbz	r0, 4dfa <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
    4dee:	f7ff fbb7 	bl	4560 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    4df2:	f104 0018 	add.w	r0, r4, #24
    4df6:	f000 fb27 	bl	5448 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4dfa:	4809      	ldr	r0, [pc, #36]	; (4e20 <z_unpend_first_thread+0x70>)
    4dfc:	f7ff f864 	bl	3ec8 <z_spin_unlock_valid>
    4e00:	b940      	cbnz	r0, 4e14 <z_unpend_first_thread+0x64>
    4e02:	4908      	ldr	r1, [pc, #32]	; (4e24 <z_unpend_first_thread+0x74>)
    4e04:	4808      	ldr	r0, [pc, #32]	; (4e28 <z_unpend_first_thread+0x78>)
    4e06:	22ac      	movs	r2, #172	; 0xac
    4e08:	f003 fada 	bl	83c0 <printk>
    4e0c:	21ac      	movs	r1, #172	; 0xac
    4e0e:	4805      	ldr	r0, [pc, #20]	; (4e24 <z_unpend_first_thread+0x74>)
    4e10:	f003 fba2 	bl	8558 <assert_post_action>
	__asm__ volatile(
    4e14:	f385 8811 	msr	BASEPRI, r5
    4e18:	f3bf 8f6f 	isb	sy
}
    4e1c:	4620      	mov	r0, r4
    4e1e:	bd38      	pop	{r3, r4, r5, pc}
    4e20:	20000c6c 	.word	0x20000c6c
    4e24:	000092cc 	.word	0x000092cc
    4e28:	00009292 	.word	0x00009292

00004e2c <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4e2c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    4e2e:	4b04      	ldr	r3, [pc, #16]	; (4e40 <z_sched_init+0x14>)
    4e30:	4608      	mov	r0, r1
    4e32:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    4e36:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    4e3a:	f7ff ba95 	b.w	4368 <k_sched_time_slice_set>
    4e3e:	bf00      	nop
    4e40:	20000c30 	.word	0x20000c30

00004e44 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    4e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e46:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    4e4a:	b153      	cbz	r3, 4e62 <z_impl_k_yield+0x1e>
    4e4c:	4940      	ldr	r1, [pc, #256]	; (4f50 <z_impl_k_yield+0x10c>)
    4e4e:	4841      	ldr	r0, [pc, #260]	; (4f54 <z_impl_k_yield+0x110>)
    4e50:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    4e54:	f003 fab4 	bl	83c0 <printk>
    4e58:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
    4e5c:	483c      	ldr	r0, [pc, #240]	; (4f50 <z_impl_k_yield+0x10c>)
    4e5e:	f003 fb7b 	bl	8558 <assert_post_action>

	SYS_PORT_TRACING_FUNC(k_thread, yield);

	if (!z_is_idle_thread_object(_current)) {
    4e62:	4d3d      	ldr	r5, [pc, #244]	; (4f58 <z_impl_k_yield+0x114>)
    4e64:	4e3d      	ldr	r6, [pc, #244]	; (4f5c <z_impl_k_yield+0x118>)
    4e66:	68ab      	ldr	r3, [r5, #8]
    4e68:	42b3      	cmp	r3, r6
    4e6a:	d067      	beq.n	4f3c <z_impl_k_yield+0xf8>
	__asm__ volatile(
    4e6c:	f04f 0320 	mov.w	r3, #32
    4e70:	f3ef 8711 	mrs	r7, BASEPRI
    4e74:	f383 8811 	msr	BASEPRI, r3
    4e78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4e7c:	4838      	ldr	r0, [pc, #224]	; (4f60 <z_impl_k_yield+0x11c>)
    4e7e:	f7ff f815 	bl	3eac <z_spin_lock_valid>
    4e82:	b940      	cbnz	r0, 4e96 <z_impl_k_yield+0x52>
    4e84:	4937      	ldr	r1, [pc, #220]	; (4f64 <z_impl_k_yield+0x120>)
    4e86:	4833      	ldr	r0, [pc, #204]	; (4f54 <z_impl_k_yield+0x110>)
    4e88:	2281      	movs	r2, #129	; 0x81
    4e8a:	f003 fa99 	bl	83c0 <printk>
    4e8e:	2181      	movs	r1, #129	; 0x81
    4e90:	4834      	ldr	r0, [pc, #208]	; (4f64 <z_impl_k_yield+0x120>)
    4e92:	f003 fb61 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    4e96:	4832      	ldr	r0, [pc, #200]	; (4f60 <z_impl_k_yield+0x11c>)
    4e98:	f7ff f824 	bl	3ee4 <z_spin_lock_set_owner>
		k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

		if (!IS_ENABLED(CONFIG_SMP) ||
			z_is_thread_queued(_current)) {
			dequeue_thread(&_kernel.ready_q.runq,
    4e9c:	68a9      	ldr	r1, [r5, #8]
		_priq_run_remove(pq, thread);
    4e9e:	4832      	ldr	r0, [pc, #200]	; (4f68 <z_impl_k_yield+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4ea0:	7b4b      	ldrb	r3, [r1, #13]
    4ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4ea6:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
    4ea8:	f7ff fb3c 	bl	4524 <z_priq_dumb_remove>
					_current);
		}
		queue_thread(&_kernel.ready_q.runq, _current);
    4eac:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4eae:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4eb0:	42b4      	cmp	r4, r6
	thread->base.thread_state |= _THREAD_QUEUED;
    4eb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4eb6:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4eb8:	d10a      	bne.n	4ed0 <z_impl_k_yield+0x8c>
    4eba:	4925      	ldr	r1, [pc, #148]	; (4f50 <z_impl_k_yield+0x10c>)
    4ebc:	4825      	ldr	r0, [pc, #148]	; (4f54 <z_impl_k_yield+0x110>)
    4ebe:	f240 32b5 	movw	r2, #949	; 0x3b5
    4ec2:	f003 fa7d 	bl	83c0 <printk>
    4ec6:	f240 31b5 	movw	r1, #949	; 0x3b5
    4eca:	4821      	ldr	r0, [pc, #132]	; (4f50 <z_impl_k_yield+0x10c>)
    4ecc:	f003 fb44 	bl	8558 <assert_post_action>
	return list->head == list;
    4ed0:	6aab      	ldr	r3, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ed2:	4825      	ldr	r0, [pc, #148]	; (4f68 <z_impl_k_yield+0x124>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4ed4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ed6:	4283      	cmp	r3, r0
    4ed8:	bf08      	it	eq
    4eda:	2300      	moveq	r3, #0
    4edc:	2b00      	cmp	r3, #0
    4ede:	bf38      	it	cc
    4ee0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4ee2:	b333      	cbz	r3, 4f32 <z_impl_k_yield+0xee>
	int32_t b1 = thread_1->base.prio;
    4ee4:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4ee8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    4eec:	4296      	cmp	r6, r2
    4eee:	d01c      	beq.n	4f2a <z_impl_k_yield+0xe6>
		return b2 - b1;
    4ef0:	1b92      	subs	r2, r2, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4ef2:	2a00      	cmp	r2, #0
    4ef4:	dd19      	ble.n	4f2a <z_impl_k_yield+0xe6>
	sys_dnode_t *const prev = successor->prev;
    4ef6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4ef8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4efc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4efe:	605c      	str	r4, [r3, #4]
		update_cache(1);
    4f00:	2001      	movs	r0, #1
    4f02:	f7ff fb4b 	bl	459c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4f06:	4816      	ldr	r0, [pc, #88]	; (4f60 <z_impl_k_yield+0x11c>)
    4f08:	f7fe ffde 	bl	3ec8 <z_spin_unlock_valid>
    4f0c:	b940      	cbnz	r0, 4f20 <z_impl_k_yield+0xdc>
    4f0e:	4915      	ldr	r1, [pc, #84]	; (4f64 <z_impl_k_yield+0x120>)
    4f10:	4810      	ldr	r0, [pc, #64]	; (4f54 <z_impl_k_yield+0x110>)
    4f12:	22c3      	movs	r2, #195	; 0xc3
    4f14:	f003 fa54 	bl	83c0 <printk>
    4f18:	21c3      	movs	r1, #195	; 0xc3
    4f1a:	4812      	ldr	r0, [pc, #72]	; (4f64 <z_impl_k_yield+0x120>)
    4f1c:	f003 fb1c 	bl	8558 <assert_post_action>
    4f20:	4638      	mov	r0, r7
		z_swap(&sched_spinlock, key);
	} else {
		z_swap_unlocked();
	}
}
    4f22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4f26:	f7fd b95f 	b.w	21e8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    4f2a:	428b      	cmp	r3, r1
    4f2c:	d001      	beq.n	4f32 <z_impl_k_yield+0xee>
    4f2e:	681b      	ldr	r3, [r3, #0]
    4f30:	e7d7      	b.n	4ee2 <z_impl_k_yield+0x9e>
	node->prev = tail;
    4f32:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    4f36:	600c      	str	r4, [r1, #0]
	list->tail = node;
    4f38:	62ec      	str	r4, [r5, #44]	; 0x2c
}
    4f3a:	e7e1      	b.n	4f00 <z_impl_k_yield+0xbc>
    4f3c:	f04f 0320 	mov.w	r3, #32
    4f40:	f3ef 8011 	mrs	r0, BASEPRI
    4f44:	f383 8811 	msr	BASEPRI, r3
    4f48:	f3bf 8f6f 	isb	sy
    4f4c:	e7e9      	b.n	4f22 <z_impl_k_yield+0xde>
    4f4e:	bf00      	nop
    4f50:	0000a1db 	.word	0x0000a1db
    4f54:	00009292 	.word	0x00009292
    4f58:	20000c30 	.word	0x20000c30
    4f5c:	20000170 	.word	0x20000170
    4f60:	20000c6c 	.word	0x20000c6c
    4f64:	000092cc 	.word	0x000092cc
    4f68:	20000c58 	.word	0x20000c58

00004f6c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    4f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f70:	4606      	mov	r6, r0
    4f72:	460f      	mov	r7, r1
    4f74:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    4f78:	b153      	cbz	r3, 4f90 <z_tick_sleep+0x24>
    4f7a:	4935      	ldr	r1, [pc, #212]	; (5050 <z_tick_sleep+0xe4>)
    4f7c:	4835      	ldr	r0, [pc, #212]	; (5054 <z_tick_sleep+0xe8>)
    4f7e:	f240 42d1 	movw	r2, #1233	; 0x4d1
    4f82:	f003 fa1d 	bl	83c0 <printk>
    4f86:	f240 41d1 	movw	r1, #1233	; 0x4d1
    4f8a:	4831      	ldr	r0, [pc, #196]	; (5050 <z_tick_sleep+0xe4>)
    4f8c:	f003 fae4 	bl	8558 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    4f90:	ea56 0307 	orrs.w	r3, r6, r7
    4f94:	d104      	bne.n	4fa0 <z_tick_sleep+0x34>
	z_impl_k_yield();
    4f96:	f7ff ff55 	bl	4e44 <z_impl_k_yield>
		k_yield();
		return 0;
    4f9a:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    4f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4fa0:	f003 fdc5 	bl	8b2e <sys_clock_tick_get_32>
    4fa4:	1984      	adds	r4, r0, r6
    4fa6:	f04f 0320 	mov.w	r3, #32
    4faa:	f3ef 8811 	mrs	r8, BASEPRI
    4fae:	f383 8811 	msr	BASEPRI, r3
    4fb2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4fb6:	4828      	ldr	r0, [pc, #160]	; (5058 <z_tick_sleep+0xec>)
    4fb8:	f7fe ff78 	bl	3eac <z_spin_lock_valid>
    4fbc:	b940      	cbnz	r0, 4fd0 <z_tick_sleep+0x64>
    4fbe:	4927      	ldr	r1, [pc, #156]	; (505c <z_tick_sleep+0xf0>)
    4fc0:	4824      	ldr	r0, [pc, #144]	; (5054 <z_tick_sleep+0xe8>)
    4fc2:	2281      	movs	r2, #129	; 0x81
    4fc4:	f003 f9fc 	bl	83c0 <printk>
    4fc8:	2181      	movs	r1, #129	; 0x81
    4fca:	4824      	ldr	r0, [pc, #144]	; (505c <z_tick_sleep+0xf0>)
    4fcc:	f003 fac4 	bl	8558 <assert_post_action>
	pending_current = _current;
    4fd0:	4d23      	ldr	r5, [pc, #140]	; (5060 <z_tick_sleep+0xf4>)
	z_spin_lock_set_owner(l);
    4fd2:	4821      	ldr	r0, [pc, #132]	; (5058 <z_tick_sleep+0xec>)
    4fd4:	f7fe ff86 	bl	3ee4 <z_spin_lock_set_owner>
    4fd8:	68a8      	ldr	r0, [r5, #8]
    4fda:	4b22      	ldr	r3, [pc, #136]	; (5064 <z_tick_sleep+0xf8>)
    4fdc:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    4fde:	f7ff fb0d 	bl	45fc <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4fe2:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4fe4:	4632      	mov	r2, r6
    4fe6:	463b      	mov	r3, r7
    4fe8:	3018      	adds	r0, #24
    4fea:	491f      	ldr	r1, [pc, #124]	; (5068 <z_tick_sleep+0xfc>)
    4fec:	f000 f972 	bl	52d4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4ff0:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4ff2:	4819      	ldr	r0, [pc, #100]	; (5058 <z_tick_sleep+0xec>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4ff4:	7b53      	ldrb	r3, [r2, #13]
    4ff6:	f043 0310 	orr.w	r3, r3, #16
    4ffa:	7353      	strb	r3, [r2, #13]
    4ffc:	f7fe ff64 	bl	3ec8 <z_spin_unlock_valid>
    5000:	b940      	cbnz	r0, 5014 <z_tick_sleep+0xa8>
    5002:	4916      	ldr	r1, [pc, #88]	; (505c <z_tick_sleep+0xf0>)
    5004:	4813      	ldr	r0, [pc, #76]	; (5054 <z_tick_sleep+0xe8>)
    5006:	22c3      	movs	r2, #195	; 0xc3
    5008:	f003 f9da 	bl	83c0 <printk>
    500c:	21c3      	movs	r1, #195	; 0xc3
    500e:	4813      	ldr	r0, [pc, #76]	; (505c <z_tick_sleep+0xf0>)
    5010:	f003 faa2 	bl	8558 <assert_post_action>
    5014:	4640      	mov	r0, r8
    5016:	f7fd f8e7 	bl	21e8 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    501a:	68ab      	ldr	r3, [r5, #8]
    501c:	7b5b      	ldrb	r3, [r3, #13]
    501e:	06db      	lsls	r3, r3, #27
    5020:	d50a      	bpl.n	5038 <z_tick_sleep+0xcc>
    5022:	490b      	ldr	r1, [pc, #44]	; (5050 <z_tick_sleep+0xe4>)
    5024:	480b      	ldr	r0, [pc, #44]	; (5054 <z_tick_sleep+0xe8>)
    5026:	f240 42ef 	movw	r2, #1263	; 0x4ef
    502a:	f003 f9c9 	bl	83c0 <printk>
    502e:	f240 41ef 	movw	r1, #1263	; 0x4ef
    5032:	4807      	ldr	r0, [pc, #28]	; (5050 <z_tick_sleep+0xe4>)
    5034:	f003 fa90 	bl	8558 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    5038:	f003 fd79 	bl	8b2e <sys_clock_tick_get_32>
    503c:	1a20      	subs	r0, r4, r0
    503e:	eb64 0104 	sbc.w	r1, r4, r4
    5042:	2800      	cmp	r0, #0
    5044:	f171 0300 	sbcs.w	r3, r1, #0
    5048:	bfb8      	it	lt
    504a:	2000      	movlt	r0, #0
    504c:	e7a6      	b.n	4f9c <z_tick_sleep+0x30>
    504e:	bf00      	nop
    5050:	0000a1db 	.word	0x0000a1db
    5054:	00009292 	.word	0x00009292
    5058:	20000c6c 	.word	0x20000c6c
    505c:	000092cc 	.word	0x000092cc
    5060:	20000c30 	.word	0x20000c30
    5064:	20000c68 	.word	0x20000c68
    5068:	00004c0d 	.word	0x00004c0d

0000506c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    506c:	b538      	push	{r3, r4, r5, lr}
    506e:	4604      	mov	r4, r0
    5070:	460d      	mov	r5, r1
    5072:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    5076:	b153      	cbz	r3, 508e <z_impl_k_sleep+0x22>
    5078:	4911      	ldr	r1, [pc, #68]	; (50c0 <z_impl_k_sleep+0x54>)
    507a:	4812      	ldr	r0, [pc, #72]	; (50c4 <z_impl_k_sleep+0x58>)
    507c:	f240 42fe 	movw	r2, #1278	; 0x4fe
    5080:	f003 f99e 	bl	83c0 <printk>
    5084:	f240 41fe 	movw	r1, #1278	; 0x4fe
    5088:	480d      	ldr	r0, [pc, #52]	; (50c0 <z_impl_k_sleep+0x54>)
    508a:	f003 fa65 	bl	8558 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    508e:	1c6b      	adds	r3, r5, #1
    5090:	bf08      	it	eq
    5092:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    5096:	d106      	bne.n	50a6 <z_impl_k_sleep+0x3a>
		k_thread_suspend(_current);
    5098:	4b0b      	ldr	r3, [pc, #44]	; (50c8 <z_impl_k_sleep+0x5c>)
    509a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    509c:	f7ff fb7e 	bl	479c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    50a0:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    50a4:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    50a6:	4620      	mov	r0, r4
    50a8:	4629      	mov	r1, r5
    50aa:	f7ff ff5f 	bl	4f6c <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    50ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    50b2:	fb80 3403 	smull	r3, r4, r0, r3
    50b6:	0bd8      	lsrs	r0, r3, #15
    50b8:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    50bc:	e7f2      	b.n	50a4 <z_impl_k_sleep+0x38>
    50be:	bf00      	nop
    50c0:	0000a1db 	.word	0x0000a1db
    50c4:	00009292 	.word	0x00009292
    50c8:	20000c30 	.word	0x20000c30

000050cc <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    50cc:	4b01      	ldr	r3, [pc, #4]	; (50d4 <z_impl_k_current_get+0x8>)
    50ce:	6898      	ldr	r0, [r3, #8]
    50d0:	4770      	bx	lr
    50d2:	bf00      	nop
    50d4:	20000c30 	.word	0x20000c30

000050d8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    50d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50dc:	4604      	mov	r4, r0
    50de:	f04f 0320 	mov.w	r3, #32
    50e2:	f3ef 8611 	mrs	r6, BASEPRI
    50e6:	f383 8811 	msr	BASEPRI, r3
    50ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    50ee:	483e      	ldr	r0, [pc, #248]	; (51e8 <z_thread_abort+0x110>)
    50f0:	f7fe fedc 	bl	3eac <z_spin_lock_valid>
    50f4:	b940      	cbnz	r0, 5108 <z_thread_abort+0x30>
    50f6:	493d      	ldr	r1, [pc, #244]	; (51ec <z_thread_abort+0x114>)
    50f8:	483d      	ldr	r0, [pc, #244]	; (51f0 <z_thread_abort+0x118>)
    50fa:	2281      	movs	r2, #129	; 0x81
    50fc:	f003 f960 	bl	83c0 <printk>
    5100:	2181      	movs	r1, #129	; 0x81
    5102:	483a      	ldr	r0, [pc, #232]	; (51ec <z_thread_abort+0x114>)
    5104:	f003 fa28 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    5108:	4837      	ldr	r0, [pc, #220]	; (51e8 <z_thread_abort+0x110>)
    510a:	f7fe feeb 	bl	3ee4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    510e:	7b63      	ldrb	r3, [r4, #13]
    5110:	071a      	lsls	r2, r3, #28
    5112:	d512      	bpl.n	513a <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5114:	4834      	ldr	r0, [pc, #208]	; (51e8 <z_thread_abort+0x110>)
    5116:	f7fe fed7 	bl	3ec8 <z_spin_unlock_valid>
    511a:	b940      	cbnz	r0, 512e <z_thread_abort+0x56>
    511c:	4933      	ldr	r1, [pc, #204]	; (51ec <z_thread_abort+0x114>)
    511e:	4834      	ldr	r0, [pc, #208]	; (51f0 <z_thread_abort+0x118>)
    5120:	22ac      	movs	r2, #172	; 0xac
    5122:	f003 f94d 	bl	83c0 <printk>
    5126:	21ac      	movs	r1, #172	; 0xac
    5128:	4830      	ldr	r0, [pc, #192]	; (51ec <z_thread_abort+0x114>)
    512a:	f003 fa15 	bl	8558 <assert_post_action>
	__asm__ volatile(
    512e:	f386 8811 	msr	BASEPRI, r6
    5132:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    513a:	f023 0220 	bic.w	r2, r3, #32
    513e:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5142:	09d2      	lsrs	r2, r2, #7
    5144:	d138      	bne.n	51b8 <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5146:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    5148:	68a3      	ldr	r3, [r4, #8]
    514a:	b113      	cbz	r3, 5152 <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
    514c:	4620      	mov	r0, r4
    514e:	f7ff fa07 	bl	4560 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5152:	f104 0018 	add.w	r0, r4, #24
    5156:	f000 f977 	bl	5448 <z_abort_timeout>
    515a:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    515e:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    5162:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5164:	42bd      	cmp	r5, r7
    5166:	d000      	beq.n	516a <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    5168:	bb85      	cbnz	r5, 51cc <z_thread_abort+0xf4>
		update_cache(1);
    516a:	2001      	movs	r0, #1
    516c:	f7ff fa16 	bl	459c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    5170:	4b20      	ldr	r3, [pc, #128]	; (51f4 <z_thread_abort+0x11c>)
    5172:	689b      	ldr	r3, [r3, #8]
    5174:	42a3      	cmp	r3, r4
    5176:	d1cd      	bne.n	5114 <z_thread_abort+0x3c>
    5178:	f3ef 8305 	mrs	r3, IPSR
    517c:	2b00      	cmp	r3, #0
    517e:	d1c9      	bne.n	5114 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5180:	4819      	ldr	r0, [pc, #100]	; (51e8 <z_thread_abort+0x110>)
    5182:	f7fe fea1 	bl	3ec8 <z_spin_unlock_valid>
    5186:	b940      	cbnz	r0, 519a <z_thread_abort+0xc2>
    5188:	4918      	ldr	r1, [pc, #96]	; (51ec <z_thread_abort+0x114>)
    518a:	4819      	ldr	r0, [pc, #100]	; (51f0 <z_thread_abort+0x118>)
    518c:	22c3      	movs	r2, #195	; 0xc3
    518e:	f003 f917 	bl	83c0 <printk>
    5192:	21c3      	movs	r1, #195	; 0xc3
    5194:	4815      	ldr	r0, [pc, #84]	; (51ec <z_thread_abort+0x114>)
    5196:	f003 f9df 	bl	8558 <assert_post_action>
    519a:	4630      	mov	r0, r6
    519c:	f7fd f824 	bl	21e8 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    51a0:	f240 6211 	movw	r2, #1553	; 0x611
    51a4:	4914      	ldr	r1, [pc, #80]	; (51f8 <z_thread_abort+0x120>)
    51a6:	4812      	ldr	r0, [pc, #72]	; (51f0 <z_thread_abort+0x118>)
    51a8:	f003 f90a 	bl	83c0 <printk>
    51ac:	f240 6111 	movw	r1, #1553	; 0x611
    51b0:	4811      	ldr	r0, [pc, #68]	; (51f8 <z_thread_abort+0x120>)
    51b2:	f003 f9d1 	bl	8558 <assert_post_action>
    51b6:	e7ad      	b.n	5114 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    51b8:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    51bc:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
    51c0:	4621      	mov	r1, r4
    51c2:	480e      	ldr	r0, [pc, #56]	; (51fc <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    51c4:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    51c6:	f7ff f9ad 	bl	4524 <z_priq_dumb_remove>
}
    51ca:	e7bd      	b.n	5148 <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
    51cc:	4628      	mov	r0, r5
    51ce:	f7ff f9c7 	bl	4560 <unpend_thread_no_timeout>
    51d2:	f105 0018 	add.w	r0, r5, #24
    51d6:	f000 f937 	bl	5448 <z_abort_timeout>
		ready_thread(thread);
    51da:	4628      	mov	r0, r5
    51dc:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    51e0:	f7ff fc4c 	bl	4a7c <ready_thread>
    51e4:	e7bd      	b.n	5162 <z_thread_abort+0x8a>
    51e6:	bf00      	nop
    51e8:	20000c6c 	.word	0x20000c6c
    51ec:	000092cc 	.word	0x000092cc
    51f0:	00009292 	.word	0x00009292
    51f4:	20000c30 	.word	0x20000c30
    51f8:	0000a1db 	.word	0x0000a1db
    51fc:	20000c58 	.word	0x20000c58

00005200 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    5200:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    5202:	4806      	ldr	r0, [pc, #24]	; (521c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    5204:	4a06      	ldr	r2, [pc, #24]	; (5220 <z_data_copy+0x20>)
    5206:	4907      	ldr	r1, [pc, #28]	; (5224 <z_data_copy+0x24>)
    5208:	1a12      	subs	r2, r2, r0
    520a:	f003 facd 	bl	87a8 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    520e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    5212:	4a05      	ldr	r2, [pc, #20]	; (5228 <z_data_copy+0x28>)
    5214:	4905      	ldr	r1, [pc, #20]	; (522c <z_data_copy+0x2c>)
    5216:	4806      	ldr	r0, [pc, #24]	; (5230 <z_data_copy+0x30>)
    5218:	f003 bac6 	b.w	87a8 <memcpy>
    521c:	20000000 	.word	0x20000000
    5220:	2000016c 	.word	0x2000016c
    5224:	0000a25c 	.word	0x0000a25c
    5228:	00000000 	.word	0x00000000
    522c:	0000a25c 	.word	0x0000a25c
    5230:	20000000 	.word	0x20000000

00005234 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5234:	4b03      	ldr	r3, [pc, #12]	; (5244 <elapsed+0x10>)
    5236:	681b      	ldr	r3, [r3, #0]
    5238:	b90b      	cbnz	r3, 523e <elapsed+0xa>
    523a:	f7fc bc8d 	b.w	1b58 <sys_clock_elapsed>
}
    523e:	2000      	movs	r0, #0
    5240:	4770      	bx	lr
    5242:	bf00      	nop
    5244:	20000c78 	.word	0x20000c78

00005248 <remove_timeout>:
{
    5248:	b530      	push	{r4, r5, lr}
    524a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    524c:	b168      	cbz	r0, 526a <remove_timeout+0x22>
    524e:	4a0a      	ldr	r2, [pc, #40]	; (5278 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    5250:	6852      	ldr	r2, [r2, #4]
    5252:	4290      	cmp	r0, r2
    5254:	d009      	beq.n	526a <remove_timeout+0x22>
	if (next(t) != NULL) {
    5256:	b143      	cbz	r3, 526a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    5258:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    525c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5260:	1912      	adds	r2, r2, r4
    5262:	eb45 0101 	adc.w	r1, r5, r1
    5266:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    526a:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    526c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    526e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5270:	2300      	movs	r3, #0
	node->prev = NULL;
    5272:	e9c0 3300 	strd	r3, r3, [r0]
}
    5276:	bd30      	pop	{r4, r5, pc}
    5278:	20000044 	.word	0x20000044

0000527c <next_timeout>:

static int32_t next_timeout(void)
{
    527c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    527e:	4b13      	ldr	r3, [pc, #76]	; (52cc <next_timeout+0x50>)
    5280:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5282:	429c      	cmp	r4, r3
    5284:	bf08      	it	eq
    5286:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5288:	f7ff ffd4 	bl	5234 <elapsed>
    528c:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    528e:	b1bc      	cbz	r4, 52c0 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    5290:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    5294:	1b40      	subs	r0, r0, r5
    5296:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    529a:	2801      	cmp	r0, #1
    529c:	f171 0300 	sbcs.w	r3, r1, #0
    52a0:	db11      	blt.n	52c6 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    52a2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    52a6:	2300      	movs	r3, #0
    52a8:	4282      	cmp	r2, r0
    52aa:	eb73 0401 	sbcs.w	r4, r3, r1
    52ae:	da00      	bge.n	52b2 <next_timeout+0x36>
    52b0:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    52b2:	4b07      	ldr	r3, [pc, #28]	; (52d0 <next_timeout+0x54>)
    52b4:	691b      	ldr	r3, [r3, #16]
    52b6:	b113      	cbz	r3, 52be <next_timeout+0x42>
    52b8:	4298      	cmp	r0, r3
    52ba:	bfa8      	it	ge
    52bc:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    52be:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    52c0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    52c4:	e7f5      	b.n	52b2 <next_timeout+0x36>
    52c6:	2000      	movs	r0, #0
    52c8:	e7f3      	b.n	52b2 <next_timeout+0x36>
    52ca:	bf00      	nop
    52cc:	20000044 	.word	0x20000044
    52d0:	20000c30 	.word	0x20000c30

000052d4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    52d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52d8:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    52da:	1c6b      	adds	r3, r5, #1
    52dc:	bf08      	it	eq
    52de:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    52e2:	4682      	mov	sl, r0
    52e4:	468b      	mov	fp, r1
    52e6:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    52e8:	f000 809c 	beq.w	5424 <z_add_timeout+0x150>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    52ec:	6803      	ldr	r3, [r0, #0]
    52ee:	b143      	cbz	r3, 5302 <z_add_timeout+0x2e>
    52f0:	494e      	ldr	r1, [pc, #312]	; (542c <z_add_timeout+0x158>)
    52f2:	484f      	ldr	r0, [pc, #316]	; (5430 <z_add_timeout+0x15c>)
    52f4:	225d      	movs	r2, #93	; 0x5d
    52f6:	f003 f863 	bl	83c0 <printk>
    52fa:	215d      	movs	r1, #93	; 0x5d
    52fc:	484b      	ldr	r0, [pc, #300]	; (542c <z_add_timeout+0x158>)
    52fe:	f003 f92b 	bl	8558 <assert_post_action>
	to->fn = fn;
    5302:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    5306:	f04f 0320 	mov.w	r3, #32
    530a:	f3ef 8b11 	mrs	fp, BASEPRI
    530e:	f383 8811 	msr	BASEPRI, r3
    5312:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5316:	4847      	ldr	r0, [pc, #284]	; (5434 <z_add_timeout+0x160>)
    5318:	f7fe fdc8 	bl	3eac <z_spin_lock_valid>
    531c:	b940      	cbnz	r0, 5330 <z_add_timeout+0x5c>
    531e:	4946      	ldr	r1, [pc, #280]	; (5438 <z_add_timeout+0x164>)
    5320:	4843      	ldr	r0, [pc, #268]	; (5430 <z_add_timeout+0x15c>)
    5322:	2281      	movs	r2, #129	; 0x81
    5324:	f003 f84c 	bl	83c0 <printk>
    5328:	2181      	movs	r1, #129	; 0x81
    532a:	4843      	ldr	r0, [pc, #268]	; (5438 <z_add_timeout+0x164>)
    532c:	f003 f914 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    5330:	4840      	ldr	r0, [pc, #256]	; (5434 <z_add_timeout+0x160>)
    5332:	f7fe fdd7 	bl	3ee4 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    5336:	f06f 0301 	mvn.w	r3, #1
    533a:	f04f 32ff 	mov.w	r2, #4294967295
    533e:	ebb3 0804 	subs.w	r8, r3, r4
    5342:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    5346:	f1b8 0f00 	cmp.w	r8, #0
    534a:	f179 0100 	sbcs.w	r1, r9, #0
    534e:	db1c      	blt.n	538a <z_add_timeout+0xb6>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    5350:	483a      	ldr	r0, [pc, #232]	; (543c <z_add_timeout+0x168>)
    5352:	e9d0 1000 	ldrd	r1, r0, [r0]
    5356:	1a5b      	subs	r3, r3, r1
    5358:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    535c:	1b1e      	subs	r6, r3, r4
    535e:	eb62 0705 	sbc.w	r7, r2, r5
    5362:	2e01      	cmp	r6, #1
    5364:	f177 0300 	sbcs.w	r3, r7, #0
    5368:	bfbc      	itt	lt
    536a:	2601      	movlt	r6, #1
    536c:	2700      	movlt	r7, #0
    536e:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    5372:	4a33      	ldr	r2, [pc, #204]	; (5440 <z_add_timeout+0x16c>)
    5374:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5378:	4293      	cmp	r3, r2
    537a:	d11d      	bne.n	53b8 <z_add_timeout+0xe4>
	node->prev = tail;
    537c:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    5380:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    5384:	f8c2 a004 	str.w	sl, [r2, #4]
}
    5388:	e02c      	b.n	53e4 <z_add_timeout+0x110>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    538a:	f7ff ff53 	bl	5234 <elapsed>
    538e:	1c63      	adds	r3, r4, #1
    5390:	9300      	str	r3, [sp, #0]
    5392:	f145 0300 	adc.w	r3, r5, #0
    5396:	9301      	str	r3, [sp, #4]
    5398:	e9dd 2300 	ldrd	r2, r3, [sp]
    539c:	1812      	adds	r2, r2, r0
    539e:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    53a2:	e9ca 2304 	strd	r2, r3, [sl, #16]
    53a6:	e7e4      	b.n	5372 <z_add_timeout+0x9e>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    53a8:	1be0      	subs	r0, r4, r7
    53aa:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    53ae:	42b3      	cmp	r3, r6
    53b0:	e9ca 0104 	strd	r0, r1, [sl, #16]
    53b4:	d0e2      	beq.n	537c <z_add_timeout+0xa8>
    53b6:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    53b8:	2b00      	cmp	r3, #0
    53ba:	d0df      	beq.n	537c <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
    53bc:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    53c0:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    53c4:	42bc      	cmp	r4, r7
    53c6:	eb75 0108 	sbcs.w	r1, r5, r8
    53ca:	daed      	bge.n	53a8 <z_add_timeout+0xd4>
				t->dticks -= to->dticks;
    53cc:	1b38      	subs	r0, r7, r4
    53ce:	eb68 0105 	sbc.w	r1, r8, r5
    53d2:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    53d6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    53d8:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    53dc:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    53e0:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    53e4:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    53e6:	4293      	cmp	r3, r2
    53e8:	d00b      	beq.n	5402 <z_add_timeout+0x12e>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    53ea:	459a      	cmp	sl, r3
    53ec:	d109      	bne.n	5402 <z_add_timeout+0x12e>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    53ee:	f7ff ff45 	bl	527c <next_timeout>

			if (next_time == 0 ||
    53f2:	b118      	cbz	r0, 53fc <z_add_timeout+0x128>
			    _current_cpu->slice_ticks != next_time) {
    53f4:	4b13      	ldr	r3, [pc, #76]	; (5444 <z_add_timeout+0x170>)
			if (next_time == 0 ||
    53f6:	691b      	ldr	r3, [r3, #16]
    53f8:	4283      	cmp	r3, r0
    53fa:	d002      	beq.n	5402 <z_add_timeout+0x12e>
				sys_clock_set_timeout(next_time, false);
    53fc:	2100      	movs	r1, #0
    53fe:	f7fc fb79 	bl	1af4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5402:	480c      	ldr	r0, [pc, #48]	; (5434 <z_add_timeout+0x160>)
    5404:	f7fe fd60 	bl	3ec8 <z_spin_unlock_valid>
    5408:	b940      	cbnz	r0, 541c <z_add_timeout+0x148>
    540a:	490b      	ldr	r1, [pc, #44]	; (5438 <z_add_timeout+0x164>)
    540c:	4808      	ldr	r0, [pc, #32]	; (5430 <z_add_timeout+0x15c>)
    540e:	22ac      	movs	r2, #172	; 0xac
    5410:	f002 ffd6 	bl	83c0 <printk>
    5414:	21ac      	movs	r1, #172	; 0xac
    5416:	4808      	ldr	r0, [pc, #32]	; (5438 <z_add_timeout+0x164>)
    5418:	f003 f89e 	bl	8558 <assert_post_action>
	__asm__ volatile(
    541c:	f38b 8811 	msr	BASEPRI, fp
    5420:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5424:	b003      	add	sp, #12
    5426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    542a:	bf00      	nop
    542c:	0000a1fd 	.word	0x0000a1fd
    5430:	00009292 	.word	0x00009292
    5434:	20000c7c 	.word	0x20000c7c
    5438:	000092cc 	.word	0x000092cc
    543c:	20000270 	.word	0x20000270
    5440:	20000044 	.word	0x20000044
    5444:	20000c30 	.word	0x20000c30

00005448 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    5448:	b538      	push	{r3, r4, r5, lr}
    544a:	4604      	mov	r4, r0
	__asm__ volatile(
    544c:	f04f 0320 	mov.w	r3, #32
    5450:	f3ef 8511 	mrs	r5, BASEPRI
    5454:	f383 8811 	msr	BASEPRI, r3
    5458:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    545c:	4815      	ldr	r0, [pc, #84]	; (54b4 <z_abort_timeout+0x6c>)
    545e:	f7fe fd25 	bl	3eac <z_spin_lock_valid>
    5462:	b940      	cbnz	r0, 5476 <z_abort_timeout+0x2e>
    5464:	4914      	ldr	r1, [pc, #80]	; (54b8 <z_abort_timeout+0x70>)
    5466:	4815      	ldr	r0, [pc, #84]	; (54bc <z_abort_timeout+0x74>)
    5468:	2281      	movs	r2, #129	; 0x81
    546a:	f002 ffa9 	bl	83c0 <printk>
    546e:	2181      	movs	r1, #129	; 0x81
    5470:	4811      	ldr	r0, [pc, #68]	; (54b8 <z_abort_timeout+0x70>)
    5472:	f003 f871 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    5476:	480f      	ldr	r0, [pc, #60]	; (54b4 <z_abort_timeout+0x6c>)
    5478:	f7fe fd34 	bl	3ee4 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    547c:	6823      	ldr	r3, [r4, #0]
    547e:	b1b3      	cbz	r3, 54ae <z_abort_timeout+0x66>
			remove_timeout(to);
    5480:	4620      	mov	r0, r4
    5482:	f7ff fee1 	bl	5248 <remove_timeout>
			ret = 0;
    5486:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5488:	480a      	ldr	r0, [pc, #40]	; (54b4 <z_abort_timeout+0x6c>)
    548a:	f7fe fd1d 	bl	3ec8 <z_spin_unlock_valid>
    548e:	b940      	cbnz	r0, 54a2 <z_abort_timeout+0x5a>
    5490:	4909      	ldr	r1, [pc, #36]	; (54b8 <z_abort_timeout+0x70>)
    5492:	480a      	ldr	r0, [pc, #40]	; (54bc <z_abort_timeout+0x74>)
    5494:	22ac      	movs	r2, #172	; 0xac
    5496:	f002 ff93 	bl	83c0 <printk>
    549a:	21ac      	movs	r1, #172	; 0xac
    549c:	4806      	ldr	r0, [pc, #24]	; (54b8 <z_abort_timeout+0x70>)
    549e:	f003 f85b 	bl	8558 <assert_post_action>
	__asm__ volatile(
    54a2:	f385 8811 	msr	BASEPRI, r5
    54a6:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    54aa:	4620      	mov	r0, r4
    54ac:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    54ae:	f06f 0415 	mvn.w	r4, #21
    54b2:	e7e9      	b.n	5488 <z_abort_timeout+0x40>
    54b4:	20000c7c 	.word	0x20000c7c
    54b8:	000092cc 	.word	0x000092cc
    54bc:	00009292 	.word	0x00009292

000054c0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    54c0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    54c2:	f04f 0320 	mov.w	r3, #32
    54c6:	f3ef 8511 	mrs	r5, BASEPRI
    54ca:	f383 8811 	msr	BASEPRI, r3
    54ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    54d2:	4813      	ldr	r0, [pc, #76]	; (5520 <z_get_next_timeout_expiry+0x60>)
    54d4:	f7fe fcea 	bl	3eac <z_spin_lock_valid>
    54d8:	b940      	cbnz	r0, 54ec <z_get_next_timeout_expiry+0x2c>
    54da:	4912      	ldr	r1, [pc, #72]	; (5524 <z_get_next_timeout_expiry+0x64>)
    54dc:	4812      	ldr	r0, [pc, #72]	; (5528 <z_get_next_timeout_expiry+0x68>)
    54de:	2281      	movs	r2, #129	; 0x81
    54e0:	f002 ff6e 	bl	83c0 <printk>
    54e4:	2181      	movs	r1, #129	; 0x81
    54e6:	480f      	ldr	r0, [pc, #60]	; (5524 <z_get_next_timeout_expiry+0x64>)
    54e8:	f003 f836 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    54ec:	480c      	ldr	r0, [pc, #48]	; (5520 <z_get_next_timeout_expiry+0x60>)
    54ee:	f7fe fcf9 	bl	3ee4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    54f2:	f7ff fec3 	bl	527c <next_timeout>
    54f6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    54f8:	4809      	ldr	r0, [pc, #36]	; (5520 <z_get_next_timeout_expiry+0x60>)
    54fa:	f7fe fce5 	bl	3ec8 <z_spin_unlock_valid>
    54fe:	b940      	cbnz	r0, 5512 <z_get_next_timeout_expiry+0x52>
    5500:	4908      	ldr	r1, [pc, #32]	; (5524 <z_get_next_timeout_expiry+0x64>)
    5502:	4809      	ldr	r0, [pc, #36]	; (5528 <z_get_next_timeout_expiry+0x68>)
    5504:	22ac      	movs	r2, #172	; 0xac
    5506:	f002 ff5b 	bl	83c0 <printk>
    550a:	21ac      	movs	r1, #172	; 0xac
    550c:	4805      	ldr	r0, [pc, #20]	; (5524 <z_get_next_timeout_expiry+0x64>)
    550e:	f003 f823 	bl	8558 <assert_post_action>
	__asm__ volatile(
    5512:	f385 8811 	msr	BASEPRI, r5
    5516:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    551a:	4620      	mov	r0, r4
    551c:	bd38      	pop	{r3, r4, r5, pc}
    551e:	bf00      	nop
    5520:	20000c7c 	.word	0x20000c7c
    5524:	000092cc 	.word	0x000092cc
    5528:	00009292 	.word	0x00009292

0000552c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    552c:	b570      	push	{r4, r5, r6, lr}
    552e:	4604      	mov	r4, r0
    5530:	460d      	mov	r5, r1
	__asm__ volatile(
    5532:	f04f 0320 	mov.w	r3, #32
    5536:	f3ef 8611 	mrs	r6, BASEPRI
    553a:	f383 8811 	msr	BASEPRI, r3
    553e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5542:	4816      	ldr	r0, [pc, #88]	; (559c <z_set_timeout_expiry+0x70>)
    5544:	f7fe fcb2 	bl	3eac <z_spin_lock_valid>
    5548:	b940      	cbnz	r0, 555c <z_set_timeout_expiry+0x30>
    554a:	4915      	ldr	r1, [pc, #84]	; (55a0 <z_set_timeout_expiry+0x74>)
    554c:	4815      	ldr	r0, [pc, #84]	; (55a4 <z_set_timeout_expiry+0x78>)
    554e:	2281      	movs	r2, #129	; 0x81
    5550:	f002 ff36 	bl	83c0 <printk>
    5554:	2181      	movs	r1, #129	; 0x81
    5556:	4812      	ldr	r0, [pc, #72]	; (55a0 <z_set_timeout_expiry+0x74>)
    5558:	f002 fffe 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    555c:	480f      	ldr	r0, [pc, #60]	; (559c <z_set_timeout_expiry+0x70>)
    555e:	f7fe fcc1 	bl	3ee4 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    5562:	f7ff fe8b 	bl	527c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    5566:	2801      	cmp	r0, #1
    5568:	dd05      	ble.n	5576 <z_set_timeout_expiry+0x4a>
    556a:	42a0      	cmp	r0, r4
    556c:	db03      	blt.n	5576 <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    556e:	4629      	mov	r1, r5
    5570:	4620      	mov	r0, r4
    5572:	f7fc fabf 	bl	1af4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5576:	4809      	ldr	r0, [pc, #36]	; (559c <z_set_timeout_expiry+0x70>)
    5578:	f7fe fca6 	bl	3ec8 <z_spin_unlock_valid>
    557c:	b940      	cbnz	r0, 5590 <z_set_timeout_expiry+0x64>
    557e:	4908      	ldr	r1, [pc, #32]	; (55a0 <z_set_timeout_expiry+0x74>)
    5580:	4808      	ldr	r0, [pc, #32]	; (55a4 <z_set_timeout_expiry+0x78>)
    5582:	22ac      	movs	r2, #172	; 0xac
    5584:	f002 ff1c 	bl	83c0 <printk>
    5588:	21ac      	movs	r1, #172	; 0xac
    558a:	4805      	ldr	r0, [pc, #20]	; (55a0 <z_set_timeout_expiry+0x74>)
    558c:	f002 ffe4 	bl	8558 <assert_post_action>
	__asm__ volatile(
    5590:	f386 8811 	msr	BASEPRI, r6
    5594:	f3bf 8f6f 	isb	sy
		}
	}
}
    5598:	bd70      	pop	{r4, r5, r6, pc}
    559a:	bf00      	nop
    559c:	20000c7c 	.word	0x20000c7c
    55a0:	000092cc 	.word	0x000092cc
    55a4:	00009292 	.word	0x00009292

000055a8 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    55a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    55ac:	b085      	sub	sp, #20
    55ae:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    55b0:	f7ff f9fe 	bl	49b0 <z_time_slice>
	__asm__ volatile(
    55b4:	f04f 0320 	mov.w	r3, #32
    55b8:	f3ef 8911 	mrs	r9, BASEPRI
    55bc:	f383 8811 	msr	BASEPRI, r3
    55c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    55c4:	484c      	ldr	r0, [pc, #304]	; (56f8 <sys_clock_announce+0x150>)
    55c6:	f7fe fc71 	bl	3eac <z_spin_lock_valid>
    55ca:	b940      	cbnz	r0, 55de <sys_clock_announce+0x36>
    55cc:	494b      	ldr	r1, [pc, #300]	; (56fc <sys_clock_announce+0x154>)
    55ce:	484c      	ldr	r0, [pc, #304]	; (5700 <sys_clock_announce+0x158>)
    55d0:	2281      	movs	r2, #129	; 0x81
    55d2:	f002 fef5 	bl	83c0 <printk>
    55d6:	2181      	movs	r1, #129	; 0x81
    55d8:	4848      	ldr	r0, [pc, #288]	; (56fc <sys_clock_announce+0x154>)
    55da:	f002 ffbd 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    55de:	4f49      	ldr	r7, [pc, #292]	; (5704 <sys_clock_announce+0x15c>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    55e0:	4e49      	ldr	r6, [pc, #292]	; (5708 <sys_clock_announce+0x160>)
    55e2:	46bb      	mov	fp, r7
    55e4:	4844      	ldr	r0, [pc, #272]	; (56f8 <sys_clock_announce+0x150>)
	return list->head == list;
    55e6:	f8df a124 	ldr.w	sl, [pc, #292]	; 570c <sys_clock_announce+0x164>
    55ea:	f7fe fc7b 	bl	3ee4 <z_spin_lock_set_owner>
    55ee:	6034      	str	r4, [r6, #0]
    55f0:	f8d6 c000 	ldr.w	ip, [r6]
    55f4:	f8da 8000 	ldr.w	r8, [sl]
    55f8:	4662      	mov	r2, ip
    55fa:	e9d7 3400 	ldrd	r3, r4, [r7]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    55fe:	45d0      	cmp	r8, sl
    5600:	e9cd 3402 	strd	r3, r4, [sp, #8]
    5604:	ea4f 73e2 	mov.w	r3, r2, asr #31
    5608:	e9cd 2300 	strd	r2, r3, [sp]
    560c:	d011      	beq.n	5632 <sys_clock_announce+0x8a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    560e:	f1b8 0f00 	cmp.w	r8, #0
    5612:	d00e      	beq.n	5632 <sys_clock_announce+0x8a>
    5614:	e9d8 1204 	ldrd	r1, r2, [r8, #16]
    5618:	e9dd 3400 	ldrd	r3, r4, [sp]
    561c:	428b      	cmp	r3, r1
    561e:	eb74 0302 	sbcs.w	r3, r4, r2
    5622:	da2a      	bge.n	567a <sys_clock_announce+0xd2>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5624:	9b00      	ldr	r3, [sp, #0]
    5626:	1ac8      	subs	r0, r1, r3
    5628:	9b01      	ldr	r3, [sp, #4]
    562a:	eb62 0103 	sbc.w	r1, r2, r3
    562e:	e9c8 0104 	strd	r0, r1, [r8, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    5632:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    5634:	9b00      	ldr	r3, [sp, #0]
    5636:	9a02      	ldr	r2, [sp, #8]
    5638:	9903      	ldr	r1, [sp, #12]
    563a:	189a      	adds	r2, r3, r2
    563c:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    563e:	6034      	str	r4, [r6, #0]
	curr_tick += announce_remaining;
    5640:	eb41 0303 	adc.w	r3, r1, r3
    5644:	e9cb 2300 	strd	r2, r3, [fp]

	sys_clock_set_timeout(next_timeout(), false);
    5648:	f7ff fe18 	bl	527c <next_timeout>
    564c:	4621      	mov	r1, r4
    564e:	f7fc fa51 	bl	1af4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5652:	4829      	ldr	r0, [pc, #164]	; (56f8 <sys_clock_announce+0x150>)
    5654:	f7fe fc38 	bl	3ec8 <z_spin_unlock_valid>
    5658:	b940      	cbnz	r0, 566c <sys_clock_announce+0xc4>
    565a:	4928      	ldr	r1, [pc, #160]	; (56fc <sys_clock_announce+0x154>)
    565c:	4828      	ldr	r0, [pc, #160]	; (5700 <sys_clock_announce+0x158>)
    565e:	22ac      	movs	r2, #172	; 0xac
    5660:	f002 feae 	bl	83c0 <printk>
    5664:	21ac      	movs	r1, #172	; 0xac
    5666:	4825      	ldr	r0, [pc, #148]	; (56fc <sys_clock_announce+0x154>)
    5668:	f002 ff76 	bl	8558 <assert_post_action>
	__asm__ volatile(
    566c:	f389 8811 	msr	BASEPRI, r9
    5670:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5674:	b005      	add	sp, #20
    5676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
    567a:	2200      	movs	r2, #0
		curr_tick += dt;
    567c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
		t->dticks = 0;
    5680:	2300      	movs	r3, #0
		curr_tick += dt;
    5682:	1864      	adds	r4, r4, r1
		announce_remaining -= dt;
    5684:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    5688:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
		announce_remaining -= dt;
    568c:	6030      	str	r0, [r6, #0]
		t->dticks = 0;
    568e:	e9c8 2304 	strd	r2, r3, [r8, #16]
		remove_timeout(t);
    5692:	4640      	mov	r0, r8
		curr_tick += dt;
    5694:	e9c7 4500 	strd	r4, r5, [r7]
		remove_timeout(t);
    5698:	f7ff fdd6 	bl	5248 <remove_timeout>
    569c:	4816      	ldr	r0, [pc, #88]	; (56f8 <sys_clock_announce+0x150>)
    569e:	f7fe fc13 	bl	3ec8 <z_spin_unlock_valid>
    56a2:	b940      	cbnz	r0, 56b6 <sys_clock_announce+0x10e>
    56a4:	4915      	ldr	r1, [pc, #84]	; (56fc <sys_clock_announce+0x154>)
    56a6:	4816      	ldr	r0, [pc, #88]	; (5700 <sys_clock_announce+0x158>)
    56a8:	22ac      	movs	r2, #172	; 0xac
    56aa:	f002 fe89 	bl	83c0 <printk>
    56ae:	21ac      	movs	r1, #172	; 0xac
    56b0:	4812      	ldr	r0, [pc, #72]	; (56fc <sys_clock_announce+0x154>)
    56b2:	f002 ff51 	bl	8558 <assert_post_action>
    56b6:	f389 8811 	msr	BASEPRI, r9
    56ba:	f3bf 8f6f 	isb	sy
		t->fn(t);
    56be:	4640      	mov	r0, r8
    56c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
    56c4:	4798      	blx	r3
	__asm__ volatile(
    56c6:	f04f 0320 	mov.w	r3, #32
    56ca:	f3ef 8911 	mrs	r9, BASEPRI
    56ce:	f383 8811 	msr	BASEPRI, r3
    56d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    56d6:	4808      	ldr	r0, [pc, #32]	; (56f8 <sys_clock_announce+0x150>)
    56d8:	f7fe fbe8 	bl	3eac <z_spin_lock_valid>
    56dc:	b940      	cbnz	r0, 56f0 <sys_clock_announce+0x148>
    56de:	4907      	ldr	r1, [pc, #28]	; (56fc <sys_clock_announce+0x154>)
    56e0:	4807      	ldr	r0, [pc, #28]	; (5700 <sys_clock_announce+0x158>)
    56e2:	2281      	movs	r2, #129	; 0x81
    56e4:	f002 fe6c 	bl	83c0 <printk>
    56e8:	2181      	movs	r1, #129	; 0x81
    56ea:	4804      	ldr	r0, [pc, #16]	; (56fc <sys_clock_announce+0x154>)
    56ec:	f002 ff34 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    56f0:	4801      	ldr	r0, [pc, #4]	; (56f8 <sys_clock_announce+0x150>)
    56f2:	f7fe fbf7 	bl	3ee4 <z_spin_lock_set_owner>
	return k;
    56f6:	e77b      	b.n	55f0 <sys_clock_announce+0x48>
    56f8:	20000c7c 	.word	0x20000c7c
    56fc:	000092cc 	.word	0x000092cc
    5700:	00009292 	.word	0x00009292
    5704:	20000270 	.word	0x20000270
    5708:	20000c78 	.word	0x20000c78
    570c:	20000044 	.word	0x20000044

00005710 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    5710:	b570      	push	{r4, r5, r6, lr}
    5712:	f04f 0320 	mov.w	r3, #32
    5716:	f3ef 8611 	mrs	r6, BASEPRI
    571a:	f383 8811 	msr	BASEPRI, r3
    571e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5722:	4816      	ldr	r0, [pc, #88]	; (577c <sys_clock_tick_get+0x6c>)
    5724:	f7fe fbc2 	bl	3eac <z_spin_lock_valid>
    5728:	b940      	cbnz	r0, 573c <sys_clock_tick_get+0x2c>
    572a:	4915      	ldr	r1, [pc, #84]	; (5780 <sys_clock_tick_get+0x70>)
    572c:	4815      	ldr	r0, [pc, #84]	; (5784 <sys_clock_tick_get+0x74>)
    572e:	2281      	movs	r2, #129	; 0x81
    5730:	f002 fe46 	bl	83c0 <printk>
    5734:	2181      	movs	r1, #129	; 0x81
    5736:	4812      	ldr	r0, [pc, #72]	; (5780 <sys_clock_tick_get+0x70>)
    5738:	f002 ff0e 	bl	8558 <assert_post_action>
	z_spin_lock_set_owner(l);
    573c:	480f      	ldr	r0, [pc, #60]	; (577c <sys_clock_tick_get+0x6c>)
    573e:	f7fe fbd1 	bl	3ee4 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    5742:	f7fc fa09 	bl	1b58 <sys_clock_elapsed>
    5746:	4b10      	ldr	r3, [pc, #64]	; (5788 <sys_clock_tick_get+0x78>)
    5748:	e9d3 4500 	ldrd	r4, r5, [r3]
    574c:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    574e:	480b      	ldr	r0, [pc, #44]	; (577c <sys_clock_tick_get+0x6c>)
    5750:	f145 0500 	adc.w	r5, r5, #0
    5754:	f7fe fbb8 	bl	3ec8 <z_spin_unlock_valid>
    5758:	b940      	cbnz	r0, 576c <sys_clock_tick_get+0x5c>
    575a:	4909      	ldr	r1, [pc, #36]	; (5780 <sys_clock_tick_get+0x70>)
    575c:	4809      	ldr	r0, [pc, #36]	; (5784 <sys_clock_tick_get+0x74>)
    575e:	22ac      	movs	r2, #172	; 0xac
    5760:	f002 fe2e 	bl	83c0 <printk>
    5764:	21ac      	movs	r1, #172	; 0xac
    5766:	4806      	ldr	r0, [pc, #24]	; (5780 <sys_clock_tick_get+0x70>)
    5768:	f002 fef6 	bl	8558 <assert_post_action>
	__asm__ volatile(
    576c:	f386 8811 	msr	BASEPRI, r6
    5770:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    5774:	4620      	mov	r0, r4
    5776:	4629      	mov	r1, r5
    5778:	bd70      	pop	{r4, r5, r6, pc}
    577a:	bf00      	nop
    577c:	20000c7c 	.word	0x20000c7c
    5780:	000092cc 	.word	0x000092cc
    5784:	00009292 	.word	0x00009292
    5788:	20000270 	.word	0x20000270

0000578c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    578c:	4a02      	ldr	r2, [pc, #8]	; (5798 <boot_banner+0xc>)
    578e:	4903      	ldr	r1, [pc, #12]	; (579c <boot_banner+0x10>)
    5790:	4803      	ldr	r0, [pc, #12]	; (57a0 <boot_banner+0x14>)
    5792:	f002 be15 	b.w	83c0 <printk>
    5796:	bf00      	nop
    5798:	0000943a 	.word	0x0000943a
    579c:	0000a221 	.word	0x0000a221
    57a0:	0000a231 	.word	0x0000a231

000057a4 <nrf_cc3xx_platform_init>:
    57a4:	b510      	push	{r4, lr}
    57a6:	4c0c      	ldr	r4, [pc, #48]	; (57d8 <nrf_cc3xx_platform_init+0x34>)
    57a8:	6823      	ldr	r3, [r4, #0]
    57aa:	b113      	cbz	r3, 57b2 <nrf_cc3xx_platform_init+0xe>
    57ac:	4b0b      	ldr	r3, [pc, #44]	; (57dc <nrf_cc3xx_platform_init+0x38>)
    57ae:	681b      	ldr	r3, [r3, #0]
    57b0:	b92b      	cbnz	r3, 57be <nrf_cc3xx_platform_init+0x1a>
    57b2:	f000 faa5 	bl	5d00 <CC_LibInit>
    57b6:	b930      	cbnz	r0, 57c6 <nrf_cc3xx_platform_init+0x22>
    57b8:	2201      	movs	r2, #1
    57ba:	4b08      	ldr	r3, [pc, #32]	; (57dc <nrf_cc3xx_platform_init+0x38>)
    57bc:	601a      	str	r2, [r3, #0]
    57be:	2301      	movs	r3, #1
    57c0:	2000      	movs	r0, #0
    57c2:	6023      	str	r3, [r4, #0]
    57c4:	bd10      	pop	{r4, pc}
    57c6:	3801      	subs	r0, #1
    57c8:	2807      	cmp	r0, #7
    57ca:	d901      	bls.n	57d0 <nrf_cc3xx_platform_init+0x2c>
    57cc:	4804      	ldr	r0, [pc, #16]	; (57e0 <nrf_cc3xx_platform_init+0x3c>)
    57ce:	bd10      	pop	{r4, pc}
    57d0:	4b04      	ldr	r3, [pc, #16]	; (57e4 <nrf_cc3xx_platform_init+0x40>)
    57d2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    57d6:	bd10      	pop	{r4, pc}
    57d8:	20000c80 	.word	0x20000c80
    57dc:	20000c84 	.word	0x20000c84
    57e0:	ffff8ffe 	.word	0xffff8ffe
    57e4:	000090e4 	.word	0x000090e4

000057e8 <nrf_cc3xx_platform_abort>:
    57e8:	f3bf 8f4f 	dsb	sy
    57ec:	4905      	ldr	r1, [pc, #20]	; (5804 <nrf_cc3xx_platform_abort+0x1c>)
    57ee:	4b06      	ldr	r3, [pc, #24]	; (5808 <nrf_cc3xx_platform_abort+0x20>)
    57f0:	68ca      	ldr	r2, [r1, #12]
    57f2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    57f6:	4313      	orrs	r3, r2
    57f8:	60cb      	str	r3, [r1, #12]
    57fa:	f3bf 8f4f 	dsb	sy
    57fe:	bf00      	nop
    5800:	e7fd      	b.n	57fe <nrf_cc3xx_platform_abort+0x16>
    5802:	bf00      	nop
    5804:	e000ed00 	.word	0xe000ed00
    5808:	05fa0004 	.word	0x05fa0004

0000580c <CC_PalAbort>:
    580c:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    5810:	2100      	movs	r1, #0
    5812:	b430      	push	{r4, r5}
    5814:	4a08      	ldr	r2, [pc, #32]	; (5838 <CC_PalAbort+0x2c>)
    5816:	4c09      	ldr	r4, [pc, #36]	; (583c <CC_PalAbort+0x30>)
    5818:	4d09      	ldr	r5, [pc, #36]	; (5840 <CC_PalAbort+0x34>)
    581a:	6023      	str	r3, [r4, #0]
    581c:	602b      	str	r3, [r5, #0]
    581e:	6013      	str	r3, [r2, #0]
    5820:	60e3      	str	r3, [r4, #12]
    5822:	60eb      	str	r3, [r5, #12]
    5824:	60d3      	str	r3, [r2, #12]
    5826:	61a3      	str	r3, [r4, #24]
    5828:	4a06      	ldr	r2, [pc, #24]	; (5844 <CC_PalAbort+0x38>)
    582a:	4c07      	ldr	r4, [pc, #28]	; (5848 <CC_PalAbort+0x3c>)
    582c:	61ab      	str	r3, [r5, #24]
    582e:	6863      	ldr	r3, [r4, #4]
    5830:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    5834:	bc30      	pop	{r4, r5}
    5836:	4718      	bx	r3
    5838:	50845408 	.word	0x50845408
    583c:	50845400 	.word	0x50845400
    5840:	50845404 	.word	0x50845404
    5844:	50844000 	.word	0x50844000
    5848:	2000004c 	.word	0x2000004c

0000584c <nrf_cc3xx_platform_set_abort>:
    584c:	4b02      	ldr	r3, [pc, #8]	; (5858 <nrf_cc3xx_platform_set_abort+0xc>)
    584e:	e9d0 1200 	ldrd	r1, r2, [r0]
    5852:	e9c3 1200 	strd	r1, r2, [r3]
    5856:	4770      	bx	lr
    5858:	2000004c 	.word	0x2000004c

0000585c <nrf_cc3xx_platform_ctr_drbg_init>:
    585c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5860:	4c15      	ldr	r4, [pc, #84]	; (58b8 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
    5862:	f8df 805c 	ldr.w	r8, [pc, #92]	; 58c0 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
    5866:	2800      	cmp	r0, #0
    5868:	bf18      	it	ne
    586a:	4604      	movne	r4, r0
    586c:	6820      	ldr	r0, [r4, #0]
    586e:	b083      	sub	sp, #12
    5870:	4540      	cmp	r0, r8
    5872:	d01d      	beq.n	58b0 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
    5874:	4616      	mov	r6, r2
    5876:	460d      	mov	r5, r1
    5878:	4620      	mov	r0, r4
    587a:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    587e:	f104 0904 	add.w	r9, r4, #4
    5882:	f000 fe4f 	bl	6524 <mbedtls_platform_zeroize>
    5886:	f504 778c 	add.w	r7, r4, #280	; 0x118
    588a:	4648      	mov	r0, r9
    588c:	f000 f91c 	bl	5ac8 <cc_mbedtls_entropy_init>
    5890:	4638      	mov	r0, r7
    5892:	f001 fa27 	bl	6ce4 <cc_mbedtls_ctr_drbg_init>
    5896:	464a      	mov	r2, r9
    5898:	4638      	mov	r0, r7
    589a:	462b      	mov	r3, r5
    589c:	4907      	ldr	r1, [pc, #28]	; (58bc <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
    589e:	9600      	str	r6, [sp, #0]
    58a0:	f001 fa32 	bl	6d08 <cc_mbedtls_ctr_drbg_seed>
    58a4:	b908      	cbnz	r0, 58aa <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
    58a6:	f8c4 8000 	str.w	r8, [r4]
    58aa:	b003      	add	sp, #12
    58ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    58b0:	2000      	movs	r0, #0
    58b2:	b003      	add	sp, #12
    58b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    58b8:	20000c88 	.word	0x20000c88
    58bc:	00005b49 	.word	0x00005b49
    58c0:	5ac9bca5 	.word	0x5ac9bca5

000058c4 <nrf_cc3xx_platform_ctr_drbg_get>:
    58c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    58c6:	4c0d      	ldr	r4, [pc, #52]	; (58fc <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
    58c8:	4e0d      	ldr	r6, [pc, #52]	; (5900 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
    58ca:	2800      	cmp	r0, #0
    58cc:	bf08      	it	eq
    58ce:	4620      	moveq	r0, r4
    58d0:	6807      	ldr	r7, [r0, #0]
    58d2:	b083      	sub	sp, #12
    58d4:	42b7      	cmp	r7, r6
    58d6:	d10e      	bne.n	58f6 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
    58d8:	2600      	movs	r6, #0
    58da:	461d      	mov	r5, r3
    58dc:	f500 708c 	add.w	r0, r0, #280	; 0x118
    58e0:	4633      	mov	r3, r6
    58e2:	9600      	str	r6, [sp, #0]
    58e4:	4614      	mov	r4, r2
    58e6:	f001 fa61 	bl	6dac <cc_mbedtls_ctr_drbg_random_with_add>
    58ea:	2800      	cmp	r0, #0
    58ec:	bf18      	it	ne
    58ee:	4634      	movne	r4, r6
    58f0:	602c      	str	r4, [r5, #0]
    58f2:	b003      	add	sp, #12
    58f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58f6:	4803      	ldr	r0, [pc, #12]	; (5904 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
    58f8:	e7fb      	b.n	58f2 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
    58fa:	bf00      	nop
    58fc:	20000c88 	.word	0x20000c88
    5900:	5ac9bca5 	.word	0x5ac9bca5
    5904:	ffff8fe8 	.word	0xffff8fe8

00005908 <mutex_unlock>:
    5908:	b148      	cbz	r0, 591e <mutex_unlock+0x16>
    590a:	6843      	ldr	r3, [r0, #4]
    590c:	b12b      	cbz	r3, 591a <mutex_unlock+0x12>
    590e:	f3bf 8f5f 	dmb	sy
    5912:	2300      	movs	r3, #0
    5914:	6003      	str	r3, [r0, #0]
    5916:	4618      	mov	r0, r3
    5918:	4770      	bx	lr
    591a:	4802      	ldr	r0, [pc, #8]	; (5924 <mutex_unlock+0x1c>)
    591c:	4770      	bx	lr
    591e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5922:	4770      	bx	lr
    5924:	ffff8fea 	.word	0xffff8fea

00005928 <mutex_free>:
    5928:	b510      	push	{r4, lr}
    592a:	4604      	mov	r4, r0
    592c:	b128      	cbz	r0, 593a <mutex_free+0x12>
    592e:	6863      	ldr	r3, [r4, #4]
    5930:	b113      	cbz	r3, 5938 <mutex_free+0x10>
    5932:	2300      	movs	r3, #0
    5934:	6023      	str	r3, [r4, #0]
    5936:	6063      	str	r3, [r4, #4]
    5938:	bd10      	pop	{r4, pc}
    593a:	4b02      	ldr	r3, [pc, #8]	; (5944 <mutex_free+0x1c>)
    593c:	4802      	ldr	r0, [pc, #8]	; (5948 <mutex_free+0x20>)
    593e:	685b      	ldr	r3, [r3, #4]
    5940:	4798      	blx	r3
    5942:	e7f4      	b.n	592e <mutex_free+0x6>
    5944:	2000004c 	.word	0x2000004c
    5948:	00009104 	.word	0x00009104

0000594c <mutex_init>:
    594c:	b510      	push	{r4, lr}
    594e:	4604      	mov	r4, r0
    5950:	b130      	cbz	r0, 5960 <mutex_init+0x14>
    5952:	2200      	movs	r2, #0
    5954:	6863      	ldr	r3, [r4, #4]
    5956:	6022      	str	r2, [r4, #0]
    5958:	f043 0301 	orr.w	r3, r3, #1
    595c:	6063      	str	r3, [r4, #4]
    595e:	bd10      	pop	{r4, pc}
    5960:	4801      	ldr	r0, [pc, #4]	; (5968 <mutex_init+0x1c>)
    5962:	f7ff ff53 	bl	580c <CC_PalAbort>
    5966:	e7f4      	b.n	5952 <mutex_init+0x6>
    5968:	0000912c 	.word	0x0000912c

0000596c <mutex_lock>:
    596c:	b180      	cbz	r0, 5990 <mutex_lock+0x24>
    596e:	6843      	ldr	r3, [r0, #4]
    5970:	b163      	cbz	r3, 598c <mutex_lock+0x20>
    5972:	2201      	movs	r2, #1
    5974:	e8d0 3fef 	ldaex	r3, [r0]
    5978:	e8c0 2fe1 	stlex	r1, r2, [r0]
    597c:	2900      	cmp	r1, #0
    597e:	d1f9      	bne.n	5974 <mutex_lock+0x8>
    5980:	2b01      	cmp	r3, #1
    5982:	d0f7      	beq.n	5974 <mutex_lock+0x8>
    5984:	f3bf 8f5f 	dmb	sy
    5988:	2000      	movs	r0, #0
    598a:	4770      	bx	lr
    598c:	4802      	ldr	r0, [pc, #8]	; (5998 <mutex_lock+0x2c>)
    598e:	4770      	bx	lr
    5990:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5994:	4770      	bx	lr
    5996:	bf00      	nop
    5998:	ffff8fea 	.word	0xffff8fea

0000599c <nrf_cc3xx_platform_set_mutexes>:
    599c:	b470      	push	{r4, r5, r6}
    599e:	4b0b      	ldr	r3, [pc, #44]	; (59cc <nrf_cc3xx_platform_set_mutexes+0x30>)
    59a0:	6806      	ldr	r6, [r0, #0]
    59a2:	68c2      	ldr	r2, [r0, #12]
    59a4:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    59a8:	e9c3 4202 	strd	r4, r2, [r3, #8]
    59ac:	e9c3 6500 	strd	r6, r5, [r3]
    59b0:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    59b4:	680e      	ldr	r6, [r1, #0]
    59b6:	4b06      	ldr	r3, [pc, #24]	; (59d0 <nrf_cc3xx_platform_set_mutexes+0x34>)
    59b8:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    59bc:	e9c3 6500 	strd	r6, r5, [r3]
    59c0:	e9c3 4002 	strd	r4, r0, [r3, #8]
    59c4:	611a      	str	r2, [r3, #16]
    59c6:	bc70      	pop	{r4, r5, r6}
    59c8:	4770      	bx	lr
    59ca:	bf00      	nop
    59cc:	2000005c 	.word	0x2000005c
    59d0:	2000006c 	.word	0x2000006c

000059d4 <entropy_update>:
    59d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    59d8:	2b20      	cmp	r3, #32
    59da:	461d      	mov	r5, r3
    59dc:	4606      	mov	r6, r0
    59de:	4689      	mov	r9, r1
    59e0:	4690      	mov	r8, r2
    59e2:	b08b      	sub	sp, #44	; 0x2c
    59e4:	d826      	bhi.n	5a34 <entropy_update+0x60>
    59e6:	b2db      	uxtb	r3, r3
    59e8:	af02      	add	r7, sp, #8
    59ea:	6831      	ldr	r1, [r6, #0]
    59ec:	f88d 9004 	strb.w	r9, [sp, #4]
    59f0:	f88d 3005 	strb.w	r3, [sp, #5]
    59f4:	f106 0904 	add.w	r9, r6, #4
    59f8:	b921      	cbnz	r1, 5a04 <entropy_update+0x30>
    59fa:	4648      	mov	r0, r9
    59fc:	f000 fe3c 	bl	6678 <cc_mbedtls_sha256_starts_ret>
    5a00:	4604      	mov	r4, r0
    5a02:	b940      	cbnz	r0, 5a16 <entropy_update+0x42>
    5a04:	2301      	movs	r3, #1
    5a06:	2202      	movs	r2, #2
    5a08:	4648      	mov	r0, r9
    5a0a:	6033      	str	r3, [r6, #0]
    5a0c:	a901      	add	r1, sp, #4
    5a0e:	f000 fe47 	bl	66a0 <cc_mbedtls_sha256_update_ret>
    5a12:	4604      	mov	r4, r0
    5a14:	b138      	cbz	r0, 5a26 <entropy_update+0x52>
    5a16:	4638      	mov	r0, r7
    5a18:	2120      	movs	r1, #32
    5a1a:	f000 fd83 	bl	6524 <mbedtls_platform_zeroize>
    5a1e:	4620      	mov	r0, r4
    5a20:	b00b      	add	sp, #44	; 0x2c
    5a22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5a26:	462a      	mov	r2, r5
    5a28:	4641      	mov	r1, r8
    5a2a:	4648      	mov	r0, r9
    5a2c:	f000 fe38 	bl	66a0 <cc_mbedtls_sha256_update_ret>
    5a30:	4604      	mov	r4, r0
    5a32:	e7f0      	b.n	5a16 <entropy_update+0x42>
    5a34:	af02      	add	r7, sp, #8
    5a36:	4619      	mov	r1, r3
    5a38:	4610      	mov	r0, r2
    5a3a:	2300      	movs	r3, #0
    5a3c:	463a      	mov	r2, r7
    5a3e:	f001 fa8f 	bl	6f60 <cc_mbedtls_sha256_ret>
    5a42:	4604      	mov	r4, r0
    5a44:	2800      	cmp	r0, #0
    5a46:	d1e6      	bne.n	5a16 <entropy_update+0x42>
    5a48:	2320      	movs	r3, #32
    5a4a:	46b8      	mov	r8, r7
    5a4c:	461d      	mov	r5, r3
    5a4e:	e7cc      	b.n	59ea <entropy_update+0x16>

00005a50 <entropy_gather_internal.part.0>:
    5a50:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a52:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    5a56:	b0a7      	sub	sp, #156	; 0x9c
    5a58:	2b00      	cmp	r3, #0
    5a5a:	bfd8      	it	le
    5a5c:	ae02      	addle	r6, sp, #8
    5a5e:	dd2c      	ble.n	5aba <entropy_gather_internal.part.0+0x6a>
    5a60:	4605      	mov	r5, r0
    5a62:	2300      	movs	r3, #0
    5a64:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    5a68:	ae02      	add	r6, sp, #8
    5a6a:	9301      	str	r3, [sp, #4]
    5a6c:	f1a4 0701 	sub.w	r7, r4, #1
    5a70:	4631      	mov	r1, r6
    5a72:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
    5a76:	2290      	movs	r2, #144	; 0x90
    5a78:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
    5a7c:	ab01      	add	r3, sp, #4
    5a7e:	fab7 f787 	clz	r7, r7
    5a82:	47a0      	blx	r4
    5a84:	097f      	lsrs	r7, r7, #5
    5a86:	4604      	mov	r4, r0
    5a88:	b910      	cbnz	r0, 5a90 <entropy_gather_internal.part.0+0x40>
    5a8a:	9b01      	ldr	r3, [sp, #4]
    5a8c:	b93b      	cbnz	r3, 5a9e <entropy_gather_internal.part.0+0x4e>
    5a8e:	b1a7      	cbz	r7, 5aba <entropy_gather_internal.part.0+0x6a>
    5a90:	4630      	mov	r0, r6
    5a92:	2190      	movs	r1, #144	; 0x90
    5a94:	f000 fd46 	bl	6524 <mbedtls_platform_zeroize>
    5a98:	4620      	mov	r0, r4
    5a9a:	b027      	add	sp, #156	; 0x9c
    5a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a9e:	4601      	mov	r1, r0
    5aa0:	4632      	mov	r2, r6
    5aa2:	4628      	mov	r0, r5
    5aa4:	f7ff ff96 	bl	59d4 <entropy_update>
    5aa8:	b950      	cbnz	r0, 5ac0 <entropy_gather_internal.part.0+0x70>
    5aaa:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    5aae:	9a01      	ldr	r2, [sp, #4]
    5ab0:	4413      	add	r3, r2
    5ab2:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
    5ab6:	2f00      	cmp	r7, #0
    5ab8:	d1ea      	bne.n	5a90 <entropy_gather_internal.part.0+0x40>
    5aba:	f06f 043c 	mvn.w	r4, #60	; 0x3c
    5abe:	e7e7      	b.n	5a90 <entropy_gather_internal.part.0+0x40>
    5ac0:	4604      	mov	r4, r0
    5ac2:	4620      	mov	r0, r4
    5ac4:	b027      	add	sp, #156	; 0x9c
    5ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005ac8 <cc_mbedtls_entropy_init>:
    5ac8:	b570      	push	{r4, r5, r6, lr}
    5aca:	2500      	movs	r5, #0
    5acc:	4604      	mov	r4, r0
    5ace:	4629      	mov	r1, r5
    5ad0:	2214      	movs	r2, #20
    5ad2:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
    5ad6:	30f8      	adds	r0, #248	; 0xf8
    5ad8:	f002 fe91 	bl	87fe <memset>
    5adc:	4b16      	ldr	r3, [pc, #88]	; (5b38 <cc_mbedtls_entropy_init+0x70>)
    5ade:	f504 7686 	add.w	r6, r4, #268	; 0x10c
    5ae2:	681b      	ldr	r3, [r3, #0]
    5ae4:	4630      	mov	r0, r6
    5ae6:	4798      	blx	r3
    5ae8:	4620      	mov	r0, r4
    5aea:	f840 5b04 	str.w	r5, [r0], #4
    5aee:	f000 fda9 	bl	6644 <cc_mbedtls_sha256_init>
    5af2:	4b12      	ldr	r3, [pc, #72]	; (5b3c <cc_mbedtls_entropy_init+0x74>)
    5af4:	4630      	mov	r0, r6
    5af6:	681b      	ldr	r3, [r3, #0]
    5af8:	4798      	blx	r3
    5afa:	b9d8      	cbnz	r0, 5b34 <cc_mbedtls_entropy_init+0x6c>
    5afc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    5b00:	42ab      	cmp	r3, r5
    5b02:	dc11      	bgt.n	5b28 <cc_mbedtls_entropy_init+0x60>
    5b04:	2101      	movs	r1, #1
    5b06:	2520      	movs	r5, #32
    5b08:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    5b0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    5b10:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    5b14:	480a      	ldr	r0, [pc, #40]	; (5b40 <cc_mbedtls_entropy_init+0x78>)
    5b16:	440b      	add	r3, r1
    5b18:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
    5b1c:	f8c2 00f8 	str.w	r0, [r2, #248]	; 0xf8
    5b20:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
    5b24:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
    5b28:	4b06      	ldr	r3, [pc, #24]	; (5b44 <cc_mbedtls_entropy_init+0x7c>)
    5b2a:	4630      	mov	r0, r6
    5b2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5b30:	681b      	ldr	r3, [r3, #0]
    5b32:	4718      	bx	r3
    5b34:	bd70      	pop	{r4, r5, r6, pc}
    5b36:	bf00      	nop
    5b38:	200000b0 	.word	0x200000b0
    5b3c:	200000b4 	.word	0x200000b4
    5b40:	00006539 	.word	0x00006539
    5b44:	200000b8 	.word	0x200000b8

00005b48 <cc_mbedtls_entropy_func>:
    5b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b4c:	2a20      	cmp	r2, #32
    5b4e:	b088      	sub	sp, #32
    5b50:	d878      	bhi.n	5c44 <cc_mbedtls_entropy_func+0xfc>
    5b52:	4b3e      	ldr	r3, [pc, #248]	; (5c4c <cc_mbedtls_entropy_func+0x104>)
    5b54:	f500 7986 	add.w	r9, r0, #268	; 0x10c
    5b58:	4604      	mov	r4, r0
    5b5a:	681b      	ldr	r3, [r3, #0]
    5b5c:	4648      	mov	r0, r9
    5b5e:	4617      	mov	r7, r2
    5b60:	4688      	mov	r8, r1
    5b62:	4798      	blx	r3
    5b64:	4605      	mov	r5, r0
    5b66:	bb40      	cbnz	r0, 5bba <cc_mbedtls_entropy_func+0x72>
    5b68:	f240 1601 	movw	r6, #257	; 0x101
    5b6c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    5b70:	2b00      	cmp	r3, #0
    5b72:	d063      	beq.n	5c3c <cc_mbedtls_entropy_func+0xf4>
    5b74:	4620      	mov	r0, r4
    5b76:	f7ff ff6b 	bl	5a50 <entropy_gather_internal.part.0>
    5b7a:	4605      	mov	r5, r0
    5b7c:	2800      	cmp	r0, #0
    5b7e:	d15f      	bne.n	5c40 <cc_mbedtls_entropy_func+0xf8>
    5b80:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    5b84:	2b00      	cmp	r3, #0
    5b86:	dd07      	ble.n	5b98 <cc_mbedtls_entropy_func+0x50>
    5b88:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
    5b8c:	4290      	cmp	r0, r2
    5b8e:	d303      	bcc.n	5b98 <cc_mbedtls_entropy_func+0x50>
    5b90:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    5b94:	2a01      	cmp	r2, #1
    5b96:	d014      	beq.n	5bc2 <cc_mbedtls_entropy_func+0x7a>
    5b98:	3e01      	subs	r6, #1
    5b9a:	d1e9      	bne.n	5b70 <cc_mbedtls_entropy_func+0x28>
    5b9c:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    5ba0:	466e      	mov	r6, sp
    5ba2:	4630      	mov	r0, r6
    5ba4:	2120      	movs	r1, #32
    5ba6:	f000 fcbd 	bl	6524 <mbedtls_platform_zeroize>
    5baa:	4b29      	ldr	r3, [pc, #164]	; (5c50 <cc_mbedtls_entropy_func+0x108>)
    5bac:	4648      	mov	r0, r9
    5bae:	681b      	ldr	r3, [r3, #0]
    5bb0:	4798      	blx	r3
    5bb2:	2800      	cmp	r0, #0
    5bb4:	bf18      	it	ne
    5bb6:	f06f 051d 	mvnne.w	r5, #29
    5bba:	4628      	mov	r0, r5
    5bbc:	b008      	add	sp, #32
    5bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5bc2:	281f      	cmp	r0, #31
    5bc4:	d9e8      	bls.n	5b98 <cc_mbedtls_entropy_func+0x50>
    5bc6:	466e      	mov	r6, sp
    5bc8:	4629      	mov	r1, r5
    5bca:	2220      	movs	r2, #32
    5bcc:	4630      	mov	r0, r6
    5bce:	f104 0a04 	add.w	sl, r4, #4
    5bd2:	f002 fe14 	bl	87fe <memset>
    5bd6:	4631      	mov	r1, r6
    5bd8:	4650      	mov	r0, sl
    5bda:	f000 fd69 	bl	66b0 <cc_mbedtls_sha256_finish_ret>
    5bde:	4605      	mov	r5, r0
    5be0:	2800      	cmp	r0, #0
    5be2:	d1de      	bne.n	5ba2 <cc_mbedtls_entropy_func+0x5a>
    5be4:	4650      	mov	r0, sl
    5be6:	f000 fd41 	bl	666c <cc_mbedtls_sha256_free>
    5bea:	4650      	mov	r0, sl
    5bec:	f000 fd2a 	bl	6644 <cc_mbedtls_sha256_init>
    5bf0:	4629      	mov	r1, r5
    5bf2:	4650      	mov	r0, sl
    5bf4:	f000 fd40 	bl	6678 <cc_mbedtls_sha256_starts_ret>
    5bf8:	4605      	mov	r5, r0
    5bfa:	2800      	cmp	r0, #0
    5bfc:	d1d1      	bne.n	5ba2 <cc_mbedtls_entropy_func+0x5a>
    5bfe:	4650      	mov	r0, sl
    5c00:	2220      	movs	r2, #32
    5c02:	4631      	mov	r1, r6
    5c04:	f000 fd4c 	bl	66a0 <cc_mbedtls_sha256_update_ret>
    5c08:	4605      	mov	r5, r0
    5c0a:	2800      	cmp	r0, #0
    5c0c:	d1c9      	bne.n	5ba2 <cc_mbedtls_entropy_func+0x5a>
    5c0e:	4603      	mov	r3, r0
    5c10:	4632      	mov	r2, r6
    5c12:	2120      	movs	r1, #32
    5c14:	4630      	mov	r0, r6
    5c16:	f001 f9a3 	bl	6f60 <cc_mbedtls_sha256_ret>
    5c1a:	4605      	mov	r5, r0
    5c1c:	2800      	cmp	r0, #0
    5c1e:	d1c0      	bne.n	5ba2 <cc_mbedtls_entropy_func+0x5a>
    5c20:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    5c24:	463a      	mov	r2, r7
    5c26:	2b00      	cmp	r3, #0
    5c28:	bfc8      	it	gt
    5c2a:	2300      	movgt	r3, #0
    5c2c:	4640      	mov	r0, r8
    5c2e:	4631      	mov	r1, r6
    5c30:	bfc8      	it	gt
    5c32:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
    5c36:	f002 fdb7 	bl	87a8 <memcpy>
    5c3a:	e7b2      	b.n	5ba2 <cc_mbedtls_entropy_func+0x5a>
    5c3c:	f06f 053f 	mvn.w	r5, #63	; 0x3f
    5c40:	466e      	mov	r6, sp
    5c42:	e7ae      	b.n	5ba2 <cc_mbedtls_entropy_func+0x5a>
    5c44:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    5c48:	e7b7      	b.n	5bba <cc_mbedtls_entropy_func+0x72>
    5c4a:	bf00      	nop
    5c4c:	200000b4 	.word	0x200000b4
    5c50:	200000b8 	.word	0x200000b8

00005c54 <RndStartupTest.constprop.0>:
    5c54:	2100      	movs	r1, #0
    5c56:	b530      	push	{r4, r5, lr}
    5c58:	b08d      	sub	sp, #52	; 0x34
    5c5a:	2228      	movs	r2, #40	; 0x28
    5c5c:	a802      	add	r0, sp, #8
    5c5e:	9101      	str	r1, [sp, #4]
    5c60:	f002 fdcd 	bl	87fe <memset>
    5c64:	a802      	add	r0, sp, #8
    5c66:	f001 f9a3 	bl	6fb0 <RNG_PLAT_SetUserRngParameters>
    5c6a:	4604      	mov	r4, r0
    5c6c:	b110      	cbz	r0, 5c74 <RndStartupTest.constprop.0+0x20>
    5c6e:	4620      	mov	r0, r4
    5c70:	b00d      	add	sp, #52	; 0x34
    5c72:	bd30      	pop	{r4, r5, pc}
    5c74:	4d1b      	ldr	r5, [pc, #108]	; (5ce4 <RndStartupTest.constprop.0+0x90>)
    5c76:	f04f 31ff 	mov.w	r1, #4294967295
    5c7a:	6828      	ldr	r0, [r5, #0]
    5c7c:	f000 f924 	bl	5ec8 <CC_PalMutexLock>
    5c80:	bb58      	cbnz	r0, 5cda <RndStartupTest.constprop.0+0x86>
    5c82:	4b19      	ldr	r3, [pc, #100]	; (5ce8 <RndStartupTest.constprop.0+0x94>)
    5c84:	6818      	ldr	r0, [r3, #0]
    5c86:	f010 0001 	ands.w	r0, r0, #1
    5c8a:	d117      	bne.n	5cbc <RndStartupTest.constprop.0+0x68>
    5c8c:	f000 f94c 	bl	5f28 <CC_PalPowerSaveModeSelect>
    5c90:	b9f8      	cbnz	r0, 5cd2 <RndStartupTest.constprop.0+0x7e>
    5c92:	4a16      	ldr	r2, [pc, #88]	; (5cec <RndStartupTest.constprop.0+0x98>)
    5c94:	a902      	add	r1, sp, #8
    5c96:	a801      	add	r0, sp, #4
    5c98:	f000 fc36 	bl	6508 <LLF_RND_RunTrngStartupTest>
    5c9c:	4604      	mov	r4, r0
    5c9e:	2001      	movs	r0, #1
    5ca0:	f000 f942 	bl	5f28 <CC_PalPowerSaveModeSelect>
    5ca4:	b988      	cbnz	r0, 5cca <RndStartupTest.constprop.0+0x76>
    5ca6:	6828      	ldr	r0, [r5, #0]
    5ca8:	f000 f916 	bl	5ed8 <CC_PalMutexUnlock>
    5cac:	2800      	cmp	r0, #0
    5cae:	d0de      	beq.n	5c6e <RndStartupTest.constprop.0+0x1a>
    5cb0:	480f      	ldr	r0, [pc, #60]	; (5cf0 <RndStartupTest.constprop.0+0x9c>)
    5cb2:	f7ff fdab 	bl	580c <CC_PalAbort>
    5cb6:	4620      	mov	r0, r4
    5cb8:	b00d      	add	sp, #52	; 0x34
    5cba:	bd30      	pop	{r4, r5, pc}
    5cbc:	6828      	ldr	r0, [r5, #0]
    5cbe:	2405      	movs	r4, #5
    5cc0:	f000 f90a 	bl	5ed8 <CC_PalMutexUnlock>
    5cc4:	2800      	cmp	r0, #0
    5cc6:	d0d2      	beq.n	5c6e <RndStartupTest.constprop.0+0x1a>
    5cc8:	e7f2      	b.n	5cb0 <RndStartupTest.constprop.0+0x5c>
    5cca:	480a      	ldr	r0, [pc, #40]	; (5cf4 <RndStartupTest.constprop.0+0xa0>)
    5ccc:	f7ff fd9e 	bl	580c <CC_PalAbort>
    5cd0:	e7e9      	b.n	5ca6 <RndStartupTest.constprop.0+0x52>
    5cd2:	4809      	ldr	r0, [pc, #36]	; (5cf8 <RndStartupTest.constprop.0+0xa4>)
    5cd4:	f7ff fd9a 	bl	580c <CC_PalAbort>
    5cd8:	e7db      	b.n	5c92 <RndStartupTest.constprop.0+0x3e>
    5cda:	4808      	ldr	r0, [pc, #32]	; (5cfc <RndStartupTest.constprop.0+0xa8>)
    5cdc:	f7ff fd96 	bl	580c <CC_PalAbort>
    5ce0:	e7cf      	b.n	5c82 <RndStartupTest.constprop.0+0x2e>
    5ce2:	bf00      	nop
    5ce4:	200000ac 	.word	0x200000ac
    5ce8:	50846e34 	.word	0x50846e34
    5cec:	20000ebc 	.word	0x20000ebc
    5cf0:	000091a8 	.word	0x000091a8
    5cf4:	00009188 	.word	0x00009188
    5cf8:	00009168 	.word	0x00009168
    5cfc:	00009150 	.word	0x00009150

00005d00 <CC_LibInit>:
    5d00:	b510      	push	{r4, lr}
    5d02:	b082      	sub	sp, #8
    5d04:	f000 f82a 	bl	5d5c <CC_HalInit>
    5d08:	b9d0      	cbnz	r0, 5d40 <CC_LibInit+0x40>
    5d0a:	f000 f849 	bl	5da0 <CC_PalInit>
    5d0e:	b9e8      	cbnz	r0, 5d4c <CC_LibInit+0x4c>
    5d10:	4b10      	ldr	r3, [pc, #64]	; (5d54 <CC_LibInit+0x54>)
    5d12:	6018      	str	r0, [r3, #0]
    5d14:	f7ff ff9e 	bl	5c54 <RndStartupTest.constprop.0>
    5d18:	4604      	mov	r4, r0
    5d1a:	b968      	cbnz	r0, 5d38 <CC_LibInit+0x38>
    5d1c:	4602      	mov	r2, r0
    5d1e:	4601      	mov	r1, r0
    5d20:	f7ff fd9c 	bl	585c <nrf_cc3xx_platform_ctr_drbg_init>
    5d24:	b940      	cbnz	r0, 5d38 <CC_LibInit+0x38>
    5d26:	2268      	movs	r2, #104	; 0x68
    5d28:	490b      	ldr	r1, [pc, #44]	; (5d58 <CC_LibInit+0x58>)
    5d2a:	ab01      	add	r3, sp, #4
    5d2c:	f7ff fdca 	bl	58c4 <nrf_cc3xx_platform_ctr_drbg_get>
    5d30:	b910      	cbnz	r0, 5d38 <CC_LibInit+0x38>
    5d32:	4620      	mov	r0, r4
    5d34:	b002      	add	sp, #8
    5d36:	bd10      	pop	{r4, pc}
    5d38:	2405      	movs	r4, #5
    5d3a:	4620      	mov	r0, r4
    5d3c:	b002      	add	sp, #8
    5d3e:	bd10      	pop	{r4, pc}
    5d40:	2403      	movs	r4, #3
    5d42:	f000 f85b 	bl	5dfc <CC_PalTerminate>
    5d46:	4620      	mov	r0, r4
    5d48:	b002      	add	sp, #8
    5d4a:	bd10      	pop	{r4, pc}
    5d4c:	2404      	movs	r4, #4
    5d4e:	4620      	mov	r0, r4
    5d50:	b002      	add	sp, #8
    5d52:	bd10      	pop	{r4, pc}
    5d54:	50845a0c 	.word	0x50845a0c
    5d58:	20000e54 	.word	0x20000e54

00005d5c <CC_HalInit>:
    5d5c:	2000      	movs	r0, #0
    5d5e:	4770      	bx	lr

00005d60 <CC_HalClearInterruptBit>:
    5d60:	0543      	lsls	r3, r0, #21
    5d62:	d503      	bpl.n	5d6c <CC_HalClearInterruptBit+0xc>
    5d64:	f04f 32ff 	mov.w	r2, #4294967295
    5d68:	4b02      	ldr	r3, [pc, #8]	; (5d74 <CC_HalClearInterruptBit+0x14>)
    5d6a:	601a      	str	r2, [r3, #0]
    5d6c:	4b02      	ldr	r3, [pc, #8]	; (5d78 <CC_HalClearInterruptBit+0x18>)
    5d6e:	6018      	str	r0, [r3, #0]
    5d70:	4770      	bx	lr
    5d72:	bf00      	nop
    5d74:	50845108 	.word	0x50845108
    5d78:	50845a08 	.word	0x50845a08

00005d7c <CC_HalMaskInterrupt>:
    5d7c:	4b01      	ldr	r3, [pc, #4]	; (5d84 <CC_HalMaskInterrupt+0x8>)
    5d7e:	6018      	str	r0, [r3, #0]
    5d80:	4770      	bx	lr
    5d82:	bf00      	nop
    5d84:	50845a04 	.word	0x50845a04

00005d88 <CC_HalWaitInterrupt>:
    5d88:	b108      	cbz	r0, 5d8e <CC_HalWaitInterrupt+0x6>
    5d8a:	f000 b875 	b.w	5e78 <CC_PalWaitInterrupt>
    5d8e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    5d92:	4770      	bx	lr

00005d94 <CC_HalWaitInterruptRND>:
    5d94:	b108      	cbz	r0, 5d9a <CC_HalWaitInterruptRND+0x6>
    5d96:	f000 b84f 	b.w	5e38 <CC_PalWaitInterruptRND>
    5d9a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    5d9e:	4770      	bx	lr

00005da0 <CC_PalInit>:
    5da0:	b510      	push	{r4, lr}
    5da2:	4811      	ldr	r0, [pc, #68]	; (5de8 <CC_PalInit+0x48>)
    5da4:	f000 f87c 	bl	5ea0 <CC_PalMutexCreate>
    5da8:	b100      	cbz	r0, 5dac <CC_PalInit+0xc>
    5daa:	bd10      	pop	{r4, pc}
    5dac:	480f      	ldr	r0, [pc, #60]	; (5dec <CC_PalInit+0x4c>)
    5dae:	f000 f877 	bl	5ea0 <CC_PalMutexCreate>
    5db2:	2800      	cmp	r0, #0
    5db4:	d1f9      	bne.n	5daa <CC_PalInit+0xa>
    5db6:	4c0e      	ldr	r4, [pc, #56]	; (5df0 <CC_PalInit+0x50>)
    5db8:	4620      	mov	r0, r4
    5dba:	f000 f871 	bl	5ea0 <CC_PalMutexCreate>
    5dbe:	2800      	cmp	r0, #0
    5dc0:	d1f3      	bne.n	5daa <CC_PalInit+0xa>
    5dc2:	4b0c      	ldr	r3, [pc, #48]	; (5df4 <CC_PalInit+0x54>)
    5dc4:	480c      	ldr	r0, [pc, #48]	; (5df8 <CC_PalInit+0x58>)
    5dc6:	601c      	str	r4, [r3, #0]
    5dc8:	f000 f86a 	bl	5ea0 <CC_PalMutexCreate>
    5dcc:	4601      	mov	r1, r0
    5dce:	2800      	cmp	r0, #0
    5dd0:	d1eb      	bne.n	5daa <CC_PalInit+0xa>
    5dd2:	f000 f82d 	bl	5e30 <CC_PalDmaInit>
    5dd6:	4604      	mov	r4, r0
    5dd8:	b108      	cbz	r0, 5dde <CC_PalInit+0x3e>
    5dda:	4620      	mov	r0, r4
    5ddc:	bd10      	pop	{r4, pc}
    5dde:	f000 f885 	bl	5eec <CC_PalPowerSaveModeInit>
    5de2:	4620      	mov	r0, r4
    5de4:	e7fa      	b.n	5ddc <CC_PalInit+0x3c>
    5de6:	bf00      	nop
    5de8:	200000a8 	.word	0x200000a8
    5dec:	2000009c 	.word	0x2000009c
    5df0:	200000a4 	.word	0x200000a4
    5df4:	200000ac 	.word	0x200000ac
    5df8:	200000a0 	.word	0x200000a0

00005dfc <CC_PalTerminate>:
    5dfc:	b508      	push	{r3, lr}
    5dfe:	4808      	ldr	r0, [pc, #32]	; (5e20 <CC_PalTerminate+0x24>)
    5e00:	f000 f858 	bl	5eb4 <CC_PalMutexDestroy>
    5e04:	4807      	ldr	r0, [pc, #28]	; (5e24 <CC_PalTerminate+0x28>)
    5e06:	f000 f855 	bl	5eb4 <CC_PalMutexDestroy>
    5e0a:	4807      	ldr	r0, [pc, #28]	; (5e28 <CC_PalTerminate+0x2c>)
    5e0c:	f000 f852 	bl	5eb4 <CC_PalMutexDestroy>
    5e10:	4806      	ldr	r0, [pc, #24]	; (5e2c <CC_PalTerminate+0x30>)
    5e12:	f000 f84f 	bl	5eb4 <CC_PalMutexDestroy>
    5e16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5e1a:	f000 b80b 	b.w	5e34 <CC_PalDmaTerminate>
    5e1e:	bf00      	nop
    5e20:	200000a8 	.word	0x200000a8
    5e24:	2000009c 	.word	0x2000009c
    5e28:	200000a4 	.word	0x200000a4
    5e2c:	200000a0 	.word	0x200000a0

00005e30 <CC_PalDmaInit>:
    5e30:	2000      	movs	r0, #0
    5e32:	4770      	bx	lr

00005e34 <CC_PalDmaTerminate>:
    5e34:	4770      	bx	lr
    5e36:	bf00      	nop

00005e38 <CC_PalWaitInterruptRND>:
    5e38:	b410      	push	{r4}
    5e3a:	4602      	mov	r2, r0
    5e3c:	4c0a      	ldr	r4, [pc, #40]	; (5e68 <CC_PalWaitInterruptRND+0x30>)
    5e3e:	e001      	b.n	5e44 <CC_PalWaitInterruptRND+0xc>
    5e40:	4213      	tst	r3, r2
    5e42:	d106      	bne.n	5e52 <CC_PalWaitInterruptRND+0x1a>
    5e44:	6823      	ldr	r3, [r4, #0]
    5e46:	f413 7080 	ands.w	r0, r3, #256	; 0x100
    5e4a:	d0f9      	beq.n	5e40 <CC_PalWaitInterruptRND+0x8>
    5e4c:	2001      	movs	r0, #1
    5e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5e52:	b121      	cbz	r1, 5e5e <CC_PalWaitInterruptRND+0x26>
    5e54:	4b05      	ldr	r3, [pc, #20]	; (5e6c <CC_PalWaitInterruptRND+0x34>)
    5e56:	4c06      	ldr	r4, [pc, #24]	; (5e70 <CC_PalWaitInterruptRND+0x38>)
    5e58:	681b      	ldr	r3, [r3, #0]
    5e5a:	600b      	str	r3, [r1, #0]
    5e5c:	6023      	str	r3, [r4, #0]
    5e5e:	4b05      	ldr	r3, [pc, #20]	; (5e74 <CC_PalWaitInterruptRND+0x3c>)
    5e60:	601a      	str	r2, [r3, #0]
    5e62:	bc10      	pop	{r4}
    5e64:	4770      	bx	lr
    5e66:	bf00      	nop
    5e68:	50845a00 	.word	0x50845a00
    5e6c:	50845104 	.word	0x50845104
    5e70:	50845108 	.word	0x50845108
    5e74:	50845a08 	.word	0x50845a08

00005e78 <CC_PalWaitInterrupt>:
    5e78:	4602      	mov	r2, r0
    5e7a:	4907      	ldr	r1, [pc, #28]	; (5e98 <CC_PalWaitInterrupt+0x20>)
    5e7c:	e001      	b.n	5e82 <CC_PalWaitInterrupt+0xa>
    5e7e:	421a      	tst	r2, r3
    5e80:	d106      	bne.n	5e90 <CC_PalWaitInterrupt+0x18>
    5e82:	680b      	ldr	r3, [r1, #0]
    5e84:	f413 7080 	ands.w	r0, r3, #256	; 0x100
    5e88:	d0f9      	beq.n	5e7e <CC_PalWaitInterrupt+0x6>
    5e8a:	2001      	movs	r0, #1
    5e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5e90:	4b02      	ldr	r3, [pc, #8]	; (5e9c <CC_PalWaitInterrupt+0x24>)
    5e92:	601a      	str	r2, [r3, #0]
    5e94:	4770      	bx	lr
    5e96:	bf00      	nop
    5e98:	50845a00 	.word	0x50845a00
    5e9c:	50845a08 	.word	0x50845a08

00005ea0 <CC_PalMutexCreate>:
    5ea0:	b508      	push	{r3, lr}
    5ea2:	4b03      	ldr	r3, [pc, #12]	; (5eb0 <CC_PalMutexCreate+0x10>)
    5ea4:	6802      	ldr	r2, [r0, #0]
    5ea6:	681b      	ldr	r3, [r3, #0]
    5ea8:	6810      	ldr	r0, [r2, #0]
    5eaa:	4798      	blx	r3
    5eac:	2000      	movs	r0, #0
    5eae:	bd08      	pop	{r3, pc}
    5eb0:	2000005c 	.word	0x2000005c

00005eb4 <CC_PalMutexDestroy>:
    5eb4:	b508      	push	{r3, lr}
    5eb6:	4b03      	ldr	r3, [pc, #12]	; (5ec4 <CC_PalMutexDestroy+0x10>)
    5eb8:	6802      	ldr	r2, [r0, #0]
    5eba:	685b      	ldr	r3, [r3, #4]
    5ebc:	6810      	ldr	r0, [r2, #0]
    5ebe:	4798      	blx	r3
    5ec0:	2000      	movs	r0, #0
    5ec2:	bd08      	pop	{r3, pc}
    5ec4:	2000005c 	.word	0x2000005c

00005ec8 <CC_PalMutexLock>:
    5ec8:	4b02      	ldr	r3, [pc, #8]	; (5ed4 <CC_PalMutexLock+0xc>)
    5eca:	6802      	ldr	r2, [r0, #0]
    5ecc:	689b      	ldr	r3, [r3, #8]
    5ece:	6810      	ldr	r0, [r2, #0]
    5ed0:	4718      	bx	r3
    5ed2:	bf00      	nop
    5ed4:	2000005c 	.word	0x2000005c

00005ed8 <CC_PalMutexUnlock>:
    5ed8:	b508      	push	{r3, lr}
    5eda:	4b03      	ldr	r3, [pc, #12]	; (5ee8 <CC_PalMutexUnlock+0x10>)
    5edc:	6802      	ldr	r2, [r0, #0]
    5ede:	68db      	ldr	r3, [r3, #12]
    5ee0:	6810      	ldr	r0, [r2, #0]
    5ee2:	4798      	blx	r3
    5ee4:	2000      	movs	r0, #0
    5ee6:	bd08      	pop	{r3, pc}
    5ee8:	2000005c 	.word	0x2000005c

00005eec <CC_PalPowerSaveModeInit>:
    5eec:	b570      	push	{r4, r5, r6, lr}
    5eee:	4c09      	ldr	r4, [pc, #36]	; (5f14 <CC_PalPowerSaveModeInit+0x28>)
    5ef0:	4d09      	ldr	r5, [pc, #36]	; (5f18 <CC_PalPowerSaveModeInit+0x2c>)
    5ef2:	6920      	ldr	r0, [r4, #16]
    5ef4:	68ab      	ldr	r3, [r5, #8]
    5ef6:	4798      	blx	r3
    5ef8:	b118      	cbz	r0, 5f02 <CC_PalPowerSaveModeInit+0x16>
    5efa:	4b08      	ldr	r3, [pc, #32]	; (5f1c <CC_PalPowerSaveModeInit+0x30>)
    5efc:	4808      	ldr	r0, [pc, #32]	; (5f20 <CC_PalPowerSaveModeInit+0x34>)
    5efe:	685b      	ldr	r3, [r3, #4]
    5f00:	4798      	blx	r3
    5f02:	2100      	movs	r1, #0
    5f04:	4a07      	ldr	r2, [pc, #28]	; (5f24 <CC_PalPowerSaveModeInit+0x38>)
    5f06:	68eb      	ldr	r3, [r5, #12]
    5f08:	6011      	str	r1, [r2, #0]
    5f0a:	6920      	ldr	r0, [r4, #16]
    5f0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5f10:	4718      	bx	r3
    5f12:	bf00      	nop
    5f14:	2000006c 	.word	0x2000006c
    5f18:	2000005c 	.word	0x2000005c
    5f1c:	2000004c 	.word	0x2000004c
    5f20:	000091c0 	.word	0x000091c0
    5f24:	200010dc 	.word	0x200010dc

00005f28 <CC_PalPowerSaveModeSelect>:
    5f28:	b570      	push	{r4, r5, r6, lr}
    5f2a:	4d1a      	ldr	r5, [pc, #104]	; (5f94 <CC_PalPowerSaveModeSelect+0x6c>)
    5f2c:	4e1a      	ldr	r6, [pc, #104]	; (5f98 <CC_PalPowerSaveModeSelect+0x70>)
    5f2e:	4604      	mov	r4, r0
    5f30:	68b2      	ldr	r2, [r6, #8]
    5f32:	6928      	ldr	r0, [r5, #16]
    5f34:	4790      	blx	r2
    5f36:	b9f0      	cbnz	r0, 5f76 <CC_PalPowerSaveModeSelect+0x4e>
    5f38:	b15c      	cbz	r4, 5f52 <CC_PalPowerSaveModeSelect+0x2a>
    5f3a:	4c18      	ldr	r4, [pc, #96]	; (5f9c <CC_PalPowerSaveModeSelect+0x74>)
    5f3c:	6823      	ldr	r3, [r4, #0]
    5f3e:	b1ab      	cbz	r3, 5f6c <CC_PalPowerSaveModeSelect+0x44>
    5f40:	2b01      	cmp	r3, #1
    5f42:	d01a      	beq.n	5f7a <CC_PalPowerSaveModeSelect+0x52>
    5f44:	3b01      	subs	r3, #1
    5f46:	6023      	str	r3, [r4, #0]
    5f48:	6928      	ldr	r0, [r5, #16]
    5f4a:	68f3      	ldr	r3, [r6, #12]
    5f4c:	4798      	blx	r3
    5f4e:	2000      	movs	r0, #0
    5f50:	bd70      	pop	{r4, r5, r6, pc}
    5f52:	4c12      	ldr	r4, [pc, #72]	; (5f9c <CC_PalPowerSaveModeSelect+0x74>)
    5f54:	6821      	ldr	r1, [r4, #0]
    5f56:	b939      	cbnz	r1, 5f68 <CC_PalPowerSaveModeSelect+0x40>
    5f58:	2001      	movs	r0, #1
    5f5a:	4b11      	ldr	r3, [pc, #68]	; (5fa0 <CC_PalPowerSaveModeSelect+0x78>)
    5f5c:	4a11      	ldr	r2, [pc, #68]	; (5fa4 <CC_PalPowerSaveModeSelect+0x7c>)
    5f5e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    5f62:	6813      	ldr	r3, [r2, #0]
    5f64:	2b00      	cmp	r3, #0
    5f66:	d1fc      	bne.n	5f62 <CC_PalPowerSaveModeSelect+0x3a>
    5f68:	3101      	adds	r1, #1
    5f6a:	6021      	str	r1, [r4, #0]
    5f6c:	68f3      	ldr	r3, [r6, #12]
    5f6e:	6928      	ldr	r0, [r5, #16]
    5f70:	4798      	blx	r3
    5f72:	2000      	movs	r0, #0
    5f74:	bd70      	pop	{r4, r5, r6, pc}
    5f76:	480c      	ldr	r0, [pc, #48]	; (5fa8 <CC_PalPowerSaveModeSelect+0x80>)
    5f78:	bd70      	pop	{r4, r5, r6, pc}
    5f7a:	4a0a      	ldr	r2, [pc, #40]	; (5fa4 <CC_PalPowerSaveModeSelect+0x7c>)
    5f7c:	6813      	ldr	r3, [r2, #0]
    5f7e:	2b00      	cmp	r3, #0
    5f80:	d1fc      	bne.n	5f7c <CC_PalPowerSaveModeSelect+0x54>
    5f82:	4a07      	ldr	r2, [pc, #28]	; (5fa0 <CC_PalPowerSaveModeSelect+0x78>)
    5f84:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    5f88:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    5f8c:	f7ff fef6 	bl	5d7c <CC_HalMaskInterrupt>
    5f90:	6823      	ldr	r3, [r4, #0]
    5f92:	e7d7      	b.n	5f44 <CC_PalPowerSaveModeSelect+0x1c>
    5f94:	2000006c 	.word	0x2000006c
    5f98:	2000005c 	.word	0x2000005c
    5f9c:	200010dc 	.word	0x200010dc
    5fa0:	50844000 	.word	0x50844000
    5fa4:	50845910 	.word	0x50845910
    5fa8:	ffff8fe9 	.word	0xffff8fe9

00005fac <mutex_init>:
    5fac:	4b01      	ldr	r3, [pc, #4]	; (5fb4 <mutex_init+0x8>)
    5fae:	681b      	ldr	r3, [r3, #0]
    5fb0:	4718      	bx	r3
    5fb2:	bf00      	nop
    5fb4:	2000005c 	.word	0x2000005c

00005fb8 <mutex_lock>:
    5fb8:	4b01      	ldr	r3, [pc, #4]	; (5fc0 <mutex_lock+0x8>)
    5fba:	689b      	ldr	r3, [r3, #8]
    5fbc:	4718      	bx	r3
    5fbe:	bf00      	nop
    5fc0:	2000005c 	.word	0x2000005c

00005fc4 <mutex_unlock>:
    5fc4:	4b01      	ldr	r3, [pc, #4]	; (5fcc <mutex_unlock+0x8>)
    5fc6:	68db      	ldr	r3, [r3, #12]
    5fc8:	4718      	bx	r3
    5fca:	bf00      	nop
    5fcc:	2000005c 	.word	0x2000005c

00005fd0 <startTrngHW>:
    5fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fd2:	2800      	cmp	r0, #0
    5fd4:	d070      	beq.n	60b8 <startTrngHW+0xe8>
    5fd6:	460c      	mov	r4, r1
    5fd8:	2900      	cmp	r1, #0
    5fda:	d06d      	beq.n	60b8 <startTrngHW+0xe8>
    5fdc:	461d      	mov	r5, r3
    5fde:	2b00      	cmp	r3, #0
    5fe0:	d06a      	beq.n	60b8 <startTrngHW+0xe8>
    5fe2:	4606      	mov	r6, r0
    5fe4:	b11a      	cbz	r2, 5fee <startTrngHW+0x1e>
    5fe6:	2201      	movs	r2, #1
    5fe8:	2300      	movs	r3, #0
    5fea:	602a      	str	r2, [r5, #0]
    5fec:	6003      	str	r3, [r0, #0]
    5fee:	682b      	ldr	r3, [r5, #0]
    5ff0:	2b00      	cmp	r3, #0
    5ff2:	d05e      	beq.n	60b2 <startTrngHW+0xe2>
    5ff4:	4629      	mov	r1, r5
    5ff6:	4620      	mov	r0, r4
    5ff8:	f001 f8a2 	bl	7140 <LLF_RND_GetFastestRosc>
    5ffc:	4607      	mov	r7, r0
    5ffe:	2800      	cmp	r0, #0
    6000:	d158      	bne.n	60b4 <startTrngHW+0xe4>
    6002:	4621      	mov	r1, r4
    6004:	6828      	ldr	r0, [r5, #0]
    6006:	f001 f87d 	bl	7104 <LLF_RND_GetRoscSampleCnt>
    600a:	4607      	mov	r7, r0
    600c:	2800      	cmp	r0, #0
    600e:	d151      	bne.n	60b4 <startTrngHW+0xe4>
    6010:	682b      	ldr	r3, [r5, #0]
    6012:	2b08      	cmp	r3, #8
    6014:	d05e      	beq.n	60d4 <startTrngHW+0x104>
    6016:	2b04      	cmp	r3, #4
    6018:	d05f      	beq.n	60da <startTrngHW+0x10a>
    601a:	f1a3 0e02 	sub.w	lr, r3, #2
    601e:	fabe fe8e 	clz	lr, lr
    6022:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
    6026:	2301      	movs	r3, #1
    6028:	469c      	mov	ip, r3
    602a:	4a2d      	ldr	r2, [pc, #180]	; (60e0 <startTrngHW+0x110>)
    602c:	492d      	ldr	r1, [pc, #180]	; (60e4 <startTrngHW+0x114>)
    602e:	6013      	str	r3, [r2, #0]
    6030:	4610      	mov	r0, r2
    6032:	600b      	str	r3, [r1, #0]
    6034:	3a94      	subs	r2, #148	; 0x94
    6036:	f8c0 c000 	str.w	ip, [r0]
    603a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    603c:	6013      	str	r3, [r2, #0]
    603e:	6811      	ldr	r1, [r2, #0]
    6040:	428b      	cmp	r3, r1
    6042:	d1f8      	bne.n	6036 <startTrngHW+0x66>
    6044:	2200      	movs	r2, #0
    6046:	f06f 011b 	mvn.w	r1, #27
    604a:	f04f 30ff 	mov.w	r0, #4294967295
    604e:	4b26      	ldr	r3, [pc, #152]	; (60e8 <startTrngHW+0x118>)
    6050:	601a      	str	r2, [r3, #0]
    6052:	4a26      	ldr	r2, [pc, #152]	; (60ec <startTrngHW+0x11c>)
    6054:	6010      	str	r0, [r2, #0]
    6056:	f843 1c2c 	str.w	r1, [r3, #-44]
    605a:	f8c2 e004 	str.w	lr, [r2, #4]
    605e:	f8d3 08d8 	ldr.w	r0, [r3, #2264]	; 0x8d8
    6062:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    6066:	f7ff fe89 	bl	5d7c <CC_HalMaskInterrupt>
    606a:	220a      	movs	r2, #10
    606c:	4b20      	ldr	r3, [pc, #128]	; (60f0 <startTrngHW+0x120>)
    606e:	601a      	str	r2, [r3, #0]
    6070:	9a06      	ldr	r2, [sp, #24]
    6072:	6923      	ldr	r3, [r4, #16]
    6074:	2a01      	cmp	r2, #1
    6076:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6078:	d021      	beq.n	60be <startTrngHW+0xee>
    607a:	4a1e      	ldr	r2, [pc, #120]	; (60f4 <startTrngHW+0x124>)
    607c:	fba2 2303 	umull	r2, r3, r2, r3
    6080:	091b      	lsrs	r3, r3, #4
    6082:	2201      	movs	r2, #1
    6084:	fb03 f301 	mul.w	r3, r3, r1
    6088:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    608c:	491a      	ldr	r1, [pc, #104]	; (60f8 <startTrngHW+0x128>)
    608e:	03db      	lsls	r3, r3, #15
    6090:	099b      	lsrs	r3, r3, #6
    6092:	600b      	str	r3, [r1, #0]
    6094:	4b14      	ldr	r3, [pc, #80]	; (60e8 <startTrngHW+0x118>)
    6096:	4638      	mov	r0, r7
    6098:	601a      	str	r2, [r3, #0]
    609a:	6833      	ldr	r3, [r6, #0]
    609c:	682a      	ldr	r2, [r5, #0]
    609e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    60a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    60a6:	6033      	str	r3, [r6, #0]
    60a8:	682a      	ldr	r2, [r5, #0]
    60aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    60ae:	6033      	str	r3, [r6, #0]
    60b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    60b2:	4f12      	ldr	r7, [pc, #72]	; (60fc <startTrngHW+0x12c>)
    60b4:	4638      	mov	r0, r7
    60b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    60b8:	4f11      	ldr	r7, [pc, #68]	; (6100 <startTrngHW+0x130>)
    60ba:	4638      	mov	r0, r7
    60bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    60be:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    60c2:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
    60c6:	3201      	adds	r2, #1
    60c8:	d002      	beq.n	60d0 <startTrngHW+0x100>
    60ca:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    60ce:	e7d4      	b.n	607a <startTrngHW+0xaa>
    60d0:	2316      	movs	r3, #22
    60d2:	e7d6      	b.n	6082 <startTrngHW+0xb2>
    60d4:	f04f 0e03 	mov.w	lr, #3
    60d8:	e7a5      	b.n	6026 <startTrngHW+0x56>
    60da:	f04f 0e02 	mov.w	lr, #2
    60de:	e7a2      	b.n	6026 <startTrngHW+0x56>
    60e0:	508451c4 	.word	0x508451c4
    60e4:	50845140 	.word	0x50845140
    60e8:	5084512c 	.word	0x5084512c
    60ec:	50845108 	.word	0x50845108
    60f0:	50845138 	.word	0x50845138
    60f4:	aaaaaaab 	.word	0xaaaaaaab
    60f8:	508451d8 	.word	0x508451d8
    60fc:	00f10c31 	.word	0x00f10c31
    6100:	00f10c35 	.word	0x00f10c35

00006104 <LLF_RND_RepetitionCounterTest.part.0>:
    6104:	b4f0      	push	{r4, r5, r6, r7}
    6106:	2400      	movs	r4, #0
    6108:	00c9      	lsls	r1, r1, #3
    610a:	4626      	mov	r6, r4
    610c:	4627      	mov	r7, r4
    610e:	f101 3cff 	add.w	ip, r1, #4294967295
    6112:	e006      	b.n	6122 <LLF_RND_RepetitionCounterTest.part.0+0x1e>
    6114:	429f      	cmp	r7, r3
    6116:	d015      	beq.n	6144 <LLF_RND_RepetitionCounterTest.part.0+0x40>
    6118:	2601      	movs	r6, #1
    611a:	4565      	cmp	r5, ip
    611c:	d818      	bhi.n	6150 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
    611e:	462c      	mov	r4, r5
    6120:	461f      	mov	r7, r3
    6122:	0963      	lsrs	r3, r4, #5
    6124:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6128:	f004 011f 	and.w	r1, r4, #31
    612c:	40cb      	lsrs	r3, r1
    612e:	291f      	cmp	r1, #31
    6130:	f104 0501 	add.w	r5, r4, #1
    6134:	bf18      	it	ne
    6136:	f003 0301 	andne.w	r3, r3, #1
    613a:	2c00      	cmp	r4, #0
    613c:	d1ea      	bne.n	6114 <LLF_RND_RepetitionCounterTest.part.0+0x10>
    613e:	2601      	movs	r6, #1
    6140:	4635      	mov	r5, r6
    6142:	e7ec      	b.n	611e <LLF_RND_RepetitionCounterTest.part.0+0x1a>
    6144:	3601      	adds	r6, #1
    6146:	4296      	cmp	r6, r2
    6148:	d1e7      	bne.n	611a <LLF_RND_RepetitionCounterTest.part.0+0x16>
    614a:	4803      	ldr	r0, [pc, #12]	; (6158 <LLF_RND_RepetitionCounterTest.part.0+0x54>)
    614c:	bcf0      	pop	{r4, r5, r6, r7}
    614e:	4770      	bx	lr
    6150:	2000      	movs	r0, #0
    6152:	bcf0      	pop	{r4, r5, r6, r7}
    6154:	4770      	bx	lr
    6156:	bf00      	nop
    6158:	00f10c36 	.word	0x00f10c36

0000615c <LLF_RND_AdaptiveProportionTest>:
    615c:	2800      	cmp	r0, #0
    615e:	d05f      	beq.n	6220 <LLF_RND_AdaptiveProportionTest+0xc4>
    6160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6164:	1e4c      	subs	r4, r1, #1
    6166:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    616a:	d226      	bcs.n	61ba <LLF_RND_AdaptiveProportionTest+0x5e>
    616c:	b32b      	cbz	r3, 61ba <LLF_RND_AdaptiveProportionTest+0x5e>
    616e:	b322      	cbz	r2, 61ba <LLF_RND_AdaptiveProportionTest+0x5e>
    6170:	00cc      	lsls	r4, r1, #3
    6172:	2b01      	cmp	r3, #1
    6174:	f104 3eff 	add.w	lr, r4, #4294967295
    6178:	d02f      	beq.n	61da <LLF_RND_AdaptiveProportionTest+0x7e>
    617a:	2100      	movs	r1, #0
    617c:	468c      	mov	ip, r1
    617e:	460f      	mov	r7, r1
    6180:	460d      	mov	r5, r1
    6182:	f103 38ff 	add.w	r8, r3, #4294967295
    6186:	094c      	lsrs	r4, r1, #5
    6188:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    618c:	f001 061f 	and.w	r6, r1, #31
    6190:	40f4      	lsrs	r4, r6
    6192:	2e1f      	cmp	r6, #31
    6194:	bf18      	it	ne
    6196:	f004 0401 	andne.w	r4, r4, #1
    619a:	b921      	cbnz	r1, 61a6 <LLF_RND_AdaptiveProportionTest+0x4a>
    619c:	2501      	movs	r5, #1
    619e:	46ac      	mov	ip, r5
    61a0:	4629      	mov	r1, r5
    61a2:	4627      	mov	r7, r4
    61a4:	e7ef      	b.n	6186 <LLF_RND_AdaptiveProportionTest+0x2a>
    61a6:	42ab      	cmp	r3, r5
    61a8:	d013      	beq.n	61d2 <LLF_RND_AdaptiveProportionTest+0x76>
    61aa:	42a7      	cmp	r7, r4
    61ac:	d101      	bne.n	61b2 <LLF_RND_AdaptiveProportionTest+0x56>
    61ae:	f10c 0c01 	add.w	ip, ip, #1
    61b2:	4545      	cmp	r5, r8
    61b4:	d104      	bne.n	61c0 <LLF_RND_AdaptiveProportionTest+0x64>
    61b6:	4562      	cmp	r2, ip
    61b8:	d202      	bcs.n	61c0 <LLF_RND_AdaptiveProportionTest+0x64>
    61ba:	481a      	ldr	r0, [pc, #104]	; (6224 <LLF_RND_AdaptiveProportionTest+0xc8>)
    61bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    61c0:	463c      	mov	r4, r7
    61c2:	3101      	adds	r1, #1
    61c4:	458e      	cmp	lr, r1
    61c6:	f105 0501 	add.w	r5, r5, #1
    61ca:	d2ea      	bcs.n	61a2 <LLF_RND_AdaptiveProportionTest+0x46>
    61cc:	2000      	movs	r0, #0
    61ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    61d2:	2500      	movs	r5, #0
    61d4:	f04f 0c01 	mov.w	ip, #1
    61d8:	e7f3      	b.n	61c2 <LLF_RND_AdaptiveProportionTest+0x66>
    61da:	2600      	movs	r6, #0
    61dc:	46b4      	mov	ip, r6
    61de:	4637      	mov	r7, r6
    61e0:	4631      	mov	r1, r6
    61e2:	094b      	lsrs	r3, r1, #5
    61e4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    61e8:	f001 051f 	and.w	r5, r1, #31
    61ec:	40eb      	lsrs	r3, r5
    61ee:	2d1f      	cmp	r5, #31
    61f0:	bf18      	it	ne
    61f2:	f003 0301 	andne.w	r3, r3, #1
    61f6:	b139      	cbz	r1, 6208 <LLF_RND_AdaptiveProportionTest+0xac>
    61f8:	b95f      	cbnz	r7, 6212 <LLF_RND_AdaptiveProportionTest+0xb6>
    61fa:	459c      	cmp	ip, r3
    61fc:	d001      	beq.n	6202 <LLF_RND_AdaptiveProportionTest+0xa6>
    61fe:	4663      	mov	r3, ip
    6200:	e008      	b.n	6214 <LLF_RND_AdaptiveProportionTest+0xb8>
    6202:	4663      	mov	r3, ip
    6204:	3601      	adds	r6, #1
    6206:	e005      	b.n	6214 <LLF_RND_AdaptiveProportionTest+0xb8>
    6208:	2601      	movs	r6, #1
    620a:	4631      	mov	r1, r6
    620c:	469c      	mov	ip, r3
    620e:	2701      	movs	r7, #1
    6210:	e7e7      	b.n	61e2 <LLF_RND_AdaptiveProportionTest+0x86>
    6212:	463e      	mov	r6, r7
    6214:	42b2      	cmp	r2, r6
    6216:	d3d0      	bcc.n	61ba <LLF_RND_AdaptiveProportionTest+0x5e>
    6218:	3101      	adds	r1, #1
    621a:	42a1      	cmp	r1, r4
    621c:	d1f6      	bne.n	620c <LLF_RND_AdaptiveProportionTest+0xb0>
    621e:	e7d5      	b.n	61cc <LLF_RND_AdaptiveProportionTest+0x70>
    6220:	4800      	ldr	r0, [pc, #0]	; (6224 <LLF_RND_AdaptiveProportionTest+0xc8>)
    6222:	4770      	bx	lr
    6224:	00f10c37 	.word	0x00f10c37

00006228 <getTrngSource>:
    6228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    622c:	b08d      	sub	sp, #52	; 0x34
    622e:	9e18      	ldr	r6, [sp, #96]	; 0x60
    6230:	4607      	mov	r7, r0
    6232:	460c      	mov	r4, r1
    6234:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    6236:	2e00      	cmp	r6, #0
    6238:	d14c      	bne.n	62d4 <getTrngSource+0xac>
    623a:	f8d1 b010 	ldr.w	fp, [r1, #16]
    623e:	2100      	movs	r1, #0
    6240:	601d      	str	r5, [r3, #0]
    6242:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6244:	6019      	str	r1, [r3, #0]
    6246:	2a00      	cmp	r2, #0
    6248:	f000 811e 	beq.w	6488 <getTrngSource+0x260>
    624c:	4a9a      	ldr	r2, [pc, #616]	; (64b8 <getTrngSource+0x290>)
    624e:	4b9b      	ldr	r3, [pc, #620]	; (64bc <getTrngSource+0x294>)
    6250:	6811      	ldr	r1, [r2, #0]
    6252:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6254:	681b      	ldr	r3, [r3, #0]
    6256:	429a      	cmp	r2, r3
    6258:	d147      	bne.n	62ea <getTrngSource+0xc2>
    625a:	290a      	cmp	r1, #10
    625c:	d145      	bne.n	62ea <getTrngSource+0xc2>
    625e:	78fb      	ldrb	r3, [r7, #3]
    6260:	9304      	str	r3, [sp, #16]
    6262:	2304      	movs	r3, #4
    6264:	46b8      	mov	r8, r7
    6266:	9302      	str	r3, [sp, #8]
    6268:	4b95      	ldr	r3, [pc, #596]	; (64c0 <getTrngSource+0x298>)
    626a:	fba3 230b 	umull	r2, r3, r3, fp
    626e:	ea4f 0a93 	mov.w	sl, r3, lsr #2
    6272:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
    6276:	f105 0208 	add.w	r2, r5, #8
    627a:	9203      	str	r2, [sp, #12]
    627c:	ebab 0a43 	sub.w	sl, fp, r3, lsl #1
    6280:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6282:	f8c3 b000 	str.w	fp, [r3]
    6286:	f1bb 0f00 	cmp.w	fp, #0
    628a:	f000 80c3 	beq.w	6414 <getTrngSource+0x1ec>
    628e:	465d      	mov	r5, fp
    6290:	f04f 0900 	mov.w	r9, #0
    6294:	9e03      	ldr	r6, [sp, #12]
    6296:	f000 ff63 	bl	7160 <LLF_RND_TurnOffTrng>
    629a:	2300      	movs	r3, #0
    629c:	9305      	str	r3, [sp, #20]
    629e:	f1b8 0f00 	cmp.w	r8, #0
    62a2:	f000 80e5 	beq.w	6470 <getTrngSource+0x248>
    62a6:	2c00      	cmp	r4, #0
    62a8:	f000 80e2 	beq.w	6470 <getTrngSource+0x248>
    62ac:	9b04      	ldr	r3, [sp, #16]
    62ae:	2b00      	cmp	r3, #0
    62b0:	f000 80dc 	beq.w	646c <getTrngSource+0x244>
    62b4:	4620      	mov	r0, r4
    62b6:	a904      	add	r1, sp, #16
    62b8:	f000 ff42 	bl	7140 <LLF_RND_GetFastestRosc>
    62bc:	b1b8      	cbz	r0, 62ee <getTrngSource+0xc6>
    62be:	4b81      	ldr	r3, [pc, #516]	; (64c4 <getTrngSource+0x29c>)
    62c0:	4298      	cmp	r0, r3
    62c2:	f040 80a7 	bne.w	6414 <getTrngSource+0x1ec>
    62c6:	9002      	str	r0, [sp, #8]
    62c8:	f000 ff4a 	bl	7160 <LLF_RND_TurnOffTrng>
    62cc:	9802      	ldr	r0, [sp, #8]
    62ce:	b00d      	add	sp, #52	; 0x34
    62d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    62d4:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    62d8:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    62dc:	3001      	adds	r0, #1
    62de:	bf0c      	ite	eq
    62e0:	f44f 7b04 	moveq.w	fp, #528	; 0x210
    62e4:	f8d1 bc0c 	ldrne.w	fp, [r1, #3084]	; 0xc0c
    62e8:	e7a9      	b.n	623e <getTrngSource+0x16>
    62ea:	4877      	ldr	r0, [pc, #476]	; (64c8 <getTrngSource+0x2a0>)
    62ec:	e7eb      	b.n	62c6 <getTrngSource+0x9e>
    62ee:	4621      	mov	r1, r4
    62f0:	9804      	ldr	r0, [sp, #16]
    62f2:	f000 ff07 	bl	7104 <LLF_RND_GetRoscSampleCnt>
    62f6:	2800      	cmp	r0, #0
    62f8:	d1e1      	bne.n	62be <getTrngSource+0x96>
    62fa:	9904      	ldr	r1, [sp, #16]
    62fc:	2908      	cmp	r1, #8
    62fe:	f000 80b9 	beq.w	6474 <getTrngSource+0x24c>
    6302:	2904      	cmp	r1, #4
    6304:	f000 80b8 	beq.w	6478 <getTrngSource+0x250>
    6308:	f1a1 0102 	sub.w	r1, r1, #2
    630c:	fab1 f181 	clz	r1, r1
    6310:	0949      	lsrs	r1, r1, #5
    6312:	2301      	movs	r3, #1
    6314:	4618      	mov	r0, r3
    6316:	4f6d      	ldr	r7, [pc, #436]	; (64cc <getTrngSource+0x2a4>)
    6318:	603b      	str	r3, [r7, #0]
    631a:	f847 3c84 	str.w	r3, [r7, #-132]
    631e:	4b6b      	ldr	r3, [pc, #428]	; (64cc <getTrngSource+0x2a4>)
    6320:	4f66      	ldr	r7, [pc, #408]	; (64bc <getTrngSource+0x294>)
    6322:	6018      	str	r0, [r3, #0]
    6324:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6326:	603b      	str	r3, [r7, #0]
    6328:	683f      	ldr	r7, [r7, #0]
    632a:	42bb      	cmp	r3, r7
    632c:	d1f7      	bne.n	631e <getTrngSource+0xf6>
    632e:	2000      	movs	r0, #0
    6330:	f04f 33ff 	mov.w	r3, #4294967295
    6334:	f06f 071b 	mvn.w	r7, #27
    6338:	4a65      	ldr	r2, [pc, #404]	; (64d0 <getTrngSource+0x2a8>)
    633a:	6010      	str	r0, [r2, #0]
    633c:	4865      	ldr	r0, [pc, #404]	; (64d4 <getTrngSource+0x2ac>)
    633e:	f842 3c24 	str.w	r3, [r2, #-36]
    6342:	4b65      	ldr	r3, [pc, #404]	; (64d8 <getTrngSource+0x2b0>)
    6344:	f842 7c2c 	str.w	r7, [r2, #-44]
    6348:	6001      	str	r1, [r0, #0]
    634a:	6818      	ldr	r0, [r3, #0]
    634c:	4f5c      	ldr	r7, [pc, #368]	; (64c0 <getTrngSource+0x298>)
    634e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    6352:	f7ff fd13 	bl	5d7c <CC_HalMaskInterrupt>
    6356:	210a      	movs	r1, #10
    6358:	2201      	movs	r2, #1
    635a:	4b57      	ldr	r3, [pc, #348]	; (64b8 <getTrngSource+0x290>)
    635c:	485f      	ldr	r0, [pc, #380]	; (64dc <getTrngSource+0x2b4>)
    635e:	6019      	str	r1, [r3, #0]
    6360:	6921      	ldr	r1, [r4, #16]
    6362:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6364:	fba7 c101 	umull	ip, r1, r7, r1
    6368:	0909      	lsrs	r1, r1, #4
    636a:	fb03 f301 	mul.w	r3, r3, r1
    636e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6372:	03db      	lsls	r3, r3, #15
    6374:	099b      	lsrs	r3, r3, #6
    6376:	6003      	str	r3, [r0, #0]
    6378:	4b55      	ldr	r3, [pc, #340]	; (64d0 <getTrngSource+0x2a8>)
    637a:	a805      	add	r0, sp, #20
    637c:	601a      	str	r2, [r3, #0]
    637e:	9904      	ldr	r1, [sp, #16]
    6380:	f8d8 2000 	ldr.w	r2, [r8]
    6384:	020b      	lsls	r3, r1, #8
    6386:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    638a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    638e:	4313      	orrs	r3, r2
    6390:	f8c8 3000 	str.w	r3, [r8]
    6394:	f000 fea6 	bl	70e4 <LLF_RND_WaitRngInterrupt>
    6398:	9b05      	ldr	r3, [sp, #20]
    639a:	f003 031a 	and.w	r3, r3, #26
    639e:	4303      	orrs	r3, r0
    63a0:	d138      	bne.n	6414 <getTrngSource+0x1ec>
    63a2:	4b4f      	ldr	r3, [pc, #316]	; (64e0 <getTrngSource+0x2b8>)
    63a4:	fba7 2705 	umull	r2, r7, r7, r5
    63a8:	681a      	ldr	r2, [r3, #0]
    63aa:	3314      	adds	r3, #20
    63ac:	9206      	str	r2, [sp, #24]
    63ae:	f853 2c10 	ldr.w	r2, [r3, #-16]
    63b2:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
    63b6:	9207      	str	r2, [sp, #28]
    63b8:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    63bc:	9208      	str	r2, [sp, #32]
    63be:	f853 2c08 	ldr.w	r2, [r3, #-8]
    63c2:	9209      	str	r2, [sp, #36]	; 0x24
    63c4:	f853 2c04 	ldr.w	r2, [r3, #-4]
    63c8:	920a      	str	r2, [sp, #40]	; 0x28
    63ca:	681b      	ldr	r3, [r3, #0]
    63cc:	930b      	str	r3, [sp, #44]	; 0x2c
    63ce:	d102      	bne.n	63d6 <getTrngSource+0x1ae>
    63d0:	f1ba 0f00 	cmp.w	sl, #0
    63d4:	d141      	bne.n	645a <getTrngSource+0x232>
    63d6:	2218      	movs	r2, #24
    63d8:	4630      	mov	r0, r6
    63da:	eb0d 0102 	add.w	r1, sp, r2
    63de:	f000 fe25 	bl	702c <CC_PalMemCopyPlat>
    63e2:	3d18      	subs	r5, #24
    63e4:	3618      	adds	r6, #24
    63e6:	f109 0901 	add.w	r9, r9, #1
    63ea:	2d00      	cmp	r5, #0
    63ec:	f47f af53 	bne.w	6296 <getTrngSource+0x6e>
    63f0:	f5bb 7f04 	cmp.w	fp, #528	; 0x210
    63f4:	d85d      	bhi.n	64b2 <getTrngSource+0x28a>
    63f6:	9d03      	ldr	r5, [sp, #12]
    63f8:	4659      	mov	r1, fp
    63fa:	4628      	mov	r0, r5
    63fc:	6962      	ldr	r2, [r4, #20]
    63fe:	f7ff fe81 	bl	6104 <LLF_RND_RepetitionCounterTest.part.0>
    6402:	2800      	cmp	r0, #0
    6404:	d04b      	beq.n	649e <getTrngSource+0x276>
    6406:	2300      	movs	r3, #0
    6408:	9a16      	ldr	r2, [sp, #88]	; 0x58
    640a:	6013      	str	r3, [r2, #0]
    640c:	4b2d      	ldr	r3, [pc, #180]	; (64c4 <getTrngSource+0x29c>)
    640e:	4298      	cmp	r0, r3
    6410:	f43f af59 	beq.w	62c6 <getTrngSource+0x9e>
    6414:	9d04      	ldr	r5, [sp, #16]
    6416:	2d08      	cmp	r5, #8
    6418:	d034      	beq.n	6484 <getTrngSource+0x25c>
    641a:	2200      	movs	r2, #0
    641c:	ab04      	add	r3, sp, #16
    641e:	4621      	mov	r1, r4
    6420:	4640      	mov	r0, r8
    6422:	006d      	lsls	r5, r5, #1
    6424:	9200      	str	r2, [sp, #0]
    6426:	9504      	str	r5, [sp, #16]
    6428:	f7ff fdd2 	bl	5fd0 <startTrngHW>
    642c:	4b2d      	ldr	r3, [pc, #180]	; (64e4 <getTrngSource+0x2bc>)
    642e:	4298      	cmp	r0, r3
    6430:	d024      	beq.n	647c <getTrngSource+0x254>
    6432:	2800      	cmp	r0, #0
    6434:	f47f af47 	bne.w	62c6 <getTrngSource+0x9e>
    6438:	f8d8 2000 	ldr.w	r2, [r8]
    643c:	0a13      	lsrs	r3, r2, #8
    643e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    6442:	4313      	orrs	r3, r2
    6444:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6448:	f8c8 3000 	str.w	r3, [r8]
    644c:	9b02      	ldr	r3, [sp, #8]
    644e:	3b01      	subs	r3, #1
    6450:	9302      	str	r3, [sp, #8]
    6452:	f47f af15 	bne.w	6280 <getTrngSource+0x58>
    6456:	2000      	movs	r0, #0
    6458:	e735      	b.n	62c6 <getTrngSource+0x9e>
    645a:	4630      	mov	r0, r6
    645c:	4652      	mov	r2, sl
    645e:	a906      	add	r1, sp, #24
    6460:	f000 fde4 	bl	702c <CC_PalMemCopyPlat>
    6464:	eba5 050a 	sub.w	r5, r5, sl
    6468:	4456      	add	r6, sl
    646a:	e7bc      	b.n	63e6 <getTrngSource+0x1be>
    646c:	481d      	ldr	r0, [pc, #116]	; (64e4 <getTrngSource+0x2bc>)
    646e:	e726      	b.n	62be <getTrngSource+0x96>
    6470:	481d      	ldr	r0, [pc, #116]	; (64e8 <getTrngSource+0x2c0>)
    6472:	e724      	b.n	62be <getTrngSource+0x96>
    6474:	2103      	movs	r1, #3
    6476:	e74c      	b.n	6312 <getTrngSource+0xea>
    6478:	2102      	movs	r1, #2
    647a:	e74a      	b.n	6312 <getTrngSource+0xea>
    647c:	6a23      	ldr	r3, [r4, #32]
    647e:	2b00      	cmp	r3, #0
    6480:	f43f af21 	beq.w	62c6 <getTrngSource+0x9e>
    6484:	4819      	ldr	r0, [pc, #100]	; (64ec <getTrngSource+0x2c4>)
    6486:	e71e      	b.n	62c6 <getTrngSource+0x9e>
    6488:	2201      	movs	r2, #1
    648a:	4621      	mov	r1, r4
    648c:	4638      	mov	r0, r7
    648e:	9600      	str	r6, [sp, #0]
    6490:	ab04      	add	r3, sp, #16
    6492:	f7ff fd9d 	bl	5fd0 <startTrngHW>
    6496:	2800      	cmp	r0, #0
    6498:	f43f aee3 	beq.w	6262 <getTrngSource+0x3a>
    649c:	e713      	b.n	62c6 <getTrngSource+0x9e>
    649e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    64a2:	4659      	mov	r1, fp
    64a4:	4628      	mov	r0, r5
    64a6:	69a2      	ldr	r2, [r4, #24]
    64a8:	f7ff fe58 	bl	615c <LLF_RND_AdaptiveProportionTest>
    64ac:	2800      	cmp	r0, #0
    64ae:	d1aa      	bne.n	6406 <getTrngSource+0x1de>
    64b0:	e7d1      	b.n	6456 <getTrngSource+0x22e>
    64b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    64b4:	601d      	str	r5, [r3, #0]
    64b6:	e7ad      	b.n	6414 <getTrngSource+0x1ec>
    64b8:	50845138 	.word	0x50845138
    64bc:	50845130 	.word	0x50845130
    64c0:	aaaaaaab 	.word	0xaaaaaaab
    64c4:	00f10c02 	.word	0x00f10c02
    64c8:	00f10c30 	.word	0x00f10c30
    64cc:	508451c4 	.word	0x508451c4
    64d0:	5084512c 	.word	0x5084512c
    64d4:	5084510c 	.word	0x5084510c
    64d8:	50845a04 	.word	0x50845a04
    64dc:	508451d8 	.word	0x508451d8
    64e0:	50845114 	.word	0x50845114
    64e4:	00f10c31 	.word	0x00f10c31
    64e8:	00f10c35 	.word	0x00f10c35
    64ec:	00f10c32 	.word	0x00f10c32

000064f0 <LLF_RND_GetTrngSource>:
    64f0:	2300      	movs	r3, #0
    64f2:	b430      	push	{r4, r5}
    64f4:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
    64f8:	9304      	str	r3, [sp, #16]
    64fa:	9b02      	ldr	r3, [sp, #8]
    64fc:	e9cd 4502 	strd	r4, r5, [sp, #8]
    6500:	bc30      	pop	{r4, r5}
    6502:	f7ff be91 	b.w	6228 <getTrngSource>
    6506:	bf00      	nop

00006508 <LLF_RND_RunTrngStartupTest>:
    6508:	b510      	push	{r4, lr}
    650a:	2401      	movs	r4, #1
    650c:	b086      	sub	sp, #24
    650e:	ab05      	add	r3, sp, #20
    6510:	e9cd 2401 	strd	r2, r4, [sp, #4]
    6514:	9300      	str	r3, [sp, #0]
    6516:	2200      	movs	r2, #0
    6518:	ab04      	add	r3, sp, #16
    651a:	f7ff fe85 	bl	6228 <getTrngSource>
    651e:	b006      	add	sp, #24
    6520:	bd10      	pop	{r4, pc}
    6522:	bf00      	nop

00006524 <mbedtls_platform_zeroize>:
    6524:	b138      	cbz	r0, 6536 <mbedtls_platform_zeroize+0x12>
    6526:	b131      	cbz	r1, 6536 <mbedtls_platform_zeroize+0x12>
    6528:	2200      	movs	r2, #0
    652a:	4401      	add	r1, r0
    652c:	4603      	mov	r3, r0
    652e:	3001      	adds	r0, #1
    6530:	4281      	cmp	r1, r0
    6532:	701a      	strb	r2, [r3, #0]
    6534:	d1fa      	bne.n	652c <mbedtls_platform_zeroize+0x8>
    6536:	4770      	bx	lr

00006538 <mbedtls_hardware_poll>:
    6538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    653c:	b088      	sub	sp, #32
    653e:	9205      	str	r2, [sp, #20]
    6540:	2900      	cmp	r1, #0
    6542:	d069      	beq.n	6618 <mbedtls_hardware_poll+0xe0>
    6544:	461c      	mov	r4, r3
    6546:	2b00      	cmp	r3, #0
    6548:	d066      	beq.n	6618 <mbedtls_hardware_poll+0xe0>
    654a:	4615      	mov	r5, r2
    654c:	2a00      	cmp	r2, #0
    654e:	d063      	beq.n	6618 <mbedtls_hardware_poll+0xe0>
    6550:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 6640 <mbedtls_hardware_poll+0x108>
    6554:	460e      	mov	r6, r1
    6556:	f8d8 0000 	ldr.w	r0, [r8]
    655a:	f04f 31ff 	mov.w	r1, #4294967295
    655e:	f7ff fcb3 	bl	5ec8 <CC_PalMutexLock>
    6562:	2800      	cmp	r0, #0
    6564:	d149      	bne.n	65fa <mbedtls_hardware_poll+0xc2>
    6566:	4b2e      	ldr	r3, [pc, #184]	; (6620 <mbedtls_hardware_poll+0xe8>)
    6568:	6818      	ldr	r0, [r3, #0]
    656a:	f010 0001 	ands.w	r0, r0, #1
    656e:	d018      	beq.n	65a2 <mbedtls_hardware_poll+0x6a>
    6570:	f04f 37ff 	mov.w	r7, #4294967295
    6574:	f44f 7108 	mov.w	r1, #544	; 0x220
    6578:	482a      	ldr	r0, [pc, #168]	; (6624 <mbedtls_hardware_poll+0xec>)
    657a:	f7ff ffd3 	bl	6524 <mbedtls_platform_zeroize>
    657e:	2104      	movs	r1, #4
    6580:	4829      	ldr	r0, [pc, #164]	; (6628 <mbedtls_hardware_poll+0xf0>)
    6582:	f7ff ffcf 	bl	6524 <mbedtls_platform_zeroize>
    6586:	4829      	ldr	r0, [pc, #164]	; (662c <mbedtls_hardware_poll+0xf4>)
    6588:	2128      	movs	r1, #40	; 0x28
    658a:	f7ff ffcb 	bl	6524 <mbedtls_platform_zeroize>
    658e:	f8d8 0000 	ldr.w	r0, [r8]
    6592:	f7ff fca1 	bl	5ed8 <CC_PalMutexUnlock>
    6596:	2800      	cmp	r0, #0
    6598:	d133      	bne.n	6602 <mbedtls_hardware_poll+0xca>
    659a:	4638      	mov	r0, r7
    659c:	b008      	add	sp, #32
    659e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    65a2:	f7ff fcc1 	bl	5f28 <CC_PalPowerSaveModeSelect>
    65a6:	2800      	cmp	r0, #0
    65a8:	d132      	bne.n	6610 <mbedtls_hardware_poll+0xd8>
    65aa:	4820      	ldr	r0, [pc, #128]	; (662c <mbedtls_hardware_poll+0xf4>)
    65ac:	f000 fd00 	bl	6fb0 <RNG_PLAT_SetUserRngParameters>
    65b0:	b9c0      	cbnz	r0, 65e4 <mbedtls_hardware_poll+0xac>
    65b2:	491c      	ldr	r1, [pc, #112]	; (6624 <mbedtls_hardware_poll+0xec>)
    65b4:	ab07      	add	r3, sp, #28
    65b6:	4602      	mov	r2, r0
    65b8:	9003      	str	r0, [sp, #12]
    65ba:	9102      	str	r1, [sp, #8]
    65bc:	9300      	str	r3, [sp, #0]
    65be:	491b      	ldr	r1, [pc, #108]	; (662c <mbedtls_hardware_poll+0xf4>)
    65c0:	4819      	ldr	r0, [pc, #100]	; (6628 <mbedtls_hardware_poll+0xf0>)
    65c2:	9401      	str	r4, [sp, #4]
    65c4:	ab05      	add	r3, sp, #20
    65c6:	f7ff ff93 	bl	64f0 <LLF_RND_GetTrngSource>
    65ca:	b958      	cbnz	r0, 65e4 <mbedtls_hardware_poll+0xac>
    65cc:	6823      	ldr	r3, [r4, #0]
    65ce:	42ab      	cmp	r3, r5
    65d0:	d308      	bcc.n	65e4 <mbedtls_hardware_poll+0xac>
    65d2:	9907      	ldr	r1, [sp, #28]
    65d4:	4607      	mov	r7, r0
    65d6:	462a      	mov	r2, r5
    65d8:	4630      	mov	r0, r6
    65da:	3108      	adds	r1, #8
    65dc:	f000 fd26 	bl	702c <CC_PalMemCopyPlat>
    65e0:	6025      	str	r5, [r4, #0]
    65e2:	e001      	b.n	65e8 <mbedtls_hardware_poll+0xb0>
    65e4:	f04f 37ff 	mov.w	r7, #4294967295
    65e8:	2001      	movs	r0, #1
    65ea:	f7ff fc9d 	bl	5f28 <CC_PalPowerSaveModeSelect>
    65ee:	2800      	cmp	r0, #0
    65f0:	d0c0      	beq.n	6574 <mbedtls_hardware_poll+0x3c>
    65f2:	480f      	ldr	r0, [pc, #60]	; (6630 <mbedtls_hardware_poll+0xf8>)
    65f4:	f7ff f90a 	bl	580c <CC_PalAbort>
    65f8:	e7bc      	b.n	6574 <mbedtls_hardware_poll+0x3c>
    65fa:	480e      	ldr	r0, [pc, #56]	; (6634 <mbedtls_hardware_poll+0xfc>)
    65fc:	f7ff f906 	bl	580c <CC_PalAbort>
    6600:	e7b1      	b.n	6566 <mbedtls_hardware_poll+0x2e>
    6602:	480d      	ldr	r0, [pc, #52]	; (6638 <mbedtls_hardware_poll+0x100>)
    6604:	f7ff f902 	bl	580c <CC_PalAbort>
    6608:	4638      	mov	r0, r7
    660a:	b008      	add	sp, #32
    660c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6610:	480a      	ldr	r0, [pc, #40]	; (663c <mbedtls_hardware_poll+0x104>)
    6612:	f7ff f8fb 	bl	580c <CC_PalAbort>
    6616:	e7c8      	b.n	65aa <mbedtls_hardware_poll+0x72>
    6618:	f04f 37ff 	mov.w	r7, #4294967295
    661c:	e7bd      	b.n	659a <mbedtls_hardware_poll+0x62>
    661e:	bf00      	nop
    6620:	50846e34 	.word	0x50846e34
    6624:	200010e4 	.word	0x200010e4
    6628:	200010e0 	.word	0x200010e0
    662c:	20001304 	.word	0x20001304
    6630:	00009188 	.word	0x00009188
    6634:	00009150 	.word	0x00009150
    6638:	000091e0 	.word	0x000091e0
    663c:	00009168 	.word	0x00009168
    6640:	200000ac 	.word	0x200000ac

00006644 <cc_mbedtls_sha256_init>:
    6644:	b510      	push	{r4, lr}
    6646:	4604      	mov	r4, r0
    6648:	b128      	cbz	r0, 6656 <cc_mbedtls_sha256_init+0x12>
    664a:	4620      	mov	r0, r4
    664c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6650:	21f0      	movs	r1, #240	; 0xf0
    6652:	f000 bcef 	b.w	7034 <CC_PalMemSetZeroPlat>
    6656:	4804      	ldr	r0, [pc, #16]	; (6668 <cc_mbedtls_sha256_init+0x24>)
    6658:	f7ff f8d8 	bl	580c <CC_PalAbort>
    665c:	4620      	mov	r0, r4
    665e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6662:	21f0      	movs	r1, #240	; 0xf0
    6664:	f000 bce6 	b.w	7034 <CC_PalMemSetZeroPlat>
    6668:	000091f8 	.word	0x000091f8

0000666c <cc_mbedtls_sha256_free>:
    666c:	b110      	cbz	r0, 6674 <cc_mbedtls_sha256_free+0x8>
    666e:	21f0      	movs	r1, #240	; 0xf0
    6670:	f7ff bf58 	b.w	6524 <mbedtls_platform_zeroize>
    6674:	4770      	bx	lr
    6676:	bf00      	nop

00006678 <cc_mbedtls_sha256_starts_ret>:
    6678:	b508      	push	{r3, lr}
    667a:	b161      	cbz	r1, 6696 <cc_mbedtls_sha256_starts_ret+0x1e>
    667c:	2901      	cmp	r1, #1
    667e:	d107      	bne.n	6690 <cc_mbedtls_sha256_starts_ret+0x18>
    6680:	2102      	movs	r1, #2
    6682:	f000 f839 	bl	66f8 <mbedtls_sha_starts_internal>
    6686:	2800      	cmp	r0, #0
    6688:	bf18      	it	ne
    668a:	f06f 0036 	mvnne.w	r0, #54	; 0x36
    668e:	bd08      	pop	{r3, pc}
    6690:	f06f 0036 	mvn.w	r0, #54	; 0x36
    6694:	bd08      	pop	{r3, pc}
    6696:	2101      	movs	r1, #1
    6698:	f000 f82e 	bl	66f8 <mbedtls_sha_starts_internal>
    669c:	e7f3      	b.n	6686 <cc_mbedtls_sha256_starts_ret+0xe>
    669e:	bf00      	nop

000066a0 <cc_mbedtls_sha256_update_ret>:
    66a0:	b508      	push	{r3, lr}
    66a2:	f000 f86b 	bl	677c <mbedtls_sha_update_internal>
    66a6:	2800      	cmp	r0, #0
    66a8:	bf18      	it	ne
    66aa:	f06f 0036 	mvnne.w	r0, #54	; 0x36
    66ae:	bd08      	pop	{r3, pc}

000066b0 <cc_mbedtls_sha256_finish_ret>:
    66b0:	b570      	push	{r4, r5, r6, lr}
    66b2:	b1e8      	cbz	r0, 66f0 <cc_mbedtls_sha256_finish_ret+0x40>
    66b4:	460e      	mov	r6, r1
    66b6:	b1d9      	cbz	r1, 66f0 <cc_mbedtls_sha256_finish_ret+0x40>
    66b8:	4604      	mov	r4, r0
    66ba:	f000 f831 	bl	6720 <mbedtls_sha_finish_internal>
    66be:	4605      	mov	r5, r0
    66c0:	b9b0      	cbnz	r0, 66f0 <cc_mbedtls_sha256_finish_ret+0x40>
    66c2:	6823      	ldr	r3, [r4, #0]
    66c4:	2b01      	cmp	r3, #1
    66c6:	d00b      	beq.n	66e0 <cc_mbedtls_sha256_finish_ret+0x30>
    66c8:	2b02      	cmp	r3, #2
    66ca:	d001      	beq.n	66d0 <cc_mbedtls_sha256_finish_ret+0x20>
    66cc:	4628      	mov	r0, r5
    66ce:	bd70      	pop	{r4, r5, r6, pc}
    66d0:	4630      	mov	r0, r6
    66d2:	221c      	movs	r2, #28
    66d4:	f104 0108 	add.w	r1, r4, #8
    66d8:	f000 fca8 	bl	702c <CC_PalMemCopyPlat>
    66dc:	4628      	mov	r0, r5
    66de:	bd70      	pop	{r4, r5, r6, pc}
    66e0:	4630      	mov	r0, r6
    66e2:	2220      	movs	r2, #32
    66e4:	f104 0108 	add.w	r1, r4, #8
    66e8:	f000 fca0 	bl	702c <CC_PalMemCopyPlat>
    66ec:	4628      	mov	r0, r5
    66ee:	bd70      	pop	{r4, r5, r6, pc}
    66f0:	f06f 0536 	mvn.w	r5, #54	; 0x36
    66f4:	e7ea      	b.n	66cc <cc_mbedtls_sha256_finish_ret+0x1c>
    66f6:	bf00      	nop

000066f8 <mbedtls_sha_starts_internal>:
    66f8:	b178      	cbz	r0, 671a <mbedtls_sha_starts_internal+0x22>
    66fa:	b538      	push	{r3, r4, r5, lr}
    66fc:	460d      	mov	r5, r1
    66fe:	21f0      	movs	r1, #240	; 0xf0
    6700:	4604      	mov	r4, r0
    6702:	f000 fc97 	bl	7034 <CC_PalMemSetZeroPlat>
    6706:	2340      	movs	r3, #64	; 0x40
    6708:	4620      	mov	r0, r4
    670a:	6025      	str	r5, [r4, #0]
    670c:	65e3      	str	r3, [r4, #92]	; 0x5c
    670e:	f000 fd6f 	bl	71f0 <InitHashDrv>
    6712:	3800      	subs	r0, #0
    6714:	bf18      	it	ne
    6716:	2001      	movne	r0, #1
    6718:	bd38      	pop	{r3, r4, r5, pc}
    671a:	2001      	movs	r0, #1
    671c:	4770      	bx	lr
    671e:	bf00      	nop

00006720 <mbedtls_sha_finish_internal>:
    6720:	b570      	push	{r4, r5, r6, lr}
    6722:	6e05      	ldr	r5, [r0, #96]	; 0x60
    6724:	b0a4      	sub	sp, #144	; 0x90
    6726:	4604      	mov	r4, r0
    6728:	ae04      	add	r6, sp, #16
    672a:	b9e5      	cbnz	r5, 6766 <mbedtls_sha_finish_internal+0x46>
    672c:	2201      	movs	r2, #1
    672e:	2300      	movs	r3, #0
    6730:	6062      	str	r2, [r4, #4]
    6732:	4630      	mov	r0, r6
    6734:	4629      	mov	r1, r5
    6736:	e9cd 3300 	strd	r3, r3, [sp]
    673a:	aa02      	add	r2, sp, #8
    673c:	f000 fd26 	bl	718c <SetDataBuffersInfo>
    6740:	b110      	cbz	r0, 6748 <mbedtls_sha_finish_internal+0x28>
    6742:	2001      	movs	r0, #1
    6744:	b024      	add	sp, #144	; 0x90
    6746:	bd70      	pop	{r4, r5, r6, pc}
    6748:	462a      	mov	r2, r5
    674a:	4620      	mov	r0, r4
    674c:	a902      	add	r1, sp, #8
    674e:	f000 fd79 	bl	7244 <ProcessHashDrv>
    6752:	2800      	cmp	r0, #0
    6754:	d1f5      	bne.n	6742 <mbedtls_sha_finish_internal+0x22>
    6756:	4620      	mov	r0, r4
    6758:	f000 fe92 	bl	7480 <FinishHashDrv>
    675c:	2800      	cmp	r0, #0
    675e:	d1f0      	bne.n	6742 <mbedtls_sha_finish_internal+0x22>
    6760:	6620      	str	r0, [r4, #96]	; 0x60
    6762:	b024      	add	sp, #144	; 0x90
    6764:	bd70      	pop	{r4, r5, r6, pc}
    6766:	2d80      	cmp	r5, #128	; 0x80
    6768:	462a      	mov	r2, r5
    676a:	4630      	mov	r0, r6
    676c:	bf28      	it	cs
    676e:	2280      	movcs	r2, #128	; 0x80
    6770:	f104 0164 	add.w	r1, r4, #100	; 0x64
    6774:	f000 fc5a 	bl	702c <CC_PalMemCopyPlat>
    6778:	6e25      	ldr	r5, [r4, #96]	; 0x60
    677a:	e7d7      	b.n	672c <mbedtls_sha_finish_internal+0xc>

0000677c <mbedtls_sha_update_internal>:
    677c:	2800      	cmp	r0, #0
    677e:	d055      	beq.n	682c <mbedtls_sha_update_internal+0xb0>
    6780:	b5f0      	push	{r4, r5, r6, r7, lr}
    6782:	4615      	mov	r5, r2
    6784:	b0a5      	sub	sp, #148	; 0x94
    6786:	b1b2      	cbz	r2, 67b6 <mbedtls_sha_update_internal+0x3a>
    6788:	460e      	mov	r6, r1
    678a:	b351      	cbz	r1, 67e2 <mbedtls_sha_update_internal+0x66>
    678c:	4604      	mov	r4, r0
    678e:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
    6792:	1a1a      	subs	r2, r3, r0
    6794:	fbb2 f7f3 	udiv	r7, r2, r3
    6798:	fb03 2717 	mls	r7, r3, r7, r2
    679c:	42af      	cmp	r7, r5
    679e:	bf28      	it	cs
    67a0:	462f      	movcs	r7, r5
    67a2:	2f00      	cmp	r7, #0
    67a4:	d144      	bne.n	6830 <mbedtls_sha_update_internal+0xb4>
    67a6:	4283      	cmp	r3, r0
    67a8:	d008      	beq.n	67bc <mbedtls_sha_update_internal+0x40>
    67aa:	fbb5 f7f3 	udiv	r7, r5, r3
    67ae:	fb03 f707 	mul.w	r7, r3, r7
    67b2:	b9cf      	cbnz	r7, 67e8 <mbedtls_sha_update_internal+0x6c>
    67b4:	bb6d      	cbnz	r5, 6812 <mbedtls_sha_update_internal+0x96>
    67b6:	4628      	mov	r0, r5
    67b8:	b025      	add	sp, #148	; 0x94
    67ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67bc:	2b80      	cmp	r3, #128	; 0x80
    67be:	bf28      	it	cs
    67c0:	2380      	movcs	r3, #128	; 0x80
    67c2:	f104 0164 	add.w	r1, r4, #100	; 0x64
    67c6:	461a      	mov	r2, r3
    67c8:	a804      	add	r0, sp, #16
    67ca:	f000 fc2f 	bl	702c <CC_PalMemCopyPlat>
    67ce:	2300      	movs	r3, #0
    67d0:	e9cd 3300 	strd	r3, r3, [sp]
    67d4:	a804      	add	r0, sp, #16
    67d6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    67d8:	aa02      	add	r2, sp, #8
    67da:	f000 fcd7 	bl	718c <SetDataBuffersInfo>
    67de:	2800      	cmp	r0, #0
    67e0:	d033      	beq.n	684a <mbedtls_sha_update_internal+0xce>
    67e2:	2001      	movs	r0, #1
    67e4:	b025      	add	sp, #148	; 0x94
    67e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67e8:	2300      	movs	r3, #0
    67ea:	4639      	mov	r1, r7
    67ec:	4630      	mov	r0, r6
    67ee:	e9cd 3300 	strd	r3, r3, [sp]
    67f2:	aa02      	add	r2, sp, #8
    67f4:	f000 fcca 	bl	718c <SetDataBuffersInfo>
    67f8:	2800      	cmp	r0, #0
    67fa:	d1f2      	bne.n	67e2 <mbedtls_sha_update_internal+0x66>
    67fc:	463a      	mov	r2, r7
    67fe:	4620      	mov	r0, r4
    6800:	a902      	add	r1, sp, #8
    6802:	f000 fd1f 	bl	7244 <ProcessHashDrv>
    6806:	2800      	cmp	r0, #0
    6808:	d1eb      	bne.n	67e2 <mbedtls_sha_update_internal+0x66>
    680a:	1bed      	subs	r5, r5, r7
    680c:	443e      	add	r6, r7
    680e:	2d00      	cmp	r5, #0
    6810:	d0d1      	beq.n	67b6 <mbedtls_sha_update_internal+0x3a>
    6812:	6e20      	ldr	r0, [r4, #96]	; 0x60
    6814:	462a      	mov	r2, r5
    6816:	3019      	adds	r0, #25
    6818:	4631      	mov	r1, r6
    681a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    681e:	f000 fc05 	bl	702c <CC_PalMemCopyPlat>
    6822:	6e22      	ldr	r2, [r4, #96]	; 0x60
    6824:	2000      	movs	r0, #0
    6826:	442a      	add	r2, r5
    6828:	6622      	str	r2, [r4, #96]	; 0x60
    682a:	e7c5      	b.n	67b8 <mbedtls_sha_update_internal+0x3c>
    682c:	2001      	movs	r0, #1
    682e:	4770      	bx	lr
    6830:	f104 0364 	add.w	r3, r4, #100	; 0x64
    6834:	4418      	add	r0, r3
    6836:	463a      	mov	r2, r7
    6838:	f000 fbf8 	bl	702c <CC_PalMemCopyPlat>
    683c:	e9d4 3017 	ldrd	r3, r0, [r4, #92]	; 0x5c
    6840:	4438      	add	r0, r7
    6842:	443e      	add	r6, r7
    6844:	1bed      	subs	r5, r5, r7
    6846:	6620      	str	r0, [r4, #96]	; 0x60
    6848:	e7ad      	b.n	67a6 <mbedtls_sha_update_internal+0x2a>
    684a:	4620      	mov	r0, r4
    684c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    684e:	a902      	add	r1, sp, #8
    6850:	f000 fcf8 	bl	7244 <ProcessHashDrv>
    6854:	2800      	cmp	r0, #0
    6856:	d1c4      	bne.n	67e2 <mbedtls_sha_update_internal+0x66>
    6858:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    685a:	6620      	str	r0, [r4, #96]	; 0x60
    685c:	e7a5      	b.n	67aa <mbedtls_sha_update_internal+0x2e>
    685e:	bf00      	nop

00006860 <ctr_drbg_update_internal>:
    6860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6864:	b08c      	sub	sp, #48	; 0x30
    6866:	4604      	mov	r4, r0
    6868:	460d      	mov	r5, r1
    686a:	4668      	mov	r0, sp
    686c:	2230      	movs	r2, #48	; 0x30
    686e:	2100      	movs	r1, #0
    6870:	f001 ffc5 	bl	87fe <memset>
    6874:	466f      	mov	r7, sp
    6876:	f104 0620 	add.w	r6, r4, #32
    687a:	7be2      	ldrb	r2, [r4, #15]
    687c:	3201      	adds	r2, #1
    687e:	b2d2      	uxtb	r2, r2
    6880:	73e2      	strb	r2, [r4, #15]
    6882:	2a00      	cmp	r2, #0
    6884:	d14d      	bne.n	6922 <ctr_drbg_update_internal+0xc2>
    6886:	7ba2      	ldrb	r2, [r4, #14]
    6888:	3201      	adds	r2, #1
    688a:	b2d2      	uxtb	r2, r2
    688c:	73a2      	strb	r2, [r4, #14]
    688e:	2a00      	cmp	r2, #0
    6890:	d147      	bne.n	6922 <ctr_drbg_update_internal+0xc2>
    6892:	7b63      	ldrb	r3, [r4, #13]
    6894:	3301      	adds	r3, #1
    6896:	b2db      	uxtb	r3, r3
    6898:	7363      	strb	r3, [r4, #13]
    689a:	2b00      	cmp	r3, #0
    689c:	d141      	bne.n	6922 <ctr_drbg_update_internal+0xc2>
    689e:	7b23      	ldrb	r3, [r4, #12]
    68a0:	3301      	adds	r3, #1
    68a2:	b2db      	uxtb	r3, r3
    68a4:	7323      	strb	r3, [r4, #12]
    68a6:	2b00      	cmp	r3, #0
    68a8:	d13b      	bne.n	6922 <ctr_drbg_update_internal+0xc2>
    68aa:	7ae3      	ldrb	r3, [r4, #11]
    68ac:	3301      	adds	r3, #1
    68ae:	b2db      	uxtb	r3, r3
    68b0:	72e3      	strb	r3, [r4, #11]
    68b2:	2b00      	cmp	r3, #0
    68b4:	d135      	bne.n	6922 <ctr_drbg_update_internal+0xc2>
    68b6:	7aa3      	ldrb	r3, [r4, #10]
    68b8:	3301      	adds	r3, #1
    68ba:	b2db      	uxtb	r3, r3
    68bc:	72a3      	strb	r3, [r4, #10]
    68be:	2b00      	cmp	r3, #0
    68c0:	d12f      	bne.n	6922 <ctr_drbg_update_internal+0xc2>
    68c2:	7a63      	ldrb	r3, [r4, #9]
    68c4:	3301      	adds	r3, #1
    68c6:	b2db      	uxtb	r3, r3
    68c8:	7263      	strb	r3, [r4, #9]
    68ca:	bb53      	cbnz	r3, 6922 <ctr_drbg_update_internal+0xc2>
    68cc:	7a23      	ldrb	r3, [r4, #8]
    68ce:	3301      	adds	r3, #1
    68d0:	b2db      	uxtb	r3, r3
    68d2:	7223      	strb	r3, [r4, #8]
    68d4:	bb2b      	cbnz	r3, 6922 <ctr_drbg_update_internal+0xc2>
    68d6:	79e3      	ldrb	r3, [r4, #7]
    68d8:	3301      	adds	r3, #1
    68da:	b2db      	uxtb	r3, r3
    68dc:	71e3      	strb	r3, [r4, #7]
    68de:	bb03      	cbnz	r3, 6922 <ctr_drbg_update_internal+0xc2>
    68e0:	79a3      	ldrb	r3, [r4, #6]
    68e2:	3301      	adds	r3, #1
    68e4:	b2db      	uxtb	r3, r3
    68e6:	71a3      	strb	r3, [r4, #6]
    68e8:	b9db      	cbnz	r3, 6922 <ctr_drbg_update_internal+0xc2>
    68ea:	7963      	ldrb	r3, [r4, #5]
    68ec:	3301      	adds	r3, #1
    68ee:	b2db      	uxtb	r3, r3
    68f0:	7163      	strb	r3, [r4, #5]
    68f2:	b9b3      	cbnz	r3, 6922 <ctr_drbg_update_internal+0xc2>
    68f4:	7923      	ldrb	r3, [r4, #4]
    68f6:	3301      	adds	r3, #1
    68f8:	b2db      	uxtb	r3, r3
    68fa:	7123      	strb	r3, [r4, #4]
    68fc:	b98b      	cbnz	r3, 6922 <ctr_drbg_update_internal+0xc2>
    68fe:	78e3      	ldrb	r3, [r4, #3]
    6900:	3301      	adds	r3, #1
    6902:	b2db      	uxtb	r3, r3
    6904:	70e3      	strb	r3, [r4, #3]
    6906:	b963      	cbnz	r3, 6922 <ctr_drbg_update_internal+0xc2>
    6908:	78a3      	ldrb	r3, [r4, #2]
    690a:	3301      	adds	r3, #1
    690c:	b2db      	uxtb	r3, r3
    690e:	70a3      	strb	r3, [r4, #2]
    6910:	b93b      	cbnz	r3, 6922 <ctr_drbg_update_internal+0xc2>
    6912:	7863      	ldrb	r3, [r4, #1]
    6914:	3301      	adds	r3, #1
    6916:	b2db      	uxtb	r3, r3
    6918:	7063      	strb	r3, [r4, #1]
    691a:	b913      	cbnz	r3, 6922 <ctr_drbg_update_internal+0xc2>
    691c:	7823      	ldrb	r3, [r4, #0]
    691e:	3301      	adds	r3, #1
    6920:	7023      	strb	r3, [r4, #0]
    6922:	463b      	mov	r3, r7
    6924:	4622      	mov	r2, r4
    6926:	2101      	movs	r1, #1
    6928:	4630      	mov	r0, r6
    692a:	f000 fe21 	bl	7570 <cc_mbedtls_aes_crypt_ecb>
    692e:	4680      	mov	r8, r0
    6930:	2800      	cmp	r0, #0
    6932:	d13b      	bne.n	69ac <ctr_drbg_update_internal+0x14c>
    6934:	3710      	adds	r7, #16
    6936:	ab0c      	add	r3, sp, #48	; 0x30
    6938:	429f      	cmp	r7, r3
    693a:	d19e      	bne.n	687a <ctr_drbg_update_internal+0x1a>
    693c:	9901      	ldr	r1, [sp, #4]
    693e:	682b      	ldr	r3, [r5, #0]
    6940:	9800      	ldr	r0, [sp, #0]
    6942:	686a      	ldr	r2, [r5, #4]
    6944:	4058      	eors	r0, r3
    6946:	404a      	eors	r2, r1
    6948:	68ab      	ldr	r3, [r5, #8]
    694a:	9902      	ldr	r1, [sp, #8]
    694c:	9000      	str	r0, [sp, #0]
    694e:	4059      	eors	r1, r3
    6950:	9803      	ldr	r0, [sp, #12]
    6952:	68eb      	ldr	r3, [r5, #12]
    6954:	9201      	str	r2, [sp, #4]
    6956:	4043      	eors	r3, r0
    6958:	692a      	ldr	r2, [r5, #16]
    695a:	9804      	ldr	r0, [sp, #16]
    695c:	9102      	str	r1, [sp, #8]
    695e:	4050      	eors	r0, r2
    6960:	9905      	ldr	r1, [sp, #20]
    6962:	696a      	ldr	r2, [r5, #20]
    6964:	9303      	str	r3, [sp, #12]
    6966:	4051      	eors	r1, r2
    6968:	69ab      	ldr	r3, [r5, #24]
    696a:	9a06      	ldr	r2, [sp, #24]
    696c:	9004      	str	r0, [sp, #16]
    696e:	405a      	eors	r2, r3
    6970:	9807      	ldr	r0, [sp, #28]
    6972:	69eb      	ldr	r3, [r5, #28]
    6974:	9105      	str	r1, [sp, #20]
    6976:	4058      	eors	r0, r3
    6978:	9908      	ldr	r1, [sp, #32]
    697a:	6a2b      	ldr	r3, [r5, #32]
    697c:	9206      	str	r2, [sp, #24]
    697e:	4059      	eors	r1, r3
    6980:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6982:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6984:	9007      	str	r0, [sp, #28]
    6986:	405a      	eors	r2, r3
    6988:	980a      	ldr	r0, [sp, #40]	; 0x28
    698a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    698c:	9108      	str	r1, [sp, #32]
    698e:	4043      	eors	r3, r0
    6990:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    6994:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6996:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    6998:	4630      	mov	r0, r6
    699a:	4053      	eors	r3, r2
    699c:	4669      	mov	r1, sp
    699e:	f44f 7280 	mov.w	r2, #256	; 0x100
    69a2:	930b      	str	r3, [sp, #44]	; 0x2c
    69a4:	f000 fdc2 	bl	752c <cc_mbedtls_aes_setkey_enc>
    69a8:	4680      	mov	r8, r0
    69aa:	b138      	cbz	r0, 69bc <ctr_drbg_update_internal+0x15c>
    69ac:	4668      	mov	r0, sp
    69ae:	2130      	movs	r1, #48	; 0x30
    69b0:	f7ff fdb8 	bl	6524 <mbedtls_platform_zeroize>
    69b4:	4640      	mov	r0, r8
    69b6:	b00c      	add	sp, #48	; 0x30
    69b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69bc:	4620      	mov	r0, r4
    69be:	2210      	movs	r2, #16
    69c0:	a908      	add	r1, sp, #32
    69c2:	f001 fef1 	bl	87a8 <memcpy>
    69c6:	e7f1      	b.n	69ac <ctr_drbg_update_internal+0x14c>

000069c8 <mbedtls_ctr_drbg_reseed_internal>:
    69c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69cc:	4605      	mov	r5, r0
    69ce:	6980      	ldr	r0, [r0, #24]
    69d0:	b0b9      	sub	sp, #228	; 0xe4
    69d2:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
    69d6:	f200 8179 	bhi.w	6ccc <mbedtls_ctr_drbg_reseed_internal+0x304>
    69da:	4699      	mov	r9, r3
    69dc:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
    69e0:	454b      	cmp	r3, r9
    69e2:	f0c0 8173 	bcc.w	6ccc <mbedtls_ctr_drbg_reseed_internal+0x304>
    69e6:	f5c9 74c0 	rsb	r4, r9, #384	; 0x180
    69ea:	1a20      	subs	r0, r4, r0
    69ec:	4290      	cmp	r0, r2
    69ee:	4690      	mov	r8, r2
    69f0:	f0c0 816c 	bcc.w	6ccc <mbedtls_ctr_drbg_reseed_internal+0x304>
    69f4:	4cb8      	ldr	r4, [pc, #736]	; (6cd8 <mbedtls_ctr_drbg_reseed_internal+0x310>)
    69f6:	f44f 72c0 	mov.w	r2, #384	; 0x180
    69fa:	460f      	mov	r7, r1
    69fc:	4620      	mov	r0, r4
    69fe:	2100      	movs	r1, #0
    6a00:	f001 fefd 	bl	87fe <memset>
    6a04:	4621      	mov	r1, r4
    6a06:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    6a0a:	69aa      	ldr	r2, [r5, #24]
    6a0c:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    6a10:	4798      	blx	r3
    6a12:	4682      	mov	sl, r0
    6a14:	2800      	cmp	r0, #0
    6a16:	f040 815c 	bne.w	6cd2 <mbedtls_ctr_drbg_reseed_internal+0x30a>
    6a1a:	69ae      	ldr	r6, [r5, #24]
    6a1c:	f1b9 0f00 	cmp.w	r9, #0
    6a20:	d00a      	beq.n	6a38 <mbedtls_ctr_drbg_reseed_internal+0x70>
    6a22:	464a      	mov	r2, r9
    6a24:	4621      	mov	r1, r4
    6a26:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    6a2a:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    6a2e:	4798      	blx	r3
    6a30:	2800      	cmp	r0, #0
    6a32:	f040 814e 	bne.w	6cd2 <mbedtls_ctr_drbg_reseed_internal+0x30a>
    6a36:	444e      	add	r6, r9
    6a38:	b11f      	cbz	r7, 6a42 <mbedtls_ctr_drbg_reseed_internal+0x7a>
    6a3a:	f1b8 0f00 	cmp.w	r8, #0
    6a3e:	f040 8121 	bne.w	6c84 <mbedtls_ctr_drbg_reseed_internal+0x2bc>
    6a42:	f5b6 7fc0 	cmp.w	r6, #384	; 0x180
    6a46:	bf88      	it	hi
    6a48:	f06f 0b37 	mvnhi.w	fp, #55	; 0x37
    6a4c:	f200 8111 	bhi.w	6c72 <mbedtls_ctr_drbg_reseed_internal+0x2aa>
    6a50:	4fa2      	ldr	r7, [pc, #648]	; (6cdc <mbedtls_ctr_drbg_reseed_internal+0x314>)
    6a52:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    6a56:	2100      	movs	r1, #0
    6a58:	4638      	mov	r0, r7
    6a5a:	f001 fed0 	bl	87fe <memset>
    6a5e:	a81b      	add	r0, sp, #108	; 0x6c
    6a60:	f000 fd4e 	bl	7500 <cc_mbedtls_aes_init>
    6a64:	2330      	movs	r3, #48	; 0x30
    6a66:	2200      	movs	r2, #0
    6a68:	ba71      	rev16	r1, r6
    6a6a:	823a      	strh	r2, [r7, #16]
    6a6c:	8279      	strh	r1, [r7, #18]
    6a6e:	4632      	mov	r2, r6
    6a70:	75fb      	strb	r3, [r7, #23]
    6a72:	4999      	ldr	r1, [pc, #612]	; (6cd8 <mbedtls_ctr_drbg_reseed_internal+0x310>)
    6a74:	f107 0018 	add.w	r0, r7, #24
    6a78:	f001 fe96 	bl	87a8 <memcpy>
    6a7c:	2280      	movs	r2, #128	; 0x80
    6a7e:	19bb      	adds	r3, r7, r6
    6a80:	761a      	strb	r2, [r3, #24]
    6a82:	f10d 031b 	add.w	r3, sp, #27
    6a86:	f803 af01 	strb.w	sl, [r3, #1]!
    6a8a:	f10a 0a01 	add.w	sl, sl, #1
    6a8e:	f1ba 0f20 	cmp.w	sl, #32
    6a92:	d1f8      	bne.n	6a86 <mbedtls_ctr_drbg_reseed_internal+0xbe>
    6a94:	f44f 7280 	mov.w	r2, #256	; 0x100
    6a98:	a907      	add	r1, sp, #28
    6a9a:	a81b      	add	r0, sp, #108	; 0x6c
    6a9c:	f000 fd46 	bl	752c <cc_mbedtls_aes_setkey_enc>
    6aa0:	4683      	mov	fp, r0
    6aa2:	2800      	cmp	r0, #0
    6aa4:	f040 80f5 	bne.w	6c92 <mbedtls_ctr_drbg_reseed_internal+0x2ca>
    6aa8:	9001      	str	r0, [sp, #4]
    6aaa:	3619      	adds	r6, #25
    6aac:	f10d 080c 	add.w	r8, sp, #12
    6ab0:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    6ab4:	2210      	movs	r2, #16
    6ab6:	2100      	movs	r1, #0
    6ab8:	4640      	mov	r0, r8
    6aba:	f001 fea0 	bl	87fe <memset>
    6abe:	46b1      	mov	r9, r6
    6ac0:	4c87      	ldr	r4, [pc, #540]	; (6ce0 <mbedtls_ctr_drbg_reseed_internal+0x318>)
    6ac2:	f89d 200c 	ldrb.w	r2, [sp, #12]
    6ac6:	f814 3c10 	ldrb.w	r3, [r4, #-16]
    6aca:	f89d c00d 	ldrb.w	ip, [sp, #13]
    6ace:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
    6ad2:	f89d 000e 	ldrb.w	r0, [sp, #14]
    6ad6:	4053      	eors	r3, r2
    6ad8:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
    6adc:	ea8c 0c01 	eor.w	ip, ip, r1
    6ae0:	4050      	eors	r0, r2
    6ae2:	f89d 100f 	ldrb.w	r1, [sp, #15]
    6ae6:	f814 2c0d 	ldrb.w	r2, [r4, #-13]
    6aea:	f89d e010 	ldrb.w	lr, [sp, #16]
    6aee:	4051      	eors	r1, r2
    6af0:	f814 2c0c 	ldrb.w	r2, [r4, #-12]
    6af4:	f88d 300c 	strb.w	r3, [sp, #12]
    6af8:	ea8e 0202 	eor.w	r2, lr, r2
    6afc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6b00:	f89d e011 	ldrb.w	lr, [sp, #17]
    6b04:	f88d c00d 	strb.w	ip, [sp, #13]
    6b08:	ea8e 0303 	eor.w	r3, lr, r3
    6b0c:	f814 cc0a 	ldrb.w	ip, [r4, #-10]
    6b10:	f89d e012 	ldrb.w	lr, [sp, #18]
    6b14:	f88d 000e 	strb.w	r0, [sp, #14]
    6b18:	ea8e 0c0c 	eor.w	ip, lr, ip
    6b1c:	f814 0c09 	ldrb.w	r0, [r4, #-9]
    6b20:	f89d e013 	ldrb.w	lr, [sp, #19]
    6b24:	f88d 100f 	strb.w	r1, [sp, #15]
    6b28:	ea8e 0000 	eor.w	r0, lr, r0
    6b2c:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    6b30:	f89d e014 	ldrb.w	lr, [sp, #20]
    6b34:	f88d 2010 	strb.w	r2, [sp, #16]
    6b38:	ea8e 0101 	eor.w	r1, lr, r1
    6b3c:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    6b40:	f89d e015 	ldrb.w	lr, [sp, #21]
    6b44:	f88d 3011 	strb.w	r3, [sp, #17]
    6b48:	ea8e 0202 	eor.w	r2, lr, r2
    6b4c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    6b50:	f814 ec06 	ldrb.w	lr, [r4, #-6]
    6b54:	f88d c012 	strb.w	ip, [sp, #18]
    6b58:	ea83 030e 	eor.w	r3, r3, lr
    6b5c:	f88d 0013 	strb.w	r0, [sp, #19]
    6b60:	f88d 1014 	strb.w	r1, [sp, #20]
    6b64:	f88d 2015 	strb.w	r2, [sp, #21]
    6b68:	f88d 3016 	strb.w	r3, [sp, #22]
    6b6c:	f89d 1017 	ldrb.w	r1, [sp, #23]
    6b70:	f814 3c05 	ldrb.w	r3, [r4, #-5]
    6b74:	f89d c018 	ldrb.w	ip, [sp, #24]
    6b78:	f89d 0019 	ldrb.w	r0, [sp, #25]
    6b7c:	404b      	eors	r3, r1
    6b7e:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    6b82:	f814 1c03 	ldrb.w	r1, [r4, #-3]
    6b86:	ea8c 0202 	eor.w	r2, ip, r2
    6b8a:	4041      	eors	r1, r0
    6b8c:	f89d c01a 	ldrb.w	ip, [sp, #26]
    6b90:	f814 0c02 	ldrb.w	r0, [r4, #-2]
    6b94:	f89d e01b 	ldrb.w	lr, [sp, #27]
    6b98:	ea8c 0000 	eor.w	r0, ip, r0
    6b9c:	f814 cc01 	ldrb.w	ip, [r4, #-1]
    6ba0:	f88d 3017 	strb.w	r3, [sp, #23]
    6ba4:	ea8e 0c0c 	eor.w	ip, lr, ip
    6ba8:	f88d 2018 	strb.w	r2, [sp, #24]
    6bac:	f88d 1019 	strb.w	r1, [sp, #25]
    6bb0:	f88d 001a 	strb.w	r0, [sp, #26]
    6bb4:	4643      	mov	r3, r8
    6bb6:	4642      	mov	r2, r8
    6bb8:	2101      	movs	r1, #1
    6bba:	a81b      	add	r0, sp, #108	; 0x6c
    6bbc:	f88d c01b 	strb.w	ip, [sp, #27]
    6bc0:	f000 fcd6 	bl	7570 <cc_mbedtls_aes_crypt_ecb>
    6bc4:	f1b9 0f10 	cmp.w	r9, #16
    6bc8:	4683      	mov	fp, r0
    6bca:	bf94      	ite	ls
    6bcc:	eba9 0909 	subls.w	r9, r9, r9
    6bd0:	f1a9 0910 	subhi.w	r9, r9, #16
    6bd4:	2800      	cmp	r0, #0
    6bd6:	d160      	bne.n	6c9a <mbedtls_ctr_drbg_reseed_internal+0x2d2>
    6bd8:	3410      	adds	r4, #16
    6bda:	f1b9 0f00 	cmp.w	r9, #0
    6bde:	f47f af70 	bne.w	6ac2 <mbedtls_ctr_drbg_reseed_internal+0xfa>
    6be2:	9c01      	ldr	r4, [sp, #4]
    6be4:	2210      	movs	r2, #16
    6be6:	4641      	mov	r1, r8
    6be8:	eb0a 0004 	add.w	r0, sl, r4
    6bec:	f001 fddc 	bl	87a8 <memcpy>
    6bf0:	78fb      	ldrb	r3, [r7, #3]
    6bf2:	f104 0210 	add.w	r2, r4, #16
    6bf6:	3301      	adds	r3, #1
    6bf8:	2a30      	cmp	r2, #48	; 0x30
    6bfa:	9201      	str	r2, [sp, #4]
    6bfc:	70fb      	strb	r3, [r7, #3]
    6bfe:	f47f af59 	bne.w	6ab4 <mbedtls_ctr_drbg_reseed_internal+0xec>
    6c02:	f44f 7280 	mov.w	r2, #256	; 0x100
    6c06:	4651      	mov	r1, sl
    6c08:	a81b      	add	r0, sp, #108	; 0x6c
    6c0a:	f000 fc8f 	bl	752c <cc_mbedtls_aes_setkey_enc>
    6c0e:	4683      	mov	fp, r0
    6c10:	2800      	cmp	r0, #0
    6c12:	d142      	bne.n	6c9a <mbedtls_ctr_drbg_reseed_internal+0x2d2>
    6c14:	4c30      	ldr	r4, [pc, #192]	; (6cd8 <mbedtls_ctr_drbg_reseed_internal+0x310>)
    6c16:	f104 0630 	add.w	r6, r4, #48	; 0x30
    6c1a:	ab17      	add	r3, sp, #92	; 0x5c
    6c1c:	461a      	mov	r2, r3
    6c1e:	2101      	movs	r1, #1
    6c20:	a81b      	add	r0, sp, #108	; 0x6c
    6c22:	f000 fca5 	bl	7570 <cc_mbedtls_aes_crypt_ecb>
    6c26:	4683      	mov	fp, r0
    6c28:	bbb8      	cbnz	r0, 6c9a <mbedtls_ctr_drbg_reseed_internal+0x2d2>
    6c2a:	2210      	movs	r2, #16
    6c2c:	4620      	mov	r0, r4
    6c2e:	a917      	add	r1, sp, #92	; 0x5c
    6c30:	4414      	add	r4, r2
    6c32:	f001 fdb9 	bl	87a8 <memcpy>
    6c36:	42b4      	cmp	r4, r6
    6c38:	d1ef      	bne.n	6c1a <mbedtls_ctr_drbg_reseed_internal+0x252>
    6c3a:	a81b      	add	r0, sp, #108	; 0x6c
    6c3c:	f000 fc70 	bl	7520 <cc_mbedtls_aes_free>
    6c40:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    6c44:	4825      	ldr	r0, [pc, #148]	; (6cdc <mbedtls_ctr_drbg_reseed_internal+0x314>)
    6c46:	f7ff fc6d 	bl	6524 <mbedtls_platform_zeroize>
    6c4a:	4650      	mov	r0, sl
    6c4c:	2130      	movs	r1, #48	; 0x30
    6c4e:	f7ff fc69 	bl	6524 <mbedtls_platform_zeroize>
    6c52:	2120      	movs	r1, #32
    6c54:	a807      	add	r0, sp, #28
    6c56:	f7ff fc65 	bl	6524 <mbedtls_platform_zeroize>
    6c5a:	4640      	mov	r0, r8
    6c5c:	2110      	movs	r1, #16
    6c5e:	f7ff fc61 	bl	6524 <mbedtls_platform_zeroize>
    6c62:	4628      	mov	r0, r5
    6c64:	491c      	ldr	r1, [pc, #112]	; (6cd8 <mbedtls_ctr_drbg_reseed_internal+0x310>)
    6c66:	f7ff fdfb 	bl	6860 <ctr_drbg_update_internal>
    6c6a:	4683      	mov	fp, r0
    6c6c:	b908      	cbnz	r0, 6c72 <mbedtls_ctr_drbg_reseed_internal+0x2aa>
    6c6e:	2201      	movs	r2, #1
    6c70:	612a      	str	r2, [r5, #16]
    6c72:	f44f 71c0 	mov.w	r1, #384	; 0x180
    6c76:	4818      	ldr	r0, [pc, #96]	; (6cd8 <mbedtls_ctr_drbg_reseed_internal+0x310>)
    6c78:	f7ff fc54 	bl	6524 <mbedtls_platform_zeroize>
    6c7c:	4658      	mov	r0, fp
    6c7e:	b039      	add	sp, #228	; 0xe4
    6c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c84:	19a0      	adds	r0, r4, r6
    6c86:	4639      	mov	r1, r7
    6c88:	4642      	mov	r2, r8
    6c8a:	f001 fd8d 	bl	87a8 <memcpy>
    6c8e:	4446      	add	r6, r8
    6c90:	e6d7      	b.n	6a42 <mbedtls_ctr_drbg_reseed_internal+0x7a>
    6c92:	f10d 080c 	add.w	r8, sp, #12
    6c96:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    6c9a:	a81b      	add	r0, sp, #108	; 0x6c
    6c9c:	f000 fc40 	bl	7520 <cc_mbedtls_aes_free>
    6ca0:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    6ca4:	480d      	ldr	r0, [pc, #52]	; (6cdc <mbedtls_ctr_drbg_reseed_internal+0x314>)
    6ca6:	f7ff fc3d 	bl	6524 <mbedtls_platform_zeroize>
    6caa:	4650      	mov	r0, sl
    6cac:	2130      	movs	r1, #48	; 0x30
    6cae:	f7ff fc39 	bl	6524 <mbedtls_platform_zeroize>
    6cb2:	a807      	add	r0, sp, #28
    6cb4:	2120      	movs	r1, #32
    6cb6:	f7ff fc35 	bl	6524 <mbedtls_platform_zeroize>
    6cba:	4640      	mov	r0, r8
    6cbc:	2110      	movs	r1, #16
    6cbe:	f7ff fc31 	bl	6524 <mbedtls_platform_zeroize>
    6cc2:	2130      	movs	r1, #48	; 0x30
    6cc4:	4804      	ldr	r0, [pc, #16]	; (6cd8 <mbedtls_ctr_drbg_reseed_internal+0x310>)
    6cc6:	f7ff fc2d 	bl	6524 <mbedtls_platform_zeroize>
    6cca:	e7d2      	b.n	6c72 <mbedtls_ctr_drbg_reseed_internal+0x2aa>
    6ccc:	f06f 0b37 	mvn.w	fp, #55	; 0x37
    6cd0:	e7d4      	b.n	6c7c <mbedtls_ctr_drbg_reseed_internal+0x2b4>
    6cd2:	f06f 0b33 	mvn.w	fp, #51	; 0x33
    6cd6:	e7d1      	b.n	6c7c <mbedtls_ctr_drbg_reseed_internal+0x2b4>
    6cd8:	200014cc 	.word	0x200014cc
    6cdc:	2000132c 	.word	0x2000132c
    6ce0:	2000133c 	.word	0x2000133c

00006ce4 <cc_mbedtls_ctr_drbg_init>:
    6ce4:	b510      	push	{r4, lr}
    6ce6:	22a4      	movs	r2, #164	; 0xa4
    6ce8:	2100      	movs	r1, #0
    6cea:	4604      	mov	r4, r0
    6cec:	f001 fd87 	bl	87fe <memset>
    6cf0:	f04f 32ff 	mov.w	r2, #4294967295
    6cf4:	4b03      	ldr	r3, [pc, #12]	; (6d04 <cc_mbedtls_ctr_drbg_init+0x20>)
    6cf6:	6122      	str	r2, [r4, #16]
    6cf8:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    6cfc:	681b      	ldr	r3, [r3, #0]
    6cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6d02:	4718      	bx	r3
    6d04:	200000b0 	.word	0x200000b0

00006d08 <cc_mbedtls_ctr_drbg_seed>:
    6d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d0c:	4604      	mov	r4, r0
    6d0e:	460f      	mov	r7, r1
    6d10:	4615      	mov	r5, r2
    6d12:	b088      	sub	sp, #32
    6d14:	2220      	movs	r2, #32
    6d16:	2100      	movs	r1, #0
    6d18:	f100 0820 	add.w	r8, r0, #32
    6d1c:	4668      	mov	r0, sp
    6d1e:	461e      	mov	r6, r3
    6d20:	f001 fd6d 	bl	87fe <memset>
    6d24:	4640      	mov	r0, r8
    6d26:	f000 fbeb 	bl	7500 <cc_mbedtls_aes_init>
    6d2a:	69a0      	ldr	r0, [r4, #24]
    6d2c:	e9c4 7525 	strd	r7, r5, [r4, #148]	; 0x94
    6d30:	b9d8      	cbnz	r0, 6d6a <cc_mbedtls_ctr_drbg_seed+0x62>
    6d32:	2020      	movs	r0, #32
    6d34:	6927      	ldr	r7, [r4, #16]
    6d36:	61a0      	str	r0, [r4, #24]
    6d38:	2f00      	cmp	r7, #0
    6d3a:	db1d      	blt.n	6d78 <cc_mbedtls_ctr_drbg_seed+0x70>
    6d3c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    6d40:	4669      	mov	r1, sp
    6d42:	4640      	mov	r0, r8
    6d44:	f44f 7280 	mov.w	r2, #256	; 0x100
    6d48:	61e3      	str	r3, [r4, #28]
    6d4a:	f000 fbef 	bl	752c <cc_mbedtls_aes_setkey_enc>
    6d4e:	4605      	mov	r5, r0
    6d50:	b938      	cbnz	r0, 6d62 <cc_mbedtls_ctr_drbg_seed+0x5a>
    6d52:	4b14      	ldr	r3, [pc, #80]	; (6da4 <cc_mbedtls_ctr_drbg_seed+0x9c>)
    6d54:	f104 089c 	add.w	r8, r4, #156	; 0x9c
    6d58:	4640      	mov	r0, r8
    6d5a:	681b      	ldr	r3, [r3, #0]
    6d5c:	4798      	blx	r3
    6d5e:	4605      	mov	r5, r0
    6d60:	b168      	cbz	r0, 6d7e <cc_mbedtls_ctr_drbg_seed+0x76>
    6d62:	4628      	mov	r0, r5
    6d64:	b008      	add	sp, #32
    6d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d6a:	6927      	ldr	r7, [r4, #16]
    6d6c:	2f00      	cmp	r7, #0
    6d6e:	dae5      	bge.n	6d3c <cc_mbedtls_ctr_drbg_seed+0x34>
    6d70:	282f      	cmp	r0, #47	; 0x2f
    6d72:	bf88      	it	hi
    6d74:	2700      	movhi	r7, #0
    6d76:	d8e1      	bhi.n	6d3c <cc_mbedtls_ctr_drbg_seed+0x34>
    6d78:	3001      	adds	r0, #1
    6d7a:	0847      	lsrs	r7, r0, #1
    6d7c:	e7de      	b.n	6d3c <cc_mbedtls_ctr_drbg_seed+0x34>
    6d7e:	463b      	mov	r3, r7
    6d80:	4631      	mov	r1, r6
    6d82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6d84:	4620      	mov	r0, r4
    6d86:	f7ff fe1f 	bl	69c8 <mbedtls_ctr_drbg_reseed_internal>
    6d8a:	4b07      	ldr	r3, [pc, #28]	; (6da8 <cc_mbedtls_ctr_drbg_seed+0xa0>)
    6d8c:	4605      	mov	r5, r0
    6d8e:	681b      	ldr	r3, [r3, #0]
    6d90:	4640      	mov	r0, r8
    6d92:	4798      	blx	r3
    6d94:	2800      	cmp	r0, #0
    6d96:	bf18      	it	ne
    6d98:	4605      	movne	r5, r0
    6d9a:	4628      	mov	r0, r5
    6d9c:	b008      	add	sp, #32
    6d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6da2:	bf00      	nop
    6da4:	200000b4 	.word	0x200000b4
    6da8:	200000b8 	.word	0x200000b8

00006dac <cc_mbedtls_ctr_drbg_random_with_add>:
    6dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6db0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    6db4:	b090      	sub	sp, #64	; 0x40
    6db6:	9f18      	ldr	r7, [sp, #96]	; 0x60
    6db8:	f200 80cb 	bhi.w	6f52 <cc_mbedtls_ctr_drbg_random_with_add+0x1a6>
    6dbc:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    6dc0:	f200 80c4 	bhi.w	6f4c <cc_mbedtls_ctr_drbg_random_with_add+0x1a0>
    6dc4:	4604      	mov	r4, r0
    6dc6:	4615      	mov	r5, r2
    6dc8:	460e      	mov	r6, r1
    6dca:	2230      	movs	r2, #48	; 0x30
    6dcc:	2100      	movs	r1, #0
    6dce:	a804      	add	r0, sp, #16
    6dd0:	4698      	mov	r8, r3
    6dd2:	f001 fd14 	bl	87fe <memset>
    6dd6:	6921      	ldr	r1, [r4, #16]
    6dd8:	69e2      	ldr	r2, [r4, #28]
    6dda:	4291      	cmp	r1, r2
    6ddc:	f300 8087 	bgt.w	6eee <cc_mbedtls_ctr_drbg_random_with_add+0x142>
    6de0:	6963      	ldr	r3, [r4, #20]
    6de2:	2b00      	cmp	r3, #0
    6de4:	f040 8083 	bne.w	6eee <cc_mbedtls_ctr_drbg_random_with_add+0x142>
    6de8:	2f00      	cmp	r7, #0
    6dea:	f040 80a7 	bne.w	6f3c <cc_mbedtls_ctr_drbg_random_with_add+0x190>
    6dee:	466f      	mov	r7, sp
    6df0:	2d00      	cmp	r5, #0
    6df2:	f000 8098 	beq.w	6f26 <cc_mbedtls_ctr_drbg_random_with_add+0x17a>
    6df6:	466f      	mov	r7, sp
    6df8:	f104 0820 	add.w	r8, r4, #32
    6dfc:	e00e      	b.n	6e1c <cc_mbedtls_ctr_drbg_random_with_add+0x70>
    6dfe:	2d10      	cmp	r5, #16
    6e00:	46a9      	mov	r9, r5
    6e02:	bf28      	it	cs
    6e04:	f04f 0910 	movcs.w	r9, #16
    6e08:	4630      	mov	r0, r6
    6e0a:	4639      	mov	r1, r7
    6e0c:	464a      	mov	r2, r9
    6e0e:	f001 fccb 	bl	87a8 <memcpy>
    6e12:	ebb5 0509 	subs.w	r5, r5, r9
    6e16:	444e      	add	r6, r9
    6e18:	f000 8085 	beq.w	6f26 <cc_mbedtls_ctr_drbg_random_with_add+0x17a>
    6e1c:	7be3      	ldrb	r3, [r4, #15]
    6e1e:	3301      	adds	r3, #1
    6e20:	b2db      	uxtb	r3, r3
    6e22:	73e3      	strb	r3, [r4, #15]
    6e24:	2b00      	cmp	r3, #0
    6e26:	d14d      	bne.n	6ec4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    6e28:	7ba3      	ldrb	r3, [r4, #14]
    6e2a:	3301      	adds	r3, #1
    6e2c:	b2db      	uxtb	r3, r3
    6e2e:	73a3      	strb	r3, [r4, #14]
    6e30:	2b00      	cmp	r3, #0
    6e32:	d147      	bne.n	6ec4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    6e34:	7b63      	ldrb	r3, [r4, #13]
    6e36:	3301      	adds	r3, #1
    6e38:	b2db      	uxtb	r3, r3
    6e3a:	7363      	strb	r3, [r4, #13]
    6e3c:	2b00      	cmp	r3, #0
    6e3e:	d141      	bne.n	6ec4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    6e40:	7b23      	ldrb	r3, [r4, #12]
    6e42:	3301      	adds	r3, #1
    6e44:	b2db      	uxtb	r3, r3
    6e46:	7323      	strb	r3, [r4, #12]
    6e48:	2b00      	cmp	r3, #0
    6e4a:	d13b      	bne.n	6ec4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    6e4c:	7ae3      	ldrb	r3, [r4, #11]
    6e4e:	3301      	adds	r3, #1
    6e50:	b2db      	uxtb	r3, r3
    6e52:	72e3      	strb	r3, [r4, #11]
    6e54:	2b00      	cmp	r3, #0
    6e56:	d135      	bne.n	6ec4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    6e58:	7aa3      	ldrb	r3, [r4, #10]
    6e5a:	3301      	adds	r3, #1
    6e5c:	b2db      	uxtb	r3, r3
    6e5e:	72a3      	strb	r3, [r4, #10]
    6e60:	2b00      	cmp	r3, #0
    6e62:	d12f      	bne.n	6ec4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    6e64:	7a63      	ldrb	r3, [r4, #9]
    6e66:	3301      	adds	r3, #1
    6e68:	b2db      	uxtb	r3, r3
    6e6a:	7263      	strb	r3, [r4, #9]
    6e6c:	bb53      	cbnz	r3, 6ec4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    6e6e:	7a23      	ldrb	r3, [r4, #8]
    6e70:	3301      	adds	r3, #1
    6e72:	b2db      	uxtb	r3, r3
    6e74:	7223      	strb	r3, [r4, #8]
    6e76:	bb2b      	cbnz	r3, 6ec4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    6e78:	79e3      	ldrb	r3, [r4, #7]
    6e7a:	3301      	adds	r3, #1
    6e7c:	b2db      	uxtb	r3, r3
    6e7e:	71e3      	strb	r3, [r4, #7]
    6e80:	bb03      	cbnz	r3, 6ec4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    6e82:	79a3      	ldrb	r3, [r4, #6]
    6e84:	3301      	adds	r3, #1
    6e86:	b2db      	uxtb	r3, r3
    6e88:	71a3      	strb	r3, [r4, #6]
    6e8a:	b9db      	cbnz	r3, 6ec4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    6e8c:	7963      	ldrb	r3, [r4, #5]
    6e8e:	3301      	adds	r3, #1
    6e90:	b2db      	uxtb	r3, r3
    6e92:	7163      	strb	r3, [r4, #5]
    6e94:	b9b3      	cbnz	r3, 6ec4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    6e96:	7923      	ldrb	r3, [r4, #4]
    6e98:	3301      	adds	r3, #1
    6e9a:	b2db      	uxtb	r3, r3
    6e9c:	7123      	strb	r3, [r4, #4]
    6e9e:	b98b      	cbnz	r3, 6ec4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    6ea0:	78e3      	ldrb	r3, [r4, #3]
    6ea2:	3301      	adds	r3, #1
    6ea4:	b2db      	uxtb	r3, r3
    6ea6:	70e3      	strb	r3, [r4, #3]
    6ea8:	b963      	cbnz	r3, 6ec4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    6eaa:	78a3      	ldrb	r3, [r4, #2]
    6eac:	3301      	adds	r3, #1
    6eae:	b2db      	uxtb	r3, r3
    6eb0:	70a3      	strb	r3, [r4, #2]
    6eb2:	b93b      	cbnz	r3, 6ec4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    6eb4:	7863      	ldrb	r3, [r4, #1]
    6eb6:	3301      	adds	r3, #1
    6eb8:	b2db      	uxtb	r3, r3
    6eba:	7063      	strb	r3, [r4, #1]
    6ebc:	b913      	cbnz	r3, 6ec4 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
    6ebe:	7823      	ldrb	r3, [r4, #0]
    6ec0:	3301      	adds	r3, #1
    6ec2:	7023      	strb	r3, [r4, #0]
    6ec4:	463b      	mov	r3, r7
    6ec6:	4622      	mov	r2, r4
    6ec8:	2101      	movs	r1, #1
    6eca:	4640      	mov	r0, r8
    6ecc:	f000 fb50 	bl	7570 <cc_mbedtls_aes_crypt_ecb>
    6ed0:	4681      	mov	r9, r0
    6ed2:	2800      	cmp	r0, #0
    6ed4:	d093      	beq.n	6dfe <cc_mbedtls_ctr_drbg_random_with_add+0x52>
    6ed6:	2130      	movs	r1, #48	; 0x30
    6ed8:	a804      	add	r0, sp, #16
    6eda:	f7ff fb23 	bl	6524 <mbedtls_platform_zeroize>
    6ede:	4638      	mov	r0, r7
    6ee0:	2110      	movs	r1, #16
    6ee2:	f7ff fb1f 	bl	6524 <mbedtls_platform_zeroize>
    6ee6:	4648      	mov	r0, r9
    6ee8:	b010      	add	sp, #64	; 0x40
    6eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6eee:	4b1a      	ldr	r3, [pc, #104]	; (6f58 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>)
    6ef0:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
    6ef4:	4650      	mov	r0, sl
    6ef6:	681b      	ldr	r3, [r3, #0]
    6ef8:	4798      	blx	r3
    6efa:	4681      	mov	r9, r0
    6efc:	2800      	cmp	r0, #0
    6efe:	d1f2      	bne.n	6ee6 <cc_mbedtls_ctr_drbg_random_with_add+0x13a>
    6f00:	4603      	mov	r3, r0
    6f02:	463a      	mov	r2, r7
    6f04:	4641      	mov	r1, r8
    6f06:	4620      	mov	r0, r4
    6f08:	f7ff fd5e 	bl	69c8 <mbedtls_ctr_drbg_reseed_internal>
    6f0c:	4b13      	ldr	r3, [pc, #76]	; (6f5c <cc_mbedtls_ctr_drbg_random_with_add+0x1b0>)
    6f0e:	4607      	mov	r7, r0
    6f10:	681b      	ldr	r3, [r3, #0]
    6f12:	4650      	mov	r0, sl
    6f14:	4798      	blx	r3
    6f16:	4681      	mov	r9, r0
    6f18:	2800      	cmp	r0, #0
    6f1a:	d1e4      	bne.n	6ee6 <cc_mbedtls_ctr_drbg_random_with_add+0x13a>
    6f1c:	2f00      	cmp	r7, #0
    6f1e:	f43f af66 	beq.w	6dee <cc_mbedtls_ctr_drbg_random_with_add+0x42>
    6f22:	46b9      	mov	r9, r7
    6f24:	e7df      	b.n	6ee6 <cc_mbedtls_ctr_drbg_random_with_add+0x13a>
    6f26:	4620      	mov	r0, r4
    6f28:	a904      	add	r1, sp, #16
    6f2a:	f7ff fc99 	bl	6860 <ctr_drbg_update_internal>
    6f2e:	4681      	mov	r9, r0
    6f30:	2800      	cmp	r0, #0
    6f32:	d1d0      	bne.n	6ed6 <cc_mbedtls_ctr_drbg_random_with_add+0x12a>
    6f34:	6923      	ldr	r3, [r4, #16]
    6f36:	3301      	adds	r3, #1
    6f38:	6123      	str	r3, [r4, #16]
    6f3a:	e7cc      	b.n	6ed6 <cc_mbedtls_ctr_drbg_random_with_add+0x12a>
    6f3c:	4b06      	ldr	r3, [pc, #24]	; (6f58 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>)
    6f3e:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    6f42:	681b      	ldr	r3, [r3, #0]
    6f44:	4798      	blx	r3
    6f46:	466f      	mov	r7, sp
    6f48:	4681      	mov	r9, r0
    6f4a:	e7c4      	b.n	6ed6 <cc_mbedtls_ctr_drbg_random_with_add+0x12a>
    6f4c:	f06f 0937 	mvn.w	r9, #55	; 0x37
    6f50:	e7c9      	b.n	6ee6 <cc_mbedtls_ctr_drbg_random_with_add+0x13a>
    6f52:	f06f 0935 	mvn.w	r9, #53	; 0x35
    6f56:	e7c6      	b.n	6ee6 <cc_mbedtls_ctr_drbg_random_with_add+0x13a>
    6f58:	200000b4 	.word	0x200000b4
    6f5c:	200000b8 	.word	0x200000b8

00006f60 <cc_mbedtls_sha256_ret>:
    6f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f62:	461c      	mov	r4, r3
    6f64:	4605      	mov	r5, r0
    6f66:	4811      	ldr	r0, [pc, #68]	; (6fac <cc_mbedtls_sha256_ret+0x4c>)
    6f68:	460e      	mov	r6, r1
    6f6a:	4617      	mov	r7, r2
    6f6c:	f7ff fb6a 	bl	6644 <cc_mbedtls_sha256_init>
    6f70:	4621      	mov	r1, r4
    6f72:	480e      	ldr	r0, [pc, #56]	; (6fac <cc_mbedtls_sha256_ret+0x4c>)
    6f74:	f7ff fb80 	bl	6678 <cc_mbedtls_sha256_starts_ret>
    6f78:	4604      	mov	r4, r0
    6f7a:	b120      	cbz	r0, 6f86 <cc_mbedtls_sha256_ret+0x26>
    6f7c:	480b      	ldr	r0, [pc, #44]	; (6fac <cc_mbedtls_sha256_ret+0x4c>)
    6f7e:	f7ff fb75 	bl	666c <cc_mbedtls_sha256_free>
    6f82:	4620      	mov	r0, r4
    6f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f86:	4632      	mov	r2, r6
    6f88:	4629      	mov	r1, r5
    6f8a:	4808      	ldr	r0, [pc, #32]	; (6fac <cc_mbedtls_sha256_ret+0x4c>)
    6f8c:	f7ff fb88 	bl	66a0 <cc_mbedtls_sha256_update_ret>
    6f90:	4604      	mov	r4, r0
    6f92:	2800      	cmp	r0, #0
    6f94:	d1f2      	bne.n	6f7c <cc_mbedtls_sha256_ret+0x1c>
    6f96:	4639      	mov	r1, r7
    6f98:	4804      	ldr	r0, [pc, #16]	; (6fac <cc_mbedtls_sha256_ret+0x4c>)
    6f9a:	f7ff fb89 	bl	66b0 <cc_mbedtls_sha256_finish_ret>
    6f9e:	4604      	mov	r4, r0
    6fa0:	4802      	ldr	r0, [pc, #8]	; (6fac <cc_mbedtls_sha256_ret+0x4c>)
    6fa2:	f7ff fb63 	bl	666c <cc_mbedtls_sha256_free>
    6fa6:	4620      	mov	r0, r4
    6fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6faa:	bf00      	nop
    6fac:	2000164c 	.word	0x2000164c

00006fb0 <RNG_PLAT_SetUserRngParameters>:
    6fb0:	231c      	movs	r3, #28
    6fb2:	b530      	push	{r4, r5, lr}
    6fb4:	b083      	sub	sp, #12
    6fb6:	a901      	add	r1, sp, #4
    6fb8:	4604      	mov	r4, r0
    6fba:	9301      	str	r3, [sp, #4]
    6fbc:	f000 f83e 	bl	703c <CC_PalTrngParamGet>
    6fc0:	4605      	mov	r5, r0
    6fc2:	b938      	cbnz	r0, 6fd4 <RNG_PLAT_SetUserRngParameters+0x24>
    6fc4:	9b01      	ldr	r3, [sp, #4]
    6fc6:	2b1c      	cmp	r3, #28
    6fc8:	d007      	beq.n	6fda <RNG_PLAT_SetUserRngParameters+0x2a>
    6fca:	4d16      	ldr	r5, [pc, #88]	; (7024 <RNG_PLAT_SetUserRngParameters+0x74>)
    6fcc:	4620      	mov	r0, r4
    6fce:	211c      	movs	r1, #28
    6fd0:	f000 f830 	bl	7034 <CC_PalMemSetZeroPlat>
    6fd4:	4628      	mov	r0, r5
    6fd6:	b003      	add	sp, #12
    6fd8:	bd30      	pop	{r4, r5, pc}
    6fda:	2101      	movs	r1, #1
    6fdc:	e9d4 3200 	ldrd	r3, r2, [r4]
    6fe0:	3b00      	subs	r3, #0
    6fe2:	bf18      	it	ne
    6fe4:	2301      	movne	r3, #1
    6fe6:	61e1      	str	r1, [r4, #28]
    6fe8:	b10a      	cbz	r2, 6fee <RNG_PLAT_SetUserRngParameters+0x3e>
    6fea:	f043 0302 	orr.w	r3, r3, #2
    6fee:	68a2      	ldr	r2, [r4, #8]
    6ff0:	b932      	cbnz	r2, 7000 <RNG_PLAT_SetUserRngParameters+0x50>
    6ff2:	68e2      	ldr	r2, [r4, #12]
    6ff4:	b942      	cbnz	r2, 7008 <RNG_PLAT_SetUserRngParameters+0x58>
    6ff6:	e9c4 3208 	strd	r3, r2, [r4, #32]
    6ffa:	b98b      	cbnz	r3, 7020 <RNG_PLAT_SetUserRngParameters+0x70>
    6ffc:	4d0a      	ldr	r5, [pc, #40]	; (7028 <RNG_PLAT_SetUserRngParameters+0x78>)
    6ffe:	e7e5      	b.n	6fcc <RNG_PLAT_SetUserRngParameters+0x1c>
    7000:	68e2      	ldr	r2, [r4, #12]
    7002:	f043 0304 	orr.w	r3, r3, #4
    7006:	b13a      	cbz	r2, 7018 <RNG_PLAT_SetUserRngParameters+0x68>
    7008:	2200      	movs	r2, #0
    700a:	4628      	mov	r0, r5
    700c:	f043 0308 	orr.w	r3, r3, #8
    7010:	e9c4 3208 	strd	r3, r2, [r4, #32]
    7014:	b003      	add	sp, #12
    7016:	bd30      	pop	{r4, r5, pc}
    7018:	4615      	mov	r5, r2
    701a:	e9c4 3208 	strd	r3, r2, [r4, #32]
    701e:	e7d9      	b.n	6fd4 <RNG_PLAT_SetUserRngParameters+0x24>
    7020:	4615      	mov	r5, r2
    7022:	e7d7      	b.n	6fd4 <RNG_PLAT_SetUserRngParameters+0x24>
    7024:	00f00c37 	.word	0x00f00c37
    7028:	00f00c0e 	.word	0x00f00c0e

0000702c <CC_PalMemCopyPlat>:
    702c:	f001 bba5 	b.w	877a <memmove>

00007030 <CC_PalMemSetPlat>:
    7030:	f001 bbe5 	b.w	87fe <memset>

00007034 <CC_PalMemSetZeroPlat>:
    7034:	460a      	mov	r2, r1
    7036:	2100      	movs	r1, #0
    7038:	f001 bbe1 	b.w	87fe <memset>

0000703c <CC_PalTrngParamGet>:
    703c:	b118      	cbz	r0, 7046 <CC_PalTrngParamGet+0xa>
    703e:	b111      	cbz	r1, 7046 <CC_PalTrngParamGet+0xa>
    7040:	680b      	ldr	r3, [r1, #0]
    7042:	2b1c      	cmp	r3, #28
    7044:	d001      	beq.n	704a <CC_PalTrngParamGet+0xe>
    7046:	2001      	movs	r0, #1
    7048:	4770      	bx	lr
    704a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    704e:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    7052:	3201      	adds	r2, #1
    7054:	bf0c      	ite	eq
    7056:	f240 52dc 	movweq	r2, #1500	; 0x5dc
    705a:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
    705e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7062:	6002      	str	r2, [r0, #0]
    7064:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    7068:	3201      	adds	r2, #1
    706a:	bf0c      	ite	eq
    706c:	f240 52dc 	movweq	r2, #1500	; 0x5dc
    7070:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
    7074:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7078:	6042      	str	r2, [r0, #4]
    707a:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    707e:	3201      	adds	r2, #1
    7080:	bf0c      	ite	eq
    7082:	f640 0234 	movweq	r2, #2100	; 0x834
    7086:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
    708a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    708e:	6082      	str	r2, [r0, #8]
    7090:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    7094:	3201      	adds	r2, #1
    7096:	bf0c      	ite	eq
    7098:	f640 0234 	movweq	r2, #2100	; 0x834
    709c:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
    70a0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    70a4:	60c2      	str	r2, [r0, #12]
    70a6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    70aa:	3201      	adds	r2, #1
    70ac:	bf0c      	ite	eq
    70ae:	2290      	moveq	r2, #144	; 0x90
    70b0:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
    70b4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    70b8:	6102      	str	r2, [r0, #16]
    70ba:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    70be:	3201      	adds	r2, #1
    70c0:	bf0c      	ite	eq
    70c2:	2251      	moveq	r2, #81	; 0x51
    70c4:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
    70c8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    70cc:	6142      	str	r2, [r0, #20]
    70ce:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    70d2:	3201      	adds	r2, #1
    70d4:	bf0c      	ite	eq
    70d6:	f240 3337 	movweq	r3, #823	; 0x337
    70da:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
    70de:	6183      	str	r3, [r0, #24]
    70e0:	2000      	movs	r0, #0
    70e2:	4770      	bx	lr

000070e4 <LLF_RND_WaitRngInterrupt>:
    70e4:	4601      	mov	r1, r0
    70e6:	b508      	push	{r3, lr}
    70e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
    70ec:	f7fe fe52 	bl	5d94 <CC_HalWaitInterruptRND>
    70f0:	2300      	movs	r3, #0
    70f2:	4902      	ldr	r1, [pc, #8]	; (70fc <LLF_RND_WaitRngInterrupt+0x18>)
    70f4:	4a02      	ldr	r2, [pc, #8]	; (7100 <LLF_RND_WaitRngInterrupt+0x1c>)
    70f6:	600b      	str	r3, [r1, #0]
    70f8:	6013      	str	r3, [r2, #0]
    70fa:	bd08      	pop	{r3, pc}
    70fc:	508451c8 	.word	0x508451c8
    7100:	5084512c 	.word	0x5084512c

00007104 <LLF_RND_GetRoscSampleCnt>:
    7104:	3801      	subs	r0, #1
    7106:	2807      	cmp	r0, #7
    7108:	d805      	bhi.n	7116 <LLF_RND_GetRoscSampleCnt+0x12>
    710a:	e8df f000 	tbb	[pc, r0]
    710e:	0e0a      	.short	0x0e0a
    7110:	04041204 	.word	0x04041204
    7114:	0604      	.short	0x0604
    7116:	4809      	ldr	r0, [pc, #36]	; (713c <LLF_RND_GetRoscSampleCnt+0x38>)
    7118:	4770      	bx	lr
    711a:	68cb      	ldr	r3, [r1, #12]
    711c:	2000      	movs	r0, #0
    711e:	624b      	str	r3, [r1, #36]	; 0x24
    7120:	4770      	bx	lr
    7122:	680b      	ldr	r3, [r1, #0]
    7124:	2000      	movs	r0, #0
    7126:	624b      	str	r3, [r1, #36]	; 0x24
    7128:	4770      	bx	lr
    712a:	684b      	ldr	r3, [r1, #4]
    712c:	2000      	movs	r0, #0
    712e:	624b      	str	r3, [r1, #36]	; 0x24
    7130:	4770      	bx	lr
    7132:	688b      	ldr	r3, [r1, #8]
    7134:	2000      	movs	r0, #0
    7136:	624b      	str	r3, [r1, #36]	; 0x24
    7138:	4770      	bx	lr
    713a:	bf00      	nop
    713c:	00f10c31 	.word	0x00f10c31

00007140 <LLF_RND_GetFastestRosc>:
    7140:	680b      	ldr	r3, [r1, #0]
    7142:	e002      	b.n	714a <LLF_RND_GetFastestRosc+0xa>
    7144:	2b08      	cmp	r3, #8
    7146:	600b      	str	r3, [r1, #0]
    7148:	d806      	bhi.n	7158 <LLF_RND_GetFastestRosc+0x18>
    714a:	6a02      	ldr	r2, [r0, #32]
    714c:	4213      	tst	r3, r2
    714e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    7152:	d0f7      	beq.n	7144 <LLF_RND_GetFastestRosc+0x4>
    7154:	2000      	movs	r0, #0
    7156:	4770      	bx	lr
    7158:	4800      	ldr	r0, [pc, #0]	; (715c <LLF_RND_GetFastestRosc+0x1c>)
    715a:	4770      	bx	lr
    715c:	00f10c31 	.word	0x00f10c31

00007160 <LLF_RND_TurnOffTrng>:
    7160:	b508      	push	{r3, lr}
    7162:	2300      	movs	r3, #0
    7164:	4a06      	ldr	r2, [pc, #24]	; (7180 <LLF_RND_TurnOffTrng+0x20>)
    7166:	4907      	ldr	r1, [pc, #28]	; (7184 <LLF_RND_TurnOffTrng+0x24>)
    7168:	f44f 6080 	mov.w	r0, #1024	; 0x400
    716c:	600b      	str	r3, [r1, #0]
    716e:	6013      	str	r3, [r2, #0]
    7170:	f7fe fdf6 	bl	5d60 <CC_HalClearInterruptBit>
    7174:	f04f 32ff 	mov.w	r2, #4294967295
    7178:	4b03      	ldr	r3, [pc, #12]	; (7188 <LLF_RND_TurnOffTrng+0x28>)
    717a:	601a      	str	r2, [r3, #0]
    717c:	bd08      	pop	{r3, pc}
    717e:	bf00      	nop
    7180:	508451c4 	.word	0x508451c4
    7184:	5084512c 	.word	0x5084512c
    7188:	50845108 	.word	0x50845108

0000718c <SetDataBuffersInfo>:
    718c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7190:	2400      	movs	r4, #0
    7192:	b082      	sub	sp, #8
    7194:	4615      	mov	r5, r2
    7196:	461e      	mov	r6, r3
    7198:	2201      	movs	r2, #1
    719a:	f10d 0307 	add.w	r3, sp, #7
    719e:	4607      	mov	r7, r0
    71a0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    71a4:	f88d 4007 	strb.w	r4, [sp, #7]
    71a8:	f000 fa0c 	bl	75c4 <CC_PalDataBufferAttrGet>
    71ac:	b9d0      	cbnz	r0, 71e4 <SetDataBuffersInfo+0x58>
    71ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    71b2:	4604      	mov	r4, r0
    71b4:	602f      	str	r7, [r5, #0]
    71b6:	712b      	strb	r3, [r5, #4]
    71b8:	f1b8 0f00 	cmp.w	r8, #0
    71bc:	d00e      	beq.n	71dc <SetDataBuffersInfo+0x50>
    71be:	b14e      	cbz	r6, 71d4 <SetDataBuffersInfo+0x48>
    71c0:	4602      	mov	r2, r0
    71c2:	9908      	ldr	r1, [sp, #32]
    71c4:	4630      	mov	r0, r6
    71c6:	f10d 0307 	add.w	r3, sp, #7
    71ca:	f000 f9fb 	bl	75c4 <CC_PalDataBufferAttrGet>
    71ce:	b948      	cbnz	r0, 71e4 <SetDataBuffersInfo+0x58>
    71d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    71d4:	f8c8 6000 	str.w	r6, [r8]
    71d8:	f888 3004 	strb.w	r3, [r8, #4]
    71dc:	4620      	mov	r0, r4
    71de:	b002      	add	sp, #8
    71e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    71e4:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
    71e8:	4620      	mov	r0, r4
    71ea:	b002      	add	sp, #8
    71ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000071f0 <InitHashDrv>:
    71f0:	b1e8      	cbz	r0, 722e <InitHashDrv+0x3e>
    71f2:	b510      	push	{r4, lr}
    71f4:	6804      	ldr	r4, [r0, #0]
    71f6:	2c01      	cmp	r4, #1
    71f8:	d004      	beq.n	7204 <InitHashDrv+0x14>
    71fa:	2c02      	cmp	r4, #2
    71fc:	d010      	beq.n	7220 <InitHashDrv+0x30>
    71fe:	b144      	cbz	r4, 7212 <InitHashDrv+0x22>
    7200:	480c      	ldr	r0, [pc, #48]	; (7234 <InitHashDrv+0x44>)
    7202:	bd10      	pop	{r4, pc}
    7204:	2220      	movs	r2, #32
    7206:	490c      	ldr	r1, [pc, #48]	; (7238 <InitHashDrv+0x48>)
    7208:	3008      	adds	r0, #8
    720a:	f7ff ff0f 	bl	702c <CC_PalMemCopyPlat>
    720e:	2000      	movs	r0, #0
    7210:	bd10      	pop	{r4, pc}
    7212:	2214      	movs	r2, #20
    7214:	4909      	ldr	r1, [pc, #36]	; (723c <InitHashDrv+0x4c>)
    7216:	3008      	adds	r0, #8
    7218:	f7ff ff08 	bl	702c <CC_PalMemCopyPlat>
    721c:	4620      	mov	r0, r4
    721e:	bd10      	pop	{r4, pc}
    7220:	2220      	movs	r2, #32
    7222:	4907      	ldr	r1, [pc, #28]	; (7240 <InitHashDrv+0x50>)
    7224:	3008      	adds	r0, #8
    7226:	f7ff ff01 	bl	702c <CC_PalMemCopyPlat>
    722a:	2000      	movs	r0, #0
    722c:	bd10      	pop	{r4, pc}
    722e:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
    7232:	4770      	bx	lr
    7234:	00f30001 	.word	0x00f30001
    7238:	0000923c 	.word	0x0000923c
    723c:	00009208 	.word	0x00009208
    7240:	0000921c 	.word	0x0000921c

00007244 <ProcessHashDrv>:
    7244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7248:	2900      	cmp	r1, #0
    724a:	f000 80e4 	beq.w	7416 <ProcessHashDrv+0x1d2>
    724e:	4604      	mov	r4, r0
    7250:	2800      	cmp	r0, #0
    7252:	f000 80e4 	beq.w	741e <ProcessHashDrv+0x1da>
    7256:	6803      	ldr	r3, [r0, #0]
    7258:	4690      	mov	r8, r2
    725a:	460f      	mov	r7, r1
    725c:	2b00      	cmp	r3, #0
    725e:	f000 80ae 	beq.w	73be <ProcessHashDrv+0x17a>
    7262:	3b01      	subs	r3, #1
    7264:	2b01      	cmp	r3, #1
    7266:	f200 80c2 	bhi.w	73ee <ProcessHashDrv+0x1aa>
    726a:	f04f 31ff 	mov.w	r1, #4294967295
    726e:	486d      	ldr	r0, [pc, #436]	; (7424 <ProcessHashDrv+0x1e0>)
    7270:	f04f 0902 	mov.w	r9, #2
    7274:	f7fe fe28 	bl	5ec8 <CC_PalMutexLock>
    7278:	2800      	cmp	r0, #0
    727a:	f040 80aa 	bne.w	73d2 <ProcessHashDrv+0x18e>
    727e:	2000      	movs	r0, #0
    7280:	f7fe fe52 	bl	5f28 <CC_PalPowerSaveModeSelect>
    7284:	4606      	mov	r6, r0
    7286:	2800      	cmp	r0, #0
    7288:	f040 80ad 	bne.w	73e6 <ProcessHashDrv+0x1a2>
    728c:	4b66      	ldr	r3, [pc, #408]	; (7428 <ProcessHashDrv+0x1e4>)
    728e:	681d      	ldr	r5, [r3, #0]
    7290:	2d00      	cmp	r5, #0
    7292:	d1fc      	bne.n	728e <ProcessHashDrv+0x4a>
    7294:	f04f 30ff 	mov.w	r0, #4294967295
    7298:	f7fe fd62 	bl	5d60 <CC_HalClearInterruptBit>
    729c:	4b63      	ldr	r3, [pc, #396]	; (742c <ProcessHashDrv+0x1e8>)
    729e:	6818      	ldr	r0, [r3, #0]
    72a0:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    72a4:	f7fe fd6a 	bl	5d7c <CC_HalMaskInterrupt>
    72a8:	2301      	movs	r3, #1
    72aa:	2007      	movs	r0, #7
    72ac:	4a60      	ldr	r2, [pc, #384]	; (7430 <ProcessHashDrv+0x1ec>)
    72ae:	4961      	ldr	r1, [pc, #388]	; (7434 <ProcessHashDrv+0x1f0>)
    72b0:	6013      	str	r3, [r2, #0]
    72b2:	600b      	str	r3, [r1, #0]
    72b4:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
    72b8:	f8c2 025c 	str.w	r0, [r2, #604]	; 0x25c
    72bc:	f841 3c5c 	str.w	r3, [r1, #-92]
    72c0:	6015      	str	r5, [r2, #0]
    72c2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    72c4:	4b5c      	ldr	r3, [pc, #368]	; (7438 <ProcessHashDrv+0x1f4>)
    72c6:	6019      	str	r1, [r3, #0]
    72c8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    72ca:	f8c2 112c 	str.w	r1, [r2, #300]	; 0x12c
    72ce:	f843 9c0c 	str.w	r9, [r3, #-12]
    72d2:	6823      	ldr	r3, [r4, #0]
    72d4:	f502 7296 	add.w	r2, r2, #300	; 0x12c
    72d8:	b163      	cbz	r3, 72f4 <ProcessHashDrv+0xb0>
    72da:	3b01      	subs	r3, #1
    72dc:	2b01      	cmp	r3, #1
    72de:	d818      	bhi.n	7312 <ProcessHashDrv+0xce>
    72e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    72e2:	4b56      	ldr	r3, [pc, #344]	; (743c <ProcessHashDrv+0x1f8>)
    72e4:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
    72e8:	6019      	str	r1, [r3, #0]
    72ea:	6a21      	ldr	r1, [r4, #32]
    72ec:	6011      	str	r1, [r2, #0]
    72ee:	69e2      	ldr	r2, [r4, #28]
    72f0:	f843 2c08 	str.w	r2, [r3, #-8]
    72f4:	69a1      	ldr	r1, [r4, #24]
    72f6:	4b52      	ldr	r3, [pc, #328]	; (7440 <ProcessHashDrv+0x1fc>)
    72f8:	4a52      	ldr	r2, [pc, #328]	; (7444 <ProcessHashDrv+0x200>)
    72fa:	6019      	str	r1, [r3, #0]
    72fc:	6961      	ldr	r1, [r4, #20]
    72fe:	6011      	str	r1, [r2, #0]
    7300:	6921      	ldr	r1, [r4, #16]
    7302:	f843 1c08 	str.w	r1, [r3, #-8]
    7306:	68e1      	ldr	r1, [r4, #12]
    7308:	f842 1c08 	str.w	r1, [r2, #-8]
    730c:	68a2      	ldr	r2, [r4, #8]
    730e:	f843 2c10 	str.w	r2, [r3, #-16]
    7312:	f1b8 0f00 	cmp.w	r8, #0
    7316:	d04e      	beq.n	73b6 <ProcessHashDrv+0x172>
    7318:	6863      	ldr	r3, [r4, #4]
    731a:	484b      	ldr	r0, [pc, #300]	; (7448 <ProcessHashDrv+0x204>)
    731c:	2b01      	cmp	r3, #1
    731e:	bf04      	itt	eq
    7320:	4a4a      	ldreq	r2, [pc, #296]	; (744c <ProcessHashDrv+0x208>)
    7322:	6013      	streq	r3, [r2, #0]
    7324:	793b      	ldrb	r3, [r7, #4]
    7326:	6839      	ldr	r1, [r7, #0]
    7328:	005b      	lsls	r3, r3, #1
    732a:	f003 0302 	and.w	r3, r3, #2
    732e:	6003      	str	r3, [r0, #0]
    7330:	4a47      	ldr	r2, [pc, #284]	; (7450 <ProcessHashDrv+0x20c>)
    7332:	4b48      	ldr	r3, [pc, #288]	; (7454 <ProcessHashDrv+0x210>)
    7334:	6011      	str	r1, [r2, #0]
    7336:	f44f 6000 	mov.w	r0, #2048	; 0x800
    733a:	f8c3 8000 	str.w	r8, [r3]
    733e:	f7fe fd23 	bl	5d88 <CC_HalWaitInterrupt>
    7342:	4606      	mov	r6, r0
    7344:	6823      	ldr	r3, [r4, #0]
    7346:	b15b      	cbz	r3, 7360 <ProcessHashDrv+0x11c>
    7348:	3b01      	subs	r3, #1
    734a:	2b01      	cmp	r3, #1
    734c:	d816      	bhi.n	737c <ProcessHashDrv+0x138>
    734e:	4b3b      	ldr	r3, [pc, #236]	; (743c <ProcessHashDrv+0x1f8>)
    7350:	4a41      	ldr	r2, [pc, #260]	; (7458 <ProcessHashDrv+0x214>)
    7352:	6819      	ldr	r1, [r3, #0]
    7354:	3b08      	subs	r3, #8
    7356:	6261      	str	r1, [r4, #36]	; 0x24
    7358:	6812      	ldr	r2, [r2, #0]
    735a:	6222      	str	r2, [r4, #32]
    735c:	681b      	ldr	r3, [r3, #0]
    735e:	61e3      	str	r3, [r4, #28]
    7360:	4b37      	ldr	r3, [pc, #220]	; (7440 <ProcessHashDrv+0x1fc>)
    7362:	4a38      	ldr	r2, [pc, #224]	; (7444 <ProcessHashDrv+0x200>)
    7364:	6819      	ldr	r1, [r3, #0]
    7366:	3a08      	subs	r2, #8
    7368:	61a1      	str	r1, [r4, #24]
    736a:	6891      	ldr	r1, [r2, #8]
    736c:	3b10      	subs	r3, #16
    736e:	6161      	str	r1, [r4, #20]
    7370:	6899      	ldr	r1, [r3, #8]
    7372:	6121      	str	r1, [r4, #16]
    7374:	6812      	ldr	r2, [r2, #0]
    7376:	60e2      	str	r2, [r4, #12]
    7378:	681b      	ldr	r3, [r3, #0]
    737a:	60a3      	str	r3, [r4, #8]
    737c:	2001      	movs	r0, #1
    737e:	2300      	movs	r3, #0
    7380:	492d      	ldr	r1, [pc, #180]	; (7438 <ProcessHashDrv+0x1f4>)
    7382:	4a36      	ldr	r2, [pc, #216]	; (745c <ProcessHashDrv+0x218>)
    7384:	6809      	ldr	r1, [r1, #0]
    7386:	64a1      	str	r1, [r4, #72]	; 0x48
    7388:	6812      	ldr	r2, [r2, #0]
    738a:	4935      	ldr	r1, [pc, #212]	; (7460 <ProcessHashDrv+0x21c>)
    738c:	64e2      	str	r2, [r4, #76]	; 0x4c
    738e:	6008      	str	r0, [r1, #0]
    7390:	4a2e      	ldr	r2, [pc, #184]	; (744c <ProcessHashDrv+0x208>)
    7392:	4834      	ldr	r0, [pc, #208]	; (7464 <ProcessHashDrv+0x220>)
    7394:	6013      	str	r3, [r2, #0]
    7396:	6003      	str	r3, [r0, #0]
    7398:	654b      	str	r3, [r1, #84]	; 0x54
    739a:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
    739e:	bba6      	cbnz	r6, 740a <ProcessHashDrv+0x1c6>
    73a0:	2001      	movs	r0, #1
    73a2:	f7fe fdc1 	bl	5f28 <CC_PalPowerSaveModeSelect>
    73a6:	bb60      	cbnz	r0, 7402 <ProcessHashDrv+0x1be>
    73a8:	481e      	ldr	r0, [pc, #120]	; (7424 <ProcessHashDrv+0x1e0>)
    73aa:	f7fe fd95 	bl	5ed8 <CC_PalMutexUnlock>
    73ae:	bb10      	cbnz	r0, 73f6 <ProcessHashDrv+0x1b2>
    73b0:	4630      	mov	r0, r6
    73b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    73b6:	2204      	movs	r2, #4
    73b8:	4b2a      	ldr	r3, [pc, #168]	; (7464 <ProcessHashDrv+0x220>)
    73ba:	601a      	str	r2, [r3, #0]
    73bc:	e7c2      	b.n	7344 <ProcessHashDrv+0x100>
    73be:	f04f 31ff 	mov.w	r1, #4294967295
    73c2:	4818      	ldr	r0, [pc, #96]	; (7424 <ProcessHashDrv+0x1e0>)
    73c4:	f04f 0901 	mov.w	r9, #1
    73c8:	f7fe fd7e 	bl	5ec8 <CC_PalMutexLock>
    73cc:	2800      	cmp	r0, #0
    73ce:	f43f af56 	beq.w	727e <ProcessHashDrv+0x3a>
    73d2:	4825      	ldr	r0, [pc, #148]	; (7468 <ProcessHashDrv+0x224>)
    73d4:	f7fe fa1a 	bl	580c <CC_PalAbort>
    73d8:	2000      	movs	r0, #0
    73da:	f7fe fda5 	bl	5f28 <CC_PalPowerSaveModeSelect>
    73de:	4606      	mov	r6, r0
    73e0:	2800      	cmp	r0, #0
    73e2:	f43f af53 	beq.w	728c <ProcessHashDrv+0x48>
    73e6:	4821      	ldr	r0, [pc, #132]	; (746c <ProcessHashDrv+0x228>)
    73e8:	f7fe fa10 	bl	580c <CC_PalAbort>
    73ec:	e74e      	b.n	728c <ProcessHashDrv+0x48>
    73ee:	4e20      	ldr	r6, [pc, #128]	; (7470 <ProcessHashDrv+0x22c>)
    73f0:	4630      	mov	r0, r6
    73f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    73f6:	481f      	ldr	r0, [pc, #124]	; (7474 <ProcessHashDrv+0x230>)
    73f8:	f7fe fa08 	bl	580c <CC_PalAbort>
    73fc:	4630      	mov	r0, r6
    73fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7402:	481d      	ldr	r0, [pc, #116]	; (7478 <ProcessHashDrv+0x234>)
    7404:	f7fe fa02 	bl	580c <CC_PalAbort>
    7408:	e7ce      	b.n	73a8 <ProcessHashDrv+0x164>
    740a:	2110      	movs	r1, #16
    740c:	f104 0008 	add.w	r0, r4, #8
    7410:	f7ff fe10 	bl	7034 <CC_PalMemSetZeroPlat>
    7414:	e7c4      	b.n	73a0 <ProcessHashDrv+0x15c>
    7416:	4e19      	ldr	r6, [pc, #100]	; (747c <ProcessHashDrv+0x238>)
    7418:	4630      	mov	r0, r6
    741a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    741e:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
    7422:	e7c5      	b.n	73b0 <ProcessHashDrv+0x16c>
    7424:	200000a8 	.word	0x200000a8
    7428:	50845910 	.word	0x50845910
    742c:	50845a04 	.word	0x50845a04
    7430:	50845818 	.word	0x50845818
    7434:	50845820 	.word	0x50845820
    7438:	508457cc 	.word	0x508457cc
    743c:	5084565c 	.word	0x5084565c
    7440:	50845650 	.word	0x50845650
    7444:	5084564c 	.word	0x5084564c
    7448:	50845b0c 	.word	0x50845b0c
    744c:	50845684 	.word	0x50845684
    7450:	50845c28 	.word	0x50845c28
    7454:	50845c2c 	.word	0x50845c2c
    7458:	50845658 	.word	0x50845658
    745c:	508457d0 	.word	0x508457d0
    7460:	508457c4 	.word	0x508457c4
    7464:	508457c8 	.word	0x508457c8
    7468:	00009150 	.word	0x00009150
    746c:	00009168 	.word	0x00009168
    7470:	00f30001 	.word	0x00f30001
    7474:	000091a8 	.word	0x000091a8
    7478:	00009188 	.word	0x00009188
    747c:	00f30003 	.word	0x00f30003

00007480 <FinishHashDrv>:
    7480:	2800      	cmp	r0, #0
    7482:	d03a      	beq.n	74fa <FinishHashDrv+0x7a>
    7484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7488:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
    748c:	fa92 f882 	rev.w	r8, r2
    7490:	fa93 fe83 	rev.w	lr, r3
    7494:	6a02      	ldr	r2, [r0, #32]
    7496:	6a43      	ldr	r3, [r0, #36]	; 0x24
    7498:	e9d0 4104 	ldrd	r4, r1, [r0, #16]
    749c:	ba12      	rev	r2, r2
    749e:	ba24      	rev	r4, r4
    74a0:	ba1b      	rev	r3, r3
    74a2:	6104      	str	r4, [r0, #16]
    74a4:	6202      	str	r2, [r0, #32]
    74a6:	6a84      	ldr	r4, [r0, #40]	; 0x28
    74a8:	6b82      	ldr	r2, [r0, #56]	; 0x38
    74aa:	6243      	str	r3, [r0, #36]	; 0x24
    74ac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    74ae:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
    74b2:	ba09      	rev	r1, r1
    74b4:	ba36      	rev	r6, r6
    74b6:	ba2d      	rev	r5, r5
    74b8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
    74ba:	6086      	str	r6, [r0, #8]
    74bc:	60c5      	str	r5, [r0, #12]
    74be:	6b06      	ldr	r6, [r0, #48]	; 0x30
    74c0:	6b45      	ldr	r5, [r0, #52]	; 0x34
    74c2:	6141      	str	r1, [r0, #20]
    74c4:	fa94 fc84 	rev.w	ip, r4
    74c8:	ba19      	rev	r1, r3
    74ca:	ba14      	rev	r4, r2
    74cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    74ce:	6c02      	ldr	r2, [r0, #64]	; 0x40
    74d0:	ba3f      	rev	r7, r7
    74d2:	ba36      	rev	r6, r6
    74d4:	ba2d      	rev	r5, r5
    74d6:	ba12      	rev	r2, r2
    74d8:	ba1b      	rev	r3, r3
    74da:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
    74de:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
    74e2:	f8c0 8018 	str.w	r8, [r0, #24]
    74e6:	f8c0 e01c 	str.w	lr, [r0, #28]
    74ea:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
    74ee:	62c7      	str	r7, [r0, #44]	; 0x2c
    74f0:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    74f4:	2000      	movs	r0, #0
    74f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74fa:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
    74fe:	4770      	bx	lr

00007500 <cc_mbedtls_aes_init>:
    7500:	b510      	push	{r4, lr}
    7502:	4604      	mov	r4, r0
    7504:	b130      	cbz	r0, 7514 <cc_mbedtls_aes_init+0x14>
    7506:	2200      	movs	r2, #0
    7508:	2301      	movs	r3, #1
    750a:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
    750e:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
    7512:	bd10      	pop	{r4, pc}
    7514:	4801      	ldr	r0, [pc, #4]	; (751c <cc_mbedtls_aes_init+0x1c>)
    7516:	f7fe f979 	bl	580c <CC_PalAbort>
    751a:	e7f4      	b.n	7506 <cc_mbedtls_aes_init+0x6>
    751c:	0000925c 	.word	0x0000925c

00007520 <cc_mbedtls_aes_free>:
    7520:	b118      	cbz	r0, 752a <cc_mbedtls_aes_free+0xa>
    7522:	2274      	movs	r2, #116	; 0x74
    7524:	2100      	movs	r1, #0
    7526:	f7ff bd83 	b.w	7030 <CC_PalMemSetPlat>
    752a:	4770      	bx	lr

0000752c <cc_mbedtls_aes_setkey_enc>:
    752c:	b1e8      	cbz	r0, 756a <cc_mbedtls_aes_setkey_enc+0x3e>
    752e:	b1c9      	cbz	r1, 7564 <cc_mbedtls_aes_setkey_enc+0x38>
    7530:	b508      	push	{r3, lr}
    7532:	2300      	movs	r3, #0
    7534:	2ac0      	cmp	r2, #192	; 0xc0
    7536:	6383      	str	r3, [r0, #56]	; 0x38
    7538:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    753c:	d00f      	beq.n	755e <cc_mbedtls_aes_setkey_enc+0x32>
    753e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    7542:	d004      	beq.n	754e <cc_mbedtls_aes_setkey_enc+0x22>
    7544:	2a80      	cmp	r2, #128	; 0x80
    7546:	d003      	beq.n	7550 <cc_mbedtls_aes_setkey_enc+0x24>
    7548:	f06f 001f 	mvn.w	r0, #31
    754c:	bd08      	pop	{r3, pc}
    754e:	2302      	movs	r3, #2
    7550:	6303      	str	r3, [r0, #48]	; 0x30
    7552:	08d2      	lsrs	r2, r2, #3
    7554:	3010      	adds	r0, #16
    7556:	f7ff fd69 	bl	702c <CC_PalMemCopyPlat>
    755a:	2000      	movs	r0, #0
    755c:	bd08      	pop	{r3, pc}
    755e:	2301      	movs	r3, #1
    7560:	6303      	str	r3, [r0, #48]	; 0x30
    7562:	e7f6      	b.n	7552 <cc_mbedtls_aes_setkey_enc+0x26>
    7564:	f06f 001f 	mvn.w	r0, #31
    7568:	4770      	bx	lr
    756a:	f06f 0021 	mvn.w	r0, #33	; 0x21
    756e:	4770      	bx	lr

00007570 <cc_mbedtls_aes_crypt_ecb>:
    7570:	b328      	cbz	r0, 75be <cc_mbedtls_aes_crypt_ecb+0x4e>
    7572:	b322      	cbz	r2, 75be <cc_mbedtls_aes_crypt_ecb+0x4e>
    7574:	b31b      	cbz	r3, 75be <cc_mbedtls_aes_crypt_ecb+0x4e>
    7576:	2901      	cmp	r1, #1
    7578:	d821      	bhi.n	75be <cc_mbedtls_aes_crypt_ecb+0x4e>
    757a:	b570      	push	{r4, r5, r6, lr}
    757c:	4604      	mov	r4, r0
    757e:	6b81      	ldr	r1, [r0, #56]	; 0x38
    7580:	b086      	sub	sp, #24
    7582:	d017      	beq.n	75b4 <cc_mbedtls_aes_crypt_ecb+0x44>
    7584:	2901      	cmp	r1, #1
    7586:	d117      	bne.n	75b8 <cc_mbedtls_aes_crypt_ecb+0x48>
    7588:	2510      	movs	r5, #16
    758a:	2100      	movs	r1, #0
    758c:	eb0d 0605 	add.w	r6, sp, r5
    7590:	6361      	str	r1, [r4, #52]	; 0x34
    7592:	4610      	mov	r0, r2
    7594:	4629      	mov	r1, r5
    7596:	9500      	str	r5, [sp, #0]
    7598:	aa02      	add	r2, sp, #8
    759a:	9601      	str	r6, [sp, #4]
    759c:	f7ff fdf6 	bl	718c <SetDataBuffersInfo>
    75a0:	b950      	cbnz	r0, 75b8 <cc_mbedtls_aes_crypt_ecb+0x48>
    75a2:	462b      	mov	r3, r5
    75a4:	4632      	mov	r2, r6
    75a6:	4620      	mov	r0, r4
    75a8:	a902      	add	r1, sp, #8
    75aa:	f000 f897 	bl	76dc <ProcessAesDrv>
    75ae:	b918      	cbnz	r0, 75b8 <cc_mbedtls_aes_crypt_ecb+0x48>
    75b0:	b006      	add	sp, #24
    75b2:	bd70      	pop	{r4, r5, r6, pc}
    75b4:	2900      	cmp	r1, #0
    75b6:	d0e7      	beq.n	7588 <cc_mbedtls_aes_crypt_ecb+0x18>
    75b8:	f06f 0021 	mvn.w	r0, #33	; 0x21
    75bc:	e7f8      	b.n	75b0 <cc_mbedtls_aes_crypt_ecb+0x40>
    75be:	f06f 0021 	mvn.w	r0, #33	; 0x21
    75c2:	4770      	bx	lr

000075c4 <CC_PalDataBufferAttrGet>:
    75c4:	2000      	movs	r0, #0
    75c6:	7018      	strb	r0, [r3, #0]
    75c8:	4770      	bx	lr
    75ca:	bf00      	nop

000075cc <LoadAesKey>:
    75cc:	2800      	cmp	r0, #0
    75ce:	d06e      	beq.n	76ae <LoadAesKey+0xe2>
    75d0:	b538      	push	{r3, r4, r5, lr}
    75d2:	4604      	mov	r4, r0
    75d4:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
    75d8:	2800      	cmp	r0, #0
    75da:	d04a      	beq.n	7672 <LoadAesKey+0xa6>
    75dc:	2802      	cmp	r0, #2
    75de:	d01e      	beq.n	761e <LoadAesKey+0x52>
    75e0:	4834      	ldr	r0, [pc, #208]	; (76b4 <LoadAesKey+0xe8>)
    75e2:	4d35      	ldr	r5, [pc, #212]	; (76b8 <LoadAesKey+0xec>)
    75e4:	682b      	ldr	r3, [r5, #0]
    75e6:	4a35      	ldr	r2, [pc, #212]	; (76bc <LoadAesKey+0xf0>)
    75e8:	6819      	ldr	r1, [r3, #0]
    75ea:	4b35      	ldr	r3, [pc, #212]	; (76c0 <LoadAesKey+0xf4>)
    75ec:	6011      	str	r1, [r2, #0]
    75ee:	682a      	ldr	r2, [r5, #0]
    75f0:	4934      	ldr	r1, [pc, #208]	; (76c4 <LoadAesKey+0xf8>)
    75f2:	6854      	ldr	r4, [r2, #4]
    75f4:	4a34      	ldr	r2, [pc, #208]	; (76c8 <LoadAesKey+0xfc>)
    75f6:	601c      	str	r4, [r3, #0]
    75f8:	682c      	ldr	r4, [r5, #0]
    75fa:	68a4      	ldr	r4, [r4, #8]
    75fc:	600c      	str	r4, [r1, #0]
    75fe:	682c      	ldr	r4, [r5, #0]
    7600:	68e4      	ldr	r4, [r4, #12]
    7602:	6014      	str	r4, [r2, #0]
    7604:	682c      	ldr	r4, [r5, #0]
    7606:	6924      	ldr	r4, [r4, #16]
    7608:	60dc      	str	r4, [r3, #12]
    760a:	682c      	ldr	r4, [r5, #0]
    760c:	6964      	ldr	r4, [r4, #20]
    760e:	60cc      	str	r4, [r1, #12]
    7610:	6829      	ldr	r1, [r5, #0]
    7612:	6989      	ldr	r1, [r1, #24]
    7614:	60d1      	str	r1, [r2, #12]
    7616:	682a      	ldr	r2, [r5, #0]
    7618:	69d2      	ldr	r2, [r2, #28]
    761a:	619a      	str	r2, [r3, #24]
    761c:	bd38      	pop	{r3, r4, r5, pc}
    761e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7620:	6c20      	ldr	r0, [r4, #64]	; 0x40
    7622:	f000 fbdf 	bl	7de4 <kmu_validate_slot_and_size_no_kdr>
    7626:	4d24      	ldr	r5, [pc, #144]	; (76b8 <LoadAesKey+0xec>)
    7628:	2800      	cmp	r0, #0
    762a:	d1db      	bne.n	75e4 <LoadAesKey+0x18>
    762c:	6829      	ldr	r1, [r5, #0]
    762e:	4a23      	ldr	r2, [pc, #140]	; (76bc <LoadAesKey+0xf0>)
    7630:	6808      	ldr	r0, [r1, #0]
    7632:	4b23      	ldr	r3, [pc, #140]	; (76c0 <LoadAesKey+0xf4>)
    7634:	6010      	str	r0, [r2, #0]
    7636:	6828      	ldr	r0, [r5, #0]
    7638:	4922      	ldr	r1, [pc, #136]	; (76c4 <LoadAesKey+0xf8>)
    763a:	6840      	ldr	r0, [r0, #4]
    763c:	6018      	str	r0, [r3, #0]
    763e:	6828      	ldr	r0, [r5, #0]
    7640:	6880      	ldr	r0, [r0, #8]
    7642:	6008      	str	r0, [r1, #0]
    7644:	6828      	ldr	r0, [r5, #0]
    7646:	68c0      	ldr	r0, [r0, #12]
    7648:	60d0      	str	r0, [r2, #12]
    764a:	6828      	ldr	r0, [r5, #0]
    764c:	6900      	ldr	r0, [r0, #16]
    764e:	60d8      	str	r0, [r3, #12]
    7650:	6828      	ldr	r0, [r5, #0]
    7652:	6940      	ldr	r0, [r0, #20]
    7654:	60c8      	str	r0, [r1, #12]
    7656:	6829      	ldr	r1, [r5, #0]
    7658:	6989      	ldr	r1, [r1, #24]
    765a:	6191      	str	r1, [r2, #24]
    765c:	682a      	ldr	r2, [r5, #0]
    765e:	69d2      	ldr	r2, [r2, #28]
    7660:	619a      	str	r2, [r3, #24]
    7662:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7664:	6c20      	ldr	r0, [r4, #64]	; 0x40
    7666:	f000 fbd5 	bl	7e14 <kmu_load_key_aes>
    766a:	2800      	cmp	r0, #0
    766c:	d1ba      	bne.n	75e4 <LoadAesKey+0x18>
    766e:	2000      	movs	r0, #0
    7670:	bd38      	pop	{r3, r4, r5, pc}
    7672:	6921      	ldr	r1, [r4, #16]
    7674:	4a11      	ldr	r2, [pc, #68]	; (76bc <LoadAesKey+0xf0>)
    7676:	4b12      	ldr	r3, [pc, #72]	; (76c0 <LoadAesKey+0xf4>)
    7678:	6011      	str	r1, [r2, #0]
    767a:	6961      	ldr	r1, [r4, #20]
    767c:	6019      	str	r1, [r3, #0]
    767e:	69a1      	ldr	r1, [r4, #24]
    7680:	6091      	str	r1, [r2, #8]
    7682:	69e2      	ldr	r2, [r4, #28]
    7684:	609a      	str	r2, [r3, #8]
    7686:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7688:	3b01      	subs	r3, #1
    768a:	2b01      	cmp	r3, #1
    768c:	d8ef      	bhi.n	766e <LoadAesKey+0xa2>
    768e:	6a21      	ldr	r1, [r4, #32]
    7690:	4a0e      	ldr	r2, [pc, #56]	; (76cc <LoadAesKey+0x100>)
    7692:	4b0f      	ldr	r3, [pc, #60]	; (76d0 <LoadAesKey+0x104>)
    7694:	6011      	str	r1, [r2, #0]
    7696:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7698:	601a      	str	r2, [r3, #0]
    769a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    769c:	2b02      	cmp	r3, #2
    769e:	d1e6      	bne.n	766e <LoadAesKey+0xa2>
    76a0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    76a2:	4a0c      	ldr	r2, [pc, #48]	; (76d4 <LoadAesKey+0x108>)
    76a4:	4b0c      	ldr	r3, [pc, #48]	; (76d8 <LoadAesKey+0x10c>)
    76a6:	6011      	str	r1, [r2, #0]
    76a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    76aa:	601a      	str	r2, [r3, #0]
    76ac:	bd38      	pop	{r3, r4, r5, pc}
    76ae:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
    76b2:	4770      	bx	lr
    76b4:	00f10009 	.word	0x00f10009
    76b8:	20000098 	.word	0x20000098
    76bc:	50845400 	.word	0x50845400
    76c0:	50845404 	.word	0x50845404
    76c4:	50845408 	.word	0x50845408
    76c8:	5084540c 	.word	0x5084540c
    76cc:	50845410 	.word	0x50845410
    76d0:	50845414 	.word	0x50845414
    76d4:	50845418 	.word	0x50845418
    76d8:	5084541c 	.word	0x5084541c

000076dc <ProcessAesDrv>:
    76dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    76e0:	b087      	sub	sp, #28
    76e2:	2900      	cmp	r1, #0
    76e4:	f000 80ae 	beq.w	7844 <ProcessAesDrv+0x168>
    76e8:	4616      	mov	r6, r2
    76ea:	2a00      	cmp	r2, #0
    76ec:	f000 80aa 	beq.w	7844 <ProcessAesDrv+0x168>
    76f0:	4604      	mov	r4, r0
    76f2:	2800      	cmp	r0, #0
    76f4:	f000 814c 	beq.w	7990 <ProcessAesDrv+0x2b4>
    76f8:	461f      	mov	r7, r3
    76fa:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    76fc:	460d      	mov	r5, r1
    76fe:	2b00      	cmp	r3, #0
    7700:	d13c      	bne.n	777c <ProcessAesDrv+0xa0>
    7702:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    7706:	d23e      	bcs.n	7786 <ProcessAesDrv+0xaa>
    7708:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    770c:	2b04      	cmp	r3, #4
    770e:	f000 8105 	beq.w	791c <ProcessAesDrv+0x240>
    7712:	f04f 0900 	mov.w	r9, #0
    7716:	f04f 31ff 	mov.w	r1, #4294967295
    771a:	48ac      	ldr	r0, [pc, #688]	; (79cc <ProcessAesDrv+0x2f0>)
    771c:	f7fe fbd4 	bl	5ec8 <CC_PalMutexLock>
    7720:	2800      	cmp	r0, #0
    7722:	f040 80e3 	bne.w	78ec <ProcessAesDrv+0x210>
    7726:	2000      	movs	r0, #0
    7728:	f7fe fbfe 	bl	5f28 <CC_PalPowerSaveModeSelect>
    772c:	2800      	cmp	r0, #0
    772e:	f040 80e6 	bne.w	78fe <ProcessAesDrv+0x222>
    7732:	2301      	movs	r3, #1
    7734:	49a6      	ldr	r1, [pc, #664]	; (79d0 <ProcessAesDrv+0x2f4>)
    7736:	4aa7      	ldr	r2, [pc, #668]	; (79d4 <ProcessAesDrv+0x2f8>)
    7738:	600b      	str	r3, [r1, #0]
    773a:	6013      	str	r3, [r2, #0]
    773c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    773e:	2b03      	cmp	r3, #3
    7740:	dc27      	bgt.n	7792 <ProcessAesDrv+0xb6>
    7742:	2b00      	cmp	r3, #0
    7744:	da28      	bge.n	7798 <ProcessAesDrv+0xbc>
    7746:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 7a30 <ProcessAesDrv+0x354>
    774a:	f1b9 0f00 	cmp.w	r9, #0
    774e:	f040 8085 	bne.w	785c <ProcessAesDrv+0x180>
    7752:	2300      	movs	r3, #0
    7754:	499e      	ldr	r1, [pc, #632]	; (79d0 <ProcessAesDrv+0x2f4>)
    7756:	4a9f      	ldr	r2, [pc, #636]	; (79d4 <ProcessAesDrv+0x2f8>)
    7758:	600b      	str	r3, [r1, #0]
    775a:	2001      	movs	r0, #1
    775c:	6013      	str	r3, [r2, #0]
    775e:	f7fe fbe3 	bl	5f28 <CC_PalPowerSaveModeSelect>
    7762:	2800      	cmp	r0, #0
    7764:	f040 80d6 	bne.w	7914 <ProcessAesDrv+0x238>
    7768:	4898      	ldr	r0, [pc, #608]	; (79cc <ProcessAesDrv+0x2f0>)
    776a:	f7fe fbb5 	bl	5ed8 <CC_PalMutexUnlock>
    776e:	2800      	cmp	r0, #0
    7770:	f040 80c9 	bne.w	7906 <ProcessAesDrv+0x22a>
    7774:	4640      	mov	r0, r8
    7776:	b007      	add	sp, #28
    7778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    777c:	2b01      	cmp	r3, #1
    777e:	d1c3      	bne.n	7708 <ProcessAesDrv+0x2c>
    7780:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    7784:	d3c0      	bcc.n	7708 <ProcessAesDrv+0x2c>
    7786:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 7a34 <ProcessAesDrv+0x358>
    778a:	4640      	mov	r0, r8
    778c:	b007      	add	sp, #28
    778e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7792:	3b06      	subs	r3, #6
    7794:	2b01      	cmp	r3, #1
    7796:	d8d6      	bhi.n	7746 <ProcessAesDrv+0x6a>
    7798:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    779a:	2b01      	cmp	r3, #1
    779c:	f200 80f5 	bhi.w	798a <ProcessAesDrv+0x2ae>
    77a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    77a2:	2b01      	cmp	r3, #1
    77a4:	d854      	bhi.n	7850 <ProcessAesDrv+0x174>
    77a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
    77a8:	2b01      	cmp	r3, #1
    77aa:	f200 816a 	bhi.w	7a82 <ProcessAesDrv+0x3a6>
    77ae:	4a8a      	ldr	r2, [pc, #552]	; (79d8 <ProcessAesDrv+0x2fc>)
    77b0:	6813      	ldr	r3, [r2, #0]
    77b2:	2b00      	cmp	r3, #0
    77b4:	d1fc      	bne.n	77b0 <ProcessAesDrv+0xd4>
    77b6:	f04f 30ff 	mov.w	r0, #4294967295
    77ba:	9304      	str	r3, [sp, #16]
    77bc:	f7fe fad0 	bl	5d60 <CC_HalClearInterruptBit>
    77c0:	4a86      	ldr	r2, [pc, #536]	; (79dc <ProcessAesDrv+0x300>)
    77c2:	6810      	ldr	r0, [r2, #0]
    77c4:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    77c8:	f7fe fad8 	bl	5d7c <CC_HalMaskInterrupt>
    77cc:	2001      	movs	r0, #1
    77ce:	4984      	ldr	r1, [pc, #528]	; (79e0 <ProcessAesDrv+0x304>)
    77d0:	4a84      	ldr	r2, [pc, #528]	; (79e4 <ProcessAesDrv+0x308>)
    77d2:	6008      	str	r0, [r1, #0]
    77d4:	9b04      	ldr	r3, [sp, #16]
    77d6:	6013      	str	r3, [r2, #0]
    77d8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    77da:	f022 0104 	bic.w	r1, r2, #4
    77de:	2903      	cmp	r1, #3
    77e0:	bf18      	it	ne
    77e2:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
    77e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    77e6:	bf18      	it	ne
    77e8:	4003      	andne	r3, r0
    77ea:	2902      	cmp	r1, #2
    77ec:	f200 814c 	bhi.w	7a88 <ProcessAesDrv+0x3ac>
    77f0:	0092      	lsls	r2, r2, #2
    77f2:	f002 021c 	and.w	r2, r2, #28
    77f6:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
    77fa:	497b      	ldr	r1, [pc, #492]	; (79e8 <ProcessAesDrv+0x30c>)
    77fc:	4313      	orrs	r3, r2
    77fe:	600b      	str	r3, [r1, #0]
    7800:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7802:	2b07      	cmp	r3, #7
    7804:	d102      	bne.n	780c <ProcessAesDrv+0x130>
    7806:	2201      	movs	r2, #1
    7808:	4b78      	ldr	r3, [pc, #480]	; (79ec <ProcessAesDrv+0x310>)
    780a:	601a      	str	r2, [r3, #0]
    780c:	4620      	mov	r0, r4
    780e:	f7ff fedd 	bl	75cc <LoadAesKey>
    7812:	4680      	mov	r8, r0
    7814:	2800      	cmp	r0, #0
    7816:	d198      	bne.n	774a <ProcessAesDrv+0x6e>
    7818:	6b63      	ldr	r3, [r4, #52]	; 0x34
    781a:	2b07      	cmp	r3, #7
    781c:	d893      	bhi.n	7746 <ProcessAesDrv+0x6a>
    781e:	a201      	add	r2, pc, #4	; (adr r2, 7824 <ProcessAesDrv+0x148>)
    7820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7824:	00007883 	.word	0x00007883
    7828:	0000786f 	.word	0x0000786f
    782c:	00007997 	.word	0x00007997
    7830:	0000786f 	.word	0x0000786f
    7834:	00007747 	.word	0x00007747
    7838:	00007747 	.word	0x00007747
    783c:	00007997 	.word	0x00007997
    7840:	0000786f 	.word	0x0000786f
    7844:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 7a38 <ProcessAesDrv+0x35c>
    7848:	4640      	mov	r0, r8
    784a:	b007      	add	sp, #28
    784c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7850:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 7a3c <ProcessAesDrv+0x360>
    7854:	f1b9 0f00 	cmp.w	r9, #0
    7858:	f43f af7b 	beq.w	7752 <ProcessAesDrv+0x76>
    785c:	2304      	movs	r3, #4
    785e:	2120      	movs	r1, #32
    7860:	f104 0010 	add.w	r0, r4, #16
    7864:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    7868:	f7ff fbe4 	bl	7034 <CC_PalMemSetZeroPlat>
    786c:	e771      	b.n	7752 <ProcessAesDrv+0x76>
    786e:	6821      	ldr	r1, [r4, #0]
    7870:	4a5f      	ldr	r2, [pc, #380]	; (79f0 <ProcessAesDrv+0x314>)
    7872:	4b60      	ldr	r3, [pc, #384]	; (79f4 <ProcessAesDrv+0x318>)
    7874:	6011      	str	r1, [r2, #0]
    7876:	6861      	ldr	r1, [r4, #4]
    7878:	6019      	str	r1, [r3, #0]
    787a:	68a1      	ldr	r1, [r4, #8]
    787c:	6091      	str	r1, [r2, #8]
    787e:	68e2      	ldr	r2, [r4, #12]
    7880:	609a      	str	r2, [r3, #8]
    7882:	792b      	ldrb	r3, [r5, #4]
    7884:	7932      	ldrb	r2, [r6, #4]
    7886:	005b      	lsls	r3, r3, #1
    7888:	f002 0201 	and.w	r2, r2, #1
    788c:	495a      	ldr	r1, [pc, #360]	; (79f8 <ProcessAesDrv+0x31c>)
    788e:	f003 0302 	and.w	r3, r3, #2
    7892:	4313      	orrs	r3, r2
    7894:	6830      	ldr	r0, [r6, #0]
    7896:	682a      	ldr	r2, [r5, #0]
    7898:	600b      	str	r3, [r1, #0]
    789a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    789c:	f023 0304 	bic.w	r3, r3, #4
    78a0:	2b03      	cmp	r3, #3
    78a2:	d007      	beq.n	78b4 <ProcessAesDrv+0x1d8>
    78a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
    78a6:	2b01      	cmp	r3, #1
    78a8:	f000 80e3 	beq.w	7a72 <ProcessAesDrv+0x396>
    78ac:	4953      	ldr	r1, [pc, #332]	; (79fc <ProcessAesDrv+0x320>)
    78ae:	4b54      	ldr	r3, [pc, #336]	; (7a00 <ProcessAesDrv+0x324>)
    78b0:	6008      	str	r0, [r1, #0]
    78b2:	601f      	str	r7, [r3, #0]
    78b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    78b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
    78ba:	2b01      	cmp	r3, #1
    78bc:	bf07      	ittee	eq
    78be:	4951      	ldreq	r1, [pc, #324]	; (7a04 <ProcessAesDrv+0x328>)
    78c0:	4b51      	ldreq	r3, [pc, #324]	; (7a08 <ProcessAesDrv+0x32c>)
    78c2:	4952      	ldrne	r1, [pc, #328]	; (7a0c <ProcessAesDrv+0x330>)
    78c4:	4b52      	ldrne	r3, [pc, #328]	; (7a10 <ProcessAesDrv+0x334>)
    78c6:	600a      	str	r2, [r1, #0]
    78c8:	601f      	str	r7, [r3, #0]
    78ca:	f7fe fa5d 	bl	5d88 <CC_HalWaitInterrupt>
    78ce:	4680      	mov	r8, r0
    78d0:	2800      	cmp	r0, #0
    78d2:	f47f af3a 	bne.w	774a <ProcessAesDrv+0x6e>
    78d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    78d8:	3b01      	subs	r3, #1
    78da:	2b06      	cmp	r3, #6
    78dc:	f200 80c6 	bhi.w	7a6c <ProcessAesDrv+0x390>
    78e0:	e8df f003 	tbb	[pc, r3]
    78e4:	c4b8ccb8 	.word	0xc4b8ccb8
    78e8:	ccc4      	.short	0xccc4
    78ea:	b8          	.byte	0xb8
    78eb:	00          	.byte	0x00
    78ec:	4849      	ldr	r0, [pc, #292]	; (7a14 <ProcessAesDrv+0x338>)
    78ee:	f7fd ff8d 	bl	580c <CC_PalAbort>
    78f2:	2000      	movs	r0, #0
    78f4:	f7fe fb18 	bl	5f28 <CC_PalPowerSaveModeSelect>
    78f8:	2800      	cmp	r0, #0
    78fa:	f43f af1a 	beq.w	7732 <ProcessAesDrv+0x56>
    78fe:	4846      	ldr	r0, [pc, #280]	; (7a18 <ProcessAesDrv+0x33c>)
    7900:	f7fd ff84 	bl	580c <CC_PalAbort>
    7904:	e715      	b.n	7732 <ProcessAesDrv+0x56>
    7906:	4845      	ldr	r0, [pc, #276]	; (7a1c <ProcessAesDrv+0x340>)
    7908:	f7fd ff80 	bl	580c <CC_PalAbort>
    790c:	4640      	mov	r0, r8
    790e:	b007      	add	sp, #28
    7910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7914:	4842      	ldr	r0, [pc, #264]	; (7a20 <ProcessAesDrv+0x344>)
    7916:	f7fd ff79 	bl	580c <CC_PalAbort>
    791a:	e725      	b.n	7768 <ProcessAesDrv+0x8c>
    791c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    791e:	6c20      	ldr	r0, [r4, #64]	; 0x40
    7920:	f000 fa4a 	bl	7db8 <kmu_validate_slot_and_size>
    7924:	bb70      	cbnz	r0, 7984 <ProcessAesDrv+0x2a8>
    7926:	f8df 8118 	ldr.w	r8, [pc, #280]	; 7a40 <ProcessAesDrv+0x364>
    792a:	f8df b118 	ldr.w	fp, [pc, #280]	; 7a44 <ProcessAesDrv+0x368>
    792e:	f8d8 3000 	ldr.w	r3, [r8]
    7932:	f8df a114 	ldr.w	sl, [pc, #276]	; 7a48 <ProcessAesDrv+0x36c>
    7936:	681b      	ldr	r3, [r3, #0]
    7938:	f8df 9110 	ldr.w	r9, [pc, #272]	; 7a4c <ProcessAesDrv+0x370>
    793c:	f8cb 3000 	str.w	r3, [fp]
    7940:	f8d8 3000 	ldr.w	r3, [r8]
    7944:	4a37      	ldr	r2, [pc, #220]	; (7a24 <ProcessAesDrv+0x348>)
    7946:	685b      	ldr	r3, [r3, #4]
    7948:	f8ca 3000 	str.w	r3, [sl]
    794c:	f8d8 3000 	ldr.w	r3, [r8]
    7950:	689b      	ldr	r3, [r3, #8]
    7952:	f8c9 3000 	str.w	r3, [r9]
    7956:	f8d8 3000 	ldr.w	r3, [r8]
    795a:	68db      	ldr	r3, [r3, #12]
    795c:	6013      	str	r3, [r2, #0]
    795e:	f8d8 3000 	ldr.w	r3, [r8]
    7962:	691b      	ldr	r3, [r3, #16]
    7964:	6053      	str	r3, [r2, #4]
    7966:	f8d8 3000 	ldr.w	r3, [r8]
    796a:	695b      	ldr	r3, [r3, #20]
    796c:	6093      	str	r3, [r2, #8]
    796e:	f8d8 3000 	ldr.w	r3, [r8]
    7972:	699b      	ldr	r3, [r3, #24]
    7974:	60d3      	str	r3, [r2, #12]
    7976:	f8d8 3000 	ldr.w	r3, [r8]
    797a:	69db      	ldr	r3, [r3, #28]
    797c:	6113      	str	r3, [r2, #16]
    797e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7980:	2902      	cmp	r1, #2
    7982:	d90c      	bls.n	799e <ProcessAesDrv+0x2c2>
    7984:	f04f 0901 	mov.w	r9, #1
    7988:	e6c5      	b.n	7716 <ProcessAesDrv+0x3a>
    798a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 7a50 <ProcessAesDrv+0x374>
    798e:	e6dc      	b.n	774a <ProcessAesDrv+0x6e>
    7990:	f44f 0871 	mov.w	r8, #15794176	; 0xf10000
    7994:	e6ee      	b.n	7774 <ProcessAesDrv+0x98>
    7996:	6821      	ldr	r1, [r4, #0]
    7998:	4a23      	ldr	r2, [pc, #140]	; (7a28 <ProcessAesDrv+0x34c>)
    799a:	4b24      	ldr	r3, [pc, #144]	; (7a2c <ProcessAesDrv+0x350>)
    799c:	e76a      	b.n	7874 <ProcessAesDrv+0x198>
    799e:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
    79a2:	9300      	str	r3, [sp, #0]
    79a4:	f104 0310 	add.w	r3, r4, #16
    79a8:	e9cd 2301 	strd	r2, r3, [sp, #4]
    79ac:	00c8      	lsls	r0, r1, #3
    79ae:	3010      	adds	r0, #16
    79b0:	9003      	str	r0, [sp, #12]
    79b2:	9004      	str	r0, [sp, #16]
    79b4:	9305      	str	r3, [sp, #20]
    79b6:	6c20      	ldr	r0, [r4, #64]	; 0x40
    79b8:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
    79bc:	f000 fbfe 	bl	81bc <kmu_derive_cmac>
    79c0:	2800      	cmp	r0, #0
    79c2:	d164      	bne.n	7a8e <ProcessAesDrv+0x3b2>
    79c4:	2300      	movs	r3, #0
    79c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    79ca:	e7db      	b.n	7984 <ProcessAesDrv+0x2a8>
    79cc:	200000a8 	.word	0x200000a8
    79d0:	50845810 	.word	0x50845810
    79d4:	50845820 	.word	0x50845820
    79d8:	50845910 	.word	0x50845910
    79dc:	50845a04 	.word	0x50845a04
    79e0:	50845900 	.word	0x50845900
    79e4:	508454bc 	.word	0x508454bc
    79e8:	508454c0 	.word	0x508454c0
    79ec:	5084547c 	.word	0x5084547c
    79f0:	50845440 	.word	0x50845440
    79f4:	50845444 	.word	0x50845444
    79f8:	50845b0c 	.word	0x50845b0c
    79fc:	50845d30 	.word	0x50845d30
    7a00:	50845d34 	.word	0x50845d34
    7a04:	50845c28 	.word	0x50845c28
    7a08:	50845c2c 	.word	0x50845c2c
    7a0c:	50845c30 	.word	0x50845c30
    7a10:	50845c34 	.word	0x50845c34
    7a14:	00009150 	.word	0x00009150
    7a18:	00009168 	.word	0x00009168
    7a1c:	000091a8 	.word	0x000091a8
    7a20:	00009188 	.word	0x00009188
    7a24:	5084540c 	.word	0x5084540c
    7a28:	50845460 	.word	0x50845460
    7a2c:	50845464 	.word	0x50845464
    7a30:	00f10001 	.word	0x00f10001
    7a34:	00f10005 	.word	0x00f10005
    7a38:	00f1000b 	.word	0x00f1000b
    7a3c:	00f10003 	.word	0x00f10003
    7a40:	20000098 	.word	0x20000098
    7a44:	50845400 	.word	0x50845400
    7a48:	50845404 	.word	0x50845404
    7a4c:	50845408 	.word	0x50845408
    7a50:	00f10002 	.word	0x00f10002
    7a54:	4a22      	ldr	r2, [pc, #136]	; (7ae0 <ProcessAesDrv+0x404>)
    7a56:	4b23      	ldr	r3, [pc, #140]	; (7ae4 <ProcessAesDrv+0x408>)
    7a58:	6811      	ldr	r1, [r2, #0]
    7a5a:	3208      	adds	r2, #8
    7a5c:	6021      	str	r1, [r4, #0]
    7a5e:	6819      	ldr	r1, [r3, #0]
    7a60:	3308      	adds	r3, #8
    7a62:	6061      	str	r1, [r4, #4]
    7a64:	6812      	ldr	r2, [r2, #0]
    7a66:	60a2      	str	r2, [r4, #8]
    7a68:	681b      	ldr	r3, [r3, #0]
    7a6a:	60e3      	str	r3, [r4, #12]
    7a6c:	2301      	movs	r3, #1
    7a6e:	65a3      	str	r3, [r4, #88]	; 0x58
    7a70:	e66b      	b.n	774a <ProcessAesDrv+0x6e>
    7a72:	4b1d      	ldr	r3, [pc, #116]	; (7ae8 <ProcessAesDrv+0x40c>)
    7a74:	f8c1 021c 	str.w	r0, [r1, #540]	; 0x21c
    7a78:	601f      	str	r7, [r3, #0]
    7a7a:	e71b      	b.n	78b4 <ProcessAesDrv+0x1d8>
    7a7c:	4a1b      	ldr	r2, [pc, #108]	; (7aec <ProcessAesDrv+0x410>)
    7a7e:	4b1c      	ldr	r3, [pc, #112]	; (7af0 <ProcessAesDrv+0x414>)
    7a80:	e7ea      	b.n	7a58 <ProcessAesDrv+0x37c>
    7a82:	f8df 8074 	ldr.w	r8, [pc, #116]	; 7af8 <ProcessAesDrv+0x41c>
    7a86:	e660      	b.n	774a <ProcessAesDrv+0x6e>
    7a88:	f8df 8070 	ldr.w	r8, [pc, #112]	; 7afc <ProcessAesDrv+0x420>
    7a8c:	e65d      	b.n	774a <ProcessAesDrv+0x6e>
    7a8e:	f8d8 3000 	ldr.w	r3, [r8]
    7a92:	9904      	ldr	r1, [sp, #16]
    7a94:	681b      	ldr	r3, [r3, #0]
    7a96:	9805      	ldr	r0, [sp, #20]
    7a98:	f8cb 3000 	str.w	r3, [fp]
    7a9c:	f8d8 3000 	ldr.w	r3, [r8]
    7aa0:	4a14      	ldr	r2, [pc, #80]	; (7af4 <ProcessAesDrv+0x418>)
    7aa2:	685b      	ldr	r3, [r3, #4]
    7aa4:	f8ca 3000 	str.w	r3, [sl]
    7aa8:	f8d8 3000 	ldr.w	r3, [r8]
    7aac:	689b      	ldr	r3, [r3, #8]
    7aae:	f8c9 3000 	str.w	r3, [r9]
    7ab2:	f8d8 3000 	ldr.w	r3, [r8]
    7ab6:	68db      	ldr	r3, [r3, #12]
    7ab8:	6013      	str	r3, [r2, #0]
    7aba:	f8d8 3000 	ldr.w	r3, [r8]
    7abe:	691b      	ldr	r3, [r3, #16]
    7ac0:	6053      	str	r3, [r2, #4]
    7ac2:	f8d8 3000 	ldr.w	r3, [r8]
    7ac6:	695b      	ldr	r3, [r3, #20]
    7ac8:	6093      	str	r3, [r2, #8]
    7aca:	f8d8 3000 	ldr.w	r3, [r8]
    7ace:	699b      	ldr	r3, [r3, #24]
    7ad0:	60d3      	str	r3, [r2, #12]
    7ad2:	f8d8 3000 	ldr.w	r3, [r8]
    7ad6:	69db      	ldr	r3, [r3, #28]
    7ad8:	6113      	str	r3, [r2, #16]
    7ada:	f7ff faab 	bl	7034 <CC_PalMemSetZeroPlat>
    7ade:	e771      	b.n	79c4 <ProcessAesDrv+0x2e8>
    7ae0:	50845440 	.word	0x50845440
    7ae4:	50845444 	.word	0x50845444
    7ae8:	50845d2c 	.word	0x50845d2c
    7aec:	50845460 	.word	0x50845460
    7af0:	50845464 	.word	0x50845464
    7af4:	5084540c 	.word	0x5084540c
    7af8:	00f10004 	.word	0x00f10004
    7afc:	00f10006 	.word	0x00f10006

00007b00 <FinishAesDrv>:
    7b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b04:	b309      	cbz	r1, 7b4a <FinishAesDrv+0x4a>
    7b06:	b302      	cbz	r2, 7b4a <FinishAesDrv+0x4a>
    7b08:	4604      	mov	r4, r0
    7b0a:	2800      	cmp	r0, #0
    7b0c:	f000 80a3 	beq.w	7c56 <FinishAesDrv+0x156>
    7b10:	461d      	mov	r5, r3
    7b12:	6b43      	ldr	r3, [r0, #52]	; 0x34
    7b14:	460e      	mov	r6, r1
    7b16:	2b07      	cmp	r3, #7
    7b18:	d01b      	beq.n	7b52 <FinishAesDrv+0x52>
    7b1a:	b95d      	cbnz	r5, 7b34 <FinishAesDrv+0x34>
    7b1c:	2b03      	cmp	r3, #3
    7b1e:	d110      	bne.n	7b42 <FinishAesDrv+0x42>
    7b20:	6d83      	ldr	r3, [r0, #88]	; 0x58
    7b22:	b973      	cbnz	r3, 7b42 <FinishAesDrv+0x42>
    7b24:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
    7b28:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
    7b2c:	2510      	movs	r5, #16
    7b2e:	f100 0364 	add.w	r3, r0, #100	; 0x64
    7b32:	600b      	str	r3, [r1, #0]
    7b34:	462b      	mov	r3, r5
    7b36:	4631      	mov	r1, r6
    7b38:	4620      	mov	r0, r4
    7b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7b3e:	f7ff bdcd 	b.w	76dc <ProcessAesDrv>
    7b42:	462f      	mov	r7, r5
    7b44:	4638      	mov	r0, r7
    7b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b4a:	4f7e      	ldr	r7, [pc, #504]	; (7d44 <FinishAesDrv+0x244>)
    7b4c:	4638      	mov	r0, r7
    7b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b52:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    7b54:	2b00      	cmp	r3, #0
    7b56:	f040 8081 	bne.w	7c5c <FinishAesDrv+0x15c>
    7b5a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    7b5e:	f080 8083 	bcs.w	7c68 <FinishAesDrv+0x168>
    7b62:	b915      	cbnz	r5, 7b6a <FinishAesDrv+0x6a>
    7b64:	6da3      	ldr	r3, [r4, #88]	; 0x58
    7b66:	2b00      	cmp	r3, #0
    7b68:	d17e      	bne.n	7c68 <FinishAesDrv+0x168>
    7b6a:	f04f 31ff 	mov.w	r1, #4294967295
    7b6e:	4876      	ldr	r0, [pc, #472]	; (7d48 <FinishAesDrv+0x248>)
    7b70:	f7fe f9aa 	bl	5ec8 <CC_PalMutexLock>
    7b74:	2800      	cmp	r0, #0
    7b76:	f040 80c1 	bne.w	7cfc <FinishAesDrv+0x1fc>
    7b7a:	2000      	movs	r0, #0
    7b7c:	f7fe f9d4 	bl	5f28 <CC_PalPowerSaveModeSelect>
    7b80:	2800      	cmp	r0, #0
    7b82:	f040 80c3 	bne.w	7d0c <FinishAesDrv+0x20c>
    7b86:	2301      	movs	r3, #1
    7b88:	4970      	ldr	r1, [pc, #448]	; (7d4c <FinishAesDrv+0x24c>)
    7b8a:	4a71      	ldr	r2, [pc, #452]	; (7d50 <FinishAesDrv+0x250>)
    7b8c:	600b      	str	r3, [r1, #0]
    7b8e:	6013      	str	r3, [r2, #0]
    7b90:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7b92:	2b03      	cmp	r3, #3
    7b94:	dd48      	ble.n	7c28 <FinishAesDrv+0x128>
    7b96:	3b06      	subs	r3, #6
    7b98:	2b01      	cmp	r3, #1
    7b9a:	d847      	bhi.n	7c2c <FinishAesDrv+0x12c>
    7b9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7b9e:	2b01      	cmp	r3, #1
    7ba0:	d864      	bhi.n	7c6c <FinishAesDrv+0x16c>
    7ba2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7ba4:	2b01      	cmp	r3, #1
    7ba6:	f200 80b5 	bhi.w	7d14 <FinishAesDrv+0x214>
    7baa:	6e23      	ldr	r3, [r4, #96]	; 0x60
    7bac:	2b01      	cmp	r3, #1
    7bae:	f200 80b3 	bhi.w	7d18 <FinishAesDrv+0x218>
    7bb2:	4b68      	ldr	r3, [pc, #416]	; (7d54 <FinishAesDrv+0x254>)
    7bb4:	681f      	ldr	r7, [r3, #0]
    7bb6:	2f00      	cmp	r7, #0
    7bb8:	d1fc      	bne.n	7bb4 <FinishAesDrv+0xb4>
    7bba:	f04f 30ff 	mov.w	r0, #4294967295
    7bbe:	f7fe f8cf 	bl	5d60 <CC_HalClearInterruptBit>
    7bc2:	4b65      	ldr	r3, [pc, #404]	; (7d58 <FinishAesDrv+0x258>)
    7bc4:	6818      	ldr	r0, [r3, #0]
    7bc6:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    7bca:	f7fe f8d7 	bl	5d7c <CC_HalMaskInterrupt>
    7bce:	2101      	movs	r1, #1
    7bd0:	4a62      	ldr	r2, [pc, #392]	; (7d5c <FinishAesDrv+0x25c>)
    7bd2:	4b63      	ldr	r3, [pc, #396]	; (7d60 <FinishAesDrv+0x260>)
    7bd4:	6011      	str	r1, [r2, #0]
    7bd6:	601f      	str	r7, [r3, #0]
    7bd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7bda:	f023 0204 	bic.w	r2, r3, #4
    7bde:	2a03      	cmp	r2, #3
    7be0:	bf18      	it	ne
    7be2:	6ba7      	ldrne	r7, [r4, #56]	; 0x38
    7be4:	6b22      	ldr	r2, [r4, #48]	; 0x30
    7be6:	bf18      	it	ne
    7be8:	400f      	andne	r7, r1
    7bea:	2a02      	cmp	r2, #2
    7bec:	f200 80a7 	bhi.w	7d3e <FinishAesDrv+0x23e>
    7bf0:	009b      	lsls	r3, r3, #2
    7bf2:	f003 031c 	and.w	r3, r3, #28
    7bf6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
    7bfa:	4a5a      	ldr	r2, [pc, #360]	; (7d64 <FinishAesDrv+0x264>)
    7bfc:	431f      	orrs	r7, r3
    7bfe:	6017      	str	r7, [r2, #0]
    7c00:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7c02:	2b07      	cmp	r3, #7
    7c04:	d102      	bne.n	7c0c <FinishAesDrv+0x10c>
    7c06:	2201      	movs	r2, #1
    7c08:	4b57      	ldr	r3, [pc, #348]	; (7d68 <FinishAesDrv+0x268>)
    7c0a:	601a      	str	r2, [r3, #0]
    7c0c:	4620      	mov	r0, r4
    7c0e:	f7ff fcdd 	bl	75cc <LoadAesKey>
    7c12:	4607      	mov	r7, r0
    7c14:	b958      	cbnz	r0, 7c2e <FinishAesDrv+0x12e>
    7c16:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7c18:	2b07      	cmp	r3, #7
    7c1a:	d807      	bhi.n	7c2c <FinishAesDrv+0x12c>
    7c1c:	e8df f003 	tbb	[pc, r3]
    7c20:	28672832 	.word	0x28672832
    7c24:	28670606 	.word	0x28670606
    7c28:	2b00      	cmp	r3, #0
    7c2a:	dab7      	bge.n	7b9c <FinishAesDrv+0x9c>
    7c2c:	4f4f      	ldr	r7, [pc, #316]	; (7d6c <FinishAesDrv+0x26c>)
    7c2e:	2300      	movs	r3, #0
    7c30:	4946      	ldr	r1, [pc, #280]	; (7d4c <FinishAesDrv+0x24c>)
    7c32:	4a47      	ldr	r2, [pc, #284]	; (7d50 <FinishAesDrv+0x250>)
    7c34:	600b      	str	r3, [r1, #0]
    7c36:	2001      	movs	r0, #1
    7c38:	6013      	str	r3, [r2, #0]
    7c3a:	f7fe f975 	bl	5f28 <CC_PalPowerSaveModeSelect>
    7c3e:	2800      	cmp	r0, #0
    7c40:	d160      	bne.n	7d04 <FinishAesDrv+0x204>
    7c42:	4841      	ldr	r0, [pc, #260]	; (7d48 <FinishAesDrv+0x248>)
    7c44:	f7fe f948 	bl	5ed8 <CC_PalMutexUnlock>
    7c48:	2800      	cmp	r0, #0
    7c4a:	f43f af7b 	beq.w	7b44 <FinishAesDrv+0x44>
    7c4e:	4848      	ldr	r0, [pc, #288]	; (7d70 <FinishAesDrv+0x270>)
    7c50:	f7fd fddc 	bl	580c <CC_PalAbort>
    7c54:	e776      	b.n	7b44 <FinishAesDrv+0x44>
    7c56:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
    7c5a:	e773      	b.n	7b44 <FinishAesDrv+0x44>
    7c5c:	2b01      	cmp	r3, #1
    7c5e:	d180      	bne.n	7b62 <FinishAesDrv+0x62>
    7c60:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    7c64:	f4ff af7d 	bcc.w	7b62 <FinishAesDrv+0x62>
    7c68:	4f42      	ldr	r7, [pc, #264]	; (7d74 <FinishAesDrv+0x274>)
    7c6a:	e76b      	b.n	7b44 <FinishAesDrv+0x44>
    7c6c:	4f42      	ldr	r7, [pc, #264]	; (7d78 <FinishAesDrv+0x278>)
    7c6e:	e7de      	b.n	7c2e <FinishAesDrv+0x12e>
    7c70:	6821      	ldr	r1, [r4, #0]
    7c72:	4a42      	ldr	r2, [pc, #264]	; (7d7c <FinishAesDrv+0x27c>)
    7c74:	4b42      	ldr	r3, [pc, #264]	; (7d80 <FinishAesDrv+0x280>)
    7c76:	6011      	str	r1, [r2, #0]
    7c78:	6861      	ldr	r1, [r4, #4]
    7c7a:	6019      	str	r1, [r3, #0]
    7c7c:	68a1      	ldr	r1, [r4, #8]
    7c7e:	6091      	str	r1, [r2, #8]
    7c80:	68e2      	ldr	r2, [r4, #12]
    7c82:	609a      	str	r2, [r3, #8]
    7c84:	2201      	movs	r2, #1
    7c86:	4938      	ldr	r1, [pc, #224]	; (7d68 <FinishAesDrv+0x268>)
    7c88:	4b35      	ldr	r3, [pc, #212]	; (7d60 <FinishAesDrv+0x260>)
    7c8a:	600a      	str	r2, [r1, #0]
    7c8c:	601d      	str	r5, [r3, #0]
    7c8e:	7933      	ldrb	r3, [r6, #4]
    7c90:	6830      	ldr	r0, [r6, #0]
    7c92:	4093      	lsls	r3, r2
    7c94:	f003 0302 	and.w	r3, r3, #2
    7c98:	f8c1 3690 	str.w	r3, [r1, #1680]	; 0x690
    7c9c:	2d00      	cmp	r5, #0
    7c9e:	d13d      	bne.n	7d1c <FinishAesDrv+0x21c>
    7ca0:	6da3      	ldr	r3, [r4, #88]	; 0x58
    7ca2:	b90b      	cbnz	r3, 7ca8 <FinishAesDrv+0x1a8>
    7ca4:	4b37      	ldr	r3, [pc, #220]	; (7d84 <FinishAesDrv+0x284>)
    7ca6:	601a      	str	r2, [r3, #0]
    7ca8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7caa:	3b01      	subs	r3, #1
    7cac:	2b06      	cmp	r3, #6
    7cae:	d8be      	bhi.n	7c2e <FinishAesDrv+0x12e>
    7cb0:	a201      	add	r2, pc, #4	; (adr r2, 7cb8 <FinishAesDrv+0x1b8>)
    7cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7cb6:	bf00      	nop
    7cb8:	00007cd5 	.word	0x00007cd5
    7cbc:	00007cf7 	.word	0x00007cf7
    7cc0:	00007cd5 	.word	0x00007cd5
    7cc4:	00007c2f 	.word	0x00007c2f
    7cc8:	00007c2f 	.word	0x00007c2f
    7ccc:	00007cf7 	.word	0x00007cf7
    7cd0:	00007cd5 	.word	0x00007cd5
    7cd4:	4a29      	ldr	r2, [pc, #164]	; (7d7c <FinishAesDrv+0x27c>)
    7cd6:	4b2a      	ldr	r3, [pc, #168]	; (7d80 <FinishAesDrv+0x280>)
    7cd8:	6811      	ldr	r1, [r2, #0]
    7cda:	3208      	adds	r2, #8
    7cdc:	6021      	str	r1, [r4, #0]
    7cde:	6819      	ldr	r1, [r3, #0]
    7ce0:	3308      	adds	r3, #8
    7ce2:	6061      	str	r1, [r4, #4]
    7ce4:	6812      	ldr	r2, [r2, #0]
    7ce6:	60a2      	str	r2, [r4, #8]
    7ce8:	681b      	ldr	r3, [r3, #0]
    7cea:	60e3      	str	r3, [r4, #12]
    7cec:	e79f      	b.n	7c2e <FinishAesDrv+0x12e>
    7cee:	6821      	ldr	r1, [r4, #0]
    7cf0:	4a25      	ldr	r2, [pc, #148]	; (7d88 <FinishAesDrv+0x288>)
    7cf2:	4b26      	ldr	r3, [pc, #152]	; (7d8c <FinishAesDrv+0x28c>)
    7cf4:	e7bf      	b.n	7c76 <FinishAesDrv+0x176>
    7cf6:	4a24      	ldr	r2, [pc, #144]	; (7d88 <FinishAesDrv+0x288>)
    7cf8:	4b24      	ldr	r3, [pc, #144]	; (7d8c <FinishAesDrv+0x28c>)
    7cfa:	e7ed      	b.n	7cd8 <FinishAesDrv+0x1d8>
    7cfc:	4824      	ldr	r0, [pc, #144]	; (7d90 <FinishAesDrv+0x290>)
    7cfe:	f7fd fd85 	bl	580c <CC_PalAbort>
    7d02:	e73a      	b.n	7b7a <FinishAesDrv+0x7a>
    7d04:	4823      	ldr	r0, [pc, #140]	; (7d94 <FinishAesDrv+0x294>)
    7d06:	f7fd fd81 	bl	580c <CC_PalAbort>
    7d0a:	e79a      	b.n	7c42 <FinishAesDrv+0x142>
    7d0c:	4822      	ldr	r0, [pc, #136]	; (7d98 <FinishAesDrv+0x298>)
    7d0e:	f7fd fd7d 	bl	580c <CC_PalAbort>
    7d12:	e738      	b.n	7b86 <FinishAesDrv+0x86>
    7d14:	4f21      	ldr	r7, [pc, #132]	; (7d9c <FinishAesDrv+0x29c>)
    7d16:	e78a      	b.n	7c2e <FinishAesDrv+0x12e>
    7d18:	4f21      	ldr	r7, [pc, #132]	; (7da0 <FinishAesDrv+0x2a0>)
    7d1a:	e788      	b.n	7c2e <FinishAesDrv+0x12e>
    7d1c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7d1e:	2b01      	cmp	r3, #1
    7d20:	bf07      	ittee	eq
    7d22:	4a20      	ldreq	r2, [pc, #128]	; (7da4 <FinishAesDrv+0x2a4>)
    7d24:	4b20      	ldreq	r3, [pc, #128]	; (7da8 <FinishAesDrv+0x2a8>)
    7d26:	4a21      	ldrne	r2, [pc, #132]	; (7dac <FinishAesDrv+0x2ac>)
    7d28:	4b21      	ldrne	r3, [pc, #132]	; (7db0 <FinishAesDrv+0x2b0>)
    7d2a:	6010      	str	r0, [r2, #0]
    7d2c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    7d30:	601d      	str	r5, [r3, #0]
    7d32:	f7fe f829 	bl	5d88 <CC_HalWaitInterrupt>
    7d36:	2800      	cmp	r0, #0
    7d38:	d0b6      	beq.n	7ca8 <FinishAesDrv+0x1a8>
    7d3a:	4607      	mov	r7, r0
    7d3c:	e777      	b.n	7c2e <FinishAesDrv+0x12e>
    7d3e:	4f1d      	ldr	r7, [pc, #116]	; (7db4 <FinishAesDrv+0x2b4>)
    7d40:	e775      	b.n	7c2e <FinishAesDrv+0x12e>
    7d42:	bf00      	nop
    7d44:	00f1000b 	.word	0x00f1000b
    7d48:	200000a8 	.word	0x200000a8
    7d4c:	50845810 	.word	0x50845810
    7d50:	50845820 	.word	0x50845820
    7d54:	50845910 	.word	0x50845910
    7d58:	50845a04 	.word	0x50845a04
    7d5c:	50845900 	.word	0x50845900
    7d60:	508454bc 	.word	0x508454bc
    7d64:	508454c0 	.word	0x508454c0
    7d68:	5084547c 	.word	0x5084547c
    7d6c:	00f10001 	.word	0x00f10001
    7d70:	000091a8 	.word	0x000091a8
    7d74:	00f10005 	.word	0x00f10005
    7d78:	00f10002 	.word	0x00f10002
    7d7c:	50845440 	.word	0x50845440
    7d80:	50845444 	.word	0x50845444
    7d84:	50845524 	.word	0x50845524
    7d88:	50845460 	.word	0x50845460
    7d8c:	50845464 	.word	0x50845464
    7d90:	00009150 	.word	0x00009150
    7d94:	00009188 	.word	0x00009188
    7d98:	00009168 	.word	0x00009168
    7d9c:	00f10003 	.word	0x00f10003
    7da0:	00f10004 	.word	0x00f10004
    7da4:	50845c28 	.word	0x50845c28
    7da8:	50845c2c 	.word	0x50845c2c
    7dac:	50845c30 	.word	0x50845c30
    7db0:	50845c34 	.word	0x50845c34
    7db4:	00f10006 	.word	0x00f10006

00007db8 <kmu_validate_slot_and_size>:
    7db8:	287f      	cmp	r0, #127	; 0x7f
    7dba:	d809      	bhi.n	7dd0 <kmu_validate_slot_and_size+0x18>
    7dbc:	b151      	cbz	r1, 7dd4 <kmu_validate_slot_and_size+0x1c>
    7dbe:	3901      	subs	r1, #1
    7dc0:	2902      	cmp	r1, #2
    7dc2:	d809      	bhi.n	7dd8 <kmu_validate_slot_and_size+0x20>
    7dc4:	4905      	ldr	r1, [pc, #20]	; (7ddc <kmu_validate_slot_and_size+0x24>)
    7dc6:	287f      	cmp	r0, #127	; 0x7f
    7dc8:	bf0c      	ite	eq
    7dca:	4608      	moveq	r0, r1
    7dcc:	2000      	movne	r0, #0
    7dce:	4770      	bx	lr
    7dd0:	4802      	ldr	r0, [pc, #8]	; (7ddc <kmu_validate_slot_and_size+0x24>)
    7dd2:	4770      	bx	lr
    7dd4:	4608      	mov	r0, r1
    7dd6:	4770      	bx	lr
    7dd8:	4801      	ldr	r0, [pc, #4]	; (7de0 <kmu_validate_slot_and_size+0x28>)
    7dda:	4770      	bx	lr
    7ddc:	00f70001 	.word	0x00f70001
    7de0:	00f70003 	.word	0x00f70003

00007de4 <kmu_validate_slot_and_size_no_kdr>:
    7de4:	1e83      	subs	r3, r0, #2
    7de6:	2b7d      	cmp	r3, #125	; 0x7d
    7de8:	d80b      	bhi.n	7e02 <kmu_validate_slot_and_size_no_kdr+0x1e>
    7dea:	b141      	cbz	r1, 7dfe <kmu_validate_slot_and_size_no_kdr+0x1a>
    7dec:	3901      	subs	r1, #1
    7dee:	2902      	cmp	r1, #2
    7df0:	d809      	bhi.n	7e06 <kmu_validate_slot_and_size_no_kdr+0x22>
    7df2:	4906      	ldr	r1, [pc, #24]	; (7e0c <kmu_validate_slot_and_size_no_kdr+0x28>)
    7df4:	287f      	cmp	r0, #127	; 0x7f
    7df6:	bf0c      	ite	eq
    7df8:	4608      	moveq	r0, r1
    7dfa:	2000      	movne	r0, #0
    7dfc:	4770      	bx	lr
    7dfe:	4608      	mov	r0, r1
    7e00:	4770      	bx	lr
    7e02:	4802      	ldr	r0, [pc, #8]	; (7e0c <kmu_validate_slot_and_size_no_kdr+0x28>)
    7e04:	4770      	bx	lr
    7e06:	4802      	ldr	r0, [pc, #8]	; (7e10 <kmu_validate_slot_and_size_no_kdr+0x2c>)
    7e08:	4770      	bx	lr
    7e0a:	bf00      	nop
    7e0c:	00f70001 	.word	0x00f70001
    7e10:	00f70003 	.word	0x00f70003

00007e14 <kmu_load_key_aes>:
    7e14:	b470      	push	{r4, r5, r6}
    7e16:	2901      	cmp	r1, #1
    7e18:	b08f      	sub	sp, #60	; 0x3c
    7e1a:	d009      	beq.n	7e30 <kmu_load_key_aes+0x1c>
    7e1c:	2902      	cmp	r1, #2
    7e1e:	f000 80af 	beq.w	7f80 <__kernel_ram_size+0xf0>
    7e22:	2900      	cmp	r1, #0
    7e24:	f000 80d7 	beq.w	7fd6 <__kernel_ram_size+0x146>
    7e28:	4898      	ldr	r0, [pc, #608]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    7e2a:	b00f      	add	sp, #60	; 0x3c
    7e2c:	bc70      	pop	{r4, r5, r6}
    7e2e:	4770      	bx	lr
    7e30:	2200      	movs	r2, #0
    7e32:	4b97      	ldr	r3, [pc, #604]	; (8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
    7e34:	4c97      	ldr	r4, [pc, #604]	; (8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>)
    7e36:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    7e3a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    7e3e:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
    7e42:	00c4      	lsls	r4, r0, #3
    7e44:	9506      	str	r5, [sp, #24]
    7e46:	9d06      	ldr	r5, [sp, #24]
    7e48:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7e4c:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
    7e50:	f504 047f 	add.w	r4, r4, #16711680	; 0xff0000
    7e54:	9506      	str	r5, [sp, #24]
    7e56:	9d06      	ldr	r5, [sp, #24]
    7e58:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    7e5c:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
    7e60:	1c42      	adds	r2, r0, #1
    7e62:	9506      	str	r5, [sp, #24]
    7e64:	9d06      	ldr	r5, [sp, #24]
    7e66:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
    7e6a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    7e6e:	f8d4 5400 	ldr.w	r5, [r4, #1024]	; 0x400
    7e72:	4a89      	ldr	r2, [pc, #548]	; (8098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>)
    7e74:	9507      	str	r5, [sp, #28]
    7e76:	9d07      	ldr	r5, [sp, #28]
    7e78:	4295      	cmp	r5, r2
    7e7a:	f040 80a8 	bne.w	7fce <__kernel_ram_size+0x13e>
    7e7e:	461a      	mov	r2, r3
    7e80:	6019      	str	r1, [r3, #0]
    7e82:	e005      	b.n	7e90 <__kernel_ram_size>
    7e84:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7e88:	b9db      	cbnz	r3, 7ec2 <__kernel_ram_size+0x32>
    7e8a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e8e:	b9c3      	cbnz	r3, 7ec2 <__kernel_ram_size+0x32>
    7e90:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    7e94:	3b00      	subs	r3, #0
    7e96:	bf18      	it	ne
    7e98:	2301      	movne	r3, #1
    7e9a:	f88d 3004 	strb.w	r3, [sp, #4]
    7e9e:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
    7ea2:	3b00      	subs	r3, #0
    7ea4:	bf18      	it	ne
    7ea6:	2301      	movne	r3, #1
    7ea8:	f88d 3005 	strb.w	r3, [sp, #5]
    7eac:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    7eb0:	3b00      	subs	r3, #0
    7eb2:	bf18      	it	ne
    7eb4:	2301      	movne	r3, #1
    7eb6:	f88d 3006 	strb.w	r3, [sp, #6]
    7eba:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7ebe:	2b00      	cmp	r3, #0
    7ec0:	d0e0      	beq.n	7e84 <kmu_load_key_aes+0x70>
    7ec2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7ec6:	2b00      	cmp	r3, #0
    7ec8:	f040 816b 	bne.w	81a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a2>
    7ecc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7ed0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    7ed4:	2b00      	cmp	r3, #0
    7ed6:	d14f      	bne.n	7f78 <__kernel_ram_size+0xe8>
    7ed8:	2101      	movs	r1, #1
    7eda:	4b6d      	ldr	r3, [pc, #436]	; (8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
    7edc:	4d6d      	ldr	r5, [pc, #436]	; (8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>)
    7ede:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    7ee2:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
    7ee6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    7eea:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
    7eee:	3002      	adds	r0, #2
    7ef0:	9508      	str	r5, [sp, #32]
    7ef2:	9d08      	ldr	r5, [sp, #32]
    7ef4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7ef8:	f8d3 6100 	ldr.w	r6, [r3, #256]	; 0x100
    7efc:	4d67      	ldr	r5, [pc, #412]	; (809c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>)
    7efe:	9608      	str	r6, [sp, #32]
    7f00:	9e08      	ldr	r6, [sp, #32]
    7f02:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    7f06:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    7f0a:	9208      	str	r2, [sp, #32]
    7f0c:	9a08      	ldr	r2, [sp, #32]
    7f0e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    7f12:	f8d4 2408 	ldr.w	r2, [r4, #1032]	; 0x408
    7f16:	9209      	str	r2, [sp, #36]	; 0x24
    7f18:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7f1a:	42aa      	cmp	r2, r5
    7f1c:	d157      	bne.n	7fce <__kernel_ram_size+0x13e>
    7f1e:	461a      	mov	r2, r3
    7f20:	6019      	str	r1, [r3, #0]
    7f22:	e005      	b.n	7f30 <__kernel_ram_size+0xa0>
    7f24:	f89d 3008 	ldrb.w	r3, [sp, #8]
    7f28:	b9db      	cbnz	r3, 7f62 <__kernel_ram_size+0xd2>
    7f2a:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7f2e:	b9c3      	cbnz	r3, 7f62 <__kernel_ram_size+0xd2>
    7f30:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    7f34:	3b00      	subs	r3, #0
    7f36:	bf18      	it	ne
    7f38:	2301      	movne	r3, #1
    7f3a:	f88d 3007 	strb.w	r3, [sp, #7]
    7f3e:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
    7f42:	3b00      	subs	r3, #0
    7f44:	bf18      	it	ne
    7f46:	2301      	movne	r3, #1
    7f48:	f88d 3008 	strb.w	r3, [sp, #8]
    7f4c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    7f50:	3b00      	subs	r3, #0
    7f52:	bf18      	it	ne
    7f54:	2301      	movne	r3, #1
    7f56:	f88d 3009 	strb.w	r3, [sp, #9]
    7f5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f5e:	2b00      	cmp	r3, #0
    7f60:	d0e0      	beq.n	7f24 <__kernel_ram_size+0x94>
    7f62:	f89d 3008 	ldrb.w	r3, [sp, #8]
    7f66:	2b00      	cmp	r3, #0
    7f68:	f040 811b 	bne.w	81a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a2>
    7f6c:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7f70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    7f74:	2b00      	cmp	r3, #0
    7f76:	d07e      	beq.n	8076 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x76>
    7f78:	4849      	ldr	r0, [pc, #292]	; (80a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>)
    7f7a:	b00f      	add	sp, #60	; 0x3c
    7f7c:	bc70      	pop	{r4, r5, r6}
    7f7e:	4770      	bx	lr
    7f80:	2200      	movs	r2, #0
    7f82:	2401      	movs	r4, #1
    7f84:	4b42      	ldr	r3, [pc, #264]	; (8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
    7f86:	4943      	ldr	r1, [pc, #268]	; (8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>)
    7f88:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    7f8c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    7f90:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
    7f94:	00c1      	lsls	r1, r0, #3
    7f96:	950a      	str	r5, [sp, #40]	; 0x28
    7f98:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    7f9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7f9e:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
    7fa2:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
    7fa6:	950a      	str	r5, [sp, #40]	; 0x28
    7fa8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    7faa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    7fae:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
    7fb2:	1902      	adds	r2, r0, r4
    7fb4:	950a      	str	r5, [sp, #40]	; 0x28
    7fb6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    7fb8:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
    7fbc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    7fc0:	f8d1 5400 	ldr.w	r5, [r1, #1024]	; 0x400
    7fc4:	4a34      	ldr	r2, [pc, #208]	; (8098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>)
    7fc6:	950b      	str	r5, [sp, #44]	; 0x2c
    7fc8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    7fca:	4295      	cmp	r5, r2
    7fcc:	d05a      	beq.n	8084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>
    7fce:	4835      	ldr	r0, [pc, #212]	; (80a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>)
    7fd0:	b00f      	add	sp, #60	; 0x3c
    7fd2:	bc70      	pop	{r4, r5, r6}
    7fd4:	4770      	bx	lr
    7fd6:	2401      	movs	r4, #1
    7fd8:	4b2d      	ldr	r3, [pc, #180]	; (8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
    7fda:	4a2e      	ldr	r2, [pc, #184]	; (8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>)
    7fdc:	1905      	adds	r5, r0, r4
    7fde:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
    7fe2:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
    7fe6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    7fea:	3080      	adds	r0, #128	; 0x80
    7fec:	9204      	str	r2, [sp, #16]
    7fee:	9a04      	ldr	r2, [sp, #16]
    7ff0:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    7ff4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    7ff8:	9204      	str	r2, [sp, #16]
    7ffa:	9a04      	ldr	r2, [sp, #16]
    7ffc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    8000:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    8004:	4a28      	ldr	r2, [pc, #160]	; (80a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa8>)
    8006:	9104      	str	r1, [sp, #16]
    8008:	9904      	ldr	r1, [sp, #16]
    800a:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    800e:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
    8012:	4a21      	ldr	r2, [pc, #132]	; (8098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>)
    8014:	9105      	str	r1, [sp, #20]
    8016:	9905      	ldr	r1, [sp, #20]
    8018:	4291      	cmp	r1, r2
    801a:	d1d8      	bne.n	7fce <__kernel_ram_size+0x13e>
    801c:	461a      	mov	r2, r3
    801e:	601c      	str	r4, [r3, #0]
    8020:	e005      	b.n	802e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
    8022:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8026:	b9db      	cbnz	r3, 8060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>
    8028:	f89d 3003 	ldrb.w	r3, [sp, #3]
    802c:	b9c3      	cbnz	r3, 8060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>
    802e:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    8032:	3b00      	subs	r3, #0
    8034:	bf18      	it	ne
    8036:	2301      	movne	r3, #1
    8038:	f88d 3001 	strb.w	r3, [sp, #1]
    803c:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
    8040:	3b00      	subs	r3, #0
    8042:	bf18      	it	ne
    8044:	2301      	movne	r3, #1
    8046:	f88d 3002 	strb.w	r3, [sp, #2]
    804a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    804e:	3b00      	subs	r3, #0
    8050:	bf18      	it	ne
    8052:	2301      	movne	r3, #1
    8054:	f88d 3003 	strb.w	r3, [sp, #3]
    8058:	f89d 3001 	ldrb.w	r3, [sp, #1]
    805c:	2b00      	cmp	r3, #0
    805e:	d0e0      	beq.n	8022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
    8060:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8064:	2b00      	cmp	r3, #0
    8066:	f040 809c 	bne.w	81a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a2>
    806a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    806e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    8072:	2b00      	cmp	r3, #0
    8074:	d180      	bne.n	7f78 <__kernel_ram_size+0xe8>
    8076:	4610      	mov	r0, r2
    8078:	4b05      	ldr	r3, [pc, #20]	; (8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
    807a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    807e:	b00f      	add	sp, #60	; 0x3c
    8080:	bc70      	pop	{r4, r5, r6}
    8082:	4770      	bx	lr
    8084:	461a      	mov	r2, r3
    8086:	601c      	str	r4, [r3, #0]
    8088:	e016      	b.n	80b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>
    808a:	bf00      	nop
    808c:	00f1000c 	.word	0x00f1000c
    8090:	50039000 	.word	0x50039000
    8094:	50844000 	.word	0x50844000
    8098:	50845400 	.word	0x50845400
    809c:	50845410 	.word	0x50845410
    80a0:	00f70002 	.word	0x00f70002
    80a4:	00f70006 	.word	0x00f70006
    80a8:	00ff8000 	.word	0x00ff8000
    80ac:	f89d 300b 	ldrb.w	r3, [sp, #11]
    80b0:	b9db      	cbnz	r3, 80ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xea>
    80b2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    80b6:	b9c3      	cbnz	r3, 80ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xea>
    80b8:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    80bc:	3b00      	subs	r3, #0
    80be:	bf18      	it	ne
    80c0:	2301      	movne	r3, #1
    80c2:	f88d 300a 	strb.w	r3, [sp, #10]
    80c6:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
    80ca:	3b00      	subs	r3, #0
    80cc:	bf18      	it	ne
    80ce:	2301      	movne	r3, #1
    80d0:	f88d 300b 	strb.w	r3, [sp, #11]
    80d4:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    80d8:	3b00      	subs	r3, #0
    80da:	bf18      	it	ne
    80dc:	2301      	movne	r3, #1
    80de:	f88d 300c 	strb.w	r3, [sp, #12]
    80e2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    80e6:	2b00      	cmp	r3, #0
    80e8:	d0e0      	beq.n	80ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>
    80ea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    80ee:	2b00      	cmp	r3, #0
    80f0:	d157      	bne.n	81a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a2>
    80f2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    80f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    80fa:	2b00      	cmp	r3, #0
    80fc:	f47f af3c 	bne.w	7f78 <__kernel_ram_size+0xe8>
    8100:	2401      	movs	r4, #1
    8102:	4b2a      	ldr	r3, [pc, #168]	; (81ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ac>)
    8104:	4d2a      	ldr	r5, [pc, #168]	; (81b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b0>)
    8106:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    810a:	f8c5 4500 	str.w	r4, [r5, #1280]	; 0x500
    810e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    8112:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
    8116:	3002      	adds	r0, #2
    8118:	950c      	str	r5, [sp, #48]	; 0x30
    811a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    811c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8120:	f8d3 6100 	ldr.w	r6, [r3, #256]	; 0x100
    8124:	4d23      	ldr	r5, [pc, #140]	; (81b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b4>)
    8126:	960c      	str	r6, [sp, #48]	; 0x30
    8128:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    812a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    812e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    8132:	920c      	str	r2, [sp, #48]	; 0x30
    8134:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8136:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    813a:	f8d1 2408 	ldr.w	r2, [r1, #1032]	; 0x408
    813e:	920d      	str	r2, [sp, #52]	; 0x34
    8140:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8142:	42aa      	cmp	r2, r5
    8144:	f47f af43 	bne.w	7fce <__kernel_ram_size+0x13e>
    8148:	461a      	mov	r2, r3
    814a:	601c      	str	r4, [r3, #0]
    814c:	e005      	b.n	815a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15a>
    814e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8152:	b9db      	cbnz	r3, 818c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18c>
    8154:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8158:	b9c3      	cbnz	r3, 818c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18c>
    815a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    815e:	3b00      	subs	r3, #0
    8160:	bf18      	it	ne
    8162:	2301      	movne	r3, #1
    8164:	f88d 300d 	strb.w	r3, [sp, #13]
    8168:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
    816c:	3b00      	subs	r3, #0
    816e:	bf18      	it	ne
    8170:	2301      	movne	r3, #1
    8172:	f88d 300e 	strb.w	r3, [sp, #14]
    8176:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    817a:	3b00      	subs	r3, #0
    817c:	bf18      	it	ne
    817e:	2301      	movne	r3, #1
    8180:	f88d 300f 	strb.w	r3, [sp, #15]
    8184:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8188:	2b00      	cmp	r3, #0
    818a:	d0e0      	beq.n	814e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14e>
    818c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8190:	b93b      	cbnz	r3, 81a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a2>
    8192:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8196:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    819a:	2b00      	cmp	r3, #0
    819c:	f43f af6b 	beq.w	8076 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x76>
    81a0:	e6ea      	b.n	7f78 <__kernel_ram_size+0xe8>
    81a2:	4805      	ldr	r0, [pc, #20]	; (81b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b8>)
    81a4:	b00f      	add	sp, #60	; 0x3c
    81a6:	bc70      	pop	{r4, r5, r6}
    81a8:	4770      	bx	lr
    81aa:	bf00      	nop
    81ac:	50039000 	.word	0x50039000
    81b0:	50844000 	.word	0x50844000
    81b4:	50845410 	.word	0x50845410
    81b8:	00f70001 	.word	0x00f70001

000081bc <kmu_derive_cmac>:
    81bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    81c0:	2400      	movs	r4, #0
    81c2:	b0cd      	sub	sp, #308	; 0x134
    81c4:	4605      	mov	r5, r0
    81c6:	e9dd 9658 	ldrd	r9, r6, [sp, #352]	; 0x160
    81ca:	4688      	mov	r8, r1
    81cc:	4617      	mov	r7, r2
    81ce:	4621      	mov	r1, r4
    81d0:	2274      	movs	r2, #116	; 0x74
    81d2:	a80e      	add	r0, sp, #56	; 0x38
    81d4:	469b      	mov	fp, r3
    81d6:	f000 fb12 	bl	87fe <memset>
    81da:	4621      	mov	r1, r4
    81dc:	2280      	movs	r2, #128	; 0x80
    81de:	a82c      	add	r0, sp, #176	; 0xb0
    81e0:	942b      	str	r4, [sp, #172]	; 0xac
    81e2:	f000 fb0c 	bl	87fe <memset>
    81e6:	2384      	movs	r3, #132	; 0x84
    81e8:	f5b6 6f7f 	cmp.w	r6, #4080	; 0xff0
    81ec:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
    81f0:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    81f4:	9305      	str	r3, [sp, #20]
    81f6:	d85d      	bhi.n	82b4 <kmu_derive_cmac+0xf8>
    81f8:	ab05      	add	r3, sp, #20
    81fa:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
    81fe:	9301      	str	r3, [sp, #4]
    8200:	4659      	mov	r1, fp
    8202:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
    8206:	4638      	mov	r0, r7
    8208:	9602      	str	r6, [sp, #8]
    820a:	f8cd a000 	str.w	sl, [sp]
    820e:	f000 f861 	bl	82d4 <UtilCmacBuildDataForDerivation>
    8212:	2800      	cmp	r0, #0
    8214:	d155      	bne.n	82c2 <kmu_derive_cmac+0x106>
    8216:	42a5      	cmp	r5, r4
    8218:	bf0c      	ite	eq
    821a:	f04f 0c03 	moveq.w	ip, #3
    821e:	f04f 0c02 	movne.w	ip, #2
    8222:	2200      	movs	r2, #0
    8224:	2301      	movs	r3, #1
    8226:	2707      	movs	r7, #7
    8228:	2401      	movs	r4, #1
    822a:	2110      	movs	r1, #16
    822c:	901c      	str	r0, [sp, #112]	; 0x70
    822e:	a80e      	add	r0, sp, #56	; 0x38
    8230:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
    8234:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
    8238:	f88d c074 	strb.w	ip, [sp, #116]	; 0x74
    823c:	971b      	str	r7, [sp, #108]	; 0x6c
    823e:	951e      	str	r5, [sp, #120]	; 0x78
    8240:	9426      	str	r4, [sp, #152]	; 0x98
    8242:	f7fe fef7 	bl	7034 <CC_PalMemSetZeroPlat>
    8246:	2210      	movs	r2, #16
    8248:	f10d 0820 	add.w	r8, sp, #32
    824c:	9200      	str	r2, [sp, #0]
    824e:	4650      	mov	r0, sl
    8250:	9905      	ldr	r1, [sp, #20]
    8252:	ab0a      	add	r3, sp, #40	; 0x28
    8254:	aa06      	add	r2, sp, #24
    8256:	f8cd 8004 	str.w	r8, [sp, #4]
    825a:	f7fe ff97 	bl	718c <SetDataBuffersInfo>
    825e:	4607      	mov	r7, r0
    8260:	b1c8      	cbz	r0, 8296 <kmu_derive_cmac+0xda>
    8262:	a80e      	add	r0, sp, #56	; 0x38
    8264:	2274      	movs	r2, #116	; 0x74
    8266:	2100      	movs	r1, #0
    8268:	f7fe fee2 	bl	7030 <CC_PalMemSetPlat>
    826c:	4638      	mov	r0, r7
    826e:	b04d      	add	sp, #308	; 0x134
    8270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8274:	2e10      	cmp	r6, #16
    8276:	4635      	mov	r5, r6
    8278:	bf28      	it	cs
    827a:	2510      	movcs	r5, #16
    827c:	a90e      	add	r1, sp, #56	; 0x38
    827e:	462a      	mov	r2, r5
    8280:	f7fe fed4 	bl	702c <CC_PalMemCopyPlat>
    8284:	2110      	movs	r1, #16
    8286:	a80e      	add	r0, sp, #56	; 0x38
    8288:	f7fe fed4 	bl	7034 <CC_PalMemSetZeroPlat>
    828c:	3401      	adds	r4, #1
    828e:	1b76      	subs	r6, r6, r5
    8290:	442f      	add	r7, r5
    8292:	b2e4      	uxtb	r4, r4
    8294:	d013      	beq.n	82be <kmu_derive_cmac+0x102>
    8296:	9b05      	ldr	r3, [sp, #20]
    8298:	4642      	mov	r2, r8
    829a:	a906      	add	r1, sp, #24
    829c:	a80e      	add	r0, sp, #56	; 0x38
    829e:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
    82a2:	f7ff fc2d 	bl	7b00 <FinishAesDrv>
    82a6:	4603      	mov	r3, r0
    82a8:	eb09 0007 	add.w	r0, r9, r7
    82ac:	2b00      	cmp	r3, #0
    82ae:	d0e1      	beq.n	8274 <kmu_derive_cmac+0xb8>
    82b0:	461f      	mov	r7, r3
    82b2:	e7d6      	b.n	8262 <kmu_derive_cmac+0xa6>
    82b4:	4f05      	ldr	r7, [pc, #20]	; (82cc <kmu_derive_cmac+0x110>)
    82b6:	4638      	mov	r0, r7
    82b8:	b04d      	add	sp, #308	; 0x134
    82ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    82be:	4637      	mov	r7, r6
    82c0:	e7cf      	b.n	8262 <kmu_derive_cmac+0xa6>
    82c2:	4f03      	ldr	r7, [pc, #12]	; (82d0 <kmu_derive_cmac+0x114>)
    82c4:	4638      	mov	r0, r7
    82c6:	b04d      	add	sp, #308	; 0x134
    82c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    82cc:	00f1000f 	.word	0x00f1000f
    82d0:	00f1000e 	.word	0x00f1000e

000082d4 <UtilCmacBuildDataForDerivation>:
    82d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82d8:	2600      	movs	r6, #0
    82da:	b082      	sub	sp, #8
    82dc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    82de:	9601      	str	r6, [sp, #4]
    82e0:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
    82e4:	d83b      	bhi.n	835e <UtilCmacBuildDataForDerivation+0x8a>
    82e6:	00ee      	lsls	r6, r5, #3
    82e8:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    82ec:	461f      	mov	r7, r3
    82ee:	bf34      	ite	cc
    82f0:	2303      	movcc	r3, #3
    82f2:	2304      	movcs	r3, #4
    82f4:	1e4d      	subs	r5, r1, #1
    82f6:	2d3f      	cmp	r5, #63	; 0x3f
    82f8:	460c      	mov	r4, r1
    82fa:	9300      	str	r3, [sp, #0]
    82fc:	d82f      	bhi.n	835e <UtilCmacBuildDataForDerivation+0x8a>
    82fe:	b370      	cbz	r0, 835e <UtilCmacBuildDataForDerivation+0x8a>
    8300:	4690      	mov	r8, r2
    8302:	b117      	cbz	r7, 830a <UtilCmacBuildDataForDerivation+0x36>
    8304:	b35a      	cbz	r2, 835e <UtilCmacBuildDataForDerivation+0x8a>
    8306:	2f40      	cmp	r7, #64	; 0x40
    8308:	d829      	bhi.n	835e <UtilCmacBuildDataForDerivation+0x8a>
    830a:	9a08      	ldr	r2, [sp, #32]
    830c:	b33a      	cbz	r2, 835e <UtilCmacBuildDataForDerivation+0x8a>
    830e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8310:	6811      	ldr	r1, [r2, #0]
    8312:	b321      	cbz	r1, 835e <UtilCmacBuildDataForDerivation+0x8a>
    8314:	19e2      	adds	r2, r4, r7
    8316:	4413      	add	r3, r2
    8318:	4299      	cmp	r1, r3
    831a:	d320      	bcc.n	835e <UtilCmacBuildDataForDerivation+0x8a>
    831c:	9b08      	ldr	r3, [sp, #32]
    831e:	4622      	mov	r2, r4
    8320:	4601      	mov	r1, r0
    8322:	1c58      	adds	r0, r3, #1
    8324:	f7fe fe82 	bl	702c <CC_PalMemCopyPlat>
    8328:	2200      	movs	r2, #0
    832a:	9b08      	ldr	r3, [sp, #32]
    832c:	4423      	add	r3, r4
    832e:	705a      	strb	r2, [r3, #1]
    8330:	3402      	adds	r4, #2
    8332:	bb07      	cbnz	r7, 8376 <UtilCmacBuildDataForDerivation+0xa2>
    8334:	2eff      	cmp	r6, #255	; 0xff
    8336:	9600      	str	r6, [sp, #0]
    8338:	d915      	bls.n	8366 <UtilCmacBuildDataForDerivation+0x92>
    833a:	9b08      	ldr	r3, [sp, #32]
    833c:	0235      	lsls	r5, r6, #8
    833e:	b2ad      	uxth	r5, r5
    8340:	1918      	adds	r0, r3, r4
    8342:	2202      	movs	r2, #2
    8344:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
    8348:	a901      	add	r1, sp, #4
    834a:	9501      	str	r5, [sp, #4]
    834c:	f7fe fe6e 	bl	702c <CC_PalMemCopyPlat>
    8350:	3402      	adds	r4, #2
    8352:	2000      	movs	r0, #0
    8354:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8356:	601c      	str	r4, [r3, #0]
    8358:	b002      	add	sp, #8
    835a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    835e:	480a      	ldr	r0, [pc, #40]	; (8388 <UtilCmacBuildDataForDerivation+0xb4>)
    8360:	b002      	add	sp, #8
    8362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8366:	9b08      	ldr	r3, [sp, #32]
    8368:	2201      	movs	r2, #1
    836a:	1918      	adds	r0, r3, r4
    836c:	4669      	mov	r1, sp
    836e:	f7fe fe5d 	bl	702c <CC_PalMemCopyPlat>
    8372:	3401      	adds	r4, #1
    8374:	e7ed      	b.n	8352 <UtilCmacBuildDataForDerivation+0x7e>
    8376:	9b08      	ldr	r3, [sp, #32]
    8378:	4641      	mov	r1, r8
    837a:	1918      	adds	r0, r3, r4
    837c:	463a      	mov	r2, r7
    837e:	f7fe fe55 	bl	702c <CC_PalMemCopyPlat>
    8382:	443c      	add	r4, r7
    8384:	e7d6      	b.n	8334 <UtilCmacBuildDataForDerivation+0x60>
    8386:	bf00      	nop
    8388:	80000006 	.word	0x80000006

0000838c <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    838c:	b508      	push	{r3, lr}
	spm_config();
    838e:	f7f9 fcc1 	bl	1d14 <spm_config>
	spm_jump();
}
    8392:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    8396:	f7f9 bc5d 	b.w	1c54 <spm_jump>

0000839a <sys_notify_validate>:
	if (notify == NULL) {
    839a:	4603      	mov	r3, r0
    839c:	b158      	cbz	r0, 83b6 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    839e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    83a0:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    83a4:	2a01      	cmp	r2, #1
    83a6:	d003      	beq.n	83b0 <sys_notify_validate+0x16>
    83a8:	2a03      	cmp	r2, #3
    83aa:	d104      	bne.n	83b6 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    83ac:	6802      	ldr	r2, [r0, #0]
    83ae:	b112      	cbz	r2, 83b6 <sys_notify_validate+0x1c>
		notify->result = 0;
    83b0:	2000      	movs	r0, #0
    83b2:	6098      	str	r0, [r3, #8]
    83b4:	4770      	bx	lr
		return -EINVAL;
    83b6:	f06f 0015 	mvn.w	r0, #21
}
    83ba:	4770      	bx	lr

000083bc <arch_printk_char_out>:
}
    83bc:	2000      	movs	r0, #0
    83be:	4770      	bx	lr

000083c0 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    83c0:	b40f      	push	{r0, r1, r2, r3}
    83c2:	b507      	push	{r0, r1, r2, lr}
    83c4:	a904      	add	r1, sp, #16
    83c6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    83ca:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    83cc:	f7f8 f8f6 	bl	5bc <vprintk>
	}
	va_end(ap);
}
    83d0:	b003      	add	sp, #12
    83d2:	f85d eb04 	ldr.w	lr, [sp], #4
    83d6:	b004      	add	sp, #16
    83d8:	4770      	bx	lr

000083da <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    83da:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    83dc:	f013 0307 	ands.w	r3, r3, #7
    83e0:	d105      	bne.n	83ee <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    83e2:	6803      	ldr	r3, [r0, #0]
    83e4:	2b00      	cmp	r3, #0
		evt = EVT_START;
    83e6:	bf0c      	ite	eq
    83e8:	2000      	moveq	r0, #0
    83ea:	2003      	movne	r0, #3
    83ec:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    83ee:	2b02      	cmp	r3, #2
    83f0:	d105      	bne.n	83fe <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    83f2:	8bc3      	ldrh	r3, [r0, #30]
    83f4:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    83f6:	bf14      	ite	ne
    83f8:	2000      	movne	r0, #0
    83fa:	2004      	moveq	r0, #4
    83fc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    83fe:	2b01      	cmp	r3, #1
    8400:	d105      	bne.n	840e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    8402:	6803      	ldr	r3, [r0, #0]
    8404:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    8406:	bf0c      	ite	eq
    8408:	2000      	moveq	r0, #0
    840a:	2005      	movne	r0, #5
    840c:	4770      	bx	lr
	int evt = EVT_NOP;
    840e:	2000      	movs	r0, #0
}
    8410:	4770      	bx	lr

00008412 <notify_one>:
{
    8412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8416:	460d      	mov	r5, r1
    8418:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    841a:	4619      	mov	r1, r3
    841c:	1d28      	adds	r0, r5, #4
{
    841e:	4690      	mov	r8, r2
    8420:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8422:	f7f8 f89f 	bl	564 <sys_notify_finalize>
	if (cb) {
    8426:	4604      	mov	r4, r0
    8428:	b138      	cbz	r0, 843a <notify_one+0x28>
		cb(mgr, cli, state, res);
    842a:	4633      	mov	r3, r6
    842c:	4642      	mov	r2, r8
    842e:	4629      	mov	r1, r5
    8430:	4638      	mov	r0, r7
    8432:	46a4      	mov	ip, r4
}
    8434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    8438:	4760      	bx	ip
}
    843a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000843e <validate_args>:
{
    843e:	b510      	push	{r4, lr}
    8440:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    8442:	b140      	cbz	r0, 8456 <validate_args+0x18>
    8444:	b139      	cbz	r1, 8456 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    8446:	1d08      	adds	r0, r1, #4
    8448:	f7ff ffa7 	bl	839a <sys_notify_validate>
	if ((rv == 0)
    844c:	b928      	cbnz	r0, 845a <validate_args+0x1c>
	    && ((cli->notify.flags
    844e:	68a3      	ldr	r3, [r4, #8]
    8450:	f033 0303 	bics.w	r3, r3, #3
    8454:	d001      	beq.n	845a <validate_args+0x1c>
		rv = -EINVAL;
    8456:	f06f 0015 	mvn.w	r0, #21
}
    845a:	bd10      	pop	{r4, pc}

0000845c <onoff_manager_init>:
{
    845c:	b538      	push	{r3, r4, r5, lr}
    845e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    8460:	4605      	mov	r5, r0
    8462:	b158      	cbz	r0, 847c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    8464:	b151      	cbz	r1, 847c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    8466:	680b      	ldr	r3, [r1, #0]
    8468:	b143      	cbz	r3, 847c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    846a:	684b      	ldr	r3, [r1, #4]
    846c:	b133      	cbz	r3, 847c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    846e:	2220      	movs	r2, #32
    8470:	2100      	movs	r1, #0
    8472:	f000 f9c4 	bl	87fe <memset>
	return 0;
    8476:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    8478:	612c      	str	r4, [r5, #16]
}
    847a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    847c:	f06f 0015 	mvn.w	r0, #21
    8480:	e7fb      	b.n	847a <onoff_manager_init+0x1e>

00008482 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    8482:	4604      	mov	r4, r0
    8484:	b508      	push	{r3, lr}
    8486:	4608      	mov	r0, r1
    8488:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    848a:	461a      	mov	r2, r3
    848c:	47a0      	blx	r4
	return z_impl_k_current_get();
    848e:	f7fc fe1d 	bl	50cc <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    8492:	f7fa fafd 	bl	2a90 <z_impl_k_thread_abort>

00008496 <encode_uint>:
{
    8496:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    849a:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    849c:	78d3      	ldrb	r3, [r2, #3]
{
    849e:	4614      	mov	r4, r2
	switch (specifier) {
    84a0:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    84a2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    84a6:	4606      	mov	r6, r0
    84a8:	460f      	mov	r7, r1
    84aa:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    84ac:	d02d      	beq.n	850a <encode_uint+0x74>
    84ae:	d828      	bhi.n	8502 <encode_uint+0x6c>
		return 16;
    84b0:	2b58      	cmp	r3, #88	; 0x58
    84b2:	bf14      	ite	ne
    84b4:	250a      	movne	r5, #10
    84b6:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
    84b8:	46aa      	mov	sl, r5
    84ba:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
    84be:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    84c2:	4652      	mov	r2, sl
    84c4:	465b      	mov	r3, fp
    84c6:	4630      	mov	r0, r6
    84c8:	4639      	mov	r1, r7
    84ca:	f7f7 feb7 	bl	23c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    84ce:	2a09      	cmp	r2, #9
    84d0:	b2d3      	uxtb	r3, r2
    84d2:	d81f      	bhi.n	8514 <encode_uint+0x7e>
    84d4:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    84d6:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    84d8:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    84da:	bf08      	it	eq
    84dc:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    84de:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    84e2:	d301      	bcc.n	84e8 <encode_uint+0x52>
    84e4:	45c8      	cmp	r8, r9
    84e6:	d812      	bhi.n	850e <encode_uint+0x78>
	if (conv->flag_hash) {
    84e8:	7823      	ldrb	r3, [r4, #0]
    84ea:	069b      	lsls	r3, r3, #26
    84ec:	d505      	bpl.n	84fa <encode_uint+0x64>
		if (radix == 8) {
    84ee:	2d08      	cmp	r5, #8
    84f0:	d116      	bne.n	8520 <encode_uint+0x8a>
			conv->altform_0 = true;
    84f2:	78a3      	ldrb	r3, [r4, #2]
    84f4:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    84f8:	70a3      	strb	r3, [r4, #2]
}
    84fa:	4640      	mov	r0, r8
    84fc:	b003      	add	sp, #12
    84fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    8502:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    8506:	2b70      	cmp	r3, #112	; 0x70
    8508:	e7d3      	b.n	84b2 <encode_uint+0x1c>
	switch (specifier) {
    850a:	2508      	movs	r5, #8
    850c:	e7d4      	b.n	84b8 <encode_uint+0x22>
		value /= radix;
    850e:	4606      	mov	r6, r0
    8510:	460f      	mov	r7, r1
    8512:	e7d6      	b.n	84c2 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8514:	9a01      	ldr	r2, [sp, #4]
    8516:	2a19      	cmp	r2, #25
    8518:	bf94      	ite	ls
    851a:	3337      	addls	r3, #55	; 0x37
    851c:	3357      	addhi	r3, #87	; 0x57
    851e:	e7da      	b.n	84d6 <encode_uint+0x40>
		} else if (radix == 16) {
    8520:	2d10      	cmp	r5, #16
    8522:	d1ea      	bne.n	84fa <encode_uint+0x64>
			conv->altform_0c = true;
    8524:	78a3      	ldrb	r3, [r4, #2]
    8526:	f043 0310 	orr.w	r3, r3, #16
    852a:	e7e5      	b.n	84f8 <encode_uint+0x62>

0000852c <outs>:
{
    852c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8530:	4607      	mov	r7, r0
    8532:	4688      	mov	r8, r1
    8534:	4615      	mov	r5, r2
    8536:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    8538:	4614      	mov	r4, r2
    853a:	42b4      	cmp	r4, r6
    853c:	eba4 0005 	sub.w	r0, r4, r5
    8540:	d302      	bcc.n	8548 <outs+0x1c>
    8542:	b93e      	cbnz	r6, 8554 <outs+0x28>
    8544:	7823      	ldrb	r3, [r4, #0]
    8546:	b12b      	cbz	r3, 8554 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    8548:	4641      	mov	r1, r8
    854a:	f814 0b01 	ldrb.w	r0, [r4], #1
    854e:	47b8      	blx	r7
		if (rc < 0) {
    8550:	2800      	cmp	r0, #0
    8552:	daf2      	bge.n	853a <outs+0xe>
}
    8554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008558 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    8558:	4040      	eors	r0, r0
    855a:	f380 8811 	msr	BASEPRI, r0
    855e:	f04f 0004 	mov.w	r0, #4
    8562:	df02      	svc	2
}
    8564:	4770      	bx	lr

00008566 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    8566:	4770      	bx	lr

00008568 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    8568:	f7fa bf4a 	b.w	3400 <SystemInit>

0000856c <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    856c:	b084      	sub	sp, #16
    856e:	ab04      	add	r3, sp, #16
    8570:	e903 0007 	stmdb	r3, {r0, r1, r2}
    8574:	2300      	movs	r3, #0
    8576:	f383 8811 	msr	BASEPRI, r3
    857a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    857e:	b004      	add	sp, #16
    8580:	4770      	bx	lr

00008582 <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    8582:	b40f      	push	{r0, r1, r2, r3}
    8584:	b507      	push	{r0, r1, r2, lr}
    8586:	a904      	add	r1, sp, #16
    8588:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    858c:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    858e:	f7f8 f815 	bl	5bc <vprintk>
	va_end(ap);
}
    8592:	b003      	add	sp, #12
    8594:	f85d eb04 	ldr.w	lr, [sp], #4
    8598:	b004      	add	sp, #16
    859a:	4770      	bx	lr

0000859c <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    859c:	2200      	movs	r2, #0
    859e:	e9c0 2200 	strd	r2, r2, [r0]
    85a2:	6082      	str	r2, [r0, #8]
}
    85a4:	4770      	bx	lr

000085a6 <set_starting_state>:
{
    85a6:	b510      	push	{r4, lr}
	__asm__ volatile(
    85a8:	f04f 0320 	mov.w	r3, #32
    85ac:	f3ef 8211 	mrs	r2, BASEPRI
    85b0:	f383 8811 	msr	BASEPRI, r3
    85b4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    85b8:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    85ba:	f003 0407 	and.w	r4, r3, #7
    85be:	2c01      	cmp	r4, #1
    85c0:	d106      	bne.n	85d0 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    85c2:	6001      	str	r1, [r0, #0]
	int err = 0;
    85c4:	2000      	movs	r0, #0
	__asm__ volatile(
    85c6:	f382 8811 	msr	BASEPRI, r2
    85ca:	f3bf 8f6f 	isb	sy
}
    85ce:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    85d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    85d4:	428b      	cmp	r3, r1
		err = -EALREADY;
    85d6:	bf14      	ite	ne
    85d8:	f04f 30ff 	movne.w	r0, #4294967295
    85dc:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    85e0:	e7f1      	b.n	85c6 <set_starting_state+0x20>

000085e2 <set_on_state>:
	__asm__ volatile(
    85e2:	f04f 0320 	mov.w	r3, #32
    85e6:	f3ef 8211 	mrs	r2, BASEPRI
    85ea:	f383 8811 	msr	BASEPRI, r3
    85ee:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    85f2:	6803      	ldr	r3, [r0, #0]
    85f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    85f8:	f043 0302 	orr.w	r3, r3, #2
    85fc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    85fe:	f382 8811 	msr	BASEPRI, r2
    8602:	f3bf 8f6f 	isb	sy
}
    8606:	4770      	bx	lr

00008608 <onoff_started_callback>:
	return &data->mgr[type];
    8608:	6900      	ldr	r0, [r0, #16]
    860a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    860c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    8610:	2100      	movs	r1, #0
    8612:	4710      	bx	r2

00008614 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    8614:	2003      	movs	r0, #3
    8616:	f7fa bfc9 	b.w	35ac <nrfx_clock_start>

0000861a <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    861a:	2002      	movs	r0, #2
    861c:	f7fa bfc6 	b.w	35ac <nrfx_clock_start>

00008620 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    8620:	2000      	movs	r0, #0
    8622:	f7fa bfc3 	b.w	35ac <nrfx_clock_start>

00008626 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    8626:	2003      	movs	r0, #3
    8628:	f7fb b836 	b.w	3698 <nrfx_clock_stop>

0000862c <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    862c:	2002      	movs	r0, #2
    862e:	f7fb b833 	b.w	3698 <nrfx_clock_stop>

00008632 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8632:	2000      	movs	r0, #0
    8634:	f7fb b830 	b.w	3698 <nrfx_clock_stop>

00008638 <api_stop>:
	return stop(dev, subsys, CTX_API);
    8638:	2280      	movs	r2, #128	; 0x80
    863a:	f7f8 bfc5 	b.w	15c8 <stop>

0000863e <blocking_start_callback>:
{
    863e:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    8640:	f7fb bddc 	b.w	41fc <z_impl_k_sem_give>

00008644 <api_start>:
{
    8644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    8648:	240c      	movs	r4, #12
    864a:	b2c9      	uxtb	r1, r1
    864c:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    864e:	6905      	ldr	r5, [r0, #16]
{
    8650:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    8652:	f104 0088 	add.w	r0, r4, #136	; 0x88
    8656:	2180      	movs	r1, #128	; 0x80
    8658:	4428      	add	r0, r5
{
    865a:	4690      	mov	r8, r2
    865c:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
    865e:	f7ff ffa2 	bl	85a6 <set_starting_state>
	if (err < 0) {
    8662:	2800      	cmp	r0, #0
    8664:	db06      	blt.n	8674 <api_start+0x30>
	subdata->cb = cb;
    8666:	4425      	add	r5, r4
	subdata->user_data = user_data;
    8668:	e9c5 8720 	strd	r8, r7, [r5, #128]	; 0x80
	 get_sub_config(dev, type)->start();
    866c:	6873      	ldr	r3, [r6, #4]
    866e:	591b      	ldr	r3, [r3, r4]
    8670:	4798      	blx	r3
	return 0;
    8672:	2000      	movs	r0, #0
}
    8674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008678 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    8678:	4770      	bx	lr

0000867a <sys_clock_disable>:
    867a:	4770      	bx	lr

0000867c <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    867c:	2000      	movs	r0, #0
    867e:	f7f8 bdd3 	b.w	1228 <sys_reboot>

00008682 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    8682:	2100      	movs	r1, #0
    8684:	2001      	movs	r0, #1
    8686:	f7f9 be97 	b.w	23b8 <z_arm_fatal_error>

0000868a <irq_target_state_set>:
 *
 * @return The resulting target state of the given IRQ
 */
irq_target_state_t irq_target_state_set(unsigned int irq,
	irq_target_state_t irq_target_state)
{
    868a:	4602      	mov	r2, r0
    868c:	b243      	sxtb	r3, r0
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
    868e:	4608      	mov	r0, r1
    8690:	b9c1      	cbnz	r1, 86c4 <irq_target_state_set+0x3a>
  if ((int32_t)(IRQn) >= 0)
    8692:	2b00      	cmp	r3, #0
    8694:	db27      	blt.n	86e6 <irq_target_state_set+0x5c>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    8696:	2001      	movs	r0, #1
    8698:	095b      	lsrs	r3, r3, #5
    869a:	009b      	lsls	r3, r3, #2
    869c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    86a0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    86a4:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    86a8:	f002 021f 	and.w	r2, r2, #31
    86ac:	4090      	lsls	r0, r2
    86ae:	ea21 0100 	bic.w	r1, r1, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    86b2:	f8c3 1280 	str.w	r1, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    86b6:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
    86ba:	40d0      	lsrs	r0, r2
    86bc:	f000 0001 	and.w	r0, r0, #1
	} else {
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
    86c0:	b2c0      	uxtb	r0, r0
    86c2:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    86c4:	2b00      	cmp	r3, #0
    86c6:	db0d      	blt.n	86e4 <irq_target_state_set+0x5a>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    86c8:	2101      	movs	r1, #1
    86ca:	095b      	lsrs	r3, r3, #5
    86cc:	009b      	lsls	r3, r3, #2
    86ce:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    86d2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    86d6:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
    86da:	f002 021f 	and.w	r2, r2, #31
    86de:	4091      	lsls	r1, r2
    86e0:	4301      	orrs	r1, r0
    86e2:	e7e6      	b.n	86b2 <irq_target_state_set+0x28>
		return IRQ_TARGET_STATE_NON_SECURE;
	} else {
		return IRQ_TARGET_STATE_SECURE;
    86e4:	2000      	movs	r0, #0
	}
}
    86e6:	4770      	bx	lr

000086e8 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    86e8:	6e43      	ldr	r3, [r0, #100]	; 0x64
    86ea:	f383 880b 	msr	PSPLIM, r3
}
    86ee:	4770      	bx	lr

000086f0 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    86f0:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    86f2:	6800      	ldr	r0, [r0, #0]
    86f4:	f7f9 be60 	b.w	23b8 <z_arm_fatal_error>

000086f8 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    86f8:	b508      	push	{r3, lr}
	handler();
    86fa:	f7f9 fe8b 	bl	2414 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    86fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    8702:	f7fa b963 	b.w	29cc <z_arm_exc_exit>

00008706 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    8706:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    870a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    870e:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    8710:	bf08      	it	eq
    8712:	f06f 0015 	mvneq.w	r0, #21
    8716:	4770      	bx	lr

00008718 <arm_cmse_addr_is_secure>:
    8718:	e840 f000 	tt	r0, r0
int arm_cmse_addr_is_secure(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	return addr_info.flags.secure;
}
    871c:	f3c0 5080 	ubfx	r0, r0, #22, #1
    8720:	4770      	bx	lr

00008722 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    8722:	4603      	mov	r3, r0
	size_t n = 0;
    8724:	2000      	movs	r0, #0

	while (*s != '\0') {
    8726:	5c1a      	ldrb	r2, [r3, r0]
    8728:	b902      	cbnz	r2, 872c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    872a:	4770      	bx	lr
		n++;
    872c:	3001      	adds	r0, #1
    872e:	e7fa      	b.n	8726 <strlen+0x4>

00008730 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    8730:	4603      	mov	r3, r0
	size_t n = 0;
    8732:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    8734:	5c1a      	ldrb	r2, [r3, r0]
    8736:	b10a      	cbz	r2, 873c <strnlen+0xc>
    8738:	4288      	cmp	r0, r1
    873a:	d100      	bne.n	873e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    873c:	4770      	bx	lr
		n++;
    873e:	3001      	adds	r0, #1
    8740:	e7f8      	b.n	8734 <strnlen+0x4>

00008742 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    8742:	1e43      	subs	r3, r0, #1
    8744:	3901      	subs	r1, #1
    8746:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    874a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    874e:	4282      	cmp	r2, r0
    8750:	d101      	bne.n	8756 <strcmp+0x14>
    8752:	2a00      	cmp	r2, #0
    8754:	d1f7      	bne.n	8746 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    8756:	1a10      	subs	r0, r2, r0
    8758:	4770      	bx	lr

0000875a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    875a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    875c:	b15a      	cbz	r2, 8776 <memcmp+0x1c>
    875e:	3901      	subs	r1, #1
    8760:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    8762:	f810 2b01 	ldrb.w	r2, [r0], #1
    8766:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    876a:	42a0      	cmp	r0, r4
    876c:	d001      	beq.n	8772 <memcmp+0x18>
    876e:	429a      	cmp	r2, r3
    8770:	d0f7      	beq.n	8762 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    8772:	1ad0      	subs	r0, r2, r3
}
    8774:	bd10      	pop	{r4, pc}
		return 0;
    8776:	4610      	mov	r0, r2
    8778:	e7fc      	b.n	8774 <memcmp+0x1a>

0000877a <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    877a:	1a43      	subs	r3, r0, r1
    877c:	4293      	cmp	r3, r2
{
    877e:	b510      	push	{r4, lr}
    8780:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    8784:	d308      	bcc.n	8798 <memmove+0x1e>
	char *dest = d;
    8786:	4602      	mov	r2, r0
    8788:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    878a:	429a      	cmp	r2, r3
    878c:	d00b      	beq.n	87a6 <memmove+0x2c>
			*dest = *src;
    878e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    8792:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    8796:	e7f8      	b.n	878a <memmove+0x10>
    8798:	440a      	add	r2, r1
			dest[n] = src[n];
    879a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    879e:	428a      	cmp	r2, r1
			dest[n] = src[n];
    87a0:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    87a4:	d1f9      	bne.n	879a <memmove+0x20>
		}
	}

	return d;
}
    87a6:	bd10      	pop	{r4, pc}

000087a8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    87a8:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    87aa:	ea81 0400 	eor.w	r4, r1, r0
    87ae:	07a5      	lsls	r5, r4, #30
    87b0:	4603      	mov	r3, r0
    87b2:	d00b      	beq.n	87cc <memcpy+0x24>
    87b4:	3b01      	subs	r3, #1
    87b6:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    87b8:	4291      	cmp	r1, r2
    87ba:	d11b      	bne.n	87f4 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    87bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    87be:	2a00      	cmp	r2, #0
    87c0:	d0fc      	beq.n	87bc <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    87c2:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    87c6:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    87c8:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    87cc:	079c      	lsls	r4, r3, #30
    87ce:	d1f6      	bne.n	87be <memcpy+0x16>
    87d0:	f022 0403 	bic.w	r4, r2, #3
    87d4:	1f1d      	subs	r5, r3, #4
    87d6:	0896      	lsrs	r6, r2, #2
    87d8:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    87da:	42b9      	cmp	r1, r7
    87dc:	d105      	bne.n	87ea <memcpy+0x42>
    87de:	f06f 0503 	mvn.w	r5, #3
    87e2:	4423      	add	r3, r4
    87e4:	fb05 2206 	mla	r2, r5, r6, r2
    87e8:	e7e4      	b.n	87b4 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    87ea:	f851 cb04 	ldr.w	ip, [r1], #4
    87ee:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    87f2:	e7f2      	b.n	87da <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    87f4:	f811 4b01 	ldrb.w	r4, [r1], #1
    87f8:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    87fc:	e7dc      	b.n	87b8 <memcpy+0x10>

000087fe <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    87fe:	4603      	mov	r3, r0
{
    8800:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    8802:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    8804:	079c      	lsls	r4, r3, #30
    8806:	d111      	bne.n	882c <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    8808:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    880c:	f022 0603 	bic.w	r6, r2, #3
    8810:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    8814:	441e      	add	r6, r3
    8816:	0894      	lsrs	r4, r2, #2
    8818:	42b3      	cmp	r3, r6
    881a:	d10d      	bne.n	8838 <memset+0x3a>
    881c:	f06f 0503 	mvn.w	r5, #3
    8820:	fb05 2204 	mla	r2, r5, r4, r2
    8824:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    8826:	4293      	cmp	r3, r2
    8828:	d109      	bne.n	883e <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    882a:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    882c:	2a00      	cmp	r2, #0
    882e:	d0fc      	beq.n	882a <memset+0x2c>
		*(d_byte++) = c_byte;
    8830:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    8834:	3a01      	subs	r2, #1
    8836:	e7e5      	b.n	8804 <memset+0x6>
		*(d_word++) = c_word;
    8838:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    883c:	e7ec      	b.n	8818 <memset+0x1a>
		*(d_byte++) = c_byte;
    883e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    8842:	e7f0      	b.n	8826 <memset+0x28>

00008844 <_stdout_hook_default>:
}
    8844:	f04f 30ff 	mov.w	r0, #4294967295
    8848:	4770      	bx	lr

0000884a <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    884a:	6843      	ldr	r3, [r0, #4]
    884c:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    884e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    8852:	05d1      	lsls	r1, r2, #23
    8854:	d518      	bpl.n	8888 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8856:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    885a:	b1aa      	cbz	r2, 8888 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    885c:	f04f 0120 	mov.w	r1, #32
    8860:	f3ef 8211 	mrs	r2, BASEPRI
    8864:	f381 8811 	msr	BASEPRI, r1
    8868:	f3bf 8f6f 	isb	sy
    886c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    8870:	b131      	cbz	r1, 8880 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8872:	2100      	movs	r1, #0
    8874:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    8878:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    887c:	2101      	movs	r1, #1
    887e:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    8880:	f382 8811 	msr	BASEPRI, r2
    8884:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8888:	6842      	ldr	r2, [r0, #4]
    888a:	6852      	ldr	r2, [r2, #4]
    888c:	06d2      	lsls	r2, r2, #27
    888e:	d515      	bpl.n	88bc <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    8890:	f04f 0120 	mov.w	r1, #32
    8894:	f3ef 8211 	mrs	r2, BASEPRI
    8898:	f381 8811 	msr	BASEPRI, r1
    889c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    88a0:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    88a4:	b111      	cbz	r1, 88ac <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    88a6:	2100      	movs	r1, #0
    88a8:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    88ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    88b0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    88b4:	f382 8811 	msr	BASEPRI, r2
    88b8:	f3bf 8f6f 	isb	sy
}
    88bc:	4770      	bx	lr

000088be <uarte_nrfx_config_get>:
{
    88be:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    88c0:	6902      	ldr	r2, [r0, #16]
    88c2:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    88c6:	e883 0003 	stmia.w	r3, {r0, r1}
}
    88ca:	2000      	movs	r0, #0
    88cc:	4770      	bx	lr

000088ce <uarte_nrfx_err_check>:
	return config->uarte_regs;
    88ce:	6843      	ldr	r3, [r0, #4]
    88d0:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    88d2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    88d6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    88da:	4770      	bx	lr

000088dc <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    88dc:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    88de:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    88e0:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    88e4:	b940      	cbnz	r0, 88f8 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    88e6:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    88e8:	0712      	lsls	r2, r2, #28
    88ea:	d406      	bmi.n	88fa <is_tx_ready+0x1e>
    88ec:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    88f0:	3800      	subs	r0, #0
    88f2:	bf18      	it	ne
    88f4:	2001      	movne	r0, #1
    88f6:	4770      	bx	lr
    88f8:	2001      	movs	r0, #1
}
    88fa:	4770      	bx	lr

000088fc <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    88fc:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    88fe:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    8900:	681b      	ldr	r3, [r3, #0]
    8902:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8906:	b148      	cbz	r0, 891c <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8908:	2000      	movs	r0, #0
	*c = data->rx_data;
    890a:	7c52      	ldrb	r2, [r2, #17]
    890c:	700a      	strb	r2, [r1, #0]
    890e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    8912:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8916:	2201      	movs	r2, #1
    8918:	601a      	str	r2, [r3, #0]
	return 0;
    891a:	4770      	bx	lr
		return -1;
    891c:	f04f 30ff 	mov.w	r0, #4294967295
}
    8920:	4770      	bx	lr

00008922 <nrf_gpio_cfg_output>:
{
    8922:	b507      	push	{r0, r1, r2, lr}
    8924:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8926:	a801      	add	r0, sp, #4
    8928:	f7fa fc02 	bl	3130 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    892c:	9b01      	ldr	r3, [sp, #4]
    892e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8932:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    8936:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    893a:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
    893e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    8942:	b003      	add	sp, #12
    8944:	f85d fb04 	ldr.w	pc, [sp], #4

00008948 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    8948:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    894c:	4605      	mov	r5, r0
    894e:	2101      	movs	r1, #1
    8950:	2200      	movs	r2, #0
    8952:	2008      	movs	r0, #8
    8954:	f7f9 fcbc 	bl	22d0 <z_arm_irq_priority_set>
    8958:	2008      	movs	r0, #8
    895a:	f7f9 fc9b 	bl	2294 <arch_irq_enable>
	return config->uarte_regs;
    895e:	686b      	ldr	r3, [r5, #4]
    8960:	f04f 0814 	mov.w	r8, #20
    8964:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    8966:	2300      	movs	r3, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
    8968:	692e      	ldr	r6, [r5, #16]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    896a:	2701      	movs	r7, #1
    896c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8970:	a801      	add	r0, sp, #4
	data->dev = dev;
    8972:	6035      	str	r5, [r6, #0]
        nrf_gpio_pin_set(pin_number);
    8974:	f8cd 8004 	str.w	r8, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8978:	f7fa fbda 	bl	3130 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    897c:	f04f 0916 	mov.w	r9, #22
    8980:	9b01      	ldr	r3, [sp, #4]
    8982:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
    8986:	6083      	str	r3, [r0, #8]
	nrf_gpio_cfg_output(config->pseltxd);
    8988:	4640      	mov	r0, r8
    898a:	f7ff ffca 	bl	8922 <nrf_gpio_cfg_output>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    898e:	a801      	add	r0, sp, #4
    8990:	f8cd 9004 	str.w	r9, [sp, #4]
    8994:	f7fa fbcc 	bl	3130 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    8998:	9b01      	ldr	r3, [sp, #4]
    899a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    899e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    89a2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    89a6:	f043 030c 	orr.w	r3, r3, #12
    reg->PIN_CNF[pin_number] = cnf;
    89aa:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->PSEL.TXD = pseltxd;
    89ae:	f8c4 850c 	str.w	r8, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    89b2:	f8c4 9514 	str.w	r9, [r4, #1300]	; 0x514
    nrf_gpio_cfg(
    89b6:	f04f 0915 	mov.w	r9, #21
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    89ba:	a801      	add	r0, sp, #4
    89bc:	f8cd 9004 	str.w	r9, [sp, #4]
    89c0:	f7fa fbb6 	bl	3130 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    89c4:	f04f 0813 	mov.w	r8, #19
    89c8:	9b01      	ldr	r3, [sp, #4]
    89ca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    89ce:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    89d2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    89d6:	f043 030c 	orr.w	r3, r3, #12
    reg->PIN_CNF[pin_number] = cnf;
    89da:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    89de:	a801      	add	r0, sp, #4
    89e0:	f8cd 8004 	str.w	r8, [sp, #4]
    89e4:	f7fa fba4 	bl	3130 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    89e8:	9b01      	ldr	r3, [sp, #4]
    89ea:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
    89ee:	6083      	str	r3, [r0, #8]
		nrf_gpio_cfg_output(config->pselrts);
    89f0:	4640      	mov	r0, r8
    89f2:	f7ff ff96 	bl	8922 <nrf_gpio_cfg_output>
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    89f6:	6929      	ldr	r1, [r5, #16]
    p_reg->PSEL.RTS = pselrts;
    89f8:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
    89fc:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
    89fe:	f8c4 9510 	str.w	r9, [r4, #1296]	; 0x510
    8a02:	3104      	adds	r1, #4
    8a04:	f7fa fad2 	bl	2fac <uarte_nrfx_configure>
	if (err) {
    8a08:	bb20      	cbnz	r0, 8a54 <uarte_0_init+0x10c>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    8a0a:	2308      	movs	r3, #8
    8a0c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8a10:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    8a14:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    8a18:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    8a1c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    8a20:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.MAXCNT = length;
    8a22:	f8c4 7538 	str.w	r7, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8a26:	6027      	str	r7, [r4, #0]
    8a28:	685b      	ldr	r3, [r3, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    8a2a:	3610      	adds	r6, #16
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    8a2c:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
    8a2e:	bf5c      	itt	pl
    8a30:	f44f 7280 	movpl.w	r2, #256	; 0x100
    8a34:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8a38:	06db      	lsls	r3, r3, #27
    8a3a:	bf44      	itt	mi
    8a3c:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    8a40:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    8a44:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8a46:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    8a4a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8a4e:	2301      	movs	r3, #1
    8a50:	60a3      	str	r3, [r4, #8]
    8a52:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    8a54:	b003      	add	sp, #12
    8a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00008a5a <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
    8a5a:	f7fc bea3 	b.w	57a4 <nrf_cc3xx_platform_init>

00008a5e <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    8a5e:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    8a60:	f7f9 fae6 	bl	2030 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    8a64:	f7f9 fbaa 	bl	21bc <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    8a68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
    8a6c:	f7fc be9a 	b.w	57a4 <nrf_cc3xx_platform_init>

00008a70 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    8a70:	4700      	bx	r0

00008a72 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    8a72:	f000 b860 	b.w	8b36 <z_impl_k_busy_wait>

00008a76 <z_device_state_init>:
}
    8a76:	4770      	bx	lr

00008a78 <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
    8a78:	68c3      	ldr	r3, [r0, #12]
    8a7a:	8818      	ldrh	r0, [r3, #0]
    8a7c:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
    8a80:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    8a84:	4258      	negs	r0, r3
    8a86:	4158      	adcs	r0, r3
    8a88:	4770      	bx	lr

00008a8a <k_mem_slab_init>:
{
    8a8a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    8a8c:	2400      	movs	r4, #0
    8a8e:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    8a90:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8a92:	ea41 0402 	orr.w	r4, r1, r2
    8a96:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    8a9a:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    8a9e:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8aa0:	d10c      	bne.n	8abc <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    8aa2:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    8aa4:	42a3      	cmp	r3, r4
    8aa6:	d103      	bne.n	8ab0 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    8aa8:	e9c0 0000 	strd	r0, r0, [r0]
}
    8aac:	2000      	movs	r0, #0
}
    8aae:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    8ab0:	6985      	ldr	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    8ab2:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    8ab4:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    8ab6:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    8ab8:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    8aba:	e7f3      	b.n	8aa4 <k_mem_slab_init+0x1a>
		return -EINVAL;
    8abc:	f06f 0015 	mvn.w	r0, #21
	return rc;
    8ac0:	e7f5      	b.n	8aae <k_mem_slab_init+0x24>

00008ac2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8ac2:	f3ef 8005 	mrs	r0, IPSR
}
    8ac6:	3800      	subs	r0, #0
    8ac8:	bf18      	it	ne
    8aca:	2001      	movne	r0, #1
    8acc:	4770      	bx	lr

00008ace <k_thread_name_get>:
}
    8ace:	2000      	movs	r0, #0
    8ad0:	4770      	bx	lr

00008ad2 <z_pm_save_idle_exit>:
{
    8ad2:	b508      	push	{r3, lr}
	pm_system_resume();
    8ad4:	f7f8 fcac 	bl	1430 <pm_system_resume>
}
    8ad8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    8adc:	f7ff bdcc 	b.w	8678 <sys_clock_idle_exit>

00008ae0 <z_impl_k_mutex_init>:
{
    8ae0:	4603      	mov	r3, r0
	mutex->owner = NULL;
    8ae2:	2000      	movs	r0, #0
    8ae4:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    8ae8:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    8aec:	4770      	bx	lr

00008aee <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8aee:	4603      	mov	r3, r0
    8af0:	b920      	cbnz	r0, 8afc <z_reschedule_irqlock+0xe>
    8af2:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    8af6:	b90a      	cbnz	r2, 8afc <z_reschedule_irqlock+0xe>
    8af8:	f7f9 bb76 	b.w	21e8 <arch_swap>
    8afc:	f383 8811 	msr	BASEPRI, r3
    8b00:	f3bf 8f6f 	isb	sy
}
    8b04:	4770      	bx	lr

00008b06 <z_reschedule_unlocked>:
	__asm__ volatile(
    8b06:	f04f 0320 	mov.w	r3, #32
    8b0a:	f3ef 8011 	mrs	r0, BASEPRI
    8b0e:	f383 8811 	msr	BASEPRI, r3
    8b12:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8b16:	f7ff bfea 	b.w	8aee <z_reschedule_irqlock>

00008b1a <z_priq_dumb_best>:
{
    8b1a:	4603      	mov	r3, r0
	return list->head == list;
    8b1c:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8b1e:	4283      	cmp	r3, r0
    8b20:	d003      	beq.n	8b2a <z_priq_dumb_best+0x10>
	if (n != NULL) {
    8b22:	2800      	cmp	r0, #0
    8b24:	bf38      	it	cc
    8b26:	2000      	movcc	r0, #0
    8b28:	4770      	bx	lr
	struct k_thread *thread = NULL;
    8b2a:	2000      	movs	r0, #0
}
    8b2c:	4770      	bx	lr

00008b2e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    8b2e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    8b30:	f7fc fdee 	bl	5710 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    8b34:	bd08      	pop	{r3, pc}

00008b36 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8b36:	b108      	cbz	r0, 8b3c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    8b38:	f7f8 bc0c 	b.w	1354 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    8b3c:	4770      	bx	lr

00008b3e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8b3e:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0000a3e0 <spm_firmware_info_nse-0x1c00>:
	...

0000bfe0 <spm_firmware_info_nse>:
    bfe0:	e97f e97f 	sg
    bfe4:	f7f5 bfe0 	b.w	1fa8 <__acle_se_spm_firmware_info_nse>

0000bfe8 <spm_request_random_number_nse>:
    bfe8:	e97f e97f 	sg
    bfec:	f7f5 bfb8 	b.w	1f60 <__acle_se_spm_request_random_number_nse>

0000bff0 <spm_request_read_nse>:
    bff0:	e97f e97f 	sg
    bff4:	f7f5 bf7e 	b.w	1ef4 <__acle_se_spm_request_read_nse>
	...
