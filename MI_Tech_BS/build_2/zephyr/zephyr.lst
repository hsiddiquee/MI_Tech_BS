
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010000 <_vector_start>:
   10000:	2000c620 	.word	0x2000c620
   10004:	000163a9 	.word	0x000163a9
   10008:	000283a1 	.word	0x000283a1
   1000c:	000163d9 	.word	0x000163d9
   10010:	000163d9 	.word	0x000163d9
   10014:	000163d9 	.word	0x000163d9
   10018:	000163d9 	.word	0x000163d9
   1001c:	000163d9 	.word	0x000163d9
	...
   1002c:	00016151 	.word	0x00016151
   10030:	000163d9 	.word	0x000163d9
   10034:	00000000 	.word	0x00000000
   10038:	000160f9 	.word	0x000160f9
   1003c:	00014e5d 	.word	0x00014e5d

00010040 <_irq_vector_table>:
   10040:	00016369 00016369 00016369 00016369     ic..ic..ic..ic..
   10050:	00016369 00016369 00016369 00016369     ic..ic..ic..ic..
   10060:	00016369 00016369 00016369 00016369     ic..ic..ic..ic..
   10070:	00016369 00016369 00016369 00016369     ic..ic..ic..ic..
   10080:	00016369 00016369 00016369 00016369     ic..ic..ic..ic..
   10090:	00016369 00016369 00016369 00016369     ic..ic..ic..ic..
   100a0:	00016369 00016369 00016369 00016369     ic..ic..ic..ic..
   100b0:	00016369 00016369 00016369 00016369     ic..ic..ic..ic..
   100c0:	00016369 00016369 00016369 00016369     ic..ic..ic..ic..
   100d0:	00016369 00016369 00016369 00016369     ic..ic..ic..ic..
   100e0:	00016369 00016369 00016369 00016369     ic..ic..ic..ic..
   100f0:	00016369 00016369 00016369 00016369     ic..ic..ic..ic..
   10100:	00016369 00016369 00016369 00016369     ic..ic..ic..ic..
   10110:	00016369 00016369 00016369 00016369     ic..ic..ic..ic..
   10120:	00016369 00016369 00016369 00016369     ic..ic..ic..ic..
   10130:	00016369 00016369 00016369 00016369     ic..ic..ic..ic..
   10140:	00016369 00016369 00016369 00016369     ic..ic..ic..ic..
   10150:	00016369                                ic..

00010154 <_vector_end>:
	...

00010200 <m_firmware_info>:
   10200:	281ee6de 8fcebb4c 00003502 0000003c     ...(L....5..<...
   10210:	00022038 00000001 00010000 00010000     8 ..............
   10220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

00010240 <__aeabi_uldivmod>:
   10240:	b953      	cbnz	r3, 10258 <__aeabi_uldivmod+0x18>
   10242:	b94a      	cbnz	r2, 10258 <__aeabi_uldivmod+0x18>
   10244:	2900      	cmp	r1, #0
   10246:	bf08      	it	eq
   10248:	2800      	cmpeq	r0, #0
   1024a:	bf1c      	itt	ne
   1024c:	f04f 31ff 	movne.w	r1, #4294967295
   10250:	f04f 30ff 	movne.w	r0, #4294967295
   10254:	f000 b970 	b.w	10538 <__aeabi_idiv0>
   10258:	f1ad 0c08 	sub.w	ip, sp, #8
   1025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   10260:	f000 f806 	bl	10270 <__udivmoddi4>
   10264:	f8dd e004 	ldr.w	lr, [sp, #4]
   10268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1026c:	b004      	add	sp, #16
   1026e:	4770      	bx	lr

00010270 <__udivmoddi4>:
   10270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10274:	9e08      	ldr	r6, [sp, #32]
   10276:	460d      	mov	r5, r1
   10278:	4604      	mov	r4, r0
   1027a:	468a      	mov	sl, r1
   1027c:	2b00      	cmp	r3, #0
   1027e:	d17f      	bne.n	10380 <__udivmoddi4+0x110>
   10280:	428a      	cmp	r2, r1
   10282:	4617      	mov	r7, r2
   10284:	d941      	bls.n	1030a <__udivmoddi4+0x9a>
   10286:	fab2 f282 	clz	r2, r2
   1028a:	b14a      	cbz	r2, 102a0 <__udivmoddi4+0x30>
   1028c:	f1c2 0120 	rsb	r1, r2, #32
   10290:	fa05 f302 	lsl.w	r3, r5, r2
   10294:	4097      	lsls	r7, r2
   10296:	4094      	lsls	r4, r2
   10298:	fa20 f101 	lsr.w	r1, r0, r1
   1029c:	ea41 0a03 	orr.w	sl, r1, r3
   102a0:	ea4f 4817 	mov.w	r8, r7, lsr #16
   102a4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   102a8:	fa1f f987 	uxth.w	r9, r7
   102ac:	fbba fef8 	udiv	lr, sl, r8
   102b0:	fb08 a31e 	mls	r3, r8, lr, sl
   102b4:	fb0e f109 	mul.w	r1, lr, r9
   102b8:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   102bc:	4299      	cmp	r1, r3
   102be:	d906      	bls.n	102ce <__udivmoddi4+0x5e>
   102c0:	18fb      	adds	r3, r7, r3
   102c2:	d202      	bcs.n	102ca <__udivmoddi4+0x5a>
   102c4:	4299      	cmp	r1, r3
   102c6:	f200 8124 	bhi.w	10512 <__udivmoddi4+0x2a2>
   102ca:	f10e 3eff 	add.w	lr, lr, #4294967295
   102ce:	1a59      	subs	r1, r3, r1
   102d0:	b2a3      	uxth	r3, r4
   102d2:	fbb1 f0f8 	udiv	r0, r1, r8
   102d6:	fb08 1110 	mls	r1, r8, r0, r1
   102da:	fb00 f909 	mul.w	r9, r0, r9
   102de:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   102e2:	45a1      	cmp	r9, r4
   102e4:	d905      	bls.n	102f2 <__udivmoddi4+0x82>
   102e6:	193c      	adds	r4, r7, r4
   102e8:	d202      	bcs.n	102f0 <__udivmoddi4+0x80>
   102ea:	45a1      	cmp	r9, r4
   102ec:	f200 810e 	bhi.w	1050c <__udivmoddi4+0x29c>
   102f0:	3801      	subs	r0, #1
   102f2:	eba4 0409 	sub.w	r4, r4, r9
   102f6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
   102fa:	2100      	movs	r1, #0
   102fc:	b11e      	cbz	r6, 10306 <__udivmoddi4+0x96>
   102fe:	40d4      	lsrs	r4, r2
   10300:	2300      	movs	r3, #0
   10302:	e9c6 4300 	strd	r4, r3, [r6]
   10306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1030a:	b902      	cbnz	r2, 1030e <__udivmoddi4+0x9e>
   1030c:	deff      	udf	#255	; 0xff
   1030e:	fab2 f282 	clz	r2, r2
   10312:	2a00      	cmp	r2, #0
   10314:	d14f      	bne.n	103b6 <__udivmoddi4+0x146>
   10316:	1bcb      	subs	r3, r1, r7
   10318:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1031c:	fa1f f887 	uxth.w	r8, r7
   10320:	2101      	movs	r1, #1
   10322:	0c25      	lsrs	r5, r4, #16
   10324:	fbb3 fcfe 	udiv	ip, r3, lr
   10328:	fb0e 301c 	mls	r0, lr, ip, r3
   1032c:	462b      	mov	r3, r5
   1032e:	fb08 f90c 	mul.w	r9, r8, ip
   10332:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   10336:	45a9      	cmp	r9, r5
   10338:	d90a      	bls.n	10350 <__udivmoddi4+0xe0>
   1033a:	197d      	adds	r5, r7, r5
   1033c:	bf2c      	ite	cs
   1033e:	2301      	movcs	r3, #1
   10340:	2300      	movcc	r3, #0
   10342:	45a9      	cmp	r9, r5
   10344:	d902      	bls.n	1034c <__udivmoddi4+0xdc>
   10346:	2b00      	cmp	r3, #0
   10348:	f000 80d9 	beq.w	104fe <__udivmoddi4+0x28e>
   1034c:	f10c 3cff 	add.w	ip, ip, #4294967295
   10350:	eba5 0509 	sub.w	r5, r5, r9
   10354:	b2a3      	uxth	r3, r4
   10356:	fbb5 f0fe 	udiv	r0, r5, lr
   1035a:	fb0e 5510 	mls	r5, lr, r0, r5
   1035e:	fb08 f800 	mul.w	r8, r8, r0
   10362:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   10366:	45a0      	cmp	r8, r4
   10368:	d905      	bls.n	10376 <__udivmoddi4+0x106>
   1036a:	193c      	adds	r4, r7, r4
   1036c:	d202      	bcs.n	10374 <__udivmoddi4+0x104>
   1036e:	45a0      	cmp	r8, r4
   10370:	f200 80c9 	bhi.w	10506 <__udivmoddi4+0x296>
   10374:	3801      	subs	r0, #1
   10376:	eba4 0408 	sub.w	r4, r4, r8
   1037a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1037e:	e7bd      	b.n	102fc <__udivmoddi4+0x8c>
   10380:	428b      	cmp	r3, r1
   10382:	d908      	bls.n	10396 <__udivmoddi4+0x126>
   10384:	2e00      	cmp	r6, #0
   10386:	f000 80b1 	beq.w	104ec <__udivmoddi4+0x27c>
   1038a:	2100      	movs	r1, #0
   1038c:	e9c6 0500 	strd	r0, r5, [r6]
   10390:	4608      	mov	r0, r1
   10392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10396:	fab3 f183 	clz	r1, r3
   1039a:	2900      	cmp	r1, #0
   1039c:	d146      	bne.n	1042c <__udivmoddi4+0x1bc>
   1039e:	42ab      	cmp	r3, r5
   103a0:	f0c0 80a7 	bcc.w	104f2 <__udivmoddi4+0x282>
   103a4:	4282      	cmp	r2, r0
   103a6:	f240 80a4 	bls.w	104f2 <__udivmoddi4+0x282>
   103aa:	4608      	mov	r0, r1
   103ac:	2e00      	cmp	r6, #0
   103ae:	d0aa      	beq.n	10306 <__udivmoddi4+0x96>
   103b0:	e9c6 4a00 	strd	r4, sl, [r6]
   103b4:	e7a7      	b.n	10306 <__udivmoddi4+0x96>
   103b6:	f1c2 0020 	rsb	r0, r2, #32
   103ba:	4097      	lsls	r7, r2
   103bc:	fa01 f302 	lsl.w	r3, r1, r2
   103c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   103c4:	40c1      	lsrs	r1, r0
   103c6:	fa24 f500 	lsr.w	r5, r4, r0
   103ca:	fa1f f887 	uxth.w	r8, r7
   103ce:	4094      	lsls	r4, r2
   103d0:	431d      	orrs	r5, r3
   103d2:	fbb1 f0fe 	udiv	r0, r1, lr
   103d6:	0c2b      	lsrs	r3, r5, #16
   103d8:	fb0e 1110 	mls	r1, lr, r0, r1
   103dc:	fb00 fc08 	mul.w	ip, r0, r8
   103e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   103e4:	459c      	cmp	ip, r3
   103e6:	d909      	bls.n	103fc <__udivmoddi4+0x18c>
   103e8:	18fb      	adds	r3, r7, r3
   103ea:	bf2c      	ite	cs
   103ec:	2101      	movcs	r1, #1
   103ee:	2100      	movcc	r1, #0
   103f0:	459c      	cmp	ip, r3
   103f2:	d902      	bls.n	103fa <__udivmoddi4+0x18a>
   103f4:	2900      	cmp	r1, #0
   103f6:	f000 8095 	beq.w	10524 <__udivmoddi4+0x2b4>
   103fa:	3801      	subs	r0, #1
   103fc:	eba3 030c 	sub.w	r3, r3, ip
   10400:	b2ad      	uxth	r5, r5
   10402:	fbb3 f1fe 	udiv	r1, r3, lr
   10406:	fb0e 3311 	mls	r3, lr, r1, r3
   1040a:	fb01 fc08 	mul.w	ip, r1, r8
   1040e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   10412:	45ac      	cmp	ip, r5
   10414:	d905      	bls.n	10422 <__udivmoddi4+0x1b2>
   10416:	197d      	adds	r5, r7, r5
   10418:	d202      	bcs.n	10420 <__udivmoddi4+0x1b0>
   1041a:	45ac      	cmp	ip, r5
   1041c:	f200 8089 	bhi.w	10532 <__udivmoddi4+0x2c2>
   10420:	3901      	subs	r1, #1
   10422:	eba5 030c 	sub.w	r3, r5, ip
   10426:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1042a:	e77a      	b.n	10322 <__udivmoddi4+0xb2>
   1042c:	f1c1 0420 	rsb	r4, r1, #32
   10430:	408b      	lsls	r3, r1
   10432:	fa02 f701 	lsl.w	r7, r2, r1
   10436:	fa05 fc01 	lsl.w	ip, r5, r1
   1043a:	40e2      	lsrs	r2, r4
   1043c:	fa20 f804 	lsr.w	r8, r0, r4
   10440:	40e5      	lsrs	r5, r4
   10442:	fa00 fe01 	lsl.w	lr, r0, r1
   10446:	4313      	orrs	r3, r2
   10448:	ea48 020c 	orr.w	r2, r8, ip
   1044c:	ea4f 4813 	mov.w	r8, r3, lsr #16
   10450:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   10454:	fa1f f983 	uxth.w	r9, r3
   10458:	fbb5 faf8 	udiv	sl, r5, r8
   1045c:	fb08 551a 	mls	r5, r8, sl, r5
   10460:	fb0a f009 	mul.w	r0, sl, r9
   10464:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
   10468:	4560      	cmp	r0, ip
   1046a:	d90a      	bls.n	10482 <__udivmoddi4+0x212>
   1046c:	eb13 0c0c 	adds.w	ip, r3, ip
   10470:	bf2c      	ite	cs
   10472:	2501      	movcs	r5, #1
   10474:	2500      	movcc	r5, #0
   10476:	4560      	cmp	r0, ip
   10478:	d901      	bls.n	1047e <__udivmoddi4+0x20e>
   1047a:	2d00      	cmp	r5, #0
   1047c:	d055      	beq.n	1052a <__udivmoddi4+0x2ba>
   1047e:	f10a 3aff 	add.w	sl, sl, #4294967295
   10482:	ebac 0c00 	sub.w	ip, ip, r0
   10486:	b292      	uxth	r2, r2
   10488:	fbbc f0f8 	udiv	r0, ip, r8
   1048c:	fb08 cc10 	mls	ip, r8, r0, ip
   10490:	fb00 f909 	mul.w	r9, r0, r9
   10494:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
   10498:	45e1      	cmp	r9, ip
   1049a:	d905      	bls.n	104a8 <__udivmoddi4+0x238>
   1049c:	eb13 0c0c 	adds.w	ip, r3, ip
   104a0:	d201      	bcs.n	104a6 <__udivmoddi4+0x236>
   104a2:	45e1      	cmp	r9, ip
   104a4:	d83b      	bhi.n	1051e <__udivmoddi4+0x2ae>
   104a6:	3801      	subs	r0, #1
   104a8:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   104ac:	ebac 0c09 	sub.w	ip, ip, r9
   104b0:	fba0 8907 	umull	r8, r9, r0, r7
   104b4:	45cc      	cmp	ip, r9
   104b6:	4645      	mov	r5, r8
   104b8:	464a      	mov	r2, r9
   104ba:	d302      	bcc.n	104c2 <__udivmoddi4+0x252>
   104bc:	d106      	bne.n	104cc <__udivmoddi4+0x25c>
   104be:	45c6      	cmp	lr, r8
   104c0:	d204      	bcs.n	104cc <__udivmoddi4+0x25c>
   104c2:	3801      	subs	r0, #1
   104c4:	ebb8 0507 	subs.w	r5, r8, r7
   104c8:	eb69 0203 	sbc.w	r2, r9, r3
   104cc:	b32e      	cbz	r6, 1051a <__udivmoddi4+0x2aa>
   104ce:	ebbe 0305 	subs.w	r3, lr, r5
   104d2:	eb6c 0c02 	sbc.w	ip, ip, r2
   104d6:	fa23 f201 	lsr.w	r2, r3, r1
   104da:	fa0c f404 	lsl.w	r4, ip, r4
   104de:	fa2c f301 	lsr.w	r3, ip, r1
   104e2:	2100      	movs	r1, #0
   104e4:	4314      	orrs	r4, r2
   104e6:	e9c6 4300 	strd	r4, r3, [r6]
   104ea:	e70c      	b.n	10306 <__udivmoddi4+0x96>
   104ec:	4631      	mov	r1, r6
   104ee:	4630      	mov	r0, r6
   104f0:	e709      	b.n	10306 <__udivmoddi4+0x96>
   104f2:	1a84      	subs	r4, r0, r2
   104f4:	eb65 0303 	sbc.w	r3, r5, r3
   104f8:	2001      	movs	r0, #1
   104fa:	469a      	mov	sl, r3
   104fc:	e756      	b.n	103ac <__udivmoddi4+0x13c>
   104fe:	f1ac 0c02 	sub.w	ip, ip, #2
   10502:	443d      	add	r5, r7
   10504:	e724      	b.n	10350 <__udivmoddi4+0xe0>
   10506:	3802      	subs	r0, #2
   10508:	443c      	add	r4, r7
   1050a:	e734      	b.n	10376 <__udivmoddi4+0x106>
   1050c:	3802      	subs	r0, #2
   1050e:	443c      	add	r4, r7
   10510:	e6ef      	b.n	102f2 <__udivmoddi4+0x82>
   10512:	f1ae 0e02 	sub.w	lr, lr, #2
   10516:	443b      	add	r3, r7
   10518:	e6d9      	b.n	102ce <__udivmoddi4+0x5e>
   1051a:	4631      	mov	r1, r6
   1051c:	e6f3      	b.n	10306 <__udivmoddi4+0x96>
   1051e:	3802      	subs	r0, #2
   10520:	449c      	add	ip, r3
   10522:	e7c1      	b.n	104a8 <__udivmoddi4+0x238>
   10524:	3802      	subs	r0, #2
   10526:	443b      	add	r3, r7
   10528:	e768      	b.n	103fc <__udivmoddi4+0x18c>
   1052a:	f1aa 0a02 	sub.w	sl, sl, #2
   1052e:	449c      	add	ip, r3
   10530:	e7a7      	b.n	10482 <__udivmoddi4+0x212>
   10532:	3902      	subs	r1, #2
   10534:	443d      	add	r5, r7
   10536:	e774      	b.n	10422 <__udivmoddi4+0x1b2>

00010538 <__aeabi_idiv0>:
   10538:	4770      	bx	lr
   1053a:	bf00      	nop
   1053c:	0000      	movs	r0, r0
	...

00010540 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   10540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   10542:	4d66      	ldr	r5, [pc, #408]	; (106dc <bt_init+0x19c>)
   10544:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   10548:	6899      	ldr	r1, [r3, #8]
   1054a:	f011 0101 	ands.w	r1, r1, #1
   1054e:	d11d      	bne.n	1058c <bt_init+0x4c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   10550:	f640 4003 	movw	r0, #3075	; 0xc03
   10554:	aa01      	add	r2, sp, #4
   10556:	f007 fa59 	bl	17a0c <bt_hci_cmd_send_sync>
		if (err) {
   1055a:	4604      	mov	r4, r0
   1055c:	2800      	cmp	r0, #0
   1055e:	f040 80b9 	bne.w	106d4 <bt_init+0x194>
		hci_reset_complete(rsp);
   10562:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
   10564:	689b      	ldr	r3, [r3, #8]
	if (status) {
   10566:	781b      	ldrb	r3, [r3, #0]
   10568:	b96b      	cbnz	r3, 10586 <bt_init+0x46>
		bt_scan_reset();
   1056a:	f008 fce5 	bl	18f38 <bt_scan_reset>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1056e:	f105 0398 	add.w	r3, r5, #152	; 0x98
   10572:	e8d3 2faf 	lda	r2, [r3]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   10576:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1057a:	e8d3 1fef 	ldaex	r1, [r3]
   1057e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   10582:	2800      	cmp	r0, #0
   10584:	d1f9      	bne.n	1057a <bt_init+0x3a>
		net_buf_unref(rsp);
   10586:	9801      	ldr	r0, [sp, #4]
   10588:	f00f fd8e 	bl	200a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   1058c:	2100      	movs	r1, #0
   1058e:	f241 0003 	movw	r0, #4099	; 0x1003
   10592:	aa01      	add	r2, sp, #4
   10594:	f007 fa3a 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
   10598:	4604      	mov	r4, r0
   1059a:	2800      	cmp	r0, #0
   1059c:	f040 809a 	bne.w	106d4 <bt_init+0x194>
	read_local_features_complete(rsp);
   105a0:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   105a2:	2208      	movs	r2, #8
   105a4:	6899      	ldr	r1, [r3, #8]
   105a6:	484e      	ldr	r0, [pc, #312]	; (106e0 <bt_init+0x1a0>)
   105a8:	3101      	adds	r1, #1
   105aa:	f017 fff2 	bl	28592 <memcpy>
	net_buf_unref(rsp);
   105ae:	9801      	ldr	r0, [sp, #4]
   105b0:	f00f fd7a 	bl	200a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   105b4:	4621      	mov	r1, r4
   105b6:	f241 0001 	movw	r0, #4097	; 0x1001
   105ba:	aa01      	add	r2, sp, #4
   105bc:	f007 fa26 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
   105c0:	4604      	mov	r4, r0
   105c2:	2800      	cmp	r0, #0
   105c4:	f040 8086 	bne.w	106d4 <bt_init+0x194>
	read_local_ver_complete(rsp);
   105c8:	9801      	ldr	r0, [sp, #4]
   105ca:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   105cc:	785a      	ldrb	r2, [r3, #1]
   105ce:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   105d2:	78d9      	ldrb	r1, [r3, #3]
   105d4:	789a      	ldrb	r2, [r3, #2]
   105d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   105da:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
   105dc:	791a      	ldrb	r2, [r3, #4]
   105de:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   105e2:	7a19      	ldrb	r1, [r3, #8]
   105e4:	79da      	ldrb	r2, [r3, #7]
   105e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   105ea:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   105ec:	795a      	ldrb	r2, [r3, #5]
   105ee:	799b      	ldrb	r3, [r3, #6]
   105f0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   105f4:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
   105f6:	f00f fd57 	bl	200a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   105fa:	4621      	mov	r1, r4
   105fc:	f241 0002 	movw	r0, #4098	; 0x1002
   10600:	aa01      	add	r2, sp, #4
   10602:	f007 fa03 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
   10606:	4604      	mov	r4, r0
   10608:	2800      	cmp	r0, #0
   1060a:	d163      	bne.n	106d4 <bt_init+0x194>
	read_supported_commands_complete(rsp);
   1060c:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   1060e:	2240      	movs	r2, #64	; 0x40
   10610:	6899      	ldr	r1, [r3, #8]
   10612:	4834      	ldr	r0, [pc, #208]	; (106e4 <bt_init+0x1a4>)
   10614:	3101      	adds	r1, #1
   10616:	f017 ffbc 	bl	28592 <memcpy>
	net_buf_unref(rsp);
   1061a:	9801      	ldr	r0, [sp, #4]
   1061c:	f00f fd44 	bl	200a8 <net_buf_unref>
		err = prng_init();
   10620:	f008 ff1e 	bl	19460 <prng_init>
		if (err) {
   10624:	4604      	mov	r4, r0
   10626:	2800      	cmp	r0, #0
   10628:	d154      	bne.n	106d4 <bt_init+0x194>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   1062a:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
   1062e:	069a      	lsls	r2, r3, #26
   10630:	d41a      	bmi.n	10668 <bt_init+0x128>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   10632:	492d      	ldr	r1, [pc, #180]	; (106e8 <bt_init+0x1a8>)
   10634:	4b2d      	ldr	r3, [pc, #180]	; (106ec <bt_init+0x1ac>)
		BT_WARN("Controller to host flow control not supported");
   10636:	482e      	ldr	r0, [pc, #184]	; (106f0 <bt_init+0x1b0>)
   10638:	1ac9      	subs	r1, r1, r3
   1063a:	08c9      	lsrs	r1, r1, #3
   1063c:	0189      	lsls	r1, r1, #6
   1063e:	f041 0102 	orr.w	r1, r1, #2
   10642:	f016 fb75 	bl	26d30 <log_0>
	if (!BT_FEAT_LE(bt_dev.features)) {
   10646:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   1064a:	065b      	lsls	r3, r3, #25
   1064c:	d454      	bmi.n	106f8 <bt_init+0x1b8>
   1064e:	4b27      	ldr	r3, [pc, #156]	; (106ec <bt_init+0x1ac>)
   10650:	4925      	ldr	r1, [pc, #148]	; (106e8 <bt_init+0x1a8>)
		BT_ERR("Non-LE capable controller detected!");
   10652:	4828      	ldr	r0, [pc, #160]	; (106f4 <bt_init+0x1b4>)
   10654:	1ac9      	subs	r1, r1, r3
   10656:	08c9      	lsrs	r1, r1, #3
   10658:	0189      	lsls	r1, r1, #6
   1065a:	f041 0101 	orr.w	r1, r1, #1
   1065e:	f016 fb67 	bl	26d30 <log_0>
		return -ENODEV;
   10662:	f06f 0412 	mvn.w	r4, #18
   10666:	e035      	b.n	106d4 <bt_init+0x194>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
   10668:	2107      	movs	r1, #7
   1066a:	f640 4033 	movw	r0, #3123	; 0xc33
   1066e:	f007 f985 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   10672:	4607      	mov	r7, r0
   10674:	b910      	cbnz	r0, 1067c <bt_init+0x13c>
		return -ENOBUFS;
   10676:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1067a:	e02b      	b.n	106d4 <bt_init+0x194>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   1067c:	2107      	movs	r1, #7
   1067e:	3008      	adds	r0, #8
   10680:	f00f fe42 	bl	20308 <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
   10684:	4621      	mov	r1, r4
   10686:	2207      	movs	r2, #7
   10688:	4606      	mov	r6, r0
   1068a:	f017 ffad 	bl	285e8 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
   1068e:	2345      	movs	r3, #69	; 0x45
   10690:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
   10692:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   10694:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
   10696:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
   10698:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   1069a:	4639      	mov	r1, r7
   1069c:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
   106a0:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   106a2:	f007 f9b3 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
   106a6:	4604      	mov	r4, r0
   106a8:	b9a0      	cbnz	r0, 106d4 <bt_init+0x194>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
   106aa:	2101      	movs	r1, #1
   106ac:	f640 4031 	movw	r0, #3121	; 0xc31
   106b0:	f007 f964 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   106b4:	4606      	mov	r6, r0
   106b6:	2800      	cmp	r0, #0
   106b8:	d0dd      	beq.n	10676 <bt_init+0x136>
 *
 * @return Pointer to the value added
 */
static inline uint8_t *net_buf_add_u8(struct net_buf *buf, uint8_t val)
{
	return net_buf_simple_add_u8(&buf->b, val);
   106ba:	2101      	movs	r1, #1
   106bc:	3008      	adds	r0, #8
   106be:	f019 ffe2 	bl	2a686 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
   106c2:	4622      	mov	r2, r4
   106c4:	4631      	mov	r1, r6
   106c6:	f640 4031 	movw	r0, #3121	; 0xc31
   106ca:	f007 f99f 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
   106ce:	4604      	mov	r4, r0
   106d0:	2800      	cmp	r0, #0
   106d2:	d0b8      	beq.n	10646 <bt_init+0x106>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   106d4:	4620      	mov	r0, r4
   106d6:	b003      	add	sp, #12
   106d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   106da:	bf00      	nop
   106dc:	20008000 	.word	0x20008000
   106e0:	2000803c 	.word	0x2000803c
   106e4:	20008044 	.word	0x20008044
   106e8:	0002c01c 	.word	0x0002c01c
   106ec:	0002bfe4 	.word	0x0002bfe4
   106f0:	0002f0bf 	.word	0x0002f0bf
   106f4:	0002f0ed 	.word	0x0002f0ed
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   106f8:	2100      	movs	r1, #0
   106fa:	f242 0003 	movw	r0, #8195	; 0x2003
   106fe:	aa01      	add	r2, sp, #4
   10700:	f007 f984 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
   10704:	4604      	mov	r4, r0
   10706:	2800      	cmp	r0, #0
   10708:	d1e4      	bne.n	106d4 <bt_init+0x194>
	read_le_features_complete(rsp);
   1070a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1070c:	2208      	movs	r2, #8
   1070e:	6899      	ldr	r1, [r3, #8]
   10710:	48c5      	ldr	r0, [pc, #788]	; (10a28 <bt_init+0x4e8>)
   10712:	3101      	adds	r1, #1
   10714:	f017 ff3d 	bl	28592 <memcpy>
	net_buf_unref(rsp);
   10718:	9801      	ldr	r0, [sp, #4]
   1071a:	f00f fcc5 	bl	200a8 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1071e:	4621      	mov	r1, r4
   10720:	f242 0002 	movw	r0, #8194	; 0x2002
   10724:	aa01      	add	r2, sp, #4
   10726:	f007 f971 	bl	17a0c <bt_hci_cmd_send_sync>
		if (err) {
   1072a:	4604      	mov	r4, r0
   1072c:	2800      	cmp	r0, #0
   1072e:	d1d1      	bne.n	106d4 <bt_init+0x194>
		le_read_buffer_size_complete(rsp);
   10730:	9b01      	ldr	r3, [sp, #4]
   10732:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   10734:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   10738:	b291      	uxth	r1, r2
   1073a:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	if (!bt_dev.le.acl_mtu) {
   1073e:	b121      	cbz	r1, 1074a <bt_init+0x20a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   10740:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   10742:	48ba      	ldr	r0, [pc, #744]	; (10a2c <bt_init+0x4ec>)
   10744:	4611      	mov	r1, r2
   10746:	f01b f94e 	bl	2b9e6 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   1074a:	9801      	ldr	r0, [sp, #4]
   1074c:	f00f fcac 	bl	200a8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10750:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
   10754:	f016 0620 	ands.w	r6, r6, #32
   10758:	f000 8106 	beq.w	10968 <bt_init+0x428>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   1075c:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   10760:	071f      	lsls	r7, r3, #28
   10762:	d511      	bpl.n	10788 <bt_init+0x248>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   10764:	2100      	movs	r1, #0
   10766:	f242 001c 	movw	r0, #8220	; 0x201c
   1076a:	aa01      	add	r2, sp, #4
   1076c:	f007 f94e 	bl	17a0c <bt_hci_cmd_send_sync>
		if (err) {
   10770:	4604      	mov	r4, r0
   10772:	2800      	cmp	r0, #0
   10774:	d1ae      	bne.n	106d4 <bt_init+0x194>
		le_read_supp_states_complete(rsp);
   10776:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   10778:	6883      	ldr	r3, [r0, #8]
   1077a:	f853 2f01 	ldr.w	r2, [r3, #1]!
   1077e:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   10780:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
   10784:	f00f fc90 	bl	200a8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   10788:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   1078c:	069e      	lsls	r6, r3, #26
   1078e:	d524      	bpl.n	107da <bt_init+0x29a>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   10790:	4668      	mov	r0, sp
   10792:	f10d 0102 	add.w	r1, sp, #2
   10796:	f007 f9b1 	bl	17afc <hci_le_read_max_data_len>
		if (err) {
   1079a:	4604      	mov	r4, r0
   1079c:	2800      	cmp	r0, #0
   1079e:	d199      	bne.n	106d4 <bt_init+0x194>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   107a0:	2104      	movs	r1, #4
   107a2:	f242 0024 	movw	r0, #8228	; 0x2024
   107a6:	f007 f8e9 	bl	1797c <bt_hci_cmd_create>
		if (!buf) {
   107aa:	4606      	mov	r6, r0
   107ac:	2800      	cmp	r0, #0
   107ae:	f43f af62 	beq.w	10676 <bt_init+0x136>
	return net_buf_simple_add(&buf->b, len);
   107b2:	2104      	movs	r1, #4
   107b4:	3008      	adds	r0, #8
   107b6:	f00f fda7 	bl	20308 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   107ba:	f8bd 3000 	ldrh.w	r3, [sp]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   107be:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   107c0:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   107c2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   107c6:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   107c8:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   107ca:	f242 0024 	movw	r0, #8228	; 0x2024
   107ce:	f007 f91d 	bl	17a0c <bt_hci_cmd_send_sync>
		if (err) {
   107d2:	4604      	mov	r4, r0
   107d4:	2800      	cmp	r0, #0
   107d6:	f47f af7d 	bne.w	106d4 <bt_init+0x194>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   107da:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   107de:	065c      	lsls	r4, r3, #25
   107e0:	d510      	bpl.n	10804 <bt_init+0x2c4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   107e2:	2100      	movs	r1, #0
   107e4:	f242 002a 	movw	r0, #8234	; 0x202a
   107e8:	aa01      	add	r2, sp, #4
   107ea:	f007 f90f 	bl	17a0c <bt_hci_cmd_send_sync>
		if (err) {
   107ee:	4604      	mov	r4, r0
   107f0:	2800      	cmp	r0, #0
   107f2:	f47f af6f 	bne.w	106d4 <bt_init+0x194>
		le_read_resolving_list_size_complete(rsp);
   107f6:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
   107f8:	6883      	ldr	r3, [r0, #8]
   107fa:	785b      	ldrb	r3, [r3, #1]
   107fc:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
		net_buf_unref(rsp);
   10800:	f00f fc52 	bl	200a8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   10804:	2108      	movs	r1, #8
   10806:	f242 0001 	movw	r0, #8193	; 0x2001
   1080a:	f007 f8b7 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   1080e:	4604      	mov	r4, r0
   10810:	2800      	cmp	r0, #0
   10812:	f43f af30 	beq.w	10676 <bt_init+0x136>
   10816:	2108      	movs	r1, #8
   10818:	4408      	add	r0, r1
   1081a:	f00f fd75 	bl	20308 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   1081e:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   10822:	f240 2302 	movw	r3, #514	; 0x202
   10826:	f011 0f40 	tst.w	r1, #64	; 0x40
   1082a:	bf08      	it	eq
   1082c:	2303      	moveq	r3, #3
   1082e:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   10830:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   10832:	bf4c      	ite	mi
   10834:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   10838:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1083c:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   10840:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   10842:	bf48      	it	mi
   10844:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   10848:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   1084c:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   10850:	bf18      	it	ne
   10852:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   10856:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1085a:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   1085c:	bf48      	it	mi
   1085e:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   10862:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   10864:	bf08      	it	eq
   10866:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   1086a:	2100      	movs	r1, #0
   1086c:	f017 ffc4 	bl	287f8 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   10870:	4621      	mov	r1, r4
   10872:	2200      	movs	r2, #0
   10874:	f242 0001 	movw	r0, #8193	; 0x2001
   10878:	f007 f8c8 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
   1087c:	4604      	mov	r4, r0
   1087e:	2800      	cmp	r0, #0
   10880:	f47f af28 	bne.w	106d4 <bt_init+0x194>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10884:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   10888:	0698      	lsls	r0, r3, #26
   1088a:	d41e      	bmi.n	108ca <bt_init+0x38a>
	if (bt_dev.le.acl_mtu) {
   1088c:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
   10890:	b9d9      	cbnz	r1, 108ca <bt_init+0x38a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   10892:	f241 0005 	movw	r0, #4101	; 0x1005
   10896:	aa01      	add	r2, sp, #4
   10898:	f007 f8b8 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
   1089c:	4604      	mov	r4, r0
   1089e:	2800      	cmp	r0, #0
   108a0:	f47f af18 	bne.w	106d4 <bt_init+0x194>
	if (bt_dev.le.acl_mtu) {
   108a4:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
   108a8:	b963      	cbnz	r3, 108c4 <bt_init+0x384>
	read_buffer_size_complete(rsp);
   108aa:	9b01      	ldr	r3, [sp, #4]
   108ac:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   108ae:	785a      	ldrb	r2, [r3, #1]
   108b0:	7899      	ldrb	r1, [r3, #2]
   108b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   108b6:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   108ba:	889a      	ldrh	r2, [r3, #4]
   108bc:	485b      	ldr	r0, [pc, #364]	; (10a2c <bt_init+0x4ec>)
   108be:	4611      	mov	r1, r2
   108c0:	f01b f891 	bl	2b9e6 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   108c4:	9801      	ldr	r0, [sp, #4]
   108c6:	f00f fbef 	bl	200a8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   108ca:	2108      	movs	r1, #8
   108cc:	f640 4001 	movw	r0, #3073	; 0xc01
   108d0:	f007 f854 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   108d4:	4604      	mov	r4, r0
   108d6:	2800      	cmp	r0, #0
   108d8:	f43f aecd 	beq.w	10676 <bt_init+0x136>
   108dc:	2108      	movs	r1, #8
   108de:	4408      	add	r0, r1
   108e0:	f00f fd12 	bl	20308 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   108e4:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   108e8:	4602      	mov	r2, r0
   108ea:	07d9      	lsls	r1, r3, #31
   108ec:	d557      	bpl.n	1099e <bt_init+0x45e>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   108ee:	a14c      	add	r1, pc, #304	; (adr r1, 10a20 <bt_init+0x4e0>)
   108f0:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   108f4:	f017 ff80 	bl	287f8 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   108f8:	4621      	mov	r1, r4
   108fa:	2200      	movs	r2, #0
   108fc:	f640 4001 	movw	r0, #3073	; 0xc01
   10900:	f007 f884 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
   10904:	4604      	mov	r4, r0
   10906:	2800      	cmp	r0, #0
   10908:	f47f aee4 	bne.w	106d4 <bt_init+0x194>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   1090c:	4601      	mov	r1, r0
   1090e:	aa01      	add	r2, sp, #4
   10910:	f64f 4001 	movw	r0, #64513	; 0xfc01
   10914:	f007 f87a 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
   10918:	4604      	mov	r4, r0
   1091a:	2800      	cmp	r0, #0
   1091c:	d043      	beq.n	109a6 <bt_init+0x466>
   1091e:	4944      	ldr	r1, [pc, #272]	; (10a30 <bt_init+0x4f0>)
   10920:	4b44      	ldr	r3, [pc, #272]	; (10a34 <bt_init+0x4f4>)
		BT_WARN("Vendor HCI extensions not available");
   10922:	4845      	ldr	r0, [pc, #276]	; (10a38 <bt_init+0x4f8>)
   10924:	1ac9      	subs	r1, r1, r3
   10926:	08c9      	lsrs	r1, r1, #3
   10928:	0189      	lsls	r1, r1, #6
   1092a:	f041 0102 	orr.w	r1, r1, #2
			BT_WARN("Failed to read supported vendor features");
   1092e:	f016 f9ff 	bl	26d30 <log_0>
	err = bt_id_init();
   10932:	f018 f8ae 	bl	28a92 <bt_id_init>
	if (err) {
   10936:	4604      	mov	r4, r0
   10938:	2800      	cmp	r0, #0
   1093a:	f47f aecb 	bne.w	106d4 <bt_init+0x194>
		err = bt_conn_init();
   1093e:	f009 fe6f 	bl	1a620 <bt_conn_init>
		if (err) {
   10942:	4604      	mov	r4, r0
   10944:	2800      	cmp	r0, #0
   10946:	f47f aec5 	bne.w	106d4 <bt_init+0x194>
		if (!bt_dev.id_count) {
   1094a:	79eb      	ldrb	r3, [r5, #7]
   1094c:	2b00      	cmp	r3, #0
   1094e:	f040 8081 	bne.w	10a54 <bt_init+0x514>
   10952:	4b38      	ldr	r3, [pc, #224]	; (10a34 <bt_init+0x4f4>)
   10954:	4936      	ldr	r1, [pc, #216]	; (10a30 <bt_init+0x4f0>)
			BT_INFO("No ID address. App must call settings_load()");
   10956:	4839      	ldr	r0, [pc, #228]	; (10a3c <bt_init+0x4fc>)
   10958:	1ac9      	subs	r1, r1, r3
   1095a:	08c9      	lsrs	r1, r1, #3
   1095c:	0189      	lsls	r1, r1, #6
   1095e:	f041 0103 	orr.w	r1, r1, #3
   10962:	f016 f9e5 	bl	26d30 <log_0>
			return 0;
   10966:	e6b5      	b.n	106d4 <bt_init+0x194>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   10968:	2102      	movs	r1, #2
   1096a:	f640 406d 	movw	r0, #3181	; 0xc6d
   1096e:	f007 f805 	bl	1797c <bt_hci_cmd_create>
		if (!buf) {
   10972:	4604      	mov	r4, r0
   10974:	2800      	cmp	r0, #0
   10976:	f43f ae7e 	beq.w	10676 <bt_init+0x136>
   1097a:	2102      	movs	r1, #2
   1097c:	3008      	adds	r0, #8
   1097e:	f00f fcc3 	bl	20308 <net_buf_simple_add>
		cp_le->le = 0x01;
   10982:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   10984:	4621      	mov	r1, r4
		cp_le->le = 0x01;
   10986:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   10988:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   1098a:	4632      	mov	r2, r6
   1098c:	f640 406d 	movw	r0, #3181	; 0xc6d
   10990:	f007 f83c 	bl	17a0c <bt_hci_cmd_send_sync>
		if (err) {
   10994:	4604      	mov	r4, r0
   10996:	2800      	cmp	r0, #0
   10998:	f43f aee0 	beq.w	1075c <bt_init+0x21c>
   1099c:	e69a      	b.n	106d4 <bt_init+0x194>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   1099e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   109a2:	4827      	ldr	r0, [pc, #156]	; (10a40 <bt_init+0x500>)
   109a4:	e7a6      	b.n	108f4 <bt_init+0x3b4>
	net_buf_unref(rsp);
   109a6:	9801      	ldr	r0, [sp, #4]
   109a8:	f00f fb7e 	bl	200a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   109ac:	4621      	mov	r1, r4
   109ae:	f64f 4002 	movw	r0, #64514	; 0xfc02
   109b2:	aa01      	add	r2, sp, #4
   109b4:	f007 f82a 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
   109b8:	4604      	mov	r4, r0
   109ba:	b140      	cbz	r0, 109ce <bt_init+0x48e>
   109bc:	491c      	ldr	r1, [pc, #112]	; (10a30 <bt_init+0x4f0>)
   109be:	4b1d      	ldr	r3, [pc, #116]	; (10a34 <bt_init+0x4f4>)
		BT_WARN("Failed to read supported vendor commands");
   109c0:	4820      	ldr	r0, [pc, #128]	; (10a44 <bt_init+0x504>)
   109c2:	1ac9      	subs	r1, r1, r3
   109c4:	08c9      	lsrs	r1, r1, #3
   109c6:	0189      	lsls	r1, r1, #6
   109c8:	f041 0102 	orr.w	r1, r1, #2
   109cc:	e7af      	b.n	1092e <bt_init+0x3ee>
	rp.cmds = (void *)rsp->data;
   109ce:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   109d0:	2202      	movs	r2, #2
   109d2:	6899      	ldr	r1, [r3, #8]
   109d4:	481c      	ldr	r0, [pc, #112]	; (10a48 <bt_init+0x508>)
   109d6:	3101      	adds	r1, #1
   109d8:	f017 fddb 	bl	28592 <memcpy>
	net_buf_unref(rsp);
   109dc:	9801      	ldr	r0, [sp, #4]
   109de:	f00f fb63 	bl	200a8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   109e2:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
   109e6:	075b      	lsls	r3, r3, #29
   109e8:	d5a3      	bpl.n	10932 <bt_init+0x3f2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   109ea:	4621      	mov	r1, r4
   109ec:	f64f 4003 	movw	r0, #64515	; 0xfc03
   109f0:	aa01      	add	r2, sp, #4
   109f2:	f007 f80b 	bl	17a0c <bt_hci_cmd_send_sync>
		if (err) {
   109f6:	b140      	cbz	r0, 10a0a <bt_init+0x4ca>
   109f8:	490d      	ldr	r1, [pc, #52]	; (10a30 <bt_init+0x4f0>)
   109fa:	4b0e      	ldr	r3, [pc, #56]	; (10a34 <bt_init+0x4f4>)
			BT_WARN("Failed to read supported vendor features");
   109fc:	4813      	ldr	r0, [pc, #76]	; (10a4c <bt_init+0x50c>)
   109fe:	1ac9      	subs	r1, r1, r3
   10a00:	08c9      	lsrs	r1, r1, #3
   10a02:	0189      	lsls	r1, r1, #6
   10a04:	f041 0102 	orr.w	r1, r1, #2
   10a08:	e791      	b.n	1092e <bt_init+0x3ee>
		memcpy(bt_dev.vs_features, rp.feat->features,
   10a0a:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
   10a0c:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   10a0e:	4810      	ldr	r0, [pc, #64]	; (10a50 <bt_init+0x510>)
   10a10:	6899      	ldr	r1, [r3, #8]
   10a12:	4411      	add	r1, r2
   10a14:	f017 fdbd 	bl	28592 <memcpy>
		net_buf_unref(rsp);
   10a18:	9801      	ldr	r0, [sp, #4]
   10a1a:	f00f fb45 	bl	200a8 <net_buf_unref>
   10a1e:	e788      	b.n	10932 <bt_init+0x3f2>
   10a20:	02008890 	.word	0x02008890
   10a24:	20008000 	.word	0x20008000
   10a28:	200080a0 	.word	0x200080a0
   10a2c:	200080d0 	.word	0x200080d0
   10a30:	0002c01c 	.word	0x0002c01c
   10a34:	0002bfe4 	.word	0x0002bfe4
   10a38:	0002f111 	.word	0x0002f111
   10a3c:	0002f187 	.word	0x0002f187
   10a40:	02008810 	.word	0x02008810
   10a44:	0002f135 	.word	0x0002f135
   10a48:	20008085 	.word	0x20008085
   10a4c:	0002f15e 	.word	0x0002f15e
   10a50:	20008084 	.word	0x20008084
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10a54:	2104      	movs	r1, #4
   10a56:	4803      	ldr	r0, [pc, #12]	; (10a64 <bt_init+0x524>)
   10a58:	f017 fec3 	bl	287e2 <atomic_or>
	bt_finalize_init();
   10a5c:	f007 fde0 	bl	18620 <bt_finalize_init>
	return 0;
   10a60:	e638      	b.n	106d4 <bt_init+0x194>
   10a62:	bf00      	nop
   10a64:	20008098 	.word	0x20008098

00010a68 <discovery_error>:
   10a68:	4a04      	ldr	r2, [pc, #16]	; (10a7c <discovery_error+0x14>)
   10a6a:	4b05      	ldr	r3, [pc, #20]	; (10a80 <discovery_error+0x18>)

static void discovery_error(struct bt_conn *conn,
			    int err,
			    void *context)
{
	LOG_WRN("Error while discovering GATT database: (%d)", err);
   10a6c:	4805      	ldr	r0, [pc, #20]	; (10a84 <discovery_error+0x1c>)
   10a6e:	1ad2      	subs	r2, r2, r3
   10a70:	08d2      	lsrs	r2, r2, #3
   10a72:	0192      	lsls	r2, r2, #6
   10a74:	f042 0202 	orr.w	r2, r2, #2
   10a78:	f016 b967 	b.w	26d4a <log_1>
   10a7c:	0002c06c 	.word	0x0002c06c
   10a80:	0002bfe4 	.word	0x0002bfe4
   10a84:	0002ca54 	.word	0x0002ca54

00010a88 <discovery_service_not_found>:
   10a88:	4904      	ldr	r1, [pc, #16]	; (10a9c <discovery_service_not_found+0x14>)
   10a8a:	4b05      	ldr	r3, [pc, #20]	; (10aa0 <discovery_service_not_found+0x18>)
	LOG_INF("Service not found");
   10a8c:	4805      	ldr	r0, [pc, #20]	; (10aa4 <discovery_service_not_found+0x1c>)
   10a8e:	1ac9      	subs	r1, r1, r3
   10a90:	08c9      	lsrs	r1, r1, #3
   10a92:	0189      	lsls	r1, r1, #6
   10a94:	f041 0103 	orr.w	r1, r1, #3
   10a98:	f016 b94a 	b.w	26d30 <log_0>
   10a9c:	0002c06c 	.word	0x0002c06c
   10aa0:	0002bfe4 	.word	0x0002bfe4
   10aa4:	0002ca80 	.word	0x0002ca80

00010aa8 <scan_connecting_error>:
   10aa8:	4904      	ldr	r1, [pc, #16]	; (10abc <scan_connecting_error+0x14>)
   10aaa:	4b05      	ldr	r3, [pc, #20]	; (10ac0 <scan_connecting_error+0x18>)
	LOG_INF("RSSI Data: %d", device_info->recv_info->rssi);
}

static void scan_connecting_error(struct bt_scan_device_info *device_info)
{
	LOG_WRN("Connecting failed");
   10aac:	4805      	ldr	r0, [pc, #20]	; (10ac4 <scan_connecting_error+0x1c>)
   10aae:	1ac9      	subs	r1, r1, r3
   10ab0:	08c9      	lsrs	r1, r1, #3
   10ab2:	0189      	lsls	r1, r1, #6
   10ab4:	f041 0102 	orr.w	r1, r1, #2
   10ab8:	f016 b93a 	b.w	26d30 <log_0>
   10abc:	0002c06c 	.word	0x0002c06c
   10ac0:	0002bfe4 	.word	0x0002bfe4
   10ac4:	0002ca92 	.word	0x0002ca92

00010ac8 <discovery_complete>:
{
   10ac8:	b538      	push	{r3, r4, r5, lr}
   10aca:	4604      	mov	r4, r0
   10acc:	460d      	mov	r5, r1
   10ace:	4b0b      	ldr	r3, [pc, #44]	; (10afc <discovery_complete+0x34>)
   10ad0:	490b      	ldr	r1, [pc, #44]	; (10b00 <discovery_complete+0x38>)
	LOG_INF("Service discovery completed");
   10ad2:	480c      	ldr	r0, [pc, #48]	; (10b04 <discovery_complete+0x3c>)
   10ad4:	1a5b      	subs	r3, r3, r1
   10ad6:	08db      	lsrs	r3, r3, #3
   10ad8:	019b      	lsls	r3, r3, #6
   10ada:	f043 0103 	orr.w	r1, r3, #3
   10ade:	f016 f927 	bl	26d30 <log_0>
	bt_nus_handles_assign(dm, nus);
   10ae2:	4629      	mov	r1, r5
   10ae4:	4620      	mov	r0, r4
   10ae6:	f004 ffe1 	bl	15aac <bt_nus_handles_assign>
	bt_nus_subscribe_receive(nus);
   10aea:	4628      	mov	r0, r5
   10aec:	f005 f8c0 	bl	15c70 <bt_nus_subscribe_receive>
	bt_gatt_dm_data_release(dm);
   10af0:	4620      	mov	r0, r4
}
   10af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_dm_data_release(dm);
   10af6:	f016 bfcc 	b.w	27a92 <bt_gatt_dm_data_release>
   10afa:	bf00      	nop
   10afc:	0002c06c 	.word	0x0002c06c
   10b00:	0002bfe4 	.word	0x0002bfe4
   10b04:	0002caa4 	.word	0x0002caa4

00010b08 <scan_connecting>:
}

static void scan_connecting(struct bt_scan_device_info *device_info,
			    struct bt_conn *conn)
{
   10b08:	b508      	push	{r3, lr}
	default_conn = bt_conn_ref(conn);
   10b0a:	4608      	mov	r0, r1
   10b0c:	f018 f8e2 	bl	28cd4 <bt_conn_ref>
   10b10:	4b01      	ldr	r3, [pc, #4]	; (10b18 <scan_connecting+0x10>)
   10b12:	6018      	str	r0, [r3, #0]
}
   10b14:	bd08      	pop	{r3, pc}
   10b16:	bf00      	nop
   10b18:	20009224 	.word	0x20009224

00010b1c <exchange_func>:
	if (!err) {
   10b1c:	4a07      	ldr	r2, [pc, #28]	; (10b3c <exchange_func+0x20>)
   10b1e:	4b08      	ldr	r3, [pc, #32]	; (10b40 <exchange_func+0x24>)
   10b20:	1ad2      	subs	r2, r2, r3
   10b22:	08d2      	lsrs	r2, r2, #3
   10b24:	0192      	lsls	r2, r2, #6
   10b26:	b921      	cbnz	r1, 10b32 <exchange_func+0x16>
		LOG_INF("MTU exchange done");
   10b28:	4806      	ldr	r0, [pc, #24]	; (10b44 <exchange_func+0x28>)
   10b2a:	f042 0103 	orr.w	r1, r2, #3
   10b2e:	f016 b8ff 	b.w	26d30 <log_0>
		LOG_WRN("MTU exchange failed (err %" PRIu8 ")", err);
   10b32:	4805      	ldr	r0, [pc, #20]	; (10b48 <exchange_func+0x2c>)
   10b34:	f042 0202 	orr.w	r2, r2, #2
   10b38:	f016 b907 	b.w	26d4a <log_1>
   10b3c:	0002c06c 	.word	0x0002c06c
   10b40:	0002bfe4 	.word	0x0002bfe4
   10b44:	0002cac0 	.word	0x0002cac0
   10b48:	0002cad2 	.word	0x0002cad2

00010b4c <nus_client_init>:

static int nus_client_init(void)
{
   10b4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;
	struct bt_nus_client_init_param init = {
   10b4e:	2300      	movs	r3, #0
   10b50:	9303      	str	r3, [sp, #12]
   10b52:	4b0f      	ldr	r3, [pc, #60]	; (10b90 <nus_client_init+0x44>)
			.received = ble_data_received,
			.sent = ble_data_sent,
		}
	};

	err = bt_nus_client_init(&nus_client, &init);
   10b54:	480f      	ldr	r0, [pc, #60]	; (10b94 <nus_client_init+0x48>)
	struct bt_nus_client_init_param init = {
   10b56:	9301      	str	r3, [sp, #4]
   10b58:	4b0f      	ldr	r3, [pc, #60]	; (10b98 <nus_client_init+0x4c>)
	err = bt_nus_client_init(&nus_client, &init);
   10b5a:	a901      	add	r1, sp, #4
	struct bt_nus_client_init_param init = {
   10b5c:	9302      	str	r3, [sp, #8]
	err = bt_nus_client_init(&nus_client, &init);
   10b5e:	f016 ffe9 	bl	27b34 <bt_nus_client_init>
	if (err) {
   10b62:	4a0e      	ldr	r2, [pc, #56]	; (10b9c <nus_client_init+0x50>)
   10b64:	4b0e      	ldr	r3, [pc, #56]	; (10ba0 <nus_client_init+0x54>)
   10b66:	4604      	mov	r4, r0
   10b68:	1ad2      	subs	r2, r2, r3
   10b6a:	08d2      	lsrs	r2, r2, #3
   10b6c:	0192      	lsls	r2, r2, #6
   10b6e:	b140      	cbz	r0, 10b82 <nus_client_init+0x36>
		LOG_ERR("NUS Client initialization failed (err %d)", err);
   10b70:	4601      	mov	r1, r0
   10b72:	f042 0201 	orr.w	r2, r2, #1
   10b76:	480b      	ldr	r0, [pc, #44]	; (10ba4 <nus_client_init+0x58>)
   10b78:	f016 f8e7 	bl	26d4a <log_1>
		return err;
	}

	LOG_INF("NUS Client module initialized");
	return err;
}
   10b7c:	4620      	mov	r0, r4
   10b7e:	b004      	add	sp, #16
   10b80:	bd10      	pop	{r4, pc}
	LOG_INF("NUS Client module initialized");
   10b82:	4809      	ldr	r0, [pc, #36]	; (10ba8 <nus_client_init+0x5c>)
   10b84:	f042 0103 	orr.w	r1, r2, #3
   10b88:	f016 f8d2 	bl	26d30 <log_0>
	return err;
   10b8c:	e7f6      	b.n	10b7c <nus_client_init+0x30>
   10b8e:	bf00      	nop
   10b90:	0001101d 	.word	0x0001101d
   10b94:	2000922c 	.word	0x2000922c
   10b98:	00010fdd 	.word	0x00010fdd
   10b9c:	0002c06c 	.word	0x0002c06c
   10ba0:	0002bfe4 	.word	0x0002bfe4
   10ba4:	0002caef 	.word	0x0002caef
   10ba8:	0002cb19 	.word	0x0002cb19

00010bac <scan_init>:
		scan_connecting_error, scan_connecting);

static int scan_init(void)
{
	int err;
	struct bt_scan_init_param scan_init = {
   10bac:	2300      	movs	r3, #0
{
   10bae:	b570      	push	{r4, r5, r6, lr}
   10bb0:	b088      	sub	sp, #32
	struct bt_scan_init_param scan_init = {
   10bb2:	e9cd 3300 	strd	r3, r3, [sp]
   10bb6:	9302      	str	r3, [sp, #8]
   10bb8:	2301      	movs	r3, #1
		.connect_if_match = 1,
	};

	bt_scan_init(&scan_init);
   10bba:	4668      	mov	r0, sp
	struct bt_scan_init_param scan_init = {
   10bbc:	f88d 3004 	strb.w	r3, [sp, #4]
	bt_scan_init(&scan_init);
   10bc0:	f004 ff28 	bl	15a14 <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
   10bc4:	481b      	ldr	r0, [pc, #108]	; (10c34 <scan_init+0x88>)
   10bc6:	f004 fdd7 	bl	15778 <bt_scan_cb_register>

	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_NUS_SERVICE);
   10bca:	aa03      	add	r2, sp, #12
   10bcc:	4615      	mov	r5, r2
   10bce:	4b1a      	ldr	r3, [pc, #104]	; (10c38 <scan_init+0x8c>)
   10bd0:	f103 0610 	add.w	r6, r3, #16
   10bd4:	4614      	mov	r4, r2
   10bd6:	6818      	ldr	r0, [r3, #0]
   10bd8:	6859      	ldr	r1, [r3, #4]
   10bda:	3308      	adds	r3, #8
   10bdc:	c403      	stmia	r4!, {r0, r1}
   10bde:	42b3      	cmp	r3, r6
   10be0:	4622      	mov	r2, r4
   10be2:	d1f7      	bne.n	10bd4 <scan_init+0x28>
   10be4:	781b      	ldrb	r3, [r3, #0]
   10be6:	4629      	mov	r1, r5
   10be8:	7023      	strb	r3, [r4, #0]
   10bea:	2003      	movs	r0, #3
   10bec:	f004 fdd4 	bl	15798 <bt_scan_filter_add>
	if (err) {
   10bf0:	4d12      	ldr	r5, [pc, #72]	; (10c3c <scan_init+0x90>)
   10bf2:	4a13      	ldr	r2, [pc, #76]	; (10c40 <scan_init+0x94>)
   10bf4:	4604      	mov	r4, r0
   10bf6:	1aad      	subs	r5, r5, r2
   10bf8:	08ed      	lsrs	r5, r5, #3
   10bfa:	01ad      	lsls	r5, r5, #6
   10bfc:	b140      	cbz	r0, 10c10 <scan_init+0x64>
		LOG_ERR("Scanning filters cannot be set (err %d)", err);
   10bfe:	4601      	mov	r1, r0
   10c00:	4810      	ldr	r0, [pc, #64]	; (10c44 <scan_init+0x98>)
   10c02:	f045 0201 	orr.w	r2, r5, #1
		return err;
	}

	err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
	if (err) {
		LOG_ERR("Filters cannot be turned on (err %d)", err);
   10c06:	f016 f8a0 	bl	26d4a <log_1>
		return err;
	}

	LOG_INF("Scan module initialized");
	return err;
}
   10c0a:	4620      	mov	r0, r4
   10c0c:	b008      	add	sp, #32
   10c0e:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
   10c10:	4601      	mov	r1, r0
   10c12:	2004      	movs	r0, #4
   10c14:	f004 fe24 	bl	15860 <bt_scan_filter_enable>
	if (err) {
   10c18:	4604      	mov	r4, r0
   10c1a:	b120      	cbz	r0, 10c26 <scan_init+0x7a>
		LOG_ERR("Filters cannot be turned on (err %d)", err);
   10c1c:	4601      	mov	r1, r0
   10c1e:	f045 0201 	orr.w	r2, r5, #1
   10c22:	4809      	ldr	r0, [pc, #36]	; (10c48 <scan_init+0x9c>)
   10c24:	e7ef      	b.n	10c06 <scan_init+0x5a>
	LOG_INF("Scan module initialized");
   10c26:	4809      	ldr	r0, [pc, #36]	; (10c4c <scan_init+0xa0>)
   10c28:	f045 0103 	orr.w	r1, r5, #3
   10c2c:	f016 f880 	bl	26d30 <log_0>
	return err;
   10c30:	e7eb      	b.n	10c0a <scan_init+0x5e>
   10c32:	bf00      	nop
   10c34:	20008194 	.word	0x20008194
   10c38:	0002c160 	.word	0x0002c160
   10c3c:	0002c06c 	.word	0x0002c06c
   10c40:	0002bfe4 	.word	0x0002bfe4
   10c44:	0002cb37 	.word	0x0002cb37
   10c48:	0002cb5f 	.word	0x0002cb5f
   10c4c:	0002cb84 	.word	0x0002cb84

00010c50 <gatt_discover.part.0>:
static void gatt_discover(struct bt_conn *conn)
   10c50:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c52:	b087      	sub	sp, #28
			       BT_UUID_NUS_SERVICE,
   10c54:	aa01      	add	r2, sp, #4
static void gatt_discover(struct bt_conn *conn)
   10c56:	4605      	mov	r5, r0
   10c58:	4616      	mov	r6, r2
			       BT_UUID_NUS_SERVICE,
   10c5a:	4b10      	ldr	r3, [pc, #64]	; (10c9c <gatt_discover.part.0+0x4c>)
   10c5c:	f103 0710 	add.w	r7, r3, #16
   10c60:	4614      	mov	r4, r2
   10c62:	6818      	ldr	r0, [r3, #0]
   10c64:	6859      	ldr	r1, [r3, #4]
   10c66:	3308      	adds	r3, #8
   10c68:	c403      	stmia	r4!, {r0, r1}
   10c6a:	42bb      	cmp	r3, r7
   10c6c:	4622      	mov	r2, r4
   10c6e:	d1f7      	bne.n	10c60 <gatt_discover.part.0+0x10>
   10c70:	781b      	ldrb	r3, [r3, #0]
	err = bt_gatt_dm_start(conn,
   10c72:	4631      	mov	r1, r6
			       BT_UUID_NUS_SERVICE,
   10c74:	7023      	strb	r3, [r4, #0]
	err = bt_gatt_dm_start(conn,
   10c76:	4628      	mov	r0, r5
   10c78:	4b09      	ldr	r3, [pc, #36]	; (10ca0 <gatt_discover.part.0+0x50>)
   10c7a:	4a0a      	ldr	r2, [pc, #40]	; (10ca4 <gatt_discover.part.0+0x54>)
   10c7c:	f004 fc9c 	bl	155b8 <bt_gatt_dm_start>
	if (err) {
   10c80:	4601      	mov	r1, r0
   10c82:	b148      	cbz	r0, 10c98 <gatt_discover.part.0+0x48>
   10c84:	4a08      	ldr	r2, [pc, #32]	; (10ca8 <gatt_discover.part.0+0x58>)
   10c86:	4b09      	ldr	r3, [pc, #36]	; (10cac <gatt_discover.part.0+0x5c>)
		LOG_ERR("could not start the discovery procedure, error "
   10c88:	4809      	ldr	r0, [pc, #36]	; (10cb0 <gatt_discover.part.0+0x60>)
   10c8a:	1ad2      	subs	r2, r2, r3
   10c8c:	08d2      	lsrs	r2, r2, #3
   10c8e:	0192      	lsls	r2, r2, #6
   10c90:	f042 0201 	orr.w	r2, r2, #1
   10c94:	f016 f859 	bl	26d4a <log_1>
}
   10c98:	b007      	add	sp, #28
   10c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c9c:	0002c160 	.word	0x0002c160
   10ca0:	2000922c 	.word	0x2000922c
   10ca4:	20008188 	.word	0x20008188
   10ca8:	0002c06c 	.word	0x0002c06c
   10cac:	0002bfe4 	.word	0x0002bfe4
   10cb0:	0002cb9c 	.word	0x0002cb9c

00010cb4 <bt_addr_le_to_str.constprop.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   10cb4:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   10cb6:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   10cb8:	b08a      	sub	sp, #40	; 0x28
   10cba:	4604      	mov	r4, r0
   10cbc:	460e      	mov	r6, r1
   10cbe:	ad07      	add	r5, sp, #28
   10cc0:	2b03      	cmp	r3, #3
   10cc2:	d820      	bhi.n	10d06 <bt_addr_le_to_str.constprop.0+0x52>
   10cc4:	e8df f003 	tbb	[pc, r3]
   10cc8:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   10ccc:	4911      	ldr	r1, [pc, #68]	; (10d14 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   10cce:	4628      	mov	r0, r5
   10cd0:	f017 fc07 	bl	284e2 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   10cd4:	7863      	ldrb	r3, [r4, #1]
   10cd6:	211e      	movs	r1, #30
   10cd8:	9304      	str	r3, [sp, #16]
   10cda:	78a3      	ldrb	r3, [r4, #2]
   10cdc:	4630      	mov	r0, r6
   10cde:	9303      	str	r3, [sp, #12]
   10ce0:	78e3      	ldrb	r3, [r4, #3]
   10ce2:	4a0d      	ldr	r2, [pc, #52]	; (10d18 <bt_addr_le_to_str.constprop.0+0x64>)
   10ce4:	9302      	str	r3, [sp, #8]
   10ce6:	7923      	ldrb	r3, [r4, #4]
   10ce8:	9505      	str	r5, [sp, #20]
   10cea:	9301      	str	r3, [sp, #4]
   10cec:	7963      	ldrb	r3, [r4, #5]
   10cee:	9300      	str	r3, [sp, #0]
   10cf0:	79a3      	ldrb	r3, [r4, #6]
   10cf2:	f015 fd20 	bl	26736 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   10cf6:	b00a      	add	sp, #40	; 0x28
   10cf8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   10cfa:	4908      	ldr	r1, [pc, #32]	; (10d1c <bt_addr_le_to_str.constprop.0+0x68>)
   10cfc:	e7e7      	b.n	10cce <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
   10cfe:	4908      	ldr	r1, [pc, #32]	; (10d20 <bt_addr_le_to_str.constprop.0+0x6c>)
   10d00:	e7e5      	b.n	10cce <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
   10d02:	4908      	ldr	r1, [pc, #32]	; (10d24 <bt_addr_le_to_str.constprop.0+0x70>)
   10d04:	e7e3      	b.n	10cce <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10d06:	210a      	movs	r1, #10
   10d08:	4628      	mov	r0, r5
   10d0a:	4a07      	ldr	r2, [pc, #28]	; (10d28 <bt_addr_le_to_str.constprop.0+0x74>)
   10d0c:	f015 fd13 	bl	26736 <snprintk>
		break;
   10d10:	e7e0      	b.n	10cd4 <bt_addr_le_to_str.constprop.0+0x20>
   10d12:	bf00      	nop
   10d14:	0002cbd4 	.word	0x0002cbd4
   10d18:	0002cbf6 	.word	0x0002cbf6
   10d1c:	0002cbdb 	.word	0x0002cbdb
   10d20:	0002cbe2 	.word	0x0002cbe2
   10d24:	0002cbec 	.word	0x0002cbec
   10d28:	00030500 	.word	0x00030500

00010d2c <pairing_confirm>:
	LOG_INF("Pairing cancelled: %s", log_strdup(addr));
}


static void pairing_confirm(struct bt_conn *conn)
{
   10d2c:	b510      	push	{r4, lr}
   10d2e:	4604      	mov	r4, r0
   10d30:	b088      	sub	sp, #32
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10d32:	f018 f808 	bl	28d46 <bt_conn_get_dst>
   10d36:	4669      	mov	r1, sp
   10d38:	f7ff ffbc 	bl	10cb4 <bt_addr_le_to_str.constprop.0>

	bt_conn_auth_pairing_confirm(conn);
   10d3c:	4620      	mov	r0, r4
   10d3e:	f009 fc33 	bl	1a5a8 <bt_conn_auth_pairing_confirm>
   10d42:	4c08      	ldr	r4, [pc, #32]	; (10d64 <pairing_confirm+0x38>)
   10d44:	4a08      	ldr	r2, [pc, #32]	; (10d68 <pairing_confirm+0x3c>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   10d46:	4668      	mov	r0, sp
   10d48:	1aa4      	subs	r4, r4, r2
   10d4a:	f001 fdcf 	bl	128ec <z_log_strdup>
   10d4e:	08e4      	lsrs	r4, r4, #3

	LOG_INF("Pairing confirmed: %s", log_strdup(addr));
   10d50:	01a4      	lsls	r4, r4, #6
   10d52:	f044 0403 	orr.w	r4, r4, #3
   10d56:	4601      	mov	r1, r0
   10d58:	4622      	mov	r2, r4
   10d5a:	4804      	ldr	r0, [pc, #16]	; (10d6c <pairing_confirm+0x40>)
   10d5c:	f015 fff5 	bl	26d4a <log_1>
}
   10d60:	b008      	add	sp, #32
   10d62:	bd10      	pop	{r4, pc}
   10d64:	0002c06c 	.word	0x0002c06c
   10d68:	0002bfe4 	.word	0x0002bfe4
   10d6c:	0002cc19 	.word	0x0002cc19

00010d70 <connected>:
{
   10d70:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d72:	460e      	mov	r6, r1
   10d74:	b089      	sub	sp, #36	; 0x24
   10d76:	4605      	mov	r5, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10d78:	f017 ffe5 	bl	28d46 <bt_conn_get_dst>
   10d7c:	4669      	mov	r1, sp
   10d7e:	f7ff ff99 	bl	10cb4 <bt_addr_le_to_str.constprop.0>
	if (conn_err) {
   10d82:	4c2b      	ldr	r4, [pc, #172]	; (10e30 <connected+0xc0>)
   10d84:	4b2b      	ldr	r3, [pc, #172]	; (10e34 <connected+0xc4>)
   10d86:	1ae4      	subs	r4, r4, r3
   10d88:	08e4      	lsrs	r4, r4, #3
   10d8a:	01a4      	lsls	r4, r4, #6
   10d8c:	b1f6      	cbz	r6, 10dcc <connected+0x5c>
   10d8e:	4668      	mov	r0, sp
   10d90:	f001 fdac 	bl	128ec <z_log_strdup>
		LOG_INF("Failed to connect to %s (%d)", log_strdup(addr),
   10d94:	f044 0703 	orr.w	r7, r4, #3
   10d98:	4632      	mov	r2, r6
		if (default_conn == conn) {
   10d9a:	4e27      	ldr	r6, [pc, #156]	; (10e38 <connected+0xc8>)
   10d9c:	4601      	mov	r1, r0
		LOG_INF("Failed to connect to %s (%d)", log_strdup(addr),
   10d9e:	463b      	mov	r3, r7
   10da0:	4826      	ldr	r0, [pc, #152]	; (10e3c <connected+0xcc>)
   10da2:	f015 ffe6 	bl	26d72 <log_2>
		if (default_conn == conn) {
   10da6:	6830      	ldr	r0, [r6, #0]
   10da8:	42a8      	cmp	r0, r5
   10daa:	d10d      	bne.n	10dc8 <connected+0x58>
			bt_conn_unref(default_conn);
   10dac:	f008 ffde 	bl	19d6c <bt_conn_unref>
			default_conn = NULL;
   10db0:	2300      	movs	r3, #0
			err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   10db2:	2001      	movs	r0, #1
			default_conn = NULL;
   10db4:	6033      	str	r3, [r6, #0]
			err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   10db6:	f004 fe67 	bl	15a88 <bt_scan_start>
			if (err) {
   10dba:	4601      	mov	r1, r0
   10dbc:	b120      	cbz	r0, 10dc8 <connected+0x58>
				LOG_ERR("Scanning failed to start (err %d)",
   10dbe:	4820      	ldr	r0, [pc, #128]	; (10e40 <connected+0xd0>)
   10dc0:	f044 0201 	orr.w	r2, r4, #1
		LOG_ERR("Stop LE scan failed (err %d)", err);
   10dc4:	f015 ffc1 	bl	26d4a <log_1>
}
   10dc8:	b009      	add	sp, #36	; 0x24
   10dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10dcc:	4668      	mov	r0, sp
   10dce:	f001 fd8d 	bl	128ec <z_log_strdup>
	LOG_INF("Connected: %s", log_strdup(addr));
   10dd2:	f044 0603 	orr.w	r6, r4, #3
   10dd6:	4601      	mov	r1, r0
   10dd8:	4632      	mov	r2, r6
   10dda:	481a      	ldr	r0, [pc, #104]	; (10e44 <connected+0xd4>)
   10ddc:	f015 ffb5 	bl	26d4a <log_1>
	exchange_params.func = exchange_func;
   10de0:	4919      	ldr	r1, [pc, #100]	; (10e48 <connected+0xd8>)
   10de2:	4b1a      	ldr	r3, [pc, #104]	; (10e4c <connected+0xdc>)
	err = bt_gatt_exchange_mtu(conn, &exchange_params);
   10de4:	4628      	mov	r0, r5
	exchange_params.func = exchange_func;
   10de6:	600b      	str	r3, [r1, #0]
	err = bt_gatt_exchange_mtu(conn, &exchange_params);
   10de8:	f00c f950 	bl	1d08c <bt_gatt_exchange_mtu>
	if (err) {
   10dec:	4601      	mov	r1, r0
   10dee:	b120      	cbz	r0, 10dfa <connected+0x8a>
		LOG_WRN("MTU exchange failed (err %d)", err);
   10df0:	4817      	ldr	r0, [pc, #92]	; (10e50 <connected+0xe0>)
   10df2:	f044 0202 	orr.w	r2, r4, #2
   10df6:	f015 ffa8 	bl	26d4a <log_1>
	err = bt_conn_set_security(conn, BT_SECURITY_L2);
   10dfa:	2102      	movs	r1, #2
   10dfc:	4628      	mov	r0, r5
   10dfe:	f017 ff06 	bl	28c0e <bt_conn_set_security>
	if (err) {
   10e02:	4601      	mov	r1, r0
   10e04:	b158      	cbz	r0, 10e1e <connected+0xae>
		LOG_WRN("Failed to set security: %d", err);
   10e06:	4813      	ldr	r0, [pc, #76]	; (10e54 <connected+0xe4>)
   10e08:	f044 0202 	orr.w	r2, r4, #2
   10e0c:	f015 ff9d 	bl	26d4a <log_1>
	if (conn != default_conn) {
   10e10:	4b09      	ldr	r3, [pc, #36]	; (10e38 <connected+0xc8>)
   10e12:	681b      	ldr	r3, [r3, #0]
   10e14:	429d      	cmp	r5, r3
   10e16:	d102      	bne.n	10e1e <connected+0xae>
   10e18:	4628      	mov	r0, r5
   10e1a:	f7ff ff19 	bl	10c50 <gatt_discover.part.0>
	err = bt_scan_stop();
   10e1e:	f016 fe6a 	bl	27af6 <bt_scan_stop>
	if ((!err) && (err != -EALREADY)) {
   10e22:	4601      	mov	r1, r0
   10e24:	2800      	cmp	r0, #0
   10e26:	d1cf      	bne.n	10dc8 <connected+0x58>
		LOG_ERR("Stop LE scan failed (err %d)", err);
   10e28:	480b      	ldr	r0, [pc, #44]	; (10e58 <connected+0xe8>)
   10e2a:	f044 0201 	orr.w	r2, r4, #1
   10e2e:	e7c9      	b.n	10dc4 <connected+0x54>
   10e30:	0002c06c 	.word	0x0002c06c
   10e34:	0002bfe4 	.word	0x0002bfe4
   10e38:	20009224 	.word	0x20009224
   10e3c:	0002cc2f 	.word	0x0002cc2f
   10e40:	0002cc4c 	.word	0x0002cc4c
   10e44:	0002cc6e 	.word	0x0002cc6e
   10e48:	20009228 	.word	0x20009228
   10e4c:	00010b1d 	.word	0x00010b1d
   10e50:	0002cc7c 	.word	0x0002cc7c
   10e54:	0002cc99 	.word	0x0002cc99
   10e58:	0002ccb4 	.word	0x0002ccb4

00010e5c <disconnected>:
{
   10e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e5e:	b089      	sub	sp, #36	; 0x24
   10e60:	460e      	mov	r6, r1
   10e62:	4605      	mov	r5, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10e64:	f017 ff6f 	bl	28d46 <bt_conn_get_dst>
   10e68:	4669      	mov	r1, sp
   10e6a:	f7ff ff23 	bl	10cb4 <bt_addr_le_to_str.constprop.0>
   10e6e:	4c12      	ldr	r4, [pc, #72]	; (10eb8 <disconnected+0x5c>)
   10e70:	4b12      	ldr	r3, [pc, #72]	; (10ebc <disconnected+0x60>)
   10e72:	4668      	mov	r0, sp
   10e74:	1ae4      	subs	r4, r4, r3
   10e76:	f001 fd39 	bl	128ec <z_log_strdup>
   10e7a:	08e4      	lsrs	r4, r4, #3
	LOG_INF("Disconnected: %s (reason %u)", log_strdup(addr),
   10e7c:	01a4      	lsls	r4, r4, #6
   10e7e:	4632      	mov	r2, r6
   10e80:	f044 0703 	orr.w	r7, r4, #3
	if (default_conn != conn) {
   10e84:	4e0e      	ldr	r6, [pc, #56]	; (10ec0 <disconnected+0x64>)
   10e86:	4601      	mov	r1, r0
	LOG_INF("Disconnected: %s (reason %u)", log_strdup(addr),
   10e88:	463b      	mov	r3, r7
   10e8a:	480e      	ldr	r0, [pc, #56]	; (10ec4 <disconnected+0x68>)
   10e8c:	f015 ff71 	bl	26d72 <log_2>
	if (default_conn != conn) {
   10e90:	6830      	ldr	r0, [r6, #0]
   10e92:	42a8      	cmp	r0, r5
   10e94:	d10d      	bne.n	10eb2 <disconnected+0x56>
	bt_conn_unref(default_conn);
   10e96:	f008 ff69 	bl	19d6c <bt_conn_unref>
	default_conn = NULL;
   10e9a:	2300      	movs	r3, #0
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   10e9c:	2001      	movs	r0, #1
	default_conn = NULL;
   10e9e:	6033      	str	r3, [r6, #0]
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   10ea0:	f004 fdf2 	bl	15a88 <bt_scan_start>
	if (err) {
   10ea4:	4601      	mov	r1, r0
   10ea6:	b120      	cbz	r0, 10eb2 <disconnected+0x56>
		LOG_ERR("Scanning failed to start (err %d)",
   10ea8:	4807      	ldr	r0, [pc, #28]	; (10ec8 <disconnected+0x6c>)
   10eaa:	f044 0201 	orr.w	r2, r4, #1
   10eae:	f015 ff4c 	bl	26d4a <log_1>
}
   10eb2:	b009      	add	sp, #36	; 0x24
   10eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10eb6:	bf00      	nop
   10eb8:	0002c06c 	.word	0x0002c06c
   10ebc:	0002bfe4 	.word	0x0002bfe4
   10ec0:	20009224 	.word	0x20009224
   10ec4:	0002ccd1 	.word	0x0002ccd1
   10ec8:	0002cc4c 	.word	0x0002cc4c

00010ecc <auth_cancel>:
{
   10ecc:	b510      	push	{r4, lr}
   10ece:	b088      	sub	sp, #32
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10ed0:	f017 ff39 	bl	28d46 <bt_conn_get_dst>
   10ed4:	4669      	mov	r1, sp
   10ed6:	f7ff feed 	bl	10cb4 <bt_addr_le_to_str.constprop.0>
   10eda:	4c08      	ldr	r4, [pc, #32]	; (10efc <auth_cancel+0x30>)
   10edc:	4a08      	ldr	r2, [pc, #32]	; (10f00 <auth_cancel+0x34>)
   10ede:	4668      	mov	r0, sp
   10ee0:	1aa4      	subs	r4, r4, r2
   10ee2:	f001 fd03 	bl	128ec <z_log_strdup>
   10ee6:	08e4      	lsrs	r4, r4, #3
	LOG_INF("Pairing cancelled: %s", log_strdup(addr));
   10ee8:	01a4      	lsls	r4, r4, #6
   10eea:	f044 0403 	orr.w	r4, r4, #3
   10eee:	4601      	mov	r1, r0
   10ef0:	4622      	mov	r2, r4
   10ef2:	4804      	ldr	r0, [pc, #16]	; (10f04 <auth_cancel+0x38>)
   10ef4:	f015 ff29 	bl	26d4a <log_1>
}
   10ef8:	b008      	add	sp, #32
   10efa:	bd10      	pop	{r4, pc}
   10efc:	0002c06c 	.word	0x0002c06c
   10f00:	0002bfe4 	.word	0x0002bfe4
   10f04:	0002ccee 	.word	0x0002ccee

00010f08 <pairing_complete>:


static void pairing_complete(struct bt_conn *conn, bool bonded)
{
   10f08:	b530      	push	{r4, r5, lr}
   10f0a:	b089      	sub	sp, #36	; 0x24
   10f0c:	460d      	mov	r5, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10f0e:	f017 ff1a 	bl	28d46 <bt_conn_get_dst>
   10f12:	4669      	mov	r1, sp
   10f14:	f7ff fece 	bl	10cb4 <bt_addr_le_to_str.constprop.0>
   10f18:	4c08      	ldr	r4, [pc, #32]	; (10f3c <pairing_complete+0x34>)
   10f1a:	4b09      	ldr	r3, [pc, #36]	; (10f40 <pairing_complete+0x38>)
   10f1c:	4668      	mov	r0, sp
   10f1e:	1ae4      	subs	r4, r4, r3
   10f20:	f001 fce4 	bl	128ec <z_log_strdup>
   10f24:	08e4      	lsrs	r4, r4, #3

	LOG_INF("Pairing completed: %s, bonded: %d", log_strdup(addr),
   10f26:	01a4      	lsls	r4, r4, #6
   10f28:	f044 0403 	orr.w	r4, r4, #3
   10f2c:	4601      	mov	r1, r0
   10f2e:	4623      	mov	r3, r4
   10f30:	462a      	mov	r2, r5
   10f32:	4804      	ldr	r0, [pc, #16]	; (10f44 <pairing_complete+0x3c>)
   10f34:	f015 ff1d 	bl	26d72 <log_2>
		bonded);
}
   10f38:	b009      	add	sp, #36	; 0x24
   10f3a:	bd30      	pop	{r4, r5, pc}
   10f3c:	0002c06c 	.word	0x0002c06c
   10f40:	0002bfe4 	.word	0x0002bfe4
   10f44:	0002cd04 	.word	0x0002cd04

00010f48 <pairing_failed>:


static void pairing_failed(struct bt_conn *conn, enum bt_security_err reason)
{
   10f48:	b530      	push	{r4, r5, lr}
   10f4a:	b089      	sub	sp, #36	; 0x24
   10f4c:	460d      	mov	r5, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10f4e:	f017 fefa 	bl	28d46 <bt_conn_get_dst>
   10f52:	4669      	mov	r1, sp
   10f54:	f7ff feae 	bl	10cb4 <bt_addr_le_to_str.constprop.0>
   10f58:	4c08      	ldr	r4, [pc, #32]	; (10f7c <pairing_failed+0x34>)
   10f5a:	4b09      	ldr	r3, [pc, #36]	; (10f80 <pairing_failed+0x38>)
   10f5c:	4668      	mov	r0, sp
   10f5e:	1ae4      	subs	r4, r4, r3
   10f60:	f001 fcc4 	bl	128ec <z_log_strdup>
   10f64:	08e4      	lsrs	r4, r4, #3

	LOG_WRN("Pairing failed conn: %s, reason %d", log_strdup(addr),
   10f66:	01a4      	lsls	r4, r4, #6
   10f68:	f044 0402 	orr.w	r4, r4, #2
   10f6c:	4601      	mov	r1, r0
   10f6e:	4623      	mov	r3, r4
   10f70:	462a      	mov	r2, r5
   10f72:	4804      	ldr	r0, [pc, #16]	; (10f84 <pairing_failed+0x3c>)
   10f74:	f015 fefd 	bl	26d72 <log_2>
		reason);
}
   10f78:	b009      	add	sp, #36	; 0x24
   10f7a:	bd30      	pop	{r4, r5, pc}
   10f7c:	0002c06c 	.word	0x0002c06c
   10f80:	0002bfe4 	.word	0x0002bfe4
   10f84:	0002cd26 	.word	0x0002cd26

00010f88 <scan_filter_match>:
{
   10f88:	b570      	push	{r4, r5, r6, lr}
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
   10f8a:	6803      	ldr	r3, [r0, #0]
{
   10f8c:	b088      	sub	sp, #32
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
   10f8e:	4669      	mov	r1, sp
{
   10f90:	4605      	mov	r5, r0
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
   10f92:	6818      	ldr	r0, [r3, #0]
{
   10f94:	4616      	mov	r6, r2
   10f96:	4c0d      	ldr	r4, [pc, #52]	; (10fcc <scan_filter_match+0x44>)
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
   10f98:	f7ff fe8c 	bl	10cb4 <bt_addr_le_to_str.constprop.0>
   10f9c:	4b0c      	ldr	r3, [pc, #48]	; (10fd0 <scan_filter_match+0x48>)
   10f9e:	4668      	mov	r0, sp
   10fa0:	1ae4      	subs	r4, r4, r3
   10fa2:	f001 fca3 	bl	128ec <z_log_strdup>
   10fa6:	08e4      	lsrs	r4, r4, #3
	LOG_INF("Filters matched. Address: %s connectable: %d",
   10fa8:	01a4      	lsls	r4, r4, #6
   10faa:	f044 0403 	orr.w	r4, r4, #3
   10fae:	4601      	mov	r1, r0
   10fb0:	4623      	mov	r3, r4
   10fb2:	4632      	mov	r2, r6
   10fb4:	4807      	ldr	r0, [pc, #28]	; (10fd4 <scan_filter_match+0x4c>)
   10fb6:	f015 fedc 	bl	26d72 <log_2>
	LOG_INF("RSSI Data: %d", device_info->recv_info->rssi);
   10fba:	682b      	ldr	r3, [r5, #0]
   10fbc:	4622      	mov	r2, r4
   10fbe:	f993 1005 	ldrsb.w	r1, [r3, #5]
   10fc2:	4805      	ldr	r0, [pc, #20]	; (10fd8 <scan_filter_match+0x50>)
   10fc4:	f015 fec1 	bl	26d4a <log_1>
}
   10fc8:	b008      	add	sp, #32
   10fca:	bd70      	pop	{r4, r5, r6, pc}
   10fcc:	0002c06c 	.word	0x0002c06c
   10fd0:	0002bfe4 	.word	0x0002bfe4
   10fd4:	0002cd49 	.word	0x0002cd49
   10fd8:	0002cd76 	.word	0x0002cd76

00010fdc <ble_data_sent>:
{
   10fdc:	b510      	push	{r4, lr}
   10fde:	4604      	mov	r4, r0
	k_free(buf);
   10fe0:	1f08      	subs	r0, r1, #4
   10fe2:	f01a fe30 	bl	2bc46 <k_free>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   10fe6:	4809      	ldr	r0, [pc, #36]	; (1100c <ble_data_sent+0x30>)
   10fe8:	f012 fa58 	bl	2349c <z_impl_k_sem_give>
	if (err) {
   10fec:	b164      	cbz	r4, 11008 <ble_data_sent+0x2c>
   10fee:	4a08      	ldr	r2, [pc, #32]	; (11010 <ble_data_sent+0x34>)
   10ff0:	4b08      	ldr	r3, [pc, #32]	; (11014 <ble_data_sent+0x38>)
		LOG_WRN("ATT error code: 0x%02X", err);
   10ff2:	4621      	mov	r1, r4
}
   10ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10ff8:	1ad2      	subs	r2, r2, r3
   10ffa:	08d2      	lsrs	r2, r2, #3
		LOG_WRN("ATT error code: 0x%02X", err);
   10ffc:	0192      	lsls	r2, r2, #6
   10ffe:	4806      	ldr	r0, [pc, #24]	; (11018 <ble_data_sent+0x3c>)
   11000:	f042 0202 	orr.w	r2, r2, #2
   11004:	f015 bea1 	b.w	26d4a <log_1>
}
   11008:	bd10      	pop	{r4, pc}
   1100a:	bf00      	nop
   1100c:	20008568 	.word	0x20008568
   11010:	0002c06c 	.word	0x0002c06c
   11014:	0002bfe4 	.word	0x0002bfe4
   11018:	0002cd84 	.word	0x0002cd84

0001101c <ble_data_received>:
{
   1101c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11020:	4607      	mov	r7, r0
   11022:	460e      	mov	r6, r1
	for (uint16_t pos = 0; pos != len;) {
   11024:	2500      	movs	r5, #0
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   11026:	f8df 8094 	ldr.w	r8, [pc, #148]	; 110bc <ble_data_received+0xa0>
			k_fifo_put(&fifo_uart_tx_data, tx);
   1102a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 110c0 <ble_data_received+0xa4>
	for (uint16_t pos = 0; pos != len;) {
   1102e:	42ae      	cmp	r6, r5
   11030:	d00e      	beq.n	11050 <ble_data_received+0x34>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
   11032:	201c      	movs	r0, #28
   11034:	f01a fe0e 	bl	2bc54 <k_malloc>
		if (!tx) {
   11038:	4604      	mov	r4, r0
   1103a:	b960      	cbnz	r0, 11056 <ble_data_received+0x3a>
   1103c:	491c      	ldr	r1, [pc, #112]	; (110b0 <ble_data_received+0x94>)
   1103e:	4b1d      	ldr	r3, [pc, #116]	; (110b4 <ble_data_received+0x98>)
			LOG_WRN("Not able to allocate UART send data buffer");
   11040:	481d      	ldr	r0, [pc, #116]	; (110b8 <ble_data_received+0x9c>)
   11042:	1ac9      	subs	r1, r1, r3
   11044:	08c9      	lsrs	r1, r1, #3
   11046:	0189      	lsls	r1, r1, #6
   11048:	f041 0102 	orr.w	r1, r1, #2
   1104c:	f015 fe70 	bl	26d30 <log_0>
}
   11050:	2001      	movs	r0, #1
   11052:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((len - pos) > tx_data_size) {
   11056:	1b72      	subs	r2, r6, r5
   11058:	2a13      	cmp	r2, #19
			tx->len = tx_data_size;
   1105a:	bf8c      	ite	hi
   1105c:	2213      	movhi	r2, #19
			tx->len = (len - pos);
   1105e:	b292      	uxthls	r2, r2
		memcpy(tx->data, &data[pos], tx->len);
   11060:	f100 0a04 	add.w	sl, r0, #4
   11064:	8302      	strh	r2, [r0, #24]
   11066:	1979      	adds	r1, r7, r5
   11068:	4650      	mov	r0, sl
   1106a:	f017 fa92 	bl	28592 <memcpy>
		pos += tx->len;
   1106e:	8b23      	ldrh	r3, [r4, #24]
   11070:	441d      	add	r5, r3
   11072:	b2ad      	uxth	r5, r5
		if ((pos == len) && (data[len - 1] == '\r')) {
   11074:	42b5      	cmp	r5, r6
   11076:	d109      	bne.n	1108c <ble_data_received+0x70>
   11078:	197a      	adds	r2, r7, r5
   1107a:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   1107e:	2a0d      	cmp	r2, #13
   11080:	d104      	bne.n	1108c <ble_data_received+0x70>
			tx->data[tx->len] = '\n';
   11082:	210a      	movs	r1, #10
   11084:	18e2      	adds	r2, r4, r3
			tx->len++;
   11086:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
   11088:	7111      	strb	r1, [r2, #4]
			tx->len++;
   1108a:	8323      	strh	r3, [r4, #24]
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   1108c:	f8d8 0000 	ldr.w	r0, [r8]
   11090:	8b22      	ldrh	r2, [r4, #24]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->tx(dev, buf, len, timeout);
   11092:	6883      	ldr	r3, [r0, #8]
   11094:	4651      	mov	r1, sl
   11096:	f8d3 b004 	ldr.w	fp, [r3, #4]
   1109a:	f04f 33ff 	mov.w	r3, #4294967295
   1109e:	47d8      	blx	fp
		if (err) {
   110a0:	2800      	cmp	r0, #0
   110a2:	d0c4      	beq.n	1102e <ble_data_received+0x12>
			k_fifo_put(&fifo_uart_tx_data, tx);
   110a4:	4621      	mov	r1, r4
   110a6:	4648      	mov	r0, r9
   110a8:	f01a fc88 	bl	2b9bc <k_queue_append>
   110ac:	e7bf      	b.n	1102e <ble_data_received+0x12>
   110ae:	bf00      	nop
   110b0:	0002c06c 	.word	0x0002c06c
   110b4:	0002bfe4 	.word	0x0002bfe4
   110b8:	0002cd9b 	.word	0x0002cd9b
   110bc:	20009270 	.word	0x20009270
   110c0:	200085b4 	.word	0x200085b4

000110c4 <uart_work_handler>:
	buf = k_malloc(sizeof(*buf));
   110c4:	201c      	movs	r0, #28
{
   110c6:	b510      	push	{r4, lr}
	buf = k_malloc(sizeof(*buf));
   110c8:	f01a fdc4 	bl	2bc54 <k_malloc>
	if (buf) {
   110cc:	4601      	mov	r1, r0
   110ce:	b160      	cbz	r0, 110ea <uart_work_handler+0x26>
		buf->len = 0;
   110d0:	2300      	movs	r3, #0
   110d2:	8303      	strh	r3, [r0, #24]
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_RX_TIMEOUT);
   110d4:	4b0e      	ldr	r3, [pc, #56]	; (11110 <uart_work_handler+0x4c>)
   110d6:	6818      	ldr	r0, [r3, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
   110d8:	6883      	ldr	r3, [r0, #8]
   110da:	2214      	movs	r2, #20
   110dc:	68dc      	ldr	r4, [r3, #12]
   110de:	3104      	adds	r1, #4
   110e0:	46a4      	mov	ip, r4
}
   110e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   110e6:	2332      	movs	r3, #50	; 0x32
   110e8:	4760      	bx	ip
   110ea:	4b0a      	ldr	r3, [pc, #40]	; (11114 <uart_work_handler+0x50>)
   110ec:	490a      	ldr	r1, [pc, #40]	; (11118 <uart_work_handler+0x54>)
		LOG_WRN("Not able to allocate UART receive buffer");
   110ee:	480b      	ldr	r0, [pc, #44]	; (1111c <uart_work_handler+0x58>)
   110f0:	1ac9      	subs	r1, r1, r3
   110f2:	08c9      	lsrs	r1, r1, #3
   110f4:	0189      	lsls	r1, r1, #6
   110f6:	f041 0102 	orr.w	r1, r1, #2
   110fa:	f015 fe19 	bl	26d30 <log_0>
}
   110fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   11102:	f240 6267 	movw	r2, #1639	; 0x667
   11106:	2300      	movs	r3, #0
   11108:	4805      	ldr	r0, [pc, #20]	; (11120 <uart_work_handler+0x5c>)
   1110a:	f012 bec3 	b.w	23e94 <k_work_reschedule>
   1110e:	bf00      	nop
   11110:	20009270 	.word	0x20009270
   11114:	0002bfe4 	.word	0x0002bfe4
   11118:	0002c06c 	.word	0x0002c06c
   1111c:	0002cdc6 	.word	0x0002cdc6
   11120:	20008720 	.word	0x20008720

00011124 <uart_init>:
{
   11124:	b570      	push	{r4, r5, r6, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   11126:	4819      	ldr	r0, [pc, #100]	; (1118c <uart_init+0x68>)
   11128:	f011 f988 	bl	2243c <z_impl_device_get_binding>
	uart = device_get_binding(DT_LABEL(DT_NODELABEL(uart0)));
   1112c:	4d18      	ldr	r5, [pc, #96]	; (11190 <uart_init+0x6c>)
   1112e:	6028      	str	r0, [r5, #0]
	if (!uart) {
   11130:	b960      	cbnz	r0, 1114c <uart_init+0x28>
   11132:	4b18      	ldr	r3, [pc, #96]	; (11194 <uart_init+0x70>)
   11134:	4918      	ldr	r1, [pc, #96]	; (11198 <uart_init+0x74>)
		LOG_ERR("UART binding failed");
   11136:	4819      	ldr	r0, [pc, #100]	; (1119c <uart_init+0x78>)
   11138:	1ac9      	subs	r1, r1, r3
   1113a:	08c9      	lsrs	r1, r1, #3
   1113c:	0189      	lsls	r1, r1, #6
   1113e:	f041 0101 	orr.w	r1, r1, #1
   11142:	f015 fdf5 	bl	26d30 <log_0>
		return -ENXIO;
   11146:	f06f 0005 	mvn.w	r0, #5
}
   1114a:	bd70      	pop	{r4, r5, r6, pc}
	rx = k_malloc(sizeof(*rx));
   1114c:	201c      	movs	r0, #28
   1114e:	f01a fd81 	bl	2bc54 <k_malloc>
	if (rx) {
   11152:	4604      	mov	r4, r0
   11154:	b1b8      	cbz	r0, 11186 <uart_init+0x62>
		rx->len = 0;
   11156:	2600      	movs	r6, #0
	k_work_init_delayable(&uart_work, uart_work_handler);
   11158:	4911      	ldr	r1, [pc, #68]	; (111a0 <uart_init+0x7c>)
		rx->len = 0;
   1115a:	8306      	strh	r6, [r0, #24]
	k_work_init_delayable(&uart_work, uart_work_handler);
   1115c:	4811      	ldr	r0, [pc, #68]	; (111a4 <uart_init+0x80>)
   1115e:	f012 fd75 	bl	23c4c <k_work_init_delayable>
	err = uart_callback_set(uart, uart_cb, NULL);
   11162:	6828      	ldr	r0, [r5, #0]
	return api->callback_set(dev, callback, user_data);
   11164:	4632      	mov	r2, r6
   11166:	6883      	ldr	r3, [r0, #8]
   11168:	490f      	ldr	r1, [pc, #60]	; (111a8 <uart_init+0x84>)
   1116a:	681b      	ldr	r3, [r3, #0]
   1116c:	4798      	blx	r3
	if (err) {
   1116e:	2800      	cmp	r0, #0
   11170:	d1eb      	bne.n	1114a <uart_init+0x26>
  	return uart_rx_enable(uart, rx->data, sizeof(rx->data),
   11172:	6828      	ldr	r0, [r5, #0]
	return api->rx_enable(dev, buf, len, timeout);
   11174:	6883      	ldr	r3, [r0, #8]
   11176:	1d21      	adds	r1, r4, #4
   11178:	68dd      	ldr	r5, [r3, #12]
   1117a:	2214      	movs	r2, #20
   1117c:	46ac      	mov	ip, r5
}
   1117e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11182:	2332      	movs	r3, #50	; 0x32
   11184:	4760      	bx	ip
		return -ENOMEM;
   11186:	f06f 000b 	mvn.w	r0, #11
   1118a:	e7de      	b.n	1114a <uart_init+0x26>
   1118c:	0002cdef 	.word	0x0002cdef
   11190:	20009270 	.word	0x20009270
   11194:	0002bfe4 	.word	0x0002bfe4
   11198:	0002c06c 	.word	0x0002c06c
   1119c:	0002cdf6 	.word	0x0002cdf6
   111a0:	000110c5 	.word	0x000110c5
   111a4:	20008720 	.word	0x20008720
   111a8:	00011225 	.word	0x00011225

000111ac <security_changed>:
{
   111ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   111ae:	4617      	mov	r7, r2
   111b0:	b08b      	sub	sp, #44	; 0x2c
   111b2:	460e      	mov	r6, r1
   111b4:	4605      	mov	r5, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   111b6:	f017 fdc6 	bl	28d46 <bt_conn_get_dst>
   111ba:	a902      	add	r1, sp, #8
   111bc:	f7ff fd7a 	bl	10cb4 <bt_addr_le_to_str.constprop.0>
	if (!err) {
   111c0:	4c13      	ldr	r4, [pc, #76]	; (11210 <security_changed+0x64>)
   111c2:	4b14      	ldr	r3, [pc, #80]	; (11214 <security_changed+0x68>)
   111c4:	1ae4      	subs	r4, r4, r3
   111c6:	08e4      	lsrs	r4, r4, #3
   111c8:	01a4      	lsls	r4, r4, #6
   111ca:	b99f      	cbnz	r7, 111f4 <security_changed+0x48>
   111cc:	a802      	add	r0, sp, #8
   111ce:	f001 fb8d 	bl	128ec <z_log_strdup>
		LOG_INF("Security changed: %s level %u", log_strdup(addr),
   111d2:	f044 0403 	orr.w	r4, r4, #3
   111d6:	4601      	mov	r1, r0
   111d8:	4623      	mov	r3, r4
   111da:	4632      	mov	r2, r6
   111dc:	480e      	ldr	r0, [pc, #56]	; (11218 <security_changed+0x6c>)
   111de:	f015 fdc8 	bl	26d72 <log_2>
	if (conn != default_conn) {
   111e2:	4b0e      	ldr	r3, [pc, #56]	; (1121c <security_changed+0x70>)
   111e4:	681b      	ldr	r3, [r3, #0]
   111e6:	429d      	cmp	r5, r3
   111e8:	d102      	bne.n	111f0 <security_changed+0x44>
   111ea:	4628      	mov	r0, r5
   111ec:	f7ff fd30 	bl	10c50 <gatt_discover.part.0>
}
   111f0:	b00b      	add	sp, #44	; 0x2c
   111f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   111f4:	a802      	add	r0, sp, #8
   111f6:	f001 fb79 	bl	128ec <z_log_strdup>
		LOG_WRN("Security failed: %s level %u err %d", log_strdup(addr),
   111fa:	f044 0402 	orr.w	r4, r4, #2
   111fe:	4601      	mov	r1, r0
   11200:	463b      	mov	r3, r7
   11202:	4632      	mov	r2, r6
   11204:	4806      	ldr	r0, [pc, #24]	; (11220 <security_changed+0x74>)
   11206:	f8ad 4000 	strh.w	r4, [sp]
   1120a:	f015 fdcb 	bl	26da4 <log_3>
   1120e:	e7e8      	b.n	111e2 <security_changed+0x36>
   11210:	0002c06c 	.word	0x0002c06c
   11214:	0002bfe4 	.word	0x0002bfe4
   11218:	0002ce0a 	.word	0x0002ce0a
   1121c:	20009224 	.word	0x20009224
   11220:	0002ce28 	.word	0x0002ce28

00011224 <uart_cb>:
{
   11224:	b570      	push	{r4, r5, r6, lr}
   11226:	780b      	ldrb	r3, [r1, #0]
   11228:	460c      	mov	r4, r1
   1122a:	2b05      	cmp	r3, #5
   1122c:	f200 80ad 	bhi.w	1138a <uart_cb+0x166>
   11230:	e8df f003 	tbb	[pc, r3]
   11234:	8438ac03 	.word	0x8438ac03
   11238:	609d      	.short	0x609d
		if ((evt->data.tx.len == 0) ||
   1123a:	688b      	ldr	r3, [r1, #8]
   1123c:	2b00      	cmp	r3, #0
   1123e:	f000 80a4 	beq.w	1138a <uart_cb+0x166>
		    (!evt->data.tx.buf)) {
   11242:	6848      	ldr	r0, [r1, #4]
		if ((evt->data.tx.len == 0) ||
   11244:	2800      	cmp	r0, #0
   11246:	f000 80a0 	beq.w	1138a <uart_cb+0x166>
		if (aborted_buf) {
   1124a:	4a5b      	ldr	r2, [pc, #364]	; (113b8 <uart_cb+0x194>)
   1124c:	6813      	ldr	r3, [r2, #0]
   1124e:	b33b      	cbz	r3, 112a0 <uart_cb+0x7c>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
   11250:	1f18      	subs	r0, r3, #4
			aborted_buf = NULL;
   11252:	2300      	movs	r3, #0
   11254:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
   11256:	4a59      	ldr	r2, [pc, #356]	; (113bc <uart_cb+0x198>)
   11258:	6013      	str	r3, [r2, #0]
		k_free(buf);
   1125a:	f01a fcf4 	bl	2bc46 <k_free>
	return z_impl_k_queue_get(queue, timeout);
   1125e:	2200      	movs	r2, #0
   11260:	2300      	movs	r3, #0
   11262:	4857      	ldr	r0, [pc, #348]	; (113c0 <uart_cb+0x19c>)
   11264:	f012 f8ac 	bl	233c0 <z_impl_k_queue_get>
		if (!buf) {
   11268:	4601      	mov	r1, r0
   1126a:	2800      	cmp	r0, #0
   1126c:	f000 808d 	beq.w	1138a <uart_cb+0x166>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS)) {
   11270:	4b54      	ldr	r3, [pc, #336]	; (113c4 <uart_cb+0x1a0>)
   11272:	8b0a      	ldrh	r2, [r1, #24]
   11274:	6818      	ldr	r0, [r3, #0]
	return api->tx(dev, buf, len, timeout);
   11276:	6883      	ldr	r3, [r0, #8]
   11278:	3104      	adds	r1, #4
   1127a:	685c      	ldr	r4, [r3, #4]
   1127c:	f04f 33ff 	mov.w	r3, #4294967295
   11280:	47a0      	blx	r4
   11282:	2800      	cmp	r0, #0
   11284:	f000 8081 	beq.w	1138a <uart_cb+0x166>
   11288:	494f      	ldr	r1, [pc, #316]	; (113c8 <uart_cb+0x1a4>)
   1128a:	4b50      	ldr	r3, [pc, #320]	; (113cc <uart_cb+0x1a8>)
			LOG_WRN("Failed to send data over UART");
   1128c:	4850      	ldr	r0, [pc, #320]	; (113d0 <uart_cb+0x1ac>)
   1128e:	1ac9      	subs	r1, r1, r3
   11290:	08c9      	lsrs	r1, r1, #3
   11292:	0189      	lsls	r1, r1, #6
   11294:	f041 0102 	orr.w	r1, r1, #2
}
   11298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_WRN("Not able to allocate UART receive buffer");
   1129c:	f015 bd48 	b.w	26d30 <log_0>
			buf = CONTAINER_OF(evt->data.tx.buf,
   112a0:	3804      	subs	r0, #4
   112a2:	e7da      	b.n	1125a <uart_cb+0x36>
		buf_release = false;
   112a4:	2500      	movs	r5, #0
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
   112a6:	6848      	ldr	r0, [r1, #4]
		buf->len += evt->data.rx.len;
   112a8:	68e2      	ldr	r2, [r4, #12]
   112aa:	8a83      	ldrh	r3, [r0, #20]
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
   112ac:	1f01      	subs	r1, r0, #4
		buf->len += evt->data.rx.len;
   112ae:	4413      	add	r3, r2
   112b0:	b29b      	uxth	r3, r3
		buf_release = false;
   112b2:	4a48      	ldr	r2, [pc, #288]	; (113d4 <uart_cb+0x1b0>)
		if (buf->len == UART_BUF_SIZE) {
   112b4:	2b14      	cmp	r3, #20
		buf_release = false;
   112b6:	7015      	strb	r5, [r2, #0]
		buf->len += evt->data.rx.len;
   112b8:	8283      	strh	r3, [r0, #20]
		if (buf->len == UART_BUF_SIZE) {
   112ba:	4615      	mov	r5, r2
   112bc:	d104      	bne.n	112c8 <uart_cb+0xa4>
}
   112be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_fifo_put(&fifo_uart_rx_data, buf);
   112c2:	4845      	ldr	r0, [pc, #276]	; (113d8 <uart_cb+0x1b4>)
   112c4:	f01a bb7a 	b.w	2b9bc <k_queue_append>
		} else if ((evt->data.rx.buf[buf->len - 1] == '\n') ||
   112c8:	4403      	add	r3, r0
   112ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   112ce:	2b0a      	cmp	r3, #10
   112d0:	d001      	beq.n	112d6 <uart_cb+0xb2>
   112d2:	2b0d      	cmp	r3, #13
   112d4:	d159      	bne.n	1138a <uart_cb+0x166>
			k_fifo_put(&fifo_uart_rx_data, buf);
   112d6:	4840      	ldr	r0, [pc, #256]	; (113d8 <uart_cb+0x1b4>)
   112d8:	f01a fb70 	bl	2b9bc <k_queue_append>
			current_buf = evt->data.rx.buf;
   112dc:	6862      	ldr	r2, [r4, #4]
   112de:	4b3f      	ldr	r3, [pc, #252]	; (113dc <uart_cb+0x1b8>)
   112e0:	601a      	str	r2, [r3, #0]
			buf_release = true;
   112e2:	2301      	movs	r3, #1
   112e4:	702b      	strb	r3, [r5, #0]
			uart_rx_disable(uart);
   112e6:	4b37      	ldr	r3, [pc, #220]	; (113c4 <uart_cb+0x1a0>)
   112e8:	6818      	ldr	r0, [r3, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
   112ea:	6883      	ldr	r3, [r0, #8]
}
   112ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   112f0:	695b      	ldr	r3, [r3, #20]
   112f2:	4718      	bx	r3
		buf = k_malloc(sizeof(*buf));
   112f4:	201c      	movs	r0, #28
   112f6:	f01a fcad 	bl	2bc54 <k_malloc>
		if (buf) {
   112fa:	4601      	mov	r1, r0
   112fc:	b160      	cbz	r0, 11318 <uart_cb+0xf4>
			buf->len = 0;
   112fe:	2300      	movs	r3, #0
   11300:	8303      	strh	r3, [r0, #24]
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
   11302:	4b30      	ldr	r3, [pc, #192]	; (113c4 <uart_cb+0x1a0>)
   11304:	6818      	ldr	r0, [r3, #0]
	return api->rx_enable(dev, buf, len, timeout);
   11306:	6883      	ldr	r3, [r0, #8]
   11308:	2214      	movs	r2, #20
   1130a:	68dc      	ldr	r4, [r3, #12]
   1130c:	2332      	movs	r3, #50	; 0x32
   1130e:	46a4      	mov	ip, r4
   11310:	3104      	adds	r1, #4
}
   11312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->tx(dev, buf, len, timeout);
   11316:	4760      	bx	ip
   11318:	4b2c      	ldr	r3, [pc, #176]	; (113cc <uart_cb+0x1a8>)
   1131a:	492b      	ldr	r1, [pc, #172]	; (113c8 <uart_cb+0x1a4>)
			LOG_WRN("Not able to allocate UART receive buffer");
   1131c:	4830      	ldr	r0, [pc, #192]	; (113e0 <uart_cb+0x1bc>)
   1131e:	1ac9      	subs	r1, r1, r3
   11320:	08c9      	lsrs	r1, r1, #3
   11322:	0189      	lsls	r1, r1, #6
   11324:	f041 0102 	orr.w	r1, r1, #2
   11328:	f015 fd02 	bl	26d30 <log_0>
}
   1132c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   11330:	f240 6267 	movw	r2, #1639	; 0x667
   11334:	2300      	movs	r3, #0
   11336:	482b      	ldr	r0, [pc, #172]	; (113e4 <uart_cb+0x1c0>)
   11338:	f012 bdac 	b.w	23e94 <k_work_reschedule>
		buf = k_malloc(sizeof(*buf));
   1133c:	201c      	movs	r0, #28
   1133e:	f01a fc89 	bl	2bc54 <k_malloc>
		if (buf) {
   11342:	4601      	mov	r1, r0
   11344:	b150      	cbz	r0, 1135c <uart_cb+0x138>
}
   11346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			buf->len = 0;
   1134a:	2300      	movs	r3, #0
   1134c:	8303      	strh	r3, [r0, #24]
			uart_rx_buf_rsp(uart, buf->data, sizeof(buf->data));
   1134e:	4b1d      	ldr	r3, [pc, #116]	; (113c4 <uart_cb+0x1a0>)
	return api->rx_buf_rsp(dev, buf, len);
   11350:	2214      	movs	r2, #20
   11352:	6818      	ldr	r0, [r3, #0]
   11354:	3104      	adds	r1, #4
   11356:	6883      	ldr	r3, [r0, #8]
   11358:	691b      	ldr	r3, [r3, #16]
   1135a:	4718      	bx	r3
   1135c:	491a      	ldr	r1, [pc, #104]	; (113c8 <uart_cb+0x1a4>)
   1135e:	4b1b      	ldr	r3, [pc, #108]	; (113cc <uart_cb+0x1a8>)
			LOG_WRN("Not able to allocate UART receive buffer");
   11360:	481f      	ldr	r0, [pc, #124]	; (113e0 <uart_cb+0x1bc>)
   11362:	1ac9      	subs	r1, r1, r3
   11364:	08c9      	lsrs	r1, r1, #3
   11366:	0189      	lsls	r1, r1, #6
   11368:	f041 0102 	orr.w	r1, r1, #2
   1136c:	e794      	b.n	11298 <uart_cb+0x74>
		if (buf_release && (current_buf != evt->data.rx_buf.buf)) {
   1136e:	4d19      	ldr	r5, [pc, #100]	; (113d4 <uart_cb+0x1b0>)
   11370:	782b      	ldrb	r3, [r5, #0]
   11372:	b153      	cbz	r3, 1138a <uart_cb+0x166>
   11374:	4c19      	ldr	r4, [pc, #100]	; (113dc <uart_cb+0x1b8>)
		buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t,
   11376:	6848      	ldr	r0, [r1, #4]
		if (buf_release && (current_buf != evt->data.rx_buf.buf)) {
   11378:	6823      	ldr	r3, [r4, #0]
   1137a:	4298      	cmp	r0, r3
   1137c:	d005      	beq.n	1138a <uart_cb+0x166>
			k_free(buf);
   1137e:	3804      	subs	r0, #4
   11380:	f01a fc61 	bl	2bc46 <k_free>
			buf_release = false;
   11384:	2300      	movs	r3, #0
   11386:	702b      	strb	r3, [r5, #0]
			current_buf = NULL;
   11388:	6023      	str	r3, [r4, #0]
}
   1138a:	bd70      	pop	{r4, r5, r6, pc}
			if (!aborted_buf) {
   1138c:	4b0a      	ldr	r3, [pc, #40]	; (113b8 <uart_cb+0x194>)
   1138e:	681a      	ldr	r2, [r3, #0]
   11390:	b90a      	cbnz	r2, 11396 <uart_cb+0x172>
				aborted_buf = (uint8_t *)evt->data.tx.buf;
   11392:	684a      	ldr	r2, [r1, #4]
   11394:	601a      	str	r2, [r3, #0]
			aborted_len += evt->data.tx.len;
   11396:	4a09      	ldr	r2, [pc, #36]	; (113bc <uart_cb+0x198>)
   11398:	68a1      	ldr	r1, [r4, #8]
   1139a:	6810      	ldr	r0, [r2, #0]
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
   1139c:	681c      	ldr	r4, [r3, #0]
			aborted_len += evt->data.tx.len;
   1139e:	4401      	add	r1, r0
			uart_tx(uart, &buf->data[aborted_len],
   113a0:	4b08      	ldr	r3, [pc, #32]	; (113c4 <uart_cb+0x1a0>)
			aborted_len += evt->data.tx.len;
   113a2:	6011      	str	r1, [r2, #0]
				buf->len - aborted_len, SYS_FOREVER_MS);
   113a4:	8aa2      	ldrh	r2, [r4, #20]
			uart_tx(uart, &buf->data[aborted_len],
   113a6:	6818      	ldr	r0, [r3, #0]
   113a8:	1a52      	subs	r2, r2, r1
	return api->tx(dev, buf, len, timeout);
   113aa:	6883      	ldr	r3, [r0, #8]
   113ac:	4421      	add	r1, r4
   113ae:	685d      	ldr	r5, [r3, #4]
   113b0:	f04f 33ff 	mov.w	r3, #4294967295
   113b4:	46ac      	mov	ip, r5
   113b6:	e7ac      	b.n	11312 <uart_cb+0xee>
   113b8:	20009218 	.word	0x20009218
   113bc:	2000921c 	.word	0x2000921c
   113c0:	200085b4 	.word	0x200085b4
   113c4:	20009270 	.word	0x20009270
   113c8:	0002c06c 	.word	0x0002c06c
   113cc:	0002bfe4 	.word	0x0002bfe4
   113d0:	0002ce4c 	.word	0x0002ce4c
   113d4:	2000a424 	.word	0x2000a424
   113d8:	20008598 	.word	0x20008598
   113dc:	20009220 	.word	0x20009220
   113e0:	0002cdc6 	.word	0x0002cdc6
   113e4:	20008720 	.word	0x20008720

000113e8 <main>:
	net_buf_unref(rsp);
}
/* End of user define API */

void main(void)
{
   113e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err;

	err = bt_conn_auth_cb_register(&conn_auth_callbacks);
   113ec:	4841      	ldr	r0, [pc, #260]	; (114f4 <main+0x10c>)
{
   113ee:	b085      	sub	sp, #20
	err = bt_conn_auth_cb_register(&conn_auth_callbacks);
   113f0:	f009 f8be 	bl	1a570 <bt_conn_auth_cb_register>
	if (err) {
   113f4:	4c40      	ldr	r4, [pc, #256]	; (114f8 <main+0x110>)
   113f6:	4b41      	ldr	r3, [pc, #260]	; (114fc <main+0x114>)
   113f8:	1ae4      	subs	r4, r4, r3
   113fa:	08e4      	lsrs	r4, r4, #3
   113fc:	01a4      	lsls	r4, r4, #6
   113fe:	b138      	cbz	r0, 11410 <main+0x28>
		LOG_ERR("Failed to register authorization callbacks.");
   11400:	483f      	ldr	r0, [pc, #252]	; (11500 <main+0x118>)
   11402:	f044 0101 	orr.w	r1, r4, #1
   11406:	f015 fc93 	bl	26d30 <log_0>

		read_conn_rssi(default_conn_handle, &rssi);
		LOG_INF("Connected (%d) - RSSI = %d\n", default_conn_handle, rssi);
		k_sleep(K_SECONDS(1));
	}
}
   1140a:	b005      	add	sp, #20
   1140c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_enable(NULL);
   11410:	f007 f91e 	bl	18650 <bt_enable>
	if (err) {
   11414:	4605      	mov	r5, r0
   11416:	b130      	cbz	r0, 11426 <main+0x3e>
		LOG_ERR("Bluetooth init failed (err %d)", err);
   11418:	4601      	mov	r1, r0
   1141a:	483a      	ldr	r0, [pc, #232]	; (11504 <main+0x11c>)
   1141c:	f044 0201 	orr.w	r2, r4, #1
		LOG_ERR("Scanning failed to start (err %d)", err);
   11420:	f015 fc93 	bl	26d4a <log_1>
		return;
   11424:	e7f1      	b.n	1140a <main+0x22>
	LOG_INF("Bluetooth initialized");
   11426:	f044 0103 	orr.w	r1, r4, #3
   1142a:	4837      	ldr	r0, [pc, #220]	; (11508 <main+0x120>)
   1142c:	f015 fc80 	bl	26d30 <log_0>
		settings_load();
   11430:	f016 f8bc 	bl	275ac <settings_load>
	bt_conn_cb_register(&conn_callbacks);
   11434:	4835      	ldr	r0, [pc, #212]	; (1150c <main+0x124>)
   11436:	f008 faf7 	bl	19a28 <bt_conn_cb_register>
	int (*module_init[])(void) = {uart_init, scan_init, nus_client_init};
   1143a:	ab01      	add	r3, sp, #4
   1143c:	461e      	mov	r6, r3
   1143e:	4a34      	ldr	r2, [pc, #208]	; (11510 <main+0x128>)
   11440:	ca07      	ldmia	r2, {r0, r1, r2}
   11442:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		err = (*module_init[i])();
   11446:	f856 3b04 	ldr.w	r3, [r6], #4
   1144a:	4798      	blx	r3
		if (err) {
   1144c:	2800      	cmp	r0, #0
   1144e:	d1dc      	bne.n	1140a <main+0x22>
	for (size_t i = 0; i < ARRAY_SIZE(module_init); i++) {
   11450:	3501      	adds	r5, #1
   11452:	2d03      	cmp	r5, #3
   11454:	d1f7      	bne.n	11446 <main+0x5e>
	printk("Starting Bluetooth Central UART example\n");
   11456:	482f      	ldr	r0, [pc, #188]	; (11514 <main+0x12c>)
   11458:	f015 f960 	bl	2671c <printk>
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   1145c:	2001      	movs	r0, #1
   1145e:	f004 fb13 	bl	15a88 <bt_scan_start>
	if (err) {
   11462:	4605      	mov	r5, r0
   11464:	b120      	cbz	r0, 11470 <main+0x88>
		LOG_ERR("Scanning failed to start (err %d)", err);
   11466:	4601      	mov	r1, r0
   11468:	f044 0201 	orr.w	r2, r4, #1
   1146c:	482a      	ldr	r0, [pc, #168]	; (11518 <main+0x130>)
   1146e:	e7d7      	b.n	11420 <main+0x38>
	LOG_INF("Scanning successfully started");
   11470:	482a      	ldr	r0, [pc, #168]	; (1151c <main+0x134>)
   11472:	f044 0103 	orr.w	r1, r4, #3
   11476:	f015 fc5b 	bl	26d30 <log_0>
	int8_t rssi = 0xFF;
   1147a:	f04f 37ff 	mov.w	r7, #4294967295
		printk("Read RSSI err: %d reason 0x%02x\n", err, reason);
   1147e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 11524 <main+0x13c>
		printk("Unable to allocate command buffer\n");
   11482:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 11528 <main+0x140>
	buf = bt_hci_cmd_create(BT_HCI_OP_READ_RSSI, sizeof(*cp));
   11486:	2102      	movs	r1, #2
   11488:	f241 4005 	movw	r0, #5125	; 0x1405
	struct net_buf *buf, *rsp = NULL;
   1148c:	9500      	str	r5, [sp, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_READ_RSSI, sizeof(*cp));
   1148e:	f006 fa75 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   11492:	4606      	mov	r6, r0
   11494:	b978      	cbnz	r0, 114b6 <main+0xce>
		printk("Unable to allocate command buffer\n");
   11496:	4648      	mov	r0, r9
   11498:	f015 f940 	bl	2671c <printk>
		LOG_INF("Connected (%d) - RSSI = %d\n", default_conn_handle, rssi);
   1149c:	463a      	mov	r2, r7
   1149e:	2100      	movs	r1, #0
   114a0:	481f      	ldr	r0, [pc, #124]	; (11520 <main+0x138>)
   114a2:	f044 0303 	orr.w	r3, r4, #3
   114a6:	f015 fc64 	bl	26d72 <log_2>
	return z_impl_k_sleep(timeout);
   114aa:	2100      	movs	r1, #0
   114ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   114b0:	f013 feb4 	bl	2521c <z_impl_k_sleep>
	for (;;) {
   114b4:	e7e7      	b.n	11486 <main+0x9e>
   114b6:	2102      	movs	r1, #2
   114b8:	3008      	adds	r0, #8
   114ba:	f00e ff25 	bl	20308 <net_buf_simple_add>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_RSSI, buf, &rsp);
   114be:	4631      	mov	r1, r6
	cp->handle = sys_cpu_to_le16(handle);
   114c0:	7005      	strb	r5, [r0, #0]
   114c2:	7045      	strb	r5, [r0, #1]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_RSSI, buf, &rsp);
   114c4:	466a      	mov	r2, sp
   114c6:	f241 4005 	movw	r0, #5125	; 0x1405
   114ca:	f006 fa9f 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
   114ce:	4601      	mov	r1, r0
   114d0:	9800      	ldr	r0, [sp, #0]
   114d2:	b141      	cbz	r1, 114e6 <main+0xfe>
		uint8_t reason = rsp ?
   114d4:	b128      	cbz	r0, 114e2 <main+0xfa>
   114d6:	6883      	ldr	r3, [r0, #8]
   114d8:	781a      	ldrb	r2, [r3, #0]
		printk("Read RSSI err: %d reason 0x%02x\n", err, reason);
   114da:	4640      	mov	r0, r8
   114dc:	f015 f91e 	bl	2671c <printk>
		return;
   114e0:	e7dc      	b.n	1149c <main+0xb4>
		uint8_t reason = rsp ?
   114e2:	4602      	mov	r2, r0
   114e4:	e7f9      	b.n	114da <main+0xf2>
	*rssi = rp->rssi;
   114e6:	6883      	ldr	r3, [r0, #8]
   114e8:	f993 7003 	ldrsb.w	r7, [r3, #3]
	net_buf_unref(rsp);
   114ec:	f00e fddc 	bl	200a8 <net_buf_unref>
   114f0:	e7d4      	b.n	1149c <main+0xb4>
   114f2:	bf00      	nop
   114f4:	20008148 	.word	0x20008148
   114f8:	0002c06c 	.word	0x0002c06c
   114fc:	0002bfe4 	.word	0x0002bfe4
   11500:	0002ce6a 	.word	0x0002ce6a
   11504:	0002ce96 	.word	0x0002ce96
   11508:	0002ceb5 	.word	0x0002ceb5
   1150c:	2000816c 	.word	0x2000816c
   11510:	0002c174 	.word	0x0002c174
   11514:	0002cecb 	.word	0x0002cecb
   11518:	0002cc4c 	.word	0x0002cc4c
   1151c:	0002cef4 	.word	0x0002cef4
   11520:	0002cf56 	.word	0x0002cf56
   11524:	0002cf35 	.word	0x0002cf35
   11528:	0002cf12 	.word	0x0002cf12

0001152c <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   1152c:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1152e:	4c0a      	ldr	r4, [pc, #40]	; (11558 <crc8_ccitt+0x2c>)
   11530:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   11532:	4291      	cmp	r1, r2
   11534:	d100      	bne.n	11538 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   11536:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   11538:	f811 3b01 	ldrb.w	r3, [r1], #1
   1153c:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1153e:	0903      	lsrs	r3, r0, #4
   11540:	5ce3      	ldrb	r3, [r4, r3]
   11542:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   11546:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   11548:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1154c:	5ce0      	ldrb	r0, [r4, r3]
   1154e:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   11552:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   11554:	e7ed      	b.n	11532 <crc8_ccitt+0x6>
   11556:	bf00      	nop
   11558:	0002cf7f 	.word	0x0002cf7f

0001155c <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1155c:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1155e:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
   11560:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   11564:	2b02      	cmp	r3, #2
{
   11566:	4604      	mov	r4, r0
   11568:	460e      	mov	r6, r1
	notify->result = res;
   1156a:	6081      	str	r1, [r0, #8]
	switch (method) {
   1156c:	d010      	beq.n	11590 <sys_notify_finalize+0x34>
   1156e:	2b03      	cmp	r3, #3
   11570:	d004      	beq.n	1157c <sys_notify_finalize+0x20>
   11572:	2b01      	cmp	r3, #1
   11574:	d10f      	bne.n	11596 <sys_notify_finalize+0x3a>
   11576:	2500      	movs	r5, #0
   11578:	4628      	mov	r0, r5
   1157a:	e001      	b.n	11580 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1157c:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1157e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   11580:	2300      	movs	r3, #0
   11582:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   11584:	b110      	cbz	r0, 1158c <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   11586:	4631      	mov	r1, r6
   11588:	f014 ff3c 	bl	26404 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1158c:	4628      	mov	r0, r5
   1158e:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = NULL;
   11590:	2500      	movs	r5, #0
		sig = notify->method.signal;
   11592:	6800      	ldr	r0, [r0, #0]
		break;
   11594:	e7f4      	b.n	11580 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   11596:	2345      	movs	r3, #69	; 0x45
   11598:	4a05      	ldr	r2, [pc, #20]	; (115b0 <sys_notify_finalize+0x54>)
   1159a:	4906      	ldr	r1, [pc, #24]	; (115b4 <sys_notify_finalize+0x58>)
   1159c:	4806      	ldr	r0, [pc, #24]	; (115b8 <sys_notify_finalize+0x5c>)
   1159e:	f015 f8bd 	bl	2671c <printk>
   115a2:	2145      	movs	r1, #69	; 0x45
   115a4:	4802      	ldr	r0, [pc, #8]	; (115b0 <sys_notify_finalize+0x54>)
   115a6:	f015 fb5e 	bl	26c66 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   115aa:	2500      	movs	r5, #0
   115ac:	e7e7      	b.n	1157e <sys_notify_finalize+0x22>
   115ae:	bf00      	nop
   115b0:	0002cf8f 	.word	0x0002cf8f
   115b4:	0002dee4 	.word	0x0002dee4
   115b8:	0002cfb2 	.word	0x0002cfb2

000115bc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   115bc:	680b      	ldr	r3, [r1, #0]
   115be:	3301      	adds	r3, #1
   115c0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   115c2:	4b01      	ldr	r3, [pc, #4]	; (115c8 <char_out+0xc>)
   115c4:	681b      	ldr	r3, [r3, #0]
   115c6:	4718      	bx	r3
   115c8:	2000819c 	.word	0x2000819c

000115cc <__printk_hook_install>:
	_char_out = fn;
   115cc:	4b01      	ldr	r3, [pc, #4]	; (115d4 <__printk_hook_install+0x8>)
   115ce:	6018      	str	r0, [r3, #0]
}
   115d0:	4770      	bx	lr
   115d2:	bf00      	nop
   115d4:	2000819c 	.word	0x2000819c

000115d8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   115d8:	b507      	push	{r0, r1, r2, lr}
   115da:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   115dc:	2100      	movs	r1, #0
{
   115de:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   115e0:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   115e2:	4803      	ldr	r0, [pc, #12]	; (115f0 <vprintk+0x18>)
   115e4:	a901      	add	r1, sp, #4
   115e6:	f000 fc5f 	bl	11ea8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   115ea:	b003      	add	sp, #12
   115ec:	f85d fb04 	ldr.w	pc, [sp], #4
   115f0:	000115bd 	.word	0x000115bd

000115f4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   115f4:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   115f6:	2500      	movs	r5, #0
{
   115f8:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   115fa:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   115fe:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
   11600:	a901      	add	r1, sp, #4
   11602:	4805      	ldr	r0, [pc, #20]	; (11618 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   11604:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   11606:	f000 fc4f 	bl	11ea8 <cbvprintf>

	if (ctx.count < ctx.max) {
   1160a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   1160e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   11610:	bfb8      	it	lt
   11612:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   11614:	b005      	add	sp, #20
   11616:	bd30      	pop	{r4, r5, pc}
   11618:	000266f7 	.word	0x000266f7

0001161c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   1161c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11620:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
   11624:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   11626:	f019 0f08 	tst.w	r9, #8
{
   1162a:	4604      	mov	r4, r0
   1162c:	9203      	str	r2, [sp, #12]
	if (processing) {
   1162e:	d022      	beq.n	11676 <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
   11630:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   11632:	bf0c      	ite	eq
   11634:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   11638:	f049 0920 	orrne.w	r9, r9, #32
   1163c:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   11640:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11642:	4620      	mov	r0, r4
   11644:	f011 fbd6 	bl	22df4 <z_spin_unlock_valid>
   11648:	b968      	cbnz	r0, 11666 <process_event+0x4a>
   1164a:	23ac      	movs	r3, #172	; 0xac
   1164c:	4a9e      	ldr	r2, [pc, #632]	; (118c8 <process_event+0x2ac>)
   1164e:	499f      	ldr	r1, [pc, #636]	; (118cc <process_event+0x2b0>)
   11650:	489f      	ldr	r0, [pc, #636]	; (118d0 <process_event+0x2b4>)
   11652:	f015 f863 	bl	2671c <printk>
   11656:	4621      	mov	r1, r4
   11658:	489e      	ldr	r0, [pc, #632]	; (118d4 <process_event+0x2b8>)
   1165a:	f015 f85f 	bl	2671c <printk>
   1165e:	21ac      	movs	r1, #172	; 0xac
   11660:	4899      	ldr	r0, [pc, #612]	; (118c8 <process_event+0x2ac>)
   11662:	f015 fb00 	bl	26c66 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   11666:	9b03      	ldr	r3, [sp, #12]
   11668:	f383 8811 	msr	BASEPRI, r3
   1166c:	f3bf 8f6f 	isb	sy
}
   11670:	b005      	add	sp, #20
   11672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   11676:	4f98      	ldr	r7, [pc, #608]	; (118d8 <process_event+0x2bc>)
   11678:	f8df 8254 	ldr.w	r8, [pc, #596]	; 118d0 <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1167c:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   11680:	2902      	cmp	r1, #2
   11682:	d106      	bne.n	11692 <process_event+0x76>
			evt = process_recheck(mgr);
   11684:	4620      	mov	r0, r4
   11686:	f015 f863 	bl	26750 <process_recheck>
		if (evt == EVT_NOP) {
   1168a:	2800      	cmp	r0, #0
   1168c:	d0d8      	beq.n	11640 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
   1168e:	2801      	cmp	r0, #1
   11690:	d168      	bne.n	11764 <process_event+0x148>
			res = mgr->last_res;
   11692:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11696:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   11698:	f1bb 0f00 	cmp.w	fp, #0
   1169c:	da0a      	bge.n	116b4 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   1169e:	2600      	movs	r6, #0
		*clients = mgr->clients;
   116a0:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   116a2:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   116a6:	e9c4 6600 	strd	r6, r6, [r4]
   116aa:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   116ae:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   116b0:	9601      	str	r6, [sp, #4]
   116b2:	e027      	b.n	11704 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   116b4:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   116b8:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   116ba:	2901      	cmp	r1, #1
   116bc:	d834      	bhi.n	11728 <process_event+0x10c>
	list->head = NULL;
   116be:	2100      	movs	r1, #0
   116c0:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   116c4:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   116c6:	6825      	ldr	r5, [r4, #0]
   116c8:	b29b      	uxth	r3, r3
	list->tail = NULL;
   116ca:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   116ce:	d10c      	bne.n	116ea <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   116d0:	428d      	cmp	r5, r1
   116d2:	462a      	mov	r2, r5
   116d4:	bf38      	it	cc
   116d6:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   116d8:	b12a      	cbz	r2, 116e6 <process_event+0xca>
				mgr->refs += 1U;
   116da:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   116dc:	6812      	ldr	r2, [r2, #0]
   116de:	3101      	adds	r1, #1
   116e0:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   116e2:	2a00      	cmp	r2, #0
   116e4:	d1f8      	bne.n	116d8 <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   116e6:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
   116ea:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   116ec:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   116ee:	f015 f82f 	bl	26750 <process_recheck>
   116f2:	4606      	mov	r6, r0
   116f4:	2800      	cmp	r0, #0
   116f6:	d0db      	beq.n	116b0 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   116f8:	8ba3      	ldrh	r3, [r4, #28]
   116fa:	f043 0320 	orr.w	r3, r3, #32
   116fe:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   11700:	2300      	movs	r3, #0
   11702:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11704:	8ba3      	ldrh	r3, [r4, #28]
   11706:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1170a:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1170c:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
   1170e:	d003      	beq.n	11718 <process_event+0xfc>
		if (do_monitors
   11710:	68a2      	ldr	r2, [r4, #8]
   11712:	2a00      	cmp	r2, #0
   11714:	f040 80f0 	bne.w	118f8 <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
   11718:	b91d      	cbnz	r5, 11722 <process_event+0x106>
		    || (transit != NULL)) {
   1171a:	9a01      	ldr	r2, [sp, #4]
   1171c:	2a00      	cmp	r2, #0
   1171e:	f000 8136 	beq.w	1198e <process_event+0x372>
   11722:	f04f 0900 	mov.w	r9, #0
   11726:	e0e9      	b.n	118fc <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
   11728:	2a04      	cmp	r2, #4
   1172a:	d10e      	bne.n	1174a <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1172c:	f023 0307 	bic.w	r3, r3, #7
   11730:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
   11732:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   11734:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   11736:	f015 f80b 	bl	26750 <process_recheck>
   1173a:	4605      	mov	r5, r0
   1173c:	b118      	cbz	r0, 11746 <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1173e:	f042 0220 	orr.w	r2, r2, #32
   11742:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   11744:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   11746:	9501      	str	r5, [sp, #4]
   11748:	e7dc      	b.n	11704 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
   1174a:	4640      	mov	r0, r8
   1174c:	f240 131b 	movw	r3, #283	; 0x11b
   11750:	463a      	mov	r2, r7
   11752:	4962      	ldr	r1, [pc, #392]	; (118dc <process_event+0x2c0>)
   11754:	f014 ffe2 	bl	2671c <printk>
   11758:	f240 111b 	movw	r1, #283	; 0x11b
   1175c:	4638      	mov	r0, r7
   1175e:	f015 fa82 	bl	26c66 <assert_post_action>
   11762:	e7ef      	b.n	11744 <process_event+0x128>
		} else if (evt == EVT_START) {
   11764:	2803      	cmp	r0, #3
   11766:	d135      	bne.n	117d4 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   11768:	f1b9 0f00 	cmp.w	r9, #0
   1176c:	d00b      	beq.n	11786 <process_event+0x16a>
   1176e:	4640      	mov	r0, r8
   11770:	495b      	ldr	r1, [pc, #364]	; (118e0 <process_event+0x2c4>)
   11772:	f44f 73ab 	mov.w	r3, #342	; 0x156
   11776:	463a      	mov	r2, r7
   11778:	f014 ffd0 	bl	2671c <printk>
   1177c:	f44f 71ab 	mov.w	r1, #342	; 0x156
   11780:	4638      	mov	r0, r7
   11782:	f015 fa70 	bl	26c66 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   11786:	6823      	ldr	r3, [r4, #0]
   11788:	b95b      	cbnz	r3, 117a2 <process_event+0x186>
   1178a:	4640      	mov	r0, r8
   1178c:	4955      	ldr	r1, [pc, #340]	; (118e4 <process_event+0x2c8>)
   1178e:	f240 1357 	movw	r3, #343	; 0x157
   11792:	463a      	mov	r2, r7
   11794:	f014 ffc2 	bl	2671c <printk>
   11798:	f240 1157 	movw	r1, #343	; 0x157
   1179c:	4638      	mov	r0, r7
   1179e:	f015 fa62 	bl	26c66 <assert_post_action>
			transit = mgr->transitions->start;
   117a2:	6923      	ldr	r3, [r4, #16]
   117a4:	681b      	ldr	r3, [r3, #0]
   117a6:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   117a8:	b95b      	cbnz	r3, 117c2 <process_event+0x1a6>
   117aa:	4640      	mov	r0, r8
   117ac:	494e      	ldr	r1, [pc, #312]	; (118e8 <process_event+0x2cc>)
   117ae:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   117b2:	463a      	mov	r2, r7
   117b4:	f014 ffb2 	bl	2671c <printk>
   117b8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   117bc:	4638      	mov	r0, r7
   117be:	f015 fa52 	bl	26c66 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   117c2:	8ba3      	ldrh	r3, [r4, #28]
   117c4:	f023 0307 	bic.w	r3, r3, #7
   117c8:	f043 0306 	orr.w	r3, r3, #6
}
   117cc:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   117ce:	83a3      	strh	r3, [r4, #28]
		res = 0;
   117d0:	46ab      	mov	fp, r5
}
   117d2:	e797      	b.n	11704 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
   117d4:	2804      	cmp	r0, #4
   117d6:	d132      	bne.n	1183e <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   117d8:	f1b9 0f02 	cmp.w	r9, #2
   117dc:	d00b      	beq.n	117f6 <process_event+0x1da>
   117de:	4640      	mov	r0, r8
   117e0:	4942      	ldr	r1, [pc, #264]	; (118ec <process_event+0x2d0>)
   117e2:	f240 135d 	movw	r3, #349	; 0x15d
   117e6:	463a      	mov	r2, r7
   117e8:	f014 ff98 	bl	2671c <printk>
   117ec:	f240 115d 	movw	r1, #349	; 0x15d
   117f0:	4638      	mov	r0, r7
   117f2:	f015 fa38 	bl	26c66 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   117f6:	8be3      	ldrh	r3, [r4, #30]
   117f8:	b15b      	cbz	r3, 11812 <process_event+0x1f6>
   117fa:	4640      	mov	r0, r8
   117fc:	493c      	ldr	r1, [pc, #240]	; (118f0 <process_event+0x2d4>)
   117fe:	f44f 73af 	mov.w	r3, #350	; 0x15e
   11802:	463a      	mov	r2, r7
   11804:	f014 ff8a 	bl	2671c <printk>
   11808:	f44f 71af 	mov.w	r1, #350	; 0x15e
   1180c:	4638      	mov	r0, r7
   1180e:	f015 fa2a 	bl	26c66 <assert_post_action>
			transit = mgr->transitions->stop;
   11812:	6923      	ldr	r3, [r4, #16]
   11814:	685b      	ldr	r3, [r3, #4]
   11816:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   11818:	b95b      	cbnz	r3, 11832 <process_event+0x216>
   1181a:	4640      	mov	r0, r8
   1181c:	4932      	ldr	r1, [pc, #200]	; (118e8 <process_event+0x2cc>)
   1181e:	f240 1361 	movw	r3, #353	; 0x161
   11822:	463a      	mov	r2, r7
   11824:	f014 ff7a 	bl	2671c <printk>
   11828:	f240 1161 	movw	r1, #353	; 0x161
   1182c:	4638      	mov	r0, r7
   1182e:	f015 fa1a 	bl	26c66 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11832:	8ba3      	ldrh	r3, [r4, #28]
   11834:	f023 0307 	bic.w	r3, r3, #7
   11838:	f043 0304 	orr.w	r3, r3, #4
   1183c:	e7c6      	b.n	117cc <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
   1183e:	2805      	cmp	r0, #5
   11840:	d132      	bne.n	118a8 <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   11842:	f1b9 0f01 	cmp.w	r9, #1
   11846:	d00b      	beq.n	11860 <process_event+0x244>
   11848:	4640      	mov	r0, r8
   1184a:	492a      	ldr	r1, [pc, #168]	; (118f4 <process_event+0x2d8>)
   1184c:	f44f 73b2 	mov.w	r3, #356	; 0x164
   11850:	463a      	mov	r2, r7
   11852:	f014 ff63 	bl	2671c <printk>
   11856:	f44f 71b2 	mov.w	r1, #356	; 0x164
   1185a:	4638      	mov	r0, r7
   1185c:	f015 fa03 	bl	26c66 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   11860:	6823      	ldr	r3, [r4, #0]
   11862:	b95b      	cbnz	r3, 1187c <process_event+0x260>
   11864:	4640      	mov	r0, r8
   11866:	491f      	ldr	r1, [pc, #124]	; (118e4 <process_event+0x2c8>)
   11868:	f240 1365 	movw	r3, #357	; 0x165
   1186c:	463a      	mov	r2, r7
   1186e:	f014 ff55 	bl	2671c <printk>
   11872:	f240 1165 	movw	r1, #357	; 0x165
   11876:	4638      	mov	r0, r7
   11878:	f015 f9f5 	bl	26c66 <assert_post_action>
			transit = mgr->transitions->reset;
   1187c:	6923      	ldr	r3, [r4, #16]
   1187e:	689b      	ldr	r3, [r3, #8]
   11880:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   11882:	b95b      	cbnz	r3, 1189c <process_event+0x280>
   11884:	4640      	mov	r0, r8
   11886:	4918      	ldr	r1, [pc, #96]	; (118e8 <process_event+0x2cc>)
   11888:	f44f 73b4 	mov.w	r3, #360	; 0x168
   1188c:	463a      	mov	r2, r7
   1188e:	f014 ff45 	bl	2671c <printk>
   11892:	f44f 71b4 	mov.w	r1, #360	; 0x168
   11896:	4638      	mov	r0, r7
   11898:	f015 f9e5 	bl	26c66 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1189c:	8ba3      	ldrh	r3, [r4, #28]
   1189e:	f023 0307 	bic.w	r3, r3, #7
   118a2:	f043 0305 	orr.w	r3, r3, #5
   118a6:	e791      	b.n	117cc <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
   118a8:	2500      	movs	r5, #0
   118aa:	f240 136b 	movw	r3, #363	; 0x16b
   118ae:	463a      	mov	r2, r7
   118b0:	4640      	mov	r0, r8
   118b2:	490a      	ldr	r1, [pc, #40]	; (118dc <process_event+0x2c0>)
   118b4:	f014 ff32 	bl	2671c <printk>
   118b8:	f240 116b 	movw	r1, #363	; 0x16b
   118bc:	4638      	mov	r0, r7
   118be:	f015 f9d2 	bl	26c66 <assert_post_action>
		onoff_transition_fn transit = NULL;
   118c2:	9501      	str	r5, [sp, #4]
   118c4:	e784      	b.n	117d0 <process_event+0x1b4>
   118c6:	bf00      	nop
   118c8:	0002d072 	.word	0x0002d072
   118cc:	0002d098 	.word	0x0002d098
   118d0:	0002cfb2 	.word	0x0002cfb2
   118d4:	0002d0af 	.word	0x0002d0af
   118d8:	0002cfcf 	.word	0x0002cfcf
   118dc:	0002dee4 	.word	0x0002dee4
   118e0:	0002cff1 	.word	0x0002cff1
   118e4:	0002cffd 	.word	0x0002cffd
   118e8:	0002d020 	.word	0x0002d020
   118ec:	0002d037 	.word	0x0002d037
   118f0:	0002d04d 	.word	0x0002d04d
   118f4:	0002d05c 	.word	0x0002d05c
				   && !sys_slist_is_empty(&mgr->monitors);
   118f8:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   118fc:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   11900:	f104 0a14 	add.w	sl, r4, #20
   11904:	4650      	mov	r0, sl
			mgr->flags = flags;
   11906:	83a3      	strh	r3, [r4, #28]
   11908:	f011 fa74 	bl	22df4 <z_spin_unlock_valid>
   1190c:	b968      	cbnz	r0, 1192a <process_event+0x30e>
   1190e:	23ac      	movs	r3, #172	; 0xac
   11910:	4640      	mov	r0, r8
   11912:	4a39      	ldr	r2, [pc, #228]	; (119f8 <process_event+0x3dc>)
   11914:	4939      	ldr	r1, [pc, #228]	; (119fc <process_event+0x3e0>)
   11916:	f014 ff01 	bl	2671c <printk>
   1191a:	4651      	mov	r1, sl
   1191c:	4838      	ldr	r0, [pc, #224]	; (11a00 <process_event+0x3e4>)
   1191e:	f014 fefd 	bl	2671c <printk>
   11922:	21ac      	movs	r1, #172	; 0xac
   11924:	4834      	ldr	r0, [pc, #208]	; (119f8 <process_event+0x3dc>)
   11926:	f015 f99e 	bl	26c66 <assert_post_action>
   1192a:	9b03      	ldr	r3, [sp, #12]
   1192c:	f383 8811 	msr	BASEPRI, r3
   11930:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   11934:	f1b9 0f00 	cmp.w	r9, #0
   11938:	d138      	bne.n	119ac <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
   1193a:	2d00      	cmp	r5, #0
   1193c:	d14b      	bne.n	119d6 <process_event+0x3ba>
			if (transit != NULL) {
   1193e:	9b01      	ldr	r3, [sp, #4]
   11940:	b113      	cbz	r3, 11948 <process_event+0x32c>
				transit(mgr, transition_complete);
   11942:	4620      	mov	r0, r4
   11944:	492f      	ldr	r1, [pc, #188]	; (11a04 <process_event+0x3e8>)
   11946:	4798      	blx	r3
	__asm__ volatile(
   11948:	f04f 0320 	mov.w	r3, #32
   1194c:	f3ef 8b11 	mrs	fp, BASEPRI
   11950:	f383 8811 	msr	BASEPRI, r3
   11954:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11958:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
   1195a:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1195e:	f011 fa3b 	bl	22dd8 <z_spin_lock_valid>
   11962:	b968      	cbnz	r0, 11980 <process_event+0x364>
   11964:	2381      	movs	r3, #129	; 0x81
   11966:	4640      	mov	r0, r8
   11968:	4a23      	ldr	r2, [pc, #140]	; (119f8 <process_event+0x3dc>)
   1196a:	4927      	ldr	r1, [pc, #156]	; (11a08 <process_event+0x3ec>)
   1196c:	f014 fed6 	bl	2671c <printk>
   11970:	4651      	mov	r1, sl
   11972:	4826      	ldr	r0, [pc, #152]	; (11a0c <process_event+0x3f0>)
   11974:	f014 fed2 	bl	2671c <printk>
   11978:	2181      	movs	r1, #129	; 0x81
   1197a:	481f      	ldr	r0, [pc, #124]	; (119f8 <process_event+0x3dc>)
   1197c:	f015 f973 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   11980:	4650      	mov	r0, sl
   11982:	f011 fa45 	bl	22e10 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   11986:	8ba3      	ldrh	r3, [r4, #28]
   11988:	f023 0308 	bic.w	r3, r3, #8
   1198c:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1198e:	8ba3      	ldrh	r3, [r4, #28]
   11990:	06da      	lsls	r2, r3, #27
   11992:	d528      	bpl.n	119e6 <process_event+0x3ca>
			evt = EVT_COMPLETE;
   11994:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11996:	f023 0310 	bic.w	r3, r3, #16
   1199a:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   1199c:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   119a0:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   119a4:	2900      	cmp	r1, #0
   119a6:	f47f ae6b 	bne.w	11680 <process_event+0x64>
out:
   119aa:	e649      	b.n	11640 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   119ac:	68a1      	ldr	r1, [r4, #8]
   119ae:	2900      	cmp	r1, #0
   119b0:	d0c3      	beq.n	1193a <process_event+0x31e>
	return node->next;
   119b2:	680b      	ldr	r3, [r1, #0]
   119b4:	2b00      	cmp	r3, #0
   119b6:	bf38      	it	cc
   119b8:	2300      	movcc	r3, #0
   119ba:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
   119bc:	684b      	ldr	r3, [r1, #4]
   119be:	4620      	mov	r0, r4
   119c0:	461e      	mov	r6, r3
   119c2:	9a02      	ldr	r2, [sp, #8]
   119c4:	465b      	mov	r3, fp
   119c6:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   119c8:	f1b9 0f00 	cmp.w	r9, #0
   119cc:	d0b5      	beq.n	1193a <process_event+0x31e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   119ce:	4649      	mov	r1, r9
   119d0:	f8d9 3000 	ldr.w	r3, [r9]
   119d4:	e7ee      	b.n	119b4 <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   119d6:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   119d8:	465b      	mov	r3, fp
   119da:	4620      	mov	r0, r4
   119dc:	9a02      	ldr	r2, [sp, #8]
   119de:	682d      	ldr	r5, [r5, #0]
   119e0:	f014 fed2 	bl	26788 <notify_one>
   119e4:	e7a9      	b.n	1193a <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   119e6:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   119ea:	bf1e      	ittt	ne
   119ec:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   119f0:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   119f2:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   119f4:	e7d2      	b.n	1199c <process_event+0x380>
   119f6:	bf00      	nop
   119f8:	0002d072 	.word	0x0002d072
   119fc:	0002d098 	.word	0x0002d098
   11a00:	0002d0af 	.word	0x0002d0af
   11a04:	00011a11 	.word	0x00011a11
   11a08:	0002d0c4 	.word	0x0002d0c4
   11a0c:	0002d0d9 	.word	0x0002d0d9

00011a10 <transition_complete>:
{
   11a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a12:	4604      	mov	r4, r0
   11a14:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   11a16:	f100 0614 	add.w	r6, r0, #20
   11a1a:	f04f 0320 	mov.w	r3, #32
   11a1e:	f3ef 8711 	mrs	r7, BASEPRI
   11a22:	f383 8811 	msr	BASEPRI, r3
   11a26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11a2a:	4630      	mov	r0, r6
   11a2c:	f011 f9d4 	bl	22dd8 <z_spin_lock_valid>
   11a30:	b968      	cbnz	r0, 11a4e <transition_complete+0x3e>
   11a32:	2381      	movs	r3, #129	; 0x81
   11a34:	4a0b      	ldr	r2, [pc, #44]	; (11a64 <transition_complete+0x54>)
   11a36:	490c      	ldr	r1, [pc, #48]	; (11a68 <transition_complete+0x58>)
   11a38:	480c      	ldr	r0, [pc, #48]	; (11a6c <transition_complete+0x5c>)
   11a3a:	f014 fe6f 	bl	2671c <printk>
   11a3e:	4631      	mov	r1, r6
   11a40:	480b      	ldr	r0, [pc, #44]	; (11a70 <transition_complete+0x60>)
   11a42:	f014 fe6b 	bl	2671c <printk>
   11a46:	2181      	movs	r1, #129	; 0x81
   11a48:	4806      	ldr	r0, [pc, #24]	; (11a64 <transition_complete+0x54>)
   11a4a:	f015 f90c 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   11a4e:	4630      	mov	r0, r6
   11a50:	f011 f9de 	bl	22e10 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
   11a54:	463a      	mov	r2, r7
   11a56:	4620      	mov	r0, r4
	mgr->last_res = res;
   11a58:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   11a5a:	2101      	movs	r1, #1
}
   11a5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   11a60:	f7ff bddc 	b.w	1161c <process_event>
   11a64:	0002d072 	.word	0x0002d072
   11a68:	0002d0c4 	.word	0x0002d0c4
   11a6c:	0002cfb2 	.word	0x0002cfb2
   11a70:	0002d0d9 	.word	0x0002d0d9

00011a74 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   11a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11a78:	4604      	mov	r4, r0
   11a7a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   11a7c:	f014 fe9a 	bl	267b4 <validate_args>

	if (rv < 0) {
   11a80:	1e05      	subs	r5, r0, #0
   11a82:	db5e      	blt.n	11b42 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   11a84:	f104 0914 	add.w	r9, r4, #20
   11a88:	f04f 0320 	mov.w	r3, #32
   11a8c:	f3ef 8a11 	mrs	sl, BASEPRI
   11a90:	f383 8811 	msr	BASEPRI, r3
   11a94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11a98:	4648      	mov	r0, r9
   11a9a:	f011 f99d 	bl	22dd8 <z_spin_lock_valid>
   11a9e:	b968      	cbnz	r0, 11abc <onoff_request+0x48>
   11aa0:	2381      	movs	r3, #129	; 0x81
   11aa2:	4a38      	ldr	r2, [pc, #224]	; (11b84 <onoff_request+0x110>)
   11aa4:	4938      	ldr	r1, [pc, #224]	; (11b88 <onoff_request+0x114>)
   11aa6:	4839      	ldr	r0, [pc, #228]	; (11b8c <onoff_request+0x118>)
   11aa8:	f014 fe38 	bl	2671c <printk>
   11aac:	4649      	mov	r1, r9
   11aae:	4838      	ldr	r0, [pc, #224]	; (11b90 <onoff_request+0x11c>)
   11ab0:	f014 fe34 	bl	2671c <printk>
   11ab4:	2181      	movs	r1, #129	; 0x81
   11ab6:	4833      	ldr	r0, [pc, #204]	; (11b84 <onoff_request+0x110>)
   11ab8:	f015 f8d5 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   11abc:	4648      	mov	r0, r9
   11abe:	f011 f9a7 	bl	22e10 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   11ac2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   11ac6:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11ac8:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   11aca:	428b      	cmp	r3, r1
   11acc:	f002 0607 	and.w	r6, r2, #7
   11ad0:	d050      	beq.n	11b74 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   11ad2:	2e02      	cmp	r6, #2
   11ad4:	d124      	bne.n	11b20 <onoff_request+0xac>
	rv = state;
   11ad6:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
   11ad8:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
   11adc:	3301      	adds	r3, #1
   11ade:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11ae0:	4648      	mov	r0, r9
   11ae2:	f011 f987 	bl	22df4 <z_spin_unlock_valid>
   11ae6:	b968      	cbnz	r0, 11b04 <onoff_request+0x90>
   11ae8:	23ac      	movs	r3, #172	; 0xac
   11aea:	4a26      	ldr	r2, [pc, #152]	; (11b84 <onoff_request+0x110>)
   11aec:	4929      	ldr	r1, [pc, #164]	; (11b94 <onoff_request+0x120>)
   11aee:	4827      	ldr	r0, [pc, #156]	; (11b8c <onoff_request+0x118>)
   11af0:	f014 fe14 	bl	2671c <printk>
   11af4:	4649      	mov	r1, r9
   11af6:	4828      	ldr	r0, [pc, #160]	; (11b98 <onoff_request+0x124>)
   11af8:	f014 fe10 	bl	2671c <printk>
   11afc:	21ac      	movs	r1, #172	; 0xac
   11afe:	4821      	ldr	r0, [pc, #132]	; (11b84 <onoff_request+0x110>)
   11b00:	f015 f8b1 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   11b04:	f38a 8811 	msr	BASEPRI, sl
   11b08:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   11b0c:	f1b8 0f00 	cmp.w	r8, #0
   11b10:	d017      	beq.n	11b42 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
   11b12:	2300      	movs	r3, #0
   11b14:	4632      	mov	r2, r6
   11b16:	4639      	mov	r1, r7
   11b18:	4620      	mov	r0, r4
   11b1a:	f014 fe35 	bl	26788 <notify_one>
   11b1e:	e010      	b.n	11b42 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
   11b20:	0793      	lsls	r3, r2, #30
   11b22:	d001      	beq.n	11b28 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
   11b24:	2e06      	cmp	r6, #6
   11b26:	d10f      	bne.n	11b48 <onoff_request+0xd4>
	parent->next = child;
   11b28:	2300      	movs	r3, #0
   11b2a:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   11b2c:	6863      	ldr	r3, [r4, #4]
   11b2e:	b9f3      	cbnz	r3, 11b6e <onoff_request+0xfa>
	list->head = node;
   11b30:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   11b34:	4635      	mov	r5, r6
   11b36:	b9fe      	cbnz	r6, 11b78 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   11b38:	4652      	mov	r2, sl
   11b3a:	2102      	movs	r1, #2
   11b3c:	4620      	mov	r0, r4
   11b3e:	f7ff fd6d 	bl	1161c <process_event>
		}
	}

	return rv;
}
   11b42:	4628      	mov	r0, r5
   11b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   11b48:	2e05      	cmp	r6, #5
   11b4a:	d018      	beq.n	11b7e <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   11b4c:	2e01      	cmp	r6, #1
   11b4e:	d00b      	beq.n	11b68 <onoff_request+0xf4>
   11b50:	4912      	ldr	r1, [pc, #72]	; (11b9c <onoff_request+0x128>)
   11b52:	480e      	ldr	r0, [pc, #56]	; (11b8c <onoff_request+0x118>)
   11b54:	f240 13c9 	movw	r3, #457	; 0x1c9
   11b58:	4a11      	ldr	r2, [pc, #68]	; (11ba0 <onoff_request+0x12c>)
   11b5a:	f014 fddf 	bl	2671c <printk>
   11b5e:	f240 11c9 	movw	r1, #457	; 0x1c9
   11b62:	480f      	ldr	r0, [pc, #60]	; (11ba0 <onoff_request+0x12c>)
   11b64:	f015 f87f 	bl	26c66 <assert_post_action>
		rv = -EIO;
   11b68:	f06f 0504 	mvn.w	r5, #4
   11b6c:	e004      	b.n	11b78 <onoff_request+0x104>
	parent->next = child;
   11b6e:	601f      	str	r7, [r3, #0]
	list->tail = node;
   11b70:	6067      	str	r7, [r4, #4]
}
   11b72:	e7df      	b.n	11b34 <onoff_request+0xc0>
		rv = -EAGAIN;
   11b74:	f06f 050a 	mvn.w	r5, #10
   11b78:	f04f 0800 	mov.w	r8, #0
   11b7c:	e7b0      	b.n	11ae0 <onoff_request+0x6c>
		rv = -ENOTSUP;
   11b7e:	f06f 0585 	mvn.w	r5, #133	; 0x85
   11b82:	e7f9      	b.n	11b78 <onoff_request+0x104>
   11b84:	0002d072 	.word	0x0002d072
   11b88:	0002d0c4 	.word	0x0002d0c4
   11b8c:	0002cfb2 	.word	0x0002cfb2
   11b90:	0002d0d9 	.word	0x0002d0d9
   11b94:	0002d098 	.word	0x0002d098
   11b98:	0002d0af 	.word	0x0002d0af
   11b9c:	0002d05c 	.word	0x0002d05c
   11ba0:	0002cfcf 	.word	0x0002cfcf

00011ba4 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   11ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   11ba6:	460e      	mov	r6, r1
   11ba8:	2900      	cmp	r1, #0
   11baa:	d043      	beq.n	11c34 <sys_heap_free+0x90>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   11bac:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   11bae:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   11bb0:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   11bb2:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
   11bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11bb8:	bf2c      	ite	cs
   11bba:	2408      	movcs	r4, #8
   11bbc:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11bbe:	1b0c      	subs	r4, r1, r4
   11bc0:	1b64      	subs	r4, r4, r5
   11bc2:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   11bc4:	4621      	mov	r1, r4
   11bc6:	f014 fe21 	bl	2680c <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   11bca:	07c3      	lsls	r3, r0, #31
   11bcc:	d40d      	bmi.n	11bea <sys_heap_free+0x46>
   11bce:	239a      	movs	r3, #154	; 0x9a
   11bd0:	4a19      	ldr	r2, [pc, #100]	; (11c38 <sys_heap_free+0x94>)
   11bd2:	491a      	ldr	r1, [pc, #104]	; (11c3c <sys_heap_free+0x98>)
   11bd4:	481a      	ldr	r0, [pc, #104]	; (11c40 <sys_heap_free+0x9c>)
   11bd6:	f014 fda1 	bl	2671c <printk>
   11bda:	4631      	mov	r1, r6
   11bdc:	4819      	ldr	r0, [pc, #100]	; (11c44 <sys_heap_free+0xa0>)
   11bde:	f014 fd9d 	bl	2671c <printk>
   11be2:	219a      	movs	r1, #154	; 0x9a
   11be4:	4814      	ldr	r0, [pc, #80]	; (11c38 <sys_heap_free+0x94>)
   11be6:	f015 f83e 	bl	26c66 <assert_post_action>
	return c + chunk_size(h, c);
   11bea:	4621      	mov	r1, r4
   11bec:	4628      	mov	r0, r5
   11bee:	f014 fe23 	bl	26838 <chunk_size>
   11bf2:	1827      	adds	r7, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
   11bf4:	4639      	mov	r1, r7
   11bf6:	2200      	movs	r2, #0
   11bf8:	4628      	mov	r0, r5
   11bfa:	f014 fe07 	bl	2680c <chunk_field>
   11bfe:	1a3f      	subs	r7, r7, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   11c00:	42bc      	cmp	r4, r7
   11c02:	d00d      	beq.n	11c20 <sys_heap_free+0x7c>
   11c04:	23a2      	movs	r3, #162	; 0xa2
   11c06:	4a0c      	ldr	r2, [pc, #48]	; (11c38 <sys_heap_free+0x94>)
   11c08:	490f      	ldr	r1, [pc, #60]	; (11c48 <sys_heap_free+0xa4>)
   11c0a:	480d      	ldr	r0, [pc, #52]	; (11c40 <sys_heap_free+0x9c>)
   11c0c:	f014 fd86 	bl	2671c <printk>
   11c10:	4631      	mov	r1, r6
   11c12:	480e      	ldr	r0, [pc, #56]	; (11c4c <sys_heap_free+0xa8>)
   11c14:	f014 fd82 	bl	2671c <printk>
   11c18:	21a2      	movs	r1, #162	; 0xa2
   11c1a:	4807      	ldr	r0, [pc, #28]	; (11c38 <sys_heap_free+0x94>)
   11c1c:	f015 f823 	bl	26c66 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
   11c20:	4621      	mov	r1, r4
   11c22:	4628      	mov	r0, r5
   11c24:	2200      	movs	r2, #0
   11c26:	f014 fe0d 	bl	26844 <set_chunk_used>
	free_chunk(h, c);
   11c2a:	4621      	mov	r1, r4
}
   11c2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
   11c30:	f014 bf43 	b.w	26aba <free_chunk>
}
   11c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11c36:	bf00      	nop
   11c38:	0002d0f1 	.word	0x0002d0f1
   11c3c:	0002d112 	.word	0x0002d112
   11c40:	0002cfb2 	.word	0x0002cfb2
   11c44:	0002d123 	.word	0x0002d123
   11c48:	0002d15b 	.word	0x0002d15b
   11c4c:	0002d181 	.word	0x0002d181

00011c50 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   11c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct z_heap *h = heap->heap;
   11c54:	6806      	ldr	r6, [r0, #0]
{
   11c56:	4614      	mov	r4, r2
   11c58:	68b3      	ldr	r3, [r6, #8]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   11c5a:	424a      	negs	r2, r1
	return big_heap(h) ? 8 : 4;
   11c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11c60:	bf2c      	ite	cs
   11c62:	2508      	movcs	r5, #8
   11c64:	2504      	movcc	r5, #4
   11c66:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   11c6a:	ea31 0202 	bics.w	r2, r1, r2
   11c6e:	d01e      	beq.n	11cae <sys_heap_aligned_alloc+0x5e>
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   11c70:	42bd      	cmp	r5, r7
   11c72:	bf28      	it	cs
   11c74:	463d      	movcs	r5, r7
   11c76:	46b9      	mov	r9, r7
		align -= rew;
   11c78:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   11c7a:	f107 3aff 	add.w	sl, r7, #4294967295
   11c7e:	ea1a 0f07 	tst.w	sl, r7
   11c82:	d00e      	beq.n	11ca2 <sys_heap_aligned_alloc+0x52>
   11c84:	4935      	ldr	r1, [pc, #212]	; (11d5c <sys_heap_aligned_alloc+0x10c>)
   11c86:	f240 130d 	movw	r3, #269	; 0x10d
   11c8a:	4a35      	ldr	r2, [pc, #212]	; (11d60 <sys_heap_aligned_alloc+0x110>)
   11c8c:	4835      	ldr	r0, [pc, #212]	; (11d64 <sys_heap_aligned_alloc+0x114>)
   11c8e:	f014 fd45 	bl	2671c <printk>
   11c92:	4835      	ldr	r0, [pc, #212]	; (11d68 <sys_heap_aligned_alloc+0x118>)
   11c94:	f014 fd42 	bl	2671c <printk>
   11c98:	f240 110d 	movw	r1, #269	; 0x10d
   11c9c:	4830      	ldr	r0, [pc, #192]	; (11d60 <sys_heap_aligned_alloc+0x110>)
   11c9e:	f014 ffe2 	bl	26c66 <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   11ca2:	b974      	cbnz	r4, 11cc2 <sys_heap_aligned_alloc+0x72>
		return NULL;
   11ca4:	f04f 0900 	mov.w	r9, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   11ca8:	4648      	mov	r0, r9
   11caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   11cae:	42a9      	cmp	r1, r5
   11cb0:	d804      	bhi.n	11cbc <sys_heap_aligned_alloc+0x6c>
			return sys_heap_alloc(heap, bytes);
   11cb2:	4621      	mov	r1, r4
}
   11cb4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   11cb8:	f014 bf41 	b.w	26b3e <sys_heap_alloc>
		rew = 0;
   11cbc:	f04f 0900 	mov.w	r9, #0
   11cc0:	e7db      	b.n	11c7a <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
   11cc2:	68b3      	ldr	r3, [r6, #8]
   11cc4:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   11cc8:	d9ec      	bls.n	11ca4 <sys_heap_aligned_alloc+0x54>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   11cca:	1939      	adds	r1, r7, r4
   11ccc:	1b49      	subs	r1, r1, r5
   11cce:	4630      	mov	r0, r6
   11cd0:	f014 fdd4 	bl	2687c <bytes_to_chunksz>
   11cd4:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   11cd6:	4630      	mov	r0, r6
   11cd8:	f014 fe5a 	bl	26990 <alloc_chunk>
	if (c0 == 0) {
   11cdc:	4680      	mov	r8, r0
   11cde:	2800      	cmp	r0, #0
   11ce0:	d0e0      	beq.n	11ca4 <sys_heap_aligned_alloc+0x54>
	return big_heap(h) ? 8 : 4;
   11ce2:	68b3      	ldr	r3, [r6, #8]
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   11ce4:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   11ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11cec:	bf2c      	ite	cs
   11cee:	2308      	movcs	r3, #8
   11cf0:	2304      	movcc	r3, #4
   11cf2:	441d      	add	r5, r3
   11cf4:	4435      	add	r5, r6
   11cf6:	4455      	add	r5, sl
   11cf8:	427f      	negs	r7, r7
   11cfa:	402f      	ands	r7, r5
   11cfc:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   11d00:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11d02:	eba9 0303 	sub.w	r3, r9, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   11d06:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11d08:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   11d0a:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   11d0e:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   11d10:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11d14:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   11d18:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   11d1c:	d208      	bcs.n	11d30 <sys_heap_aligned_alloc+0xe0>
		split_chunks(h, c0, c);
   11d1e:	4601      	mov	r1, r0
   11d20:	463a      	mov	r2, r7
   11d22:	4630      	mov	r0, r6
   11d24:	f014 fdde 	bl	268e4 <split_chunks>
		free_list_add(h, c0);
   11d28:	4641      	mov	r1, r8
   11d2a:	4630      	mov	r0, r6
   11d2c:	f014 fe69 	bl	26a02 <free_list_add>
	return c + chunk_size(h, c);
   11d30:	4639      	mov	r1, r7
   11d32:	4630      	mov	r0, r6
   11d34:	f014 fd80 	bl	26838 <chunk_size>
   11d38:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   11d3a:	4284      	cmp	r4, r0
   11d3c:	d208      	bcs.n	11d50 <sys_heap_aligned_alloc+0x100>
		split_chunks(h, c, c_end);
   11d3e:	4639      	mov	r1, r7
   11d40:	4630      	mov	r0, r6
   11d42:	4622      	mov	r2, r4
   11d44:	f014 fdce 	bl	268e4 <split_chunks>
		free_list_add(h, c_end);
   11d48:	4621      	mov	r1, r4
   11d4a:	4630      	mov	r0, r6
   11d4c:	f014 fe59 	bl	26a02 <free_list_add>
	set_chunk_used(h, c, true);
   11d50:	2201      	movs	r2, #1
   11d52:	4639      	mov	r1, r7
   11d54:	4630      	mov	r0, r6
   11d56:	f014 fd75 	bl	26844 <set_chunk_used>
	return mem;
   11d5a:	e7a5      	b.n	11ca8 <sys_heap_aligned_alloc+0x58>
   11d5c:	0002d1bd 	.word	0x0002d1bd
   11d60:	0002d0f1 	.word	0x0002d0f1
   11d64:	0002cfb2 	.word	0x0002cfb2
   11d68:	0002d1d8 	.word	0x0002d1d8

00011d6c <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
   11d6c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   11d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d72:	4607      	mov	r7, r0
   11d74:	460d      	mov	r5, r1
   11d76:	4616      	mov	r6, r2
   11d78:	d212      	bcs.n	11da0 <sys_heap_init+0x34>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   11d7a:	2a04      	cmp	r2, #4
   11d7c:	d80e      	bhi.n	11d9c <sys_heap_init+0x30>
   11d7e:	4944      	ldr	r1, [pc, #272]	; (11e90 <sys_heap_init+0x124>)
   11d80:	f44f 73c1 	mov.w	r3, #386	; 0x182
   11d84:	4a43      	ldr	r2, [pc, #268]	; (11e94 <sys_heap_init+0x128>)
   11d86:	4844      	ldr	r0, [pc, #272]	; (11e98 <sys_heap_init+0x12c>)
   11d88:	f014 fcc8 	bl	2671c <printk>
   11d8c:	4843      	ldr	r0, [pc, #268]	; (11e9c <sys_heap_init+0x130>)
   11d8e:	f014 fcc5 	bl	2671c <printk>
   11d92:	f44f 71c1 	mov.w	r1, #386	; 0x182
   11d96:	483f      	ldr	r0, [pc, #252]	; (11e94 <sys_heap_init+0x128>)
   11d98:	f014 ff65 	bl	26c66 <assert_post_action>
   11d9c:	2204      	movs	r2, #4
   11d9e:	e000      	b.n	11da2 <sys_heap_init+0x36>
   11da0:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
   11da2:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11da4:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11da6:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11da8:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11dac:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   11db0:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   11db2:	2d17      	cmp	r5, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   11db4:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   11db8:	d80e      	bhi.n	11dd8 <sys_heap_init+0x6c>
   11dba:	4939      	ldr	r1, [pc, #228]	; (11ea0 <sys_heap_init+0x134>)
   11dbc:	f240 138b 	movw	r3, #395	; 0x18b
   11dc0:	4a34      	ldr	r2, [pc, #208]	; (11e94 <sys_heap_init+0x128>)
   11dc2:	4835      	ldr	r0, [pc, #212]	; (11e98 <sys_heap_init+0x12c>)
   11dc4:	f014 fcaa 	bl	2671c <printk>
   11dc8:	4834      	ldr	r0, [pc, #208]	; (11e9c <sys_heap_init+0x130>)
   11dca:	f014 fca7 	bl	2671c <printk>
   11dce:	f240 118b 	movw	r1, #395	; 0x18b
   11dd2:	4830      	ldr	r0, [pc, #192]	; (11e94 <sys_heap_init+0x128>)
   11dd4:	f014 ff47 	bl	26c66 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   11dd8:	2300      	movs	r3, #0
	heap->heap = h;
   11dda:	603c      	str	r4, [r7, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   11ddc:	4631      	mov	r1, r6
	h->avail_buckets = 0;
   11dde:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   11de0:	4620      	mov	r0, r4
	h->end_chunk = heap_sz;
   11de2:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   11de4:	f014 fd54 	bl	26890 <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline chunksz_t min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
   11de8:	2101      	movs	r1, #1
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   11dea:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   11dec:	1c47      	adds	r7, r0, #1
   11dee:	4620      	mov	r0, r4
   11df0:	f014 fd44 	bl	2687c <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11df4:	351b      	adds	r5, #27
   11df6:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < heap_sz, "heap size is too small");
   11df8:	4428      	add	r0, r5
   11dfa:	42b0      	cmp	r0, r6
   11dfc:	d30e      	bcc.n	11e1c <sys_heap_init+0xb0>
   11dfe:	4929      	ldr	r1, [pc, #164]	; (11ea4 <sys_heap_init+0x138>)
   11e00:	f44f 73cb 	mov.w	r3, #406	; 0x196
   11e04:	4a23      	ldr	r2, [pc, #140]	; (11e94 <sys_heap_init+0x128>)
   11e06:	4824      	ldr	r0, [pc, #144]	; (11e98 <sys_heap_init+0x12c>)
   11e08:	f014 fc88 	bl	2671c <printk>
   11e0c:	4823      	ldr	r0, [pc, #140]	; (11e9c <sys_heap_init+0x130>)
   11e0e:	f014 fc85 	bl	2671c <printk>
   11e12:	f44f 71cb 	mov.w	r1, #406	; 0x196
   11e16:	481f      	ldr	r0, [pc, #124]	; (11e94 <sys_heap_init+0x128>)
   11e18:	f014 ff25 	bl	26c66 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
   11e1c:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   11e1e:	4619      	mov	r1, r3
   11e20:	f104 0210 	add.w	r2, r4, #16
	for (int i = 0; i < nb_buckets; i++) {
   11e24:	42bb      	cmp	r3, r7
   11e26:	db2f      	blt.n	11e88 <sys_heap_init+0x11c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   11e28:	462a      	mov	r2, r5
   11e2a:	4620      	mov	r0, r4
   11e2c:	2100      	movs	r1, #0
   11e2e:	f014 fd21 	bl	26874 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   11e32:	2300      	movs	r3, #0
   11e34:	4620      	mov	r0, r4
   11e36:	461a      	mov	r2, r3
   11e38:	4619      	mov	r1, r3
   11e3a:	f014 fcf2 	bl	26822 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   11e3e:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
   11e40:	4620      	mov	r0, r4
   11e42:	2201      	movs	r2, #1
   11e44:	2100      	movs	r1, #0
   11e46:	f014 fcfd 	bl	26844 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   11e4a:	463a      	mov	r2, r7
   11e4c:	4629      	mov	r1, r5
   11e4e:	f014 fd11 	bl	26874 <set_chunk_size>
   11e52:	462b      	mov	r3, r5
   11e54:	4629      	mov	r1, r5
   11e56:	4620      	mov	r0, r4
   11e58:	2200      	movs	r2, #0
   11e5a:	f014 fce2 	bl	26822 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   11e5e:	4631      	mov	r1, r6
   11e60:	4620      	mov	r0, r4
   11e62:	2200      	movs	r2, #0
   11e64:	f014 fd06 	bl	26874 <set_chunk_size>
   11e68:	463b      	mov	r3, r7
   11e6a:	4631      	mov	r1, r6
   11e6c:	4620      	mov	r0, r4
   11e6e:	2200      	movs	r2, #0
   11e70:	f014 fcd7 	bl	26822 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   11e74:	4631      	mov	r1, r6
   11e76:	4620      	mov	r0, r4
   11e78:	2201      	movs	r2, #1
   11e7a:	f014 fce3 	bl	26844 <set_chunk_used>

	free_list_add(h, chunk0_size);
   11e7e:	4629      	mov	r1, r5
}
   11e80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   11e84:	f014 bdbd 	b.w	26a02 <free_list_add>
		h->buckets[i].next = 0;
   11e88:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   11e8c:	3301      	adds	r3, #1
   11e8e:	e7c9      	b.n	11e24 <sys_heap_init+0xb8>
   11e90:	0002d1f5 	.word	0x0002d1f5
   11e94:	0002d0f1 	.word	0x0002d0f1
   11e98:	0002cfb2 	.word	0x0002cfb2
   11e9c:	0002d216 	.word	0x0002d216
   11ea0:	0002d22f 	.word	0x0002d22f
   11ea4:	0002d258 	.word	0x0002d258

00011ea8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   11ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11eac:	468b      	mov	fp, r1
   11eae:	4692      	mov	sl, r2
   11eb0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   11eb2:	2500      	movs	r5, #0
{
   11eb4:	b091      	sub	sp, #68	; 0x44
   11eb6:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   11eb8:	f89a 0000 	ldrb.w	r0, [sl]
   11ebc:	b908      	cbnz	r0, 11ec2 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   11ebe:	4628      	mov	r0, r5
   11ec0:	e35e      	b.n	12580 <cbvprintf+0x6d8>
		if (*fp != '%') {
   11ec2:	2825      	cmp	r0, #37	; 0x25
   11ec4:	f10a 0701 	add.w	r7, sl, #1
   11ec8:	d007      	beq.n	11eda <cbvprintf+0x32>
			OUTC('%');
   11eca:	4659      	mov	r1, fp
   11ecc:	9b02      	ldr	r3, [sp, #8]
   11ece:	4798      	blx	r3
   11ed0:	2800      	cmp	r0, #0
   11ed2:	f2c0 8355 	blt.w	12580 <cbvprintf+0x6d8>
   11ed6:	3501      	adds	r5, #1
			break;
   11ed8:	e210      	b.n	122fc <cbvprintf+0x454>
		} state = {
   11eda:	2218      	movs	r2, #24
   11edc:	2100      	movs	r1, #0
   11ede:	a80a      	add	r0, sp, #40	; 0x28
   11ee0:	f016 fb82 	bl	285e8 <memset>
	if (*sp == '%') {
   11ee4:	f89a 3001 	ldrb.w	r3, [sl, #1]
   11ee8:	2b25      	cmp	r3, #37	; 0x25
   11eea:	d078      	beq.n	11fde <cbvprintf+0x136>
   11eec:	2200      	movs	r2, #0
   11eee:	4694      	mov	ip, r2
   11ef0:	4616      	mov	r6, r2
   11ef2:	4696      	mov	lr, r2
   11ef4:	4610      	mov	r0, r2
   11ef6:	4639      	mov	r1, r7
		switch (*sp) {
   11ef8:	f817 3b01 	ldrb.w	r3, [r7], #1
   11efc:	2b2b      	cmp	r3, #43	; 0x2b
   11efe:	f000 809d 	beq.w	1203c <cbvprintf+0x194>
   11f02:	f200 8094 	bhi.w	1202e <cbvprintf+0x186>
   11f06:	2b20      	cmp	r3, #32
   11f08:	f000 809b 	beq.w	12042 <cbvprintf+0x19a>
   11f0c:	2b23      	cmp	r3, #35	; 0x23
   11f0e:	f000 809a 	beq.w	12046 <cbvprintf+0x19e>
   11f12:	b128      	cbz	r0, 11f20 <cbvprintf+0x78>
   11f14:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   11f18:	f040 0004 	orr.w	r0, r0, #4
   11f1c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11f20:	f1be 0f00 	cmp.w	lr, #0
   11f24:	d005      	beq.n	11f32 <cbvprintf+0x8a>
   11f26:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   11f2a:	f040 0008 	orr.w	r0, r0, #8
   11f2e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11f32:	b12e      	cbz	r6, 11f40 <cbvprintf+0x98>
   11f34:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   11f38:	f040 0010 	orr.w	r0, r0, #16
   11f3c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11f40:	f1bc 0f00 	cmp.w	ip, #0
   11f44:	d005      	beq.n	11f52 <cbvprintf+0xaa>
   11f46:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   11f4a:	f040 0020 	orr.w	r0, r0, #32
   11f4e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11f52:	b12a      	cbz	r2, 11f60 <cbvprintf+0xb8>
   11f54:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11f5c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   11f60:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11f64:	f002 0044 	and.w	r0, r2, #68	; 0x44
   11f68:	2844      	cmp	r0, #68	; 0x44
   11f6a:	d103      	bne.n	11f74 <cbvprintf+0xcc>
		conv->flag_zero = false;
   11f6c:	f36f 1286 	bfc	r2, #6, #1
   11f70:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   11f74:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   11f78:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   11f7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   11f7e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   11f82:	d17b      	bne.n	1207c <cbvprintf+0x1d4>
		conv->width_star = true;
   11f84:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11f88:	1c4b      	adds	r3, r1, #1
   11f8a:	f042 0201 	orr.w	r2, r2, #1
   11f8e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   11f92:	781a      	ldrb	r2, [r3, #0]
   11f94:	2a2e      	cmp	r2, #46	; 0x2e
   11f96:	bf0c      	ite	eq
   11f98:	2101      	moveq	r1, #1
   11f9a:	2100      	movne	r1, #0
   11f9c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11fa0:	f361 0241 	bfi	r2, r1, #1, #1
   11fa4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   11fa8:	d174      	bne.n	12094 <cbvprintf+0x1ec>
	if (*sp == '*') {
   11faa:	785a      	ldrb	r2, [r3, #1]
   11fac:	2a2a      	cmp	r2, #42	; 0x2a
   11fae:	d06a      	beq.n	12086 <cbvprintf+0x1de>
	size_t val = 0;
   11fb0:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   11fb2:	260a      	movs	r6, #10
   11fb4:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   11fb6:	4618      	mov	r0, r3
   11fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
   11fbc:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   11fc0:	2f09      	cmp	r7, #9
   11fc2:	f240 808e 	bls.w	120e2 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   11fc6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   11fca:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   11fcc:	f3c2 0040 	ubfx	r0, r2, #1, #1
   11fd0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   11fd4:	f361 0241 	bfi	r2, r1, #1, #1
   11fd8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   11fdc:	e05a      	b.n	12094 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   11fde:	f10a 0702 	add.w	r7, sl, #2
   11fe2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   11fe6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11fea:	07d9      	lsls	r1, r3, #31
   11fec:	f140 8149 	bpl.w	12282 <cbvprintf+0x3da>
			width = va_arg(ap, int);
   11ff0:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   11ff4:	f1b9 0f00 	cmp.w	r9, #0
   11ff8:	da07      	bge.n	1200a <cbvprintf+0x162>
				conv->flag_dash = true;
   11ffa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
   11ffe:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
   12002:	f042 0204 	orr.w	r2, r2, #4
   12006:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
   1200a:	075a      	lsls	r2, r3, #29
   1200c:	f140 8142 	bpl.w	12294 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   12010:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   12014:	f1b8 0f00 	cmp.w	r8, #0
   12018:	f280 8141 	bge.w	1229e <cbvprintf+0x3f6>
				conv->prec_present = false;
   1201c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12020:	f36f 0341 	bfc	r3, #1, #1
   12024:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   12028:	f04f 38ff 	mov.w	r8, #4294967295
   1202c:	e137      	b.n	1229e <cbvprintf+0x3f6>
		switch (*sp) {
   1202e:	2b2d      	cmp	r3, #45	; 0x2d
   12030:	d00c      	beq.n	1204c <cbvprintf+0x1a4>
   12032:	2b30      	cmp	r3, #48	; 0x30
   12034:	f47f af6d 	bne.w	11f12 <cbvprintf+0x6a>
			conv->flag_zero = true;
   12038:	2201      	movs	r2, #1
	} while (loop);
   1203a:	e75c      	b.n	11ef6 <cbvprintf+0x4e>
			conv->flag_plus = true;
   1203c:	f04f 0e01 	mov.w	lr, #1
   12040:	e759      	b.n	11ef6 <cbvprintf+0x4e>
			conv->flag_space = true;
   12042:	2601      	movs	r6, #1
   12044:	e757      	b.n	11ef6 <cbvprintf+0x4e>
			conv->flag_hash = true;
   12046:	f04f 0c01 	mov.w	ip, #1
   1204a:	e754      	b.n	11ef6 <cbvprintf+0x4e>
		switch (*sp) {
   1204c:	2001      	movs	r0, #1
   1204e:	e752      	b.n	11ef6 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   12050:	4633      	mov	r3, r6
   12052:	fb0c 0202 	mla	r2, ip, r2, r0
   12056:	3a30      	subs	r2, #48	; 0x30
   12058:	461e      	mov	r6, r3
   1205a:	f816 0b01 	ldrb.w	r0, [r6], #1
   1205e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   12062:	2f09      	cmp	r7, #9
   12064:	d9f4      	bls.n	12050 <cbvprintf+0x1a8>
	if (sp != wp) {
   12066:	4299      	cmp	r1, r3
   12068:	d093      	beq.n	11f92 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   1206a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   1206e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   12070:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   12072:	f362 0141 	bfi	r1, r2, #1, #1
   12076:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   1207a:	e78a      	b.n	11f92 <cbvprintf+0xea>
   1207c:	460b      	mov	r3, r1
	size_t val = 0;
   1207e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12080:	f04f 0c0a 	mov.w	ip, #10
   12084:	e7e8      	b.n	12058 <cbvprintf+0x1b0>
		conv->prec_star = true;
   12086:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   1208a:	3302      	adds	r3, #2
		conv->prec_star = true;
   1208c:	f042 0204 	orr.w	r2, r2, #4
   12090:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
   12094:	461f      	mov	r7, r3
   12096:	f817 2b01 	ldrb.w	r2, [r7], #1
   1209a:	2a6c      	cmp	r2, #108	; 0x6c
   1209c:	d041      	beq.n	12122 <cbvprintf+0x27a>
   1209e:	d825      	bhi.n	120ec <cbvprintf+0x244>
   120a0:	2a68      	cmp	r2, #104	; 0x68
   120a2:	d02b      	beq.n	120fc <cbvprintf+0x254>
   120a4:	2a6a      	cmp	r2, #106	; 0x6a
   120a6:	d046      	beq.n	12136 <cbvprintf+0x28e>
   120a8:	2a4c      	cmp	r2, #76	; 0x4c
   120aa:	d04c      	beq.n	12146 <cbvprintf+0x29e>
   120ac:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   120ae:	f817 2b01 	ldrb.w	r2, [r7], #1
   120b2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
   120b6:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   120b8:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   120bc:	f200 80d9 	bhi.w	12272 <cbvprintf+0x3ca>
   120c0:	2a57      	cmp	r2, #87	; 0x57
   120c2:	d84d      	bhi.n	12160 <cbvprintf+0x2b8>
   120c4:	2a41      	cmp	r2, #65	; 0x41
   120c6:	d003      	beq.n	120d0 <cbvprintf+0x228>
   120c8:	3a45      	subs	r2, #69	; 0x45
   120ca:	2a02      	cmp	r2, #2
   120cc:	f200 80d1 	bhi.w	12272 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   120d0:	2204      	movs	r2, #4
   120d2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   120d6:	f362 0302 	bfi	r3, r2, #0, #3
   120da:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   120de:	2301      	movs	r3, #1
			break;
   120e0:	e09e      	b.n	12220 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   120e2:	fb06 2101 	mla	r1, r6, r1, r2
   120e6:	4603      	mov	r3, r0
   120e8:	3930      	subs	r1, #48	; 0x30
   120ea:	e764      	b.n	11fb6 <cbvprintf+0x10e>
	switch (*sp) {
   120ec:	2a74      	cmp	r2, #116	; 0x74
   120ee:	d026      	beq.n	1213e <cbvprintf+0x296>
   120f0:	2a7a      	cmp	r2, #122	; 0x7a
   120f2:	d1db      	bne.n	120ac <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   120f4:	2206      	movs	r2, #6
   120f6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   120fa:	e00d      	b.n	12118 <cbvprintf+0x270>
		if (*++sp == 'h') {
   120fc:	785a      	ldrb	r2, [r3, #1]
   120fe:	2a68      	cmp	r2, #104	; 0x68
   12100:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12104:	d106      	bne.n	12114 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   12106:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   12108:	f361 02c6 	bfi	r2, r1, #3, #4
   1210c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   12110:	1c9f      	adds	r7, r3, #2
   12112:	e7cc      	b.n	120ae <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   12114:	4613      	mov	r3, r2
   12116:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   12118:	f362 03c6 	bfi	r3, r2, #3, #4
   1211c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   12120:	e7c5      	b.n	120ae <cbvprintf+0x206>
		if (*++sp == 'l') {
   12122:	785a      	ldrb	r2, [r3, #1]
   12124:	2a6c      	cmp	r2, #108	; 0x6c
   12126:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1212a:	d101      	bne.n	12130 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   1212c:	2104      	movs	r1, #4
   1212e:	e7eb      	b.n	12108 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   12130:	4613      	mov	r3, r2
   12132:	2203      	movs	r2, #3
   12134:	e7f0      	b.n	12118 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   12136:	2205      	movs	r2, #5
   12138:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1213c:	e7ec      	b.n	12118 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   1213e:	2207      	movs	r2, #7
   12140:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12144:	e7e8      	b.n	12118 <cbvprintf+0x270>
		conv->unsupported = true;
   12146:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1214a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   1214e:	f023 0302 	bic.w	r3, r3, #2
   12152:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   12156:	f043 0302 	orr.w	r3, r3, #2
   1215a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   1215e:	e7a6      	b.n	120ae <cbvprintf+0x206>
   12160:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   12164:	2920      	cmp	r1, #32
   12166:	f200 8084 	bhi.w	12272 <cbvprintf+0x3ca>
   1216a:	a001      	add	r0, pc, #4	; (adr r0, 12170 <cbvprintf+0x2c8>)
   1216c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   12170:	00012235 	.word	0x00012235
   12174:	00012273 	.word	0x00012273
   12178:	00012273 	.word	0x00012273
   1217c:	00012273 	.word	0x00012273
   12180:	00012273 	.word	0x00012273
   12184:	00012273 	.word	0x00012273
   12188:	00012273 	.word	0x00012273
   1218c:	00012273 	.word	0x00012273
   12190:	00012273 	.word	0x00012273
   12194:	000120d1 	.word	0x000120d1
   12198:	00012273 	.word	0x00012273
   1219c:	00012235 	.word	0x00012235
   121a0:	000121f5 	.word	0x000121f5
   121a4:	000120d1 	.word	0x000120d1
   121a8:	000120d1 	.word	0x000120d1
   121ac:	000120d1 	.word	0x000120d1
   121b0:	00012273 	.word	0x00012273
   121b4:	000121f5 	.word	0x000121f5
   121b8:	00012273 	.word	0x00012273
   121bc:	00012273 	.word	0x00012273
   121c0:	00012273 	.word	0x00012273
   121c4:	00012273 	.word	0x00012273
   121c8:	0001223d 	.word	0x0001223d
   121cc:	00012235 	.word	0x00012235
   121d0:	00012259 	.word	0x00012259
   121d4:	00012273 	.word	0x00012273
   121d8:	00012273 	.word	0x00012273
   121dc:	00012259 	.word	0x00012259
   121e0:	00012273 	.word	0x00012273
   121e4:	00012235 	.word	0x00012235
   121e8:	00012273 	.word	0x00012273
   121ec:	00012273 	.word	0x00012273
   121f0:	00012235 	.word	0x00012235
		conv->specifier_cat = SPECIFIER_SINT;
   121f4:	2001      	movs	r0, #1
   121f6:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   121fa:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   121fe:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12202:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   12204:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   12208:	bf02      	ittt	eq
   1220a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   1220e:	f041 0101 	orreq.w	r1, r1, #1
   12212:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   12216:	2a63      	cmp	r2, #99	; 0x63
   12218:	d131      	bne.n	1227e <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1221a:	3b00      	subs	r3, #0
   1221c:	bf18      	it	ne
   1221e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   12220:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12224:	f3c2 0140 	ubfx	r1, r2, #1, #1
   12228:	430b      	orrs	r3, r1
   1222a:	f363 0241 	bfi	r2, r3, #1, #1
   1222e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   12232:	e6d8      	b.n	11fe6 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   12234:	2002      	movs	r0, #2
   12236:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   1223a:	e7de      	b.n	121fa <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   1223c:	2103      	movs	r1, #3
   1223e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   12242:	f003 0378 	and.w	r3, r3, #120	; 0x78
   12246:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   1224a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1224e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   12250:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   12254:	4143      	adcs	r3, r0
   12256:	e7e3      	b.n	12220 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   12258:	2103      	movs	r1, #3
   1225a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   1225e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   12262:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   12266:	bf14      	ite	ne
   12268:	2301      	movne	r3, #1
   1226a:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
   1226c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   12270:	e7d6      	b.n	12220 <cbvprintf+0x378>
		conv->invalid = true;
   12272:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12276:	f043 0301 	orr.w	r3, r3, #1
   1227a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   1227e:	2300      	movs	r3, #0
   12280:	e7ce      	b.n	12220 <cbvprintf+0x378>
		} else if (conv->width_present) {
   12282:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   12286:	2a00      	cmp	r2, #0
		int width = -1;
   12288:	bfac      	ite	ge
   1228a:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
   1228e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
   12292:	e6ba      	b.n	1200a <cbvprintf+0x162>
		} else if (conv->prec_present) {
   12294:	079b      	lsls	r3, r3, #30
   12296:	f57f aec7 	bpl.w	12028 <cbvprintf+0x180>
			precision = conv->prec_value;
   1229a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
   1229e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   122a0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   122a4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
   122a8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
   122ac:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   122b0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   122b2:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   122b6:	d136      	bne.n	12326 <cbvprintf+0x47e>
			switch (length_mod) {
   122b8:	1ed3      	subs	r3, r2, #3
   122ba:	2b04      	cmp	r3, #4
   122bc:	d820      	bhi.n	12300 <cbvprintf+0x458>
   122be:	e8df f003 	tbb	[pc, r3]
   122c2:	0703      	.short	0x0703
   122c4:	1f07      	.short	0x1f07
   122c6:	1f          	.byte	0x1f
   122c7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   122c8:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
   122cc:	17c1      	asrs	r1, r0, #31
   122ce:	e004      	b.n	122da <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
   122d0:	3407      	adds	r4, #7
   122d2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   122d6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
   122da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   122de:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   122e2:	f013 0603 	ands.w	r6, r3, #3
   122e6:	d054      	beq.n	12392 <cbvprintf+0x4ea>
			OUTS(sp, fp);
   122e8:	463b      	mov	r3, r7
   122ea:	4652      	mov	r2, sl
   122ec:	4659      	mov	r1, fp
   122ee:	9802      	ldr	r0, [sp, #8]
   122f0:	f014 fca3 	bl	26c3a <outs>
   122f4:	2800      	cmp	r0, #0
   122f6:	f2c0 8143 	blt.w	12580 <cbvprintf+0x6d8>
   122fa:	4405      	add	r5, r0
			continue;
   122fc:	46ba      	mov	sl, r7
   122fe:	e5db      	b.n	11eb8 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12300:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
   12304:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12306:	ea4f 71e0 	mov.w	r1, r0, asr #31
   1230a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   1230e:	d105      	bne.n	1231c <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
   12310:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   12314:	930a      	str	r3, [sp, #40]	; 0x28
   12316:	2300      	movs	r3, #0
   12318:	930b      	str	r3, [sp, #44]	; 0x2c
   1231a:	e7e0      	b.n	122de <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
   1231c:	2a02      	cmp	r2, #2
   1231e:	d1de      	bne.n	122de <cbvprintf+0x436>
				value->sint = (short)value->sint;
   12320:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
   12324:	e7d2      	b.n	122cc <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   12326:	2b02      	cmp	r3, #2
   12328:	d123      	bne.n	12372 <cbvprintf+0x4ca>
			switch (length_mod) {
   1232a:	1ed3      	subs	r3, r2, #3
   1232c:	2b04      	cmp	r3, #4
   1232e:	d813      	bhi.n	12358 <cbvprintf+0x4b0>
   12330:	e8df f003 	tbb	[pc, r3]
   12334:	120a0a03 	.word	0x120a0a03
   12338:	12          	.byte	0x12
   12339:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
   1233a:	2100      	movs	r1, #0
					value->uint = (wchar_t)va_arg(ap,
   1233c:	6820      	ldr	r0, [r4, #0]
   1233e:	1d23      	adds	r3, r4, #4
   12340:	900a      	str	r0, [sp, #40]	; 0x28
   12342:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   12344:	461c      	mov	r4, r3
   12346:	e7ca      	b.n	122de <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
   12348:	3407      	adds	r4, #7
   1234a:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
   1234e:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   12352:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
   12356:	e7f5      	b.n	12344 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
   12358:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1235c:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
   1235e:	930a      	str	r3, [sp, #40]	; 0x28
   12360:	f04f 0300 	mov.w	r3, #0
   12364:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   12366:	d0d3      	beq.n	12310 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
   12368:	2a02      	cmp	r2, #2
   1236a:	d1b8      	bne.n	122de <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
   1236c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   12370:	e7d0      	b.n	12314 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
   12372:	2b04      	cmp	r3, #4
   12374:	d107      	bne.n	12386 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
   12376:	3407      	adds	r4, #7
   12378:	f024 0407 	bic.w	r4, r4, #7
   1237c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
   12380:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   12384:	e7ab      	b.n	122de <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
   12386:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   12388:	bf04      	itt	eq
   1238a:	f854 3b04 	ldreq.w	r3, [r4], #4
   1238e:	930a      	streq	r3, [sp, #40]	; 0x28
   12390:	e7a5      	b.n	122de <cbvprintf+0x436>
		switch (conv->specifier) {
   12392:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   12396:	2878      	cmp	r0, #120	; 0x78
   12398:	d8b0      	bhi.n	122fc <cbvprintf+0x454>
   1239a:	2862      	cmp	r0, #98	; 0x62
   1239c:	d822      	bhi.n	123e4 <cbvprintf+0x53c>
   1239e:	2825      	cmp	r0, #37	; 0x25
   123a0:	f43f ad93 	beq.w	11eca <cbvprintf+0x22>
   123a4:	2858      	cmp	r0, #88	; 0x58
   123a6:	d1a9      	bne.n	122fc <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
   123a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   123ac:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   123b0:	9300      	str	r3, [sp, #0]
   123b2:	aa0c      	add	r2, sp, #48	; 0x30
   123b4:	ab04      	add	r3, sp, #16
   123b6:	f014 fbf5 	bl	26ba4 <encode_uint>
   123ba:	4682      	mov	sl, r0
			if (precision >= 0) {
   123bc:	f1b8 0f00 	cmp.w	r8, #0
   123c0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   123c4:	db0c      	blt.n	123e0 <cbvprintf+0x538>
				conv->flag_zero = false;
   123c6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   123ca:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   123ce:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   123d2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   123d4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   123d8:	d902      	bls.n	123e0 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
   123da:	eba8 0303 	sub.w	r3, r8, r3
   123de:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   123e0:	4680      	mov	r8, r0
   123e2:	e03d      	b.n	12460 <cbvprintf+0x5b8>
   123e4:	3863      	subs	r0, #99	; 0x63
   123e6:	2815      	cmp	r0, #21
   123e8:	d888      	bhi.n	122fc <cbvprintf+0x454>
   123ea:	a101      	add	r1, pc, #4	; (adr r1, 123f0 <cbvprintf+0x548>)
   123ec:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   123f0:	00012471 	.word	0x00012471
   123f4:	000124d5 	.word	0x000124d5
   123f8:	000122fd 	.word	0x000122fd
   123fc:	000122fd 	.word	0x000122fd
   12400:	000122fd 	.word	0x000122fd
   12404:	000122fd 	.word	0x000122fd
   12408:	000124d5 	.word	0x000124d5
   1240c:	000122fd 	.word	0x000122fd
   12410:	000122fd 	.word	0x000122fd
   12414:	000122fd 	.word	0x000122fd
   12418:	000122fd 	.word	0x000122fd
   1241c:	00012533 	.word	0x00012533
   12420:	00012501 	.word	0x00012501
   12424:	00012505 	.word	0x00012505
   12428:	000122fd 	.word	0x000122fd
   1242c:	000122fd 	.word	0x000122fd
   12430:	00012449 	.word	0x00012449
   12434:	000122fd 	.word	0x000122fd
   12438:	00012501 	.word	0x00012501
   1243c:	000122fd 	.word	0x000122fd
   12440:	000122fd 	.word	0x000122fd
   12444:	00012501 	.word	0x00012501
			if (precision >= 0) {
   12448:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   1244c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   12450:	db0a      	blt.n	12468 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
   12452:	4641      	mov	r1, r8
   12454:	4650      	mov	r0, sl
   12456:	f016 f868 	bl	2852a <strnlen>
		char sign = 0;
   1245a:	2600      	movs	r6, #0
			bpe = bps + len;
   1245c:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
   12460:	f1ba 0f00 	cmp.w	sl, #0
   12464:	d10c      	bne.n	12480 <cbvprintf+0x5d8>
   12466:	e749      	b.n	122fc <cbvprintf+0x454>
				len = strlen(bps);
   12468:	4650      	mov	r0, sl
   1246a:	f016 f857 	bl	2851c <strlen>
   1246e:	e7f4      	b.n	1245a <cbvprintf+0x5b2>
			break;
   12470:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bpe = buf + 1;
   12474:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12478:	f88d 3010 	strb.w	r3, [sp, #16]
			bps = buf;
   1247c:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
   12480:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   12484:	b106      	cbz	r6, 12488 <cbvprintf+0x5e0>
			nj_len += 1U;
   12486:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   12488:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   1248c:	06d0      	lsls	r0, r2, #27
   1248e:	d56b      	bpl.n	12568 <cbvprintf+0x6c0>
			nj_len += 2U;
   12490:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   12492:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   12494:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   12496:	bf48      	it	mi
   12498:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   1249a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   1249c:	bf48      	it	mi
   1249e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   124a0:	f1b9 0f00 	cmp.w	r9, #0
   124a4:	dd79      	ble.n	1259a <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
   124a6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   124aa:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   124ae:	f3c2 0380 	ubfx	r3, r2, #2, #1
   124b2:	9303      	str	r3, [sp, #12]
   124b4:	0753      	lsls	r3, r2, #29
   124b6:	d470      	bmi.n	1259a <cbvprintf+0x6f2>
				if (conv->flag_zero) {
   124b8:	0650      	lsls	r0, r2, #25
   124ba:	d564      	bpl.n	12586 <cbvprintf+0x6de>
					if (sign != 0) {
   124bc:	b146      	cbz	r6, 124d0 <cbvprintf+0x628>
						OUTC(sign);
   124be:	4659      	mov	r1, fp
   124c0:	4630      	mov	r0, r6
   124c2:	9b02      	ldr	r3, [sp, #8]
   124c4:	4798      	blx	r3
   124c6:	2800      	cmp	r0, #0
   124c8:	db5a      	blt.n	12580 <cbvprintf+0x6d8>
						sign = 0;
   124ca:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   124cc:	3501      	adds	r5, #1
						sign = 0;
   124ce:	461e      	mov	r6, r3
					pad = '0';
   124d0:	2330      	movs	r3, #48	; 0x30
   124d2:	e059      	b.n	12588 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
   124d4:	071e      	lsls	r6, r3, #28
   124d6:	d411      	bmi.n	124fc <cbvprintf+0x654>
				sign = ' ';
   124d8:	f013 0610 	ands.w	r6, r3, #16
   124dc:	bf18      	it	ne
   124de:	2620      	movne	r6, #32
			sint = value->sint;
   124e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   124e4:	2a00      	cmp	r2, #0
   124e6:	f173 0100 	sbcs.w	r1, r3, #0
   124ea:	f6bf af5d 	bge.w	123a8 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
   124ee:	4252      	negs	r2, r2
   124f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
   124f4:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   124f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   124fa:	e755      	b.n	123a8 <cbvprintf+0x500>
				sign = '+';
   124fc:	262b      	movs	r6, #43	; 0x2b
   124fe:	e7ef      	b.n	124e0 <cbvprintf+0x638>
		switch (conv->specifier) {
   12500:	2600      	movs	r6, #0
   12502:	e751      	b.n	123a8 <cbvprintf+0x500>
			if (value->ptr != NULL) {
   12504:	980a      	ldr	r0, [sp, #40]	; 0x28
   12506:	b348      	cbz	r0, 1255c <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12508:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   1250c:	9300      	str	r3, [sp, #0]
   1250e:	2100      	movs	r1, #0
   12510:	ab04      	add	r3, sp, #16
   12512:	aa0c      	add	r2, sp, #48	; 0x30
   12514:	f014 fb46 	bl	26ba4 <encode_uint>
				conv->altform_0c = true;
   12518:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1251c:	4682      	mov	sl, r0
				conv->altform_0c = true;
   1251e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   12522:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   12526:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   1252a:	2600      	movs	r6, #0
				conv->altform_0c = true;
   1252c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
   12530:	e744      	b.n	123bc <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
   12532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   12534:	2a07      	cmp	r2, #7
   12536:	f63f aee1 	bhi.w	122fc <cbvprintf+0x454>
   1253a:	e8df f002 	tbb	[pc, r2]
   1253e:	040d      	.short	0x040d
   12540:	08080d06 	.word	0x08080d06
   12544:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   12546:	701d      	strb	r5, [r3, #0]
		break;
   12548:	e6d8      	b.n	122fc <cbvprintf+0x454>
		*(short *)dp = (short)count;
   1254a:	801d      	strh	r5, [r3, #0]
		break;
   1254c:	e6d6      	b.n	122fc <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
   1254e:	4628      	mov	r0, r5
   12550:	17e9      	asrs	r1, r5, #31
   12552:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   12556:	e6d1      	b.n	122fc <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   12558:	601d      	str	r5, [r3, #0]
		break;
   1255a:	e6cf      	b.n	122fc <cbvprintf+0x454>
			bpe = bps + 5;
   1255c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 12624 <cbvprintf+0x77c>
   12560:	4606      	mov	r6, r0
			bps = "(nil)";
   12562:	f1a8 0a05 	sub.w	sl, r8, #5
   12566:	e78b      	b.n	12480 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
   12568:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   1256a:	bf48      	it	mi
   1256c:	3301      	addmi	r3, #1
   1256e:	e790      	b.n	12492 <cbvprintf+0x5ea>
					OUTC(pad);
   12570:	4618      	mov	r0, r3
   12572:	9303      	str	r3, [sp, #12]
   12574:	4659      	mov	r1, fp
   12576:	9b02      	ldr	r3, [sp, #8]
   12578:	4798      	blx	r3
   1257a:	2800      	cmp	r0, #0
   1257c:	9b03      	ldr	r3, [sp, #12]
   1257e:	da04      	bge.n	1258a <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
   12580:	b011      	add	sp, #68	; 0x44
   12582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   12586:	2320      	movs	r3, #32
   12588:	444d      	add	r5, r9
   1258a:	464a      	mov	r2, r9
				while (width-- > 0) {
   1258c:	2a00      	cmp	r2, #0
   1258e:	eba5 0109 	sub.w	r1, r5, r9
   12592:	f109 39ff 	add.w	r9, r9, #4294967295
   12596:	dceb      	bgt.n	12570 <cbvprintf+0x6c8>
   12598:	460d      	mov	r5, r1
		if (sign != 0) {
   1259a:	b136      	cbz	r6, 125aa <cbvprintf+0x702>
			OUTC(sign);
   1259c:	4659      	mov	r1, fp
   1259e:	4630      	mov	r0, r6
   125a0:	9b02      	ldr	r3, [sp, #8]
   125a2:	4798      	blx	r3
   125a4:	2800      	cmp	r0, #0
   125a6:	dbeb      	blt.n	12580 <cbvprintf+0x6d8>
   125a8:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   125aa:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   125ae:	06d9      	lsls	r1, r3, #27
   125b0:	d401      	bmi.n	125b6 <cbvprintf+0x70e>
   125b2:	071a      	lsls	r2, r3, #28
   125b4:	d506      	bpl.n	125c4 <cbvprintf+0x71c>
				OUTC('0');
   125b6:	4659      	mov	r1, fp
   125b8:	2030      	movs	r0, #48	; 0x30
   125ba:	9b02      	ldr	r3, [sp, #8]
   125bc:	4798      	blx	r3
   125be:	2800      	cmp	r0, #0
   125c0:	dbde      	blt.n	12580 <cbvprintf+0x6d8>
   125c2:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   125c4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   125c8:	06db      	lsls	r3, r3, #27
   125ca:	d507      	bpl.n	125dc <cbvprintf+0x734>
				OUTC(conv->specifier);
   125cc:	4659      	mov	r1, fp
   125ce:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   125d2:	9b02      	ldr	r3, [sp, #8]
   125d4:	4798      	blx	r3
   125d6:	2800      	cmp	r0, #0
   125d8:	dbd2      	blt.n	12580 <cbvprintf+0x6d8>
   125da:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   125dc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   125de:	442e      	add	r6, r5
   125e0:	1b73      	subs	r3, r6, r5
   125e2:	2b00      	cmp	r3, #0
   125e4:	dc16      	bgt.n	12614 <cbvprintf+0x76c>
			OUTS(bps, bpe);
   125e6:	4643      	mov	r3, r8
   125e8:	4652      	mov	r2, sl
   125ea:	4659      	mov	r1, fp
   125ec:	9802      	ldr	r0, [sp, #8]
   125ee:	f014 fb24 	bl	26c3a <outs>
   125f2:	2800      	cmp	r0, #0
   125f4:	dbc4      	blt.n	12580 <cbvprintf+0x6d8>
   125f6:	4405      	add	r5, r0
		while (width > 0) {
   125f8:	44a9      	add	r9, r5
   125fa:	eba9 0305 	sub.w	r3, r9, r5
   125fe:	2b00      	cmp	r3, #0
   12600:	f77f ae7c 	ble.w	122fc <cbvprintf+0x454>
			OUTC(' ');
   12604:	4659      	mov	r1, fp
   12606:	2020      	movs	r0, #32
   12608:	9b02      	ldr	r3, [sp, #8]
   1260a:	4798      	blx	r3
   1260c:	2800      	cmp	r0, #0
   1260e:	dbb7      	blt.n	12580 <cbvprintf+0x6d8>
   12610:	3501      	adds	r5, #1
			--width;
   12612:	e7f2      	b.n	125fa <cbvprintf+0x752>
				OUTC('0');
   12614:	4659      	mov	r1, fp
   12616:	2030      	movs	r0, #48	; 0x30
   12618:	9b02      	ldr	r3, [sp, #8]
   1261a:	4798      	blx	r3
   1261c:	2800      	cmp	r0, #0
   1261e:	dbaf      	blt.n	12580 <cbvprintf+0x6d8>
   12620:	3501      	adds	r5, #1
   12622:	e7dd      	b.n	125e0 <cbvprintf+0x738>
   12624:	0002d287 	.word	0x0002d287

00012628 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   12628:	b148      	cbz	r0, 1263e <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
   1262a:	4b05      	ldr	r3, [pc, #20]	; (12640 <arch_busy_wait+0x18>)
   1262c:	681a      	ldr	r2, [r3, #0]
   1262e:	4b05      	ldr	r3, [pc, #20]	; (12644 <arch_busy_wait+0x1c>)
   12630:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   12634:	4b04      	ldr	r3, [pc, #16]	; (12648 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
   12636:	4350      	muls	r0, r2
   12638:	f043 0301 	orr.w	r3, r3, #1
   1263c:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   1263e:	4770      	bx	lr
   12640:	20008330 	.word	0x20008330
   12644:	000f4240 	.word	0x000f4240
   12648:	0002c260 	.word	0x0002c260

0001264c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   1264c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   1264e:	2200      	movs	r2, #0
{
   12650:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   12652:	490f      	ldr	r1, [pc, #60]	; (12690 <enable_logger+0x44>)
   12654:	480f      	ldr	r0, [pc, #60]	; (12694 <enable_logger+0x48>)
   12656:	f019 fa8a 	bl	2bb6e <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1265a:	2200      	movs	r2, #0
   1265c:	2300      	movs	r3, #0
   1265e:	2400      	movs	r4, #0
   12660:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12664:	230e      	movs	r3, #14
   12666:	4d0c      	ldr	r5, [pc, #48]	; (12698 <enable_logger+0x4c>)
   12668:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1266c:	f44f 7240 	mov.w	r2, #768	; 0x300
   12670:	4628      	mov	r0, r5
   12672:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12676:	4b09      	ldr	r3, [pc, #36]	; (1269c <enable_logger+0x50>)
   12678:	4909      	ldr	r1, [pc, #36]	; (126a0 <enable_logger+0x54>)
   1267a:	9400      	str	r4, [sp, #0]
   1267c:	f010 face 	bl	22c1c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12680:	4908      	ldr	r1, [pc, #32]	; (126a4 <enable_logger+0x58>)
   12682:	4628      	mov	r0, r5
   12684:	f019 f96c 	bl	2b960 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   12688:	4620      	mov	r0, r4
   1268a:	b009      	add	sp, #36	; 0x24
   1268c:	bd30      	pop	{r4, r5, pc}
   1268e:	bf00      	nop
   12690:	000126a9 	.word	0x000126a9
   12694:	20008750 	.word	0x20008750
   12698:	20008788 	.word	0x20008788
   1269c:	00012b89 	.word	0x00012b89
   126a0:	2000a930 	.word	0x2000a930
   126a4:	0002d28c 	.word	0x0002d28c

000126a8 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   126a8:	4801      	ldr	r0, [pc, #4]	; (126b0 <log_process_thread_timer_expiry_fn+0x8>)
   126aa:	f010 bef7 	b.w	2349c <z_impl_k_sem_give>
   126ae:	bf00      	nop
   126b0:	20008550 	.word	0x20008550

000126b4 <z_log_get_s_mask>:
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   126b4:	2920      	cmp	r1, #32
{
   126b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   126b8:	4605      	mov	r5, r0
   126ba:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   126bc:	d909      	bls.n	126d2 <z_log_get_s_mask+0x1e>
   126be:	4914      	ldr	r1, [pc, #80]	; (12710 <z_log_get_s_mask+0x5c>)
   126c0:	4814      	ldr	r0, [pc, #80]	; (12714 <z_log_get_s_mask+0x60>)
   126c2:	2380      	movs	r3, #128	; 0x80
   126c4:	4a14      	ldr	r2, [pc, #80]	; (12718 <z_log_get_s_mask+0x64>)
   126c6:	f014 f829 	bl	2671c <printk>
   126ca:	2180      	movs	r1, #128	; 0x80
   126cc:	4812      	ldr	r0, [pc, #72]	; (12718 <z_log_get_s_mask+0x64>)
   126ce:	f014 faca 	bl	26c66 <assert_post_action>
			arm = false;
   126d2:	2000      	movs	r0, #0
				mask |= BIT(arg);
   126d4:	2701      	movs	r7, #1
			arm = false;
   126d6:	4603      	mov	r3, r0
   126d8:	4602      	mov	r2, r0
	while ((curr = *str++) && arg < nargs) {
   126da:	f815 1b01 	ldrb.w	r1, [r5], #1
   126de:	b109      	cbz	r1, 126e4 <z_log_get_s_mask+0x30>
   126e0:	42a3      	cmp	r3, r4
   126e2:	d300      	bcc.n	126e6 <z_log_get_s_mask+0x32>
}
   126e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (curr == '%') {
   126e6:	2925      	cmp	r1, #37	; 0x25
   126e8:	d102      	bne.n	126f0 <z_log_get_s_mask+0x3c>
			arm = !arm;
   126ea:	f082 0201 	eor.w	r2, r2, #1
   126ee:	e7f4      	b.n	126da <z_log_get_s_mask+0x26>
		} else if (arm && isalpha((int)curr)) {
   126f0:	2a00      	cmp	r2, #0
   126f2:	d0f2      	beq.n	126da <z_log_get_s_mask+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   126f4:	f041 0620 	orr.w	r6, r1, #32
   126f8:	3e61      	subs	r6, #97	; 0x61
   126fa:	2e19      	cmp	r6, #25
   126fc:	d8ed      	bhi.n	126da <z_log_get_s_mask+0x26>
			if (curr == 's') {
   126fe:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
   12700:	bf04      	itt	eq
   12702:	fa07 f203 	lsleq.w	r2, r7, r3
   12706:	4310      	orreq	r0, r2
			arg++;
   12708:	3301      	adds	r3, #1
			arm = false;
   1270a:	2200      	movs	r2, #0
   1270c:	e7e5      	b.n	126da <z_log_get_s_mask+0x26>
   1270e:	bf00      	nop
   12710:	0002d2c1 	.word	0x0002d2c1
   12714:	0002cfb2 	.word	0x0002cfb2
   12718:	0002d294 	.word	0x0002d294

0001271c <log_core_init>:
	panic_mode = false;
   1271c:	2200      	movs	r2, #0
{
   1271e:	b510      	push	{r4, lr}
	panic_mode = false;
   12720:	4b0a      	ldr	r3, [pc, #40]	; (1274c <log_core_init+0x30>)
	log_output_timestamp_freq_set(freq);
   12722:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	panic_mode = false;
   12726:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_get_timestamp;
   12728:	4b09      	ldr	r3, [pc, #36]	; (12750 <log_core_init+0x34>)
   1272a:	4a0a      	ldr	r2, [pc, #40]	; (12754 <log_core_init+0x38>)
   1272c:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   1272e:	f000 fd99 	bl	13264 <log_output_timestamp_freq_set>
		log_msg_pool_init();
   12732:	f000 faa3 	bl	12c7c <log_msg_pool_init>
		log_list_init(&list);
   12736:	4808      	ldr	r0, [pc, #32]	; (12758 <log_core_init+0x3c>)
   12738:	f014 fad4 	bl	26ce4 <log_list_init>
}
   1273c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   12740:	2308      	movs	r3, #8
   12742:	2248      	movs	r2, #72	; 0x48
   12744:	4905      	ldr	r1, [pc, #20]	; (1275c <log_core_init+0x40>)
   12746:	4806      	ldr	r0, [pc, #24]	; (12760 <log_core_init+0x44>)
   12748:	f019 b8e8 	b.w	2b91c <k_mem_slab_init>
   1274c:	2000a426 	.word	0x2000a426
   12750:	200081a0 	.word	0x200081a0
   12754:	00026d29 	.word	0x00026d29
   12758:	20009280 	.word	0x20009280
   1275c:	2000d760 	.word	0x2000d760
   12760:	20009288 	.word	0x20009288

00012764 <get_msg>:
{
   12764:	b510      	push	{r4, lr}
	__asm__ volatile(
   12766:	f04f 0320 	mov.w	r3, #32
   1276a:	f3ef 8411 	mrs	r4, BASEPRI
   1276e:	f383 8811 	msr	BASEPRI, r3
   12772:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   12776:	4804      	ldr	r0, [pc, #16]	; (12788 <get_msg+0x24>)
   12778:	f014 fac4 	bl	26d04 <log_list_head_get>
	__asm__ volatile(
   1277c:	f384 8811 	msr	BASEPRI, r4
   12780:	f3bf 8f6f 	isb	sy
}
   12784:	bd10      	pop	{r4, pc}
   12786:	bf00      	nop
   12788:	20009280 	.word	0x20009280

0001278c <z_log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1278c:	4b04      	ldr	r3, [pc, #16]	; (127a0 <z_log_dropped+0x14>)
   1278e:	e8d3 2fef 	ldaex	r2, [r3]
   12792:	3201      	adds	r2, #1
   12794:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12798:	2900      	cmp	r1, #0
   1279a:	d1f8      	bne.n	1278e <z_log_dropped+0x2>
}
   1279c:	4770      	bx	lr
   1279e:	bf00      	nop
   127a0:	20009278 	.word	0x20009278

000127a4 <z_log_dropped_read_and_clear>:
}
   127a4:	2000      	movs	r0, #0
   127a6:	4602      	mov	r2, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   127a8:	4b03      	ldr	r3, [pc, #12]	; (127b8 <z_log_dropped_read_and_clear+0x14>)
   127aa:	e8d3 0fef 	ldaex	r0, [r3]
   127ae:	e8c3 2fe1 	stlex	r1, r2, [r3]
   127b2:	2900      	cmp	r1, #0
   127b4:	d1f9      	bne.n	127aa <z_log_dropped_read_and_clear+0x6>
   127b6:	4770      	bx	lr
   127b8:	20009278 	.word	0x20009278

000127bc <dropped_notify>:
{
   127bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   127be:	f7ff fff1 	bl	127a4 <z_log_dropped_read_and_clear>
	for (int i = 0; i < log_backend_count_get(); i++) {
   127c2:	2600      	movs	r6, #0
	uint32_t dropped = z_log_dropped_read_and_clear();
   127c4:	4607      	mov	r7, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   127c6:	4c0a      	ldr	r4, [pc, #40]	; (127f0 <dropped_notify+0x34>)
   127c8:	4d0a      	ldr	r5, [pc, #40]	; (127f4 <dropped_notify+0x38>)
   127ca:	1b2d      	subs	r5, r5, r4
   127cc:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   127ce:	42ae      	cmp	r6, r5
   127d0:	db00      	blt.n	127d4 <dropped_notify+0x18>
}
   127d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   127d4:	4620      	mov	r0, r4
   127d6:	f014 fa9b 	bl	26d10 <log_backend_is_active>
   127da:	b128      	cbz	r0, 127e8 <dropped_notify+0x2c>
	if (backend->api->dropped != NULL) {
   127dc:	6823      	ldr	r3, [r4, #0]
   127de:	691b      	ldr	r3, [r3, #16]
   127e0:	b113      	cbz	r3, 127e8 <dropped_notify+0x2c>
		backend->api->dropped(backend, cnt);
   127e2:	4639      	mov	r1, r7
   127e4:	4620      	mov	r0, r4
   127e6:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   127e8:	3601      	adds	r6, #1
   127ea:	3410      	adds	r4, #16
   127ec:	e7ef      	b.n	127ce <dropped_notify+0x12>
   127ee:	bf00      	nop
   127f0:	0002c104 	.word	0x0002c104
   127f4:	0002c114 	.word	0x0002c114

000127f8 <log_source_name_get>:
   127f8:	4a04      	ldr	r2, [pc, #16]	; (1280c <log_source_name_get+0x14>)
   127fa:	4b05      	ldr	r3, [pc, #20]	; (12810 <log_source_name_get+0x18>)
   127fc:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   127fe:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   12802:	bf34      	ite	cc
   12804:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   12808:	2000      	movcs	r0, #0
}
   1280a:	4770      	bx	lr
   1280c:	0002bfe4 	.word	0x0002bfe4
   12810:	0002c104 	.word	0x0002c104

00012814 <log_backend_enable>:
{
   12814:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
   12816:	4c10      	ldr	r4, [pc, #64]	; (12858 <log_backend_enable+0x44>)
{
   12818:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   1281a:	1b04      	subs	r4, r0, r4
   1281c:	1124      	asrs	r4, r4, #4
   1281e:	3401      	adds	r4, #1
{
   12820:	460e      	mov	r6, r1
	log_backend_id_set(backend, id);
   12822:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   12824:	b948      	cbnz	r0, 1283a <log_backend_enable+0x26>
   12826:	490d      	ldr	r1, [pc, #52]	; (1285c <log_backend_enable+0x48>)
   12828:	480d      	ldr	r0, [pc, #52]	; (12860 <log_backend_enable+0x4c>)
   1282a:	23d1      	movs	r3, #209	; 0xd1
   1282c:	4a0d      	ldr	r2, [pc, #52]	; (12864 <log_backend_enable+0x50>)
   1282e:	f013 ff75 	bl	2671c <printk>
   12832:	21d1      	movs	r1, #209	; 0xd1
   12834:	480b      	ldr	r0, [pc, #44]	; (12864 <log_backend_enable+0x50>)
   12836:	f014 fa16 	bl	26c66 <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   1283a:	2201      	movs	r2, #1
	backend->cb->id = id;
   1283c:	686b      	ldr	r3, [r5, #4]
   1283e:	711c      	strb	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   12840:	4c09      	ldr	r4, [pc, #36]	; (12868 <log_backend_enable+0x54>)
	backend->cb->active = true;
   12842:	715a      	strb	r2, [r3, #5]
   12844:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   12846:	601e      	str	r6, [r3, #0]
   12848:	b912      	cbnz	r2, 12850 <log_backend_enable+0x3c>
   1284a:	4808      	ldr	r0, [pc, #32]	; (1286c <log_backend_enable+0x58>)
   1284c:	f010 fe26 	bl	2349c <z_impl_k_sem_give>
	backend_attached = true;
   12850:	2301      	movs	r3, #1
   12852:	7023      	strb	r3, [r4, #0]
}
   12854:	bd70      	pop	{r4, r5, r6, pc}
   12856:	bf00      	nop
   12858:	0002c104 	.word	0x0002c104
   1285c:	0002d30a 	.word	0x0002d30a
   12860:	0002cfb2 	.word	0x0002cfb2
   12864:	0002d2d9 	.word	0x0002d2d9
   12868:	2000a425 	.word	0x2000a425
   1286c:	20008550 	.word	0x20008550

00012870 <log_init>:
	return __log_backends_end - __log_backends_start;
   12870:	4b18      	ldr	r3, [pc, #96]	; (128d4 <log_init+0x64>)
   12872:	4a19      	ldr	r2, [pc, #100]	; (128d8 <log_init+0x68>)
{
   12874:	b570      	push	{r4, r5, r6, lr}
   12876:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   12878:	2b9f      	cmp	r3, #159	; 0x9f
   1287a:	ea4f 1623 	mov.w	r6, r3, asr #4
   1287e:	d90b      	bls.n	12898 <log_init+0x28>
   12880:	4916      	ldr	r1, [pc, #88]	; (128dc <log_init+0x6c>)
   12882:	4817      	ldr	r0, [pc, #92]	; (128e0 <log_init+0x70>)
   12884:	f240 234d 	movw	r3, #589	; 0x24d
   12888:	4a16      	ldr	r2, [pc, #88]	; (128e4 <log_init+0x74>)
   1288a:	f013 ff47 	bl	2671c <printk>
   1288e:	f240 214d 	movw	r1, #589	; 0x24d
   12892:	4814      	ldr	r0, [pc, #80]	; (128e4 <log_init+0x74>)
   12894:	f014 f9e7 	bl	26c66 <assert_post_action>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12898:	4b13      	ldr	r3, [pc, #76]	; (128e8 <log_init+0x78>)
   1289a:	e8d3 5fef 	ldaex	r5, [r3]
   1289e:	1c6a      	adds	r2, r5, #1
   128a0:	e8c3 2fe1 	stlex	r1, r2, [r3]
   128a4:	2900      	cmp	r1, #0
   128a6:	d1f8      	bne.n	1289a <log_init+0x2a>
	if (atomic_inc(&initialized) != 0) {
   128a8:	b915      	cbnz	r5, 128b0 <log_init+0x40>
   128aa:	4c0b      	ldr	r4, [pc, #44]	; (128d8 <log_init+0x68>)
	for (i = 0; i < log_backend_count_get(); i++) {
   128ac:	42b5      	cmp	r5, r6
   128ae:	db00      	blt.n	128b2 <log_init+0x42>
}
   128b0:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   128b2:	7b23      	ldrb	r3, [r4, #12]
   128b4:	b153      	cbz	r3, 128cc <log_init+0x5c>
			if (backend->api->init != NULL) {
   128b6:	6823      	ldr	r3, [r4, #0]
   128b8:	699b      	ldr	r3, [r3, #24]
   128ba:	b10b      	cbz	r3, 128c0 <log_init+0x50>
				backend->api->init(backend);
   128bc:	4620      	mov	r0, r4
   128be:	4798      	blx	r3
			log_backend_enable(backend,
   128c0:	6863      	ldr	r3, [r4, #4]
   128c2:	2204      	movs	r2, #4
   128c4:	4620      	mov	r0, r4
   128c6:	6819      	ldr	r1, [r3, #0]
   128c8:	f7ff ffa4 	bl	12814 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   128cc:	3501      	adds	r5, #1
   128ce:	3410      	adds	r4, #16
   128d0:	e7ec      	b.n	128ac <log_init+0x3c>
   128d2:	bf00      	nop
   128d4:	0002c114 	.word	0x0002c114
   128d8:	0002c104 	.word	0x0002c104
   128dc:	0002d321 	.word	0x0002d321
   128e0:	0002cfb2 	.word	0x0002cfb2
   128e4:	0002d294 	.word	0x0002d294
   128e8:	2000927c 	.word	0x2000927c

000128ec <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   128ec:	4b14      	ldr	r3, [pc, #80]	; (12940 <z_log_strdup+0x54>)
{
   128ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
   128f0:	4298      	cmp	r0, r3
{
   128f2:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   128f4:	d302      	bcc.n	128fc <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   128f6:	4b13      	ldr	r3, [pc, #76]	; (12944 <z_log_strdup+0x58>)
   128f8:	4298      	cmp	r0, r3
   128fa:	d31c      	bcc.n	12936 <z_log_strdup+0x4a>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   128fc:	2200      	movs	r2, #0
   128fe:	2300      	movs	r3, #0
   12900:	4811      	ldr	r0, [pc, #68]	; (12948 <z_log_strdup+0x5c>)
   12902:	a901      	add	r1, sp, #4
   12904:	f010 f85a 	bl	229bc <k_mem_slab_alloc>
	if (err != 0) {
   12908:	4605      	mov	r5, r0
   1290a:	b9b8      	cbnz	r0, 1293c <z_log_strdup+0x50>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1290c:	2201      	movs	r2, #1
   1290e:	9b01      	ldr	r3, [sp, #4]
   12910:	e8d3 1fef 	ldaex	r1, [r3]
   12914:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12918:	2800      	cmp	r0, #0
   1291a:	d1f9      	bne.n	12910 <z_log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   1291c:	9801      	ldr	r0, [sp, #4]
   1291e:	4621      	mov	r1, r4
   12920:	2241      	movs	r2, #65	; 0x41
   12922:	3004      	adds	r0, #4
   12924:	f015 fde7 	bl	284f6 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   12928:	237e      	movs	r3, #126	; 0x7e
   1292a:	9c01      	ldr	r4, [sp, #4]
   1292c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   12930:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	return dup->buf;
   12934:	3404      	adds	r4, #4
}
   12936:	4620      	mov	r0, r4
   12938:	b003      	add	sp, #12
   1293a:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
   1293c:	4c03      	ldr	r4, [pc, #12]	; (1294c <z_log_strdup+0x60>)
   1293e:	e7fa      	b.n	12936 <z_log_strdup+0x4a>
   12940:	0002bc68 	.word	0x0002bc68
   12944:	00031918 	.word	0x00031918
   12948:	20009288 	.word	0x20009288
   1294c:	0002d345 	.word	0x0002d345

00012950 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   12950:	b150      	cbz	r0, 12968 <log_is_strdup+0x18>
   12952:	4b06      	ldr	r3, [pc, #24]	; (1296c <log_is_strdup+0x1c>)
   12954:	4298      	cmp	r0, r3
   12956:	d306      	bcc.n	12966 <log_is_strdup+0x16>
   12958:	f503 7310 	add.w	r3, r3, #576	; 0x240
   1295c:	4298      	cmp	r0, r3
   1295e:	bf2c      	ite	cs
   12960:	2000      	movcs	r0, #0
   12962:	2001      	movcc	r0, #1
   12964:	4770      	bx	lr
   12966:	2000      	movs	r0, #0
}
   12968:	4770      	bx	lr
   1296a:	bf00      	nop
   1296c:	2000d760 	.word	0x2000d760

00012970 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
   12970:	4b46      	ldr	r3, [pc, #280]	; (12a8c <z_impl_log_process+0x11c>)
{
   12972:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   12976:	781b      	ldrb	r3, [r3, #0]
{
   12978:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   1297a:	b903      	cbnz	r3, 1297e <z_impl_log_process+0xe>
   1297c:	b1e0      	cbz	r0, 129b8 <z_impl_log_process+0x48>
	msg = get_msg();
   1297e:	f7ff fef1 	bl	12764 <get_msg>
	if (msg.msg) {
   12982:	4605      	mov	r5, r0
   12984:	b158      	cbz	r0, 1299e <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12986:	4b42      	ldr	r3, [pc, #264]	; (12a90 <z_impl_log_process+0x120>)
   12988:	e8d3 2fef 	ldaex	r2, [r3]
   1298c:	3a01      	subs	r2, #1
   1298e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12992:	2900      	cmp	r1, #0
   12994:	d1f8      	bne.n	12988 <z_impl_log_process+0x18>
	if (!bypass) {
   12996:	b19c      	cbz	r4, 129c0 <z_impl_log_process+0x50>
			log_msg_put(msg.msg);
   12998:	4628      	mov	r0, r5
   1299a:	f014 faab 	bl	26ef4 <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
   1299e:	b92c      	cbnz	r4, 129ac <z_impl_log_process+0x3c>
	return dropped_cnt > 0;
   129a0:	4b3c      	ldr	r3, [pc, #240]	; (12a94 <z_impl_log_process+0x124>)
	if (!bypass && z_log_dropped_pending()) {
   129a2:	681b      	ldr	r3, [r3, #0]
   129a4:	2b00      	cmp	r3, #0
   129a6:	dd01      	ble.n	129ac <z_impl_log_process+0x3c>
		dropped_notify();
   129a8:	f7ff ff08 	bl	127bc <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   129ac:	483a      	ldr	r0, [pc, #232]	; (12a98 <z_impl_log_process+0x128>)
   129ae:	f014 f9a7 	bl	26d00 <log_list_head_peek>
   129b2:	1e04      	subs	r4, r0, #0
   129b4:	bf18      	it	ne
   129b6:	2401      	movne	r4, #1
}
   129b8:	4620      	mov	r0, r4
   129ba:	b003      	add	sp, #12
   129bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   129c0:	4b36      	ldr	r3, [pc, #216]	; (12a9c <z_impl_log_process+0x12c>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
   129c2:	781b      	ldrb	r3, [r3, #0]
   129c4:	b9b3      	cbnz	r3, 129f4 <z_impl_log_process+0x84>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   129c6:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   129c8:	07db      	lsls	r3, r3, #31
   129ca:	d413      	bmi.n	129f4 <z_impl_log_process+0x84>
	msg_str = log_msg_str_get(msg);
   129cc:	f014 faa1 	bl	26f12 <log_msg_str_get>
   129d0:	4681      	mov	r9, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   129d2:	4628      	mov	r0, r5
   129d4:	f014 fa6c 	bl	26eb0 <log_msg_nargs_get>
   129d8:	4601      	mov	r1, r0
   129da:	4648      	mov	r0, r9
   129dc:	f7ff fe6a 	bl	126b4 <z_log_get_s_mask>
   129e0:	4607      	mov	r7, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   129e2:	4a2f      	ldr	r2, [pc, #188]	; (12aa0 <z_impl_log_process+0x130>)
   129e4:	4b2f      	ldr	r3, [pc, #188]	; (12aa4 <z_impl_log_process+0x134>)
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   129e6:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 12ac8 <z_impl_log_process+0x158>
   129ea:	1a9b      	subs	r3, r3, r2
   129ec:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
   129f0:	9201      	str	r2, [sp, #4]
	while (mask) {
   129f2:	b937      	cbnz	r7, 12a02 <z_impl_log_process+0x92>
   129f4:	4e2c      	ldr	r6, [pc, #176]	; (12aa8 <z_impl_log_process+0x138>)
   129f6:	4f2d      	ldr	r7, [pc, #180]	; (12aac <z_impl_log_process+0x13c>)
   129f8:	f04f 0800 	mov.w	r8, #0
   129fc:	1bbf      	subs	r7, r7, r6
   129fe:	113f      	asrs	r7, r7, #4
   12a00:	e041      	b.n	12a86 <z_impl_log_process+0x116>
		idx = 31 - __builtin_clz(mask);
   12a02:	fab7 f887 	clz	r8, r7
   12a06:	f1c8 081f 	rsb	r8, r8, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   12a0a:	4641      	mov	r1, r8
   12a0c:	4628      	mov	r0, r5
   12a0e:	f014 fa52 	bl	26eb6 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   12a12:	4b27      	ldr	r3, [pc, #156]	; (12ab0 <z_impl_log_process+0x140>)
		str = (const char *)log_msg_arg_get(msg, idx);
   12a14:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   12a16:	4298      	cmp	r0, r3
   12a18:	d302      	bcc.n	12a20 <z_impl_log_process+0xb0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   12a1a:	4b26      	ldr	r3, [pc, #152]	; (12ab4 <z_impl_log_process+0x144>)
   12a1c:	4298      	cmp	r0, r3
   12a1e:	d320      	bcc.n	12a62 <z_impl_log_process+0xf2>
   12a20:	4610      	mov	r0, r2
   12a22:	f7ff ff95 	bl	12950 <log_is_strdup>
   12a26:	4606      	mov	r6, r0
   12a28:	b9d8      	cbnz	r0, 12a62 <z_impl_log_process+0xf2>
   12a2a:	4b23      	ldr	r3, [pc, #140]	; (12ab8 <z_impl_log_process+0x148>)
   12a2c:	429a      	cmp	r2, r3
   12a2e:	d018      	beq.n	12a62 <z_impl_log_process+0xf2>
	return msg->hdr.ids.source_id;
   12a30:	896b      	ldrh	r3, [r5, #10]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   12a32:	4922      	ldr	r1, [pc, #136]	; (12abc <z_impl_log_process+0x14c>)
   12a34:	f3c3 1389 	ubfx	r3, r3, #6, #10
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   12a38:	455b      	cmp	r3, fp
	return __log_const_start[source_id].name;
   12a3a:	bf38      	it	cc
   12a3c:	9a01      	ldrcc	r2, [sp, #4]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   12a3e:	4820      	ldr	r0, [pc, #128]	; (12ac0 <z_impl_log_process+0x150>)
   12a40:	bf38      	it	cc
   12a42:	f852 6033 	ldrcc.w	r6, [r2, r3, lsl #3]
   12a46:	23d0      	movs	r3, #208	; 0xd0
   12a48:	4652      	mov	r2, sl
   12a4a:	f013 fe67 	bl	2671c <printk>
   12a4e:	4641      	mov	r1, r8
   12a50:	481c      	ldr	r0, [pc, #112]	; (12ac4 <z_impl_log_process+0x154>)
   12a52:	464b      	mov	r3, r9
   12a54:	4632      	mov	r2, r6
   12a56:	f013 fe61 	bl	2671c <printk>
   12a5a:	21d0      	movs	r1, #208	; 0xd0
   12a5c:	4650      	mov	r0, sl
   12a5e:	f014 f902 	bl	26c66 <assert_post_action>
		mask &= ~BIT(idx);
   12a62:	2301      	movs	r3, #1
   12a64:	fa03 f808 	lsl.w	r8, r3, r8
   12a68:	ea27 0708 	bic.w	r7, r7, r8
   12a6c:	e7c1      	b.n	129f2 <z_impl_log_process+0x82>
			if (log_backend_is_active(backend) &&
   12a6e:	4630      	mov	r0, r6
   12a70:	f014 f94e 	bl	26d10 <log_backend_is_active>
   12a74:	b120      	cbz	r0, 12a80 <z_impl_log_process+0x110>
	backend->api->put(backend, msg);
   12a76:	6833      	ldr	r3, [r6, #0]
   12a78:	4629      	mov	r1, r5
   12a7a:	4630      	mov	r0, r6
   12a7c:	685b      	ldr	r3, [r3, #4]
   12a7e:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   12a80:	f108 0801 	add.w	r8, r8, #1
   12a84:	3610      	adds	r6, #16
   12a86:	45b8      	cmp	r8, r7
   12a88:	dbf1      	blt.n	12a6e <z_impl_log_process+0xfe>
   12a8a:	e785      	b.n	12998 <z_impl_log_process+0x28>
   12a8c:	2000a425 	.word	0x2000a425
   12a90:	20009274 	.word	0x20009274
   12a94:	20009278 	.word	0x20009278
   12a98:	20009280 	.word	0x20009280
   12a9c:	2000a426 	.word	0x2000a426
   12aa0:	0002bfe4 	.word	0x0002bfe4
   12aa4:	0002c104 	.word	0x0002c104
   12aa8:	0002c104 	.word	0x0002c104
   12aac:	0002c114 	.word	0x0002c114
   12ab0:	0002bc68 	.word	0x0002bc68
   12ab4:	00031918 	.word	0x00031918
   12ab8:	0002d345 	.word	0x0002d345
   12abc:	0002dee4 	.word	0x0002dee4
   12ac0:	0002cfb2 	.word	0x0002cfb2
   12ac4:	0002d35f 	.word	0x0002d35f
   12ac8:	0002d294 	.word	0x0002d294

00012acc <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   12acc:	4b27      	ldr	r3, [pc, #156]	; (12b6c <msg_finalize+0xa0>)
{
   12ace:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
   12ad0:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   12ad2:	8141      	strh	r1, [r0, #10]
{
   12ad4:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   12ad6:	4798      	blx	r3
   12ad8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   12ada:	f04f 0320 	mov.w	r3, #32
   12ade:	f3ef 8511 	mrs	r5, BASEPRI
   12ae2:	f383 8811 	msr	BASEPRI, r3
   12ae6:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   12aea:	4821      	ldr	r0, [pc, #132]	; (12b70 <msg_finalize+0xa4>)
   12aec:	4621      	mov	r1, r4
   12aee:	f014 f8fd 	bl	26cec <log_list_add_tail>
	__asm__ volatile(
   12af2:	f385 8811 	msr	BASEPRI, r5
   12af6:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12afa:	4b1e      	ldr	r3, [pc, #120]	; (12b74 <msg_finalize+0xa8>)
   12afc:	e8d3 2fef 	ldaex	r2, [r3]
   12b00:	3201      	adds	r2, #1
   12b02:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12b06:	2900      	cmp	r1, #0
   12b08:	d1f8      	bne.n	12afc <msg_finalize+0x30>
	if (panic_mode) {
   12b0a:	4a1b      	ldr	r2, [pc, #108]	; (12b78 <msg_finalize+0xac>)
   12b0c:	7812      	ldrb	r2, [r2, #0]
   12b0e:	b182      	cbz	r2, 12b32 <msg_finalize+0x66>
	__asm__ volatile(
   12b10:	f04f 0320 	mov.w	r3, #32
   12b14:	f3ef 8411 	mrs	r4, BASEPRI
   12b18:	f383 8811 	msr	BASEPRI, r3
   12b1c:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   12b20:	2000      	movs	r0, #0
   12b22:	f7ff ff25 	bl	12970 <z_impl_log_process>
	__asm__ volatile(
   12b26:	f384 8811 	msr	BASEPRI, r4
   12b2a:	f3bf 8f6f 	isb	sy
}
   12b2e:	b003      	add	sp, #12
   12b30:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   12b32:	4a12      	ldr	r2, [pc, #72]	; (12b7c <msg_finalize+0xb0>)
   12b34:	681b      	ldr	r3, [r3, #0]
   12b36:	6812      	ldr	r2, [r2, #0]
   12b38:	2a00      	cmp	r2, #0
   12b3a:	d0f8      	beq.n	12b2e <msg_finalize+0x62>
   12b3c:	2b01      	cmp	r3, #1
   12b3e:	d10a      	bne.n	12b56 <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
   12b40:	2200      	movs	r2, #0
   12b42:	2300      	movs	r3, #0
   12b44:	480e      	ldr	r0, [pc, #56]	; (12b80 <msg_finalize+0xb4>)
   12b46:	e9cd 2300 	strd	r2, r3, [sp]
   12b4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   12b4e:	2300      	movs	r3, #0
   12b50:	f013 f836 	bl	25bc0 <z_impl_k_timer_start>
   12b54:	e7eb      	b.n	12b2e <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   12b56:	2b0a      	cmp	r3, #10
   12b58:	d1e9      	bne.n	12b2e <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
   12b5a:	4809      	ldr	r0, [pc, #36]	; (12b80 <msg_finalize+0xb4>)
   12b5c:	f019 f813 	bl	2bb86 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   12b60:	4808      	ldr	r0, [pc, #32]	; (12b84 <msg_finalize+0xb8>)
}
   12b62:	b003      	add	sp, #12
   12b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   12b68:	f010 bc98 	b.w	2349c <z_impl_k_sem_give>
   12b6c:	200081a0 	.word	0x200081a0
   12b70:	20009280 	.word	0x20009280
   12b74:	20009274 	.word	0x20009274
   12b78:	2000a426 	.word	0x2000a426
   12b7c:	200092a8 	.word	0x200092a8
   12b80:	20008750 	.word	0x20008750
   12b84:	20008550 	.word	0x20008550

00012b88 <log_process_thread_func>:
	return __log_backends_end - __log_backends_start;
   12b88:	4b16      	ldr	r3, [pc, #88]	; (12be4 <log_process_thread_func+0x5c>)
   12b8a:	4a17      	ldr	r2, [pc, #92]	; (12be8 <log_process_thread_func+0x60>)
{
   12b8c:	b510      	push	{r4, lr}
   12b8e:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   12b90:	2b00      	cmp	r3, #0
   12b92:	dc0b      	bgt.n	12bac <log_process_thread_func+0x24>
   12b94:	4915      	ldr	r1, [pc, #84]	; (12bec <log_process_thread_func+0x64>)
   12b96:	4816      	ldr	r0, [pc, #88]	; (12bf0 <log_process_thread_func+0x68>)
   12b98:	f240 536d 	movw	r3, #1389	; 0x56d
   12b9c:	4a15      	ldr	r2, [pc, #84]	; (12bf4 <log_process_thread_func+0x6c>)
   12b9e:	f013 fdbd 	bl	2671c <printk>
   12ba2:	f240 516d 	movw	r1, #1389	; 0x56d
   12ba6:	4813      	ldr	r0, [pc, #76]	; (12bf4 <log_process_thread_func+0x6c>)
   12ba8:	f014 f85d 	bl	26c66 <assert_post_action>
	log_init();
   12bac:	f7ff fe60 	bl	12870 <log_init>
	return z_impl_k_current_get();
   12bb0:	f012 fb6c 	bl	2528c <z_impl_k_current_get>
	proc_tid = process_tid;
   12bb4:	4b10      	ldr	r3, [pc, #64]	; (12bf8 <log_process_thread_func+0x70>)
   12bb6:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   12bb8:	b130      	cbz	r0, 12bc8 <log_process_thread_func+0x40>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   12bba:	4b10      	ldr	r3, [pc, #64]	; (12bfc <log_process_thread_func+0x74>)
	    process_tid &&
   12bbc:	681b      	ldr	r3, [r3, #0]
   12bbe:	2b09      	cmp	r3, #9
   12bc0:	dd02      	ble.n	12bc8 <log_process_thread_func+0x40>
	z_impl_k_sem_give(sem);
   12bc2:	480f      	ldr	r0, [pc, #60]	; (12c00 <log_process_thread_func+0x78>)
   12bc4:	f010 fc6a 	bl	2349c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   12bc8:	4c0d      	ldr	r4, [pc, #52]	; (12c00 <log_process_thread_func+0x78>)
   12bca:	2000      	movs	r0, #0
   12bcc:	f7ff fed0 	bl	12970 <z_impl_log_process>
		if (log_process(false) == false) {
   12bd0:	2800      	cmp	r0, #0
   12bd2:	d1fa      	bne.n	12bca <log_process_thread_func+0x42>
   12bd4:	f04f 32ff 	mov.w	r2, #4294967295
   12bd8:	f04f 33ff 	mov.w	r3, #4294967295
   12bdc:	4620      	mov	r0, r4
   12bde:	f010 fca1 	bl	23524 <z_impl_k_sem_take>
   12be2:	e7f2      	b.n	12bca <log_process_thread_func+0x42>
   12be4:	0002c114 	.word	0x0002c114
   12be8:	0002c104 	.word	0x0002c104
   12bec:	0002d3a0 	.word	0x0002d3a0
   12bf0:	0002cfb2 	.word	0x0002cfb2
   12bf4:	0002d294 	.word	0x0002d294
   12bf8:	200092a8 	.word	0x200092a8
   12bfc:	20009274 	.word	0x20009274
   12c00:	20008550 	.word	0x20008550

00012c04 <z_impl_log_panic>:
{
   12c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   12c06:	4f0f      	ldr	r7, [pc, #60]	; (12c44 <z_impl_log_panic+0x40>)
   12c08:	783d      	ldrb	r5, [r7, #0]
   12c0a:	b975      	cbnz	r5, 12c2a <z_impl_log_panic+0x26>
	log_init();
   12c0c:	f7ff fe30 	bl	12870 <log_init>
   12c10:	4c0d      	ldr	r4, [pc, #52]	; (12c48 <z_impl_log_panic+0x44>)
   12c12:	4e0e      	ldr	r6, [pc, #56]	; (12c4c <z_impl_log_panic+0x48>)
   12c14:	1b36      	subs	r6, r6, r4
   12c16:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   12c18:	42b5      	cmp	r5, r6
   12c1a:	db07      	blt.n	12c2c <z_impl_log_panic+0x28>
   12c1c:	2000      	movs	r0, #0
   12c1e:	f7ff fea7 	bl	12970 <z_impl_log_process>
		while (log_process(false) == true) {
   12c22:	2800      	cmp	r0, #0
   12c24:	d1fa      	bne.n	12c1c <z_impl_log_panic+0x18>
	panic_mode = true;
   12c26:	2301      	movs	r3, #1
   12c28:	703b      	strb	r3, [r7, #0]
}
   12c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   12c2c:	4620      	mov	r0, r4
   12c2e:	f014 f86f 	bl	26d10 <log_backend_is_active>
   12c32:	b118      	cbz	r0, 12c3c <z_impl_log_panic+0x38>
	backend->api->panic(backend);
   12c34:	6823      	ldr	r3, [r4, #0]
   12c36:	4620      	mov	r0, r4
   12c38:	695b      	ldr	r3, [r3, #20]
   12c3a:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   12c3c:	3501      	adds	r5, #1
   12c3e:	3410      	adds	r4, #16
   12c40:	e7ea      	b.n	12c18 <z_impl_log_panic+0x14>
   12c42:	bf00      	nop
   12c44:	2000a426 	.word	0x2000a426
   12c48:	0002c104 	.word	0x0002c104
   12c4c:	0002c114 	.word	0x0002c114

00012c50 <log_free>:
{
   12c50:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   12c52:	3804      	subs	r0, #4
   12c54:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12c56:	e8d0 3fef 	ldaex	r3, [r0]
   12c5a:	1e5a      	subs	r2, r3, #1
   12c5c:	e8c0 2fe1 	stlex	r1, r2, [r0]
   12c60:	2900      	cmp	r1, #0
   12c62:	d1f8      	bne.n	12c56 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
   12c64:	2b01      	cmp	r3, #1
   12c66:	d103      	bne.n	12c70 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   12c68:	4803      	ldr	r0, [pc, #12]	; (12c78 <log_free+0x28>)
   12c6a:	a901      	add	r1, sp, #4
   12c6c:	f00f ff12 	bl	22a94 <k_mem_slab_free>
}
   12c70:	b003      	add	sp, #12
   12c72:	f85d fb04 	ldr.w	pc, [sp], #4
   12c76:	bf00      	nop
   12c78:	20009288 	.word	0x20009288

00012c7c <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   12c7c:	2320      	movs	r3, #32
   12c7e:	4902      	ldr	r1, [pc, #8]	; (12c88 <log_msg_pool_init+0xc>)
   12c80:	461a      	mov	r2, r3
   12c82:	4802      	ldr	r0, [pc, #8]	; (12c8c <log_msg_pool_init+0x10>)
   12c84:	f018 be4a 	b.w	2b91c <k_mem_slab_init>
   12c88:	2000d9a0 	.word	0x2000d9a0
   12c8c:	200092ac 	.word	0x200092ac

00012c90 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
   12c90:	2300      	movs	r3, #0
{
   12c92:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   12c94:	4d09      	ldr	r5, [pc, #36]	; (12cbc <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   12c96:	9301      	str	r3, [sp, #4]
   12c98:	2001      	movs	r0, #1
   12c9a:	f7ff fe69 	bl	12970 <z_impl_log_process>
   12c9e:	4604      	mov	r4, r0
			z_log_dropped();
   12ca0:	f7ff fd74 	bl	1278c <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   12ca4:	2200      	movs	r2, #0
   12ca6:	2300      	movs	r3, #0
   12ca8:	4628      	mov	r0, r5
   12caa:	a901      	add	r1, sp, #4
   12cac:	f00f fe86 	bl	229bc <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   12cb0:	b108      	cbz	r0, 12cb6 <log_msg_no_space_handle+0x26>
   12cb2:	2c00      	cmp	r4, #0
   12cb4:	d1f0      	bne.n	12c98 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   12cb6:	9801      	ldr	r0, [sp, #4]
   12cb8:	b003      	add	sp, #12
   12cba:	bd30      	pop	{r4, r5, pc}
   12cbc:	200092ac 	.word	0x200092ac

00012cc0 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
   12cc0:	2300      	movs	r3, #0
{
   12cc2:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   12cc4:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
   12cc6:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   12cc8:	4806      	ldr	r0, [pc, #24]	; (12ce4 <log_msg_chunk_alloc+0x24>)
   12cca:	2300      	movs	r3, #0
   12ccc:	a901      	add	r1, sp, #4
   12cce:	f00f fe75 	bl	229bc <k_mem_slab_alloc>
	if (err != 0) {
   12cd2:	b110      	cbz	r0, 12cda <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   12cd4:	f7ff ffdc 	bl	12c90 <log_msg_no_space_handle>
   12cd8:	9001      	str	r0, [sp, #4]
}
   12cda:	9801      	ldr	r0, [sp, #4]
   12cdc:	b003      	add	sp, #12
   12cde:	f85d fb04 	ldr.w	pc, [sp], #4
   12ce2:	bf00      	nop
   12ce4:	200092ac 	.word	0x200092ac

00012ce8 <msg_free>:
{
   12ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12cea:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   12cec:	7a45      	ldrb	r5, [r0, #9]
{
   12cee:	b085      	sub	sp, #20
   12cf0:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   12cf2:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
   12cf4:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
   12cf8:	d41c      	bmi.n	12d34 <msg_free+0x4c>
   12cfa:	b1dd      	cbz	r5, 12d34 <msg_free+0x4c>
		uint32_t smask = 0U;
   12cfc:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
   12cfe:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   12d00:	4631      	mov	r1, r6
   12d02:	9801      	ldr	r0, [sp, #4]
   12d04:	f014 f8d7 	bl	26eb6 <log_msg_arg_get>
   12d08:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   12d0a:	f7ff fe21 	bl	12950 <log_is_strdup>
   12d0e:	b170      	cbz	r0, 12d2e <msg_free+0x46>
				if (smask == 0U) {
   12d10:	b934      	cbnz	r4, 12d20 <msg_free+0x38>
					smask = z_log_get_s_mask(
   12d12:	9b01      	ldr	r3, [sp, #4]
   12d14:	4629      	mov	r1, r5
   12d16:	6918      	ldr	r0, [r3, #16]
   12d18:	f7ff fccc 	bl	126b4 <z_log_get_s_mask>
					if (smask == 0U) {
   12d1c:	4604      	mov	r4, r0
   12d1e:	b148      	cbz	r0, 12d34 <msg_free+0x4c>
				if (smask & BIT(i)) {
   12d20:	fa24 f306 	lsr.w	r3, r4, r6
   12d24:	07d9      	lsls	r1, r3, #31
   12d26:	d502      	bpl.n	12d2e <msg_free+0x46>
					log_free(buf);
   12d28:	4638      	mov	r0, r7
   12d2a:	f7ff ff91 	bl	12c50 <log_free>
		for (i = 0U; i < nargs; i++) {
   12d2e:	3601      	adds	r6, #1
   12d30:	42ae      	cmp	r6, r5
   12d32:	d3e5      	bcc.n	12d00 <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
   12d34:	9b01      	ldr	r3, [sp, #4]
   12d36:	7a1a      	ldrb	r2, [r3, #8]
   12d38:	0792      	lsls	r2, r2, #30
   12d3a:	d504      	bpl.n	12d46 <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
   12d3c:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   12d3e:	4c08      	ldr	r4, [pc, #32]	; (12d60 <msg_free+0x78>)
   12d40:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   12d42:	9b03      	ldr	r3, [sp, #12]
   12d44:	b92b      	cbnz	r3, 12d52 <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   12d46:	4806      	ldr	r0, [pc, #24]	; (12d60 <msg_free+0x78>)
   12d48:	a901      	add	r1, sp, #4
   12d4a:	f00f fea3 	bl	22a94 <k_mem_slab_free>
}
   12d4e:	b005      	add	sp, #20
   12d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   12d52:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   12d54:	4620      	mov	r0, r4
   12d56:	a903      	add	r1, sp, #12
   12d58:	f00f fe9c 	bl	22a94 <k_mem_slab_free>
		cont = next;
   12d5c:	9503      	str	r5, [sp, #12]
   12d5e:	e7f0      	b.n	12d42 <msg_free+0x5a>
   12d60:	200092ac 	.word	0x200092ac

00012d64 <log_msg_create_n>:
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   12d64:	2a0e      	cmp	r2, #14
{
   12d66:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d6a:	4681      	mov	r9, r0
   12d6c:	4688      	mov	r8, r1
   12d6e:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   12d70:	d90b      	bls.n	12d8a <log_msg_create_n+0x26>
   12d72:	492d      	ldr	r1, [pc, #180]	; (12e28 <log_msg_create_n+0xc4>)
   12d74:	482d      	ldr	r0, [pc, #180]	; (12e2c <log_msg_create_n+0xc8>)
   12d76:	f240 1337 	movw	r3, #311	; 0x137
   12d7a:	4a2d      	ldr	r2, [pc, #180]	; (12e30 <log_msg_create_n+0xcc>)
   12d7c:	f013 fcce 	bl	2671c <printk>
   12d80:	f240 1137 	movw	r1, #311	; 0x137
   12d84:	482a      	ldr	r0, [pc, #168]	; (12e30 <log_msg_create_n+0xcc>)
   12d86:	f013 ff6e 	bl	26c66 <assert_post_action>
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   12d8a:	f7ff ff99 	bl	12cc0 <log_msg_chunk_alloc>

	if (msg != NULL) {
   12d8e:	4604      	mov	r4, r0
   12d90:	b330      	cbz	r0, 12de0 <log_msg_create_n+0x7c>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   12d92:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   12d94:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   12d96:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   12d98:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   12d9a:	8107      	strh	r7, [r0, #8]
   12d9c:	d909      	bls.n	12db2 <log_msg_create_n+0x4e>
	msg->hdr.params.generic.ext = 1;
   12d9e:	2202      	movs	r2, #2
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   12da0:	f1a5 0a02 	sub.w	sl, r5, #2
	msg->hdr.params.generic.ext = 1;
   12da4:	8102      	strh	r2, [r0, #8]
	next = &msg->payload.ext.next;
   12da6:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   12daa:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   12dac:	f1ba 0f00 	cmp.w	sl, #0
   12db0:	dc0e      	bgt.n	12dd0 <log_msg_create_n+0x6c>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   12db2:	7a63      	ldrb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   12db4:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   12db6:	f365 1307 	bfi	r3, r5, #4, #4
		msg->str = str;
   12dba:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   12dbe:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   12dc0:	d818      	bhi.n	12df4 <log_msg_create_n+0x90>
		(void)memcpy(msg->payload.single.args, args,
   12dc2:	4641      	mov	r1, r8
   12dc4:	00aa      	lsls	r2, r5, #2
   12dc6:	f104 0014 	add.w	r0, r4, #20
   12dca:	f015 fbe2 	bl	28592 <memcpy>
	while (nargs != 0U) {
   12dce:	e007      	b.n	12de0 <log_msg_create_n+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   12dd0:	f7ff ff76 	bl	12cc0 <log_msg_chunk_alloc>
		if (cont == NULL) {
   12dd4:	4606      	mov	r6, r0
   12dd6:	b930      	cbnz	r0, 12de6 <log_msg_create_n+0x82>
			msg_free(msg);
   12dd8:	4620      	mov	r0, r4
   12dda:	f7ff ff85 	bl	12ce8 <msg_free>
			return NULL;
   12dde:	4634      	mov	r4, r6
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   12de0:	4620      	mov	r0, r4
   12de2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   12de6:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   12dea:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
   12dee:	4683      	mov	fp, r0
		cont->next = NULL;
   12df0:	6007      	str	r7, [r0, #0]
		n -= ARGS_CONT_MSG;
   12df2:	e7db      	b.n	12dac <log_msg_create_n+0x48>
		(void)memcpy(msg->payload.ext.data.args, args,
   12df4:	4641      	mov	r1, r8
   12df6:	2208      	movs	r2, #8
   12df8:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   12dfc:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   12dfe:	f015 fbc8 	bl	28592 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   12e02:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   12e04:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   12e08:	2d07      	cmp	r5, #7
   12e0a:	462e      	mov	r6, r5
   12e0c:	bf28      	it	cs
   12e0e:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   12e10:	ea4f 0986 	mov.w	r9, r6, lsl #2
   12e14:	4641      	mov	r1, r8
   12e16:	1d38      	adds	r0, r7, #4
   12e18:	464a      	mov	r2, r9
   12e1a:	f015 fbba 	bl	28592 <memcpy>
	while (nargs != 0U) {
   12e1e:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   12e20:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   12e22:	44c8      	add	r8, r9
	while (nargs != 0U) {
   12e24:	d1f0      	bne.n	12e08 <log_msg_create_n+0xa4>
   12e26:	e7db      	b.n	12de0 <log_msg_create_n+0x7c>
   12e28:	0002d3ec 	.word	0x0002d3ec
   12e2c:	0002cfb2 	.word	0x0002cfb2
   12e30:	0002d3c0 	.word	0x0002d3c0

00012e34 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   12e34:	b40e      	push	{r1, r2, r3}
   12e36:	b503      	push	{r0, r1, lr}
   12e38:	ab03      	add	r3, sp, #12
   12e3a:	f853 2b04 	ldr.w	r2, [r3], #4
   12e3e:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   12e40:	4804      	ldr	r0, [pc, #16]	; (12e54 <print_formatted+0x20>)
	va_start(args, fmt);
   12e42:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   12e44:	f7ff f830 	bl	11ea8 <cbvprintf>
	va_end(args);

	return length;
}
   12e48:	b002      	add	sp, #8
   12e4a:	f85d eb04 	ldr.w	lr, [sp], #4
   12e4e:	b003      	add	sp, #12
   12e50:	4770      	bx	lr
   12e52:	bf00      	nop
   12e54:	00013091 	.word	0x00013091

00012e58 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   12e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   12e5c:	f011 0602 	ands.w	r6, r1, #2
{
   12e60:	b087      	sub	sp, #28
   12e62:	9205      	str	r2, [sp, #20]
   12e64:	4607      	mov	r7, r0
   12e66:	461a      	mov	r2, r3
   12e68:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   12e6c:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   12e70:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   12e74:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   12e78:	d006      	beq.n	12e88 <prefix_print+0x30>
	if (!format) {
   12e7a:	f011 0f44 	tst.w	r1, #68	; 0x44
   12e7e:	d138      	bne.n	12ef2 <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
   12e80:	4932      	ldr	r1, [pc, #200]	; (12f4c <prefix_print+0xf4>)
   12e82:	f7ff ffd7 	bl	12e34 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   12e86:	4606      	mov	r6, r0
	if (color) {
   12e88:	f1ba 0f00 	cmp.w	sl, #0
   12e8c:	d00a      	beq.n	12ea4 <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
   12e8e:	4b30      	ldr	r3, [pc, #192]	; (12f50 <prefix_print+0xf8>)
		print_formatted(output, "%s", log_color);
   12e90:	4638      	mov	r0, r7
		const char *log_color = start && (colors[level] != NULL) ?
   12e92:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
   12e96:	4b2f      	ldr	r3, [pc, #188]	; (12f54 <prefix_print+0xfc>)
   12e98:	492f      	ldr	r1, [pc, #188]	; (12f58 <prefix_print+0x100>)
   12e9a:	2a00      	cmp	r2, #0
   12e9c:	bf08      	it	eq
   12e9e:	461a      	moveq	r2, r3
   12ea0:	f7ff ffc8 	bl	12e34 <print_formatted>
	if (level_on) {
   12ea4:	b13d      	cbz	r5, 12eb6 <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
   12ea6:	4b2d      	ldr	r3, [pc, #180]	; (12f5c <prefix_print+0x104>)
   12ea8:	4638      	mov	r0, r7
   12eaa:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
   12eae:	492c      	ldr	r1, [pc, #176]	; (12f60 <prefix_print+0x108>)
   12eb0:	f7ff ffc0 	bl	12e34 <print_formatted>
   12eb4:	4605      	mov	r5, r0
	if (source_id >= 0) {
   12eb6:	f1b9 0f00 	cmp.w	r9, #0
   12eba:	db16      	blt.n	12eea <prefix_print+0x92>
		total += print_formatted(output,
   12ebc:	9b05      	ldr	r3, [sp, #20]
   12ebe:	2b00      	cmp	r3, #0
   12ec0:	d041      	beq.n	12f46 <prefix_print+0xee>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   12ec2:	2301      	movs	r3, #1
   12ec4:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
   12ec8:	4b26      	ldr	r3, [pc, #152]	; (12f64 <prefix_print+0x10c>)
   12eca:	f018 0f10 	tst.w	r8, #16
   12ece:	4c26      	ldr	r4, [pc, #152]	; (12f68 <prefix_print+0x110>)
   12ed0:	bf18      	it	ne
   12ed2:	461c      	movne	r4, r3
   12ed4:	4649      	mov	r1, r9
   12ed6:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   12eda:	f7ff fc8d 	bl	127f8 <log_source_name_get>
   12ede:	4621      	mov	r1, r4
   12ee0:	4602      	mov	r2, r0
   12ee2:	4638      	mov	r0, r7
   12ee4:	f7ff ffa6 	bl	12e34 <print_formatted>
   12ee8:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   12eea:	19a8      	adds	r0, r5, r6
   12eec:	b007      	add	sp, #28
   12eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   12ef2:	4b1e      	ldr	r3, [pc, #120]	; (12f6c <prefix_print+0x114>)
   12ef4:	6819      	ldr	r1, [r3, #0]
   12ef6:	b321      	cbz	r1, 12f42 <prefix_print+0xea>
		timestamp /= timestamp_div;
   12ef8:	4b1d      	ldr	r3, [pc, #116]	; (12f70 <prefix_print+0x118>)
   12efa:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
   12efe:	681b      	ldr	r3, [r3, #0]
		ms = (remainder * 1000U) / freq;
   12f00:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		timestamp /= timestamp_div;
   12f04:	fbb2 f3f3 	udiv	r3, r2, r3
		total_seconds = timestamp / freq;
   12f08:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   12f0c:	fbb4 f2fc 	udiv	r2, r4, ip
   12f10:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
   12f14:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   12f18:	4374      	muls	r4, r6
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12f1a:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   12f1e:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12f22:	fb01 441b 	mls	r4, r1, fp, r4
   12f26:	4374      	muls	r4, r6
		mins = seconds / 60U;
   12f28:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12f2c:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
   12f30:	e9cd b101 	strd	fp, r1, [sp, #4]
   12f34:	fb0e c113 	mls	r1, lr, r3, ip
   12f38:	9100      	str	r1, [sp, #0]
   12f3a:	490e      	ldr	r1, [pc, #56]	; (12f74 <prefix_print+0x11c>)
   12f3c:	f7ff ff7a 	bl	12e34 <print_formatted>
   12f40:	e7a1      	b.n	12e86 <prefix_print+0x2e>
		length = 0;
   12f42:	4608      	mov	r0, r1
   12f44:	e79f      	b.n	12e86 <prefix_print+0x2e>
		total += print_formatted(output,
   12f46:	4c08      	ldr	r4, [pc, #32]	; (12f68 <prefix_print+0x110>)
   12f48:	e7c4      	b.n	12ed4 <prefix_print+0x7c>
   12f4a:	bf00      	nop
   12f4c:	0002d405 	.word	0x0002d405
   12f50:	0002c278 	.word	0x0002c278
   12f54:	0002d3f7 	.word	0x0002d3f7
   12f58:	0002cd01 	.word	0x0002cd01
   12f5c:	0002c28c 	.word	0x0002c28c
   12f60:	0002d42a 	.word	0x0002d42a
   12f64:	0002d401 	.word	0x0002d401
   12f68:	0002d3fc 	.word	0x0002d3fc
   12f6c:	200092cc 	.word	0x200092cc
   12f70:	200092d0 	.word	0x200092d0
   12f74:	0002d40e 	.word	0x0002d40e

00012f78 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   12f78:	b538      	push	{r3, r4, r5, lr}
   12f7a:	460c      	mov	r4, r1
	if (color) {
   12f7c:	07e1      	lsls	r1, r4, #31
{
   12f7e:	4605      	mov	r5, r0
	if (color) {
   12f80:	d503      	bpl.n	12f8a <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   12f82:	4a08      	ldr	r2, [pc, #32]	; (12fa4 <postfix_print+0x2c>)
   12f84:	4908      	ldr	r1, [pc, #32]	; (12fa8 <postfix_print+0x30>)
   12f86:	f7ff ff55 	bl	12e34 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12f8a:	06e2      	lsls	r2, r4, #27
   12f8c:	d408      	bmi.n	12fa0 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   12f8e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   12f90:	4628      	mov	r0, r5
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
   12f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   12f96:	bf4c      	ite	mi
   12f98:	4904      	ldrmi	r1, [pc, #16]	; (12fac <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   12f9a:	4905      	ldrpl	r1, [pc, #20]	; (12fb0 <postfix_print+0x38>)
   12f9c:	f7ff bf4a 	b.w	12e34 <print_formatted>
}
   12fa0:	bd38      	pop	{r3, r4, r5, pc}
   12fa2:	bf00      	nop
   12fa4:	0002d3f7 	.word	0x0002d3f7
   12fa8:	0002cd01 	.word	0x0002cd01
   12fac:	00030726 	.word	0x00030726
   12fb0:	00030bc0 	.word	0x00030bc0

00012fb4 <hexdump_line_print>:
{
   12fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12fb8:	461d      	mov	r5, r3
   12fba:	9b08      	ldr	r3, [sp, #32]
   12fbc:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12fbe:	06da      	lsls	r2, r3, #27
{
   12fc0:	4604      	mov	r4, r0
   12fc2:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12fc4:	d405      	bmi.n	12fd2 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   12fc6:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   12fc8:	bf4c      	ite	mi
   12fca:	492a      	ldrmi	r1, [pc, #168]	; (13074 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   12fcc:	492a      	ldrpl	r1, [pc, #168]	; (13078 <hexdump_line_print+0xc4>)
   12fce:	f7ff ff31 	bl	12e34 <print_formatted>
{
   12fd2:	f04f 0800 	mov.w	r8, #0
		print_formatted(output, " ");
   12fd6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 13080 <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
   12fda:	45a8      	cmp	r8, r5
   12fdc:	db2a      	blt.n	13034 <hexdump_line_print+0x80>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12fde:	2500      	movs	r5, #0
			print_formatted(output, "   ");
   12fe0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 13084 <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
   12fe4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 13088 <hexdump_line_print+0xd4>
			print_formatted(output, " ");
   12fe8:	f8df a094 	ldr.w	sl, [pc, #148]	; 13080 <hexdump_line_print+0xcc>
		if (i < length) {
   12fec:	42bd      	cmp	r5, r7
   12fee:	d22f      	bcs.n	13050 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
   12ff0:	4649      	mov	r1, r9
   12ff2:	4620      	mov	r0, r4
   12ff4:	5d72      	ldrb	r2, [r6, r5]
   12ff6:	f7ff ff1d 	bl	12e34 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12ffa:	3501      	adds	r5, #1
   12ffc:	2d10      	cmp	r5, #16
   12ffe:	d120      	bne.n	13042 <hexdump_line_print+0x8e>
	print_formatted(output, "|");
   13000:	4620      	mov	r0, r4
   13002:	491e      	ldr	r1, [pc, #120]	; (1307c <hexdump_line_print+0xc8>)
   13004:	f7ff ff16 	bl	12e34 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13008:	2500      	movs	r5, #0
			print_formatted(output, " ");
   1300a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 13080 <hexdump_line_print+0xcc>
			print_formatted(output, "%c",
   1300e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1308c <hexdump_line_print+0xd8>
		if (i < length) {
   13012:	42af      	cmp	r7, r5
   13014:	d928      	bls.n	13068 <hexdump_line_print+0xb4>
			char c = (char)data[i];
   13016:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
   13018:	4649      	mov	r1, r9
	return (int)((((unsigned)c) >= ' ') &&
   1301a:	f1a2 0320 	sub.w	r3, r2, #32
   1301e:	2b5f      	cmp	r3, #95	; 0x5f
   13020:	bf28      	it	cs
   13022:	222e      	movcs	r2, #46	; 0x2e
   13024:	4620      	mov	r0, r4
   13026:	f7ff ff05 	bl	12e34 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1302a:	3501      	adds	r5, #1
   1302c:	2d10      	cmp	r5, #16
   1302e:	d114      	bne.n	1305a <hexdump_line_print+0xa6>
}
   13030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
   13034:	4649      	mov	r1, r9
   13036:	4620      	mov	r0, r4
   13038:	f7ff fefc 	bl	12e34 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   1303c:	f108 0801 	add.w	r8, r8, #1
   13040:	e7cb      	b.n	12fda <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   13042:	076a      	lsls	r2, r5, #29
   13044:	d1d2      	bne.n	12fec <hexdump_line_print+0x38>
			print_formatted(output, " ");
   13046:	4651      	mov	r1, sl
   13048:	4620      	mov	r0, r4
   1304a:	f7ff fef3 	bl	12e34 <print_formatted>
   1304e:	e7cd      	b.n	12fec <hexdump_line_print+0x38>
			print_formatted(output, "   ");
   13050:	4641      	mov	r1, r8
   13052:	4620      	mov	r0, r4
   13054:	f7ff feee 	bl	12e34 <print_formatted>
   13058:	e7cf      	b.n	12ffa <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   1305a:	076b      	lsls	r3, r5, #29
   1305c:	d1d9      	bne.n	13012 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   1305e:	4641      	mov	r1, r8
   13060:	4620      	mov	r0, r4
   13062:	f7ff fee7 	bl	12e34 <print_formatted>
   13066:	e7d4      	b.n	13012 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   13068:	4641      	mov	r1, r8
   1306a:	4620      	mov	r0, r4
   1306c:	f7ff fee2 	bl	12e34 <print_formatted>
   13070:	e7db      	b.n	1302a <hexdump_line_print+0x76>
   13072:	bf00      	nop
   13074:	00030726 	.word	0x00030726
   13078:	00030bc0 	.word	0x00030bc0
   1307c:	0002d436 	.word	0x0002d436
   13080:	00030e5d 	.word	0x00030e5d
   13084:	00030e5b 	.word	0x00030e5b
   13088:	0002d430 	.word	0x0002d430
   1308c:	0002d438 	.word	0x0002d438

00013090 <out_func>:
{
   13090:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   13092:	684b      	ldr	r3, [r1, #4]
{
   13094:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   13096:	681a      	ldr	r2, [r3, #0]
   13098:	68cb      	ldr	r3, [r1, #12]
{
   1309a:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1309c:	429a      	cmp	r2, r3
   1309e:	d102      	bne.n	130a6 <out_func+0x16>
		log_output_flush(out_ctx);
   130a0:	4608      	mov	r0, r1
   130a2:	f014 f8a9 	bl	271f8 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   130a6:	6863      	ldr	r3, [r4, #4]
   130a8:	e8d3 2fef 	ldaex	r2, [r3]
   130ac:	1c51      	adds	r1, r2, #1
   130ae:	e8c3 1fe0 	stlex	r0, r1, [r3]
   130b2:	2800      	cmp	r0, #0
   130b4:	d1f8      	bne.n	130a8 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   130b6:	68a3      	ldr	r3, [r4, #8]
   130b8:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   130ba:	6863      	ldr	r3, [r4, #4]
   130bc:	681a      	ldr	r2, [r3, #0]
   130be:	68e3      	ldr	r3, [r4, #12]
   130c0:	429a      	cmp	r2, r3
   130c2:	d909      	bls.n	130d8 <out_func+0x48>
   130c4:	4905      	ldr	r1, [pc, #20]	; (130dc <out_func+0x4c>)
   130c6:	4806      	ldr	r0, [pc, #24]	; (130e0 <out_func+0x50>)
   130c8:	2373      	movs	r3, #115	; 0x73
   130ca:	4a06      	ldr	r2, [pc, #24]	; (130e4 <out_func+0x54>)
   130cc:	f013 fb26 	bl	2671c <printk>
   130d0:	2173      	movs	r1, #115	; 0x73
   130d2:	4804      	ldr	r0, [pc, #16]	; (130e4 <out_func+0x54>)
   130d4:	f013 fdc7 	bl	26c66 <assert_post_action>
}
   130d8:	2000      	movs	r0, #0
   130da:	bd38      	pop	{r3, r4, r5, pc}
   130dc:	0002d46a 	.word	0x0002d46a
   130e0:	0002cfb2 	.word	0x0002cfb2
   130e4:	0002d43b 	.word	0x0002d43b

000130e8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   130e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   130ec:	7a8b      	ldrb	r3, [r1, #10]
   130ee:	4616      	mov	r6, r2
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
   130f0:	f013 0707 	ands.w	r7, r3, #7
{
   130f4:	4604      	mov	r4, r0
   130f6:	460d      	mov	r5, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   130f8:	7a0a      	ldrb	r2, [r1, #8]
   130fa:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(output, flags, std_msg, timestamp,
   130fc:	d020      	beq.n	13140 <log_output_msg_process+0x58>
   130fe:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
   13100:	8949      	ldrh	r1, [r1, #10]
   13102:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13106:	f3c1 1189 	ubfx	r1, r1, #6, #10
   1310a:	e9cd 7300 	strd	r7, r3, [sp]
   1310e:	9102      	str	r1, [sp, #8]
   13110:	68eb      	ldr	r3, [r5, #12]
   13112:	4631      	mov	r1, r6
   13114:	f002 0201 	and.w	r2, r2, #1
   13118:	f7ff fe9e 	bl	12e58 <prefix_print>
   1311c:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1311e:	7a2b      	ldrb	r3, [r5, #8]
   13120:	43db      	mvns	r3, r3
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   13122:	f013 0801 	ands.w	r8, r3, #1
   13126:	d00d      	beq.n	13144 <log_output_msg_process+0x5c>
		std_print(msg, output);
   13128:	4621      	mov	r1, r4
   1312a:	4628      	mov	r0, r5
   1312c:	f013 ff07 	bl	26f3e <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
   13130:	2f00      	cmp	r7, #0
   13132:	d03c      	beq.n	131ae <log_output_msg_process+0xc6>
		postfix_print(output, flags, level);
   13134:	463a      	mov	r2, r7
   13136:	4631      	mov	r1, r6
   13138:	4620      	mov	r0, r4
   1313a:	f7ff ff1d 	bl	12f78 <postfix_print>
   1313e:	e036      	b.n	131ae <log_output_msg_process+0xc6>
			0 : prefix_print(output, flags, std_msg, timestamp,
   13140:	46b9      	mov	r9, r7
   13142:	e7ec      	b.n	1311e <log_output_msg_process+0x36>
	} else if (raw_string) {
   13144:	2f00      	cmp	r7, #0
   13146:	d138      	bne.n	131ba <log_output_msg_process+0xd2>
	__ASSERT_NO_MSG(output->size);
   13148:	68e3      	ldr	r3, [r4, #12]
   1314a:	b95b      	cbnz	r3, 13164 <log_output_msg_process+0x7c>
   1314c:	492a      	ldr	r1, [pc, #168]	; (131f8 <log_output_msg_process+0x110>)
   1314e:	482b      	ldr	r0, [pc, #172]	; (131fc <log_output_msg_process+0x114>)
   13150:	f240 13cf 	movw	r3, #463	; 0x1cf
   13154:	4a2a      	ldr	r2, [pc, #168]	; (13200 <log_output_msg_process+0x118>)
   13156:	f013 fae1 	bl	2671c <printk>
   1315a:	f240 11cf 	movw	r1, #463	; 0x1cf
   1315e:	4828      	ldr	r0, [pc, #160]	; (13200 <log_output_msg_process+0x118>)
   13160:	f013 fd81 	bl	26c66 <assert_post_action>
			0 : prefix_print(output, flags, std_msg, timestamp,
   13164:	2600      	movs	r6, #0
		length = output->size;
   13166:	68e3      	ldr	r3, [r4, #12]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   13168:	aa06      	add	r2, sp, #24
		length = output->size;
   1316a:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   1316c:	4628      	mov	r0, r5
   1316e:	4633      	mov	r3, r6
   13170:	68a1      	ldr	r1, [r4, #8]
   13172:	f013 fed0 	bl	26f16 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   13176:	9a06      	ldr	r2, [sp, #24]
   13178:	6863      	ldr	r3, [r4, #4]
   1317a:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   1317c:	b14a      	cbz	r2, 13192 <log_output_msg_process+0xaa>
			eol = (output->buf[length - 1] == '\n');
   1317e:	68a3      	ldr	r3, [r4, #8]
   13180:	4413      	add	r3, r2
   13182:	f813 8c01 	ldrb.w	r8, [r3, #-1]
   13186:	f1a8 030a 	sub.w	r3, r8, #10
   1318a:	f1d3 0800 	rsbs	r8, r3, #0
   1318e:	eb48 0803 	adc.w	r8, r8, r3
		log_output_flush(output);
   13192:	4620      	mov	r0, r4
   13194:	f014 f830 	bl	271f8 <log_output_flush>
		offset += length;
   13198:	9b06      	ldr	r3, [sp, #24]
   1319a:	441e      	add	r6, r3
	} while (length > 0);
   1319c:	2b00      	cmp	r3, #0
   1319e:	d1e2      	bne.n	13166 <log_output_msg_process+0x7e>
	if (eol) {
   131a0:	f1b8 0f00 	cmp.w	r8, #0
   131a4:	d003      	beq.n	131ae <log_output_msg_process+0xc6>
		print_formatted(output, "\r");
   131a6:	4620      	mov	r0, r4
   131a8:	4916      	ldr	r1, [pc, #88]	; (13204 <log_output_msg_process+0x11c>)
   131aa:	f7ff fe43 	bl	12e34 <print_formatted>
	}

	log_output_flush(output);
   131ae:	4620      	mov	r0, r4
   131b0:	f014 f822 	bl	271f8 <log_output_flush>
}
   131b4:	b00a      	add	sp, #40	; 0x28
   131b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
   131ba:	4628      	mov	r0, r5
   131bc:	f013 fea9 	bl	26f12 <log_msg_str_get>
   131c0:	4911      	ldr	r1, [pc, #68]	; (13208 <log_output_msg_process+0x120>)
   131c2:	4602      	mov	r2, r0
   131c4:	4620      	mov	r0, r4
   131c6:	f7ff fe35 	bl	12e34 <print_formatted>
		length = sizeof(buf);
   131ca:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   131ce:	aa05      	add	r2, sp, #20
   131d0:	4643      	mov	r3, r8
   131d2:	4628      	mov	r0, r5
   131d4:	a906      	add	r1, sp, #24
		length = sizeof(buf);
   131d6:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   131da:	f013 fe9c 	bl	26f16 <log_msg_hexdump_data_get>
		if (length) {
   131de:	9a05      	ldr	r2, [sp, #20]
   131e0:	2a00      	cmp	r2, #0
   131e2:	d0a7      	beq.n	13134 <log_output_msg_process+0x4c>
			hexdump_line_print(output, buf, length,
   131e4:	464b      	mov	r3, r9
   131e6:	4620      	mov	r0, r4
   131e8:	9600      	str	r6, [sp, #0]
   131ea:	a906      	add	r1, sp, #24
   131ec:	f7ff fee2 	bl	12fb4 <hexdump_line_print>
			offset += length;
   131f0:	9b05      	ldr	r3, [sp, #20]
   131f2:	4498      	add	r8, r3
		length = sizeof(buf);
   131f4:	e7eb      	b.n	131ce <log_output_msg_process+0xe6>
   131f6:	bf00      	nop
   131f8:	0002d49a 	.word	0x0002d49a
   131fc:	0002cfb2 	.word	0x0002cfb2
   13200:	0002d43b 	.word	0x0002d43b
   13204:	0002d4a7 	.word	0x0002d4a7
   13208:	0002cd01 	.word	0x0002cd01

0001320c <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1320c:	f242 730f 	movw	r3, #9999	; 0x270f
{
   13210:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13212:	428b      	cmp	r3, r1
   13214:	bf28      	it	cs
   13216:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   13218:	6805      	ldr	r5, [r0, #0]
{
   1321a:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1321c:	2105      	movs	r1, #5
   1321e:	4668      	mov	r0, sp
   13220:	4a0d      	ldr	r2, [pc, #52]	; (13258 <log_output_dropped_process+0x4c>)
   13222:	f013 fa88 	bl	26736 <snprintk>
   13226:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   13228:	6863      	ldr	r3, [r4, #4]
   1322a:	4628      	mov	r0, r5
   1322c:	220b      	movs	r2, #11
   1322e:	685b      	ldr	r3, [r3, #4]
   13230:	490a      	ldr	r1, [pc, #40]	; (1325c <log_output_dropped_process+0x50>)
   13232:	f013 fe77 	bl	26f24 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   13236:	6863      	ldr	r3, [r4, #4]
   13238:	4632      	mov	r2, r6
   1323a:	4669      	mov	r1, sp
   1323c:	4628      	mov	r0, r5
   1323e:	685b      	ldr	r3, [r3, #4]
   13240:	f013 fe70 	bl	26f24 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   13244:	6863      	ldr	r3, [r4, #4]
   13246:	221b      	movs	r2, #27
   13248:	4628      	mov	r0, r5
   1324a:	685b      	ldr	r3, [r3, #4]
   1324c:	4904      	ldr	r1, [pc, #16]	; (13260 <log_output_dropped_process+0x54>)
   1324e:	f013 fe69 	bl	26f24 <buffer_write>
		     output->control_block->ctx);
}
   13252:	b002      	add	sp, #8
   13254:	bd70      	pop	{r4, r5, r6, pc}
   13256:	bf00      	nop
   13258:	0002cd81 	.word	0x0002cd81
   1325c:	0002d4e5 	.word	0x0002d4e5
   13260:	0002d4c9 	.word	0x0002d4c9

00013264 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   13264:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   13266:	2100      	movs	r1, #0
	timestamp_div = 1U;
   13268:	4a07      	ldr	r2, [pc, #28]	; (13288 <log_output_timestamp_freq_set+0x24>)
{
   1326a:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   1326c:	4c07      	ldr	r4, [pc, #28]	; (1328c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   1326e:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   13270:	42a0      	cmp	r0, r4
   13272:	d804      	bhi.n	1327e <log_output_timestamp_freq_set+0x1a>
   13274:	b101      	cbz	r1, 13278 <log_output_timestamp_freq_set+0x14>
   13276:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   13278:	4b05      	ldr	r3, [pc, #20]	; (13290 <log_output_timestamp_freq_set+0x2c>)
   1327a:	6018      	str	r0, [r3, #0]
}
   1327c:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   1327e:	2101      	movs	r1, #1
		frequency /= 2U;
   13280:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   13282:	005b      	lsls	r3, r3, #1
   13284:	e7f4      	b.n	13270 <log_output_timestamp_freq_set+0xc>
   13286:	bf00      	nop
   13288:	200092d0 	.word	0x200092d0
   1328c:	000f4240 	.word	0x000f4240
   13290:	200092cc 	.word	0x200092cc

00013294 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   13294:	2201      	movs	r2, #1
   13296:	4b01      	ldr	r3, [pc, #4]	; (1329c <log_backend_rtt_init+0x8>)
   13298:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   1329a:	4770      	bx	lr
   1329c:	2000a437 	.word	0x2000a437

000132a0 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
   132a0:	2201      	movs	r2, #1
   132a2:	4b02      	ldr	r3, [pc, #8]	; (132ac <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   132a4:	4802      	ldr	r0, [pc, #8]	; (132b0 <panic+0x10>)
   132a6:	701a      	strb	r2, [r3, #0]
   132a8:	f013 bfa6 	b.w	271f8 <log_output_flush>
   132ac:	2000a438 	.word	0x2000a438
   132b0:	0002c2bc 	.word	0x0002c2bc

000132b4 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   132b4:	4801      	ldr	r0, [pc, #4]	; (132bc <dropped+0x8>)
   132b6:	f7ff bfa9 	b.w	1320c <log_output_dropped_process>
   132ba:	bf00      	nop
   132bc:	0002c2bc 	.word	0x0002c2bc

000132c0 <put>:
{
   132c0:	b510      	push	{r4, lr}
   132c2:	460c      	mov	r4, r1
	log_msg_get(msg);
   132c4:	4608      	mov	r0, r1
   132c6:	f013 fdea 	bl	26e9e <log_msg_get>
	log_output_msg_process(output, msg, flags);
   132ca:	4621      	mov	r1, r4
   132cc:	4804      	ldr	r0, [pc, #16]	; (132e0 <put+0x20>)
   132ce:	220f      	movs	r2, #15
   132d0:	f7ff ff0a 	bl	130e8 <log_output_msg_process>
	log_msg_put(msg);
   132d4:	4620      	mov	r0, r4
}
   132d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   132da:	f013 be0b 	b.w	26ef4 <log_msg_put>
   132de:	bf00      	nop
   132e0:	0002c2bc 	.word	0x0002c2bc

000132e4 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   132e4:	4b05      	ldr	r3, [pc, #20]	; (132fc <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   132e6:	781b      	ldrb	r3, [r3, #0]
   132e8:	b11b      	cbz	r3, 132f2 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   132ea:	f241 3088 	movw	r0, #5000	; 0x1388
   132ee:	f018 bc11 	b.w	2bb14 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   132f2:	20a4      	movs	r0, #164	; 0xa4
   132f4:	2100      	movs	r1, #0
   132f6:	f011 bf91 	b.w	2521c <z_impl_k_sleep>
   132fa:	bf00      	nop
   132fc:	2000a438 	.word	0x2000a438

00013300 <data_out_block_mode>:
{
   13300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   13304:	f8df 9094 	ldr.w	r9, [pc, #148]	; 1339c <data_out_block_mode+0x9c>
{
   13308:	4680      	mov	r8, r0
   1330a:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   1330c:	2404      	movs	r4, #4
   1330e:	46cb      	mov	fp, r9
	return z_impl_k_mutex_lock(mutex, timeout);
   13310:	f8df a08c 	ldr.w	sl, [pc, #140]	; 133a0 <data_out_block_mode+0xa0>
		if (!is_sync_mode()) {
   13314:	f899 5000 	ldrb.w	r5, [r9]
   13318:	b9cd      	cbnz	r5, 1334e <data_out_block_mode+0x4e>
   1331a:	f04f 33ff 	mov.w	r3, #4294967295
   1331e:	f04f 32ff 	mov.w	r2, #4294967295
   13322:	4650      	mov	r0, sl
   13324:	f00f fd92 	bl	22e4c <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   13328:	463a      	mov	r2, r7
   1332a:	4641      	mov	r1, r8
   1332c:	4628      	mov	r0, r5
   1332e:	f00f f80f 	bl	22350 <SEGGER_RTT_WriteSkipNoLock>
   13332:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   13334:	4650      	mov	r0, sl
   13336:	f00f fe83 	bl	23040 <z_impl_k_mutex_unlock>
		if (ret) {
   1333a:	4d17      	ldr	r5, [pc, #92]	; (13398 <data_out_block_mode+0x98>)
   1333c:	b1fe      	cbz	r6, 1337e <data_out_block_mode+0x7e>
	host_present = true;
   1333e:	2301      	movs	r3, #1
   13340:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   13342:	f89b 3000 	ldrb.w	r3, [fp]
   13346:	b96b      	cbnz	r3, 13364 <data_out_block_mode+0x64>
}
   13348:	4638      	mov	r0, r7
   1334a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   1334e:	463a      	mov	r2, r7
   13350:	4641      	mov	r1, r8
   13352:	2000      	movs	r0, #0
   13354:	f00e fffc 	bl	22350 <SEGGER_RTT_WriteSkipNoLock>
   13358:	4606      	mov	r6, r0
   1335a:	e7ee      	b.n	1333a <data_out_block_mode+0x3a>
	if (retry_cnt == 0) {
   1335c:	b95c      	cbnz	r4, 13376 <data_out_block_mode+0x76>
		host_present = false;
   1335e:	702c      	strb	r4, [r5, #0]
   13360:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   13364:	2000      	movs	r0, #0
   13366:	f00f f83f 	bl	223e8 <SEGGER_RTT_HasDataUp>
   1336a:	2800      	cmp	r0, #0
   1336c:	d0ec      	beq.n	13348 <data_out_block_mode+0x48>
   1336e:	782b      	ldrb	r3, [r5, #0]
   13370:	2b00      	cmp	r3, #0
   13372:	d1f3      	bne.n	1335c <data_out_block_mode+0x5c>
   13374:	e7e8      	b.n	13348 <data_out_block_mode+0x48>
			on_failed_write(retry_cnt--);
   13376:	3c01      	subs	r4, #1
   13378:	f7ff ffb4 	bl	132e4 <on_failed_write.part.0>
   1337c:	e7f2      	b.n	13364 <data_out_block_mode+0x64>
		} else if (host_present) {
   1337e:	782b      	ldrb	r3, [r5, #0]
   13380:	b113      	cbz	r3, 13388 <data_out_block_mode+0x88>
	if (retry_cnt == 0) {
   13382:	3c01      	subs	r4, #1
   13384:	d104      	bne.n	13390 <data_out_block_mode+0x90>
		host_present = false;
   13386:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   13388:	782b      	ldrb	r3, [r5, #0]
   1338a:	2b00      	cmp	r3, #0
   1338c:	d1c2      	bne.n	13314 <data_out_block_mode+0x14>
   1338e:	e7db      	b.n	13348 <data_out_block_mode+0x48>
   13390:	f7ff ffa8 	bl	132e4 <on_failed_write.part.0>
   13394:	e7f8      	b.n	13388 <data_out_block_mode+0x88>
   13396:	bf00      	nop
   13398:	2000a437 	.word	0x2000a437
   1339c:	2000a438 	.word	0x2000a438
   133a0:	20008514 	.word	0x20008514

000133a4 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   133a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   133a8:	460f      	mov	r7, r1
   133aa:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   133ac:	2108      	movs	r1, #8
   133ae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   133b0:	f013 ffeb 	bl	2738a <nvs_al_size.isra.0>

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   133b4:	4b13      	ldr	r3, [pc, #76]	; (13404 <nvs_recover_last_ate+0x60>)
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   133b6:	4680      	mov	r8, r0
		if (rc) {
			return rc;
		}
		if (nvs_ate_valid(fs, &end_ate)) {
			/* found a valid ate, update data_end_addr and *addr */
			data_end_addr &= ADDR_SECT_MASK;
   133b8:	4699      	mov	r9, r3
	*addr -= ate_size;
   133ba:	683c      	ldr	r4, [r7, #0]
   133bc:	1a24      	subs	r4, r4, r0
   133be:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   133c0:	ea04 0503 	and.w	r5, r4, r3
	while (ate_end_addr > data_end_addr) {
   133c4:	42ac      	cmp	r4, r5
   133c6:	d803      	bhi.n	133d0 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   133c8:	2000      	movs	r0, #0
}
   133ca:	b003      	add	sp, #12
   133cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   133d0:	2308      	movs	r3, #8
   133d2:	466a      	mov	r2, sp
   133d4:	4621      	mov	r1, r4
   133d6:	4630      	mov	r0, r6
   133d8:	f013 ff3a 	bl	27250 <nvs_flash_rd>
		if (rc) {
   133dc:	2800      	cmp	r0, #0
   133de:	d1f4      	bne.n	133ca <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   133e0:	4669      	mov	r1, sp
   133e2:	4630      	mov	r0, r6
   133e4:	f013 ffdb 	bl	2739e <nvs_ate_valid>
   133e8:	b140      	cbz	r0, 133fc <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   133ea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   133ee:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			data_end_addr &= ADDR_SECT_MASK;
   133f2:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   133f6:	4413      	add	r3, r2
   133f8:	441d      	add	r5, r3
			*addr = ate_end_addr;
   133fa:	603c      	str	r4, [r7, #0]
		ate_end_addr -= ate_size;
   133fc:	eba4 0408 	sub.w	r4, r4, r8
   13400:	e7e0      	b.n	133c4 <nvs_recover_last_ate+0x20>
   13402:	bf00      	nop
   13404:	ffff0000 	.word	0xffff0000

00013408 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
   13408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1340c:	2108      	movs	r1, #8
{
   1340e:	b095      	sub	sp, #84	; 0x54
   13410:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13412:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   13414:	f013 ffb9 	bl	2738a <nvs_al_size.isra.0>
   13418:	4680      	mov	r8, r0

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   1341a:	686b      	ldr	r3, [r5, #4]
	nvs_sector_advance(fs, &sec_addr);
   1341c:	89e8      	ldrh	r0, [r5, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   1341e:	0c1b      	lsrs	r3, r3, #16
   13420:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
   13422:	a903      	add	r1, sp, #12
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   13424:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   13426:	f013 ffd4 	bl	273d2 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   1342a:	9b03      	ldr	r3, [sp, #12]
   1342c:	89a9      	ldrh	r1, [r5, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1342e:	ae06      	add	r6, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
   13430:	4419      	add	r1, r3
   13432:	eba1 0108 	sub.w	r1, r1, r8
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   13436:	2308      	movs	r3, #8
   13438:	4632      	mov	r2, r6
   1343a:	4628      	mov	r0, r5
	gc_addr = sec_addr + fs->sector_size - ate_size;
   1343c:	9104      	str	r1, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1343e:	f013 ff07 	bl	27250 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
   13442:	1e04      	subs	r4, r0, #0
   13444:	f2c0 809c 	blt.w	13580 <nvs_gc+0x178>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   13448:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1344a:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1344c:	2300      	movs	r3, #0
		if (data8[i] != value) {
   1344e:	5cf1      	ldrb	r1, [r6, r3]
   13450:	4291      	cmp	r1, r2
   13452:	f040 8083 	bne.w	1355c <nvs_gc+0x154>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   13456:	3301      	adds	r3, #1
   13458:	2b08      	cmp	r3, #8
   1345a:	d1f8      	bne.n	1344e <nvs_gc+0x46>
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
   1345c:	4628      	mov	r0, r5
   1345e:	9903      	ldr	r1, [sp, #12]
   13460:	f013 ff53 	bl	2730a <nvs_flash_erase_sector>
   13464:	4604      	mov	r4, r0
		if (rc) {
   13466:	e08b      	b.n	13580 <nvs_gc+0x178>
	}

	stop_addr = gc_addr - ate_size;

	if (nvs_close_ate_valid(fs, &close_ate)) {
		gc_addr &= ADDR_SECT_MASK;
   13468:	9b04      	ldr	r3, [sp, #16]
		gc_addr += close_ate.offset;
   1346a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   1346e:	0c1b      	lsrs	r3, r3, #16
   13470:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   13472:	4413      	add	r3, r2
   13474:	9304      	str	r3, [sp, #16]
		 */
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
			/* copy needed */
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);

			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   13476:	f8df b110 	ldr.w	fp, [pc, #272]	; 13588 <nvs_gc+0x180>
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   1347a:	4628      	mov	r0, r5
   1347c:	aa08      	add	r2, sp, #32
   1347e:	a904      	add	r1, sp, #16
		gc_prev_addr = gc_addr;
   13480:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   13484:	f014 f814 	bl	274b0 <nvs_prev_ate>
		if (rc) {
   13488:	4604      	mov	r4, r0
   1348a:	2800      	cmp	r0, #0
   1348c:	d178      	bne.n	13580 <nvs_gc+0x178>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   1348e:	4628      	mov	r0, r5
   13490:	a908      	add	r1, sp, #32
   13492:	f013 ff84 	bl	2739e <nvs_ate_valid>
   13496:	2800      	cmp	r0, #0
   13498:	d036      	beq.n	13508 <nvs_gc+0x100>
		wlk_addr = fs->ate_wra;
   1349a:	686b      	ldr	r3, [r5, #4]
   1349c:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1349e:	4628      	mov	r0, r5
   134a0:	aa0a      	add	r2, sp, #40	; 0x28
   134a2:	a905      	add	r1, sp, #20
			wlk_prev_addr = wlk_addr;
   134a4:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   134a6:	f014 f803 	bl	274b0 <nvs_prev_ate>
			if (rc) {
   134aa:	4604      	mov	r4, r0
   134ac:	2800      	cmp	r0, #0
   134ae:	d167      	bne.n	13580 <nvs_gc+0x178>
			if ((wlk_ate.id == gc_ate.id) &&
   134b0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   134b4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   134b8:	429a      	cmp	r2, r3
   134ba:	d028      	beq.n	1350e <nvs_gc+0x106>
		} while (wlk_addr != fs->ate_wra);
   134bc:	686a      	ldr	r2, [r5, #4]
   134be:	9b05      	ldr	r3, [sp, #20]
   134c0:	429a      	cmp	r2, r3
   134c2:	d1ec      	bne.n	1349e <nvs_gc+0x96>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   134c4:	4556      	cmp	r6, sl
   134c6:	d11f      	bne.n	13508 <nvs_gc+0x100>
   134c8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   134cc:	b1e3      	cbz	r3, 13508 <nvs_gc+0x100>
			data_addr += gc_ate.offset;
   134ce:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   134d2:	ea0a 070b 	and.w	r7, sl, fp
			data_addr += gc_ate.offset;
   134d6:	441f      	add	r7, r3

			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   134d8:	68ab      	ldr	r3, [r5, #8]
			nvs_ate_crc8_update(&gc_ate);
   134da:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   134dc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   134e0:	f013 ff4a 	bl	27378 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   134e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c

			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   134e6:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   134ea:	681e      	ldr	r6, [r3, #0]
   134ec:	4276      	negs	r6, r6
	block_size =
   134ee:	f006 0320 	and.w	r3, r6, #32
   134f2:	9301      	str	r3, [sp, #4]
	while (len) {
   134f4:	f1b9 0f00 	cmp.w	r9, #0
   134f8:	d110      	bne.n	1351c <nvs_gc+0x114>
			if (rc) {
				return rc;
			}

			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   134fa:	4628      	mov	r0, r5
   134fc:	a908      	add	r1, sp, #32
   134fe:	f013 ffc6 	bl	2748e <nvs_flash_ate_wrt>
			if (rc) {
   13502:	4604      	mov	r4, r0
   13504:	2800      	cmp	r0, #0
   13506:	d13b      	bne.n	13580 <nvs_gc+0x178>
				return rc;
			}
		}
	} while (gc_prev_addr != stop_addr);
   13508:	45c2      	cmp	sl, r8
   1350a:	d1b6      	bne.n	1347a <nvs_gc+0x72>
   1350c:	e7a6      	b.n	1345c <nvs_gc+0x54>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   1350e:	4628      	mov	r0, r5
   13510:	a90a      	add	r1, sp, #40	; 0x28
   13512:	f013 ff44 	bl	2739e <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   13516:	2800      	cmp	r0, #0
   13518:	d0d0      	beq.n	134bc <nvs_gc+0xb4>
   1351a:	e7d3      	b.n	134c4 <nvs_gc+0xbc>
		bytes_to_copy = MIN(block_size, len);
   1351c:	9b01      	ldr	r3, [sp, #4]
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   1351e:	4639      	mov	r1, r7
		bytes_to_copy = MIN(block_size, len);
   13520:	454b      	cmp	r3, r9
   13522:	bf28      	it	cs
   13524:	464b      	movcs	r3, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   13526:	4628      	mov	r0, r5
   13528:	aa0c      	add	r2, sp, #48	; 0x30
		bytes_to_copy = MIN(block_size, len);
   1352a:	461e      	mov	r6, r3
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   1352c:	f013 fe90 	bl	27250 <nvs_flash_rd>
		if (rc) {
   13530:	4604      	mov	r4, r0
   13532:	bb28      	cbnz	r0, 13580 <nvs_gc+0x178>
	if (!len) {
   13534:	b136      	cbz	r6, 13544 <nvs_gc+0x13c>
   13536:	4633      	mov	r3, r6
   13538:	4628      	mov	r0, r5
   1353a:	68a9      	ldr	r1, [r5, #8]
   1353c:	aa0c      	add	r2, sp, #48	; 0x30
   1353e:	f013 ff71 	bl	27424 <nvs_flash_al_wrt.part.0>
   13542:	4604      	mov	r4, r0
	fs->data_wra += nvs_al_size(fs, len);
   13544:	4631      	mov	r1, r6
   13546:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   13548:	f013 ff1f 	bl	2738a <nvs_al_size.isra.0>
   1354c:	68aa      	ldr	r2, [r5, #8]
   1354e:	4402      	add	r2, r0
   13550:	60aa      	str	r2, [r5, #8]
		if (rc) {
   13552:	b9ac      	cbnz	r4, 13580 <nvs_gc+0x178>
		len -= bytes_to_copy;
   13554:	eba9 0906 	sub.w	r9, r9, r6
		addr += bytes_to_copy;
   13558:	4437      	add	r7, r6
   1355a:	e7cb      	b.n	134f4 <nvs_gc+0xec>
	stop_addr = gc_addr - ate_size;
   1355c:	9804      	ldr	r0, [sp, #16]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   1355e:	4631      	mov	r1, r6
	stop_addr = gc_addr - ate_size;
   13560:	eba0 0808 	sub.w	r8, r0, r8
	if (nvs_close_ate_valid(fs, &close_ate)) {
   13564:	4628      	mov	r0, r5
   13566:	f013 ff3f 	bl	273e8 <nvs_close_ate_valid>
   1356a:	2800      	cmp	r0, #0
   1356c:	f47f af7c 	bne.w	13468 <nvs_gc+0x60>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   13570:	4628      	mov	r0, r5
   13572:	a904      	add	r1, sp, #16
   13574:	f7ff ff16 	bl	133a4 <nvs_recover_last_ate>
		if (rc) {
   13578:	4604      	mov	r4, r0
   1357a:	2800      	cmp	r0, #0
   1357c:	f43f af7b 	beq.w	13476 <nvs_gc+0x6e>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
   13580:	4620      	mov	r0, r4
   13582:	b015      	add	sp, #84	; 0x54
   13584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13588:	ffff0000 	.word	0xffff0000

0001358c <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   1358c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13590:	4604      	mov	r4, r0
   13592:	460d      	mov	r5, r1
   13594:	b086      	sub	sp, #24

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   13596:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
   1359a:	4630      	mov	r0, r6
   1359c:	f018 f9ee 	bl	2b97c <z_impl_k_mutex_init>
   135a0:	4628      	mov	r0, r5
   135a2:	f00e ff4b 	bl	2243c <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   135a6:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   135a8:	b978      	cbnz	r0, 135ca <nvs_init+0x3e>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   135aa:	4bac      	ldr	r3, [pc, #688]	; (1385c <nvs_init+0x2d0>)
   135ac:	49ac      	ldr	r1, [pc, #688]	; (13860 <nvs_init+0x2d4>)
		LOG_ERR("No valid flash device found");
   135ae:	48ad      	ldr	r0, [pc, #692]	; (13864 <nvs_init+0x2d8>)
   135b0:	1ac9      	subs	r1, r1, r3
   135b2:	08c9      	lsrs	r1, r1, #3
   135b4:	0189      	lsls	r1, r1, #6
   135b6:	f041 0101 	orr.w	r1, r1, #1
   135ba:	f013 fbb9 	bl	26d30 <log_0>
		return -ENXIO;
   135be:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   135c2:	4628      	mov	r0, r5
   135c4:	b006      	add	sp, #24
   135c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   135ca:	6883      	ldr	r3, [r0, #8]
   135cc:	691b      	ldr	r3, [r3, #16]
   135ce:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   135d0:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   135d2:	b960      	cbnz	r0, 135ee <nvs_init+0x62>
   135d4:	49a2      	ldr	r1, [pc, #648]	; (13860 <nvs_init+0x2d4>)
   135d6:	4ba1      	ldr	r3, [pc, #644]	; (1385c <nvs_init+0x2d0>)
		LOG_ERR("Could not obtain flash parameters");
   135d8:	48a3      	ldr	r0, [pc, #652]	; (13868 <nvs_init+0x2dc>)
   135da:	1ac9      	subs	r1, r1, r3
   135dc:	08c9      	lsrs	r1, r1, #3
   135de:	0189      	lsls	r1, r1, #6
   135e0:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Configuration error - sector count");
   135e4:	f013 fba4 	bl	26d30 <log_0>
		return -EINVAL;
   135e8:	f06f 0515 	mvn.w	r5, #21
   135ec:	e7e9      	b.n	135c2 <nvs_init+0x36>
	write_block_size = flash_get_write_block_size(fs->flash_device);
   135ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   135f0:	6883      	ldr	r3, [r0, #8]
   135f2:	691b      	ldr	r3, [r3, #16]
   135f4:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   135f6:	6803      	ldr	r3, [r0, #0]
   135f8:	3b01      	subs	r3, #1
   135fa:	2b1f      	cmp	r3, #31
   135fc:	d908      	bls.n	13610 <nvs_init+0x84>
   135fe:	4998      	ldr	r1, [pc, #608]	; (13860 <nvs_init+0x2d4>)
   13600:	4b96      	ldr	r3, [pc, #600]	; (1385c <nvs_init+0x2d0>)
		LOG_ERR("Unsupported write block size");
   13602:	489a      	ldr	r0, [pc, #616]	; (1386c <nvs_init+0x2e0>)
   13604:	1ac9      	subs	r1, r1, r3
   13606:	08c9      	lsrs	r1, r1, #3
   13608:	0189      	lsls	r1, r1, #6
   1360a:	f041 0101 	orr.w	r1, r1, #1
   1360e:	e7e9      	b.n	135e4 <nvs_init+0x58>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   13610:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   13612:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   13614:	aa03      	add	r2, sp, #12
   13616:	f017 f947 	bl	2a8a8 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   1361a:	b140      	cbz	r0, 1362e <nvs_init+0xa2>
   1361c:	4990      	ldr	r1, [pc, #576]	; (13860 <nvs_init+0x2d4>)
   1361e:	4b8f      	ldr	r3, [pc, #572]	; (1385c <nvs_init+0x2d0>)
		LOG_ERR("Unable to get page info");
   13620:	4893      	ldr	r0, [pc, #588]	; (13870 <nvs_init+0x2e4>)
   13622:	1ac9      	subs	r1, r1, r3
   13624:	08c9      	lsrs	r1, r1, #3
   13626:	0189      	lsls	r1, r1, #6
   13628:	f041 0101 	orr.w	r1, r1, #1
   1362c:	e7da      	b.n	135e4 <nvs_init+0x58>
	if (!fs->sector_size || fs->sector_size % info.size) {
   1362e:	89a3      	ldrh	r3, [r4, #12]
   13630:	b12b      	cbz	r3, 1363e <nvs_init+0xb2>
   13632:	9a04      	ldr	r2, [sp, #16]
   13634:	fbb3 f5f2 	udiv	r5, r3, r2
   13638:	fb02 3515 	mls	r5, r2, r5, r3
   1363c:	b145      	cbz	r5, 13650 <nvs_init+0xc4>
   1363e:	4988      	ldr	r1, [pc, #544]	; (13860 <nvs_init+0x2d4>)
   13640:	4b86      	ldr	r3, [pc, #536]	; (1385c <nvs_init+0x2d0>)
		LOG_ERR("Invalid sector size");
   13642:	488c      	ldr	r0, [pc, #560]	; (13874 <nvs_init+0x2e8>)
   13644:	1ac9      	subs	r1, r1, r3
   13646:	08c9      	lsrs	r1, r1, #3
   13648:	0189      	lsls	r1, r1, #6
   1364a:	f041 0101 	orr.w	r1, r1, #1
   1364e:	e7c9      	b.n	135e4 <nvs_init+0x58>
	if (fs->sector_count < 2) {
   13650:	89e3      	ldrh	r3, [r4, #14]
   13652:	2b01      	cmp	r3, #1
   13654:	d808      	bhi.n	13668 <nvs_init+0xdc>
   13656:	4982      	ldr	r1, [pc, #520]	; (13860 <nvs_init+0x2d4>)
   13658:	4b80      	ldr	r3, [pc, #512]	; (1385c <nvs_init+0x2d0>)
		LOG_ERR("Configuration error - sector count");
   1365a:	4887      	ldr	r0, [pc, #540]	; (13878 <nvs_init+0x2ec>)
   1365c:	1ac9      	subs	r1, r1, r3
   1365e:	08c9      	lsrs	r1, r1, #3
   13660:	0189      	lsls	r1, r1, #6
   13662:	f041 0101 	orr.w	r1, r1, #1
   13666:	e7bd      	b.n	135e4 <nvs_init+0x58>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   13668:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   1366a:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   1366c:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   13670:	f04f 32ff 	mov.w	r2, #4294967295
   13674:	f04f 33ff 	mov.w	r3, #4294967295
   13678:	4630      	mov	r0, r6
   1367a:	f00f fbe7 	bl	22e4c <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1367e:	2108      	movs	r1, #8
   13680:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   13682:	f013 fe82 	bl	2738a <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   13686:	462f      	mov	r7, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13688:	4680      	mov	r8, r0
	for (i = 0; i < fs->sector_count; i++) {
   1368a:	89e3      	ldrh	r3, [r4, #14]
   1368c:	fa1f fa85 	uxth.w	sl, r5
   13690:	4553      	cmp	r3, sl
   13692:	d865      	bhi.n	13760 <nvs_init+0x1d4>
	if (closed_sectors == fs->sector_count) {
   13694:	89e3      	ldrh	r3, [r4, #14]
   13696:	42bb      	cmp	r3, r7
   13698:	f000 80c3 	beq.w	13822 <nvs_init+0x296>
	if (i == fs->sector_count) {
   1369c:	4553      	cmp	r3, sl
   1369e:	d10c      	bne.n	136ba <nvs_init+0x12e>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   136a0:	9900      	ldr	r1, [sp, #0]
   136a2:	2308      	movs	r3, #8
   136a4:	464a      	mov	r2, r9
   136a6:	4620      	mov	r0, r4
   136a8:	eba1 0108 	sub.w	r1, r1, r8
   136ac:	f013 fe08 	bl	272c0 <nvs_flash_cmp_const>
		if (!rc) {
   136b0:	b918      	cbnz	r0, 136ba <nvs_init+0x12e>
			nvs_sector_advance(fs, &addr);
   136b2:	4669      	mov	r1, sp
   136b4:	89e0      	ldrh	r0, [r4, #14]
   136b6:	f013 fe8c 	bl	273d2 <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   136ba:	4669      	mov	r1, sp
   136bc:	4620      	mov	r0, r4
   136be:	f7ff fe71 	bl	133a4 <nvs_recover_last_ate>
	if (rc) {
   136c2:	4605      	mov	r5, r0
   136c4:	bb40      	cbnz	r0, 13718 <nvs_init+0x18c>
	fs->ate_wra = addr;
   136c6:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
   136c8:	4f6c      	ldr	r7, [pc, #432]	; (1387c <nvs_init+0x2f0>)
	fs->ate_wra = addr;
   136ca:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   136cc:	403b      	ands	r3, r7
   136ce:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   136d0:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   136d4:	4299      	cmp	r1, r3
   136d6:	d30f      	bcc.n	136f8 <nvs_init+0x16c>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   136d8:	2308      	movs	r3, #8
   136da:	4620      	mov	r0, r4
   136dc:	aa01      	add	r2, sp, #4
   136de:	f013 fdb7 	bl	27250 <nvs_flash_rd>
		if (rc) {
   136e2:	4605      	mov	r5, r0
   136e4:	b9c0      	cbnz	r0, 13718 <nvs_init+0x18c>
   136e6:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   136e8:	f813 2b01 	ldrb.w	r2, [r3], #1
   136ec:	4591      	cmp	r9, r2
   136ee:	f040 809b 	bne.w	13828 <nvs_init+0x29c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   136f2:	3501      	adds	r5, #1
   136f4:	2d08      	cmp	r5, #8
   136f6:	d1f7      	bne.n	136e8 <nvs_init+0x15c>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   136f8:	6863      	ldr	r3, [r4, #4]
   136fa:	4f60      	ldr	r7, [pc, #384]	; (1387c <nvs_init+0x2f0>)
	nvs_sector_advance(fs, &addr);
   136fc:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   136fe:	403b      	ands	r3, r7
	nvs_sector_advance(fs, &addr);
   13700:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   13702:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   13704:	f013 fe65 	bl	273d2 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   13708:	464a      	mov	r2, r9
   1370a:	4620      	mov	r0, r4
   1370c:	89a3      	ldrh	r3, [r4, #12]
   1370e:	9900      	ldr	r1, [sp, #0]
   13710:	f013 fdd6 	bl	272c0 <nvs_flash_cmp_const>
	if (rc < 0) {
   13714:	1e05      	subs	r5, r0, #0
   13716:	da46      	bge.n	137a6 <nvs_init+0x21a>
	return z_impl_k_mutex_unlock(mutex);
   13718:	4630      	mov	r0, r6
   1371a:	f00f fc91 	bl	23040 <z_impl_k_mutex_unlock>
	if (rc) {
   1371e:	2d00      	cmp	r5, #0
   13720:	f47f af4f 	bne.w	135c2 <nvs_init+0x36>
	fs->ready = true;
   13724:	2301      	movs	r3, #1
   13726:	4e4e      	ldr	r6, [pc, #312]	; (13860 <nvs_init+0x2d4>)
   13728:	7423      	strb	r3, [r4, #16]
   1372a:	4b4c      	ldr	r3, [pc, #304]	; (1385c <nvs_init+0x2d0>)
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   1372c:	89a2      	ldrh	r2, [r4, #12]
   1372e:	1af6      	subs	r6, r6, r3
   13730:	08f6      	lsrs	r6, r6, #3
   13732:	01b6      	lsls	r6, r6, #6
   13734:	f046 0603 	orr.w	r6, r6, #3
   13738:	4633      	mov	r3, r6
   1373a:	89e1      	ldrh	r1, [r4, #14]
   1373c:	4850      	ldr	r0, [pc, #320]	; (13880 <nvs_init+0x2f4>)
   1373e:	f013 fb18 	bl	26d72 <log_2>
	LOG_INF("alloc wra: %d, %x",
   13742:	6861      	ldr	r1, [r4, #4]
   13744:	4633      	mov	r3, r6
   13746:	b28a      	uxth	r2, r1
   13748:	484e      	ldr	r0, [pc, #312]	; (13884 <nvs_init+0x2f8>)
   1374a:	0c09      	lsrs	r1, r1, #16
   1374c:	f013 fb11 	bl	26d72 <log_2>
	LOG_INF("data wra: %d, %x",
   13750:	68a1      	ldr	r1, [r4, #8]
   13752:	4633      	mov	r3, r6
   13754:	b28a      	uxth	r2, r1
   13756:	484c      	ldr	r0, [pc, #304]	; (13888 <nvs_init+0x2fc>)
   13758:	0c09      	lsrs	r1, r1, #16
   1375a:	f013 fb0a 	bl	26d72 <log_2>
	return 0;
   1375e:	e730      	b.n	135c2 <nvs_init+0x36>
		       (uint16_t)(fs->sector_size - ate_size);
   13760:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   13762:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   13764:	eba1 0108 	sub.w	r1, r1, r8
		addr = (i << ADDR_SECT_SHIFT) +
   13768:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1376c:	464a      	mov	r2, r9
   1376e:	2308      	movs	r3, #8
   13770:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   13772:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   13774:	f013 fda4 	bl	272c0 <nvs_flash_cmp_const>
		if (rc) {
   13778:	b170      	cbz	r0, 13798 <nvs_init+0x20c>
			nvs_sector_advance(fs, &addr);
   1377a:	4669      	mov	r1, sp
   1377c:	89e0      	ldrh	r0, [r4, #14]
   1377e:	f013 fe28 	bl	273d2 <nvs_sector_advance.isra.0>
			closed_sectors++;
   13782:	3701      	adds	r7, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   13784:	2308      	movs	r3, #8
   13786:	464a      	mov	r2, r9
   13788:	4620      	mov	r0, r4
   1378a:	9900      	ldr	r1, [sp, #0]
			closed_sectors++;
   1378c:	b2bf      	uxth	r7, r7
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1378e:	f013 fd97 	bl	272c0 <nvs_flash_cmp_const>
			if (!rc) {
   13792:	2800      	cmp	r0, #0
   13794:	f43f af7e 	beq.w	13694 <nvs_init+0x108>
	for (i = 0; i < fs->sector_count; i++) {
   13798:	3501      	adds	r5, #1
   1379a:	e776      	b.n	1368a <nvs_init+0xfe>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1379c:	2d00      	cmp	r5, #0
   1379e:	d058      	beq.n	13852 <nvs_init+0x2c6>
				rc = -ESPIPE;
   137a0:	f06f 051c 	mvn.w	r5, #28
   137a4:	e7b8      	b.n	13718 <nvs_init+0x18c>
	if (rc) {
   137a6:	d021      	beq.n	137ec <nvs_init+0x260>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   137a8:	4620      	mov	r0, r4
   137aa:	6861      	ldr	r1, [r4, #4]
   137ac:	f013 fdad 	bl	2730a <nvs_flash_erase_sector>
		if (rc) {
   137b0:	4605      	mov	r5, r0
   137b2:	2800      	cmp	r0, #0
   137b4:	d1b0      	bne.n	13718 <nvs_init+0x18c>
		fs->ate_wra &= ADDR_SECT_MASK;
   137b6:	6863      	ldr	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   137b8:	89a0      	ldrh	r0, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   137ba:	403b      	ands	r3, r7
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   137bc:	4403      	add	r3, r0
   137be:	eba3 0048 	sub.w	r0, r3, r8, lsl #1
   137c2:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   137c4:	4038      	ands	r0, r7
   137c6:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
   137c8:	4620      	mov	r0, r4
   137ca:	f7ff fe1d 	bl	13408 <nvs_gc>
   137ce:	4605      	mov	r5, r0
		goto end;
   137d0:	e7a2      	b.n	13718 <nvs_init+0x18c>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   137d2:	464a      	mov	r2, r9
   137d4:	4620      	mov	r0, r4
   137d6:	1a5b      	subs	r3, r3, r1
   137d8:	f013 fd72 	bl	272c0 <nvs_flash_cmp_const>
		if (rc < 0) {
   137dc:	1e05      	subs	r5, r0, #0
   137de:	db9b      	blt.n	13718 <nvs_init+0x18c>
		if (!rc) {
   137e0:	d008      	beq.n	137f4 <nvs_init+0x268>
		fs->data_wra += fs->flash_parameters->write_block_size;
   137e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   137e4:	68a3      	ldr	r3, [r4, #8]
   137e6:	6812      	ldr	r2, [r2, #0]
   137e8:	4413      	add	r3, r2
   137ea:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   137ec:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   137f0:	428b      	cmp	r3, r1
   137f2:	d8ee      	bhi.n	137d2 <nvs_init+0x246>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   137f4:	6861      	ldr	r1, [r4, #4]
   137f6:	89a3      	ldrh	r3, [r4, #12]
   137f8:	eb01 0048 	add.w	r0, r1, r8, lsl #1
   137fc:	4298      	cmp	r0, r3
   137fe:	d18b      	bne.n	13718 <nvs_init+0x18c>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   13800:	4f1e      	ldr	r7, [pc, #120]	; (1387c <nvs_init+0x2f0>)
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   13802:	68a2      	ldr	r2, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   13804:	ea01 0307 	and.w	r3, r1, r7
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   13808:	429a      	cmp	r2, r3
   1380a:	d085      	beq.n	13718 <nvs_init+0x18c>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   1380c:	4620      	mov	r0, r4
   1380e:	f013 fd7c 	bl	2730a <nvs_flash_erase_sector>
		if (rc) {
   13812:	4605      	mov	r5, r0
   13814:	2800      	cmp	r0, #0
   13816:	f47f af7f 	bne.w	13718 <nvs_init+0x18c>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   1381a:	6863      	ldr	r3, [r4, #4]
   1381c:	403b      	ands	r3, r7
   1381e:	60a3      	str	r3, [r4, #8]
   13820:	e77a      	b.n	13718 <nvs_init+0x18c>
		rc = -EDEADLK;
   13822:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   13826:	e777      	b.n	13718 <nvs_init+0x18c>
		if (nvs_ate_valid(fs, &last_ate)) {
   13828:	4620      	mov	r0, r4
   1382a:	a901      	add	r1, sp, #4
   1382c:	f013 fdb7 	bl	2739e <nvs_ate_valid>
   13830:	6862      	ldr	r2, [r4, #4]
   13832:	b170      	cbz	r0, 13852 <nvs_init+0x2c6>
			fs->data_wra = addr & ADDR_SECT_MASK;
   13834:	9b00      	ldr	r3, [sp, #0]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   13836:	f8bd 5008 	ldrh.w	r5, [sp, #8]
   1383a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
			fs->data_wra = addr & ADDR_SECT_MASK;
   1383e:	403b      	ands	r3, r7
   13840:	60a3      	str	r3, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   13842:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   13844:	4429      	add	r1, r5
   13846:	f013 fda0 	bl	2738a <nvs_al_size.isra.0>
   1384a:	4403      	add	r3, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1384c:	4293      	cmp	r3, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   1384e:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   13850:	d0a4      	beq.n	1379c <nvs_init+0x210>
		fs->ate_wra -= ate_size;
   13852:	eba2 0208 	sub.w	r2, r2, r8
   13856:	6062      	str	r2, [r4, #4]
   13858:	e73a      	b.n	136d0 <nvs_init+0x144>
   1385a:	bf00      	nop
   1385c:	0002bfe4 	.word	0x0002bfe4
   13860:	0002c08c 	.word	0x0002c08c
   13864:	0002d515 	.word	0x0002d515
   13868:	0002d531 	.word	0x0002d531
   1386c:	0002d553 	.word	0x0002d553
   13870:	0002d570 	.word	0x0002d570
   13874:	0002d588 	.word	0x0002d588
   13878:	0002d59c 	.word	0x0002d59c
   1387c:	ffff0000 	.word	0xffff0000
   13880:	0002d5bf 	.word	0x0002d5bf
   13884:	0002d5d6 	.word	0x0002d5d6
   13888:	0002d5e8 	.word	0x0002d5e8

0001388c <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   1388c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13890:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   13892:	7c03      	ldrb	r3, [r0, #16]
{
   13894:	4604      	mov	r4, r0
   13896:	4689      	mov	r9, r1
   13898:	4690      	mov	r8, r2
   1389a:	b089      	sub	sp, #36	; 0x24
	if (!fs->ready) {
   1389c:	b97b      	cbnz	r3, 138be <nvs_write+0x32>
   1389e:	4b69      	ldr	r3, [pc, #420]	; (13a44 <nvs_write+0x1b8>)
   138a0:	4969      	ldr	r1, [pc, #420]	; (13a48 <nvs_write+0x1bc>)
		LOG_ERR("NVS not initialized");
   138a2:	486a      	ldr	r0, [pc, #424]	; (13a4c <nvs_write+0x1c0>)
   138a4:	1ac9      	subs	r1, r1, r3
   138a6:	08c9      	lsrs	r1, r1, #3
   138a8:	0189      	lsls	r1, r1, #6
   138aa:	f041 0101 	orr.w	r1, r1, #1
   138ae:	f013 fa3f 	bl	26d30 <log_0>
		return -EACCES;
   138b2:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   138b6:	4628      	mov	r0, r5
   138b8:	b009      	add	sp, #36	; 0x24
   138ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   138be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   138c0:	2108      	movs	r1, #8
   138c2:	4618      	mov	r0, r3
   138c4:	f013 fd61 	bl	2738a <nvs_al_size.isra.0>
   138c8:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   138ca:	4631      	mov	r1, r6
   138cc:	4618      	mov	r0, r3
   138ce:	f013 fd5c 	bl	2738a <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
   138d2:	89a3      	ldrh	r3, [r4, #12]
   138d4:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   138d8:	1a9b      	subs	r3, r3, r2
   138da:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
   138dc:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
   138de:	f200 80ac 	bhi.w	13a3a <nvs_write+0x1ae>
   138e2:	b11e      	cbz	r6, 138ec <nvs_write+0x60>
	    ((len > 0) && (data == NULL))) {
   138e4:	f1b8 0f00 	cmp.w	r8, #0
   138e8:	f000 80a7 	beq.w	13a3a <nvs_write+0x1ae>
	wlk_addr = fs->ate_wra;
   138ec:	6863      	ldr	r3, [r4, #4]
   138ee:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   138f0:	4620      	mov	r0, r4
   138f2:	aa04      	add	r2, sp, #16
   138f4:	a903      	add	r1, sp, #12
		rd_addr = wlk_addr;
   138f6:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   138fa:	f013 fdd9 	bl	274b0 <nvs_prev_ate>
		if (rc) {
   138fe:	4605      	mov	r5, r0
   13900:	2800      	cmp	r0, #0
   13902:	d1d8      	bne.n	138b6 <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   13904:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   13908:	454b      	cmp	r3, r9
   1390a:	d005      	beq.n	13918 <nvs_write+0x8c>
		if (wlk_addr == fs->ate_wra) {
   1390c:	6862      	ldr	r2, [r4, #4]
   1390e:	9b03      	ldr	r3, [sp, #12]
   13910:	429a      	cmp	r2, r3
   13912:	d1ed      	bne.n	138f0 <nvs_write+0x64>
		if (len == 0) {
   13914:	b9e6      	cbnz	r6, 13950 <nvs_write+0xc4>
   13916:	e7ce      	b.n	138b6 <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   13918:	4620      	mov	r0, r4
   1391a:	a904      	add	r1, sp, #16
   1391c:	f013 fd3f 	bl	2739e <nvs_ate_valid>
   13920:	2800      	cmp	r0, #0
   13922:	d0f3      	beq.n	1390c <nvs_write+0x80>
		if (len == 0) {
   13924:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   13928:	b186      	cbz	r6, 1394c <nvs_write+0xc0>
		} else if (len == wlk_ate.len) {
   1392a:	429e      	cmp	r6, r3
   1392c:	d110      	bne.n	13950 <nvs_write+0xc4>
		rd_addr += wlk_ate.offset;
   1392e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
   13932:	ea4f 411b 	mov.w	r1, fp, lsr #16
   13936:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   13938:	4401      	add	r1, r0
   1393a:	4633      	mov	r3, r6
   1393c:	4642      	mov	r2, r8
   1393e:	4620      	mov	r0, r4
   13940:	f013 fc94 	bl	2726c <nvs_flash_block_cmp>
			if (rc <= 0) {
   13944:	2800      	cmp	r0, #0
   13946:	dc03      	bgt.n	13950 <nvs_write+0xc4>
   13948:	4605      	mov	r5, r0
   1394a:	e7b4      	b.n	138b6 <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
   1394c:	2b00      	cmp	r3, #0
   1394e:	d0b2      	beq.n	138b6 <nvs_write+0x2a>
	if (data_size) {
   13950:	2f00      	cmp	r7, #0
   13952:	d13f      	bne.n	139d4 <nvs_write+0x148>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   13954:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   13958:	f04f 32ff 	mov.w	r2, #4294967295
   1395c:	f04f 33ff 	mov.w	r3, #4294967295
   13960:	4650      	mov	r0, sl
   13962:	f00f fa73 	bl	22e4c <z_impl_k_mutex_lock>
	gc_count = 0;
   13966:	2200      	movs	r2, #0
	fs->ate_wra &= ADDR_SECT_MASK;
   13968:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 13a50 <nvs_write+0x1c4>
		if (gc_count == fs->sector_count) {
   1396c:	89e3      	ldrh	r3, [r4, #14]
   1396e:	429a      	cmp	r2, r3
   13970:	d060      	beq.n	13a34 <nvs_write+0x1a8>
		if (fs->ate_wra >= fs->data_wra + required_space) {
   13972:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   13976:	1878      	adds	r0, r7, r1
   13978:	4283      	cmp	r3, r0
   1397a:	d32e      	bcc.n	139da <nvs_write+0x14e>
	entry.part = 0xff;
   1397c:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
   1397e:	a806      	add	r0, sp, #24
	entry.id = id;
   13980:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   13984:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (uint16_t)len;
   13988:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
   1398c:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
   13990:	f013 fcf2 	bl	27378 <nvs_ate_crc8_update>
	if (!len) {
   13994:	b136      	cbz	r6, 139a4 <nvs_write+0x118>
   13996:	4633      	mov	r3, r6
   13998:	4642      	mov	r2, r8
   1399a:	4620      	mov	r0, r4
   1399c:	68a1      	ldr	r1, [r4, #8]
   1399e:	f013 fd41 	bl	27424 <nvs_flash_al_wrt.part.0>
   139a2:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
   139a4:	4631      	mov	r1, r6
   139a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   139a8:	f013 fcef 	bl	2738a <nvs_al_size.isra.0>
   139ac:	68a3      	ldr	r3, [r4, #8]
   139ae:	4403      	add	r3, r0
   139b0:	60a3      	str	r3, [r4, #8]
	if (rc) {
   139b2:	2d00      	cmp	r5, #0
   139b4:	d144      	bne.n	13a40 <nvs_write+0x1b4>
	rc = nvs_flash_ate_wrt(fs, &entry);
   139b6:	4620      	mov	r0, r4
   139b8:	a906      	add	r1, sp, #24
   139ba:	f013 fd68 	bl	2748e <nvs_flash_ate_wrt>
	if (rc) {
   139be:	4605      	mov	r5, r0
   139c0:	2800      	cmp	r0, #0
   139c2:	d13d      	bne.n	13a40 <nvs_write+0x1b4>
	rc = len;
   139c4:	4633      	mov	r3, r6
   139c6:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   139c8:	4650      	mov	r0, sl
   139ca:	f00f fb39 	bl	23040 <z_impl_k_mutex_unlock>
	return rc;
   139ce:	9b01      	ldr	r3, [sp, #4]
   139d0:	461d      	mov	r5, r3
   139d2:	e770      	b.n	138b6 <nvs_write+0x2a>
		required_space = data_size + ate_size;
   139d4:	4457      	add	r7, sl
   139d6:	b2bf      	uxth	r7, r7
   139d8:	e7bc      	b.n	13954 <nvs_write+0xc8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   139da:	2108      	movs	r1, #8
   139dc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   139de:	9201      	str	r2, [sp, #4]
   139e0:	f013 fcd3 	bl	2738a <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   139e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   139e8:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
   139ec:	2100      	movs	r1, #0
   139ee:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   139f2:	1819      	adds	r1, r3, r0
   139f4:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   139f8:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   139fa:	ea03 030b 	and.w	r3, r3, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   139fe:	440b      	add	r3, r1
   13a00:	1a18      	subs	r0, r3, r0
   13a02:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   13a04:	a806      	add	r0, sp, #24
   13a06:	f013 fcb7 	bl	27378 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   13a0a:	a906      	add	r1, sp, #24
   13a0c:	4620      	mov	r0, r4
   13a0e:	f013 fd3e 	bl	2748e <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   13a12:	89e0      	ldrh	r0, [r4, #14]
   13a14:	1d21      	adds	r1, r4, #4
   13a16:	f013 fcdc 	bl	273d2 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   13a1a:	6863      	ldr	r3, [r4, #4]
		rc = nvs_gc(fs);
   13a1c:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   13a1e:	ea03 030b 	and.w	r3, r3, fp
   13a22:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   13a24:	f7ff fcf0 	bl	13408 <nvs_gc>
		if (rc) {
   13a28:	4603      	mov	r3, r0
   13a2a:	2800      	cmp	r0, #0
   13a2c:	d1cb      	bne.n	139c6 <nvs_write+0x13a>
		gc_count++;
   13a2e:	9a01      	ldr	r2, [sp, #4]
   13a30:	3201      	adds	r2, #1
		if (gc_count == fs->sector_count) {
   13a32:	e79b      	b.n	1396c <nvs_write+0xe0>
			rc = -ENOSPC;
   13a34:	f06f 031b 	mvn.w	r3, #27
   13a38:	e7c5      	b.n	139c6 <nvs_write+0x13a>
		return -EINVAL;
   13a3a:	f06f 0515 	mvn.w	r5, #21
   13a3e:	e73a      	b.n	138b6 <nvs_write+0x2a>
			if (rc) {
   13a40:	462b      	mov	r3, r5
   13a42:	e7c0      	b.n	139c6 <nvs_write+0x13a>
   13a44:	0002bfe4 	.word	0x0002bfe4
   13a48:	0002c08c 	.word	0x0002c08c
   13a4c:	0002d501 	.word	0x0002d501
   13a50:	ffff0000 	.word	0xffff0000

00013a54 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   13a54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   13a58:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   13a5a:	7c03      	ldrb	r3, [r0, #16]
{
   13a5c:	4604      	mov	r4, r0
   13a5e:	460f      	mov	r7, r1
   13a60:	4690      	mov	r8, r2
   13a62:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
	if (!fs->ready) {
   13a66:	b973      	cbnz	r3, 13a86 <nvs_read_hist+0x32>
   13a68:	4b2b      	ldr	r3, [pc, #172]	; (13b18 <nvs_read_hist+0xc4>)
   13a6a:	492c      	ldr	r1, [pc, #176]	; (13b1c <nvs_read_hist+0xc8>)
		LOG_ERR("NVS not initialized");
   13a6c:	482c      	ldr	r0, [pc, #176]	; (13b20 <nvs_read_hist+0xcc>)
   13a6e:	1ac9      	subs	r1, r1, r3
   13a70:	08c9      	lsrs	r1, r1, #3
   13a72:	0189      	lsls	r1, r1, #6
   13a74:	f041 0101 	orr.w	r1, r1, #1
   13a78:	f013 f95a 	bl	26d30 <log_0>
		return -EACCES;
   13a7c:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   13a80:	b004      	add	sp, #16
   13a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13a86:	2108      	movs	r1, #8
   13a88:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   13a8a:	f013 fc7e 	bl	2738a <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   13a8e:	89a3      	ldrh	r3, [r4, #12]
   13a90:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   13a94:	429e      	cmp	r6, r3
   13a96:	d83c      	bhi.n	13b12 <nvs_read_hist+0xbe>
	cnt_his = 0U;
   13a98:	f04f 0a00 	mov.w	sl, #0
	wlk_addr = fs->ate_wra;
   13a9c:	6863      	ldr	r3, [r4, #4]
   13a9e:	9301      	str	r3, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   13aa0:	4620      	mov	r0, r4
   13aa2:	aa02      	add	r2, sp, #8
   13aa4:	a901      	add	r1, sp, #4
		rd_addr = wlk_addr;
   13aa6:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   13aa8:	f013 fd02 	bl	274b0 <nvs_prev_ate>
		if (rc) {
   13aac:	2800      	cmp	r0, #0
   13aae:	d1e7      	bne.n	13a80 <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   13ab0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   13ab4:	42bb      	cmp	r3, r7
   13ab6:	d108      	bne.n	13aca <nvs_read_hist+0x76>
   13ab8:	4620      	mov	r0, r4
   13aba:	a902      	add	r1, sp, #8
   13abc:	f013 fc6f 	bl	2739e <nvs_ate_valid>
   13ac0:	b118      	cbz	r0, 13aca <nvs_read_hist+0x76>
			cnt_his++;
   13ac2:	f10a 0a01 	add.w	sl, sl, #1
   13ac6:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
   13aca:	6862      	ldr	r2, [r4, #4]
   13acc:	9b01      	ldr	r3, [sp, #4]
   13ace:	429a      	cmp	r2, r3
   13ad0:	d018      	beq.n	13b04 <nvs_read_hist+0xb0>
	while (cnt_his <= cnt) {
   13ad2:	45d1      	cmp	r9, sl
   13ad4:	d2e4      	bcs.n	13aa0 <nvs_read_hist+0x4c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   13ad6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   13ada:	b1bb      	cbz	r3, 13b0c <nvs_read_hist+0xb8>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   13adc:	45d1      	cmp	r9, sl
   13ade:	d815      	bhi.n	13b0c <nvs_read_hist+0xb8>
	rd_addr += wlk_ate.offset;
   13ae0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   13ae4:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   13ae6:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   13ae8:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   13aec:	bf28      	it	cs
   13aee:	4633      	movcs	r3, r6
   13af0:	4642      	mov	r2, r8
   13af2:	4620      	mov	r0, r4
   13af4:	4429      	add	r1, r5
   13af6:	f013 fbab 	bl	27250 <nvs_flash_rd>
	if (rc) {
   13afa:	2800      	cmp	r0, #0
   13afc:	d1c0      	bne.n	13a80 <nvs_read_hist+0x2c>
	return wlk_ate.len;
   13afe:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   13b02:	e7bd      	b.n	13a80 <nvs_read_hist+0x2c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   13b04:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   13b08:	42bb      	cmp	r3, r7
   13b0a:	d0e4      	beq.n	13ad6 <nvs_read_hist+0x82>
		return -ENOENT;
   13b0c:	f06f 0001 	mvn.w	r0, #1
   13b10:	e7b6      	b.n	13a80 <nvs_read_hist+0x2c>
		return -EINVAL;
   13b12:	f06f 0015 	mvn.w	r0, #21
   13b16:	e7b3      	b.n	13a80 <nvs_read_hist+0x2c>
   13b18:	0002bfe4 	.word	0x0002bfe4
   13b1c:	0002c08c 	.word	0x0002c08c
   13b20:	0002d501 	.word	0x0002d501

00013b24 <virtio_set_status>:
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   13b24:	4b01      	ldr	r3, [pc, #4]	; (13b2c <virtio_set_status+0x8>)
   13b26:	7019      	strb	r1, [r3, #0]
}

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
   13b28:	4770      	bx	lr
   13b2a:	bf00      	nop
   13b2c:	20070000 	.word	0x20070000

00013b30 <init_status_flag>:
   13b30:	2000      	movs	r0, #0
   13b32:	4b01      	ldr	r3, [pc, #4]	; (13b38 <init_status_flag+0x8>)
   13b34:	7018      	strb	r0, [r3, #0]
int init_status_flag(const struct device *arg)
{
	virtio_set_status(NULL, 0);

	return 0;
}
   13b36:	4770      	bx	lr
   13b38:	20070000 	.word	0x20070000

00013b3c <ipm_callback>:
	k_work_submit_to_queue(&ipm_work_q, &ipm_work);
   13b3c:	4901      	ldr	r1, [pc, #4]	; (13b44 <ipm_callback+0x8>)
   13b3e:	4802      	ldr	r0, [pc, #8]	; (13b48 <ipm_callback+0xc>)
   13b40:	f00f bfa8 	b.w	23a94 <k_work_submit_to_queue>
   13b44:	200092ec 	.word	0x200092ec
   13b48:	20008808 	.word	0x20008808

00013b4c <ipm_callback_process>:
	virtqueue_notification(vq[VIRTQUEUE_ID]);
   13b4c:	4b01      	ldr	r3, [pc, #4]	; (13b54 <ipm_callback_process+0x8>)
   13b4e:	6818      	ldr	r0, [r3, #0]
   13b50:	f017 bd1a 	b.w	2b588 <virtqueue_notification>
   13b54:	200092fc 	.word	0x200092fc

00013b58 <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
   13b58:	4b0d      	ldr	r3, [pc, #52]	; (13b90 <virtio_notify+0x38>)
{
   13b5a:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
   13b5c:	6818      	ldr	r0, [r3, #0]
				  const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->send(ipmdev, wait, id, data, size);
   13b5e:	2300      	movs	r3, #0
   13b60:	6882      	ldr	r2, [r0, #8]
   13b62:	9300      	str	r3, [sp, #0]
   13b64:	4619      	mov	r1, r3
   13b66:	6814      	ldr	r4, [r2, #0]
   13b68:	461a      	mov	r2, r3
   13b6a:	47a0      	blx	r4
	if (status != 0) {
   13b6c:	4601      	mov	r1, r0
   13b6e:	b160      	cbz	r0, 13b8a <virtio_notify+0x32>
   13b70:	4b08      	ldr	r3, [pc, #32]	; (13b94 <virtio_notify+0x3c>)
   13b72:	4a09      	ldr	r2, [pc, #36]	; (13b98 <virtio_notify+0x40>)
		LOG_ERR("ipm_send failed to notify: %d", status);
   13b74:	4809      	ldr	r0, [pc, #36]	; (13b9c <virtio_notify+0x44>)
   13b76:	1ad2      	subs	r2, r2, r3
   13b78:	08d2      	lsrs	r2, r2, #3
   13b7a:	0192      	lsls	r2, r2, #6
   13b7c:	f042 0201 	orr.w	r2, r2, #1
}
   13b80:	b002      	add	sp, #8
   13b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("ipm_send failed to notify: %d", status);
   13b86:	f013 b8e0 	b.w	26d4a <log_1>
}
   13b8a:	b002      	add	sp, #8
   13b8c:	bd10      	pop	{r4, pc}
   13b8e:	bf00      	nop
   13b90:	200092e8 	.word	0x200092e8
   13b94:	0002bfe4 	.word	0x0002bfe4
   13b98:	0002c0dc 	.word	0x0002c0dc
   13b9c:	0002d600 	.word	0x0002d600

00013ba0 <rpmsg_backend_init>:
{
   13ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
   13ba4:	4b68      	ldr	r3, [pc, #416]	; (13d48 <rpmsg_backend_init+0x1a8>)
{
   13ba6:	b086      	sub	sp, #24
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
   13ba8:	9304      	str	r3, [sp, #16]
   13baa:	2306      	movs	r3, #6
   13bac:	f88d 3014 	strb.w	r3, [sp, #20]
	k_work_queue_start(&ipm_work_q, ipm_stack_area,
   13bb0:	2300      	movs	r3, #0
{
   13bb2:	4607      	mov	r7, r0
	k_work_queue_start(&ipm_work_q, ipm_stack_area,
   13bb4:	9300      	str	r3, [sp, #0]
{
   13bb6:	460d      	mov	r5, r1
	k_work_queue_start(&ipm_work_q, ipm_stack_area,
   13bb8:	f04f 33ff 	mov.w	r3, #4294967295
   13bbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   13bc0:	4962      	ldr	r1, [pc, #392]	; (13d4c <rpmsg_backend_init+0x1ac>)
   13bc2:	4863      	ldr	r0, [pc, #396]	; (13d50 <rpmsg_backend_init+0x1b0>)
   13bc4:	f00f ffd0 	bl	23b68 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   13bc8:	4962      	ldr	r1, [pc, #392]	; (13d54 <rpmsg_backend_init+0x1b4>)
   13bca:	4861      	ldr	r0, [pc, #388]	; (13d50 <rpmsg_backend_init+0x1b0>)
   13bcc:	f017 fec8 	bl	2b960 <z_impl_k_thread_name_set>
	k_work_init(&ipm_work, ipm_callback_process);
   13bd0:	4961      	ldr	r1, [pc, #388]	; (13d58 <rpmsg_backend_init+0x1b8>)
   13bd2:	4862      	ldr	r0, [pc, #392]	; (13d5c <rpmsg_backend_init+0x1bc>)
   13bd4:	f00f ff36 	bl	23a44 <k_work_init>
	err = metal_init(&metal_params);
   13bd8:	a804      	add	r0, sp, #16
   13bda:	f00e f823 	bl	21c24 <metal_init>
	if (err) {
   13bde:	4604      	mov	r4, r0
   13be0:	b170      	cbz	r0, 13c00 <rpmsg_backend_init+0x60>
   13be2:	4a5f      	ldr	r2, [pc, #380]	; (13d60 <rpmsg_backend_init+0x1c0>)
   13be4:	4b5f      	ldr	r3, [pc, #380]	; (13d64 <rpmsg_backend_init+0x1c4>)
		LOG_ERR("metal_init: failed - error code %d", err);
   13be6:	4601      	mov	r1, r0
   13be8:	1ad2      	subs	r2, r2, r3
   13bea:	08d2      	lsrs	r2, r2, #3
   13bec:	0192      	lsls	r2, r2, #6
   13bee:	485e      	ldr	r0, [pc, #376]	; (13d68 <rpmsg_backend_init+0x1c8>)
   13bf0:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Couldn't register shared memory device: %d", err);
   13bf4:	f013 f8a9 	bl	26d4a <log_1>
}
   13bf8:	4620      	mov	r0, r4
   13bfa:	b006      	add	sp, #24
   13bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = metal_register_generic_device(&shm_device);
   13c00:	485a      	ldr	r0, [pc, #360]	; (13d6c <rpmsg_backend_init+0x1cc>)
   13c02:	f00d ffef 	bl	21be4 <metal_register_generic_device>
	if (err) {
   13c06:	4604      	mov	r4, r0
   13c08:	b148      	cbz	r0, 13c1e <rpmsg_backend_init+0x7e>
   13c0a:	4a55      	ldr	r2, [pc, #340]	; (13d60 <rpmsg_backend_init+0x1c0>)
   13c0c:	4b55      	ldr	r3, [pc, #340]	; (13d64 <rpmsg_backend_init+0x1c4>)
		LOG_ERR("Couldn't register shared memory device: %d", err);
   13c0e:	4601      	mov	r1, r0
   13c10:	1ad2      	subs	r2, r2, r3
   13c12:	08d2      	lsrs	r2, r2, #3
   13c14:	0192      	lsls	r2, r2, #6
   13c16:	4856      	ldr	r0, [pc, #344]	; (13d70 <rpmsg_backend_init+0x1d0>)
   13c18:	f042 0201 	orr.w	r2, r2, #1
   13c1c:	e7ea      	b.n	13bf4 <rpmsg_backend_init+0x54>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
   13c1e:	4955      	ldr	r1, [pc, #340]	; (13d74 <rpmsg_backend_init+0x1d4>)
   13c20:	4855      	ldr	r0, [pc, #340]	; (13d78 <rpmsg_backend_init+0x1d8>)
   13c22:	aa03      	add	r2, sp, #12
   13c24:	f017 fa36 	bl	2b094 <metal_device_open>
	if (err) {
   13c28:	4604      	mov	r4, r0
   13c2a:	b148      	cbz	r0, 13c40 <rpmsg_backend_init+0xa0>
   13c2c:	4a4c      	ldr	r2, [pc, #304]	; (13d60 <rpmsg_backend_init+0x1c0>)
   13c2e:	4b4d      	ldr	r3, [pc, #308]	; (13d64 <rpmsg_backend_init+0x1c4>)
		LOG_ERR("metal_device_open failed: %d", err);
   13c30:	4601      	mov	r1, r0
   13c32:	1ad2      	subs	r2, r2, r3
   13c34:	08d2      	lsrs	r2, r2, #3
   13c36:	0192      	lsls	r2, r2, #6
   13c38:	4850      	ldr	r0, [pc, #320]	; (13d7c <rpmsg_backend_init+0x1dc>)
   13c3a:	f042 0201 	orr.w	r2, r2, #1
   13c3e:	e7d9      	b.n	13bf4 <rpmsg_backend_init+0x54>
	*io = metal_device_io_region(device, 0);
   13c40:	9b03      	ldr	r3, [sp, #12]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
   13c42:	689a      	ldr	r2, [r3, #8]
   13c44:	b95a      	cbnz	r2, 13c5e <rpmsg_backend_init+0xbe>
   13c46:	6038      	str	r0, [r7, #0]
   13c48:	4b46      	ldr	r3, [pc, #280]	; (13d64 <rpmsg_backend_init+0x1c4>)
   13c4a:	4945      	ldr	r1, [pc, #276]	; (13d60 <rpmsg_backend_init+0x1c0>)
		LOG_ERR("metal_device_io_region failed to get region");
   13c4c:	484c      	ldr	r0, [pc, #304]	; (13d80 <rpmsg_backend_init+0x1e0>)
   13c4e:	1ac9      	subs	r1, r1, r3
   13c50:	08c9      	lsrs	r1, r1, #3
   13c52:	0189      	lsls	r1, r1, #6
   13c54:	f041 0101 	orr.w	r1, r1, #1
   13c58:	f013 f86a 	bl	26d30 <log_0>
		return err;
   13c5c:	e7cc      	b.n	13bf8 <rpmsg_backend_init+0x58>
   13c5e:	330c      	adds	r3, #12
	*io = metal_device_io_region(device, 0);
   13c60:	603b      	str	r3, [r7, #0]
	if (!*io) {
   13c62:	2b00      	cmp	r3, #0
   13c64:	d0f0      	beq.n	13c48 <rpmsg_backend_init+0xa8>
   13c66:	4847      	ldr	r0, [pc, #284]	; (13d84 <rpmsg_backend_init+0x1e4>)
   13c68:	f00e fbe8 	bl	2243c <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding(CONFIG_RPMSG_SERVICE_IPM_TX_NAME);
   13c6c:	4e46      	ldr	r6, [pc, #280]	; (13d88 <rpmsg_backend_init+0x1e8>)
   13c6e:	6030      	str	r0, [r6, #0]
   13c70:	4846      	ldr	r0, [pc, #280]	; (13d8c <rpmsg_backend_init+0x1ec>)
   13c72:	f00e fbe3 	bl	2243c <z_impl_device_get_binding>
	if (!ipm_tx_handle) {
   13c76:	6832      	ldr	r2, [r6, #0]
   13c78:	b962      	cbnz	r2, 13c94 <rpmsg_backend_init+0xf4>
   13c7a:	4939      	ldr	r1, [pc, #228]	; (13d60 <rpmsg_backend_init+0x1c0>)
   13c7c:	4b39      	ldr	r3, [pc, #228]	; (13d64 <rpmsg_backend_init+0x1c4>)
		LOG_ERR("Could not get TX IPM device handle");
   13c7e:	4844      	ldr	r0, [pc, #272]	; (13d90 <rpmsg_backend_init+0x1f0>)
   13c80:	1ac9      	subs	r1, r1, r3
   13c82:	08c9      	lsrs	r1, r1, #3
   13c84:	0189      	lsls	r1, r1, #6
   13c86:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Could not get RX IPM device handle");
   13c8a:	f013 f851 	bl	26d30 <log_0>
		return -ENODEV;
   13c8e:	f06f 0412 	mvn.w	r4, #18
   13c92:	e7b1      	b.n	13bf8 <rpmsg_backend_init+0x58>
	if (!ipm_rx_handle) {
   13c94:	b940      	cbnz	r0, 13ca8 <rpmsg_backend_init+0x108>
   13c96:	4932      	ldr	r1, [pc, #200]	; (13d60 <rpmsg_backend_init+0x1c0>)
   13c98:	4b32      	ldr	r3, [pc, #200]	; (13d64 <rpmsg_backend_init+0x1c4>)
		LOG_ERR("Could not get RX IPM device handle");
   13c9a:	483e      	ldr	r0, [pc, #248]	; (13d94 <rpmsg_backend_init+0x1f4>)
   13c9c:	1ac9      	subs	r1, r1, r3
   13c9e:	08c9      	lsrs	r1, r1, #3
   13ca0:	0189      	lsls	r1, r1, #6
   13ca2:	f041 0101 	orr.w	r1, r1, #1
   13ca6:	e7f0      	b.n	13c8a <rpmsg_backend_init+0xea>
					 ipm_callback_t cb, void *user_data)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	api->register_callback(ipmdev, cb, user_data);
   13ca8:	6883      	ldr	r3, [r0, #8]
   13caa:	4622      	mov	r2, r4
   13cac:	685b      	ldr	r3, [r3, #4]
   13cae:	493a      	ldr	r1, [pc, #232]	; (13d98 <rpmsg_backend_init+0x1f8>)
   13cb0:	4798      	blx	r3
#endif

#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
static inline void *metal_allocate_memory(unsigned int size)
{
	return k_malloc(size);
   13cb2:	20b4      	movs	r0, #180	; 0xb4
   13cb4:	f017 ffce 	bl	2bc54 <k_malloc>
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   13cb8:	4606      	mov	r6, r0
   13cba:	b118      	cbz	r0, 13cc4 <rpmsg_backend_init+0x124>
		memset(vqs, 0x00, vq_size);
   13cbc:	22b4      	movs	r2, #180	; 0xb4
   13cbe:	4621      	mov	r1, r4
   13cc0:	f014 fc92 	bl	285e8 <memset>
	vq[0] = virtqueue_allocate(VRING_SIZE);
   13cc4:	4b35      	ldr	r3, [pc, #212]	; (13d9c <rpmsg_backend_init+0x1fc>)
   13cc6:	4698      	mov	r8, r3
   13cc8:	601e      	str	r6, [r3, #0]
	if (!vq[0]) {
   13cca:	b966      	cbnz	r6, 13ce6 <rpmsg_backend_init+0x146>
   13ccc:	4924      	ldr	r1, [pc, #144]	; (13d60 <rpmsg_backend_init+0x1c0>)
   13cce:	4b25      	ldr	r3, [pc, #148]	; (13d64 <rpmsg_backend_init+0x1c4>)
		LOG_ERR("virtqueue_allocate failed to alloc vq[0]");
   13cd0:	4833      	ldr	r0, [pc, #204]	; (13da0 <rpmsg_backend_init+0x200>)
   13cd2:	1ac9      	subs	r1, r1, r3
   13cd4:	08c9      	lsrs	r1, r1, #3
   13cd6:	0189      	lsls	r1, r1, #6
   13cd8:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
   13cdc:	f013 f828 	bl	26d30 <log_0>
		return -ENOMEM;
   13ce0:	f06f 040b 	mvn.w	r4, #11
   13ce4:	e788      	b.n	13bf8 <rpmsg_backend_init+0x58>
   13ce6:	20b4      	movs	r0, #180	; 0xb4
   13ce8:	f017 ffb4 	bl	2bc54 <k_malloc>
	if (vqs) {
   13cec:	4606      	mov	r6, r0
   13cee:	b118      	cbz	r0, 13cf8 <rpmsg_backend_init+0x158>
		memset(vqs, 0x00, vq_size);
   13cf0:	22b4      	movs	r2, #180	; 0xb4
   13cf2:	2100      	movs	r1, #0
   13cf4:	f014 fc78 	bl	285e8 <memset>
	vq[1] = virtqueue_allocate(VRING_SIZE);
   13cf8:	f8c8 6004 	str.w	r6, [r8, #4]
	if (!vq[1]) {
   13cfc:	b946      	cbnz	r6, 13d10 <rpmsg_backend_init+0x170>
   13cfe:	4918      	ldr	r1, [pc, #96]	; (13d60 <rpmsg_backend_init+0x1c0>)
   13d00:	4b18      	ldr	r3, [pc, #96]	; (13d64 <rpmsg_backend_init+0x1c4>)
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
   13d02:	4828      	ldr	r0, [pc, #160]	; (13da4 <rpmsg_backend_init+0x204>)
   13d04:	1ac9      	subs	r1, r1, r3
   13d06:	08c9      	lsrs	r1, r1, #3
   13d08:	0189      	lsls	r1, r1, #6
   13d0a:	f041 0101 	orr.w	r1, r1, #1
   13d0e:	e7e5      	b.n	13cdc <rpmsg_backend_init+0x13c>
	rvrings[0].io = *io;
   13d10:	683a      	ldr	r2, [r7, #0]
   13d12:	4b25      	ldr	r3, [pc, #148]	; (13da8 <rpmsg_backend_init+0x208>)
	rvrings[0].vq = vq[0];
   13d14:	f8d8 0000 	ldr.w	r0, [r8]
	rvrings[0].io = *io;
   13d18:	615a      	str	r2, [r3, #20]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
   13d1a:	4a24      	ldr	r2, [pc, #144]	; (13dac <rpmsg_backend_init+0x20c>)
	rvrings[0].info.num_descs = VRING_SIZE;
   13d1c:	2110      	movs	r1, #16
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
   13d1e:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
   13d20:	2204      	movs	r2, #4
	rvrings[0].vq = vq[0];
   13d22:	6018      	str	r0, [r3, #0]
	rvrings[0].info.align = VRING_ALIGNMENT;
   13d24:	609a      	str	r2, [r3, #8]
	rvrings[1].io = *io;
   13d26:	6838      	ldr	r0, [r7, #0]
	rvrings[1].info.align = VRING_ALIGNMENT;
   13d28:	621a      	str	r2, [r3, #32]
	vdev->role = RPMSG_ROLE;
   13d2a:	2200      	movs	r2, #0
	rvrings[1].io = *io;
   13d2c:	62d8      	str	r0, [r3, #44]	; 0x2c
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
   13d2e:	4820      	ldr	r0, [pc, #128]	; (13db0 <rpmsg_backend_init+0x210>)
	rvrings[1].info.num_descs = VRING_SIZE;
   13d30:	8499      	strh	r1, [r3, #36]	; 0x24
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
   13d32:	61d8      	str	r0, [r3, #28]
	rvrings[1].vq = vq[1];
   13d34:	619e      	str	r6, [r3, #24]
	vdev->role = RPMSG_ROLE;
   13d36:	61aa      	str	r2, [r5, #24]
	vdev->vrings_num = VRING_COUNT;
   13d38:	2202      	movs	r2, #2
   13d3a:	62aa      	str	r2, [r5, #40]	; 0x28
	vdev->func = &dispatch;
   13d3c:	4a1d      	ldr	r2, [pc, #116]	; (13db4 <rpmsg_backend_init+0x214>)
	rvrings[0].info.num_descs = VRING_SIZE;
   13d3e:	8199      	strh	r1, [r3, #12]
	vdev->func = &dispatch;
   13d40:	622a      	str	r2, [r5, #32]
	vdev->vrings_info = &rvrings[0];
   13d42:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
   13d44:	e758      	b.n	13bf8 <rpmsg_backend_init+0x58>
   13d46:	bf00      	nop
   13d48:	00021c75 	.word	0x00021c75
   13d4c:	2000ac30 	.word	0x2000ac30
   13d50:	20008808 	.word	0x20008808
   13d54:	0002d61e 	.word	0x0002d61e
   13d58:	00013b4d 	.word	0x00013b4d
   13d5c:	200092ec 	.word	0x200092ec
   13d60:	0002c0dc 	.word	0x0002c0dc
   13d64:	0002bfe4 	.word	0x0002bfe4
   13d68:	0002d629 	.word	0x0002d629
   13d6c:	200081d4 	.word	0x200081d4
   13d70:	0002d64c 	.word	0x0002d64c
   13d74:	0002d677 	.word	0x0002d677
   13d78:	0002d681 	.word	0x0002d681
   13d7c:	0002d689 	.word	0x0002d689
   13d80:	0002d6a6 	.word	0x0002d6a6
   13d84:	000308da 	.word	0x000308da
   13d88:	200092e8 	.word	0x200092e8
   13d8c:	0002d6d2 	.word	0x0002d6d2
   13d90:	0002d6d8 	.word	0x0002d6d8
   13d94:	0002d6fb 	.word	0x0002d6fb
   13d98:	00013b3d 	.word	0x00013b3d
   13d9c:	200092fc 	.word	0x200092fc
   13da0:	0002d71e 	.word	0x0002d71e
   13da4:	0002d747 	.word	0x0002d747
   13da8:	200081a4 	.word	0x200081a4
   13dac:	2007fc00 	.word	0x2007fc00
   13db0:	2007f800 	.word	0x2007f800
   13db4:	0002c2cc 	.word	0x0002c2cc

00013db8 <ns_bind_cb>:
#if MASTER

static void ns_bind_cb(struct rpmsg_device *rdev,
					const char *name,
					uint32_t dest)
{
   13db8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   13dbc:	460d      	mov	r5, r1
	int err;

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (strcmp(name, endpoints[i].name) == 0) {
   13dbe:	4c26      	ldr	r4, [pc, #152]	; (13e58 <ns_bind_cb+0xa0>)
{
   13dc0:	4606      	mov	r6, r0
		if (strcmp(name, endpoints[i].name) == 0) {
   13dc2:	6821      	ldr	r1, [r4, #0]
   13dc4:	4628      	mov	r0, r5
{
   13dc6:	4617      	mov	r7, r2
		if (strcmp(name, endpoints[i].name) == 0) {
   13dc8:	f014 fbb8 	bl	2853c <strcmp>
   13dcc:	46a0      	mov	r8, r4
   13dce:	b1b8      	cbz	r0, 13e00 <ns_bind_cb+0x48>
   13dd0:	4628      	mov	r0, r5
   13dd2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   13dd4:	f014 fbb2 	bl	2853c <strcmp>
   13dd8:	b188      	cbz	r0, 13dfe <ns_bind_cb+0x46>
   13dda:	4a20      	ldr	r2, [pc, #128]	; (13e5c <ns_bind_cb+0xa4>)
   13ddc:	4c20      	ldr	r4, [pc, #128]	; (13e60 <ns_bind_cb+0xa8>)
   13dde:	4628      	mov	r0, r5
   13de0:	1aa4      	subs	r4, r4, r2
   13de2:	f7fe fd83 	bl	128ec <z_log_strdup>
   13de6:	08e4      	lsrs	r4, r4, #3

			return;
		}
	}

	LOG_ERR("Remote endpoint %s not registered locally", log_strdup(name));
   13de8:	01a4      	lsls	r4, r4, #6
   13dea:	f044 0401 	orr.w	r4, r4, #1
   13dee:	4601      	mov	r1, r0
   13df0:	4622      	mov	r2, r4
   13df2:	481c      	ldr	r0, [pc, #112]	; (13e64 <ns_bind_cb+0xac>)
}
   13df4:	b004      	add	sp, #16
   13df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_ERR("Remote endpoint %s not registered locally", log_strdup(name));
   13dfa:	f012 bfa6 	b.w	26d4a <log_1>
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
   13dfe:	2001      	movs	r0, #1
			err = rpmsg_create_ept(&endpoints[i].ep,
   13e00:	244c      	movs	r4, #76	; 0x4c
   13e02:	4344      	muls	r4, r0
   13e04:	4b18      	ldr	r3, [pc, #96]	; (13e68 <ns_bind_cb+0xb0>)
   13e06:	f104 0008 	add.w	r0, r4, #8
   13e0a:	9302      	str	r3, [sp, #8]
   13e0c:	4444      	add	r4, r8
   13e0e:	6863      	ldr	r3, [r4, #4]
   13e10:	4631      	mov	r1, r6
   13e12:	e9cd 7300 	strd	r7, r3, [sp]
   13e16:	462a      	mov	r2, r5
   13e18:	f04f 33ff 	mov.w	r3, #4294967295
   13e1c:	4440      	add	r0, r8
   13e1e:	f00d ffc5 	bl	21dac <rpmsg_create_ept>
			if (err != 0) {
   13e22:	4606      	mov	r6, r0
   13e24:	b190      	cbz	r0, 13e4c <ns_bind_cb+0x94>
   13e26:	4b0d      	ldr	r3, [pc, #52]	; (13e5c <ns_bind_cb+0xa4>)
   13e28:	4c0d      	ldr	r4, [pc, #52]	; (13e60 <ns_bind_cb+0xa8>)
   13e2a:	4628      	mov	r0, r5
   13e2c:	1ae4      	subs	r4, r4, r3
   13e2e:	f7fe fd5d 	bl	128ec <z_log_strdup>
   13e32:	08e4      	lsrs	r4, r4, #3
				LOG_ERR("Creating remote endpoint %s"
   13e34:	01a4      	lsls	r4, r4, #6
   13e36:	f044 0401 	orr.w	r4, r4, #1
   13e3a:	4601      	mov	r1, r0
   13e3c:	4623      	mov	r3, r4
   13e3e:	4632      	mov	r2, r6
   13e40:	480a      	ldr	r0, [pc, #40]	; (13e6c <ns_bind_cb+0xb4>)
}
   13e42:	b004      	add	sp, #16
   13e44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				LOG_ERR("Creating remote endpoint %s"
   13e48:	f012 bf93 	b.w	26d72 <log_2>
				endpoints[i].bound = true;
   13e4c:	2301      	movs	r3, #1
   13e4e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
   13e52:	b004      	add	sp, #16
   13e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13e58:	20009304 	.word	0x20009304
   13e5c:	0002bfe4 	.word	0x0002bfe4
   13e60:	0002c0e4 	.word	0x0002c0e4
   13e64:	0002d77e 	.word	0x0002d77e
   13e68:	00027569 	.word	0x00027569
   13e6c:	0002d7a8 	.word	0x0002d7a8

00013e70 <rpmsg_service_init>:

#endif

static int rpmsg_service_init(const struct device *dev)
{
   13e70:	b537      	push	{r0, r1, r2, r4, r5, lr}

	(void)dev;

	LOG_DBG("RPMsg service initialization start");

	err = rpmsg_backend_init(&io, &vdev);
   13e72:	4d19      	ldr	r5, [pc, #100]	; (13ed8 <rpmsg_service_init+0x68>)
   13e74:	4919      	ldr	r1, [pc, #100]	; (13edc <rpmsg_service_init+0x6c>)
   13e76:	4628      	mov	r0, r5
   13e78:	f7ff fe92 	bl	13ba0 <rpmsg_backend_init>
	if (err) {
   13e7c:	4604      	mov	r4, r0
   13e7e:	b168      	cbz	r0, 13e9c <rpmsg_service_init+0x2c>
   13e80:	4a17      	ldr	r2, [pc, #92]	; (13ee0 <rpmsg_service_init+0x70>)
   13e82:	4b18      	ldr	r3, [pc, #96]	; (13ee4 <rpmsg_service_init+0x74>)
		LOG_ERR("RPMsg backend init failed with error %d", err);
   13e84:	4601      	mov	r1, r0
   13e86:	1ad2      	subs	r2, r2, r3
   13e88:	08d2      	lsrs	r2, r2, #3
   13e8a:	0192      	lsls	r2, r2, #6
   13e8c:	4816      	ldr	r0, [pc, #88]	; (13ee8 <rpmsg_service_init+0x78>)
   13e8e:	f042 0201 	orr.w	r2, r2, #1
#else
	err = rpmsg_init_vdev(&rvdev, &vdev, NULL, io, NULL);
#endif

	if (err) {
		LOG_ERR("rpmsg_init_vdev failed %d", err);
   13e92:	f012 ff5a 	bl	26d4a <log_1>
#endif

	LOG_DBG("RPMsg service initialized");

	return 0;
}
   13e96:	4620      	mov	r0, r4
   13e98:	b003      	add	sp, #12
   13e9a:	bd30      	pop	{r4, r5, pc}
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
   13e9c:	4c13      	ldr	r4, [pc, #76]	; (13eec <rpmsg_service_init+0x7c>)
   13e9e:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
   13ea2:	4620      	mov	r0, r4
   13ea4:	4912      	ldr	r1, [pc, #72]	; (13ef0 <rpmsg_service_init+0x80>)
   13ea6:	f017 fd1b 	bl	2b8e0 <rpmsg_virtio_init_shm_pool>
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
   13eaa:	9400      	str	r4, [sp, #0]
   13eac:	682b      	ldr	r3, [r5, #0]
   13eae:	4a11      	ldr	r2, [pc, #68]	; (13ef4 <rpmsg_service_init+0x84>)
   13eb0:	490a      	ldr	r1, [pc, #40]	; (13edc <rpmsg_service_init+0x6c>)
   13eb2:	4811      	ldr	r0, [pc, #68]	; (13ef8 <rpmsg_service_init+0x88>)
   13eb4:	f00e f920 	bl	220f8 <rpmsg_init_vdev>
	if (err) {
   13eb8:	4604      	mov	r4, r0
   13eba:	b148      	cbz	r0, 13ed0 <rpmsg_service_init+0x60>
   13ebc:	4a08      	ldr	r2, [pc, #32]	; (13ee0 <rpmsg_service_init+0x70>)
   13ebe:	4b09      	ldr	r3, [pc, #36]	; (13ee4 <rpmsg_service_init+0x74>)
		LOG_ERR("rpmsg_init_vdev failed %d", err);
   13ec0:	4601      	mov	r1, r0
   13ec2:	1ad2      	subs	r2, r2, r3
   13ec4:	08d2      	lsrs	r2, r2, #3
   13ec6:	0192      	lsls	r2, r2, #6
   13ec8:	480c      	ldr	r0, [pc, #48]	; (13efc <rpmsg_service_init+0x8c>)
   13eca:	f042 0201 	orr.w	r2, r2, #1
   13ece:	e7e0      	b.n	13e92 <rpmsg_service_init+0x22>
	ep_crt_started = true;
   13ed0:	2201      	movs	r2, #1
   13ed2:	4b0b      	ldr	r3, [pc, #44]	; (13f00 <rpmsg_service_init+0x90>)
   13ed4:	701a      	strb	r2, [r3, #0]
	return 0;
   13ed6:	e7de      	b.n	13e96 <rpmsg_service_init+0x26>
   13ed8:	2000939c 	.word	0x2000939c
   13edc:	200088a8 	.word	0x200088a8
   13ee0:	0002c0e4 	.word	0x0002c0e4
   13ee4:	0002bfe4 	.word	0x0002bfe4
   13ee8:	0002d7d9 	.word	0x0002d7d9
   13eec:	20009440 	.word	0x20009440
   13ef0:	20070400 	.word	0x20070400
   13ef4:	00013db9 	.word	0x00013db9
   13ef8:	200093a0 	.word	0x200093a0
   13efc:	0002d801 	.word	0x0002d801
   13f00:	2000a439 	.word	0x2000a439

00013f04 <rpmsg_service_register_endpoint>:

int rpmsg_service_register_endpoint(const char *name, rpmsg_ept_cb cb)
{
   13f04:	b538      	push	{r3, r4, r5, lr}
	if (ep_crt_started) {
   13f06:	4b13      	ldr	r3, [pc, #76]	; (13f54 <rpmsg_service_register_endpoint+0x50>)
{
   13f08:	4602      	mov	r2, r0
	if (ep_crt_started) {
   13f0a:	781b      	ldrb	r3, [r3, #0]
   13f0c:	b9fb      	cbnz	r3, 13f4e <rpmsg_service_register_endpoint+0x4a>
		return -EINPROGRESS;
	}

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (!endpoints[i].name) {
   13f0e:	4c12      	ldr	r4, [pc, #72]	; (13f58 <rpmsg_service_register_endpoint+0x54>)
   13f10:	6823      	ldr	r3, [r4, #0]
   13f12:	4625      	mov	r5, r4
   13f14:	b193      	cbz	r3, 13f3c <rpmsg_service_register_endpoint+0x38>
   13f16:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   13f18:	b1bb      	cbz	r3, 13f4a <rpmsg_service_register_endpoint+0x46>
   13f1a:	4a10      	ldr	r2, [pc, #64]	; (13f5c <rpmsg_service_register_endpoint+0x58>)
   13f1c:	4c10      	ldr	r4, [pc, #64]	; (13f60 <rpmsg_service_register_endpoint+0x5c>)
   13f1e:	1aa4      	subs	r4, r4, r2
   13f20:	f7fe fce4 	bl	128ec <z_log_strdup>
   13f24:	08e4      	lsrs	r4, r4, #3

			return i;
		}
	}

	LOG_ERR("No free slots to register endpoint %s", log_strdup(name));
   13f26:	01a4      	lsls	r4, r4, #6
   13f28:	f044 0401 	orr.w	r4, r4, #1
   13f2c:	4601      	mov	r1, r0
   13f2e:	4622      	mov	r2, r4
   13f30:	480c      	ldr	r0, [pc, #48]	; (13f64 <rpmsg_service_register_endpoint+0x60>)
   13f32:	f012 ff0a 	bl	26d4a <log_1>

	return -ENOMEM;
   13f36:	f06f 000b 	mvn.w	r0, #11
}
   13f3a:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
   13f3c:	4618      	mov	r0, r3
			endpoints[i].name = name;
   13f3e:	234c      	movs	r3, #76	; 0x4c
   13f40:	4343      	muls	r3, r0
   13f42:	18ec      	adds	r4, r5, r3
   13f44:	50ea      	str	r2, [r5, r3]
			endpoints[i].cb = cb;
   13f46:	6061      	str	r1, [r4, #4]
			return i;
   13f48:	e7f7      	b.n	13f3a <rpmsg_service_register_endpoint+0x36>
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
   13f4a:	2001      	movs	r0, #1
   13f4c:	e7f7      	b.n	13f3e <rpmsg_service_register_endpoint+0x3a>
		return -EINPROGRESS;
   13f4e:	f06f 0076 	mvn.w	r0, #118	; 0x76
   13f52:	e7f2      	b.n	13f3a <rpmsg_service_register_endpoint+0x36>
   13f54:	2000a439 	.word	0x2000a439
   13f58:	20009304 	.word	0x20009304
   13f5c:	0002bfe4 	.word	0x0002bfe4
   13f60:	0002c0e4 	.word	0x0002c0e4
   13f64:	0002d81b 	.word	0x0002d81b

00013f68 <rpmsg_service_endpoint_is_bound>:

bool rpmsg_service_endpoint_is_bound(int endpoint_id)
{
	return endpoints[endpoint_id].bound;
   13f68:	224c      	movs	r2, #76	; 0x4c
   13f6a:	4b03      	ldr	r3, [pc, #12]	; (13f78 <rpmsg_service_endpoint_is_bound+0x10>)
   13f6c:	fb02 3000 	mla	r0, r2, r0, r3
   13f70:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
}
   13f74:	4770      	bx	lr
   13f76:	bf00      	nop
   13f78:	20009304 	.word	0x20009304

00013f7c <rpmsg_service_send>:

int rpmsg_service_send(int endpoint_id, const void *data, size_t len)
{
   13f7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
   13f7e:	244c      	movs	r4, #76	; 0x4c
   13f80:	460b      	mov	r3, r1
   13f82:	2101      	movs	r1, #1
   13f84:	4344      	muls	r4, r0
   13f86:	e9cd 2100 	strd	r2, r1, [sp]
   13f8a:	4d05      	ldr	r5, [pc, #20]	; (13fa0 <rpmsg_service_send+0x24>)
   13f8c:	1928      	adds	r0, r5, r4
	return rpmsg_send(&endpoints[endpoint_id].ep, data, len);
   13f8e:	3408      	adds	r4, #8
   13f90:	e9d0 120b 	ldrd	r1, r2, [r0, #44]	; 0x2c
   13f94:	1928      	adds	r0, r5, r4
   13f96:	f00d fef7 	bl	21d88 <rpmsg_send_offchannel_raw>
}
   13f9a:	b003      	add	sp, #12
   13f9c:	bd30      	pop	{r4, r5, pc}
   13f9e:	bf00      	nop
   13fa0:	20009304 	.word	0x20009304

00013fa4 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   13fa4:	4b09      	ldr	r3, [pc, #36]	; (13fcc <get_flash_area_from_id+0x28>)
{
   13fa6:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   13fa8:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   13faa:	4b09      	ldr	r3, [pc, #36]	; (13fd0 <get_flash_area_from_id+0x2c>)
{
   13fac:	4602      	mov	r2, r0
		if (flash_map[i].fa_id == idx) {
   13fae:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   13fb0:	2300      	movs	r3, #0
   13fb2:	429d      	cmp	r5, r3
   13fb4:	dc01      	bgt.n	13fba <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   13fb6:	2000      	movs	r0, #0
}
   13fb8:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   13fba:	0119      	lsls	r1, r3, #4
   13fbc:	5c61      	ldrb	r1, [r4, r1]
   13fbe:	eb04 1003 	add.w	r0, r4, r3, lsl #4
   13fc2:	4291      	cmp	r1, r2
   13fc4:	d0f8      	beq.n	13fb8 <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
   13fc6:	3301      	adds	r3, #1
   13fc8:	e7f3      	b.n	13fb2 <get_flash_area_from_id+0xe>
   13fca:	bf00      	nop
   13fcc:	0002c384 	.word	0x0002c384
   13fd0:	2000824c 	.word	0x2000824c

00013fd4 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   13fd4:	4b08      	ldr	r3, [pc, #32]	; (13ff8 <flash_area_open+0x24>)
{
   13fd6:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
   13fd8:	681b      	ldr	r3, [r3, #0]
{
   13fda:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   13fdc:	b12b      	cbz	r3, 13fea <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   13fde:	f7ff ffe1 	bl	13fa4 <get_flash_area_from_id>
	if (area == NULL) {
   13fe2:	b128      	cbz	r0, 13ff0 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   13fe4:	6020      	str	r0, [r4, #0]
	return 0;
   13fe6:	2000      	movs	r0, #0
}
   13fe8:	bd10      	pop	{r4, pc}
		return -EACCES;
   13fea:	f06f 000c 	mvn.w	r0, #12
   13fee:	e7fb      	b.n	13fe8 <flash_area_open+0x14>
		return -ENOENT;
   13ff0:	f06f 0001 	mvn.w	r0, #1
   13ff4:	e7f8      	b.n	13fe8 <flash_area_open+0x14>
   13ff6:	bf00      	nop
   13ff8:	2000824c 	.word	0x2000824c

00013ffc <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   13ffc:	b530      	push	{r4, r5, lr}
   13ffe:	b089      	sub	sp, #36	; 0x24
   14000:	460c      	mov	r4, r1
   14002:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
   14004:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
   14006:	f7ff ffcd 	bl	13fa4 <get_flash_area_from_id>
	if (fa == NULL) {
   1400a:	b1b8      	cbz	r0, 1403c <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
   1400c:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
   1400e:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
   14010:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   14012:	6883      	ldr	r3, [r0, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
   14014:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
   14016:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
   1401a:	2300      	movs	r3, #0
	cb_data->status = 0;
   1401c:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   14020:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
   14022:	f013 faa3 	bl	2756c <device_get_binding>
	if (flash_dev == NULL) {
   14026:	b160      	cbz	r0, 14042 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
   14028:	4907      	ldr	r1, [pc, #28]	; (14048 <flash_area_get_sectors+0x4c>)
   1402a:	aa01      	add	r2, sp, #4
   1402c:	f016 fc40 	bl	2a8b0 <flash_page_foreach>
	if (cb_data->status == 0) {
   14030:	9807      	ldr	r0, [sp, #28]
   14032:	b908      	cbnz	r0, 14038 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
   14034:	9b05      	ldr	r3, [sp, #20]
   14036:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   14038:	b009      	add	sp, #36	; 0x24
   1403a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1403c:	f06f 0015 	mvn.w	r0, #21
   14040:	e7fa      	b.n	14038 <flash_area_get_sectors+0x3c>
		return -ENODEV;
   14042:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   14046:	e7f7      	b.n	14038 <flash_area_get_sectors+0x3c>
   14048:	00027571 	.word	0x00027571

0001404c <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   1404c:	4b10      	ldr	r3, [pc, #64]	; (14090 <settings_save_one+0x44>)
{
   1404e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   14052:	681c      	ldr	r4, [r3, #0]
{
   14054:	4605      	mov	r5, r0
   14056:	460e      	mov	r6, r1
   14058:	4617      	mov	r7, r2
	if (!cs) {
   1405a:	b1ac      	cbz	r4, 14088 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   1405c:	f04f 32ff 	mov.w	r2, #4294967295
   14060:	f04f 33ff 	mov.w	r3, #4294967295
   14064:	480b      	ldr	r0, [pc, #44]	; (14094 <settings_save_one+0x48>)
   14066:	f00e fef1 	bl	22e4c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   1406a:	6863      	ldr	r3, [r4, #4]
   1406c:	4632      	mov	r2, r6
   1406e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   14072:	4629      	mov	r1, r5
   14074:	463b      	mov	r3, r7
   14076:	4620      	mov	r0, r4
   14078:	47c0      	blx	r8
   1407a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1407c:	4805      	ldr	r0, [pc, #20]	; (14094 <settings_save_one+0x48>)
   1407e:	f00e ffdf 	bl	23040 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   14082:	4620      	mov	r0, r4
   14084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   14088:	f06f 0401 	mvn.w	r4, #1
   1408c:	e7f9      	b.n	14082 <settings_save_one+0x36>
   1408e:	bf00      	nop
   14090:	20009454 	.word	0x20009454
   14094:	2000853c 	.word	0x2000853c

00014098 <settings_src_register>:
	parent->next = child;
   14098:	2300      	movs	r3, #0
   1409a:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   1409c:	4b04      	ldr	r3, [pc, #16]	; (140b0 <settings_src_register+0x18>)
   1409e:	685a      	ldr	r2, [r3, #4]
   140a0:	b912      	cbnz	r2, 140a8 <settings_src_register+0x10>
	list->head = node;
   140a2:	e9c3 0000 	strd	r0, r0, [r3]
}
   140a6:	4770      	bx	lr
	parent->next = child;
   140a8:	6010      	str	r0, [r2, #0]
	list->tail = node;
   140aa:	6058      	str	r0, [r3, #4]
}
   140ac:	4770      	bx	lr
   140ae:	bf00      	nop
   140b0:	2000944c 	.word	0x2000944c

000140b4 <settings_dst_register>:
	settings_save_dst = cs;
   140b4:	4b01      	ldr	r3, [pc, #4]	; (140bc <settings_dst_register+0x8>)
   140b6:	6018      	str	r0, [r3, #0]
}
   140b8:	4770      	bx	lr
   140ba:	bf00      	nop
   140bc:	20009454 	.word	0x20009454

000140c0 <settings_load_subtree>:
	const struct settings_load_arg arg = {
   140c0:	2300      	movs	r3, #0
{
   140c2:	b530      	push	{r4, r5, lr}
   140c4:	b085      	sub	sp, #20
   140c6:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   140c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   140cc:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   140ce:	f04f 33ff 	mov.w	r3, #4294967295
   140d2:	f04f 32ff 	mov.w	r2, #4294967295
   140d6:	480d      	ldr	r0, [pc, #52]	; (1410c <settings_load_subtree+0x4c>)
   140d8:	f00e feb8 	bl	22e4c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   140dc:	4b0c      	ldr	r3, [pc, #48]	; (14110 <settings_load_subtree+0x50>)
   140de:	681c      	ldr	r4, [r3, #0]
   140e0:	2c00      	cmp	r4, #0
   140e2:	bf38      	it	cc
   140e4:	2400      	movcc	r4, #0
   140e6:	b13c      	cbz	r4, 140f8 <settings_load_subtree+0x38>
		cs->cs_itf->csi_load(cs, &arg);
   140e8:	6863      	ldr	r3, [r4, #4]
   140ea:	4620      	mov	r0, r4
   140ec:	681b      	ldr	r3, [r3, #0]
   140ee:	a901      	add	r1, sp, #4
   140f0:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   140f2:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   140f4:	2c00      	cmp	r4, #0
   140f6:	d1f6      	bne.n	140e6 <settings_load_subtree+0x26>
	rc = settings_commit_subtree(subtree);
   140f8:	4628      	mov	r0, r5
   140fa:	f000 f8f1 	bl	142e0 <settings_commit_subtree>
   140fe:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   14100:	4802      	ldr	r0, [pc, #8]	; (1410c <settings_load_subtree+0x4c>)
   14102:	f00e ff9d 	bl	23040 <z_impl_k_mutex_unlock>
}
   14106:	4620      	mov	r0, r4
   14108:	b005      	add	sp, #20
   1410a:	bd30      	pop	{r4, r5, pc}
   1410c:	2000853c 	.word	0x2000853c
   14110:	2000944c 	.word	0x2000944c

00014114 <settings_load_subtree_direct>:
{
   14114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   14116:	e9cd 0101 	strd	r0, r1, [sp, #4]
   1411a:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   1411c:	f04f 33ff 	mov.w	r3, #4294967295
   14120:	f04f 32ff 	mov.w	r2, #4294967295
   14124:	480b      	ldr	r0, [pc, #44]	; (14154 <settings_load_subtree_direct+0x40>)
   14126:	f00e fe91 	bl	22e4c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1412a:	4b0b      	ldr	r3, [pc, #44]	; (14158 <settings_load_subtree_direct+0x44>)
   1412c:	681c      	ldr	r4, [r3, #0]
   1412e:	2c00      	cmp	r4, #0
   14130:	bf38      	it	cc
   14132:	2400      	movcc	r4, #0
   14134:	b13c      	cbz	r4, 14146 <settings_load_subtree_direct+0x32>
		cs->cs_itf->csi_load(cs, &arg);
   14136:	6863      	ldr	r3, [r4, #4]
   14138:	4620      	mov	r0, r4
   1413a:	681b      	ldr	r3, [r3, #0]
   1413c:	a901      	add	r1, sp, #4
   1413e:	4798      	blx	r3
   14140:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   14142:	2c00      	cmp	r4, #0
   14144:	d1f6      	bne.n	14134 <settings_load_subtree_direct+0x20>
	return z_impl_k_mutex_unlock(mutex);
   14146:	4803      	ldr	r0, [pc, #12]	; (14154 <settings_load_subtree_direct+0x40>)
   14148:	f00e ff7a 	bl	23040 <z_impl_k_mutex_unlock>
}
   1414c:	2000      	movs	r0, #0
   1414e:	b004      	add	sp, #16
   14150:	bd10      	pop	{r4, pc}
   14152:	bf00      	nop
   14154:	2000853c 	.word	0x2000853c
   14158:	2000944c 	.word	0x2000944c

0001415c <settings_store_init>:
	list->head = NULL;
   1415c:	2200      	movs	r2, #0
   1415e:	4b02      	ldr	r3, [pc, #8]	; (14168 <settings_store_init+0xc>)
	list->tail = NULL;
   14160:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   14164:	4770      	bx	lr
   14166:	bf00      	nop
   14168:	2000944c 	.word	0x2000944c

0001416c <settings_init>:
	list->head = NULL;
   1416c:	2200      	movs	r2, #0
   1416e:	4b02      	ldr	r3, [pc, #8]	; (14178 <settings_init+0xc>)
	list->tail = NULL;
   14170:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   14174:	f7ff bff2 	b.w	1415c <settings_store_init>
   14178:	20009458 	.word	0x20009458

0001417c <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   1417c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   14180:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   14182:	460e      	mov	r6, r1
   14184:	b109      	cbz	r1, 1418a <settings_parse_and_lookup+0xe>
		*next = NULL;
   14186:	2300      	movs	r3, #0
   14188:	600b      	str	r3, [r1, #0]
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1418a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1423c <settings_parse_and_lookup+0xc0>
   1418e:	2500      	movs	r5, #0
   14190:	46c2      	mov	sl, r8
   14192:	4c25      	ldr	r4, [pc, #148]	; (14228 <settings_parse_and_lookup+0xac>)
   14194:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 14240 <settings_parse_and_lookup+0xc4>
   14198:	4544      	cmp	r4, r8
   1419a:	d90c      	bls.n	141b6 <settings_parse_and_lookup+0x3a>
   1419c:	4923      	ldr	r1, [pc, #140]	; (1422c <settings_parse_and_lookup+0xb0>)
   1419e:	2394      	movs	r3, #148	; 0x94
   141a0:	464a      	mov	r2, r9
   141a2:	4823      	ldr	r0, [pc, #140]	; (14230 <settings_parse_and_lookup+0xb4>)
   141a4:	f012 faba 	bl	2671c <printk>
   141a8:	4822      	ldr	r0, [pc, #136]	; (14234 <settings_parse_and_lookup+0xb8>)
   141aa:	f012 fab7 	bl	2671c <printk>
   141ae:	2194      	movs	r1, #148	; 0x94
   141b0:	4648      	mov	r0, r9
   141b2:	f012 fd58 	bl	26c66 <assert_post_action>
   141b6:	4554      	cmp	r4, sl
   141b8:	d308      	bcc.n	141cc <settings_parse_and_lookup+0x50>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   141ba:	4b1f      	ldr	r3, [pc, #124]	; (14238 <settings_parse_and_lookup+0xbc>)
   141bc:	681c      	ldr	r4, [r3, #0]
   141be:	b10c      	cbz	r4, 141c4 <settings_parse_and_lookup+0x48>
   141c0:	3c14      	subs	r4, #20
   141c2:	b9c4      	cbnz	r4, 141f6 <settings_parse_and_lookup+0x7a>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   141c4:	4628      	mov	r0, r5
   141c6:	b002      	add	sp, #8
   141c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   141cc:	4638      	mov	r0, r7
   141ce:	6821      	ldr	r1, [r4, #0]
   141d0:	aa01      	add	r2, sp, #4
   141d2:	f013 f9f2 	bl	275ba <settings_name_steq>
   141d6:	b160      	cbz	r0, 141f2 <settings_parse_and_lookup+0x76>
		if (!bestmatch) {
   141d8:	b925      	cbnz	r5, 141e4 <settings_parse_and_lookup+0x68>
			if (next) {
   141da:	b10e      	cbz	r6, 141e0 <settings_parse_and_lookup+0x64>
				*next = tmpnext;
   141dc:	9b01      	ldr	r3, [sp, #4]
   141de:	6033      	str	r3, [r6, #0]
   141e0:	4625      	mov	r5, r4
   141e2:	e006      	b.n	141f2 <settings_parse_and_lookup+0x76>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   141e4:	2200      	movs	r2, #0
   141e6:	6829      	ldr	r1, [r5, #0]
   141e8:	6820      	ldr	r0, [r4, #0]
   141ea:	f013 f9e6 	bl	275ba <settings_name_steq>
   141ee:	2800      	cmp	r0, #0
   141f0:	d1f3      	bne.n	141da <settings_parse_and_lookup+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   141f2:	3414      	adds	r4, #20
   141f4:	e7d0      	b.n	14198 <settings_parse_and_lookup+0x1c>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   141f6:	4638      	mov	r0, r7
   141f8:	6821      	ldr	r1, [r4, #0]
   141fa:	aa01      	add	r2, sp, #4
   141fc:	f013 f9dd 	bl	275ba <settings_name_steq>
   14200:	b160      	cbz	r0, 1421c <settings_parse_and_lookup+0xa0>
		if (!bestmatch) {
   14202:	b925      	cbnz	r5, 1420e <settings_parse_and_lookup+0x92>
			if (next) {
   14204:	b10e      	cbz	r6, 1420a <settings_parse_and_lookup+0x8e>
				*next = tmpnext;
   14206:	9b01      	ldr	r3, [sp, #4]
   14208:	6033      	str	r3, [r6, #0]
   1420a:	4625      	mov	r5, r4
   1420c:	e006      	b.n	1421c <settings_parse_and_lookup+0xa0>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   1420e:	2200      	movs	r2, #0
   14210:	6829      	ldr	r1, [r5, #0]
   14212:	6820      	ldr	r0, [r4, #0]
   14214:	f013 f9d1 	bl	275ba <settings_name_steq>
   14218:	2800      	cmp	r0, #0
   1421a:	d1f3      	bne.n	14204 <settings_parse_and_lookup+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1421c:	f114 0f14 	cmn.w	r4, #20
   14220:	d0d0      	beq.n	141c4 <settings_parse_and_lookup+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14222:	6964      	ldr	r4, [r4, #20]
   14224:	e7cb      	b.n	141be <settings_parse_and_lookup+0x42>
   14226:	bf00      	nop
   14228:	0002bf6c 	.word	0x0002bf6c
   1422c:	0002d881 	.word	0x0002d881
   14230:	0002cfb2 	.word	0x0002cfb2
   14234:	0002d8a9 	.word	0x0002d8a9
   14238:	20009458 	.word	0x20009458
   1423c:	0002bfe4 	.word	0x0002bfe4
   14240:	0002d84f 	.word	0x0002d84f

00014244 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   14244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14248:	b085      	sub	sp, #20
   1424a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1424e:	4605      	mov	r5, r0
   14250:	460c      	mov	r4, r1
   14252:	4616      	mov	r6, r2
   14254:	461f      	mov	r7, r3
	int rc;
	const char *name_key = name;
   14256:	9003      	str	r0, [sp, #12]

	if (load_arg && load_arg->subtree &&
   14258:	f1b8 0f00 	cmp.w	r8, #0
   1425c:	d018      	beq.n	14290 <settings_call_set_handler+0x4c>
   1425e:	f8d8 1000 	ldr.w	r1, [r8]
   14262:	b181      	cbz	r1, 14286 <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   14264:	aa03      	add	r2, sp, #12
   14266:	f013 f9a8 	bl	275ba <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   1426a:	b960      	cbnz	r0, 14286 <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
   1426c:	2000      	movs	r0, #0
   1426e:	e007      	b.n	14280 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   14270:	f8d8 3008 	ldr.w	r3, [r8, #8]
   14274:	4632      	mov	r2, r6
   14276:	9300      	str	r3, [sp, #0]
   14278:	4621      	mov	r1, r4
   1427a:	463b      	mov	r3, r7
   1427c:	9803      	ldr	r0, [sp, #12]
   1427e:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   14280:	b005      	add	sp, #20
   14282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
   14286:	f8d8 9004 	ldr.w	r9, [r8, #4]
   1428a:	f1b9 0f00 	cmp.w	r9, #0
   1428e:	d1ef      	bne.n	14270 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
   14290:	4628      	mov	r0, r5
   14292:	a903      	add	r1, sp, #12
   14294:	f7ff ff72 	bl	1417c <settings_parse_and_lookup>
		if (!ch) {
   14298:	2800      	cmp	r0, #0
   1429a:	d0e7      	beq.n	1426c <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   1429c:	4632      	mov	r2, r6
   1429e:	f8d0 8008 	ldr.w	r8, [r0, #8]
   142a2:	463b      	mov	r3, r7
   142a4:	4621      	mov	r1, r4
   142a6:	9803      	ldr	r0, [sp, #12]
   142a8:	47c0      	blx	r8
		if (rc != 0) {
   142aa:	4606      	mov	r6, r0
   142ac:	2800      	cmp	r0, #0
   142ae:	d0dd      	beq.n	1426c <settings_call_set_handler+0x28>
   142b0:	4b08      	ldr	r3, [pc, #32]	; (142d4 <settings_call_set_handler+0x90>)
   142b2:	4c09      	ldr	r4, [pc, #36]	; (142d8 <settings_call_set_handler+0x94>)
   142b4:	4628      	mov	r0, r5
   142b6:	1ae4      	subs	r4, r4, r3
   142b8:	f7fe fb18 	bl	128ec <z_log_strdup>
   142bc:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("set-value failure. key: %s error(%d)",
   142be:	01a4      	lsls	r4, r4, #6
   142c0:	f044 0401 	orr.w	r4, r4, #1
   142c4:	4601      	mov	r1, r0
   142c6:	4623      	mov	r3, r4
   142c8:	4632      	mov	r2, r6
   142ca:	4804      	ldr	r0, [pc, #16]	; (142dc <settings_call_set_handler+0x98>)
   142cc:	f012 fd51 	bl	26d72 <log_2>
   142d0:	e7cc      	b.n	1426c <settings_call_set_handler+0x28>
   142d2:	bf00      	nop
   142d4:	0002bfe4 	.word	0x0002bfe4
   142d8:	0002c0ec 	.word	0x0002c0ec
   142dc:	0002d8c8 	.word	0x0002d8c8

000142e0 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   142e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   142e4:	4f23      	ldr	r7, [pc, #140]	; (14374 <settings_commit_subtree+0x94>)
{
   142e6:	4606      	mov	r6, r0
	rc = 0;
   142e8:	2500      	movs	r5, #0
   142ea:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   142ec:	4c22      	ldr	r4, [pc, #136]	; (14378 <settings_commit_subtree+0x98>)
   142ee:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1438c <settings_commit_subtree+0xac>
   142f2:	42bc      	cmp	r4, r7
   142f4:	d90c      	bls.n	14310 <settings_commit_subtree+0x30>
   142f6:	4921      	ldr	r1, [pc, #132]	; (1437c <settings_commit_subtree+0x9c>)
   142f8:	23f4      	movs	r3, #244	; 0xf4
   142fa:	4642      	mov	r2, r8
   142fc:	4820      	ldr	r0, [pc, #128]	; (14380 <settings_commit_subtree+0xa0>)
   142fe:	f012 fa0d 	bl	2671c <printk>
   14302:	4820      	ldr	r0, [pc, #128]	; (14384 <settings_commit_subtree+0xa4>)
   14304:	f012 fa0a 	bl	2671c <printk>
   14308:	21f4      	movs	r1, #244	; 0xf4
   1430a:	4640      	mov	r0, r8
   1430c:	f012 fcab 	bl	26c66 <assert_post_action>
   14310:	454c      	cmp	r4, r9
   14312:	d307      	bcc.n	14324 <settings_commit_subtree+0x44>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   14314:	4b1c      	ldr	r3, [pc, #112]	; (14388 <settings_commit_subtree+0xa8>)
   14316:	681c      	ldr	r4, [r3, #0]
   14318:	b10c      	cbz	r4, 1431e <settings_commit_subtree+0x3e>
   1431a:	3c14      	subs	r4, #20
   1431c:	b9a4      	cbnz	r4, 14348 <settings_commit_subtree+0x68>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   1431e:	4628      	mov	r0, r5
   14320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   14324:	b91e      	cbnz	r6, 1432e <settings_commit_subtree+0x4e>
		if (ch->h_commit) {
   14326:	68e3      	ldr	r3, [r4, #12]
   14328:	b94b      	cbnz	r3, 1433e <settings_commit_subtree+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1432a:	3414      	adds	r4, #20
   1432c:	e7e1      	b.n	142f2 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1432e:	2200      	movs	r2, #0
   14330:	4631      	mov	r1, r6
   14332:	6820      	ldr	r0, [r4, #0]
   14334:	f013 f941 	bl	275ba <settings_name_steq>
   14338:	2800      	cmp	r0, #0
   1433a:	d1f4      	bne.n	14326 <settings_commit_subtree+0x46>
   1433c:	e7f5      	b.n	1432a <settings_commit_subtree+0x4a>
			rc2 = ch->h_commit();
   1433e:	4798      	blx	r3
				rc = rc2;
   14340:	2d00      	cmp	r5, #0
   14342:	bf08      	it	eq
   14344:	4605      	moveq	r5, r0
   14346:	e7f0      	b.n	1432a <settings_commit_subtree+0x4a>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   14348:	b936      	cbnz	r6, 14358 <settings_commit_subtree+0x78>
		if (ch->h_commit) {
   1434a:	68e3      	ldr	r3, [r4, #12]
   1434c:	b963      	cbnz	r3, 14368 <settings_commit_subtree+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1434e:	f114 0f14 	cmn.w	r4, #20
   14352:	d0e4      	beq.n	1431e <settings_commit_subtree+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14354:	6964      	ldr	r4, [r4, #20]
   14356:	e7df      	b.n	14318 <settings_commit_subtree+0x38>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   14358:	2200      	movs	r2, #0
   1435a:	4631      	mov	r1, r6
   1435c:	6820      	ldr	r0, [r4, #0]
   1435e:	f013 f92c 	bl	275ba <settings_name_steq>
   14362:	2800      	cmp	r0, #0
   14364:	d1f1      	bne.n	1434a <settings_commit_subtree+0x6a>
   14366:	e7f2      	b.n	1434e <settings_commit_subtree+0x6e>
			rc2 = ch->h_commit();
   14368:	4798      	blx	r3
				rc = rc2;
   1436a:	2d00      	cmp	r5, #0
   1436c:	bf08      	it	eq
   1436e:	4605      	moveq	r5, r0
   14370:	e7ed      	b.n	1434e <settings_commit_subtree+0x6e>
   14372:	bf00      	nop
   14374:	0002bfe4 	.word	0x0002bfe4
   14378:	0002bf6c 	.word	0x0002bf6c
   1437c:	0002d881 	.word	0x0002d881
   14380:	0002cfb2 	.word	0x0002cfb2
   14384:	0002d8a9 	.word	0x0002d8a9
   14388:	20009458 	.word	0x20009458
   1438c:	0002d84f 	.word	0x0002d84f

00014390 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   14390:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   14392:	4c06      	ldr	r4, [pc, #24]	; (143ac <settings_subsys_init+0x1c>)
   14394:	7823      	ldrb	r3, [r4, #0]
   14396:	b93b      	cbnz	r3, 143a8 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   14398:	f7ff fee8 	bl	1416c <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   1439c:	f000 f864 	bl	14468 <settings_backend_init>

	if (!err) {
   143a0:	b908      	cbnz	r0, 143a6 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   143a2:	2301      	movs	r3, #1
   143a4:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   143a6:	bd10      	pop	{r4, pc}
		return 0;
   143a8:	2000      	movs	r0, #0
   143aa:	e7fc      	b.n	143a6 <settings_subsys_init+0x16>
   143ac:	2000a43a 	.word	0x2000a43a

000143b0 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   143b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   143b4:	4680      	mov	r8, r0
   143b6:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   143b8:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   143ba:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 14464 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
   143be:	3401      	adds	r4, #1
{
   143c0:	b098      	sub	sp, #96	; 0x60
	name_id = cf->last_name_id + 1;
   143c2:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   143c4:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   143c8:	1e65      	subs	r5, r4, #1
   143ca:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   143cc:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   143d0:	d045      	beq.n	1445e <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   143d2:	234a      	movs	r3, #74	; 0x4a
   143d4:	4629      	mov	r1, r5
   143d6:	aa05      	add	r2, sp, #20
   143d8:	4630      	mov	r0, r6
   143da:	f013 f8b9 	bl	27550 <nvs_read>
   143de:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   143e2:	343f      	adds	r4, #63	; 0x3f
   143e4:	b2a4      	uxth	r4, r4
   143e6:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   143e8:	4621      	mov	r1, r4
   143ea:	2301      	movs	r3, #1
   143ec:	4630      	mov	r0, r6
   143ee:	f10d 020b 	add.w	r2, sp, #11
   143f2:	f013 f8ad 	bl	27550 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   143f6:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   143f8:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   143fa:	dc03      	bgt.n	14404 <settings_nvs_load+0x54>
   143fc:	2800      	cmp	r0, #0
   143fe:	dc03      	bgt.n	14408 <settings_nvs_load+0x58>
{
   14400:	462c      	mov	r4, r5
   14402:	e7e1      	b.n	143c8 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   14404:	2800      	cmp	r0, #0
   14406:	dc16      	bgt.n	14436 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   14408:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   1440c:	42ab      	cmp	r3, r5
   1440e:	d109      	bne.n	14424 <settings_nvs_load+0x74>
				cf->last_name_id--;
   14410:	4642      	mov	r2, r8
   14412:	1e6b      	subs	r3, r5, #1
   14414:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   14418:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1441c:	2302      	movs	r3, #2
   1441e:	4630      	mov	r0, r6
   14420:	f7ff fa34 	bl	1388c <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   14424:	4629      	mov	r1, r5
   14426:	4630      	mov	r0, r6
   14428:	f013 f88e 	bl	27548 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   1442c:	4621      	mov	r1, r4
   1442e:	4630      	mov	r0, r6
   14430:	f013 f88a 	bl	27548 <nvs_delete>
			continue;
   14434:	e7e4      	b.n	14400 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   14436:	ab18      	add	r3, sp, #96	; 0x60
   14438:	441f      	add	r7, r3
   1443a:	2300      	movs	r3, #0
		ret = settings_call_set_handler(
   1443c:	4652      	mov	r2, sl
		name[rc1] = '\0';
   1443e:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   14442:	a805      	add	r0, sp, #20
   14444:	f8cd 9000 	str.w	r9, [sp]
   14448:	ab03      	add	r3, sp, #12
		read_fn_arg.fs = &cf->cf_nvs;
   1444a:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   1444c:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   14450:	f7ff fef8 	bl	14244 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   14454:	2800      	cmp	r0, #0
   14456:	d0d3      	beq.n	14400 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   14458:	b018      	add	sp, #96	; 0x60
   1445a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1445e:	2000      	movs	r0, #0
	return ret;
   14460:	e7fa      	b.n	14458 <settings_nvs_load+0xa8>
   14462:	bf00      	nop
   14464:	0002762d 	.word	0x0002762d

00014468 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   14468:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   1446a:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   1446c:	4669      	mov	r1, sp
   1446e:	2002      	movs	r0, #2
	uint32_t sector_cnt = 1;
   14470:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   14472:	f7ff fdaf 	bl	13fd4 <flash_area_open>
	if (rc) {
   14476:	4604      	mov	r4, r0
   14478:	2800      	cmp	r0, #0
   1447a:	d136      	bne.n	144ea <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   1447c:	2002      	movs	r0, #2
   1447e:	aa02      	add	r2, sp, #8
   14480:	a901      	add	r1, sp, #4
   14482:	f7ff fdbb 	bl	13ffc <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   14486:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   1448a:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   1448c:	d02d      	beq.n	144ea <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   1448e:	b138      	cbz	r0, 144a0 <settings_backend_init+0x38>
   14490:	340c      	adds	r4, #12
   14492:	d005      	beq.n	144a0 <settings_backend_init+0x38>
		k_panic();
   14494:	4040      	eors	r0, r0
   14496:	f380 8811 	msr	BASEPRI, r0
   1449a:	f04f 0004 	mov.w	r0, #4
   1449e:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   144a0:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   144a2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   144a6:	d223      	bcs.n	144f0 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   144a8:	2300      	movs	r3, #0
	size_t nvs_sector_size, nvs_size = 0;
   144aa:	4618      	mov	r0, r3
		if (nvs_size > fa->fa_size) {
   144ac:	9a00      	ldr	r2, [sp, #0]
   144ae:	6895      	ldr	r5, [r2, #8]
		nvs_size += nvs_sector_size;
   144b0:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   144b2:	4285      	cmp	r5, r0
   144b4:	b29c      	uxth	r4, r3
   144b6:	d303      	bcc.n	144c0 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   144b8:	3301      	adds	r3, #1
   144ba:	2b08      	cmp	r3, #8
   144bc:	d1f8      	bne.n	144b0 <settings_backend_init+0x48>
   144be:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   144c0:	4d0d      	ldr	r5, [pc, #52]	; (144f8 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   144c2:	6853      	ldr	r3, [r2, #4]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   144c4:	4628      	mov	r0, r5
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   144c6:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   144c8:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   144ca:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   144cc:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   144ce:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   144d0:	f013 f943 	bl	2775a <settings_nvs_backend_init>
	if (rc) {
   144d4:	4604      	mov	r4, r0
   144d6:	b940      	cbnz	r0, 144ea <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   144d8:	4e08      	ldr	r6, [pc, #32]	; (144fc <settings_backend_init+0x94>)
	settings_src_register(&cf->cf_store);
   144da:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   144dc:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   144de:	f7ff fddb 	bl	14098 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   144e2:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   144e4:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   144e6:	f7ff fde5 	bl	140b4 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   144ea:	4620      	mov	r0, r4
   144ec:	b004      	add	sp, #16
   144ee:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
   144f0:	f06f 0420 	mvn.w	r4, #32
   144f4:	e7f9      	b.n	144ea <settings_backend_init+0x82>
   144f6:	bf00      	nop
   144f8:	20009460 	.word	0x20009460
   144fc:	2000822c 	.word	0x2000822c

00014500 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   14500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14502:	4605      	mov	r5, r0
	__asm__ volatile(
   14504:	f04f 0320 	mov.w	r3, #32
   14508:	f3ef 8611 	mrs	r6, BASEPRI
   1450c:	f383 8811 	msr	BASEPRI, r3
   14510:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14514:	481e      	ldr	r0, [pc, #120]	; (14590 <pm_state_notify+0x90>)
   14516:	f00e fc5f 	bl	22dd8 <z_spin_lock_valid>
   1451a:	b968      	cbnz	r0, 14538 <pm_state_notify+0x38>
   1451c:	2381      	movs	r3, #129	; 0x81
   1451e:	4a1d      	ldr	r2, [pc, #116]	; (14594 <pm_state_notify+0x94>)
   14520:	491d      	ldr	r1, [pc, #116]	; (14598 <pm_state_notify+0x98>)
   14522:	481e      	ldr	r0, [pc, #120]	; (1459c <pm_state_notify+0x9c>)
   14524:	f012 f8fa 	bl	2671c <printk>
   14528:	4919      	ldr	r1, [pc, #100]	; (14590 <pm_state_notify+0x90>)
   1452a:	481d      	ldr	r0, [pc, #116]	; (145a0 <pm_state_notify+0xa0>)
   1452c:	f012 f8f6 	bl	2671c <printk>
   14530:	2181      	movs	r1, #129	; 0x81
   14532:	4818      	ldr	r0, [pc, #96]	; (14594 <pm_state_notify+0x94>)
   14534:	f012 fb97 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   14538:	4815      	ldr	r0, [pc, #84]	; (14590 <pm_state_notify+0x90>)
   1453a:	f00e fc69 	bl	22e10 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1453e:	4b19      	ldr	r3, [pc, #100]	; (145a4 <pm_state_notify+0xa4>)
   14540:	681c      	ldr	r4, [r3, #0]
   14542:	2c00      	cmp	r4, #0
   14544:	bf38      	it	cc
   14546:	2400      	movcc	r4, #0
   14548:	b15c      	cbz	r4, 14562 <pm_state_notify+0x62>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   1454a:	4f17      	ldr	r7, [pc, #92]	; (145a8 <pm_state_notify+0xa8>)
			callback = notifier->state_exit;
   1454c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   14550:	2d00      	cmp	r5, #0
   14552:	bf08      	it	eq
   14554:	4613      	moveq	r3, r2
		if (callback) {
   14556:	b10b      	cbz	r3, 1455c <pm_state_notify+0x5c>
			callback(z_power_state.state);
   14558:	7838      	ldrb	r0, [r7, #0]
   1455a:	4798      	blx	r3
   1455c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1455e:	2c00      	cmp	r4, #0
   14560:	d1f4      	bne.n	1454c <pm_state_notify+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14562:	480b      	ldr	r0, [pc, #44]	; (14590 <pm_state_notify+0x90>)
   14564:	f00e fc46 	bl	22df4 <z_spin_unlock_valid>
   14568:	b968      	cbnz	r0, 14586 <pm_state_notify+0x86>
   1456a:	23ac      	movs	r3, #172	; 0xac
   1456c:	4a09      	ldr	r2, [pc, #36]	; (14594 <pm_state_notify+0x94>)
   1456e:	490f      	ldr	r1, [pc, #60]	; (145ac <pm_state_notify+0xac>)
   14570:	480a      	ldr	r0, [pc, #40]	; (1459c <pm_state_notify+0x9c>)
   14572:	f012 f8d3 	bl	2671c <printk>
   14576:	4906      	ldr	r1, [pc, #24]	; (14590 <pm_state_notify+0x90>)
   14578:	480d      	ldr	r0, [pc, #52]	; (145b0 <pm_state_notify+0xb0>)
   1457a:	f012 f8cf 	bl	2671c <printk>
   1457e:	21ac      	movs	r1, #172	; 0xac
   14580:	4804      	ldr	r0, [pc, #16]	; (14594 <pm_state_notify+0x94>)
   14582:	f012 fb70 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   14586:	f386 8811 	msr	BASEPRI, r6
   1458a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   1458e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14590:	200094a0 	.word	0x200094a0
   14594:	0002d072 	.word	0x0002d072
   14598:	0002d0c4 	.word	0x0002d0c4
   1459c:	0002cfb2 	.word	0x0002cfb2
   145a0:	0002d0d9 	.word	0x0002d0d9
   145a4:	200094a4 	.word	0x200094a4
   145a8:	200094ac 	.word	0x200094ac
   145ac:	0002d098 	.word	0x0002d098
   145b0:	0002d0af 	.word	0x0002d0af

000145b4 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   145b4:	4b08      	ldr	r3, [pc, #32]	; (145d8 <pm_system_resume+0x24>)
{
   145b6:	b510      	push	{r4, lr}
	if (!post_ops_done) {
   145b8:	681c      	ldr	r4, [r3, #0]
   145ba:	b95c      	cbnz	r4, 145d4 <pm_system_resume+0x20>
		post_ops_done = 1;
   145bc:	2201      	movs	r2, #1
   145be:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
   145c0:	4b06      	ldr	r3, [pc, #24]	; (145dc <pm_system_resume+0x28>)
   145c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   145c6:	f012 fb82 	bl	26cce <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   145ca:	4620      	mov	r0, r4
	}
}
   145cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
   145d0:	f7ff bf96 	b.w	14500 <pm_state_notify>
}
   145d4:	bd10      	pop	{r4, pc}
   145d6:	bf00      	nop
   145d8:	2000823c 	.word	0x2000823c
   145dc:	200094ac 	.word	0x200094ac

000145e0 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   145e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   145e2:	b085      	sub	sp, #20
	z_power_state = pm_policy_next_state(ticks);
   145e4:	466e      	mov	r6, sp
   145e6:	4c1f      	ldr	r4, [pc, #124]	; (14664 <pm_system_suspend+0x84>)
   145e8:	4601      	mov	r1, r0
{
   145ea:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   145ec:	4630      	mov	r0, r6
   145ee:	f013 f8d0 	bl	27792 <pm_policy_next_state>
   145f2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   145f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   145fa:	7820      	ldrb	r0, [r4, #0]
   145fc:	b380      	cbz	r0, 14660 <pm_system_suspend+0x80>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
   145fe:	2000      	movs	r0, #0
   14600:	4b19      	ldr	r3, [pc, #100]	; (14668 <pm_system_suspend+0x88>)
   14602:	6018      	str	r0, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   14604:	1c6b      	adds	r3, r5, #1
   14606:	d01d      	beq.n	14644 <pm_system_suspend+0x64>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
   14608:	4291      	cmp	r1, r2
   1460a:	d20c      	bcs.n	14626 <pm_system_suspend+0x46>
   1460c:	4917      	ldr	r1, [pc, #92]	; (1466c <pm_system_suspend+0x8c>)
   1460e:	23bd      	movs	r3, #189	; 0xbd
   14610:	4a17      	ldr	r2, [pc, #92]	; (14670 <pm_system_suspend+0x90>)
   14612:	4818      	ldr	r0, [pc, #96]	; (14674 <pm_system_suspend+0x94>)
   14614:	f012 f882 	bl	2671c <printk>
   14618:	4817      	ldr	r0, [pc, #92]	; (14678 <pm_system_suspend+0x98>)
   1461a:	f012 f87f 	bl	2671c <printk>
   1461e:	21bd      	movs	r1, #189	; 0xbd
   14620:	4813      	ldr	r0, [pc, #76]	; (14670 <pm_system_suspend+0x90>)
   14622:	f012 fb20 	bl	26c66 <assert_post_action>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   14626:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1462a:	2100      	movs	r1, #0
   1462c:	68a7      	ldr	r7, [r4, #8]
   1462e:	4813      	ldr	r0, [pc, #76]	; (1467c <pm_system_suspend+0x9c>)
   14630:	2300      	movs	r3, #0
   14632:	fbe6 0107 	umlal	r0, r1, r6, r7
   14636:	4a12      	ldr	r2, [pc, #72]	; (14680 <pm_system_suspend+0xa0>)
   14638:	f7fb fe02 	bl	10240 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   1463c:	2101      	movs	r1, #1
   1463e:	1a28      	subs	r0, r5, r0
   14640:	f011 f92c 	bl	2589c <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   14644:	f00f fe2a 	bl	2429c <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   14648:	2001      	movs	r0, #1
   1464a:	f7ff ff59 	bl	14500 <pm_state_notify>
	pm_power_state_set(z_power_state);
   1464e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   14652:	f012 fb29 	bl	26ca8 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   14656:	f7ff ffad 	bl	145b4 <pm_system_resume>
	k_sched_unlock();
   1465a:	f010 f8b3 	bl	247c4 <k_sched_unlock>

	return z_power_state.state;
   1465e:	7820      	ldrb	r0, [r4, #0]
}
   14660:	b005      	add	sp, #20
   14662:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14664:	200094ac 	.word	0x200094ac
   14668:	2000823c 	.word	0x2000823c
   1466c:	0002d963 	.word	0x0002d963
   14670:	0002d8ed 	.word	0x0002d8ed
   14674:	0002cfb2 	.word	0x0002cfb2
   14678:	0002d9a3 	.word	0x0002d9a3
   1467c:	000f423f 	.word	0x000f423f
   14680:	000f4240 	.word	0x000f4240

00014684 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   14684:	b510      	push	{r4, lr}
   14686:	4807      	ldr	r0, [pc, #28]	; (146a4 <uart_console_init+0x20>)
   14688:	f00d fed8 	bl	2243c <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
   1468c:	4c06      	ldr	r4, [pc, #24]	; (146a8 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   1468e:	4b07      	ldr	r3, [pc, #28]	; (146ac <uart_console_init+0x28>)
   14690:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   14692:	4620      	mov	r0, r4
   14694:	f002 fb42 	bl	16d1c <__stdout_hook_install>
	__printk_hook_install(console_out);
   14698:	4620      	mov	r0, r4
   1469a:	f7fc ff97 	bl	115cc <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   1469e:	2000      	movs	r0, #0
   146a0:	bd10      	pop	{r4, pc}
   146a2:	bf00      	nop
   146a4:	0002cdef 	.word	0x0002cdef
   146a8:	000146b1 	.word	0x000146b1
   146ac:	200094b8 	.word	0x200094b8

000146b0 <console_out>:
	if ('\n' == c) {
   146b0:	280a      	cmp	r0, #10
{
   146b2:	b538      	push	{r3, r4, r5, lr}
   146b4:	4604      	mov	r4, r0
   146b6:	4d07      	ldr	r5, [pc, #28]	; (146d4 <console_out+0x24>)
	if ('\n' == c) {
   146b8:	d104      	bne.n	146c4 <console_out+0x14>
   146ba:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   146bc:	6883      	ldr	r3, [r0, #8]
   146be:	210d      	movs	r1, #13
   146c0:	69db      	ldr	r3, [r3, #28]
   146c2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   146c4:	6828      	ldr	r0, [r5, #0]
   146c6:	6883      	ldr	r3, [r0, #8]
   146c8:	b2e1      	uxtb	r1, r4
   146ca:	69db      	ldr	r3, [r3, #28]
   146cc:	4798      	blx	r3
}
   146ce:	4620      	mov	r0, r4
   146d0:	bd38      	pop	{r3, r4, r5, pc}
   146d2:	bf00      	nop
   146d4:	200094b8 	.word	0x200094b8

000146d8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   146d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   146dc:	4c0e      	ldr	r4, [pc, #56]	; (14718 <onoff_start+0x40>)
{
   146de:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
   146e0:	1b05      	subs	r5, r0, r4
   146e2:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   146e6:	250c      	movs	r5, #12
   146e8:	435d      	muls	r5, r3
   146ea:	f105 0088 	add.w	r0, r5, #136	; 0x88
{
   146ee:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   146f0:	4420      	add	r0, r4
   146f2:	2140      	movs	r1, #64	; 0x40
   146f4:	f013 f852 	bl	2779c <set_starting_state>
	if (err < 0) {
   146f8:	1e01      	subs	r1, r0, #0
   146fa:	db08      	blt.n	1470e <onoff_start+0x36>
	subdata->cb = cb;
   146fc:	4b07      	ldr	r3, [pc, #28]	; (1471c <onoff_start+0x44>)
   146fe:	442c      	add	r4, r5
	subdata->user_data = user_data;
   14700:	e9c4 3620 	strd	r3, r6, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   14704:	4b06      	ldr	r3, [pc, #24]	; (14720 <onoff_start+0x48>)
   14706:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   14708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   1470c:	4718      	bx	r3
		notify(mgr, err);
   1470e:	4638      	mov	r0, r7
   14710:	4633      	mov	r3, r6
}
   14712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   14716:	4718      	bx	r3
   14718:	200094d0 	.word	0x200094d0
   1471c:	000277ff 	.word	0x000277ff
   14720:	0002c304 	.word	0x0002c304

00014724 <get_status>:
{
   14724:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   14726:	b2cc      	uxtb	r4, r1
   14728:	2c03      	cmp	r4, #3
{
   1472a:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1472c:	d909      	bls.n	14742 <get_status+0x1e>
   1472e:	4909      	ldr	r1, [pc, #36]	; (14754 <get_status+0x30>)
   14730:	4809      	ldr	r0, [pc, #36]	; (14758 <get_status+0x34>)
   14732:	237e      	movs	r3, #126	; 0x7e
   14734:	4a09      	ldr	r2, [pc, #36]	; (1475c <get_status+0x38>)
   14736:	f011 fff1 	bl	2671c <printk>
   1473a:	217e      	movs	r1, #126	; 0x7e
   1473c:	4807      	ldr	r0, [pc, #28]	; (1475c <get_status+0x38>)
   1473e:	f012 fa92 	bl	26c66 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   14742:	210c      	movs	r1, #12
   14744:	692b      	ldr	r3, [r5, #16]
   14746:	fb04 3401 	mla	r4, r4, r1, r3
   1474a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
   1474e:	f000 0007 	and.w	r0, r0, #7
   14752:	bd38      	pop	{r3, r4, r5, pc}
   14754:	0002da0b 	.word	0x0002da0b
   14758:	0002cfb2 	.word	0x0002cfb2
   1475c:	0002d9ce 	.word	0x0002d9ce

00014760 <stop>:
{
   14760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14762:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   14764:	2c03      	cmp	r4, #3
{
   14766:	4605      	mov	r5, r0
   14768:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1476a:	6907      	ldr	r7, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1476c:	d90b      	bls.n	14786 <stop+0x26>
   1476e:	491a      	ldr	r1, [pc, #104]	; (147d8 <stop+0x78>)
   14770:	481a      	ldr	r0, [pc, #104]	; (147dc <stop+0x7c>)
   14772:	f240 1353 	movw	r3, #339	; 0x153
   14776:	4a1a      	ldr	r2, [pc, #104]	; (147e0 <stop+0x80>)
   14778:	f011 ffd0 	bl	2671c <printk>
   1477c:	f240 1153 	movw	r1, #339	; 0x153
   14780:	4817      	ldr	r0, [pc, #92]	; (147e0 <stop+0x80>)
   14782:	f012 fa70 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   14786:	f04f 0320 	mov.w	r3, #32
   1478a:	f3ef 8211 	mrs	r2, BASEPRI
   1478e:	f383 8811 	msr	BASEPRI, r3
   14792:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   14796:	230c      	movs	r3, #12
   14798:	fb03 7104 	mla	r1, r3, r4, r7
   1479c:	f8d1 1088 	ldr.w	r1, [r1, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   147a0:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   147a4:	d001      	beq.n	147aa <stop+0x4a>
   147a6:	428e      	cmp	r6, r1
   147a8:	d112      	bne.n	147d0 <stop+0x70>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   147aa:	2101      	movs	r1, #1
	int err = 0;
   147ac:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
   147ae:	fb03 7304 	mla	r3, r3, r4, r7
   147b2:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	__asm__ volatile(
   147b6:	f382 8811 	msr	BASEPRI, r2
   147ba:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   147be:	b930      	cbnz	r0, 147ce <stop+0x6e>
	get_sub_config(dev, type)->stop();
   147c0:	230c      	movs	r3, #12
   147c2:	6869      	ldr	r1, [r5, #4]
   147c4:	fb03 1404 	mla	r4, r3, r4, r1
   147c8:	6863      	ldr	r3, [r4, #4]
   147ca:	4798      	blx	r3
	return 0;
   147cc:	2000      	movs	r0, #0
}
   147ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   147d0:	f04f 30ff 	mov.w	r0, #4294967295
   147d4:	e7ef      	b.n	147b6 <stop+0x56>
   147d6:	bf00      	nop
   147d8:	0002da0b 	.word	0x0002da0b
   147dc:	0002cfb2 	.word	0x0002cfb2
   147e0:	0002d9ce 	.word	0x0002d9ce

000147e4 <onoff_stop>:
{
   147e4:	b570      	push	{r4, r5, r6, lr}
   147e6:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   147e8:	4906      	ldr	r1, [pc, #24]	; (14804 <onoff_stop+0x20>)
{
   147ea:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   147ec:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   147ee:	1149      	asrs	r1, r1, #5
   147f0:	2240      	movs	r2, #64	; 0x40
   147f2:	4805      	ldr	r0, [pc, #20]	; (14808 <onoff_stop+0x24>)
   147f4:	f7ff ffb4 	bl	14760 <stop>
	notify(mgr, res);
   147f8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   147fa:	4601      	mov	r1, r0
	notify(mgr, res);
   147fc:	4620      	mov	r0, r4
}
   147fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   14802:	4718      	bx	r3
   14804:	200094d0 	.word	0x200094d0
   14808:	200083c4 	.word	0x200083c4

0001480c <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   1480c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14810:	2200      	movs	r2, #0
   14812:	2101      	movs	r1, #1
{
   14814:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14816:	2005      	movs	r0, #5
   14818:	f001 fcc8 	bl	161ac <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1481c:	2005      	movs	r0, #5
   1481e:	f001 fca7 	bl	16170 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   14822:	4811      	ldr	r0, [pc, #68]	; (14868 <clk_init+0x5c>)
   14824:	f00c fdf4 	bl	21410 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   14828:	4b10      	ldr	r3, [pc, #64]	; (1486c <clk_init+0x60>)
   1482a:	4298      	cmp	r0, r3
   1482c:	d119      	bne.n	14862 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1482e:	f00c fe13 	bl	21458 <nrfx_clock_enable>
   14832:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   14834:	f04f 080c 	mov.w	r8, #12
   14838:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1483a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 14870 <clk_init+0x64>
						get_sub_data(dev, i);
   1483e:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   14840:	4649      	mov	r1, r9
   14842:	eb05 1044 	add.w	r0, r5, r4, lsl #5
   14846:	f011 ffc4 	bl	267d2 <onoff_manager_init>
		if (err < 0) {
   1484a:	2800      	cmp	r0, #0
   1484c:	db07      	blt.n	1485e <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1484e:	fb08 5504 	mla	r5, r8, r4, r5
   14852:	3401      	adds	r4, #1
	for (enum clock_control_nrf_type i = 0;
   14854:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   14856:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
	for (enum clock_control_nrf_type i = 0;
   1485a:	d1f0      	bne.n	1483e <clk_init+0x32>
	}

	return 0;
   1485c:	2000      	movs	r0, #0
}
   1485e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   14862:	f06f 0004 	mvn.w	r0, #4
   14866:	e7fa      	b.n	1485e <clk_init+0x52>
   14868:	000148ad 	.word	0x000148ad
   1486c:	0bad0000 	.word	0x0bad0000
   14870:	0002c334 	.word	0x0002c334

00014874 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   14874:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   14876:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   14878:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   1487a:	434b      	muls	r3, r1
   1487c:	4809      	ldr	r0, [pc, #36]	; (148a4 <clkstarted_handle.constprop.0+0x30>)
static void clkstarted_handle(const struct device *dev,
   1487e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   14880:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   14882:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
   14884:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   14888:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1488a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   1488e:	f012 ffa3 	bl	277d8 <set_on_state>
	if (callback) {
   14892:	b12d      	cbz	r5, 148a0 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
   14894:	4632      	mov	r2, r6
   14896:	462b      	mov	r3, r5
}
   14898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1489c:	4802      	ldr	r0, [pc, #8]	; (148a8 <clkstarted_handle.constprop.0+0x34>)
   1489e:	4718      	bx	r3
}
   148a0:	bd70      	pop	{r4, r5, r6, pc}
   148a2:	bf00      	nop
   148a4:	200094d0 	.word	0x200094d0
   148a8:	200083c4 	.word	0x200083c4

000148ac <clock_event_handler>:
{
   148ac:	b508      	push	{r3, lr}
   148ae:	2805      	cmp	r0, #5
   148b0:	d822      	bhi.n	148f8 <clock_event_handler+0x4c>
   148b2:	e8df f000 	tbb	[pc, r0]
   148b6:	1103      	.short	0x1103
   148b8:	0d0f1321 	.word	0x0d0f1321
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   148bc:	4b14      	ldr	r3, [pc, #80]	; (14910 <clock_event_handler+0x64>)
   148be:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   148c2:	f010 0007 	ands.w	r0, r0, #7
   148c6:	d121      	bne.n	1490c <clock_event_handler+0x60>
}
   148c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   148cc:	f7ff bfd2 	b.w	14874 <clkstarted_handle.constprop.0>
   148d0:	2002      	movs	r0, #2
   148d2:	e7f9      	b.n	148c8 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   148d4:	2003      	movs	r0, #3
   148d6:	e7f7      	b.n	148c8 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   148d8:	2001      	movs	r0, #1
   148da:	e7f5      	b.n	148c8 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
   148dc:	490d      	ldr	r1, [pc, #52]	; (14914 <clock_event_handler+0x68>)
   148de:	f240 2366 	movw	r3, #614	; 0x266
   148e2:	4a0d      	ldr	r2, [pc, #52]	; (14918 <clock_event_handler+0x6c>)
   148e4:	480d      	ldr	r0, [pc, #52]	; (1491c <clock_event_handler+0x70>)
   148e6:	f011 ff19 	bl	2671c <printk>
   148ea:	f240 2166 	movw	r1, #614	; 0x266
}
   148ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   148f2:	4809      	ldr	r0, [pc, #36]	; (14918 <clock_event_handler+0x6c>)
   148f4:	f012 b9b7 	b.w	26c66 <assert_post_action>
   148f8:	4906      	ldr	r1, [pc, #24]	; (14914 <clock_event_handler+0x68>)
   148fa:	f240 236a 	movw	r3, #618	; 0x26a
   148fe:	4a06      	ldr	r2, [pc, #24]	; (14918 <clock_event_handler+0x6c>)
   14900:	4806      	ldr	r0, [pc, #24]	; (1491c <clock_event_handler+0x70>)
   14902:	f011 ff0b 	bl	2671c <printk>
   14906:	f240 216a 	movw	r1, #618	; 0x26a
   1490a:	e7f0      	b.n	148ee <clock_event_handler+0x42>
}
   1490c:	bd08      	pop	{r3, pc}
   1490e:	bf00      	nop
   14910:	200094d0 	.word	0x200094d0
   14914:	0002dee4 	.word	0x0002dee4
   14918:	0002d9ce 	.word	0x0002d9ce
   1491c:	0002cfb2 	.word	0x0002cfb2

00014920 <generic_hfclk_start>:
{
   14920:	b508      	push	{r3, lr}
	__asm__ volatile(
   14922:	f04f 0320 	mov.w	r3, #32
   14926:	f3ef 8111 	mrs	r1, BASEPRI
   1492a:	f383 8811 	msr	BASEPRI, r3
   1492e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   14932:	4a11      	ldr	r2, [pc, #68]	; (14978 <generic_hfclk_start+0x58>)
   14934:	6813      	ldr	r3, [r2, #0]
   14936:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1493a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1493e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   14940:	d00b      	beq.n	1495a <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   14942:	4a0e      	ldr	r2, [pc, #56]	; (1497c <generic_hfclk_start+0x5c>)
   14944:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   14948:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1494c:	f013 0301 	ands.w	r3, r3, #1
   14950:	d003      	beq.n	1495a <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   14952:	480b      	ldr	r0, [pc, #44]	; (14980 <generic_hfclk_start+0x60>)
   14954:	f012 ff40 	bl	277d8 <set_on_state>
			already_started = true;
   14958:	2301      	movs	r3, #1
	__asm__ volatile(
   1495a:	f381 8811 	msr	BASEPRI, r1
   1495e:	f3bf 8f6f 	isb	sy
	if (already_started) {
   14962:	b123      	cbz	r3, 1496e <generic_hfclk_start+0x4e>
}
   14964:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   14968:	2000      	movs	r0, #0
   1496a:	f7ff bf83 	b.w	14874 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1496e:	2001      	movs	r0, #1
}
   14970:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14974:	f00c bd96 	b.w	214a4 <nrfx_clock_start>
   14978:	20009580 	.word	0x20009580
   1497c:	40005000 	.word	0x40005000
   14980:	20009558 	.word	0x20009558

00014984 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14984:	4b07      	ldr	r3, [pc, #28]	; (149a4 <generic_hfclk_stop+0x20>)
   14986:	e8d3 2fef 	ldaex	r2, [r3]
   1498a:	f022 0102 	bic.w	r1, r2, #2
   1498e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   14992:	2800      	cmp	r0, #0
   14994:	d1f7      	bne.n	14986 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   14996:	07d3      	lsls	r3, r2, #31
   14998:	d402      	bmi.n	149a0 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1499a:	2001      	movs	r0, #1
   1499c:	f00c bdf8 	b.w	21590 <nrfx_clock_stop>
}
   149a0:	4770      	bx	lr
   149a2:	bf00      	nop
   149a4:	20009580 	.word	0x20009580

000149a8 <api_blocking_start>:
{
   149a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   149aa:	2200      	movs	r2, #0
   149ac:	2301      	movs	r3, #1
   149ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
   149b2:	ab04      	add	r3, sp, #16
   149b4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   149b8:	4a09      	ldr	r2, [pc, #36]	; (149e0 <api_blocking_start+0x38>)
   149ba:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   149bc:	f8cd d000 	str.w	sp, [sp]
   149c0:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   149c4:	f012 ff39 	bl	2783a <api_start>
	if (err < 0) {
   149c8:	2800      	cmp	r0, #0
   149ca:	db05      	blt.n	149d8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   149cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   149d0:	2300      	movs	r3, #0
   149d2:	4668      	mov	r0, sp
   149d4:	f00e fda6 	bl	23524 <z_impl_k_sem_take>
}
   149d8:	b007      	add	sp, #28
   149da:	f85d fb04 	ldr.w	pc, [sp], #4
   149de:	bf00      	nop
   149e0:	00027835 	.word	0x00027835

000149e4 <z_nrf_clock_control_lf_on>:
{
   149e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   149e8:	2201      	movs	r2, #1
   149ea:	4606      	mov	r6, r0
   149ec:	4945      	ldr	r1, [pc, #276]	; (14b04 <z_nrf_clock_control_lf_on+0x120>)
   149ee:	e8d1 3fef 	ldaex	r3, [r1]
   149f2:	e8c1 2fe0 	stlex	r0, r2, [r1]
   149f6:	2800      	cmp	r0, #0
   149f8:	d1f9      	bne.n	149ee <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   149fa:	b9a3      	cbnz	r3, 14a26 <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   149fc:	4942      	ldr	r1, [pc, #264]	; (14b08 <z_nrf_clock_control_lf_on+0x124>)
		err = onoff_request(mgr, &cli);
   149fe:	4843      	ldr	r0, [pc, #268]	; (14b0c <z_nrf_clock_control_lf_on+0x128>)
   14a00:	604b      	str	r3, [r1, #4]
   14a02:	60cb      	str	r3, [r1, #12]
   14a04:	608a      	str	r2, [r1, #8]
   14a06:	f7fd f835 	bl	11a74 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   14a0a:	2800      	cmp	r0, #0
   14a0c:	da0b      	bge.n	14a26 <z_nrf_clock_control_lf_on+0x42>
   14a0e:	4940      	ldr	r1, [pc, #256]	; (14b10 <z_nrf_clock_control_lf_on+0x12c>)
   14a10:	4840      	ldr	r0, [pc, #256]	; (14b14 <z_nrf_clock_control_lf_on+0x130>)
   14a12:	f240 2326 	movw	r3, #550	; 0x226
   14a16:	4a40      	ldr	r2, [pc, #256]	; (14b18 <z_nrf_clock_control_lf_on+0x134>)
   14a18:	f011 fe80 	bl	2671c <printk>
   14a1c:	f240 2126 	movw	r1, #550	; 0x226
   14a20:	483d      	ldr	r0, [pc, #244]	; (14b18 <z_nrf_clock_control_lf_on+0x134>)
   14a22:	f012 f920 	bl	26c66 <assert_post_action>
	switch (start_mode) {
   14a26:	b38e      	cbz	r6, 14a8c <z_nrf_clock_control_lf_on+0xa8>
   14a28:	1e73      	subs	r3, r6, #1
   14a2a:	2b01      	cmp	r3, #1
   14a2c:	d855      	bhi.n	14ada <z_nrf_clock_control_lf_on+0xf6>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   14a2e:	2e01      	cmp	r6, #1
   14a30:	d106      	bne.n	14a40 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   14a32:	4b3a      	ldr	r3, [pc, #232]	; (14b1c <z_nrf_clock_control_lf_on+0x138>)
   14a34:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   14a38:	f003 0303 	and.w	r3, r3, #3
   14a3c:	2b02      	cmp	r3, #2
   14a3e:	d025      	beq.n	14a8c <z_nrf_clock_control_lf_on+0xa8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14a40:	f016 ff88 	bl	2b954 <k_is_in_isr>
   14a44:	4604      	mov	r4, r0
   14a46:	b918      	cbnz	r0, 14a50 <z_nrf_clock_control_lf_on+0x6c>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   14a48:	4b35      	ldr	r3, [pc, #212]	; (14b20 <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
   14a4a:	781b      	ldrb	r3, [r3, #0]
   14a4c:	2b00      	cmp	r3, #0
   14a4e:	d152      	bne.n	14af6 <z_nrf_clock_control_lf_on+0x112>
	__asm__ volatile(
   14a50:	f04f 0320 	mov.w	r3, #32
   14a54:	f3ef 8711 	mrs	r7, BASEPRI
   14a58:	f383 8811 	msr	BASEPRI, r3
   14a5c:	f3bf 8f6f 	isb	sy
   14a60:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14a62:	4d2e      	ldr	r5, [pc, #184]	; (14b1c <z_nrf_clock_control_lf_on+0x138>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14a64:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 14b30 <z_nrf_clock_control_lf_on+0x14c>
   14a68:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14a6a:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14a6e:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   14a72:	03d2      	lsls	r2, r2, #15
   14a74:	d50c      	bpl.n	14a90 <z_nrf_clock_control_lf_on+0xac>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   14a76:	f003 0303 	and.w	r3, r3, #3
   14a7a:	2b02      	cmp	r3, #2
   14a7c:	d001      	beq.n	14a82 <z_nrf_clock_control_lf_on+0x9e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   14a7e:	2e01      	cmp	r6, #1
   14a80:	d106      	bne.n	14a90 <z_nrf_clock_control_lf_on+0xac>
	if (isr_mode) {
   14a82:	b334      	cbz	r4, 14ad2 <z_nrf_clock_control_lf_on+0xee>
	__asm__ volatile(
   14a84:	f387 8811 	msr	BASEPRI, r7
   14a88:	f3bf 8f6f 	isb	sy
}
   14a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   14a90:	b1d4      	cbz	r4, 14ac8 <z_nrf_clock_control_lf_on+0xe4>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   14a92:	4638      	mov	r0, r7
   14a94:	f001 fc00 	bl	16298 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   14a98:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   14a9c:	b2db      	uxtb	r3, r3
   14a9e:	2b01      	cmp	r3, #1
   14aa0:	d1e3      	bne.n	14a6a <z_nrf_clock_control_lf_on+0x86>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14aa2:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   14aa6:	2a00      	cmp	r2, #0
   14aa8:	d0df      	beq.n	14a6a <z_nrf_clock_control_lf_on+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14aaa:	2200      	movs	r2, #0
   14aac:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   14ab0:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   14ab4:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14ab6:	2120      	movs	r1, #32
   14ab8:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   14abc:	4a19      	ldr	r2, [pc, #100]	; (14b24 <z_nrf_clock_control_lf_on+0x140>)
   14abe:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14ac2:	4a19      	ldr	r2, [pc, #100]	; (14b28 <z_nrf_clock_control_lf_on+0x144>)
   14ac4:	6013      	str	r3, [r2, #0]
}
   14ac6:	e7d0      	b.n	14a6a <z_nrf_clock_control_lf_on+0x86>
	return z_impl_k_sleep(timeout);
   14ac8:	2100      	movs	r1, #0
   14aca:	2021      	movs	r0, #33	; 0x21
   14acc:	f010 fba6 	bl	2521c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   14ad0:	e7e2      	b.n	14a98 <z_nrf_clock_control_lf_on+0xb4>
    p_reg->INTENSET = mask;
   14ad2:	2302      	movs	r3, #2
   14ad4:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   14ad8:	e7d8      	b.n	14a8c <z_nrf_clock_control_lf_on+0xa8>
		__ASSERT_NO_MSG(false);
   14ada:	f44f 730e 	mov.w	r3, #568	; 0x238
   14ade:	4913      	ldr	r1, [pc, #76]	; (14b2c <z_nrf_clock_control_lf_on+0x148>)
   14ae0:	480c      	ldr	r0, [pc, #48]	; (14b14 <z_nrf_clock_control_lf_on+0x130>)
   14ae2:	4a0d      	ldr	r2, [pc, #52]	; (14b18 <z_nrf_clock_control_lf_on+0x134>)
   14ae4:	f011 fe1a 	bl	2671c <printk>
}
   14ae8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   14aec:	f44f 710e 	mov.w	r1, #568	; 0x238
   14af0:	4809      	ldr	r0, [pc, #36]	; (14b18 <z_nrf_clock_control_lf_on+0x134>)
   14af2:	f012 b8b8 	b.w	26c66 <assert_post_action>
    p_reg->INTENCLR = mask;
   14af6:	2202      	movs	r2, #2
   14af8:	4b08      	ldr	r3, [pc, #32]	; (14b1c <z_nrf_clock_control_lf_on+0x138>)
	int key = isr_mode ? irq_lock() : 0;
   14afa:	4607      	mov	r7, r0
   14afc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   14b00:	e7af      	b.n	14a62 <z_nrf_clock_control_lf_on+0x7e>
   14b02:	bf00      	nop
   14b04:	20009584 	.word	0x20009584
   14b08:	200094c0 	.word	0x200094c0
   14b0c:	200094f0 	.word	0x200094f0
   14b10:	0002da2f 	.word	0x0002da2f
   14b14:	0002cfb2 	.word	0x0002cfb2
   14b18:	0002d9ce 	.word	0x0002d9ce
   14b1c:	40005000 	.word	0x40005000
   14b20:	2000a92f 	.word	0x2000a92f
   14b24:	e000e100 	.word	0xe000e100
   14b28:	40005008 	.word	0x40005008
   14b2c:	0002dee4 	.word	0x0002dee4
   14b30:	40005104 	.word	0x40005104

00014b34 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   14b34:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_rpmsg_platform_init();
   14b36:	f000 f95b 	bl	14df0 <bt_rpmsg_platform_init>
	if (err < 0) {
   14b3a:	1e04      	subs	r4, r0, #0
   14b3c:	da0c      	bge.n	14b58 <bt_rpmsg_init+0x24>
		BT_ERR("Failed to initialize BT RPMSG (err %d)", err);
   14b3e:	4621      	mov	r1, r4
   14b40:	4a0d      	ldr	r2, [pc, #52]	; (14b78 <bt_rpmsg_init+0x44>)
   14b42:	4b0e      	ldr	r3, [pc, #56]	; (14b7c <bt_rpmsg_init+0x48>)
   14b44:	480e      	ldr	r0, [pc, #56]	; (14b80 <bt_rpmsg_init+0x4c>)
   14b46:	1ad2      	subs	r2, r2, r3
   14b48:	08d2      	lsrs	r2, r2, #3
   14b4a:	0192      	lsls	r2, r2, #6
   14b4c:	f042 0201 	orr.w	r2, r2, #1
		return err;
	}

	err = bt_hci_driver_register(&drv);
	if (err < 0) {
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
   14b50:	f012 f8fb 	bl	26d4a <log_1>
	}

	return err;
}
   14b54:	4620      	mov	r0, r4
   14b56:	bd10      	pop	{r4, pc}
	err = bt_hci_driver_register(&drv);
   14b58:	480a      	ldr	r0, [pc, #40]	; (14b84 <bt_rpmsg_init+0x50>)
   14b5a:	f003 fd4d 	bl	185f8 <bt_hci_driver_register>
	if (err < 0) {
   14b5e:	1e04      	subs	r4, r0, #0
   14b60:	daf8      	bge.n	14b54 <bt_rpmsg_init+0x20>
   14b62:	4a05      	ldr	r2, [pc, #20]	; (14b78 <bt_rpmsg_init+0x44>)
   14b64:	4b05      	ldr	r3, [pc, #20]	; (14b7c <bt_rpmsg_init+0x48>)
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
   14b66:	4621      	mov	r1, r4
   14b68:	1ad2      	subs	r2, r2, r3
   14b6a:	08d2      	lsrs	r2, r2, #3
   14b6c:	0192      	lsls	r2, r2, #6
   14b6e:	4806      	ldr	r0, [pc, #24]	; (14b88 <bt_rpmsg_init+0x54>)
   14b70:	f042 0201 	orr.w	r2, r2, #1
   14b74:	e7ec      	b.n	14b50 <bt_rpmsg_init+0x1c>
   14b76:	bf00      	nop
   14b78:	0002c024 	.word	0x0002c024
   14b7c:	0002bfe4 	.word	0x0002bfe4
   14b80:	0002da6d 	.word	0x0002da6d
   14b84:	0002c340 	.word	0x0002c340
   14b88:	0002da94 	.word	0x0002da94

00014b8c <bt_rpmsg_send>:
{
   14b8c:	b510      	push	{r4, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14b8e:	7d01      	ldrb	r1, [r0, #20]
   14b90:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   14b92:	2902      	cmp	r1, #2
   14b94:	d012      	beq.n	14bbc <bt_rpmsg_send+0x30>
   14b96:	2904      	cmp	r1, #4
   14b98:	d00f      	beq.n	14bba <bt_rpmsg_send+0x2e>
   14b9a:	b309      	cbz	r1, 14be0 <bt_rpmsg_send+0x54>
   14b9c:	4a11      	ldr	r2, [pc, #68]	; (14be4 <bt_rpmsg_send+0x58>)
   14b9e:	4b12      	ldr	r3, [pc, #72]	; (14be8 <bt_rpmsg_send+0x5c>)
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
   14ba0:	4812      	ldr	r0, [pc, #72]	; (14bec <bt_rpmsg_send+0x60>)
   14ba2:	1ad2      	subs	r2, r2, r3
   14ba4:	08d2      	lsrs	r2, r2, #3
   14ba6:	0192      	lsls	r2, r2, #6
   14ba8:	f042 0201 	orr.w	r2, r2, #1
		BT_ERR("Failed to send (err %d)", err);
   14bac:	f012 f8cd 	bl	26d4a <log_1>
	net_buf_unref(buf);
   14bb0:	4620      	mov	r0, r4
   14bb2:	f00b fa79 	bl	200a8 <net_buf_unref>
}
   14bb6:	2000      	movs	r0, #0
   14bb8:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
   14bba:	2105      	movs	r1, #5
 * @param buf Buffer to update.
 * @param val 8-bit value to be pushed to the buffer.
 */
static inline void net_buf_push_u8(struct net_buf *buf, uint8_t val)
{
	net_buf_simple_push_u8(&buf->b, val);
   14bbc:	f104 0008 	add.w	r0, r4, #8
   14bc0:	f015 fd32 	bl	2a628 <net_buf_simple_push_u8>
	err = bt_rpmsg_platform_send(buf);
   14bc4:	4620      	mov	r0, r4
   14bc6:	f000 f939 	bl	14e3c <bt_rpmsg_platform_send>
	if (err < 0) {
   14bca:	1e01      	subs	r1, r0, #0
   14bcc:	daf0      	bge.n	14bb0 <bt_rpmsg_send+0x24>
   14bce:	4a05      	ldr	r2, [pc, #20]	; (14be4 <bt_rpmsg_send+0x58>)
   14bd0:	4b05      	ldr	r3, [pc, #20]	; (14be8 <bt_rpmsg_send+0x5c>)
		BT_ERR("Failed to send (err %d)", err);
   14bd2:	4807      	ldr	r0, [pc, #28]	; (14bf0 <bt_rpmsg_send+0x64>)
   14bd4:	1ad2      	subs	r2, r2, r3
   14bd6:	08d2      	lsrs	r2, r2, #3
   14bd8:	0192      	lsls	r2, r2, #6
   14bda:	f042 0201 	orr.w	r2, r2, #1
   14bde:	e7e5      	b.n	14bac <bt_rpmsg_send+0x20>
	switch (bt_buf_get_type(buf)) {
   14be0:	2101      	movs	r1, #1
   14be2:	e7eb      	b.n	14bbc <bt_rpmsg_send+0x30>
   14be4:	0002c024 	.word	0x0002c024
   14be8:	0002bfe4 	.word	0x0002bfe4
   14bec:	0002dabe 	.word	0x0002dabe
   14bf0:	0002dace 	.word	0x0002dace

00014bf4 <bt_rpmsg_rx>:
{
   14bf4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pkt_indicator = *data++;
   14bf8:	4680      	mov	r8, r0
{
   14bfa:	4606      	mov	r6, r0
	pkt_indicator = *data++;
   14bfc:	f818 0b01 	ldrb.w	r0, [r8], #1
{
   14c00:	460d      	mov	r5, r1
	switch (pkt_indicator) {
   14c02:	2804      	cmp	r0, #4
	remaining -= sizeof(pkt_indicator);
   14c04:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   14c08:	d010      	beq.n	14c2c <bt_rpmsg_rx+0x38>
   14c0a:	2805      	cmp	r0, #5
   14c0c:	f000 8093 	beq.w	14d36 <bt_rpmsg_rx+0x142>
   14c10:	2802      	cmp	r0, #2
   14c12:	f040 80c9 	bne.w	14da8 <bt_rpmsg_rx+0x1b4>
	if (remaining < sizeof(hdr)) {
   14c16:	2b03      	cmp	r3, #3
   14c18:	d85c      	bhi.n	14cd4 <bt_rpmsg_rx+0xe0>
   14c1a:	4969      	ldr	r1, [pc, #420]	; (14dc0 <bt_rpmsg_rx+0x1cc>)
   14c1c:	4b69      	ldr	r3, [pc, #420]	; (14dc4 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("Not enough data for ACL header");
   14c1e:	486a      	ldr	r0, [pc, #424]	; (14dc8 <bt_rpmsg_rx+0x1d4>)
   14c20:	1ac9      	subs	r1, r1, r3
   14c22:	08c9      	lsrs	r1, r1, #3
   14c24:	0189      	lsls	r1, r1, #6
   14c26:	f041 0101 	orr.w	r1, r1, #1
   14c2a:	e009      	b.n	14c40 <bt_rpmsg_rx+0x4c>
	if (remaining < sizeof(hdr)) {
   14c2c:	2b01      	cmp	r3, #1
   14c2e:	d80c      	bhi.n	14c4a <bt_rpmsg_rx+0x56>
   14c30:	4963      	ldr	r1, [pc, #396]	; (14dc0 <bt_rpmsg_rx+0x1cc>)
   14c32:	4b64      	ldr	r3, [pc, #400]	; (14dc4 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("Not enough data for event header");
   14c34:	4865      	ldr	r0, [pc, #404]	; (14dcc <bt_rpmsg_rx+0x1d8>)
   14c36:	1ac9      	subs	r1, r1, r3
   14c38:	08c9      	lsrs	r1, r1, #3
   14c3a:	0189      	lsls	r1, r1, #6
   14c3c:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Event payload length is not correct");
   14c40:	f012 f876 	bl	26d30 <log_0>
}
   14c44:	b002      	add	sp, #8
   14c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (evt_type) {
   14c4a:	7873      	ldrb	r3, [r6, #1]
   14c4c:	2b3e      	cmp	r3, #62	; 0x3e
   14c4e:	d119      	bne.n	14c84 <bt_rpmsg_rx+0x90>
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
   14c50:	78f7      	ldrb	r7, [r6, #3]
		switch (subevt_type) {
   14c52:	2f02      	cmp	r7, #2
   14c54:	d018      	beq.n	14c88 <bt_rpmsg_rx+0x94>
   14c56:	f1a7 030d 	sub.w	r3, r7, #13
   14c5a:	425f      	negs	r7, r3
   14c5c:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   14c5e:	2202      	movs	r2, #2
   14c60:	4641      	mov	r1, r8
   14c62:	a801      	add	r0, sp, #4
   14c64:	f013 fc95 	bl	28592 <memcpy>
	if (remaining != hdr.len) {
   14c68:	f89d 3005 	ldrb.w	r3, [sp, #5]
	remaining -= sizeof(hdr);
   14c6c:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
   14c6e:	429d      	cmp	r5, r3
   14c70:	d00c      	beq.n	14c8c <bt_rpmsg_rx+0x98>
   14c72:	4953      	ldr	r1, [pc, #332]	; (14dc0 <bt_rpmsg_rx+0x1cc>)
   14c74:	4b53      	ldr	r3, [pc, #332]	; (14dc4 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("Event payload length is not correct");
   14c76:	4856      	ldr	r0, [pc, #344]	; (14dd0 <bt_rpmsg_rx+0x1dc>)
   14c78:	1ac9      	subs	r1, r1, r3
   14c7a:	08c9      	lsrs	r1, r1, #3
   14c7c:	0189      	lsls	r1, r1, #6
   14c7e:	f041 0101 	orr.w	r1, r1, #1
   14c82:	e7dd      	b.n	14c40 <bt_rpmsg_rx+0x4c>
		return false;
   14c84:	2700      	movs	r7, #0
   14c86:	e7ea      	b.n	14c5e <bt_rpmsg_rx+0x6a>
			return true;
   14c88:	2701      	movs	r7, #1
   14c8a:	e7e8      	b.n	14c5e <bt_rpmsg_rx+0x6a>
	buf = bt_buf_get_evt(hdr.evt, discardable, K_NO_WAIT);
   14c8c:	2200      	movs	r2, #0
   14c8e:	2300      	movs	r3, #0
   14c90:	4639      	mov	r1, r7
   14c92:	f89d 0004 	ldrb.w	r0, [sp, #4]
   14c96:	f002 fa4f 	bl	17138 <bt_buf_get_evt>
	if (!buf) {
   14c9a:	4604      	mov	r4, r0
   14c9c:	b950      	cbnz	r0, 14cb4 <bt_rpmsg_rx+0xc0>
		if (discardable) {
   14c9e:	2f00      	cmp	r7, #0
   14ca0:	d1d0      	bne.n	14c44 <bt_rpmsg_rx+0x50>
   14ca2:	4947      	ldr	r1, [pc, #284]	; (14dc0 <bt_rpmsg_rx+0x1cc>)
   14ca4:	4b47      	ldr	r3, [pc, #284]	; (14dc4 <bt_rpmsg_rx+0x1d0>)
			BT_ERR("No available event buffers!");
   14ca6:	484b      	ldr	r0, [pc, #300]	; (14dd4 <bt_rpmsg_rx+0x1e0>)
   14ca8:	1ac9      	subs	r1, r1, r3
   14caa:	08c9      	lsrs	r1, r1, #3
   14cac:	0189      	lsls	r1, r1, #6
   14cae:	f041 0101 	orr.w	r1, r1, #1
   14cb2:	e7c5      	b.n	14c40 <bt_rpmsg_rx+0x4c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14cb4:	f100 0708 	add.w	r7, r0, #8
   14cb8:	2202      	movs	r2, #2
   14cba:	a901      	add	r1, sp, #4
   14cbc:	4638      	mov	r0, r7
   14cbe:	f015 fcd6 	bl	2a66e <net_buf_simple_add_mem>
   14cc2:	462a      	mov	r2, r5
   14cc4:	1cf1      	adds	r1, r6, #3
   14cc6:	4638      	mov	r0, r7
   14cc8:	f015 fcd1 	bl	2a66e <net_buf_simple_add_mem>
		bt_recv(buf);
   14ccc:	4620      	mov	r0, r4
   14cce:	f003 fc5f 	bl	18590 <bt_recv>
		BT_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
   14cd2:	e7b7      	b.n	14c44 <bt_rpmsg_rx+0x50>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   14cd4:	2200      	movs	r2, #0
   14cd6:	2300      	movs	r3, #0
   14cd8:	2003      	movs	r0, #3
   14cda:	f002 f9d3 	bl	17084 <bt_buf_get_rx>
	if (buf) {
   14cde:	4604      	mov	r4, r0
   14ce0:	b300      	cbz	r0, 14d24 <bt_rpmsg_rx+0x130>
		memcpy((void *)&hdr, data, sizeof(hdr));
   14ce2:	2204      	movs	r2, #4
   14ce4:	4641      	mov	r1, r8
   14ce6:	eb0d 0002 	add.w	r0, sp, r2
   14cea:	f013 fc52 	bl	28592 <memcpy>
   14cee:	2204      	movs	r2, #4
   14cf0:	f104 0708 	add.w	r7, r4, #8
   14cf4:	4638      	mov	r0, r7
   14cf6:	eb0d 0102 	add.w	r1, sp, r2
   14cfa:	f015 fcb8 	bl	2a66e <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   14cfe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
   14d02:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   14d04:	429d      	cmp	r5, r3
   14d06:	d04c      	beq.n	14da2 <bt_rpmsg_rx+0x1ae>
   14d08:	492d      	ldr	r1, [pc, #180]	; (14dc0 <bt_rpmsg_rx+0x1cc>)
   14d0a:	4b2e      	ldr	r3, [pc, #184]	; (14dc4 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("ACL payload length is not correct");
   14d0c:	4832      	ldr	r0, [pc, #200]	; (14dd8 <bt_rpmsg_rx+0x1e4>)
   14d0e:	1ac9      	subs	r1, r1, r3
   14d10:	08c9      	lsrs	r1, r1, #3
   14d12:	0189      	lsls	r1, r1, #6
   14d14:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("ISO payload length is not correct");
   14d18:	f012 f80a 	bl	26d30 <log_0>
		net_buf_unref(buf);
   14d1c:	4620      	mov	r0, r4
   14d1e:	f00b f9c3 	bl	200a8 <net_buf_unref>
	if (buf) {
   14d22:	e78f      	b.n	14c44 <bt_rpmsg_rx+0x50>
   14d24:	4926      	ldr	r1, [pc, #152]	; (14dc0 <bt_rpmsg_rx+0x1cc>)
   14d26:	4b27      	ldr	r3, [pc, #156]	; (14dc4 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("No available ACL buffers!");
   14d28:	482c      	ldr	r0, [pc, #176]	; (14ddc <bt_rpmsg_rx+0x1e8>)
   14d2a:	1ac9      	subs	r1, r1, r3
   14d2c:	08c9      	lsrs	r1, r1, #3
   14d2e:	0189      	lsls	r1, r1, #6
   14d30:	f041 0101 	orr.w	r1, r1, #1
   14d34:	e784      	b.n	14c40 <bt_rpmsg_rx+0x4c>
	if (remaining < sizeof(hdr)) {
   14d36:	2b03      	cmp	r3, #3
   14d38:	d808      	bhi.n	14d4c <bt_rpmsg_rx+0x158>
   14d3a:	4921      	ldr	r1, [pc, #132]	; (14dc0 <bt_rpmsg_rx+0x1cc>)
   14d3c:	4b21      	ldr	r3, [pc, #132]	; (14dc4 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("Not enough data for ISO header");
   14d3e:	4828      	ldr	r0, [pc, #160]	; (14de0 <bt_rpmsg_rx+0x1ec>)
   14d40:	1ac9      	subs	r1, r1, r3
   14d42:	08c9      	lsrs	r1, r1, #3
   14d44:	0189      	lsls	r1, r1, #6
   14d46:	f041 0101 	orr.w	r1, r1, #1
   14d4a:	e779      	b.n	14c40 <bt_rpmsg_rx+0x4c>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   14d4c:	2200      	movs	r2, #0
   14d4e:	2300      	movs	r3, #0
   14d50:	f002 f998 	bl	17084 <bt_buf_get_rx>
	if (buf) {
   14d54:	4604      	mov	r4, r0
   14d56:	b1d8      	cbz	r0, 14d90 <bt_rpmsg_rx+0x19c>
		memcpy((void *)&hdr, data, sizeof(hdr));
   14d58:	2204      	movs	r2, #4
   14d5a:	4641      	mov	r1, r8
   14d5c:	eb0d 0002 	add.w	r0, sp, r2
   14d60:	f013 fc17 	bl	28592 <memcpy>
   14d64:	2204      	movs	r2, #4
   14d66:	f104 0708 	add.w	r7, r4, #8
   14d6a:	4638      	mov	r0, r7
   14d6c:	eb0d 0102 	add.w	r1, sp, r2
   14d70:	f015 fc7d 	bl	2a66e <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   14d74:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
   14d78:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   14d7a:	429d      	cmp	r5, r3
   14d7c:	d011      	beq.n	14da2 <bt_rpmsg_rx+0x1ae>
   14d7e:	4910      	ldr	r1, [pc, #64]	; (14dc0 <bt_rpmsg_rx+0x1cc>)
   14d80:	4b10      	ldr	r3, [pc, #64]	; (14dc4 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("ISO payload length is not correct");
   14d82:	4818      	ldr	r0, [pc, #96]	; (14de4 <bt_rpmsg_rx+0x1f0>)
   14d84:	1ac9      	subs	r1, r1, r3
   14d86:	08c9      	lsrs	r1, r1, #3
   14d88:	0189      	lsls	r1, r1, #6
   14d8a:	f041 0101 	orr.w	r1, r1, #1
   14d8e:	e7c3      	b.n	14d18 <bt_rpmsg_rx+0x124>
   14d90:	490b      	ldr	r1, [pc, #44]	; (14dc0 <bt_rpmsg_rx+0x1cc>)
   14d92:	4b0c      	ldr	r3, [pc, #48]	; (14dc4 <bt_rpmsg_rx+0x1d0>)
		BT_ERR("No available ISO buffers!");
   14d94:	4814      	ldr	r0, [pc, #80]	; (14de8 <bt_rpmsg_rx+0x1f4>)
   14d96:	1ac9      	subs	r1, r1, r3
   14d98:	08c9      	lsrs	r1, r1, #3
   14d9a:	0189      	lsls	r1, r1, #6
   14d9c:	f041 0101 	orr.w	r1, r1, #1
   14da0:	e74e      	b.n	14c40 <bt_rpmsg_rx+0x4c>
   14da2:	462a      	mov	r2, r5
   14da4:	1d71      	adds	r1, r6, #5
   14da6:	e78e      	b.n	14cc6 <bt_rpmsg_rx+0xd2>
   14da8:	4b06      	ldr	r3, [pc, #24]	; (14dc4 <bt_rpmsg_rx+0x1d0>)
   14daa:	4a05      	ldr	r2, [pc, #20]	; (14dc0 <bt_rpmsg_rx+0x1cc>)
		BT_ERR("Unknown HCI type %u", pkt_indicator);
   14dac:	4601      	mov	r1, r0
   14dae:	1ad2      	subs	r2, r2, r3
   14db0:	08d2      	lsrs	r2, r2, #3
   14db2:	0192      	lsls	r2, r2, #6
   14db4:	480d      	ldr	r0, [pc, #52]	; (14dec <bt_rpmsg_rx+0x1f8>)
   14db6:	f042 0201 	orr.w	r2, r2, #1
   14dba:	f011 ffc6 	bl	26d4a <log_1>
		BT_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
   14dbe:	e741      	b.n	14c44 <bt_rpmsg_rx+0x50>
   14dc0:	0002c024 	.word	0x0002c024
   14dc4:	0002bfe4 	.word	0x0002bfe4
   14dc8:	0002db47 	.word	0x0002db47
   14dcc:	0002dae6 	.word	0x0002dae6
   14dd0:	0002db07 	.word	0x0002db07
   14dd4:	0002db2b 	.word	0x0002db2b
   14dd8:	0002db80 	.word	0x0002db80
   14ddc:	0002db66 	.word	0x0002db66
   14de0:	0002dba2 	.word	0x0002dba2
   14de4:	0002dbdb 	.word	0x0002dbdb
   14de8:	0002dbc1 	.word	0x0002dbc1
   14dec:	0002dbfd 	.word	0x0002dbfd

00014df0 <bt_rpmsg_platform_init>:

int bt_rpmsg_platform_init(void)
{
	int err;

	err = rpmsg_service_register_endpoint("nrf_bt_hci", endpoint_cb);
   14df0:	490b      	ldr	r1, [pc, #44]	; (14e20 <bt_rpmsg_platform_init+0x30>)
{
   14df2:	b508      	push	{r3, lr}
	err = rpmsg_service_register_endpoint("nrf_bt_hci", endpoint_cb);
   14df4:	480b      	ldr	r0, [pc, #44]	; (14e24 <bt_rpmsg_platform_init+0x34>)
   14df6:	f7ff f885 	bl	13f04 <rpmsg_service_register_endpoint>

	if (err < 0) {
   14dfa:	1e01      	subs	r1, r0, #0
   14dfc:	da0b      	bge.n	14e16 <bt_rpmsg_platform_init+0x26>
   14dfe:	4b0a      	ldr	r3, [pc, #40]	; (14e28 <bt_rpmsg_platform_init+0x38>)
   14e00:	4a0a      	ldr	r2, [pc, #40]	; (14e2c <bt_rpmsg_platform_init+0x3c>)
		LOG_ERR("Registering endpoint failed with %d", err);
   14e02:	480b      	ldr	r0, [pc, #44]	; (14e30 <bt_rpmsg_platform_init+0x40>)
   14e04:	1ad2      	subs	r2, r2, r3
   14e06:	08d2      	lsrs	r2, r2, #3
   14e08:	0192      	lsls	r2, r2, #6
   14e0a:	f042 0201 	orr.w	r2, r2, #1
   14e0e:	f011 ff9c 	bl	26d4a <log_1>
		return RPMSG_ERR_INIT;
   14e12:	4808      	ldr	r0, [pc, #32]	; (14e34 <bt_rpmsg_platform_init+0x44>)
	}

	endpoint_id = err;

	return RPMSG_SUCCESS;
}
   14e14:	bd08      	pop	{r3, pc}
	endpoint_id = err;
   14e16:	4b08      	ldr	r3, [pc, #32]	; (14e38 <bt_rpmsg_platform_init+0x48>)
	return RPMSG_SUCCESS;
   14e18:	2000      	movs	r0, #0
	endpoint_id = err;
   14e1a:	6019      	str	r1, [r3, #0]
	return RPMSG_SUCCESS;
   14e1c:	e7fa      	b.n	14e14 <bt_rpmsg_platform_init+0x24>
   14e1e:	bf00      	nop
   14e20:	00027885 	.word	0x00027885
   14e24:	0002dc25 	.word	0x0002dc25
   14e28:	0002bfe4 	.word	0x0002bfe4
   14e2c:	0002c02c 	.word	0x0002c02c
   14e30:	0002dc30 	.word	0x0002dc30
   14e34:	fffff82a 	.word	0xfffff82a
   14e38:	20009588 	.word	0x20009588

00014e3c <bt_rpmsg_platform_send>:

int bt_rpmsg_platform_send(struct net_buf *buf)
{
	return rpmsg_service_send(endpoint_id, buf->data, buf->len);
   14e3c:	4b02      	ldr	r3, [pc, #8]	; (14e48 <bt_rpmsg_platform_send+0xc>)
   14e3e:	8982      	ldrh	r2, [r0, #12]
   14e40:	6881      	ldr	r1, [r0, #8]
   14e42:	6818      	ldr	r0, [r3, #0]
   14e44:	f7ff b89a 	b.w	13f7c <rpmsg_service_send>
   14e48:	20009588 	.word	0x20009588

00014e4c <bt_rpmsg_platform_endpoint_is_bound>:
}

int bt_rpmsg_platform_endpoint_is_bound(void)
{
   14e4c:	b508      	push	{r3, lr}
	return rpmsg_service_endpoint_is_bound(endpoint_id);
   14e4e:	4b02      	ldr	r3, [pc, #8]	; (14e58 <bt_rpmsg_platform_endpoint_is_bound+0xc>)
   14e50:	6818      	ldr	r0, [r3, #0]
   14e52:	f7ff f889 	bl	13f68 <rpmsg_service_endpoint_is_bound>
}
   14e56:	bd08      	pop	{r3, pc}
   14e58:	20009588 	.word	0x20009588

00014e5c <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
   14e5c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   14e5e:	4c06      	ldr	r4, [pc, #24]	; (14e78 <sys_clock_isr+0x1c>)
   14e60:	4906      	ldr	r1, [pc, #24]	; (14e7c <sys_clock_isr+0x20>)
   14e62:	4622      	mov	r2, r4
   14e64:	4806      	ldr	r0, [pc, #24]	; (14e80 <sys_clock_isr+0x24>)
   14e66:	2317      	movs	r3, #23
   14e68:	f011 fc58 	bl	2671c <printk>
   14e6c:	4620      	mov	r0, r4
}
   14e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   14e72:	2117      	movs	r1, #23
   14e74:	f011 bef7 	b.w	26c66 <assert_post_action>
   14e78:	0002dc68 	.word	0x0002dc68
   14e7c:	0002dee4 	.word	0x0002dee4
   14e80:	0002cfb2 	.word	0x0002cfb2

00014e84 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   14e84:	4a04      	ldr	r2, [pc, #16]	; (14e98 <sys_clock_timeout_handler+0x14>)
   14e86:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   14e88:	1ac8      	subs	r0, r1, r3
   14e8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   14e8e:	4403      	add	r3, r0
   14e90:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   14e92:	f010 bd53 	b.w	2593c <sys_clock_announce>
   14e96:	bf00      	nop
   14e98:	2000959c 	.word	0x2000959c

00014e9c <set_absolute_alarm>:
{
   14e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14ea0:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14ea4:	f04f 0900 	mov.w	r9, #0
   14ea8:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   14eaa:	f100 0450 	add.w	r4, r0, #80	; 0x50
   14eae:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
   14eb2:	00a4      	lsls	r4, r4, #2
   14eb4:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
   14eb8:	b2a4      	uxth	r4, r4
   14eba:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
   14ebe:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   14ec2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 14f30 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
   14ec6:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14eca:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14ece:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
   14ed0:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   14ed4:	eba3 030a 	sub.w	r3, r3, sl
   14ed8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   14edc:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   14ee0:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   14ee2:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   14ee6:	d102      	bne.n	14eee <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
   14ee8:	2013      	movs	r0, #19
   14eea:	f016 fe13 	bl	2bb14 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   14eee:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
   14ef2:	1aab      	subs	r3, r5, r2
   14ef4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   14ef8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   14efc:	bf88      	it	hi
   14efe:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14f00:	f8c4 9000 	str.w	r9, [r4]
   14f04:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   14f06:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   14f0a:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   14f0e:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   14f12:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   14f16:	459a      	cmp	sl, r3
   14f18:	d006      	beq.n	14f28 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
   14f1a:	1aeb      	subs	r3, r5, r3
   14f1c:	3b02      	subs	r3, #2
   14f1e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   14f22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   14f26:	d801      	bhi.n	14f2c <set_absolute_alarm+0x90>
}
   14f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
   14f2c:	462b      	mov	r3, r5
   14f2e:	e7cf      	b.n	14ed0 <set_absolute_alarm+0x34>
   14f30:	40015000 	.word	0x40015000

00014f34 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   14f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   14f36:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14f38:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14f3a:	4e0f      	ldr	r6, [pc, #60]	; (14f78 <rtc_nrf_isr+0x44>)
   14f3c:	4b0f      	ldr	r3, [pc, #60]	; (14f7c <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
   14f3e:	4a10      	ldr	r2, [pc, #64]	; (14f80 <rtc_nrf_isr+0x4c>)
   14f40:	4618      	mov	r0, r3
   14f42:	681d      	ldr	r5, [r3, #0]
   14f44:	b104      	cbz	r4, 14f48 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   14f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14f48:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   14f4c:	03c9      	lsls	r1, r1, #15
   14f4e:	d5fa      	bpl.n	14f46 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14f50:	6831      	ldr	r1, [r6, #0]
   14f52:	2900      	cmp	r1, #0
   14f54:	d0f7      	beq.n	14f46 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14f56:	6034      	str	r4, [r6, #0]
   14f58:	6831      	ldr	r1, [r6, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   14f5a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   14f5e:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   14f62:	2401      	movs	r4, #1
    return p_reg->CC[ch];
   14f64:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
   14f68:	b125      	cbz	r5, 14f74 <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
   14f6a:	2000      	movs	r0, #0
   14f6c:	685a      	ldr	r2, [r3, #4]
   14f6e:	601f      	str	r7, [r3, #0]
   14f70:	47a8      	blx	r5
   14f72:	e7e3      	b.n	14f3c <rtc_nrf_isr+0x8>
   14f74:	6005      	str	r5, [r0, #0]
}
   14f76:	e7e6      	b.n	14f46 <rtc_nrf_isr+0x12>
   14f78:	40015140 	.word	0x40015140
   14f7c:	20009590 	.word	0x20009590
   14f80:	40015000 	.word	0x40015000

00014f84 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   14f84:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   14f86:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   14f88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   14f8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   14f90:	4d0d      	ldr	r5, [pc, #52]	; (14fc8 <sys_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   14f92:	2101      	movs	r1, #1
   14f94:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
   14f98:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   14f9c:	4b0b      	ldr	r3, [pc, #44]	; (14fcc <sys_clock_driver_init+0x48>)
   14f9e:	2015      	movs	r0, #21
   14fa0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   14fa4:	4622      	mov	r2, r4
   14fa6:	f001 f901 	bl	161ac <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   14faa:	2015      	movs	r0, #21
   14fac:	f001 f8e0 	bl	16170 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   14fb0:	2301      	movs	r3, #1
   14fb2:	4a07      	ldr	r2, [pc, #28]	; (14fd0 <sys_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   14fb4:	2002      	movs	r0, #2
   14fb6:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
   14fb8:	4a06      	ldr	r2, [pc, #24]	; (14fd4 <sys_clock_driver_init+0x50>)
   14fba:	602b      	str	r3, [r5, #0]
   14fbc:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   14fbe:	f7ff fd11 	bl	149e4 <z_nrf_clock_control_lf_on>

	return 0;
}
   14fc2:	4620      	mov	r0, r4
   14fc4:	bd38      	pop	{r3, r4, r5, pc}
   14fc6:	bf00      	nop
   14fc8:	40015000 	.word	0x40015000
   14fcc:	e000e100 	.word	0xe000e100
   14fd0:	40015008 	.word	0x40015008
   14fd4:	20009598 	.word	0x20009598

00014fd8 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   14fd8:	4b13      	ldr	r3, [pc, #76]	; (15028 <sys_clock_set_timeout+0x50>)
   14fda:	f1b0 3fff 	cmp.w	r0, #4294967295
   14fde:	bf08      	it	eq
   14fe0:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   14fe2:	3801      	subs	r0, #1
   14fe4:	2800      	cmp	r0, #0
   14fe6:	dd1c      	ble.n	15022 <sys_clock_set_timeout+0x4a>
   14fe8:	4298      	cmp	r0, r3
   14fea:	bfa8      	it	ge
   14fec:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   14fee:	4b0f      	ldr	r3, [pc, #60]	; (1502c <sys_clock_set_timeout+0x54>)
   14ff0:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   14ff4:	4b0e      	ldr	r3, [pc, #56]	; (15030 <sys_clock_set_timeout+0x58>)
   14ff6:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   14ff8:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   14ffa:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   14ffe:	bf18      	it	ne
   15000:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
   15002:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   15006:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
   15008:	4a0a      	ldr	r2, [pc, #40]	; (15034 <sys_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1500a:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
   1500c:	480a      	ldr	r0, [pc, #40]	; (15038 <sys_clock_set_timeout+0x60>)
   1500e:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   15010:	2000      	movs	r0, #0
   15012:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   15014:	4a04      	ldr	r2, [pc, #16]	; (15028 <sys_clock_set_timeout+0x50>)
   15016:	4293      	cmp	r3, r2
   15018:	bf94      	ite	ls
   1501a:	18c9      	addls	r1, r1, r3
   1501c:	1889      	addhi	r1, r1, r2
   1501e:	f7ff bf3d 	b.w	14e9c <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   15022:	2000      	movs	r0, #0
   15024:	e7e3      	b.n	14fee <sys_clock_set_timeout+0x16>
   15026:	bf00      	nop
   15028:	007fffff 	.word	0x007fffff
   1502c:	40015000 	.word	0x40015000
   15030:	2000959c 	.word	0x2000959c
   15034:	20009590 	.word	0x20009590
   15038:	00014e85 	.word	0x00014e85

0001503c <sys_clock_elapsed>:
   1503c:	4b04      	ldr	r3, [pc, #16]	; (15050 <sys_clock_elapsed+0x14>)
   1503e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   15042:	4b04      	ldr	r3, [pc, #16]	; (15054 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
   15044:	681b      	ldr	r3, [r3, #0]
   15046:	1ac0      	subs	r0, r0, r3
}
   15048:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1504c:	4770      	bx	lr
   1504e:	bf00      	nop
   15050:	40015000 	.word	0x40015000
   15054:	2000959c 	.word	0x2000959c

00015058 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
   15058:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1505a:	f04f 0320 	mov.w	r3, #32
   1505e:	f3ef 8511 	mrs	r5, BASEPRI
   15062:	f383 8811 	msr	BASEPRI, r3
   15066:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1506a:	481b      	ldr	r0, [pc, #108]	; (150d8 <sys_clock_cycle_get_32+0x80>)
   1506c:	f00d feb4 	bl	22dd8 <z_spin_lock_valid>
   15070:	b968      	cbnz	r0, 1508e <sys_clock_cycle_get_32+0x36>
   15072:	2381      	movs	r3, #129	; 0x81
   15074:	4a19      	ldr	r2, [pc, #100]	; (150dc <sys_clock_cycle_get_32+0x84>)
   15076:	491a      	ldr	r1, [pc, #104]	; (150e0 <sys_clock_cycle_get_32+0x88>)
   15078:	481a      	ldr	r0, [pc, #104]	; (150e4 <sys_clock_cycle_get_32+0x8c>)
   1507a:	f011 fb4f 	bl	2671c <printk>
   1507e:	4916      	ldr	r1, [pc, #88]	; (150d8 <sys_clock_cycle_get_32+0x80>)
   15080:	4819      	ldr	r0, [pc, #100]	; (150e8 <sys_clock_cycle_get_32+0x90>)
   15082:	f011 fb4b 	bl	2671c <printk>
   15086:	2181      	movs	r1, #129	; 0x81
   15088:	4814      	ldr	r0, [pc, #80]	; (150dc <sys_clock_cycle_get_32+0x84>)
   1508a:	f011 fdec 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   1508e:	4812      	ldr	r0, [pc, #72]	; (150d8 <sys_clock_cycle_get_32+0x80>)
   15090:	f00d febe 	bl	22e10 <z_spin_lock_set_owner>
   15094:	4b15      	ldr	r3, [pc, #84]	; (150ec <sys_clock_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15096:	4810      	ldr	r0, [pc, #64]	; (150d8 <sys_clock_cycle_get_32+0x80>)
   15098:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   1509c:	4b14      	ldr	r3, [pc, #80]	; (150f0 <sys_clock_cycle_get_32+0x98>)
   1509e:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   150a0:	1ae4      	subs	r4, r4, r3
   150a2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   150a6:	441c      	add	r4, r3
   150a8:	f00d fea4 	bl	22df4 <z_spin_unlock_valid>
   150ac:	b968      	cbnz	r0, 150ca <sys_clock_cycle_get_32+0x72>
   150ae:	23ac      	movs	r3, #172	; 0xac
   150b0:	4a0a      	ldr	r2, [pc, #40]	; (150dc <sys_clock_cycle_get_32+0x84>)
   150b2:	4910      	ldr	r1, [pc, #64]	; (150f4 <sys_clock_cycle_get_32+0x9c>)
   150b4:	480b      	ldr	r0, [pc, #44]	; (150e4 <sys_clock_cycle_get_32+0x8c>)
   150b6:	f011 fb31 	bl	2671c <printk>
   150ba:	4907      	ldr	r1, [pc, #28]	; (150d8 <sys_clock_cycle_get_32+0x80>)
   150bc:	480e      	ldr	r0, [pc, #56]	; (150f8 <sys_clock_cycle_get_32+0xa0>)
   150be:	f011 fb2d 	bl	2671c <printk>
   150c2:	21ac      	movs	r1, #172	; 0xac
   150c4:	4805      	ldr	r0, [pc, #20]	; (150dc <sys_clock_cycle_get_32+0x84>)
   150c6:	f011 fdce 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   150ca:	f385 8811 	msr	BASEPRI, r5
   150ce:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   150d2:	4620      	mov	r0, r4
   150d4:	bd38      	pop	{r3, r4, r5, pc}
   150d6:	bf00      	nop
   150d8:	200095a0 	.word	0x200095a0
   150dc:	0002d072 	.word	0x0002d072
   150e0:	0002d0c4 	.word	0x0002d0c4
   150e4:	0002cfb2 	.word	0x0002cfb2
   150e8:	0002d0d9 	.word	0x0002d0d9
   150ec:	40015000 	.word	0x40015000
   150f0:	2000959c 	.word	0x2000959c
   150f4:	0002d098 	.word	0x0002d098
   150f8:	0002d0af 	.word	0x0002d0af

000150fc <get_uuid_size.isra.0.part.0>:

	dm->cur_chunk_len = 0;
}

/* Returns size of UUID structure with padding for memory alignment */
static size_t get_uuid_size(const struct bt_uuid *uuid)
   150fc:	b508      	push	{r3, lr}
   150fe:	4906      	ldr	r1, [pc, #24]	; (15118 <get_uuid_size.isra.0.part.0+0x1c>)
   15100:	4b06      	ldr	r3, [pc, #24]	; (1511c <get_uuid_size.isra.0.part.0+0x20>)
	case BT_UUID_TYPE_32:
		return sizeof(struct bt_uuid_32);
	case BT_UUID_TYPE_128:
		return sizeof(struct bt_uuid_128);
	default:
		LOG_ERR("Unsupported UUID type.");
   15102:	4807      	ldr	r0, [pc, #28]	; (15120 <get_uuid_size.isra.0.part.0+0x24>)
   15104:	1ac9      	subs	r1, r1, r3
   15106:	08c9      	lsrs	r1, r1, #3
   15108:	0189      	lsls	r1, r1, #6
   1510a:	f041 0101 	orr.w	r1, r1, #1
   1510e:	f011 fe0f 	bl	26d30 <log_0>
		return 0;
	}
}
   15112:	2000      	movs	r0, #0
   15114:	bd08      	pop	{r3, pc}
   15116:	bf00      	nop
   15118:	0002c014 	.word	0x0002c014
   1511c:	0002bfe4 	.word	0x0002bfe4
   15120:	0002dce4 	.word	0x0002dce4

00015124 <user_data_alloc.constprop.0>:
static void *user_data_alloc(struct bt_gatt_dm *dm,
   15124:	b538      	push	{r3, r4, r5, lr}
	len = (len + DATA_ALIGN - 1) & ~(DATA_ALIGN - 1);
   15126:	1cc5      	adds	r5, r0, #3
   15128:	f025 0503 	bic.w	r5, r5, #3
	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
   1512c:	2d74      	cmp	r5, #116	; 0x74
   1512e:	d909      	bls.n	15144 <user_data_alloc.constprop.0+0x20>
   15130:	4918      	ldr	r1, [pc, #96]	; (15194 <user_data_alloc.constprop.0+0x70>)
   15132:	4819      	ldr	r0, [pc, #100]	; (15198 <user_data_alloc.constprop.0+0x74>)
   15134:	2350      	movs	r3, #80	; 0x50
   15136:	4a19      	ldr	r2, [pc, #100]	; (1519c <user_data_alloc.constprop.0+0x78>)
   15138:	f011 faf0 	bl	2671c <printk>
   1513c:	2150      	movs	r1, #80	; 0x50
   1513e:	4817      	ldr	r0, [pc, #92]	; (1519c <user_data_alloc.constprop.0+0x78>)
   15140:	f011 fd91 	bl	26c66 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   15144:	4c16      	ldr	r4, [pc, #88]	; (151a0 <user_data_alloc.constprop.0+0x7c>)
	if (sys_slist_is_empty(&dm->chunk_list) ||
   15146:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   1514a:	b123      	cbz	r3, 15156 <user_data_alloc.constprop.0+0x32>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
   1514c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   15150:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
   15152:	2b74      	cmp	r3, #116	; 0x74
   15154:	d918      	bls.n	15188 <user_data_alloc.constprop.0+0x64>
		item = k_malloc(sizeof(struct data_chunk_item));
   15156:	2078      	movs	r0, #120	; 0x78
   15158:	f016 fd7c 	bl	2bc54 <k_malloc>
		if (!item) {
   1515c:	b178      	cbz	r0, 1517e <user_data_alloc.constprop.0+0x5a>
	parent->next = child;
   1515e:	2300      	movs	r3, #0
   15160:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   15162:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
   15166:	b95a      	cbnz	r2, 15180 <user_data_alloc.constprop.0+0x5c>
	list->head = node;
   15168:	e9c4 004f 	strd	r0, r0, [r4, #316]	; 0x13c
		dm->cur_chunk_len = 0;
   1516c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	user_data_loc = &item->data[dm->cur_chunk_len];
   15170:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   15174:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
   15176:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
   15178:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
   1517a:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
}
   1517e:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   15180:	6010      	str	r0, [r2, #0]
	list->tail = node;
   15182:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
}
   15186:	e7f1      	b.n	1516c <user_data_alloc.constprop.0+0x48>
	return list->tail;
   15188:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
   1518c:	2800      	cmp	r0, #0
   1518e:	bf38      	it	cc
   15190:	2000      	movcc	r0, #0
   15192:	e7ed      	b.n	15170 <user_data_alloc.constprop.0+0x4c>
   15194:	0002dd26 	.word	0x0002dd26
   15198:	0002cfb2 	.word	0x0002cfb2
   1519c:	0002dcfb 	.word	0x0002dcfb
   151a0:	200095a4 	.word	0x200095a4

000151a4 <attr_store.constprop.0>:
 * @param[in] attr           Service attribute
 * @param[in] additional_len Additional buffer length
 *
 * @return Pointer to newly stored attribute.
 */
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
   151a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_dm_attr *cur_attr;

	LOG_DBG("Attr store, pos: %zu, handle: %"PRIu16,
		dm->cur_attr_id,
		attr->handle);
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
   151a8:	4c23      	ldr	r4, [pc, #140]	; (15238 <attr_store.constprop.0+0x94>)
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
   151aa:	4607      	mov	r7, r0
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
   151ac:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
   151b0:	460e      	mov	r6, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
   151b2:	2b22      	cmp	r3, #34	; 0x22
   151b4:	d90d      	bls.n	151d2 <attr_store.constprop.0+0x2e>
   151b6:	4b21      	ldr	r3, [pc, #132]	; (1523c <attr_store.constprop.0+0x98>)
   151b8:	4921      	ldr	r1, [pc, #132]	; (15240 <attr_store.constprop.0+0x9c>)
		LOG_ERR("No space for new attribute.");
   151ba:	4822      	ldr	r0, [pc, #136]	; (15244 <attr_store.constprop.0+0xa0>)
   151bc:	1ac9      	subs	r1, r1, r3
   151be:	08c9      	lsrs	r1, r1, #3
   151c0:	0189      	lsls	r1, r1, #6
   151c2:	f041 0101 	orr.w	r1, r1, #1
   151c6:	f011 fdb3 	bl	26d30 <log_0>
		return NULL;
   151ca:	2500      	movs	r5, #0
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];

	memcpy(cur_attr->uuid, attr->uuid, uuid_size);

	return cur_attr;
}
   151cc:	4628      	mov	r0, r5
   151ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
   151d2:	6803      	ldr	r3, [r0, #0]
   151d4:	781b      	ldrb	r3, [r3, #0]
	switch (uuid->type) {
   151d6:	2b02      	cmp	r3, #2
   151d8:	d813      	bhi.n	15202 <attr_store.constprop.0+0x5e>
   151da:	4a1b      	ldr	r2, [pc, #108]	; (15248 <attr_store.constprop.0+0xa4>)
   151dc:	f812 8003 	ldrb.w	r8, [r2, r3]
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
   151e0:	eb06 0008 	add.w	r0, r6, r8
   151e4:	f7ff ff9e 	bl	15124 <user_data_alloc.constprop.0>
	if (!attr_data) {
   151e8:	4605      	mov	r5, r0
   151ea:	b970      	cbnz	r0, 1520a <attr_store.constprop.0+0x66>
   151ec:	4b13      	ldr	r3, [pc, #76]	; (1523c <attr_store.constprop.0+0x98>)
   151ee:	4914      	ldr	r1, [pc, #80]	; (15240 <attr_store.constprop.0+0x9c>)
		LOG_ERR("No space for attribute data.");
   151f0:	4816      	ldr	r0, [pc, #88]	; (1524c <attr_store.constprop.0+0xa8>)
   151f2:	1ac9      	subs	r1, r1, r3
   151f4:	08c9      	lsrs	r1, r1, #3
   151f6:	0189      	lsls	r1, r1, #6
   151f8:	f041 0101 	orr.w	r1, r1, #1
   151fc:	f011 fd98 	bl	26d30 <log_0>
		return NULL;
   15200:	e7e4      	b.n	151cc <attr_store.constprop.0+0x28>
   15202:	f7ff ff7b 	bl	150fc <get_uuid_size.isra.0.part.0>
   15206:	4680      	mov	r8, r0
   15208:	e7ea      	b.n	151e0 <attr_store.constprop.0+0x3c>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
   1520a:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
   1520e:	4430      	add	r0, r6
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
   15210:	1c5a      	adds	r2, r3, #1
   15212:	3303      	adds	r3, #3
   15214:	00db      	lsls	r3, r3, #3
   15216:	f103 0904 	add.w	r9, r3, #4
   1521a:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
   1521e:	44a1      	add	r9, r4
	cur_attr->handle = attr->handle;
   15220:	441c      	add	r4, r3
   15222:	8a3b      	ldrh	r3, [r7, #16]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
   15224:	4642      	mov	r2, r8
	cur_attr->handle = attr->handle;
   15226:	8123      	strh	r3, [r4, #8]
	cur_attr->perm = attr->perm;
   15228:	7cbb      	ldrb	r3, [r7, #18]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
   1522a:	6839      	ldr	r1, [r7, #0]
	cur_attr->perm = attr->perm;
   1522c:	72a3      	strb	r3, [r4, #10]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
   1522e:	6060      	str	r0, [r4, #4]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
   15230:	f013 f9af 	bl	28592 <memcpy>
	return cur_attr;
   15234:	464d      	mov	r5, r9
   15236:	e7c9      	b.n	151cc <attr_store.constprop.0+0x28>
   15238:	200095a4 	.word	0x200095a4
   1523c:	0002bfe4 	.word	0x0002bfe4
   15240:	0002c014 	.word	0x0002c014
   15244:	0002dd76 	.word	0x0002dd76
   15248:	0002e09d 	.word	0x0002e09d
   1524c:	0002dd92 	.word	0x0002dd92

00015250 <discovery_complete.constprop.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15250:	4808      	ldr	r0, [pc, #32]	; (15274 <discovery_complete.constprop.0+0x24>)
   15252:	f500 739c 	add.w	r3, r0, #312	; 0x138
   15256:	e8d3 2fef 	ldaex	r2, [r3]
   1525a:	f042 0202 	orr.w	r2, r2, #2
   1525e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   15262:	2900      	cmp	r1, #0
   15264:	d1f7      	bne.n	15256 <discovery_complete.constprop.0+0x6>

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
   15266:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   1526a:	681b      	ldr	r3, [r3, #0]
   1526c:	b10b      	cbz	r3, 15272 <discovery_complete.constprop.0+0x22>
		dm->callback->completed(dm, dm->context);
   1526e:	6841      	ldr	r1, [r0, #4]
   15270:	4718      	bx	r3
	}
}
   15272:	4770      	bx	lr
   15274:	200095a4 	.word	0x200095a4

00015278 <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
   15278:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
   1527a:	4604      	mov	r4, r0
   1527c:	b960      	cbnz	r0, 15298 <uuid_store.constprop.0+0x20>
   1527e:	4b0f      	ldr	r3, [pc, #60]	; (152bc <uuid_store.constprop.0+0x44>)
   15280:	490f      	ldr	r1, [pc, #60]	; (152c0 <uuid_store.constprop.0+0x48>)
		LOG_ERR("Uninitialized UUID.");
   15282:	4810      	ldr	r0, [pc, #64]	; (152c4 <uuid_store.constprop.0+0x4c>)
   15284:	1ac9      	subs	r1, r1, r3
   15286:	08c9      	lsrs	r1, r1, #3
   15288:	0189      	lsls	r1, r1, #6
   1528a:	f041 0101 	orr.w	r1, r1, #1
   1528e:	f011 fd4f 	bl	26d30 <log_0>
		return NULL;
   15292:	4626      	mov	r6, r4
}
   15294:	4630      	mov	r0, r6
   15296:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
   15298:	7803      	ldrb	r3, [r0, #0]
	switch (uuid->type) {
   1529a:	2b02      	cmp	r3, #2
   1529c:	d80a      	bhi.n	152b4 <uuid_store.constprop.0+0x3c>
   1529e:	4a0a      	ldr	r2, [pc, #40]	; (152c8 <uuid_store.constprop.0+0x50>)
   152a0:	5cd5      	ldrb	r5, [r2, r3]
	void *buffer = user_data_alloc(dm, size);
   152a2:	4628      	mov	r0, r5
   152a4:	f7ff ff3e 	bl	15124 <user_data_alloc.constprop.0>
	memcpy(buffer, uuid, size);
   152a8:	462a      	mov	r2, r5
   152aa:	4621      	mov	r1, r4
	void *buffer = user_data_alloc(dm, size);
   152ac:	4606      	mov	r6, r0
	memcpy(buffer, uuid, size);
   152ae:	f013 f970 	bl	28592 <memcpy>
	return (struct bt_uuid *)buffer;
   152b2:	e7ef      	b.n	15294 <uuid_store.constprop.0+0x1c>
   152b4:	f7ff ff22 	bl	150fc <get_uuid_size.isra.0.part.0>
   152b8:	4605      	mov	r5, r0
   152ba:	e7f2      	b.n	152a2 <uuid_store.constprop.0+0x2a>
   152bc:	0002bfe4 	.word	0x0002bfe4
   152c0:	0002c014 	.word	0x0002c014
   152c4:	0002ddaf 	.word	0x0002ddaf
   152c8:	0002e09d 	.word	0x0002e09d

000152cc <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
   152cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
   152d0:	4c91      	ldr	r4, [pc, #580]	; (15518 <discovery_callback+0x24c>)
{
   152d2:	460d      	mov	r5, r1
	if (conn != bt_gatt_dm_inst.conn) {
   152d4:	6823      	ldr	r3, [r4, #0]
   152d6:	4627      	mov	r7, r4
   152d8:	4283      	cmp	r3, r0
   152da:	d00d      	beq.n	152f8 <discovery_callback+0x2c>
   152dc:	4b8f      	ldr	r3, [pc, #572]	; (1551c <discovery_callback+0x250>)
   152de:	4990      	ldr	r1, [pc, #576]	; (15520 <discovery_callback+0x254>)
		LOG_ERR("Unexpected conn object. Aborting.");
   152e0:	4890      	ldr	r0, [pc, #576]	; (15524 <discovery_callback+0x258>)
   152e2:	1ac9      	subs	r1, r1, r3
   152e4:	08c9      	lsrs	r1, r1, #3
   152e6:	0189      	lsls	r1, r1, #6
   152e8:	f041 0101 	orr.w	r1, r1, #1
   152ec:	f011 fd20 	bl	26d30 <log_0>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
   152f0:	f06f 010d 	mvn.w	r1, #13
				discovery_complete_error(dm, err);
   152f4:	4620      	mov	r0, r4
   152f6:	e076      	b.n	153e6 <discovery_callback+0x11a>
		return BT_GATT_ITER_STOP;
	}

	switch (params->type) {
   152f8:	7c13      	ldrb	r3, [r2, #16]
   152fa:	2b03      	cmp	r3, #3
   152fc:	f000 80d6 	beq.w	154ac <discovery_callback+0x1e0>
   15300:	d811      	bhi.n	15326 <discovery_callback+0x5a>
   15302:	2b02      	cmp	r3, #2
   15304:	d131      	bne.n	1536a <discovery_callback+0x9e>
		return discovery_process_characteristic(&bt_gatt_dm_inst,
							attr,
							params);
	default:
		/* This should not be possible */
		__ASSERT(false, "Unknown param type.");
   15306:	f240 13b3 	movw	r3, #435	; 0x1b3
   1530a:	4a87      	ldr	r2, [pc, #540]	; (15528 <discovery_callback+0x25c>)
   1530c:	4987      	ldr	r1, [pc, #540]	; (1552c <discovery_callback+0x260>)
   1530e:	4888      	ldr	r0, [pc, #544]	; (15530 <discovery_callback+0x264>)
   15310:	f011 fa04 	bl	2671c <printk>
   15314:	4887      	ldr	r0, [pc, #540]	; (15534 <discovery_callback+0x268>)
   15316:	f011 fa01 	bl	2671c <printk>
   1531a:	f240 11b3 	movw	r1, #435	; 0x1b3
   1531e:	4882      	ldr	r0, [pc, #520]	; (15528 <discovery_callback+0x25c>)
   15320:	f011 fca1 	bl	26c66 <assert_post_action>
   15324:	e025      	b.n	15372 <discovery_callback+0xa6>
	switch (params->type) {
   15326:	2b05      	cmp	r3, #5
   15328:	d1ed      	bne.n	15306 <discovery_callback+0x3a>
	if (!attr) {
   1532a:	2900      	cmp	r1, #0
   1532c:	f040 809f 	bne.w	1546e <discovery_callback+0x1a2>
		if (dm->cur_attr_id > 1) {
   15330:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   15334:	2b01      	cmp	r3, #1
   15336:	f240 8097 	bls.w	15468 <discovery_callback+0x19c>
				dm->attrs[0].handle + 1;
   1533a:	8c23      	ldrh	r3, [r4, #32]
			int err = bt_gatt_discover(dm->conn,
   1533c:	f104 0108 	add.w	r1, r4, #8
				dm->attrs[0].handle + 1;
   15340:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
   15342:	8223      	strh	r3, [r4, #16]
			dm->discover_params.type =
   15344:	2303      	movs	r3, #3
   15346:	7623      	strb	r3, [r4, #24]
			int err = bt_gatt_discover(dm->conn,
   15348:	f007 fee6 	bl	1d118 <bt_gatt_discover>
			if (err) {
   1534c:	4606      	mov	r6, r0
   1534e:	b180      	cbz	r0, 15372 <discovery_callback+0xa6>
   15350:	4b72      	ldr	r3, [pc, #456]	; (1551c <discovery_callback+0x250>)
   15352:	4a73      	ldr	r2, [pc, #460]	; (15520 <discovery_callback+0x254>)
				LOG_ERR("Characteristic discover failed,"
   15354:	4601      	mov	r1, r0
   15356:	1ad2      	subs	r2, r2, r3
   15358:	08d2      	lsrs	r2, r2, #3
   1535a:	0192      	lsls	r2, r2, #6
   1535c:	4876      	ldr	r0, [pc, #472]	; (15538 <discovery_callback+0x26c>)
   1535e:	f042 0201 	orr.w	r2, r2, #1
   15362:	f011 fcf2 	bl	26d4a <log_1>
				discovery_complete_error(dm, err);
   15366:	4631      	mov	r1, r6
   15368:	e7c4      	b.n	152f4 <discovery_callback+0x28>
	if (!attr) {
   1536a:	b921      	cbnz	r1, 15376 <discovery_callback+0xaa>
		discovery_complete_not_found(dm);
   1536c:	4620      	mov	r0, r4
   1536e:	f012 fad1 	bl	27914 <discovery_complete_not_found>
		__ASSERT(false, "Unknown param type.");
   15372:	2400      	movs	r4, #0
   15374:	e05a      	b.n	1542c <discovery_callback+0x160>
	struct bt_gatt_service_val *service_val = attr->user_data;
   15376:	f8d1 800c 	ldr.w	r8, [r1, #12]
		attr_store(dm, attr, sizeof(*service_val));
   1537a:	4628      	mov	r0, r5
   1537c:	2108      	movs	r1, #8
   1537e:	f7ff ff11 	bl	151a4 <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
   15382:	2400      	movs	r4, #0
   15384:	f44f 5320 	mov.w	r3, #10240	; 0x2800
		attr_store(dm, attr, sizeof(*service_val));
   15388:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
   1538a:	a901      	add	r1, sp, #4
   1538c:	6828      	ldr	r0, [r5, #0]
   1538e:	f88d 4004 	strb.w	r4, [sp, #4]
   15392:	f8ad 3006 	strh.w	r3, [sp, #6]
   15396:	f013 f997 	bl	286c8 <bt_uuid_cmp>
   1539a:	b1b0      	cbz	r0, 153ca <discovery_callback+0xfe>
   1539c:	f642 0301 	movw	r3, #10241	; 0x2801
   153a0:	4669      	mov	r1, sp
   153a2:	6828      	ldr	r0, [r5, #0]
   153a4:	f88d 4000 	strb.w	r4, [sp]
   153a8:	f8ad 3002 	strh.w	r3, [sp, #2]
   153ac:	f013 f98c 	bl	286c8 <bt_uuid_cmp>
   153b0:	b158      	cbz	r0, 153ca <discovery_callback+0xfe>
   153b2:	4962      	ldr	r1, [pc, #392]	; (1553c <discovery_callback+0x270>)
   153b4:	485e      	ldr	r0, [pc, #376]	; (15530 <discovery_callback+0x264>)
   153b6:	f240 1317 	movw	r3, #279	; 0x117
   153ba:	4a5b      	ldr	r2, [pc, #364]	; (15528 <discovery_callback+0x25c>)
   153bc:	f011 f9ae 	bl	2671c <printk>
   153c0:	f240 1117 	movw	r1, #279	; 0x117
   153c4:	4858      	ldr	r0, [pc, #352]	; (15528 <discovery_callback+0x25c>)
   153c6:	f011 fc4e 	bl	26c66 <assert_post_action>
	if (!cur_attr) {
   153ca:	b97e      	cbnz	r6, 153ec <discovery_callback+0x120>
   153cc:	4b53      	ldr	r3, [pc, #332]	; (1551c <discovery_callback+0x250>)
   153ce:	4954      	ldr	r1, [pc, #336]	; (15520 <discovery_callback+0x254>)
		LOG_ERR("Not enough memory for service attribute.");
   153d0:	485b      	ldr	r0, [pc, #364]	; (15540 <discovery_callback+0x274>)
   153d2:	1ac9      	subs	r1, r1, r3
   153d4:	08c9      	lsrs	r1, r1, #3
   153d6:	0189      	lsls	r1, r1, #6
   153d8:	f041 0101 	orr.w	r1, r1, #1
   153dc:	f011 fca8 	bl	26d30 <log_0>
		discovery_complete_error(dm, -ENOMEM);
   153e0:	f06f 010b 	mvn.w	r1, #11
   153e4:	484c      	ldr	r0, [pc, #304]	; (15518 <discovery_callback+0x24c>)
				discovery_complete_error(dm, err);
   153e6:	f012 faa9 	bl	2793c <discovery_complete_error>
   153ea:	e7c2      	b.n	15372 <discovery_callback+0xa6>
		bt_gatt_dm_attr_service_val(cur_attr);
   153ec:	4630      	mov	r0, r6
   153ee:	f012 fabb 	bl	27968 <bt_gatt_dm_attr_service_val>
   153f2:	4605      	mov	r5, r0
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
   153f4:	2208      	movs	r2, #8
   153f6:	4641      	mov	r1, r8
   153f8:	f013 f8cb 	bl	28592 <memcpy>
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
   153fc:	6828      	ldr	r0, [r5, #0]
   153fe:	f7ff ff3b 	bl	15278 <uuid_store.constprop.0>
   15402:	4604      	mov	r4, r0
   15404:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
   15406:	b960      	cbnz	r0, 15422 <discovery_callback+0x156>
   15408:	4945      	ldr	r1, [pc, #276]	; (15520 <discovery_callback+0x254>)
   1540a:	4b44      	ldr	r3, [pc, #272]	; (1551c <discovery_callback+0x250>)
		LOG_ERR("Not enough memory for service attribute data.");
   1540c:	484d      	ldr	r0, [pc, #308]	; (15544 <discovery_callback+0x278>)
   1540e:	1ac9      	subs	r1, r1, r3
   15410:	08c9      	lsrs	r1, r1, #3
   15412:	0189      	lsls	r1, r1, #6
   15414:	f041 0101 	orr.w	r1, r1, #1
   15418:	f011 fc8a 	bl	26d30 <log_0>
		discovery_complete_error(dm, -ENOMEM);
   1541c:	f06f 010b 	mvn.w	r1, #11
   15420:	e066      	b.n	154f0 <discovery_callback+0x224>
	if (cur_attr->handle == cur_service_val->end_handle) {
   15422:	88aa      	ldrh	r2, [r5, #4]
   15424:	88b3      	ldrh	r3, [r6, #4]
   15426:	4293      	cmp	r3, r2
   15428:	d104      	bne.n	15434 <discovery_callback+0x168>
		return BT_GATT_ITER_CONTINUE;
   1542a:	2401      	movs	r4, #1
		break;
	}

	return BT_GATT_ITER_STOP;
}
   1542c:	4620      	mov	r0, r4
   1542e:	b002      	add	sp, #8
   15430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
   15434:	2305      	movs	r3, #5
	dm->discover_params.uuid         = NULL;
   15436:	2400      	movs	r4, #0
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
   15438:	763b      	strb	r3, [r7, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
   1543a:	88b3      	ldrh	r3, [r6, #4]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
   1543c:	4942      	ldr	r1, [pc, #264]	; (15548 <discovery_callback+0x27c>)
	dm->discover_params.start_handle = cur_attr->handle + 1;
   1543e:	3301      	adds	r3, #1
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
   15440:	6838      	ldr	r0, [r7, #0]
	dm->discover_params.uuid         = NULL;
   15442:	60bc      	str	r4, [r7, #8]
	dm->discover_params.start_handle = cur_attr->handle + 1;
   15444:	823b      	strh	r3, [r7, #16]
	dm->discover_params.end_handle   = cur_service_val->end_handle;
   15446:	82fa      	strh	r2, [r7, #22]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
   15448:	f007 fe66 	bl	1d118 <bt_gatt_discover>
	if (err) {
   1544c:	4601      	mov	r1, r0
   1544e:	2800      	cmp	r0, #0
   15450:	d08f      	beq.n	15372 <discovery_callback+0xa6>
   15452:	4a33      	ldr	r2, [pc, #204]	; (15520 <discovery_callback+0x254>)
   15454:	4b31      	ldr	r3, [pc, #196]	; (1551c <discovery_callback+0x250>)
		LOG_ERR("Descriptor discover failed, error: %d.", err);
   15456:	483d      	ldr	r0, [pc, #244]	; (1554c <discovery_callback+0x280>)
   15458:	1ad2      	subs	r2, r2, r3
   1545a:	08d2      	lsrs	r2, r2, #3
   1545c:	0192      	lsls	r2, r2, #6
   1545e:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Not enough memory for next attribute descriptor"
   15462:	f011 fc72 	bl	26d4a <log_1>
		discovery_complete_error(dm, -ENOMEM);
   15466:	e7d9      	b.n	1541c <discovery_callback+0x150>
			discovery_complete(dm);
   15468:	f7ff fef2 	bl	15250 <discovery_complete.constprop.0>
   1546c:	e781      	b.n	15372 <discovery_callback+0xa6>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1546e:	2400      	movs	r4, #0
   15470:	f642 0303 	movw	r3, #10243	; 0x2803
   15474:	6828      	ldr	r0, [r5, #0]
   15476:	a901      	add	r1, sp, #4
   15478:	f88d 4004 	strb.w	r4, [sp, #4]
   1547c:	f8ad 3006 	strh.w	r3, [sp, #6]
   15480:	f013 f922 	bl	286c8 <bt_uuid_cmp>
   15484:	b980      	cbnz	r0, 154a8 <discovery_callback+0x1dc>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
   15486:	2108      	movs	r1, #8
		cur_attr = attr_store(dm, attr, 0);
   15488:	4628      	mov	r0, r5
   1548a:	f7ff fe8b 	bl	151a4 <attr_store.constprop.0>
   1548e:	4604      	mov	r4, r0
	if (!cur_attr) {
   15490:	2800      	cmp	r0, #0
   15492:	d1ca      	bne.n	1542a <discovery_callback+0x15e>
   15494:	4a22      	ldr	r2, [pc, #136]	; (15520 <discovery_callback+0x254>)
   15496:	4b21      	ldr	r3, [pc, #132]	; (1551c <discovery_callback+0x250>)
		LOG_ERR("Not enough memory for next attribute descriptor"
   15498:	8a29      	ldrh	r1, [r5, #16]
   1549a:	1ad2      	subs	r2, r2, r3
   1549c:	08d2      	lsrs	r2, r2, #3
   1549e:	0192      	lsls	r2, r2, #6
   154a0:	482b      	ldr	r0, [pc, #172]	; (15550 <discovery_callback+0x284>)
   154a2:	f042 0201 	orr.w	r2, r2, #1
   154a6:	e7dc      	b.n	15462 <discovery_callback+0x196>
		cur_attr = attr_store(dm, attr, 0);
   154a8:	4621      	mov	r1, r4
   154aa:	e7ed      	b.n	15488 <discovery_callback+0x1bc>
	if (!attr) {
   154ac:	2900      	cmp	r1, #0
   154ae:	d0db      	beq.n	15468 <discovery_callback+0x19c>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
   154b0:	2300      	movs	r3, #0
   154b2:	f88d 3004 	strb.w	r3, [sp, #4]
   154b6:	f642 0303 	movw	r3, #10243	; 0x2803
   154ba:	6828      	ldr	r0, [r5, #0]
   154bc:	a901      	add	r1, sp, #4
   154be:	f8ad 3006 	strh.w	r3, [sp, #6]
   154c2:	f013 f901 	bl	286c8 <bt_uuid_cmp>
   154c6:	b158      	cbz	r0, 154e0 <discovery_callback+0x214>
   154c8:	4922      	ldr	r1, [pc, #136]	; (15554 <discovery_callback+0x288>)
   154ca:	4819      	ldr	r0, [pc, #100]	; (15530 <discovery_callback+0x264>)
   154cc:	f44f 73c0 	mov.w	r3, #384	; 0x180
   154d0:	4a15      	ldr	r2, [pc, #84]	; (15528 <discovery_callback+0x25c>)
   154d2:	f011 f923 	bl	2671c <printk>
   154d6:	f44f 71c0 	mov.w	r1, #384	; 0x180
   154da:	4813      	ldr	r0, [pc, #76]	; (15528 <discovery_callback+0x25c>)
   154dc:	f011 fbc3 	bl	26c66 <assert_post_action>
	cur_attr = attr_find_by_handle(dm, attr->handle);
   154e0:	8a29      	ldrh	r1, [r5, #16]
   154e2:	480d      	ldr	r0, [pc, #52]	; (15518 <discovery_callback+0x24c>)
   154e4:	f012 f9d6 	bl	27894 <attr_find_by_handle>
	if (!cur_attr) {
   154e8:	4604      	mov	r4, r0
   154ea:	b928      	cbnz	r0, 154f8 <discovery_callback+0x22c>
		discovery_complete_error(dm, -ESRCH);
   154ec:	f06f 0102 	mvn.w	r1, #2
		discovery_complete_error(dm, -ENOMEM);
   154f0:	4809      	ldr	r0, [pc, #36]	; (15518 <discovery_callback+0x24c>)
   154f2:	f012 fa23 	bl	2793c <discovery_complete_error>
		return BT_GATT_ITER_STOP;
   154f6:	e799      	b.n	1542c <discovery_callback+0x160>
	gatt_chrc = attr->user_data;
   154f8:	68ec      	ldr	r4, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
   154fa:	f012 fa55 	bl	279a8 <bt_gatt_dm_attr_chrc_val>
   154fe:	4605      	mov	r5, r0
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
   15500:	4621      	mov	r1, r4
   15502:	2208      	movs	r2, #8
   15504:	f013 f845 	bl	28592 <memcpy>
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
   15508:	6828      	ldr	r0, [r5, #0]
   1550a:	f7ff feb5 	bl	15278 <uuid_store.constprop.0>
   1550e:	4604      	mov	r4, r0
   15510:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
   15512:	2800      	cmp	r0, #0
   15514:	d189      	bne.n	1542a <discovery_callback+0x15e>
   15516:	e781      	b.n	1541c <discovery_callback+0x150>
   15518:	200095a4 	.word	0x200095a4
   1551c:	0002bfe4 	.word	0x0002bfe4
   15520:	0002c014 	.word	0x0002c014
   15524:	0002ddc3 	.word	0x0002ddc3
   15528:	0002dcfb 	.word	0x0002dcfb
   1552c:	0002dee4 	.word	0x0002dee4
   15530:	0002cfb2 	.word	0x0002cfb2
   15534:	0002e04c 	.word	0x0002e04c
   15538:	0002df64 	.word	0x0002df64
   1553c:	0002dde5 	.word	0x0002dde5
   15540:	0002dee6 	.word	0x0002dee6
   15544:	0002df0f 	.word	0x0002df0f
   15548:	200095ac 	.word	0x200095ac
   1554c:	0002df3d 	.word	0x0002df3d
   15550:	0002df8f 	.word	0x0002df8f
   15554:	0002dfcd 	.word	0x0002dfcd

00015558 <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
   15558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1555c:	4606      	mov	r6, r0
   1555e:	460f      	mov	r7, r1
	const struct bt_gatt_dm_attr *curr = NULL;
   15560:	2400      	movs	r4, #0

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);

		__ASSERT_NO_MSG(chrc != NULL);
   15562:	f8df 8048 	ldr.w	r8, [pc, #72]	; 155ac <bt_gatt_dm_char_by_uuid+0x54>
   15566:	f8df 9048 	ldr.w	r9, [pc, #72]	; 155b0 <bt_gatt_dm_char_by_uuid+0x58>
   1556a:	f8df a048 	ldr.w	sl, [pc, #72]	; 155b4 <bt_gatt_dm_char_by_uuid+0x5c>
	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
   1556e:	4621      	mov	r1, r4
   15570:	4630      	mov	r0, r6
   15572:	f012 fa31 	bl	279d8 <bt_gatt_dm_char_next>
   15576:	4604      	mov	r4, r0
   15578:	b1a8      	cbz	r0, 155a6 <bt_gatt_dm_char_by_uuid+0x4e>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
   1557a:	f012 fa15 	bl	279a8 <bt_gatt_dm_attr_chrc_val>
		__ASSERT_NO_MSG(chrc != NULL);
   1557e:	4605      	mov	r5, r0
   15580:	b958      	cbnz	r0, 1559a <bt_gatt_dm_char_by_uuid+0x42>
   15582:	4649      	mov	r1, r9
   15584:	4650      	mov	r0, sl
   15586:	f240 13fb 	movw	r3, #507	; 0x1fb
   1558a:	4642      	mov	r2, r8
   1558c:	f011 f8c6 	bl	2671c <printk>
   15590:	f240 11fb 	movw	r1, #507	; 0x1fb
   15594:	4640      	mov	r0, r8
   15596:	f011 fb66 	bl	26c66 <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
   1559a:	4638      	mov	r0, r7
   1559c:	6829      	ldr	r1, [r5, #0]
   1559e:	f013 f893 	bl	286c8 <bt_uuid_cmp>
   155a2:	2800      	cmp	r0, #0
   155a4:	d1e3      	bne.n	1556e <bt_gatt_dm_char_by_uuid+0x16>
			return curr;
		}
	}

	return NULL;
}
   155a6:	4620      	mov	r0, r4
   155a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   155ac:	0002dcfb 	.word	0x0002dcfb
   155b0:	0002e062 	.word	0x0002e062
   155b4:	0002cfb2 	.word	0x0002cfb2

000155b8 <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
   155b8:	b570      	push	{r4, r5, r6, lr}
   155ba:	4605      	mov	r5, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
   155bc:	4608      	mov	r0, r1
   155be:	b119      	cbz	r1, 155c8 <bt_gatt_dm_start+0x10>
   155c0:	7809      	ldrb	r1, [r1, #0]
   155c2:	f011 0ffd 	tst.w	r1, #253	; 0xfd
   155c6:	d13f      	bne.n	15648 <bt_gatt_dm_start+0x90>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
   155c8:	2a00      	cmp	r2, #0
   155ca:	d03d      	beq.n	15648 <bt_gatt_dm_start+0x90>
   155cc:	4c21      	ldr	r4, [pc, #132]	; (15654 <bt_gatt_dm_start+0x9c>)
   155ce:	f504 769c 	add.w	r6, r4, #312	; 0x138
   155d2:	e8d6 1fef 	ldaex	r1, [r6]
   155d6:	f041 0c01 	orr.w	ip, r1, #1
   155da:	e8c6 cfee 	stlex	lr, ip, [r6]
   155de:	f1be 0f00 	cmp.w	lr, #0
   155e2:	d1f6      	bne.n	155d2 <bt_gatt_dm_start+0x1a>
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
   155e4:	f011 0101 	ands.w	r1, r1, #1
   155e8:	d131      	bne.n	1564e <bt_gatt_dm_start+0x96>
		return -EALREADY;
	}

	dm->conn = conn;
	dm->context = context;
   155ea:	e9c4 5300 	strd	r5, r3, [r4]
	list->tail = NULL;
   155ee:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
	dm->callback = cb;
   155f2:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	dm->cur_attr_id = 0;
   155f6:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
   155fa:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144

	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
   155fe:	b108      	cbz	r0, 15604 <bt_gatt_dm_start+0x4c>
   15600:	f7ff fe3a 	bl	15278 <uuid_store.constprop.0>
	dm->discover_params.func = discovery_callback;
   15604:	4b14      	ldr	r3, [pc, #80]	; (15658 <bt_gatt_dm_start+0xa0>)
	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
   15606:	60a0      	str	r0, [r4, #8]
	dm->discover_params.func = discovery_callback;
   15608:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
   1560a:	2301      	movs	r3, #1
   1560c:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
   1560e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15612:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   15614:	2300      	movs	r3, #0

	err = bt_gatt_discover(conn, &dm->discover_params);
   15616:	4628      	mov	r0, r5
   15618:	4910      	ldr	r1, [pc, #64]	; (1565c <bt_gatt_dm_start+0xa4>)
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   1561a:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
   1561c:	f007 fd7c 	bl	1d118 <bt_gatt_discover>
	if (err) {
   15620:	4604      	mov	r4, r0
   15622:	b178      	cbz	r0, 15644 <bt_gatt_dm_start+0x8c>
   15624:	4b0e      	ldr	r3, [pc, #56]	; (15660 <bt_gatt_dm_start+0xa8>)
   15626:	4a0f      	ldr	r2, [pc, #60]	; (15664 <bt_gatt_dm_start+0xac>)
		LOG_ERR("Discover failed, error: %d.", err);
   15628:	4601      	mov	r1, r0
   1562a:	1ad2      	subs	r2, r2, r3
   1562c:	08d2      	lsrs	r2, r2, #3
   1562e:	0192      	lsls	r2, r2, #6
   15630:	480d      	ldr	r0, [pc, #52]	; (15668 <bt_gatt_dm_start+0xb0>)
   15632:	f042 0201 	orr.w	r2, r2, #1
   15636:	f011 fb88 	bl	26d4a <log_1>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1563a:	f06f 0101 	mvn.w	r1, #1
   1563e:	480b      	ldr	r0, [pc, #44]	; (1566c <bt_gatt_dm_start+0xb4>)
   15640:	f012 f95d 	bl	278fe <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
   15644:	4620      	mov	r0, r4
   15646:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   15648:	f06f 0415 	mvn.w	r4, #21
   1564c:	e7fa      	b.n	15644 <bt_gatt_dm_start+0x8c>
		return -EALREADY;
   1564e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   15652:	e7f7      	b.n	15644 <bt_gatt_dm_start+0x8c>
   15654:	200095a4 	.word	0x200095a4
   15658:	000152cd 	.word	0x000152cd
   1565c:	200095ac 	.word	0x200095ac
   15660:	0002bfe4 	.word	0x0002bfe4
   15664:	0002c014 	.word	0x0002c014
   15668:	0002e076 	.word	0x0002e076
   1566c:	200096dc 	.word	0x200096dc

00015670 <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
   15670:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   15672:	4d06      	ldr	r5, [pc, #24]	; (1568c <scan_default_param_set+0x1c>)
{
   15674:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   15676:	ac01      	add	r4, sp, #4
   15678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1567a:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
   1567c:	4c04      	ldr	r4, [pc, #16]	; (15690 <scan_default_param_set+0x20>)
   1567e:	ae01      	add	r6, sp, #4
   15680:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   15682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15684:	682b      	ldr	r3, [r5, #0]
   15686:	6023      	str	r3, [r4, #0]
}
   15688:	b006      	add	sp, #24
   1568a:	bd70      	pop	{r4, r5, r6, pc}
   1568c:	0002c180 	.word	0x0002c180
   15690:	20009720 	.word	0x20009720

00015694 <uuid_check>:
{
   15694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return CONFIG_BT_SCAN_UUID_CNT && bt_scan.scan_filters.uuid.enabled;
   15698:	4c29      	ldr	r4, [pc, #164]	; (15740 <uuid_check+0xac>)
{
   1569a:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
   1569c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
{
   156a0:	4606      	mov	r6, r0
   156a2:	9100      	str	r1, [sp, #0]
   156a4:	9203      	str	r2, [sp, #12]
	if (is_uuid_filter_enabled()) {
   156a6:	2b00      	cmp	r3, #0
   156a8:	d03c      	beq.n	15724 <uuid_check+0x90>
	for (size_t i = 0; i < counter; i++) {
   156aa:	2700      	movs	r7, #0
	uint8_t uuid_match_cnt = 0;
   156ac:	463d      	mov	r5, r7
	uint8_t data_len = data->data_len;
   156ae:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
   156b0:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
   156b4:	f894 a020 	ldrb.w	sl, [r4, #32]
	uint8_t data_len = data->data_len;
   156b8:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
   156ba:	4557      	cmp	r7, sl
   156bc:	d30e      	bcc.n	156dc <uuid_check+0x48>
	control->filter_status.uuid.count = uuid_match_cnt;
   156be:	f886 503c 	strb.w	r5, [r6, #60]	; 0x3c
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
   156c2:	f1bb 0f00 	cmp.w	fp, #0
   156c6:	d02b      	beq.n	15720 <uuid_check+0x8c>
   156c8:	45aa      	cmp	sl, r5
   156ca:	d12b      	bne.n	15724 <uuid_check+0x90>
			control->filter_match_cnt++;
   156cc:	7873      	ldrb	r3, [r6, #1]
   156ce:	3301      	adds	r3, #1
   156d0:	7073      	strb	r3, [r6, #1]
			control->filter_status.uuid.match = true;
   156d2:	2301      	movs	r3, #1
   156d4:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
			control->filter_match = true;
   156d8:	70b3      	strb	r3, [r6, #2]
}
   156da:	e023      	b.n	15724 <uuid_check+0x90>
	for (size_t i = 0; i < data_len; i += uuid_len) {
   156dc:	f04f 0900 	mov.w	r9, #0
		if (find_uuid(data->data, data_len, uuid_type,
   156e0:	9b00      	ldr	r3, [sp, #0]
   156e2:	9a03      	ldr	r2, [sp, #12]
   156e4:	685b      	ldr	r3, [r3, #4]
   156e6:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
   156e8:	4b16      	ldr	r3, [pc, #88]	; (15744 <uuid_check+0xb0>)
   156ea:	f813 8002 	ldrb.w	r8, [r3, r2]
	for (size_t i = 0; i < data_len; i += uuid_len) {
   156ee:	9b01      	ldr	r3, [sp, #4]
   156f0:	4599      	cmp	r9, r3
   156f2:	d305      	bcc.n	15700 <uuid_check+0x6c>
		} else if (all_filters_mode) {
   156f4:	f1bb 0f00 	cmp.w	fp, #0
   156f8:	d1e1      	bne.n	156be <uuid_check+0x2a>
	for (size_t i = 0; i < counter; i++) {
   156fa:	3701      	adds	r7, #1
   156fc:	3418      	adds	r4, #24
   156fe:	e7dc      	b.n	156ba <uuid_check+0x26>
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
   15700:	9b02      	ldr	r3, [sp, #8]
   15702:	4642      	mov	r2, r8
   15704:	eb03 0109 	add.w	r1, r3, r9
   15708:	a805      	add	r0, sp, #20
   1570a:	f013 f807 	bl	2871c <bt_uuid_create>
   1570e:	2800      	cmp	r0, #0
   15710:	d0f0      	beq.n	156f4 <uuid_check+0x60>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
   15712:	68a1      	ldr	r1, [r4, #8]
   15714:	a805      	add	r0, sp, #20
   15716:	f012 ffd7 	bl	286c8 <bt_uuid_cmp>
   1571a:	b130      	cbz	r0, 1572a <uuid_check+0x96>
	for (size_t i = 0; i < data_len; i += uuid_len) {
   1571c:	44c1      	add	r9, r8
   1571e:	e7e6      	b.n	156ee <uuid_check+0x5a>
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
   15720:	2d00      	cmp	r5, #0
   15722:	d1d3      	bne.n	156cc <uuid_check+0x38>
}
   15724:	b00b      	add	sp, #44	; 0x2c
   15726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				uuid_filter->uuid[i].uuid;
   1572a:	68a1      	ldr	r1, [r4, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
   1572c:	eb06 0285 	add.w	r2, r6, r5, lsl #2
			uuid_match_cnt++;
   15730:	3501      	adds	r5, #1
			control->filter_status.uuid.uuid[uuid_match_cnt] =
   15732:	6391      	str	r1, [r2, #56]	; 0x38
			uuid_match_cnt++;
   15734:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
   15736:	f1bb 0f00 	cmp.w	fp, #0
   1573a:	d1de      	bne.n	156fa <uuid_check+0x66>
   1573c:	e7bf      	b.n	156be <uuid_check+0x2a>
   1573e:	bf00      	nop
   15740:	200096f0 	.word	0x200096f0
   15744:	0002e0ac 	.word	0x0002e0ac

00015748 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
   15748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1574a:	4605      	mov	r5, r0
   1574c:	460e      	mov	r6, r1
   1574e:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   15750:	4b08      	ldr	r3, [pc, #32]	; (15774 <notify_filter_matched.constprop.0+0x2c>)
   15752:	681c      	ldr	r4, [r3, #0]
   15754:	b10c      	cbz	r4, 1575a <notify_filter_matched.constprop.0+0x12>
   15756:	3c04      	subs	r4, #4
   15758:	b904      	cbnz	r4, 1575c <notify_filter_matched.constprop.0+0x14>
}
   1575a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
   1575c:	6823      	ldr	r3, [r4, #0]
   1575e:	681b      	ldr	r3, [r3, #0]
   15760:	b11b      	cbz	r3, 1576a <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
   15762:	463a      	mov	r2, r7
   15764:	4631      	mov	r1, r6
   15766:	4628      	mov	r0, r5
   15768:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1576a:	1d23      	adds	r3, r4, #4
   1576c:	d0f5      	beq.n	1575a <notify_filter_matched.constprop.0+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1576e:	6864      	ldr	r4, [r4, #4]
   15770:	e7f0      	b.n	15754 <notify_filter_matched.constprop.0+0xc>
   15772:	bf00      	nop
   15774:	2000973c 	.word	0x2000973c

00015778 <bt_scan_cb_register>:
	if (!cb) {
   15778:	b150      	cbz	r0, 15790 <bt_scan_cb_register+0x18>
	parent->next = child;
   1577a:	2300      	movs	r3, #0
   1577c:	6043      	str	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   1577e:	4b05      	ldr	r3, [pc, #20]	; (15794 <bt_scan_cb_register+0x1c>)
	sys_slist_append(&callback_list, &cb->node);
   15780:	1d02      	adds	r2, r0, #4
   15782:	6859      	ldr	r1, [r3, #4]
   15784:	b911      	cbnz	r1, 1578c <bt_scan_cb_register+0x14>
	list->head = node;
   15786:	e9c3 2200 	strd	r2, r2, [r3]
}
   1578a:	4770      	bx	lr
	parent->next = child;
   1578c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1578e:	605a      	str	r2, [r3, #4]
}
   15790:	4770      	bx	lr
   15792:	bf00      	nop
   15794:	2000973c 	.word	0x2000973c

00015798 <bt_scan_filter_add>:
	bt_scan.conn_param = *conn_param;
}

int bt_scan_filter_add(enum bt_scan_filter_type type,
		       const void *data)
{
   15798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1579a:	4605      	mov	r5, r0
	struct bt_uuid *uuid;
	uint16_t appearance;
	struct bt_scan_manufacturer_data *manufacturer_data;
	int err = 0;

	if (!data) {
   1579c:	460c      	mov	r4, r1
   1579e:	2900      	cmp	r1, #0
   157a0:	d048      	beq.n	15834 <bt_scan_filter_add+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
   157a2:	f04f 32ff 	mov.w	r2, #4294967295
   157a6:	f04f 33ff 	mov.w	r3, #4294967295
   157aa:	4824      	ldr	r0, [pc, #144]	; (1583c <bt_scan_filter_add+0xa4>)
   157ac:	f00d fb4e 	bl	22e4c <z_impl_k_mutex_lock>
		return -EINVAL;
	}

	k_mutex_lock(&scan_mutex, K_FOREVER);

	switch (type) {
   157b0:	2d03      	cmp	r5, #3
   157b2:	d00c      	beq.n	157ce <bt_scan_filter_add+0x36>
   157b4:	d938      	bls.n	15828 <bt_scan_filter_add+0x90>
   157b6:	3d04      	subs	r5, #4
		manufacturer_data = (struct bt_scan_manufacturer_data *)data;
		err = scan_manufacturer_data_filter_add(manufacturer_data);
		break;

	default:
		err = -EINVAL;
   157b8:	2d01      	cmp	r5, #1
   157ba:	bf94      	ite	ls
   157bc:	f06f 040b 	mvnls.w	r4, #11
   157c0:	f06f 0415 	mvnhi.w	r4, #21
	return z_impl_k_mutex_unlock(mutex);
   157c4:	481d      	ldr	r0, [pc, #116]	; (1583c <bt_scan_filter_add+0xa4>)
   157c6:	f00d fc3b 	bl	23040 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&scan_mutex);

	return err;
}
   157ca:	4620      	mov	r0, r4
   157cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
   157ce:	4a1c      	ldr	r2, [pc, #112]	; (15840 <bt_scan_filter_add+0xa8>)
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
   157d0:	f892 3020 	ldrb.w	r3, [r2, #32]
   157d4:	bb43      	cbnz	r3, 15828 <bt_scan_filter_add+0x90>
	switch (uuid->type) {
   157d6:	7823      	ldrb	r3, [r4, #0]
   157d8:	2b01      	cmp	r3, #1
   157da:	d00c      	beq.n	157f6 <bt_scan_filter_add+0x5e>
   157dc:	2b02      	cmp	r3, #2
   157de:	d011      	beq.n	15804 <bt_scan_filter_add+0x6c>
   157e0:	bb2b      	cbnz	r3, 1582e <bt_scan_filter_add+0x96>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
   157e2:	6820      	ldr	r0, [r4, #0]
   157e4:	f102 030c 	add.w	r3, r2, #12
   157e8:	60d0      	str	r0, [r2, #12]
		uuid_filter[counter].uuid =
   157ea:	6093      	str	r3, [r2, #8]
	bt_scan.scan_filters.uuid.cnt++;
   157ec:	2301      	movs	r3, #1
	return 0;
   157ee:	2400      	movs	r4, #0
	bt_scan.scan_filters.uuid.cnt++;
   157f0:	f882 3020 	strb.w	r3, [r2, #32]
	return 0;
   157f4:	e7e6      	b.n	157c4 <bt_scan_filter_add+0x2c>
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
   157f6:	f102 030c 	add.w	r3, r2, #12
   157fa:	e894 0003 	ldmia.w	r4, {r0, r1}
   157fe:	e883 0003 	stmia.w	r3, {r0, r1}
   15802:	e7f2      	b.n	157ea <bt_scan_filter_add+0x52>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
   15804:	4623      	mov	r3, r4
   15806:	f102 040c 	add.w	r4, r2, #12
   1580a:	4626      	mov	r6, r4
   1580c:	f103 0710 	add.w	r7, r3, #16
   15810:	4625      	mov	r5, r4
   15812:	6818      	ldr	r0, [r3, #0]
   15814:	6859      	ldr	r1, [r3, #4]
   15816:	3308      	adds	r3, #8
   15818:	c503      	stmia	r5!, {r0, r1}
   1581a:	42bb      	cmp	r3, r7
   1581c:	462c      	mov	r4, r5
   1581e:	d1f7      	bne.n	15810 <bt_scan_filter_add+0x78>
   15820:	781b      	ldrb	r3, [r3, #0]
   15822:	702b      	strb	r3, [r5, #0]
		uuid_filter[counter].uuid =
   15824:	6096      	str	r6, [r2, #8]
		break;
   15826:	e7e1      	b.n	157ec <bt_scan_filter_add+0x54>
		return -ENOMEM;
   15828:	f06f 040b 	mvn.w	r4, #11
   1582c:	e7ca      	b.n	157c4 <bt_scan_filter_add+0x2c>
	switch (uuid->type) {
   1582e:	f06f 0415 	mvn.w	r4, #21
   15832:	e7c7      	b.n	157c4 <bt_scan_filter_add+0x2c>
		return -EINVAL;
   15834:	f06f 0415 	mvn.w	r4, #21
   15838:	e7c7      	b.n	157ca <bt_scan_filter_add+0x32>
   1583a:	bf00      	nop
   1583c:	20008528 	.word	0x20008528
   15840:	200096f0 	.word	0x200096f0

00015844 <bt_scan_filter_disable>:
}

void bt_scan_filter_disable(void)
{
	/* Disable all filters. */
	bt_scan.scan_filters.name.enabled = false;
   15844:	2200      	movs	r2, #0
   15846:	4b05      	ldr	r3, [pc, #20]	; (1585c <bt_scan_filter_disable+0x18>)
   15848:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
   1584a:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
   1584c:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
   1584e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	bt_scan.scan_filters.appearance.enabled = false;
   15852:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	bt_scan.scan_filters.manufacturer_data.enabled = false;
   15856:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
   1585a:	4770      	bx	lr
   1585c:	200096f0 	.word	0x200096f0

00015860 <bt_scan_filter_enable>:

int bt_scan_filter_enable(uint8_t mode, bool match_all)
{
   15860:	b508      	push	{r3, lr}
	/* Check if the mode is correct. */
	if (!check_filter_mode(mode)) {
   15862:	0683      	lsls	r3, r0, #26
   15864:	d025      	beq.n	158b2 <bt_scan_filter_enable+0x52>
		return -EINVAL;
	}

	/* Disable filters. */
	bt_scan_filter_disable();
   15866:	f7ff ffed 	bl	15844 <bt_scan_filter_disable>

	struct bt_scan_filters *filters = &bt_scan.scan_filters;

	/* Turn on the filters of your choice. */
	if (mode & BT_SCAN_ADDR_FILTER) {
   1586a:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
   1586e:	bf18      	it	ne
   15870:	2201      	movne	r2, #1
   15872:	4b11      	ldr	r3, [pc, #68]	; (158b8 <bt_scan_filter_enable+0x58>)
   15874:	bf18      	it	ne
   15876:	715a      	strbne	r2, [r3, #5]
	}

	if (mode & BT_SCAN_NAME_FILTER) {
   15878:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
   1587a:	bf44      	itt	mi
   1587c:	2201      	movmi	r2, #1
   1587e:	705a      	strbmi	r2, [r3, #1]
	}

	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
   15880:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
   15882:	bf44      	itt	mi
   15884:	2201      	movmi	r2, #1
   15886:	70da      	strbmi	r2, [r3, #3]
	}

	if (mode & BT_SCAN_UUID_FILTER) {
   15888:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
   1588a:	bf44      	itt	mi
   1588c:	2201      	movmi	r2, #1
   1588e:	f883 2021 	strbmi.w	r2, [r3, #33]	; 0x21
	}

	if (mode & BT_SCAN_APPEARANCE_FILTER) {
   15892:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
   15894:	bf44      	itt	mi
   15896:	2201      	movmi	r2, #1
   15898:	f883 2025 	strbmi.w	r2, [r3, #37]	; 0x25
	}

	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
   1589c:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
   1589e:	bf48      	it	mi
   158a0:	2201      	movmi	r2, #1
	}

	/* Select the filter mode. */
	filters->all_mode = match_all;

	return 0;
   158a2:	f04f 0000 	mov.w	r0, #0
		filters->manufacturer_data.enabled = true;
   158a6:	bf48      	it	mi
   158a8:	f883 2027 	strbmi.w	r2, [r3, #39]	; 0x27
	filters->all_mode = match_all;
   158ac:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
}
   158b0:	bd08      	pop	{r3, pc}
		return -EINVAL;
   158b2:	f06f 0015 	mvn.w	r0, #21
   158b6:	e7fb      	b.n	158b0 <bt_scan_filter_enable+0x50>
   158b8:	200096f0 	.word	0x200096f0

000158bc <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
   158bc:	b570      	push	{r4, r5, r6, lr}
   158be:	460e      	mov	r6, r1
   158c0:	b086      	sub	sp, #24
   158c2:	4605      	mov	r5, r0
	bt_scan_stop();
   158c4:	f012 f917 	bl	27af6 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
   158c8:	4b18      	ldr	r3, [pc, #96]	; (1592c <scan_connect_with_target.part.0+0x70>)
   158ca:	ac02      	add	r4, sp, #8
   158cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   158ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
   158d2:	4621      	mov	r1, r4
   158d4:	ab01      	add	r3, sp, #4
   158d6:	4630      	mov	r0, r6
   158d8:	4a15      	ldr	r2, [pc, #84]	; (15930 <scan_connect_with_target.part.0+0x74>)
   158da:	f004 fbe3 	bl	1a0a4 <bt_conn_le_create>
	if (err) {
   158de:	4b15      	ldr	r3, [pc, #84]	; (15934 <scan_connect_with_target.part.0+0x78>)
   158e0:	3508      	adds	r5, #8
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   158e2:	681c      	ldr	r4, [r3, #0]
	if (err) {
   158e4:	b168      	cbz	r0, 15902 <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   158e6:	b10c      	cbz	r4, 158ec <scan_connect_with_target.part.0+0x30>
   158e8:	3c04      	subs	r4, #4
   158ea:	b90c      	cbnz	r4, 158f0 <scan_connect_with_target.part.0+0x34>
}
   158ec:	b006      	add	sp, #24
   158ee:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
   158f0:	6823      	ldr	r3, [r4, #0]
   158f2:	689b      	ldr	r3, [r3, #8]
   158f4:	b10b      	cbz	r3, 158fa <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
   158f6:	4628      	mov	r0, r5
   158f8:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   158fa:	1d22      	adds	r2, r4, #4
   158fc:	d0f6      	beq.n	158ec <scan_connect_with_target.part.0+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   158fe:	6864      	ldr	r4, [r4, #4]
   15900:	e7f1      	b.n	158e6 <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   15902:	b91c      	cbnz	r4, 1590c <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
   15904:	9801      	ldr	r0, [sp, #4]
   15906:	f004 fa31 	bl	19d6c <bt_conn_unref>
   1590a:	e7ef      	b.n	158ec <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
   1590c:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1590e:	3c04      	subs	r4, #4
   15910:	2c00      	cmp	r4, #0
   15912:	d0f7      	beq.n	15904 <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
   15914:	6823      	ldr	r3, [r4, #0]
   15916:	68db      	ldr	r3, [r3, #12]
   15918:	b113      	cbz	r3, 15920 <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
   1591a:	4631      	mov	r1, r6
   1591c:	4628      	mov	r0, r5
   1591e:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   15920:	1d23      	adds	r3, r4, #4
   15922:	d0ef      	beq.n	15904 <scan_connect_with_target.part.0+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15924:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   15926:	2c00      	cmp	r4, #0
   15928:	d1f1      	bne.n	1590e <scan_connect_with_target.part.0+0x52>
   1592a:	e7eb      	b.n	15904 <scan_connect_with_target.part.0+0x48>
   1592c:	0002c194 	.word	0x0002c194
   15930:	20009734 	.word	0x20009734
   15934:	2000973c 	.word	0x2000973c

00015938 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
   15938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   1593c:	4f31      	ldr	r7, [pc, #196]	; (15a04 <scan_recv+0xcc>)
{
   1593e:	b096      	sub	sp, #88	; 0x58
	memset(&scan_control, 0, sizeof(scan_control));
   15940:	2254      	movs	r2, #84	; 0x54
{
   15942:	4605      	mov	r5, r0
   15944:	460c      	mov	r4, r1
	memset(&scan_control, 0, sizeof(scan_control));
   15946:	a801      	add	r0, sp, #4
   15948:	2100      	movs	r1, #0
   1594a:	f012 fe4d 	bl	285e8 <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   1594e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   15952:	f88d 2007 	strb.w	r2, [sp, #7]
	control->filter_cnt = 0;
   15956:	2200      	movs	r2, #0
   15958:	f88d 2004 	strb.w	r2, [sp, #4]
	if (is_uuid_filter_enabled()) {
   1595c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
   15960:	b112      	cbz	r2, 15968 <scan_recv+0x30>
		control->filter_cnt++;
   15962:	2301      	movs	r3, #1
   15964:	f88d 3004 	strb.w	r3, [sp, #4]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
   15968:	7a2b      	ldrb	r3, [r5, #8]
	state->offset = net_buf_simple_headroom(buf);
   1596a:	4620      	mov	r0, r4
   1596c:	f003 0301 	and.w	r3, r3, #1
   15970:	f88d 3008 	strb.w	r3, [sp, #8]
   15974:	f014 fe6f 	bl	2a656 <net_buf_simple_headroom>
   15978:	4606      	mov	r6, r0

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
   1597a:	4923      	ldr	r1, [pc, #140]	; (15a08 <scan_recv+0xd0>)
   1597c:	4620      	mov	r0, r4
   1597e:	aa01      	add	r2, sp, #4
	state->len = buf->len;
   15980:	f8b4 8004 	ldrh.w	r8, [r4, #4]
   15984:	f003 fb1c 	bl	18fc0 <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
   15988:	4b20      	ldr	r3, [pc, #128]	; (15a0c <scan_recv+0xd4>)
	buf->data = buf->__buf + state->offset;
   1598a:	68a0      	ldr	r0, [r4, #8]
	scan_control.device_info.adv_data = ad;
   1598c:	e9cd 3404 	strd	r3, r4, [sp, #16]
	if (control->all_mode &&
   15990:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15994:	fa10 f686 	uxtah	r6, r0, r6
   15998:	6026      	str	r6, [r4, #0]
	buf->len = state->len;
   1599a:	f8a4 8004 	strh.w	r8, [r4, #4]
	scan_control.device_info.recv_info = info;
   1599e:	9503      	str	r5, [sp, #12]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
   159a0:	682c      	ldr	r4, [r5, #0]
	if (control->all_mode &&
   159a2:	b1ab      	cbz	r3, 159d0 <scan_recv+0x98>
   159a4:	f89d 2005 	ldrb.w	r2, [sp, #5]
   159a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   159ac:	429a      	cmp	r2, r3
   159ae:	d113      	bne.n	159d8 <scan_recv+0xa0>
		notify_filter_matched(&control->device_info,
   159b0:	f89d 2008 	ldrb.w	r2, [sp, #8]
   159b4:	a906      	add	r1, sp, #24
   159b6:	a803      	add	r0, sp, #12
   159b8:	f7ff fec6 	bl	15748 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
   159bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   159c0:	b11b      	cbz	r3, 159ca <scan_recv+0x92>
   159c2:	4621      	mov	r1, r4
   159c4:	a801      	add	r0, sp, #4
   159c6:	f7ff ff79 	bl	158bc <scan_connect_with_target.part.0>
}
   159ca:	b016      	add	sp, #88	; 0x58
   159cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if ((!control->all_mode) && control->filter_match) {
   159d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   159d4:	2b00      	cmp	r3, #0
   159d6:	d1eb      	bne.n	159b0 <scan_recv+0x78>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   159d8:	4b0d      	ldr	r3, [pc, #52]	; (15a10 <scan_recv+0xd8>)
   159da:	681c      	ldr	r4, [r3, #0]
   159dc:	2c00      	cmp	r4, #0
   159de:	d0f4      	beq.n	159ca <scan_recv+0x92>
		notify_filter_no_match(&control->device_info,
   159e0:	f89d 5008 	ldrb.w	r5, [sp, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   159e4:	3c04      	subs	r4, #4
   159e6:	2c00      	cmp	r4, #0
   159e8:	d0ef      	beq.n	159ca <scan_recv+0x92>
		if (cb->cb_addr->filter_no_match) {
   159ea:	6823      	ldr	r3, [r4, #0]
   159ec:	685b      	ldr	r3, [r3, #4]
   159ee:	b113      	cbz	r3, 159f6 <scan_recv+0xbe>
			cb->cb_addr->filter_no_match(device_info, connectable);
   159f0:	4629      	mov	r1, r5
   159f2:	a803      	add	r0, sp, #12
   159f4:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   159f6:	1d23      	adds	r3, r4, #4
   159f8:	d0e7      	beq.n	159ca <scan_recv+0x92>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   159fa:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   159fc:	2c00      	cmp	r4, #0
   159fe:	d1f1      	bne.n	159e4 <scan_recv+0xac>
   15a00:	e7e3      	b.n	159ca <scan_recv+0x92>
   15a02:	bf00      	nop
   15a04:	200096f0 	.word	0x200096f0
   15a08:	00027ac5 	.word	0x00027ac5
   15a0c:	20009734 	.word	0x20009734
   15a10:	2000973c 	.word	0x2000973c

00015a14 <bt_scan_init>:
{
   15a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15a16:	4605      	mov	r5, r0
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   15a18:	4c17      	ldr	r4, [pc, #92]	; (15a78 <bt_scan_init+0x64>)
	bt_le_scan_cb_register(&scan_cb);
   15a1a:	4818      	ldr	r0, [pc, #96]	; (15a7c <bt_scan_init+0x68>)
   15a1c:	f003 fc96 	bl	1934c <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   15a20:	222c      	movs	r2, #44	; 0x2c
   15a22:	2100      	movs	r1, #0
   15a24:	4620      	mov	r0, r4
   15a26:	f012 fddf 	bl	285e8 <memset>
	if (init) {
   15a2a:	4627      	mov	r7, r4
   15a2c:	b1d5      	cbz	r5, 15a64 <bt_scan_init+0x50>
		bt_scan.connect_if_match = init->connect_if_match;
   15a2e:	792b      	ldrb	r3, [r5, #4]
   15a30:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (init->scan_param) {
   15a34:	682c      	ldr	r4, [r5, #0]
   15a36:	b164      	cbz	r4, 15a52 <bt_scan_init+0x3e>
			bt_scan.scan_param = *init->scan_param;
   15a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   15a3a:	f107 0630 	add.w	r6, r7, #48	; 0x30
   15a3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   15a40:	6823      	ldr	r3, [r4, #0]
   15a42:	6033      	str	r3, [r6, #0]
		if (init->conn_param) {
   15a44:	68aa      	ldr	r2, [r5, #8]
   15a46:	b13a      	cbz	r2, 15a58 <bt_scan_init+0x44>
			bt_scan.conn_param = *init->conn_param;
   15a48:	4b0d      	ldr	r3, [pc, #52]	; (15a80 <bt_scan_init+0x6c>)
   15a4a:	6810      	ldr	r0, [r2, #0]
   15a4c:	6851      	ldr	r1, [r2, #4]
   15a4e:	c303      	stmia	r3!, {r0, r1}
}
   15a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			scan_default_param_set();
   15a52:	f7ff fe0d 	bl	15670 <scan_default_param_set>
   15a56:	e7f5      	b.n	15a44 <bt_scan_init+0x30>
	bt_scan.conn_param = *conn_param;
   15a58:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   15a5c:	4909      	ldr	r1, [pc, #36]	; (15a84 <bt_scan_init+0x70>)
   15a5e:	e9c7 1311 	strd	r1, r3, [r7, #68]	; 0x44
}
   15a62:	e7f5      	b.n	15a50 <bt_scan_init+0x3c>
		scan_default_param_set();
   15a64:	f7ff fe04 	bl	15670 <scan_default_param_set>
	bt_scan.conn_param = *conn_param;
   15a68:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   15a6c:	4a05      	ldr	r2, [pc, #20]	; (15a84 <bt_scan_init+0x70>)
		bt_scan.connect_if_match = false;
   15a6e:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
	bt_scan.conn_param = *conn_param;
   15a72:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
}
   15a76:	e7eb      	b.n	15a50 <bt_scan_init+0x3c>
   15a78:	200096f0 	.word	0x200096f0
   15a7c:	20008240 	.word	0x20008240
   15a80:	20009734 	.word	0x20009734
   15a84:	00280018 	.word	0x00280018

00015a88 <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
   15a88:	b108      	cbz	r0, 15a8e <bt_scan_start+0x6>
   15a8a:	2801      	cmp	r0, #1
   15a8c:	d106      	bne.n	15a9c <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   15a8e:	4b05      	ldr	r3, [pc, #20]	; (15aa4 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   15a90:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   15a92:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   15a96:	4804      	ldr	r0, [pc, #16]	; (15aa8 <bt_scan_start+0x20>)
   15a98:	f003 bbca 	b.w	19230 <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
   15a9c:	f06f 0015 	mvn.w	r0, #21
   15aa0:	4770      	bx	lr
   15aa2:	bf00      	nop
   15aa4:	200096f0 	.word	0x200096f0
   15aa8:	20009720 	.word	0x20009720

00015aac <bt_nus_handles_assign>:
	return err;
}

int bt_nus_handles_assign(struct bt_gatt_dm *dm,
			  struct bt_nus_client *nus_c)
{
   15aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15ab0:	b097      	sub	sp, #92	; 0x5c
   15ab2:	460e      	mov	r6, r1
   15ab4:	4605      	mov	r5, r0
	const struct bt_gatt_dm_attr *gatt_service_attr =
			bt_gatt_dm_service_get(dm);
   15ab6:	f011 ff8d 	bl	279d4 <bt_gatt_dm_service_get>
	const struct bt_gatt_service_val *gatt_service =
			bt_gatt_dm_attr_service_val(gatt_service_attr);
   15aba:	f011 ff55 	bl	27968 <bt_gatt_dm_attr_service_val>
	const struct bt_gatt_dm_attr *gatt_chrc;
	const struct bt_gatt_dm_attr *gatt_desc;

	if (bt_uuid_cmp(gatt_service->uuid, BT_UUID_NUS_SERVICE)) {
   15abe:	aa11      	add	r2, sp, #68	; 0x44
   15ac0:	4617      	mov	r7, r2
   15ac2:	4b61      	ldr	r3, [pc, #388]	; (15c48 <bt_nus_handles_assign+0x19c>)
   15ac4:	f8d0 c000 	ldr.w	ip, [r0]
   15ac8:	f103 0e10 	add.w	lr, r3, #16
   15acc:	4614      	mov	r4, r2
   15ace:	6818      	ldr	r0, [r3, #0]
   15ad0:	6859      	ldr	r1, [r3, #4]
   15ad2:	3308      	adds	r3, #8
   15ad4:	c403      	stmia	r4!, {r0, r1}
   15ad6:	4573      	cmp	r3, lr
   15ad8:	4622      	mov	r2, r4
   15ada:	d1f7      	bne.n	15acc <bt_nus_handles_assign+0x20>
   15adc:	781b      	ldrb	r3, [r3, #0]
   15ade:	4639      	mov	r1, r7
   15ae0:	7023      	strb	r3, [r4, #0]
   15ae2:	4660      	mov	r0, ip
   15ae4:	f012 fdf0 	bl	286c8 <bt_uuid_cmp>
   15ae8:	4604      	mov	r4, r0
   15aea:	b128      	cbz	r0, 15af8 <bt_nus_handles_assign+0x4c>
		return -ENOTSUP;
   15aec:	f06f 0485 	mvn.w	r4, #133	; 0x85
	nus_c->handles.rx = gatt_desc->handle;

	/* Assign connection instance. */
	nus_c->conn = bt_gatt_dm_conn_get(dm);
	return 0;
}
   15af0:	4620      	mov	r0, r4
   15af2:	b017      	add	sp, #92	; 0x5c
   15af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memset(&nus_c->handles, 0xFF, sizeof(nus_c->handles));
   15af8:	2206      	movs	r2, #6
   15afa:	21ff      	movs	r1, #255	; 0xff
   15afc:	f106 0008 	add.w	r0, r6, #8
   15b00:	f012 fd72 	bl	285e8 <memset>
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_NUS_TX);
   15b04:	4b51      	ldr	r3, [pc, #324]	; (15c4c <bt_nus_handles_assign+0x1a0>)
   15b06:	aa02      	add	r2, sp, #8
   15b08:	f103 0e10 	add.w	lr, r3, #16
   15b0c:	4690      	mov	r8, r2
   15b0e:	46f1      	mov	r9, lr
   15b10:	4694      	mov	ip, r2
   15b12:	6818      	ldr	r0, [r3, #0]
   15b14:	6859      	ldr	r1, [r3, #4]
   15b16:	3308      	adds	r3, #8
   15b18:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   15b1c:	4573      	cmp	r3, lr
   15b1e:	4662      	mov	r2, ip
   15b20:	d1f6      	bne.n	15b10 <bt_nus_handles_assign+0x64>
   15b22:	781b      	ldrb	r3, [r3, #0]
   15b24:	4641      	mov	r1, r8
   15b26:	4628      	mov	r0, r5
   15b28:	f88c 3000 	strb.w	r3, [ip]
   15b2c:	f7ff fd14 	bl	15558 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
   15b30:	4680      	mov	r8, r0
   15b32:	b960      	cbnz	r0, 15b4e <bt_nus_handles_assign+0xa2>
   15b34:	4946      	ldr	r1, [pc, #280]	; (15c50 <bt_nus_handles_assign+0x1a4>)
   15b36:	4b47      	ldr	r3, [pc, #284]	; (15c54 <bt_nus_handles_assign+0x1a8>)
		LOG_ERR("Missing NUS TX characteristic.");
   15b38:	4847      	ldr	r0, [pc, #284]	; (15c58 <bt_nus_handles_assign+0x1ac>)
   15b3a:	1ac9      	subs	r1, r1, r3
   15b3c:	08c9      	lsrs	r1, r1, #3
   15b3e:	0189      	lsls	r1, r1, #6
   15b40:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Missing NUS RX value descriptor in characteristic.");
   15b44:	f011 f8f4 	bl	26d30 <log_0>
		return -EINVAL;
   15b48:	f06f 0415 	mvn.w	r4, #21
   15b4c:	e7d0      	b.n	15af0 <bt_nus_handles_assign+0x44>
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_NUS_TX);
   15b4e:	f10d 0c1c 	add.w	ip, sp, #28
   15b52:	4662      	mov	r2, ip
   15b54:	4b3d      	ldr	r3, [pc, #244]	; (15c4c <bt_nus_handles_assign+0x1a0>)
   15b56:	46e6      	mov	lr, ip
   15b58:	6818      	ldr	r0, [r3, #0]
   15b5a:	6859      	ldr	r1, [r3, #4]
   15b5c:	3308      	adds	r3, #8
   15b5e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   15b62:	454b      	cmp	r3, r9
   15b64:	46f4      	mov	ip, lr
   15b66:	d1f6      	bne.n	15b56 <bt_nus_handles_assign+0xaa>
   15b68:	781b      	ldrb	r3, [r3, #0]
   15b6a:	4641      	mov	r1, r8
   15b6c:	4628      	mov	r0, r5
   15b6e:	f88e 3000 	strb.w	r3, [lr]
   15b72:	f011 ff7c 	bl	27a6e <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
   15b76:	b940      	cbnz	r0, 15b8a <bt_nus_handles_assign+0xde>
   15b78:	4935      	ldr	r1, [pc, #212]	; (15c50 <bt_nus_handles_assign+0x1a4>)
   15b7a:	4b36      	ldr	r3, [pc, #216]	; (15c54 <bt_nus_handles_assign+0x1a8>)
		LOG_ERR("Missing NUS TX value descriptor in characteristic.");
   15b7c:	4837      	ldr	r0, [pc, #220]	; (15c5c <bt_nus_handles_assign+0x1b0>)
   15b7e:	1ac9      	subs	r1, r1, r3
   15b80:	08c9      	lsrs	r1, r1, #3
   15b82:	0189      	lsls	r1, r1, #6
   15b84:	f041 0101 	orr.w	r1, r1, #1
   15b88:	e7dc      	b.n	15b44 <bt_nus_handles_assign+0x98>
	nus_c->handles.tx = gatt_desc->handle;
   15b8a:	8883      	ldrh	r3, [r0, #4]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
   15b8c:	4641      	mov	r1, r8
	nus_c->handles.tx = gatt_desc->handle;
   15b8e:	8173      	strh	r3, [r6, #10]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
   15b90:	2300      	movs	r3, #0
   15b92:	f88d 3004 	strb.w	r3, [sp, #4]
   15b96:	f642 1302 	movw	r3, #10498	; 0x2902
   15b9a:	4628      	mov	r0, r5
   15b9c:	aa01      	add	r2, sp, #4
   15b9e:	f8ad 3006 	strh.w	r3, [sp, #6]
   15ba2:	f011 ff64 	bl	27a6e <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
   15ba6:	b940      	cbnz	r0, 15bba <bt_nus_handles_assign+0x10e>
   15ba8:	4929      	ldr	r1, [pc, #164]	; (15c50 <bt_nus_handles_assign+0x1a4>)
   15baa:	4b2a      	ldr	r3, [pc, #168]	; (15c54 <bt_nus_handles_assign+0x1a8>)
		LOG_ERR("Missing NUS TX CCC in characteristic.");
   15bac:	482c      	ldr	r0, [pc, #176]	; (15c60 <bt_nus_handles_assign+0x1b4>)
   15bae:	1ac9      	subs	r1, r1, r3
   15bb0:	08c9      	lsrs	r1, r1, #3
   15bb2:	0189      	lsls	r1, r1, #6
   15bb4:	f041 0101 	orr.w	r1, r1, #1
   15bb8:	e7c4      	b.n	15b44 <bt_nus_handles_assign+0x98>
	nus_c->handles.tx_ccc = gatt_desc->handle;
   15bba:	8883      	ldrh	r3, [r0, #4]
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_NUS_RX);
   15bbc:	aa0c      	add	r2, sp, #48	; 0x30
	nus_c->handles.tx_ccc = gatt_desc->handle;
   15bbe:	81b3      	strh	r3, [r6, #12]
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_NUS_RX);
   15bc0:	4b28      	ldr	r3, [pc, #160]	; (15c64 <bt_nus_handles_assign+0x1b8>)
   15bc2:	4691      	mov	r9, r2
   15bc4:	f103 0e10 	add.w	lr, r3, #16
   15bc8:	46f0      	mov	r8, lr
   15bca:	4694      	mov	ip, r2
   15bcc:	6818      	ldr	r0, [r3, #0]
   15bce:	6859      	ldr	r1, [r3, #4]
   15bd0:	3308      	adds	r3, #8
   15bd2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   15bd6:	4573      	cmp	r3, lr
   15bd8:	4662      	mov	r2, ip
   15bda:	d1f6      	bne.n	15bca <bt_nus_handles_assign+0x11e>
   15bdc:	781b      	ldrb	r3, [r3, #0]
   15bde:	4649      	mov	r1, r9
   15be0:	f88c 3000 	strb.w	r3, [ip]
   15be4:	4628      	mov	r0, r5
   15be6:	f7ff fcb7 	bl	15558 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
   15bea:	4684      	mov	ip, r0
   15bec:	b940      	cbnz	r0, 15c00 <bt_nus_handles_assign+0x154>
   15bee:	4918      	ldr	r1, [pc, #96]	; (15c50 <bt_nus_handles_assign+0x1a4>)
   15bf0:	4b18      	ldr	r3, [pc, #96]	; (15c54 <bt_nus_handles_assign+0x1a8>)
		LOG_ERR("Missing NUS RX characteristic.");
   15bf2:	481d      	ldr	r0, [pc, #116]	; (15c68 <bt_nus_handles_assign+0x1bc>)
   15bf4:	1ac9      	subs	r1, r1, r3
   15bf6:	08c9      	lsrs	r1, r1, #3
   15bf8:	0189      	lsls	r1, r1, #6
   15bfa:	f041 0101 	orr.w	r1, r1, #1
   15bfe:	e7a1      	b.n	15b44 <bt_nus_handles_assign+0x98>
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_NUS_RX);
   15c00:	463a      	mov	r2, r7
   15c02:	4b18      	ldr	r3, [pc, #96]	; (15c64 <bt_nus_handles_assign+0x1b8>)
   15c04:	4696      	mov	lr, r2
   15c06:	6818      	ldr	r0, [r3, #0]
   15c08:	6859      	ldr	r1, [r3, #4]
   15c0a:	3308      	adds	r3, #8
   15c0c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   15c10:	4543      	cmp	r3, r8
   15c12:	4672      	mov	r2, lr
   15c14:	d1f6      	bne.n	15c04 <bt_nus_handles_assign+0x158>
   15c16:	781b      	ldrb	r3, [r3, #0]
   15c18:	463a      	mov	r2, r7
   15c1a:	4661      	mov	r1, ip
   15c1c:	4628      	mov	r0, r5
   15c1e:	f88e 3000 	strb.w	r3, [lr]
   15c22:	f011 ff24 	bl	27a6e <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
   15c26:	b940      	cbnz	r0, 15c3a <bt_nus_handles_assign+0x18e>
   15c28:	4909      	ldr	r1, [pc, #36]	; (15c50 <bt_nus_handles_assign+0x1a4>)
   15c2a:	4b0a      	ldr	r3, [pc, #40]	; (15c54 <bt_nus_handles_assign+0x1a8>)
		LOG_ERR("Missing NUS RX value descriptor in characteristic.");
   15c2c:	480f      	ldr	r0, [pc, #60]	; (15c6c <bt_nus_handles_assign+0x1c0>)
   15c2e:	1ac9      	subs	r1, r1, r3
   15c30:	08c9      	lsrs	r1, r1, #3
   15c32:	0189      	lsls	r1, r1, #6
   15c34:	f041 0101 	orr.w	r1, r1, #1
   15c38:	e784      	b.n	15b44 <bt_nus_handles_assign+0x98>
	nus_c->handles.rx = gatt_desc->handle;
   15c3a:	8883      	ldrh	r3, [r0, #4]
	nus_c->conn = bt_gatt_dm_conn_get(dm);
   15c3c:	4628      	mov	r0, r5
	nus_c->handles.rx = gatt_desc->handle;
   15c3e:	8133      	strh	r3, [r6, #8]
	nus_c->conn = bt_gatt_dm_conn_get(dm);
   15c40:	f011 fec6 	bl	279d0 <bt_gatt_dm_conn_get>
   15c44:	6030      	str	r0, [r6, #0]
	return 0;
   15c46:	e753      	b.n	15af0 <bt_nus_handles_assign+0x44>
   15c48:	0002c1e8 	.word	0x0002c1e8
   15c4c:	0002c1f9 	.word	0x0002c1f9
   15c50:	0002c0c4 	.word	0x0002c0c4
   15c54:	0002bfe4 	.word	0x0002bfe4
   15c58:	0002e0af 	.word	0x0002e0af
   15c5c:	0002e0ce 	.word	0x0002e0ce
   15c60:	0002e101 	.word	0x0002e101
   15c64:	0002c20a 	.word	0x0002c20a
   15c68:	0002e127 	.word	0x0002e127
   15c6c:	0002e146 	.word	0x0002e146

00015c70 <bt_nus_subscribe_receive>:

int bt_nus_subscribe_receive(struct bt_nus_client *nus_c)
{
   15c70:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (atomic_test_and_set_bit(&nus_c->state, NUS_C_TX_NOTIF_ENABLED)) {
   15c72:	1d05      	adds	r5, r0, #4
   15c74:	e8d5 3fef 	ldaex	r3, [r5]
   15c78:	f043 0202 	orr.w	r2, r3, #2
   15c7c:	e8c5 2fe1 	stlex	r1, r2, [r5]
   15c80:	2900      	cmp	r1, #0
   15c82:	d1f7      	bne.n	15c74 <bt_nus_subscribe_receive+0x4>
   15c84:	079b      	lsls	r3, r3, #30
   15c86:	d42d      	bmi.n	15ce4 <bt_nus_subscribe_receive+0x74>
		return -EALREADY;
	}

	nus_c->tx_notif_params.notify = on_received;
   15c88:	4b18      	ldr	r3, [pc, #96]	; (15cec <bt_nus_subscribe_receive+0x7c>)
   15c8a:	6103      	str	r3, [r0, #16]
	nus_c->tx_notif_params.value = BT_GATT_CCC_NOTIFY;
   15c8c:	2301      	movs	r3, #1
   15c8e:	8383      	strh	r3, [r0, #28]
	nus_c->tx_notif_params.value_handle = nus_c->handles.tx;
   15c90:	8943      	ldrh	r3, [r0, #10]
   15c92:	8303      	strh	r3, [r0, #24]
	nus_c->tx_notif_params.ccc_handle = nus_c->handles.tx_ccc;
   15c94:	8983      	ldrh	r3, [r0, #12]
   15c96:	8343      	strh	r3, [r0, #26]
   15c98:	f100 0320 	add.w	r3, r0, #32
   15c9c:	e8d3 2fef 	ldaex	r2, [r3]
   15ca0:	f042 0201 	orr.w	r2, r2, #1
   15ca4:	e8c3 2fe1 	stlex	r1, r2, [r3]
   15ca8:	2900      	cmp	r1, #0
   15caa:	d1f7      	bne.n	15c9c <bt_nus_subscribe_receive+0x2c>
	atomic_set_bit(nus_c->tx_notif_params.flags,
		       BT_GATT_SUBSCRIBE_FLAG_VOLATILE);

	err = bt_gatt_subscribe(nus_c->conn, &nus_c->tx_notif_params);
   15cac:	f100 0110 	add.w	r1, r0, #16
   15cb0:	6800      	ldr	r0, [r0, #0]
   15cb2:	f007 fe4b 	bl	1d94c <bt_gatt_subscribe>
	if (err) {
   15cb6:	4604      	mov	r4, r0
   15cb8:	b190      	cbz	r0, 15ce0 <bt_nus_subscribe_receive+0x70>
   15cba:	4a0d      	ldr	r2, [pc, #52]	; (15cf0 <bt_nus_subscribe_receive+0x80>)
   15cbc:	4b0d      	ldr	r3, [pc, #52]	; (15cf4 <bt_nus_subscribe_receive+0x84>)
		LOG_ERR("Subscribe failed (err %d)", err);
   15cbe:	4601      	mov	r1, r0
   15cc0:	1ad2      	subs	r2, r2, r3
   15cc2:	08d2      	lsrs	r2, r2, #3
   15cc4:	0192      	lsls	r2, r2, #6
   15cc6:	480c      	ldr	r0, [pc, #48]	; (15cf8 <bt_nus_subscribe_receive+0x88>)
   15cc8:	f042 0201 	orr.w	r2, r2, #1
   15ccc:	f011 f83d 	bl	26d4a <log_1>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15cd0:	e8d5 3fef 	ldaex	r3, [r5]
   15cd4:	f023 0302 	bic.w	r3, r3, #2
   15cd8:	e8c5 3fe2 	stlex	r2, r3, [r5]
   15cdc:	2a00      	cmp	r2, #0
   15cde:	d1f7      	bne.n	15cd0 <bt_nus_subscribe_receive+0x60>
	} else {
		LOG_DBG("[SUBSCRIBED]");
	}

	return err;
}
   15ce0:	4620      	mov	r0, r4
   15ce2:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   15ce4:	f06f 0477 	mvn.w	r4, #119	; 0x77
   15ce8:	e7fa      	b.n	15ce0 <bt_nus_subscribe_receive+0x70>
   15cea:	bf00      	nop
   15cec:	00027afb 	.word	0x00027afb
   15cf0:	0002c0c4 	.word	0x0002c0c4
   15cf4:	0002bfe4 	.word	0x0002bfe4
   15cf8:	0002e179 	.word	0x0002e179

00015cfc <before_nse>:
#include <arch/arm/aarch32/cortex_m/fpu.h>

static struct fpu_ctx_full context_buffer;

void before_nse(void)
{
   15cfc:	b508      	push	{r3, lr}
	k_sched_lock();
   15cfe:	f00e facd 	bl	2429c <k_sched_lock>
	z_arm_save_fp_context(&context_buffer);
}
   15d02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_save_fp_context(&context_buffer);
   15d06:	4801      	ldr	r0, [pc, #4]	; (15d0c <before_nse+0x10>)
   15d08:	f012 bb51 	b.w	283ae <z_arm_save_fp_context>
   15d0c:	20009744 	.word	0x20009744

00015d10 <after_nse>:

void after_nse(void)
{
   15d10:	b508      	push	{r3, lr}
	k_sched_unlock();
   15d12:	f00e fd57 	bl	247c4 <k_sched_unlock>
	z_arm_restore_fp_context(&context_buffer);
}
   15d16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_restore_fp_context(&context_buffer);
   15d1a:	4801      	ldr	r0, [pc, #4]	; (15d20 <after_nse+0x10>)
   15d1c:	f012 bb48 	b.w	283b0 <z_arm_restore_fp_context>
   15d20:	20009744 	.word	0x20009744

00015d24 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   15d24:	b5f0      	push	{r4, r5, r6, r7, lr}
   15d26:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
   15d28:	4e26      	ldr	r6, [pc, #152]	; (15dc4 <tc_aes128_set_encrypt_key+0xa0>)
{
   15d2a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   15d2c:	ad01      	add	r5, sp, #4
{
   15d2e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   15d30:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   15d32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   15d34:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   15d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   15d38:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   15d3c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   15d40:	4638      	mov	r0, r7
   15d42:	2f00      	cmp	r7, #0
   15d44:	d039      	beq.n	15dba <tc_aes128_set_encrypt_key+0x96>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   15d46:	2c00      	cmp	r4, #0
   15d48:	d039      	beq.n	15dbe <tc_aes128_set_encrypt_key+0x9a>
   15d4a:	1f38      	subs	r0, r7, #4
   15d4c:	4602      	mov	r2, r0
   15d4e:	4621      	mov	r1, r4
   15d50:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   15d52:	784b      	ldrb	r3, [r1, #1]
   15d54:	780d      	ldrb	r5, [r1, #0]
   15d56:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   15d58:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   15d5c:	78cd      	ldrb	r5, [r1, #3]
   15d5e:	3104      	adds	r1, #4
   15d60:	432b      	orrs	r3, r5
   15d62:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
   15d66:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   15d68:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   15d6c:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   15d70:	d1ef      	bne.n	15d52 <tc_aes128_set_encrypt_key+0x2e>
   15d72:	2104      	movs	r1, #4
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   15d74:	4c14      	ldr	r4, [pc, #80]	; (15dc8 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
   15d76:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   15d78:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   15d7a:	d116      	bne.n	15daa <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   15d7c:	f3c3 4207 	ubfx	r2, r3, #16, #8
   15d80:	5ca5      	ldrb	r5, [r4, r2]
   15d82:	0e1a      	lsrs	r2, r3, #24
   15d84:	5ca2      	ldrb	r2, [r4, r2]
   15d86:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   15d8a:	f3c3 2507 	ubfx	r5, r3, #8, #8
   15d8e:	5d65      	ldrb	r5, [r4, r5]
   15d90:	b2db      	uxtb	r3, r3
   15d92:	5ce3      	ldrb	r3, [r4, r3]
   15d94:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   15d98:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   15d9c:	ad0c      	add	r5, sp, #48	; 0x30
   15d9e:	f021 0303 	bic.w	r3, r1, #3
   15da2:	442b      	add	r3, r5
   15da4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   15da8:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   15daa:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   15dae:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   15db0:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   15db2:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   15db4:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   15db6:	d1de      	bne.n	15d76 <tc_aes128_set_encrypt_key+0x52>
	}

	return TC_CRYPTO_SUCCESS;
   15db8:	2001      	movs	r0, #1
}
   15dba:	b00d      	add	sp, #52	; 0x34
   15dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   15dbe:	4620      	mov	r0, r4
   15dc0:	e7fb      	b.n	15dba <tc_aes128_set_encrypt_key+0x96>
   15dc2:	bf00      	nop
   15dc4:	0002c1a4 	.word	0x0002c1a4
   15dc8:	0002e1ac 	.word	0x0002e1ac

00015dcc <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   15dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15dd0:	4615      	mov	r5, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   15dd2:	4606      	mov	r6, r0
{
   15dd4:	b089      	sub	sp, #36	; 0x24
	if (out == (uint8_t *) 0) {
   15dd6:	2800      	cmp	r0, #0
   15dd8:	d058      	beq.n	15e8c <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   15dda:	2900      	cmp	r1, #0
   15ddc:	d059      	beq.n	15e92 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   15dde:	2a00      	cmp	r2, #0
   15de0:	d059      	beq.n	15e96 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   15de2:	2310      	movs	r3, #16
   15de4:	460a      	mov	r2, r1
   15de6:	4668      	mov	r0, sp
   15de8:	4619      	mov	r1, r3
		s[i] = sbox[s[i]];
   15dea:	4c2c      	ldr	r4, [pc, #176]	; (15e9c <tc_aes_encrypt+0xd0>)
	(void)_copy(state, sizeof(state), in, sizeof(state));
   15dec:	f011 fed6 	bl	27b9c <_copy>
	add_round_key(state, s->words);
   15df0:	4629      	mov	r1, r5
   15df2:	4668      	mov	r0, sp
   15df4:	f011 feea 	bl	27bcc <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   15df8:	46a1      	mov	r9, r4
   15dfa:	f105 0710 	add.w	r7, r5, #16
   15dfe:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   15e00:	46e8      	mov	r8, sp
{
   15e02:	466a      	mov	r2, sp
   15e04:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   15e06:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   15e08:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   15e0a:	5c61      	ldrb	r1, [r4, r1]
   15e0c:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   15e10:	d1f9      	bne.n	15e06 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   15e12:	4668      	mov	r0, sp
   15e14:	f011 ff1f 	bl	27c56 <shift_rows>
	mult_row_column(t, s);
   15e18:	4669      	mov	r1, sp
   15e1a:	a804      	add	r0, sp, #16
   15e1c:	f011 ff54 	bl	27cc8 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   15e20:	a901      	add	r1, sp, #4
   15e22:	a805      	add	r0, sp, #20
   15e24:	f011 ff50 	bl	27cc8 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   15e28:	a902      	add	r1, sp, #8
   15e2a:	a806      	add	r0, sp, #24
   15e2c:	f011 ff4c 	bl	27cc8 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   15e30:	a903      	add	r1, sp, #12
   15e32:	a807      	add	r0, sp, #28
   15e34:	f011 ff48 	bl	27cc8 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   15e38:	2310      	movs	r3, #16
   15e3a:	4668      	mov	r0, sp
   15e3c:	4619      	mov	r1, r3
   15e3e:	eb0d 0203 	add.w	r2, sp, r3
   15e42:	f011 feab 	bl	27b9c <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   15e46:	4639      	mov	r1, r7
   15e48:	4668      	mov	r0, sp
   15e4a:	3710      	adds	r7, #16
   15e4c:	f011 febe 	bl	27bcc <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   15e50:	42af      	cmp	r7, r5
   15e52:	d1d5      	bne.n	15e00 <tc_aes_encrypt+0x34>
   15e54:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   15e56:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   15e5a:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   15e5c:	f819 3003 	ldrb.w	r3, [r9, r3]
   15e60:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   15e64:	d1f7      	bne.n	15e56 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   15e66:	4668      	mov	r0, sp
   15e68:	f011 fef5 	bl	27c56 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   15e6c:	4629      	mov	r1, r5
   15e6e:	4668      	mov	r0, sp
   15e70:	f011 feac 	bl	27bcc <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   15e74:	2310      	movs	r3, #16
   15e76:	466a      	mov	r2, sp
   15e78:	4619      	mov	r1, r3
   15e7a:	4630      	mov	r0, r6
   15e7c:	f011 fe8e 	bl	27b9c <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   15e80:	4668      	mov	r0, sp
   15e82:	2210      	movs	r2, #16
   15e84:	4621      	mov	r1, r4
   15e86:	f011 fe96 	bl	27bb6 <_set>

	return TC_CRYPTO_SUCCESS;
   15e8a:	2001      	movs	r0, #1
}
   15e8c:	b009      	add	sp, #36	; 0x24
   15e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   15e92:	4608      	mov	r0, r1
   15e94:	e7fa      	b.n	15e8c <tc_aes_encrypt+0xc0>
   15e96:	4610      	mov	r0, r2
   15e98:	e7f8      	b.n	15e8c <tc_aes_encrypt+0xc0>
   15e9a:	bf00      	nop
   15e9c:	0002e1ac 	.word	0x0002e1ac

00015ea0 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   15ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   15ea4:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   15ea6:	6803      	ldr	r3, [r0, #0]
{
   15ea8:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   15eaa:	9303      	str	r3, [sp, #12]
   15eac:	6843      	ldr	r3, [r0, #4]
   15eae:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 16068 <compress+0x1c8>
   15eb2:	9304      	str	r3, [sp, #16]
   15eb4:	6883      	ldr	r3, [r0, #8]
   15eb6:	9c03      	ldr	r4, [sp, #12]
   15eb8:	9305      	str	r3, [sp, #20]
   15eba:	68c3      	ldr	r3, [r0, #12]
{
   15ebc:	9102      	str	r1, [sp, #8]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   15ebe:	9306      	str	r3, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   15ec0:	6903      	ldr	r3, [r0, #16]
   15ec2:	9307      	str	r3, [sp, #28]
   15ec4:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   15ec6:	e9dd e206 	ldrd	lr, r2, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   15eca:	9308      	str	r3, [sp, #32]
   15ecc:	6983      	ldr	r3, [r0, #24]
   15ece:	9309      	str	r3, [sp, #36]	; 0x24
   15ed0:	69c3      	ldr	r3, [r0, #28]
   15ed2:	e9dd cb08 	ldrd	ip, fp, [sp, #32]
   15ed6:	4698      	mov	r8, r3
   15ed8:	930a      	str	r3, [sp, #40]	; 0x28
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   15eda:	9b05      	ldr	r3, [sp, #20]
   15edc:	9301      	str	r3, [sp, #4]
   15ede:	9b04      	ldr	r3, [sp, #16]
   15ee0:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
   15ee2:	9b02      	ldr	r3, [sp, #8]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
		t2 = Sigma0(a) + Maj(a, b, c);
   15ee4:	9e01      	ldr	r6, [sp, #4]
   15ee6:	59dd      	ldr	r5, [r3, r7]
		t1 = work_space[i] = n;
   15ee8:	ab0c      	add	r3, sp, #48	; 0x30
   15eea:	ba2d      	rev	r5, r5
   15eec:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
   15eee:	f85a 3b04 	ldr.w	r3, [sl], #4
   15ef2:	3704      	adds	r7, #4
   15ef4:	eb05 0903 	add.w	r9, r5, r3
   15ef8:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   15efc:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
   15f00:	ea85 6572 	eor.w	r5, r5, r2, ror #25
   15f04:	444d      	add	r5, r9
   15f06:	ea2b 0302 	bic.w	r3, fp, r2
   15f0a:	ea02 090c 	and.w	r9, r2, ip
   15f0e:	ea83 0309 	eor.w	r3, r3, r9
   15f12:	442b      	add	r3, r5
   15f14:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
   15f16:	e9dd 1500 	ldrd	r1, r5, [sp]
	return (((a) >> n) | ((a) << (32 - n)));
   15f1a:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   15f1e:	404d      	eors	r5, r1
   15f20:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   15f24:	4025      	ands	r5, r4
   15f26:	ea01 0906 	and.w	r9, r1, r6
   15f2a:	ea85 0509 	eor.w	r5, r5, r9
   15f2e:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
   15f32:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
   15f34:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
   15f36:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
   15f3a:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
   15f3c:	46b6      	mov	lr, r6
   15f3e:	46d8      	mov	r8, fp
   15f40:	f040 8081 	bne.w	16046 <compress+0x1a6>
   15f44:	f04f 0a10 	mov.w	sl, #16
   15f48:	4946      	ldr	r1, [pc, #280]	; (16064 <compress+0x1c4>)
   15f4a:	910b      	str	r1, [sp, #44]	; 0x2c
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
   15f4c:	4651      	mov	r1, sl
   15f4e:	f10a 0a01 	add.w	sl, sl, #1
   15f52:	ae1c      	add	r6, sp, #112	; 0x70
   15f54:	f00a 070f 	and.w	r7, sl, #15
   15f58:	eb06 0787 	add.w	r7, r6, r7, lsl #2
   15f5c:	f857 6c40 	ldr.w	r6, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   15f60:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
   15f64:	ea4f 48b6 	mov.w	r8, r6, ror #18
		s1 = work_space[(i+14)&0x0f];
   15f68:	f101 070e 	add.w	r7, r1, #14
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   15f6c:	3109      	adds	r1, #9
		s0 = work_space[(i+1)&0x0f];
   15f6e:	9602      	str	r6, [sp, #8]
		s0 = sigma0(s0);
   15f70:	ea88 18f6 	eor.w	r8, r8, r6, ror #7
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   15f74:	f001 010f 	and.w	r1, r1, #15
		s1 = work_space[(i+14)&0x0f];
   15f78:	ae1c      	add	r6, sp, #112	; 0x70
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   15f7a:	eb06 0989 	add.w	r9, r6, r9, lsl #2
   15f7e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
		s1 = work_space[(i+14)&0x0f];
   15f82:	f007 070f 	and.w	r7, r7, #15
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   15f86:	f851 1c40 	ldr.w	r1, [r1, #-64]
		s1 = work_space[(i+14)&0x0f];
   15f8a:	eb06 0787 	add.w	r7, r6, r7, lsl #2
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   15f8e:	f859 6c40 	ldr.w	r6, [r9, #-64]
		s1 = work_space[(i+14)&0x0f];
   15f92:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   15f96:	4431      	add	r1, r6
		s0 = sigma0(s0);
   15f98:	9e02      	ldr	r6, [sp, #8]
	return (((a) >> n) | ((a) << (32 - n)));
   15f9a:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s0 = sigma0(s0);
   15f9e:	ea88 08d6 	eor.w	r8, r8, r6, lsr #3
		s1 = sigma1(s1);
   15fa2:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
   15fa6:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   15faa:	4441      	add	r1, r8
   15fac:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   15fae:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   15fb0:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
   15fb4:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   15fb8:	ea05 0802 	and.w	r8, r5, r2
   15fbc:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
   15fc0:	ea2c 0705 	bic.w	r7, ip, r5
   15fc4:	f856 eb04 	ldr.w	lr, [r6], #4
   15fc8:	ea87 0708 	eor.w	r7, r7, r8
   15fcc:	ea89 6975 	eor.w	r9, r9, r5, ror #25
   15fd0:	444f      	add	r7, r9
   15fd2:	4477      	add	r7, lr
   15fd4:	960b      	str	r6, [sp, #44]	; 0x2c
		t2 = Sigma0(a) + Maj(a, b, c);
   15fd6:	9e00      	ldr	r6, [sp, #0]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   15fd8:	4439      	add	r1, r7
   15fda:	4459      	add	r1, fp
		t2 = Sigma0(a) + Maj(a, b, c);
   15fdc:	ea04 0e06 	and.w	lr, r4, r6
   15fe0:	ea84 0b06 	eor.w	fp, r4, r6
		h = g; g = f; f = e; e = d + t1;
   15fe4:	9e01      	ldr	r6, [sp, #4]
	return (((a) >> n) | ((a) << (32 - n)));
   15fe6:	ea4f 3773 	mov.w	r7, r3, ror #13
		h = g; g = f; f = e; e = d + t1;
   15fea:	440e      	add	r6, r1
		t2 = Sigma0(a) + Maj(a, b, c);
   15fec:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
   15ff0:	ea0b 0b03 	and.w	fp, fp, r3
   15ff4:	ea8b 0b0e 	eor.w	fp, fp, lr
		h = g; g = f; f = e; e = d + t1;
   15ff8:	46b0      	mov	r8, r6
		t2 = Sigma0(a) + Maj(a, b, c);
   15ffa:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
   15ffe:	9e00      	ldr	r6, [sp, #0]
   16000:	445f      	add	r7, fp
	for ( ; i < 64; ++i) {
   16002:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   16006:	46e3      	mov	fp, ip
		d = c; c = b; b = a; a = t1 + t2;
   16008:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
   1600a:	9601      	str	r6, [sp, #4]
   1600c:	d123      	bne.n	16056 <compress+0x1b6>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   1600e:	9e03      	ldr	r6, [sp, #12]
   16010:	440e      	add	r6, r1
   16012:	9904      	ldr	r1, [sp, #16]
   16014:	6006      	str	r6, [r0, #0]
   16016:	4419      	add	r1, r3
   16018:	9b05      	ldr	r3, [sp, #20]
   1601a:	6041      	str	r1, [r0, #4]
   1601c:	4423      	add	r3, r4
   1601e:	9900      	ldr	r1, [sp, #0]
   16020:	6083      	str	r3, [r0, #8]
   16022:	9b06      	ldr	r3, [sp, #24]
   16024:	440b      	add	r3, r1
   16026:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   16028:	9b07      	ldr	r3, [sp, #28]
   1602a:	4443      	add	r3, r8
   1602c:	6103      	str	r3, [r0, #16]
   1602e:	9b08      	ldr	r3, [sp, #32]
   16030:	442b      	add	r3, r5
   16032:	6143      	str	r3, [r0, #20]
   16034:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16036:	4413      	add	r3, r2
   16038:	6183      	str	r3, [r0, #24]
   1603a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1603c:	4463      	add	r3, ip
   1603e:	61c3      	str	r3, [r0, #28]
}
   16040:	b01d      	add	sp, #116	; 0x74
   16042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16046:	9900      	ldr	r1, [sp, #0]
   16048:	46e3      	mov	fp, ip
   1604a:	e9cd 4100 	strd	r4, r1, [sp]
   1604e:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
   16050:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   16052:	462a      	mov	r2, r5
   16054:	e745      	b.n	15ee2 <compress+0x42>
   16056:	4694      	mov	ip, r2
   16058:	9400      	str	r4, [sp, #0]
   1605a:	462a      	mov	r2, r5
   1605c:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   1605e:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
   16060:	460b      	mov	r3, r1
   16062:	e773      	b.n	15f4c <compress+0xac>
   16064:	0002c3c8 	.word	0x0002c3c8
   16068:	0002c388 	.word	0x0002c388

0001606c <tc_sha256_init>:
{
   1606c:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
   1606e:	4604      	mov	r4, r0
   16070:	b1c8      	cbz	r0, 160a6 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
   16072:	2270      	movs	r2, #112	; 0x70
   16074:	2100      	movs	r1, #0
   16076:	f011 fd9e 	bl	27bb6 <_set>
	s->iv[1] = 0xbb67ae85;
   1607a:	4b0b      	ldr	r3, [pc, #44]	; (160a8 <tc_sha256_init+0x3c>)
   1607c:	4a0b      	ldr	r2, [pc, #44]	; (160ac <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
   1607e:	490c      	ldr	r1, [pc, #48]	; (160b0 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
   16080:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   16084:	4b0b      	ldr	r3, [pc, #44]	; (160b4 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
   16086:	480c      	ldr	r0, [pc, #48]	; (160b8 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
   16088:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   1608c:	4b0b      	ldr	r3, [pc, #44]	; (160bc <tc_sha256_init+0x50>)
   1608e:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   16092:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   16094:	4b0a      	ldr	r3, [pc, #40]	; (160c0 <tc_sha256_init+0x54>)
   16096:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   16098:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   1609c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   160a0:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   160a4:	61e3      	str	r3, [r4, #28]
}
   160a6:	bd10      	pop	{r4, pc}
   160a8:	bb67ae85 	.word	0xbb67ae85
   160ac:	6a09e667 	.word	0x6a09e667
   160b0:	3c6ef372 	.word	0x3c6ef372
   160b4:	a54ff53a 	.word	0xa54ff53a
   160b8:	510e527f 	.word	0x510e527f
   160bc:	9b05688c 	.word	0x9b05688c
   160c0:	1f83d9ab 	.word	0x1f83d9ab

000160c4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   160c4:	4a09      	ldr	r2, [pc, #36]	; (160ec <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   160c6:	490a      	ldr	r1, [pc, #40]	; (160f0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   160c8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   160ca:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   160cc:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   160ce:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   160d0:	4908      	ldr	r1, [pc, #32]	; (160f4 <arch_swap+0x30>)
   160d2:	684b      	ldr	r3, [r1, #4]
   160d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   160d8:	604b      	str	r3, [r1, #4]
   160da:	2300      	movs	r3, #0
   160dc:	f383 8811 	msr	BASEPRI, r3
   160e0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   160e4:	6893      	ldr	r3, [r2, #8]
}
   160e6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   160e8:	4770      	bx	lr
   160ea:	bf00      	nop
   160ec:	20009ba8 	.word	0x20009ba8
   160f0:	0002ca3c 	.word	0x0002ca3c
   160f4:	e000ed00 	.word	0xe000ed00

000160f8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   160f8:	4913      	ldr	r1, [pc, #76]	; (16148 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   160fa:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   160fc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   16100:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   16102:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   16106:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1610a:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1610c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   16110:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   16114:	4f0d      	ldr	r7, [pc, #52]	; (1614c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   16116:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1611a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   1611c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1611e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   16120:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   16122:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   16124:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   16126:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1612a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1612e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   16132:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   16136:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1613a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   1613c:	f012 f928 	bl	28390 <configure_builtin_stack_guard>
    pop {r2, lr}
   16140:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   16144:	4770      	bx	lr
   16146:	0000      	.short	0x0000
    ldr r1, =_kernel
   16148:	20009ba8 	.word	0x20009ba8
    ldr v4, =_SCS_ICSR
   1614c:	e000ed04 	.word	0xe000ed04

00016150 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   16150:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   16154:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   16156:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1615a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1615e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   16160:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   16164:	2902      	cmp	r1, #2
    beq _oops
   16166:	d0ff      	beq.n	16168 <_oops>

00016168 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   16168:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1616a:	f012 f915 	bl	28398 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1616e:	bd01      	pop	{r0, pc}

00016170 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   16170:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   16172:	2b00      	cmp	r3, #0
   16174:	db08      	blt.n	16188 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16176:	2201      	movs	r2, #1
   16178:	f000 001f 	and.w	r0, r0, #31
   1617c:	fa02 f000 	lsl.w	r0, r2, r0
   16180:	4a02      	ldr	r2, [pc, #8]	; (1618c <arch_irq_enable+0x1c>)
   16182:	095b      	lsrs	r3, r3, #5
   16184:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   16188:	4770      	bx	lr
   1618a:	bf00      	nop
   1618c:	e000e100 	.word	0xe000e100

00016190 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   16190:	4b05      	ldr	r3, [pc, #20]	; (161a8 <arch_irq_is_enabled+0x18>)
   16192:	0942      	lsrs	r2, r0, #5
   16194:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   16198:	2301      	movs	r3, #1
   1619a:	f000 001f 	and.w	r0, r0, #31
   1619e:	fa03 f000 	lsl.w	r0, r3, r0
}
   161a2:	4010      	ands	r0, r2
   161a4:	4770      	bx	lr
   161a6:	bf00      	nop
   161a8:	e000e100 	.word	0xe000e100

000161ac <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   161ac:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   161ae:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   161b0:	2c07      	cmp	r4, #7
{
   161b2:	4605      	mov	r5, r0
   161b4:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   161b6:	d90f      	bls.n	161d8 <z_arm_irq_priority_set+0x2c>
   161b8:	2358      	movs	r3, #88	; 0x58
   161ba:	4a10      	ldr	r2, [pc, #64]	; (161fc <z_arm_irq_priority_set+0x50>)
   161bc:	4910      	ldr	r1, [pc, #64]	; (16200 <z_arm_irq_priority_set+0x54>)
   161be:	4811      	ldr	r0, [pc, #68]	; (16204 <z_arm_irq_priority_set+0x58>)
   161c0:	f010 faac 	bl	2671c <printk>
   161c4:	4631      	mov	r1, r6
   161c6:	4810      	ldr	r0, [pc, #64]	; (16208 <z_arm_irq_priority_set+0x5c>)
   161c8:	2307      	movs	r3, #7
   161ca:	462a      	mov	r2, r5
   161cc:	f010 faa6 	bl	2671c <printk>
   161d0:	2158      	movs	r1, #88	; 0x58
   161d2:	480a      	ldr	r0, [pc, #40]	; (161fc <z_arm_irq_priority_set+0x50>)
   161d4:	f010 fd47 	bl	26c66 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   161d8:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   161da:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   161dc:	bfac      	ite	ge
   161de:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   161e2:	4b0a      	ldrlt	r3, [pc, #40]	; (1620c <z_arm_irq_priority_set+0x60>)
   161e4:	ea4f 1444 	mov.w	r4, r4, lsl #5
   161e8:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   161ea:	bfab      	itete	ge
   161ec:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   161f0:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   161f4:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   161f8:	555c      	strblt	r4, [r3, r5]
}
   161fa:	bd70      	pop	{r4, r5, r6, pc}
   161fc:	0002e2ac 	.word	0x0002e2ac
   16200:	0002e2e2 	.word	0x0002e2e2
   16204:	0002cfb2 	.word	0x0002cfb2
   16208:	0002e2fd 	.word	0x0002e2fd
   1620c:	e000ed14 	.word	0xe000ed14

00016210 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   16210:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   16214:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   16216:	490b      	ldr	r1, [pc, #44]	; (16244 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
   16218:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1621c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   1621e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   16222:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   16226:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   16228:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   1622c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   16230:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   16234:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   16238:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1623a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1623c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   1623e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   16240:	4770      	bx	lr
   16242:	bf00      	nop
   16244:	000267f9 	.word	0x000267f9

00016248 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   16248:	4b08      	ldr	r3, [pc, #32]	; (1626c <arch_switch_to_main_thread+0x24>)
   1624a:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1624c:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1624e:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   16252:	4610      	mov	r0, r2
   16254:	f381 8809 	msr	PSP, r1
   16258:	2100      	movs	r1, #0
   1625a:	b663      	cpsie	if
   1625c:	f381 8811 	msr	BASEPRI, r1
   16260:	f3bf 8f6f 	isb	sy
   16264:	2200      	movs	r2, #0
   16266:	2300      	movs	r3, #0
   16268:	f010 fac6 	bl	267f8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1626c:	20009ba8 	.word	0x20009ba8

00016270 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   16270:	4901      	ldr	r1, [pc, #4]	; (16278 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   16272:	2210      	movs	r2, #16
	str	r2, [r1]
   16274:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   16276:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   16278:	e000ed10 	.word	0xe000ed10

0001627c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1627c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1627e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   16280:	f380 8811 	msr	BASEPRI, r0
	isb
   16284:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   16288:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   1628c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1628e:	b662      	cpsie	i
	isb
   16290:	f3bf 8f6f 	isb	sy

	bx	lr
   16294:	4770      	bx	lr
   16296:	bf00      	nop

00016298 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   16298:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1629a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1629c:	f381 8811 	msr	BASEPRI, r1

	wfe
   162a0:	bf20      	wfe

	msr	BASEPRI, r0
   162a2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   162a6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   162a8:	4770      	bx	lr
   162aa:	bf00      	nop

000162ac <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   162ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   162ae:	4606      	mov	r6, r0

	if (esf != NULL) {
   162b0:	460c      	mov	r4, r1
   162b2:	b301      	cbz	r1, 162f6 <z_arm_fatal_error+0x4a>
   162b4:	4b13      	ldr	r3, [pc, #76]	; (16304 <z_arm_fatal_error+0x58>)
   162b6:	4d14      	ldr	r5, [pc, #80]	; (16308 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   162b8:	4814      	ldr	r0, [pc, #80]	; (1630c <z_arm_fatal_error+0x60>)
   162ba:	1aed      	subs	r5, r5, r3
   162bc:	08ed      	lsrs	r5, r5, #3
   162be:	01ad      	lsls	r5, r5, #6
   162c0:	f045 0501 	orr.w	r5, r5, #1
   162c4:	f8ad 5000 	strh.w	r5, [sp]
   162c8:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   162cc:	6809      	ldr	r1, [r1, #0]
   162ce:	f010 fd69 	bl	26da4 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   162d2:	f8ad 5000 	strh.w	r5, [sp]
   162d6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   162da:	68e1      	ldr	r1, [r4, #12]
   162dc:	480c      	ldr	r0, [pc, #48]	; (16310 <z_arm_fatal_error+0x64>)
   162de:	f010 fd61 	bl	26da4 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   162e2:	462a      	mov	r2, r5
   162e4:	69e1      	ldr	r1, [r4, #28]
   162e6:	480b      	ldr	r0, [pc, #44]	; (16314 <z_arm_fatal_error+0x68>)
   162e8:	f010 fd2f 	bl	26d4a <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   162ec:	462a      	mov	r2, r5
   162ee:	69a1      	ldr	r1, [r4, #24]
   162f0:	4809      	ldr	r0, [pc, #36]	; (16318 <z_arm_fatal_error+0x6c>)
   162f2:	f010 fd2a 	bl	26d4a <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   162f6:	4621      	mov	r1, r4
   162f8:	4630      	mov	r0, r6
}
   162fa:	b002      	add	sp, #8
   162fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   16300:	f00c b8ce 	b.w	224a0 <z_fatal_error>
   16304:	0002bfe4 	.word	0x0002bfe4
   16308:	0002c0cc 	.word	0x0002c0cc
   1630c:	0002e33d 	.word	0x0002e33d
   16310:	0002e36c 	.word	0x0002e36c
   16314:	0002e39b 	.word	0x0002e39b
   16318:	0002e3aa 	.word	0x0002e3aa

0001631c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1631c:	bf30      	wfi
    b z_SysNmiOnReset
   1631e:	f7ff bffd 	b.w	1631c <z_SysNmiOnReset>
   16322:	bf00      	nop

00016324 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   16324:	4a0e      	ldr	r2, [pc, #56]	; (16360 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   16326:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   16328:	4b0e      	ldr	r3, [pc, #56]	; (16364 <z_arm_prep_c+0x40>)
   1632a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1632e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   16330:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16334:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   16338:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1633c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   16340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   16344:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   16348:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   1634c:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   16350:	f00c f91e 	bl	22590 <z_bss_zero>
	z_data_copy();
   16354:	f00f f8ce 	bl	254f4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   16358:	f000 fabc 	bl	168d4 <z_arm_interrupt_init>
	z_cstart();
   1635c:	f00c f93c 	bl	225d8 <z_cstart>
   16360:	00010000 	.word	0x00010000
   16364:	e000ed00 	.word	0xe000ed00

00016368 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   16368:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1636a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1636c:	4a0b      	ldr	r2, [pc, #44]	; (1639c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1636e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   16370:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   16372:	bf1e      	ittt	ne
	movne	r1, #0
   16374:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   16376:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   16378:	f015 faf9 	blne	2b96e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1637c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1637e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   16382:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   16386:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1638a:	4905      	ldr	r1, [pc, #20]	; (163a0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1638c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1638e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   16390:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   16392:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   16396:	4903      	ldr	r1, [pc, #12]	; (163a4 <_isr_wrapper+0x3c>)
	bx r1
   16398:	4708      	bx	r1
   1639a:	0000      	.short	0x0000
	ldr r2, =_kernel
   1639c:	20009ba8 	.word	0x20009ba8
	ldr r1, =_sw_isr_table
   163a0:	0002bd10 	.word	0x0002bd10
	ldr r1, =z_arm_int_exit
   163a4:	00016895 	.word	0x00016895

000163a8 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   163a8:	f010 fc7c 	bl	26ca4 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   163ac:	2020      	movs	r0, #32
    msr BASEPRI, r0
   163ae:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   163b2:	4808      	ldr	r0, [pc, #32]	; (163d4 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   163b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   163b8:	1840      	adds	r0, r0, r1
    msr PSP, r0
   163ba:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   163be:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   163c2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   163c4:	4308      	orrs	r0, r1
    msr CONTROL, r0
   163c6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   163ca:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   163ce:	f7ff ffa9 	bl	16324 <z_arm_prep_c>
   163d2:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   163d4:	2000c760 	.word	0x2000c760

000163d8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   163d8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   163dc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   163e0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   163e2:	4672      	mov	r2, lr
	bl z_arm_fault
   163e4:	f000 f95e 	bl	166a4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   163e8:	bd01      	pop	{r0, pc}
   163ea:	bf00      	nop

000163ec <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   163ec:	b570      	push	{r4, r5, r6, lr}
   163ee:	4b28      	ldr	r3, [pc, #160]	; (16490 <usage_fault.isra.0+0xa4>)
   163f0:	4c28      	ldr	r4, [pc, #160]	; (16494 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   163f2:	4d29      	ldr	r5, [pc, #164]	; (16498 <usage_fault.isra.0+0xac>)
   163f4:	1ae4      	subs	r4, r4, r3
   163f6:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   163f8:	01a4      	lsls	r4, r4, #6
   163fa:	f044 0601 	orr.w	r6, r4, #1
   163fe:	4631      	mov	r1, r6
   16400:	4826      	ldr	r0, [pc, #152]	; (1649c <usage_fault.isra.0+0xb0>)
   16402:	f010 fc95 	bl	26d30 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   16406:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   16408:	0193      	lsls	r3, r2, #6
   1640a:	d503      	bpl.n	16414 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   1640c:	4631      	mov	r1, r6
   1640e:	4824      	ldr	r0, [pc, #144]	; (164a0 <usage_fault.isra.0+0xb4>)
   16410:	f010 fc8e 	bl	26d30 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   16414:	6aab      	ldr	r3, [r5, #40]	; 0x28
   16416:	01dd      	lsls	r5, r3, #7
   16418:	d504      	bpl.n	16424 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   1641a:	4822      	ldr	r0, [pc, #136]	; (164a4 <usage_fault.isra.0+0xb8>)
   1641c:	f044 0101 	orr.w	r1, r4, #1
   16420:	f010 fc86 	bl	26d30 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   16424:	4d1c      	ldr	r5, [pc, #112]	; (16498 <usage_fault.isra.0+0xac>)
   16426:	6aae      	ldr	r6, [r5, #40]	; 0x28
   16428:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   1642c:	d005      	beq.n	1643a <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   1642e:	481e      	ldr	r0, [pc, #120]	; (164a8 <usage_fault.isra.0+0xbc>)
   16430:	f044 0101 	orr.w	r1, r4, #1
   16434:	f010 fc7c 	bl	26d30 <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   16438:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1643a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1643c:	0318      	lsls	r0, r3, #12
   1643e:	d504      	bpl.n	1644a <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
   16440:	481a      	ldr	r0, [pc, #104]	; (164ac <usage_fault.isra.0+0xc0>)
   16442:	f044 0101 	orr.w	r1, r4, #1
   16446:	f010 fc73 	bl	26d30 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1644a:	4d13      	ldr	r5, [pc, #76]	; (16498 <usage_fault.isra.0+0xac>)
   1644c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1644e:	0351      	lsls	r1, r2, #13
   16450:	d504      	bpl.n	1645c <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   16452:	4817      	ldr	r0, [pc, #92]	; (164b0 <usage_fault.isra.0+0xc4>)
   16454:	f044 0101 	orr.w	r1, r4, #1
   16458:	f010 fc6a 	bl	26d30 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1645c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1645e:	039a      	lsls	r2, r3, #14
   16460:	d504      	bpl.n	1646c <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   16462:	4814      	ldr	r0, [pc, #80]	; (164b4 <usage_fault.isra.0+0xc8>)
   16464:	f044 0101 	orr.w	r1, r4, #1
   16468:	f010 fc62 	bl	26d30 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1646c:	4d0a      	ldr	r5, [pc, #40]	; (16498 <usage_fault.isra.0+0xac>)
   1646e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   16470:	03db      	lsls	r3, r3, #15
   16472:	d504      	bpl.n	1647e <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   16474:	4810      	ldr	r0, [pc, #64]	; (164b8 <usage_fault.isra.0+0xcc>)
   16476:	f044 0101 	orr.w	r1, r4, #1
   1647a:	f010 fc59 	bl	26d30 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1647e:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   16480:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   16482:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   16486:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1648a:	62ab      	str	r3, [r5, #40]	; 0x28
}
   1648c:	bd70      	pop	{r4, r5, r6, pc}
   1648e:	bf00      	nop
   16490:	0002bfe4 	.word	0x0002bfe4
   16494:	0002c0cc 	.word	0x0002c0cc
   16498:	e000ed00 	.word	0xe000ed00
   1649c:	0002e3d8 	.word	0x0002e3d8
   164a0:	0002e3f0 	.word	0x0002e3f0
   164a4:	0002e403 	.word	0x0002e403
   164a8:	0002e41d 	.word	0x0002e41d
   164ac:	0002e447 	.word	0x0002e447
   164b0:	0002e465 	.word	0x0002e465
   164b4:	0002e48a 	.word	0x0002e48a
   164b8:	0002e4a4 	.word	0x0002e4a4

000164bc <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   164bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   164c0:	4b33      	ldr	r3, [pc, #204]	; (16590 <mem_manage_fault.isra.0+0xd4>)
   164c2:	4c34      	ldr	r4, [pc, #208]	; (16594 <mem_manage_fault.isra.0+0xd8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   164c4:	4d34      	ldr	r5, [pc, #208]	; (16598 <mem_manage_fault.isra.0+0xdc>)
   164c6:	1ae4      	subs	r4, r4, r3
   164c8:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   164ca:	01a4      	lsls	r4, r4, #6
   164cc:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   164d0:	4607      	mov	r7, r0
   164d2:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   164d4:	4831      	ldr	r0, [pc, #196]	; (1659c <mem_manage_fault.isra.0+0xe0>)
   164d6:	4641      	mov	r1, r8
   164d8:	f010 fc2a 	bl	26d30 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   164dc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   164de:	06d0      	lsls	r0, r2, #27
   164e0:	d503      	bpl.n	164ea <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   164e2:	4641      	mov	r1, r8
   164e4:	482e      	ldr	r0, [pc, #184]	; (165a0 <mem_manage_fault.isra.0+0xe4>)
   164e6:	f010 fc23 	bl	26d30 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   164ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
   164ec:	0719      	lsls	r1, r3, #28
   164ee:	d504      	bpl.n	164fa <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   164f0:	482c      	ldr	r0, [pc, #176]	; (165a4 <mem_manage_fault.isra.0+0xe8>)
   164f2:	f044 0101 	orr.w	r1, r4, #1
   164f6:	f010 fc1b 	bl	26d30 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   164fa:	4d27      	ldr	r5, [pc, #156]	; (16598 <mem_manage_fault.isra.0+0xdc>)
   164fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   164fe:	079a      	lsls	r2, r3, #30
   16500:	d512      	bpl.n	16528 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   16502:	f044 0801 	orr.w	r8, r4, #1
   16506:	4641      	mov	r1, r8
   16508:	4827      	ldr	r0, [pc, #156]	; (165a8 <mem_manage_fault.isra.0+0xec>)
   1650a:	f010 fc11 	bl	26d30 <log_0>
		uint32_t temp = SCB->MMFAR;
   1650e:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   16510:	6aab      	ldr	r3, [r5, #40]	; 0x28
   16512:	061b      	lsls	r3, r3, #24
   16514:	d508      	bpl.n	16528 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   16516:	4642      	mov	r2, r8
   16518:	4824      	ldr	r0, [pc, #144]	; (165ac <mem_manage_fault.isra.0+0xf0>)
   1651a:	f010 fc16 	bl	26d4a <log_1>
			if (from_hard_fault != 0) {
   1651e:	b11f      	cbz	r7, 16528 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   16520:	6aab      	ldr	r3, [r5, #40]	; 0x28
   16522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   16526:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   16528:	4d1b      	ldr	r5, [pc, #108]	; (16598 <mem_manage_fault.isra.0+0xdc>)
   1652a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1652c:	07d7      	lsls	r7, r2, #31
   1652e:	d504      	bpl.n	1653a <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   16530:	481f      	ldr	r0, [pc, #124]	; (165b0 <mem_manage_fault.isra.0+0xf4>)
   16532:	f044 0101 	orr.w	r1, r4, #1
   16536:	f010 fbfb 	bl	26d30 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1653a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1653c:	0698      	lsls	r0, r3, #26
   1653e:	d504      	bpl.n	1654a <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   16540:	481c      	ldr	r0, [pc, #112]	; (165b4 <mem_manage_fault.isra.0+0xf8>)
   16542:	f044 0101 	orr.w	r1, r4, #1
   16546:	f010 fbf3 	bl	26d30 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1654a:	4b13      	ldr	r3, [pc, #76]	; (16598 <mem_manage_fault.isra.0+0xdc>)
   1654c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1654e:	06d1      	lsls	r1, r2, #27
   16550:	d402      	bmi.n	16558 <mem_manage_fault.isra.0+0x9c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   16552:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   16554:	0792      	lsls	r2, r2, #30
   16556:	d511      	bpl.n	1657c <mem_manage_fault.isra.0+0xc0>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   16558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1655a:	06db      	lsls	r3, r3, #27
   1655c:	d50e      	bpl.n	1657c <mem_manage_fault.isra.0+0xc0>
   1655e:	4916      	ldr	r1, [pc, #88]	; (165b8 <mem_manage_fault.isra.0+0xfc>)
   16560:	f240 134f 	movw	r3, #335	; 0x14f
   16564:	4a15      	ldr	r2, [pc, #84]	; (165bc <mem_manage_fault.isra.0+0x100>)
   16566:	4816      	ldr	r0, [pc, #88]	; (165c0 <mem_manage_fault.isra.0+0x104>)
   16568:	f010 f8d8 	bl	2671c <printk>
   1656c:	4815      	ldr	r0, [pc, #84]	; (165c4 <mem_manage_fault.isra.0+0x108>)
   1656e:	f010 f8d5 	bl	2671c <printk>
   16572:	f240 114f 	movw	r1, #335	; 0x14f
   16576:	4811      	ldr	r0, [pc, #68]	; (165bc <mem_manage_fault.isra.0+0x100>)
   16578:	f010 fb75 	bl	26c66 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf, true);
   1657c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1657e:	4a06      	ldr	r2, [pc, #24]	; (16598 <mem_manage_fault.isra.0+0xdc>)
   16580:	6a93      	ldr	r3, [r2, #40]	; 0x28
   16582:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   16586:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   16588:	7030      	strb	r0, [r6, #0]
}
   1658a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1658e:	bf00      	nop
   16590:	0002bfe4 	.word	0x0002bfe4
   16594:	0002c0cc 	.word	0x0002c0cc
   16598:	e000ed00 	.word	0xe000ed00
   1659c:	0002e4cf 	.word	0x0002e4cf
   165a0:	0002e4e5 	.word	0x0002e4e5
   165a4:	0002e518 	.word	0x0002e518
   165a8:	0002e52b 	.word	0x0002e52b
   165ac:	0002e543 	.word	0x0002e543
   165b0:	0002e559 	.word	0x0002e559
   165b4:	0002e578 	.word	0x0002e578
   165b8:	0002e5e1 	.word	0x0002e5e1
   165bc:	0002e5a7 	.word	0x0002e5a7
   165c0:	0002cfb2 	.word	0x0002cfb2
   165c4:	0002e62b 	.word	0x0002e62b

000165c8 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   165c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   165cc:	4b2a      	ldr	r3, [pc, #168]	; (16678 <bus_fault.isra.0+0xb0>)
   165ce:	4c2b      	ldr	r4, [pc, #172]	; (1667c <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   165d0:	4d2b      	ldr	r5, [pc, #172]	; (16680 <bus_fault.isra.0+0xb8>)
   165d2:	1ae4      	subs	r4, r4, r3
   165d4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   165d6:	01a4      	lsls	r4, r4, #6
   165d8:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   165dc:	4607      	mov	r7, r0
   165de:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   165e0:	4828      	ldr	r0, [pc, #160]	; (16684 <bus_fault.isra.0+0xbc>)
   165e2:	4641      	mov	r1, r8
   165e4:	f010 fba4 	bl	26d30 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   165e8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   165ea:	04d1      	lsls	r1, r2, #19
   165ec:	d503      	bpl.n	165f6 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   165ee:	4641      	mov	r1, r8
   165f0:	4825      	ldr	r0, [pc, #148]	; (16688 <bus_fault.isra.0+0xc0>)
   165f2:	f010 fb9d 	bl	26d30 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   165f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   165f8:	051a      	lsls	r2, r3, #20
   165fa:	d504      	bpl.n	16606 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   165fc:	4823      	ldr	r0, [pc, #140]	; (1668c <bus_fault.isra.0+0xc4>)
   165fe:	f044 0101 	orr.w	r1, r4, #1
   16602:	f010 fb95 	bl	26d30 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   16606:	4d1e      	ldr	r5, [pc, #120]	; (16680 <bus_fault.isra.0+0xb8>)
   16608:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1660a:	059b      	lsls	r3, r3, #22
   1660c:	d512      	bpl.n	16634 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   1660e:	f044 0801 	orr.w	r8, r4, #1
   16612:	4641      	mov	r1, r8
   16614:	481e      	ldr	r0, [pc, #120]	; (16690 <bus_fault.isra.0+0xc8>)
   16616:	f010 fb8b 	bl	26d30 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   1661a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1661c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1661e:	0418      	lsls	r0, r3, #16
   16620:	d508      	bpl.n	16634 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   16622:	4642      	mov	r2, r8
   16624:	481b      	ldr	r0, [pc, #108]	; (16694 <bus_fault.isra.0+0xcc>)
   16626:	f010 fb90 	bl	26d4a <log_1>
			if (from_hard_fault != 0) {
   1662a:	b11f      	cbz	r7, 16634 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1662c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1662e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   16632:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   16634:	4d12      	ldr	r5, [pc, #72]	; (16680 <bus_fault.isra.0+0xb8>)
   16636:	6aab      	ldr	r3, [r5, #40]	; 0x28
   16638:	0559      	lsls	r1, r3, #21
   1663a:	d504      	bpl.n	16646 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   1663c:	4816      	ldr	r0, [pc, #88]	; (16698 <bus_fault.isra.0+0xd0>)
   1663e:	f044 0101 	orr.w	r1, r4, #1
   16642:	f010 fb75 	bl	26d30 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   16646:	6aab      	ldr	r3, [r5, #40]	; 0x28
   16648:	05da      	lsls	r2, r3, #23
   1664a:	d50d      	bpl.n	16668 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   1664c:	4813      	ldr	r0, [pc, #76]	; (1669c <bus_fault.isra.0+0xd4>)
   1664e:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   16652:	f010 fb6d 	bl	26d30 <log_0>
	*recoverable = memory_fault_recoverable(esf, true);
   16656:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   16658:	4a09      	ldr	r2, [pc, #36]	; (16680 <bus_fault.isra.0+0xb8>)
   1665a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1665c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   16660:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   16662:	7030      	strb	r0, [r6, #0]
}
   16664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   16668:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1666a:	049b      	lsls	r3, r3, #18
   1666c:	d5f3      	bpl.n	16656 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1666e:	480c      	ldr	r0, [pc, #48]	; (166a0 <bus_fault.isra.0+0xd8>)
   16670:	f044 0101 	orr.w	r1, r4, #1
   16674:	e7ed      	b.n	16652 <bus_fault.isra.0+0x8a>
   16676:	bf00      	nop
   16678:	0002bfe4 	.word	0x0002bfe4
   1667c:	0002c0cc 	.word	0x0002c0cc
   16680:	e000ed00 	.word	0xe000ed00
   16684:	0002e68f 	.word	0x0002e68f
   16688:	0002e6a5 	.word	0x0002e6a5
   1668c:	0002e518 	.word	0x0002e518
   16690:	0002e6b6 	.word	0x0002e6b6
   16694:	0002e6cf 	.word	0x0002e6cf
   16698:	0002e6e4 	.word	0x0002e6e4
   1669c:	0002e6ff 	.word	0x0002e6ff
   166a0:	0002e578 	.word	0x0002e578

000166a4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   166a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   166a8:	4b62      	ldr	r3, [pc, #392]	; (16834 <z_arm_fault+0x190>)
{
   166aa:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   166ac:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   166b0:	4689      	mov	r9, r1
   166b2:	4614      	mov	r4, r2
   166b4:	2700      	movs	r7, #0
   166b6:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   166b8:	f3c8 0508 	ubfx	r5, r8, #0, #9
   166bc:	f387 8811 	msr	BASEPRI, r7
   166c0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   166c4:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   166c8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   166cc:	d117      	bne.n	166fe <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   166ce:	07d0      	lsls	r0, r2, #31
   166d0:	d415      	bmi.n	166fe <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   166d2:	0651      	lsls	r1, r2, #25
   166d4:	d403      	bmi.n	166de <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   166d6:	0722      	lsls	r2, r4, #28
   166d8:	d40e      	bmi.n	166f8 <z_arm_fault+0x54>
			*nested_exc = true;
   166da:	2701      	movs	r7, #1
   166dc:	e00e      	b.n	166fc <z_arm_fault+0x58>
   166de:	4956      	ldr	r1, [pc, #344]	; (16838 <z_arm_fault+0x194>)
   166e0:	4b56      	ldr	r3, [pc, #344]	; (1683c <z_arm_fault+0x198>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   166e2:	4857      	ldr	r0, [pc, #348]	; (16840 <z_arm_fault+0x19c>)
   166e4:	1a5b      	subs	r3, r3, r1
   166e6:	08db      	lsrs	r3, r3, #3
   166e8:	019b      	lsls	r3, r3, #6
   166ea:	f043 0101 	orr.w	r1, r3, #1
   166ee:	f010 fb1f 	bl	26d30 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   166f2:	f014 0704 	ands.w	r7, r4, #4
   166f6:	d001      	beq.n	166fc <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)psp;
   166f8:	464e      	mov	r6, r9
	*nested_exc = false;
   166fa:	2700      	movs	r7, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   166fc:	b97e      	cbnz	r6, 1671e <z_arm_fault+0x7a>
   166fe:	f240 33e1 	movw	r3, #993	; 0x3e1
   16702:	4a50      	ldr	r2, [pc, #320]	; (16844 <z_arm_fault+0x1a0>)
   16704:	4950      	ldr	r1, [pc, #320]	; (16848 <z_arm_fault+0x1a4>)
   16706:	4851      	ldr	r0, [pc, #324]	; (1684c <z_arm_fault+0x1a8>)
   16708:	f010 f808 	bl	2671c <printk>
   1670c:	4850      	ldr	r0, [pc, #320]	; (16850 <z_arm_fault+0x1ac>)
   1670e:	f010 f805 	bl	2671c <printk>
   16712:	f240 31e1 	movw	r1, #993	; 0x3e1
   16716:	484b      	ldr	r0, [pc, #300]	; (16844 <z_arm_fault+0x1a0>)
   16718:	f010 faa5 	bl	26c66 <assert_post_action>
   1671c:	2600      	movs	r6, #0
	*recoverable = false;
   1671e:	2300      	movs	r3, #0
   16720:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   16724:	1eeb      	subs	r3, r5, #3
   16726:	2b09      	cmp	r3, #9
   16728:	d86a      	bhi.n	16800 <z_arm_fault+0x15c>
   1672a:	e8df f003 	tbb	[pc, r3]
   1672e:	5805      	.short	0x5805
   16730:	69693c5c 	.word	0x69693c5c
   16734:	60696969 	.word	0x60696969
	*recoverable = false;
   16738:	f04f 0800 	mov.w	r8, #0
   1673c:	4b3e      	ldr	r3, [pc, #248]	; (16838 <z_arm_fault+0x194>)
   1673e:	4d3f      	ldr	r5, [pc, #252]	; (1683c <z_arm_fault+0x198>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   16740:	4844      	ldr	r0, [pc, #272]	; (16854 <z_arm_fault+0x1b0>)
   16742:	1aed      	subs	r5, r5, r3
   16744:	08ed      	lsrs	r5, r5, #3
   16746:	01ad      	lsls	r5, r5, #6
   16748:	f045 0501 	orr.w	r5, r5, #1
   1674c:	4629      	mov	r1, r5
   1674e:	f010 faef 	bl	26d30 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   16752:	4b38      	ldr	r3, [pc, #224]	; (16834 <z_arm_fault+0x190>)
	*recoverable = false;
   16754:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   16758:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1675a:	f014 0402 	ands.w	r4, r4, #2
   1675e:	d005      	beq.n	1676c <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
   16760:	4629      	mov	r1, r5
   16762:	483d      	ldr	r0, [pc, #244]	; (16858 <z_arm_fault+0x1b4>)
	PR_FAULT_INFO(
   16764:	f010 fae4 	bl	26d30 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   16768:	2400      	movs	r4, #0
}
   1676a:	e01f      	b.n	167ac <z_arm_fault+0x108>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1676e:	005b      	lsls	r3, r3, #1
   16770:	d51c      	bpl.n	167ac <z_arm_fault+0x108>
		PR_EXC("  Fault escalation (see below)");
   16772:	4629      	mov	r1, r5
   16774:	4839      	ldr	r0, [pc, #228]	; (1685c <z_arm_fault+0x1b8>)
   16776:	f010 fadb 	bl	26d30 <log_0>
		if (SCB_MMFSR != 0) {
   1677a:	4b39      	ldr	r3, [pc, #228]	; (16860 <z_arm_fault+0x1bc>)
   1677c:	781b      	ldrb	r3, [r3, #0]
   1677e:	b12b      	cbz	r3, 1678c <z_arm_fault+0xe8>
			reason = mem_manage_fault(esf, 1, recoverable);
   16780:	2001      	movs	r0, #1
   16782:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   16786:	f7ff fe99 	bl	164bc <mem_manage_fault.isra.0>
   1678a:	e00e      	b.n	167aa <z_arm_fault+0x106>
		} else if (SCB_BFSR != 0) {
   1678c:	4b35      	ldr	r3, [pc, #212]	; (16864 <z_arm_fault+0x1c0>)
   1678e:	781b      	ldrb	r3, [r3, #0]
   16790:	b12b      	cbz	r3, 1679e <z_arm_fault+0xfa>
			reason = bus_fault(esf, 1, recoverable);
   16792:	2001      	movs	r0, #1
   16794:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   16798:	f7ff ff16 	bl	165c8 <bus_fault.isra.0>
   1679c:	e005      	b.n	167aa <z_arm_fault+0x106>
		} else if (SCB_UFSR != 0) {
   1679e:	4b32      	ldr	r3, [pc, #200]	; (16868 <z_arm_fault+0x1c4>)
   167a0:	881b      	ldrh	r3, [r3, #0]
   167a2:	b29b      	uxth	r3, r3
   167a4:	b113      	cbz	r3, 167ac <z_arm_fault+0x108>
			reason = usage_fault(esf);
   167a6:	f7ff fe21 	bl	163ec <usage_fault.isra.0>
   167aa:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   167ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   167b0:	b993      	cbnz	r3, 167d8 <z_arm_fault+0x134>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   167b2:	2220      	movs	r2, #32
   167b4:	4631      	mov	r1, r6
   167b6:	a802      	add	r0, sp, #8
   167b8:	f011 feeb 	bl	28592 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   167bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   167be:	b39f      	cbz	r7, 16828 <z_arm_fault+0x184>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   167c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
   167c4:	b922      	cbnz	r2, 167d0 <z_arm_fault+0x12c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   167c6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   167ca:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   167ce:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   167d0:	4620      	mov	r0, r4
   167d2:	a902      	add	r1, sp, #8
   167d4:	f7ff fd6a 	bl	162ac <z_arm_fatal_error>
}
   167d8:	b00b      	add	sp, #44	; 0x2c
   167da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   167de:	2000      	movs	r0, #0
   167e0:	f10d 0107 	add.w	r1, sp, #7
   167e4:	e7cf      	b.n	16786 <z_arm_fault+0xe2>
		reason = bus_fault(esf, 0, recoverable);
   167e6:	2000      	movs	r0, #0
   167e8:	f10d 0107 	add.w	r1, sp, #7
   167ec:	e7d4      	b.n	16798 <z_arm_fault+0xf4>
   167ee:	4913      	ldr	r1, [pc, #76]	; (1683c <z_arm_fault+0x198>)
   167f0:	4b11      	ldr	r3, [pc, #68]	; (16838 <z_arm_fault+0x194>)
	PR_FAULT_INFO(
   167f2:	481e      	ldr	r0, [pc, #120]	; (1686c <z_arm_fault+0x1c8>)
   167f4:	1ac9      	subs	r1, r1, r3
   167f6:	08c9      	lsrs	r1, r1, #3
   167f8:	0189      	lsls	r1, r1, #6
   167fa:	f041 0101 	orr.w	r1, r1, #1
   167fe:	e7b1      	b.n	16764 <z_arm_fault+0xc0>
   16800:	4a0d      	ldr	r2, [pc, #52]	; (16838 <z_arm_fault+0x194>)
   16802:	4b0e      	ldr	r3, [pc, #56]	; (1683c <z_arm_fault+0x198>)
	PR_FAULT_INFO("***** %s %d) *****",
   16804:	481a      	ldr	r0, [pc, #104]	; (16870 <z_arm_fault+0x1cc>)
   16806:	1a9b      	subs	r3, r3, r2
   16808:	08db      	lsrs	r3, r3, #3
   1680a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   1680e:	ea4f 1383 	mov.w	r3, r3, lsl #6
   16812:	4918      	ldr	r1, [pc, #96]	; (16874 <z_arm_fault+0x1d0>)
   16814:	f043 0301 	orr.w	r3, r3, #1
   16818:	bf18      	it	ne
   1681a:	4601      	movne	r1, r0
   1681c:	f1a5 0210 	sub.w	r2, r5, #16
   16820:	4815      	ldr	r0, [pc, #84]	; (16878 <z_arm_fault+0x1d4>)
   16822:	f010 faa6 	bl	26d72 <log_2>
   16826:	e79f      	b.n	16768 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   16828:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1682c:	f023 0301 	bic.w	r3, r3, #1
   16830:	e7cd      	b.n	167ce <z_arm_fault+0x12a>
   16832:	bf00      	nop
   16834:	e000ed00 	.word	0xe000ed00
   16838:	0002bfe4 	.word	0x0002bfe4
   1683c:	0002c0cc 	.word	0x0002c0cc
   16840:	0002e717 	.word	0x0002e717
   16844:	0002e5a7 	.word	0x0002e5a7
   16848:	0002e73a 	.word	0x0002e73a
   1684c:	0002cfb2 	.word	0x0002cfb2
   16850:	0002e74d 	.word	0x0002e74d
   16854:	0002e78b 	.word	0x0002e78b
   16858:	0002e7a2 	.word	0x0002e7a2
   1685c:	0002e7c3 	.word	0x0002e7c3
   16860:	e000ed28 	.word	0xe000ed28
   16864:	e000ed29 	.word	0xe000ed29
   16868:	e000ed2a 	.word	0xe000ed2a
   1686c:	0002e7e2 	.word	0x0002e7e2
   16870:	0002e81b 	.word	0x0002e81b
   16874:	0002e806 	.word	0x0002e806
   16878:	0002e834 	.word	0x0002e834

0001687c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1687c:	4b04      	ldr	r3, [pc, #16]	; (16890 <z_arm_fault_init+0x14>)
   1687e:	695a      	ldr	r2, [r3, #20]
   16880:	f042 0210 	orr.w	r2, r2, #16
   16884:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   16886:	695a      	ldr	r2, [r3, #20]
   16888:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1688c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   1688e:	4770      	bx	lr
   16890:	e000ed00 	.word	0xe000ed00

00016894 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   16894:	4b04      	ldr	r3, [pc, #16]	; (168a8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   16896:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   16898:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   1689a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1689c:	d003      	beq.n	168a6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1689e:	4903      	ldr	r1, [pc, #12]	; (168ac <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   168a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   168a4:	600a      	str	r2, [r1, #0]

000168a6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   168a6:	4770      	bx	lr
	ldr r3, =_kernel
   168a8:	20009ba8 	.word	0x20009ba8
	ldr r1, =_SCS_ICSR
   168ac:	e000ed04 	.word	0xe000ed04

000168b0 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   168b0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   168b4:	4905      	ldr	r1, [pc, #20]	; (168cc <sys_arch_reboot+0x1c>)
   168b6:	4b06      	ldr	r3, [pc, #24]	; (168d0 <sys_arch_reboot+0x20>)
   168b8:	68ca      	ldr	r2, [r1, #12]
   168ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   168be:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   168c0:	60cb      	str	r3, [r1, #12]
   168c2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   168c6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   168c8:	e7fd      	b.n	168c6 <sys_arch_reboot+0x16>
   168ca:	bf00      	nop
   168cc:	e000ed00 	.word	0xe000ed00
   168d0:	05fa0004 	.word	0x05fa0004

000168d4 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   168d4:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   168d6:	2120      	movs	r1, #32
   168d8:	4803      	ldr	r0, [pc, #12]	; (168e8 <z_arm_interrupt_init+0x14>)
   168da:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   168dc:	3301      	adds	r3, #1
   168de:	2b45      	cmp	r3, #69	; 0x45
   168e0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   168e4:	d1f9      	bne.n	168da <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   168e6:	4770      	bx	lr
   168e8:	e000e100 	.word	0xe000e100

000168ec <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   168ec:	4b06      	ldr	r3, [pc, #24]	; (16908 <z_impl_k_thread_abort+0x1c>)
   168ee:	689b      	ldr	r3, [r3, #8]
   168f0:	4283      	cmp	r3, r0
   168f2:	d107      	bne.n	16904 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   168f4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   168f8:	b123      	cbz	r3, 16904 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   168fa:	4a04      	ldr	r2, [pc, #16]	; (1690c <z_impl_k_thread_abort+0x20>)
   168fc:	6853      	ldr	r3, [r2, #4]
   168fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   16902:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   16904:	f00e bcd8 	b.w	252b8 <z_thread_abort>
   16908:	20009ba8 	.word	0x20009ba8
   1690c:	e000ed00 	.word	0xe000ed00

00016910 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   16910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   16912:	4c09      	ldr	r4, [pc, #36]	; (16938 <z_arm_configure_static_mpu_regions+0x28>)
   16914:	4a09      	ldr	r2, [pc, #36]	; (1693c <z_arm_configure_static_mpu_regions+0x2c>)
   16916:	4623      	mov	r3, r4
   16918:	2101      	movs	r1, #1
   1691a:	4809      	ldr	r0, [pc, #36]	; (16940 <z_arm_configure_static_mpu_regions+0x30>)
   1691c:	f000 f912 	bl	16b44 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   16920:	2300      	movs	r3, #0
   16922:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   16924:	4b07      	ldr	r3, [pc, #28]	; (16944 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   16926:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   16928:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1692a:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1692c:	9301      	str	r3, [sp, #4]
   1692e:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   16930:	f000 f92e 	bl	16b90 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   16934:	b004      	add	sp, #16
   16936:	bd10      	pop	{r4, pc}
   16938:	20070000 	.word	0x20070000
   1693c:	20008000 	.word	0x20008000
   16940:	0002c488 	.word	0x0002c488
   16944:	20008720 	.word	0x20008720

00016948 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   16948:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1694a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1694c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1694e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   16952:	f004 031f 	and.w	r3, r4, #31
   16956:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   16958:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1695a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1695c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   16960:	4904      	ldr	r1, [pc, #16]	; (16974 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   16962:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   16966:	f043 0301 	orr.w	r3, r3, #1
   1696a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   1696c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   1696e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   16970:	bd10      	pop	{r4, pc}
   16972:	bf00      	nop
   16974:	e000ed90 	.word	0xe000ed90

00016978 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   16978:	2807      	cmp	r0, #7
{
   1697a:	b510      	push	{r4, lr}
	if (index > (get_num_regions() - 1U)) {
   1697c:	d90d      	bls.n	1699a <region_allocate_and_init+0x22>
   1697e:	4b08      	ldr	r3, [pc, #32]	; (169a0 <region_allocate_and_init+0x28>)
   16980:	4a08      	ldr	r2, [pc, #32]	; (169a4 <region_allocate_and_init+0x2c>)

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   16982:	4601      	mov	r1, r0
   16984:	1ad2      	subs	r2, r2, r3
   16986:	08d2      	lsrs	r2, r2, #3
   16988:	0192      	lsls	r2, r2, #6
   1698a:	4807      	ldr	r0, [pc, #28]	; (169a8 <region_allocate_and_init+0x30>)
   1698c:	f042 0201 	orr.w	r2, r2, #1
   16990:	f010 f9db 	bl	26d4a <log_1>
		return -EINVAL;
   16994:	f06f 0015 	mvn.w	r0, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   16998:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   1699a:	f7ff ffd5 	bl	16948 <region_init>
	return index;
   1699e:	e7fb      	b.n	16998 <region_allocate_and_init+0x20>
   169a0:	0002bfe4 	.word	0x0002bfe4
   169a4:	0002c0a4 	.word	0x0002c0a4
   169a8:	0002e84b 	.word	0x0002e84b

000169ac <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   169ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169b0:	4689      	mov	r9, r1
   169b2:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   169b4:	4606      	mov	r6, r0
   169b6:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
   169ba:	4d54      	ldr	r5, [pc, #336]	; (16b0c <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   169bc:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   169be:	45c8      	cmp	r8, r9
   169c0:	da33      	bge.n	16a2a <mpu_configure_regions_and_partition.constprop.0+0x7e>
		if (regions[i].size == 0U) {
   169c2:	f8d6 a004 	ldr.w	sl, [r6, #4]
   169c6:	f1ba 0f00 	cmp.w	sl, #0
   169ca:	d04d      	beq.n	16a68 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		&&
   169cc:	f1ba 0f1f 	cmp.w	sl, #31
   169d0:	d91e      	bls.n	16a10 <mpu_configure_regions_and_partition.constprop.0+0x64>
		&&
   169d2:	f01a 0f1f 	tst.w	sl, #31
   169d6:	d11b      	bne.n	16a10 <mpu_configure_regions_and_partition.constprop.0+0x64>
		((part->start &
   169d8:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   169dc:	f01b 0f1f 	tst.w	fp, #31
   169e0:	d116      	bne.n	16a10 <mpu_configure_regions_and_partition.constprop.0+0x64>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   169e2:	4658      	mov	r0, fp
   169e4:	f011 fce5 	bl	283b2 <arm_cmse_mpu_region_get>
   169e8:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   169ea:	eb0a 000b 	add.w	r0, sl, fp
   169ee:	3801      	subs	r0, #1
   169f0:	f011 fcdf 	bl	283b2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   169f4:	4287      	cmp	r7, r0
   169f6:	d01c      	beq.n	16a32 <mpu_configure_regions_and_partition.constprop.0+0x86>
	return -EINVAL;
   169f8:	f06f 0715 	mvn.w	r7, #21
   169fc:	4a44      	ldr	r2, [pc, #272]	; (16b10 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   169fe:	4b45      	ldr	r3, [pc, #276]	; (16b14 <mpu_configure_regions_and_partition.constprop.0+0x168>)
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   16a00:	4639      	mov	r1, r7
   16a02:	1ad2      	subs	r2, r2, r3
   16a04:	08d2      	lsrs	r2, r2, #3
   16a06:	0192      	lsls	r2, r2, #6
   16a08:	4843      	ldr	r0, [pc, #268]	; (16b18 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   16a0a:	f042 0201 	orr.w	r2, r2, #1
   16a0e:	e008      	b.n	16a22 <mpu_configure_regions_and_partition.constprop.0+0x76>
			LOG_ERR("Partition %u: sanity check failed.", i);
   16a10:	4641      	mov	r1, r8
   16a12:	4a3f      	ldr	r2, [pc, #252]	; (16b10 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   16a14:	4b3f      	ldr	r3, [pc, #252]	; (16b14 <mpu_configure_regions_and_partition.constprop.0+0x168>)
   16a16:	4841      	ldr	r0, [pc, #260]	; (16b1c <mpu_configure_regions_and_partition.constprop.0+0x170>)
   16a18:	1ad2      	subs	r2, r2, r3
   16a1a:	08d2      	lsrs	r2, r2, #3
   16a1c:	0192      	lsls	r2, r2, #6
   16a1e:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   16a22:	f010 f992 	bl	26d4a <log_1>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   16a26:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   16a2a:	4620      	mov	r0, r4
   16a2c:	b005      	add	sp, #20
   16a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   16a32:	f117 0f16 	cmn.w	r7, #22
   16a36:	d0e1      	beq.n	169fc <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
   16a38:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   16a3a:	42bb      	cmp	r3, r7
   16a3c:	dbde      	blt.n	169fc <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
   16a3e:	60af      	str	r7, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   16a40:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
   16a42:	60af      	str	r7, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   16a44:	692b      	ldr	r3, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   16a46:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   16a4a:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   16a4e:	e9d6 3200 	ldrd	r3, r2, [r6]
   16a52:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   16a54:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   16a56:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   16a5a:	d11a      	bne.n	16a92 <mpu_configure_regions_and_partition.constprop.0+0xe6>
   16a5c:	45d3      	cmp	fp, sl
   16a5e:	d107      	bne.n	16a70 <mpu_configure_regions_and_partition.constprop.0+0xc4>
			mpu_configure_region(u_reg_index, &regions[i]);
   16a60:	4631      	mov	r1, r6
   16a62:	b2f8      	uxtb	r0, r7
   16a64:	f011 fcae 	bl	283c4 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   16a68:	f108 0801 	add.w	r8, r8, #1
   16a6c:	360c      	adds	r6, #12
   16a6e:	e7a6      	b.n	169be <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   16a70:	4631      	mov	r1, r6
	MPU->RNR = index;
   16a72:	60af      	str	r7, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   16a74:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   16a76:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   16a7a:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   16a7e:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   16a80:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
   16a82:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   16a84:	f011 fc9e 	bl	283c4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   16a88:	f110 0f16 	cmn.w	r0, #22
   16a8c:	d0cb      	beq.n	16a26 <mpu_configure_regions_and_partition.constprop.0+0x7a>
			reg_index++;
   16a8e:	1c44      	adds	r4, r0, #1
   16a90:	e7ea      	b.n	16a68 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		} else if (reg_last == u_reg_last) {
   16a92:	3b01      	subs	r3, #1
   16a94:	45d3      	cmp	fp, sl
   16a96:	b2e0      	uxtb	r0, r4
   16a98:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   16a9c:	60af      	str	r7, [r5, #8]
		} else if (reg_last == u_reg_last) {
   16a9e:	d106      	bne.n	16aae <mpu_configure_regions_and_partition.constprop.0+0x102>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   16aa0:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   16aa2:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   16aa4:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   16aa8:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   16aaa:	612b      	str	r3, [r5, #16]
			reg_index =
   16aac:	e7ea      	b.n	16a84 <mpu_configure_regions_and_partition.constprop.0+0xd8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   16aae:	6929      	ldr	r1, [r5, #16]
   16ab0:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   16ab4:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   16ab6:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   16ab8:	4631      	mov	r1, r6
   16aba:	f011 fc83 	bl	283c4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   16abe:	f110 0f16 	cmn.w	r0, #22
   16ac2:	d0b0      	beq.n	16a26 <mpu_configure_regions_and_partition.constprop.0+0x7a>
	MPU->RNR = index;
   16ac4:	60af      	str	r7, [r5, #8]
	attr->rbar = MPU->RBAR &
   16ac6:	68ea      	ldr	r2, [r5, #12]
   16ac8:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   16acc:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
   16ad0:	f362 0304 	bfi	r3, r2, #0, #5
   16ad4:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   16ad8:	692b      	ldr	r3, [r5, #16]
   16ada:	f89d 2008 	ldrb.w	r2, [sp, #8]
   16ade:	085b      	lsrs	r3, r3, #1
   16ae0:	f363 1247 	bfi	r2, r3, #5, #3
   16ae4:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
   16ae8:	e9d6 3200 	ldrd	r3, r2, [r6]
   16aec:	4413      	add	r3, r2
   16aee:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   16af0:	f023 031f 	bic.w	r3, r3, #31
   16af4:	445b      	add	r3, fp
   16af6:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
   16afa:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   16afc:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   16b00:	4669      	mov	r1, sp
   16b02:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   16b04:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   16b06:	f7ff ff37 	bl	16978 <region_allocate_and_init>
   16b0a:	e7bd      	b.n	16a88 <mpu_configure_regions_and_partition.constprop.0+0xdc>
   16b0c:	e000ed90 	.word	0xe000ed90
   16b10:	0002c0a4 	.word	0x0002c0a4
   16b14:	0002bfe4 	.word	0x0002bfe4
   16b18:	0002e894 	.word	0x0002e894
   16b1c:	0002e871 	.word	0x0002e871

00016b20 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   16b20:	2205      	movs	r2, #5
   16b22:	4b03      	ldr	r3, [pc, #12]	; (16b30 <arm_core_mpu_enable+0x10>)
   16b24:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   16b26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16b2a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   16b2e:	4770      	bx	lr
   16b30:	e000ed90 	.word	0xe000ed90

00016b34 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   16b34:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   16b38:	2200      	movs	r2, #0
   16b3a:	4b01      	ldr	r3, [pc, #4]	; (16b40 <arm_core_mpu_disable+0xc>)
   16b3c:	605a      	str	r2, [r3, #4]
}
   16b3e:	4770      	bx	lr
   16b40:	e000ed90 	.word	0xe000ed90

00016b44 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   16b44:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   16b46:	4d0d      	ldr	r5, [pc, #52]	; (16b7c <arm_core_mpu_configure_static_mpu_regions+0x38>)
   16b48:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   16b4a:	782a      	ldrb	r2, [r5, #0]
   16b4c:	f7ff ff2e 	bl	169ac <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   16b50:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   16b52:	3016      	adds	r0, #22
   16b54:	d111      	bne.n	16b7a <arm_core_mpu_configure_static_mpu_regions+0x36>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   16b56:	f240 1305 	movw	r3, #261	; 0x105
   16b5a:	4a09      	ldr	r2, [pc, #36]	; (16b80 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   16b5c:	4909      	ldr	r1, [pc, #36]	; (16b84 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   16b5e:	480a      	ldr	r0, [pc, #40]	; (16b88 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   16b60:	f00f fddc 	bl	2671c <printk>
   16b64:	4621      	mov	r1, r4
   16b66:	4809      	ldr	r0, [pc, #36]	; (16b8c <arm_core_mpu_configure_static_mpu_regions+0x48>)
   16b68:	f00f fdd8 	bl	2671c <printk>
			regions_num);
	}
}
   16b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   16b70:	f240 1105 	movw	r1, #261	; 0x105
   16b74:	4802      	ldr	r0, [pc, #8]	; (16b80 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   16b76:	f010 b876 	b.w	26c66 <assert_post_action>
}
   16b7a:	bd38      	pop	{r3, r4, r5, pc}
   16b7c:	2000a43b 	.word	0x2000a43b
   16b80:	0002e8b7 	.word	0x0002e8b7
   16b84:	0002dee4 	.word	0x0002dee4
   16b88:	0002cfb2 	.word	0x0002cfb2
   16b8c:	0002e8ee 	.word	0x0002e8ee

00016b90 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   16b90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b94:	4e2f      	ldr	r6, [pc, #188]	; (16c54 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
   16b96:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   16b98:	4605      	mov	r5, r0
   16b9a:	f04f 0800 	mov.w	r8, #0
   16b9e:	46b3      	mov	fp, r6
	MPU->RNR = index;
   16ba0:	4f2d      	ldr	r7, [pc, #180]	; (16c58 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   16ba2:	45c8      	cmp	r8, r9
   16ba4:	db02      	blt.n	16bac <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   16ba6:	b003      	add	sp, #12
   16ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   16bac:	f8d5 a004 	ldr.w	sl, [r5, #4]
   16bb0:	f1ba 0f00 	cmp.w	sl, #0
   16bb4:	d049      	beq.n	16c4a <arm_core_mpu_mark_areas_for_dynamic_regions+0xba>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   16bb6:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   16bb8:	4608      	mov	r0, r1
   16bba:	9101      	str	r1, [sp, #4]
   16bbc:	f011 fbf9 	bl	283b2 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   16bc0:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   16bc2:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   16bc4:	eb0a 0001 	add.w	r0, sl, r1
   16bc8:	3801      	subs	r0, #1
   16bca:	f011 fbf2 	bl	283b2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   16bce:	4284      	cmp	r4, r0
   16bd0:	f04f 0214 	mov.w	r2, #20
   16bd4:	4b21      	ldr	r3, [pc, #132]	; (16c5c <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   16bd6:	d018      	beq.n	16c0a <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   16bd8:	f06f 0315 	mvn.w	r3, #21
   16bdc:	fb02 f808 	mul.w	r8, r2, r8
   16be0:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   16be4:	f240 1315 	movw	r3, #277	; 0x115
   16be8:	4a1d      	ldr	r2, [pc, #116]	; (16c60 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   16bea:	491e      	ldr	r1, [pc, #120]	; (16c64 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   16bec:	481e      	ldr	r0, [pc, #120]	; (16c68 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   16bee:	f00f fd95 	bl	2671c <printk>
   16bf2:	4649      	mov	r1, r9
   16bf4:	481d      	ldr	r0, [pc, #116]	; (16c6c <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   16bf6:	f00f fd91 	bl	2671c <printk>
   16bfa:	f240 1115 	movw	r1, #277	; 0x115
   16bfe:	4818      	ldr	r0, [pc, #96]	; (16c60 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
}
   16c00:	b003      	add	sp, #12
   16c02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   16c06:	f010 b82e 	b.w	26c66 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   16c0a:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   16c0e:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   16c10:	d0e8      	beq.n	16be4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   16c12:	7819      	ldrb	r1, [r3, #0]
   16c14:	42a1      	cmp	r1, r4
   16c16:	dde5      	ble.n	16be4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   16c18:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   16c1c:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   16c1e:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   16c20:	68fc      	ldr	r4, [r7, #12]
   16c22:	f100 0108 	add.w	r1, r0, #8
   16c26:	7b00      	ldrb	r0, [r0, #12]
   16c28:	f364 0004 	bfi	r0, r4, #0, #5
   16c2c:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   16c2e:	6938      	ldr	r0, [r7, #16]
   16c30:	790c      	ldrb	r4, [r1, #4]
   16c32:	0840      	lsrs	r0, r0, #1
   16c34:	f360 1447 	bfi	r4, r0, #5, #3
   16c38:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   16c3a:	68f9      	ldr	r1, [r7, #12]
   16c3c:	f021 011f 	bic.w	r1, r1, #31
   16c40:	6071      	str	r1, [r6, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   16c42:	6939      	ldr	r1, [r7, #16]
   16c44:	f021 011f 	bic.w	r1, r1, #31
   16c48:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   16c4a:	f108 0801 	add.w	r8, r8, #1
   16c4e:	3614      	adds	r6, #20
   16c50:	350c      	adds	r5, #12
   16c52:	e7a6      	b.n	16ba2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   16c54:	200097cc 	.word	0x200097cc
   16c58:	e000ed90 	.word	0xe000ed90
   16c5c:	2000a43b 	.word	0x2000a43b
   16c60:	0002e8b7 	.word	0x0002e8b7
   16c64:	0002dee4 	.word	0x0002dee4
   16c68:	0002cfb2 	.word	0x0002cfb2
   16c6c:	0002e91a 	.word	0x0002e91a

00016c70 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   16c70:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   16c72:	4e20      	ldr	r6, [pc, #128]	; (16cf4 <z_arm_mpu_init+0x84>)
   16c74:	6835      	ldr	r5, [r6, #0]
   16c76:	2d08      	cmp	r5, #8
   16c78:	d913      	bls.n	16ca2 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   16c7a:	f44f 739e 	mov.w	r3, #316	; 0x13c
   16c7e:	4a1e      	ldr	r2, [pc, #120]	; (16cf8 <z_arm_mpu_init+0x88>)
   16c80:	491e      	ldr	r1, [pc, #120]	; (16cfc <z_arm_mpu_init+0x8c>)
   16c82:	481f      	ldr	r0, [pc, #124]	; (16d00 <z_arm_mpu_init+0x90>)
   16c84:	f00f fd4a 	bl	2671c <printk>
   16c88:	2208      	movs	r2, #8
   16c8a:	4629      	mov	r1, r5
   16c8c:	481d      	ldr	r0, [pc, #116]	; (16d04 <z_arm_mpu_init+0x94>)
   16c8e:	f00f fd45 	bl	2671c <printk>
   16c92:	4819      	ldr	r0, [pc, #100]	; (16cf8 <z_arm_mpu_init+0x88>)
   16c94:	f44f 719e 	mov.w	r1, #316	; 0x13c
   16c98:	f00f ffe5 	bl	26c66 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   16c9c:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   16ca0:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
   16ca2:	f7ff ff47 	bl	16b34 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   16ca6:	2000      	movs	r0, #0
	MPU->MAIR0 =
   16ca8:	4c17      	ldr	r4, [pc, #92]	; (16d08 <z_arm_mpu_init+0x98>)
   16caa:	4a18      	ldr	r2, [pc, #96]	; (16d0c <z_arm_mpu_init+0x9c>)
   16cac:	6322      	str	r2, [r4, #48]	; 0x30
   16cae:	4285      	cmp	r5, r0
   16cb0:	d119      	bne.n	16ce6 <z_arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   16cb2:	4b17      	ldr	r3, [pc, #92]	; (16d10 <z_arm_mpu_init+0xa0>)
   16cb4:	701d      	strb	r5, [r3, #0]
	arm_core_mpu_enable();
   16cb6:	f7ff ff33 	bl	16b20 <arm_core_mpu_enable>
	__ASSERT(
   16cba:	6823      	ldr	r3, [r4, #0]
   16cbc:	f3c3 2307 	ubfx	r3, r3, #8, #8
   16cc0:	2b08      	cmp	r3, #8
   16cc2:	d00e      	beq.n	16ce2 <z_arm_mpu_init+0x72>
   16cc4:	4913      	ldr	r1, [pc, #76]	; (16d14 <z_arm_mpu_init+0xa4>)
   16cc6:	f44f 73cf 	mov.w	r3, #414	; 0x19e
   16cca:	4a0b      	ldr	r2, [pc, #44]	; (16cf8 <z_arm_mpu_init+0x88>)
   16ccc:	480c      	ldr	r0, [pc, #48]	; (16d00 <z_arm_mpu_init+0x90>)
   16cce:	f00f fd25 	bl	2671c <printk>
   16cd2:	4811      	ldr	r0, [pc, #68]	; (16d18 <z_arm_mpu_init+0xa8>)
   16cd4:	f00f fd22 	bl	2671c <printk>
   16cd8:	f44f 71cf 	mov.w	r1, #414	; 0x19e
   16cdc:	4806      	ldr	r0, [pc, #24]	; (16cf8 <z_arm_mpu_init+0x88>)
   16cde:	f00f ffc2 	bl	26c66 <assert_post_action>
	return 0;
   16ce2:	2000      	movs	r0, #0
   16ce4:	e7dc      	b.n	16ca0 <z_arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   16ce6:	6871      	ldr	r1, [r6, #4]
   16ce8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   16cec:	f7ff fe2c 	bl	16948 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   16cf0:	3001      	adds	r0, #1
   16cf2:	e7dc      	b.n	16cae <z_arm_mpu_init+0x3e>
   16cf4:	0002c494 	.word	0x0002c494
   16cf8:	0002e8b7 	.word	0x0002e8b7
   16cfc:	0002dee4 	.word	0x0002dee4
   16d00:	0002cfb2 	.word	0x0002cfb2
   16d04:	0002e949 	.word	0x0002e949
   16d08:	e000ed90 	.word	0xe000ed90
   16d0c:	0044ffaa 	.word	0x0044ffaa
   16d10:	2000a43b 	.word	0x2000a43b
   16d14:	0002e97d 	.word	0x0002e97d
   16d18:	0002e9cd 	.word	0x0002e9cd

00016d1c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   16d1c:	4b01      	ldr	r3, [pc, #4]	; (16d24 <__stdout_hook_install+0x8>)
   16d1e:	6018      	str	r0, [r3, #0]
}
   16d20:	4770      	bx	lr
   16d22:	bf00      	nop
   16d24:	20008250 	.word	0x20008250

00016d28 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
   16d28:	2000      	movs	r0, #0
   16d2a:	4b02      	ldr	r3, [pc, #8]	; (16d34 <remoteproc_mgr_boot+0xc>)
   16d2c:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
   16d30:	4770      	bx	lr
   16d32:	bf00      	nop
   16d34:	40005000 	.word	0x40005000

00016d38 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   16d38:	4b0e      	ldr	r3, [pc, #56]	; (16d74 <bt_hex_real+0x3c>)
   16d3a:	2940      	cmp	r1, #64	; 0x40
   16d3c:	bf28      	it	cs
   16d3e:	2140      	movcs	r1, #64	; 0x40
{
   16d40:	b570      	push	{r4, r5, r6, lr}
   16d42:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   16d44:	4c0c      	ldr	r4, [pc, #48]	; (16d78 <bt_hex_real+0x40>)
   16d46:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
   16d48:	42b0      	cmp	r0, r6
   16d4a:	f103 0302 	add.w	r3, r3, #2
   16d4e:	d104      	bne.n	16d5a <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   16d50:	2300      	movs	r3, #0
   16d52:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   16d56:	4807      	ldr	r0, [pc, #28]	; (16d74 <bt_hex_real+0x3c>)
   16d58:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   16d5a:	7802      	ldrb	r2, [r0, #0]
   16d5c:	0912      	lsrs	r2, r2, #4
   16d5e:	5ca2      	ldrb	r2, [r4, r2]
   16d60:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   16d64:	f810 2b01 	ldrb.w	r2, [r0], #1
   16d68:	f002 020f 	and.w	r2, r2, #15
   16d6c:	5ca2      	ldrb	r2, [r4, r2]
   16d6e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   16d72:	e7e9      	b.n	16d48 <bt_hex_real+0x10>
   16d74:	2000a43c 	.word	0x2000a43c
   16d78:	0002ea16 	.word	0x0002ea16

00016d7c <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   16d7c:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   16d7e:	7803      	ldrb	r3, [r0, #0]
   16d80:	b08b      	sub	sp, #44	; 0x2c
   16d82:	4604      	mov	r4, r0
   16d84:	ad07      	add	r5, sp, #28
   16d86:	2b03      	cmp	r3, #3
   16d88:	d821      	bhi.n	16dce <bt_addr_le_str_real+0x52>
   16d8a:	e8df f003 	tbb	[pc, r3]
   16d8e:	1a02      	.short	0x1a02
   16d90:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   16d92:	4912      	ldr	r1, [pc, #72]	; (16ddc <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
   16d94:	4628      	mov	r0, r5
   16d96:	f011 fba4 	bl	284e2 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   16d9a:	7863      	ldrb	r3, [r4, #1]
   16d9c:	211e      	movs	r1, #30
   16d9e:	9304      	str	r3, [sp, #16]
   16da0:	78a3      	ldrb	r3, [r4, #2]
   16da2:	4a0f      	ldr	r2, [pc, #60]	; (16de0 <bt_addr_le_str_real+0x64>)
   16da4:	9303      	str	r3, [sp, #12]
   16da6:	78e3      	ldrb	r3, [r4, #3]
   16da8:	9505      	str	r5, [sp, #20]
   16daa:	9302      	str	r3, [sp, #8]
   16dac:	7923      	ldrb	r3, [r4, #4]
   16dae:	480d      	ldr	r0, [pc, #52]	; (16de4 <bt_addr_le_str_real+0x68>)
   16db0:	9301      	str	r3, [sp, #4]
   16db2:	7963      	ldrb	r3, [r4, #5]
   16db4:	9300      	str	r3, [sp, #0]
   16db6:	79a3      	ldrb	r3, [r4, #6]
   16db8:	f00f fcbd 	bl	26736 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   16dbc:	4809      	ldr	r0, [pc, #36]	; (16de4 <bt_addr_le_str_real+0x68>)
   16dbe:	b00b      	add	sp, #44	; 0x2c
   16dc0:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   16dc2:	4909      	ldr	r1, [pc, #36]	; (16de8 <bt_addr_le_str_real+0x6c>)
   16dc4:	e7e6      	b.n	16d94 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   16dc6:	4909      	ldr	r1, [pc, #36]	; (16dec <bt_addr_le_str_real+0x70>)
   16dc8:	e7e4      	b.n	16d94 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   16dca:	4909      	ldr	r1, [pc, #36]	; (16df0 <bt_addr_le_str_real+0x74>)
   16dcc:	e7e2      	b.n	16d94 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   16dce:	210a      	movs	r1, #10
   16dd0:	4628      	mov	r0, r5
   16dd2:	4a08      	ldr	r2, [pc, #32]	; (16df4 <bt_addr_le_str_real+0x78>)
   16dd4:	f00f fcaf 	bl	26736 <snprintk>
		break;
   16dd8:	e7df      	b.n	16d9a <bt_addr_le_str_real+0x1e>
   16dda:	bf00      	nop
   16ddc:	0002cbd4 	.word	0x0002cbd4
   16de0:	0002cbf6 	.word	0x0002cbf6
   16de4:	2000a4bd 	.word	0x2000a4bd
   16de8:	0002cbdb 	.word	0x0002cbdb
   16dec:	0002cbe2 	.word	0x0002cbe2
   16df0:	0002cbec 	.word	0x0002cbec
   16df4:	00030500 	.word	0x00030500

00016df8 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   16df8:	b510      	push	{r4, lr}
   16dfa:	4b0d      	ldr	r3, [pc, #52]	; (16e30 <save_id+0x38>)
   16dfc:	4c0d      	ldr	r4, [pc, #52]	; (16e34 <save_id+0x3c>)
	int err;
	BT_INFO("Saving ID");
   16dfe:	480e      	ldr	r0, [pc, #56]	; (16e38 <save_id+0x40>)
   16e00:	1ae4      	subs	r4, r4, r3
   16e02:	08e4      	lsrs	r4, r4, #3
   16e04:	01a4      	lsls	r4, r4, #6
   16e06:	f044 0103 	orr.w	r1, r4, #3
   16e0a:	f00f ff91 	bl	26d30 <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   16e0e:	490b      	ldr	r1, [pc, #44]	; (16e3c <save_id+0x44>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   16e10:	480b      	ldr	r0, [pc, #44]	; (16e40 <save_id+0x48>)
   16e12:	79ca      	ldrb	r2, [r1, #7]
   16e14:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   16e18:	f7fd f918 	bl	1404c <settings_save_one>
	if (err) {
   16e1c:	4601      	mov	r1, r0
   16e1e:	b130      	cbz	r0, 16e2e <save_id+0x36>
		BT_ERR("Failed to save ID (err %d)", err);
   16e20:	f044 0201 	orr.w	r2, r4, #1
   16e24:	4807      	ldr	r0, [pc, #28]	; (16e44 <save_id+0x4c>)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   16e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed to save ID (err %d)", err);
   16e2a:	f00f bf8e 	b.w	26d4a <log_1>
}
   16e2e:	bd10      	pop	{r4, pc}
   16e30:	0002bfe4 	.word	0x0002bfe4
   16e34:	0002c05c 	.word	0x0002c05c
   16e38:	0002ea2e 	.word	0x0002ea2e
   16e3c:	20008000 	.word	0x20008000
   16e40:	0002ea38 	.word	0x0002ea38
   16e44:	0002ea3e 	.word	0x0002ea3e

00016e48 <set>:
{
   16e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16e4a:	4616      	mov	r6, r2
   16e4c:	461f      	mov	r7, r3
	if (!name) {
   16e4e:	4604      	mov	r4, r0
   16e50:	b960      	cbnz	r0, 16e6c <set+0x24>
   16e52:	4923      	ldr	r1, [pc, #140]	; (16ee0 <set+0x98>)
   16e54:	4b23      	ldr	r3, [pc, #140]	; (16ee4 <set+0x9c>)
		BT_ERR("Insufficient number of arguments");
   16e56:	4824      	ldr	r0, [pc, #144]	; (16ee8 <set+0xa0>)
   16e58:	1ac9      	subs	r1, r1, r3
   16e5a:	08c9      	lsrs	r1, r1, #3
   16e5c:	0189      	lsls	r1, r1, #6
   16e5e:	f041 0101 	orr.w	r1, r1, #1
   16e62:	f00f ff65 	bl	26d30 <log_0>
	return -ENOENT;
   16e66:	f06f 0401 	mvn.w	r4, #1
   16e6a:	e019      	b.n	16ea0 <set+0x58>
	len = settings_name_next(name, &next);
   16e6c:	a901      	add	r1, sp, #4
   16e6e:	f010 fbc7 	bl	27600 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   16e72:	491e      	ldr	r1, [pc, #120]	; (16eec <set+0xa4>)
	len = settings_name_next(name, &next);
   16e74:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   16e76:	4620      	mov	r0, r4
   16e78:	f011 fb6c 	bl	28554 <strncmp>
   16e7c:	4604      	mov	r4, r0
   16e7e:	2800      	cmp	r0, #0
   16e80:	d1f1      	bne.n	16e66 <set+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16e82:	4d1b      	ldr	r5, [pc, #108]	; (16ef0 <set+0xa8>)
   16e84:	e8d5 3faf 	lda	r3, [r5]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   16e88:	075b      	lsls	r3, r3, #29
   16e8a:	d50c      	bpl.n	16ea6 <set+0x5e>
   16e8c:	4914      	ldr	r1, [pc, #80]	; (16ee0 <set+0x98>)
   16e8e:	4b15      	ldr	r3, [pc, #84]	; (16ee4 <set+0x9c>)
			BT_WARN("Ignoring identities stored in flash");
   16e90:	4818      	ldr	r0, [pc, #96]	; (16ef4 <set+0xac>)
   16e92:	1ac9      	subs	r1, r1, r3
   16e94:	08c9      	lsrs	r1, r1, #3
   16e96:	0189      	lsls	r1, r1, #6
   16e98:	f041 0102 	orr.w	r1, r1, #2
   16e9c:	f00f ff48 	bl	26d30 <log_0>
}
   16ea0:	4620      	mov	r0, r4
   16ea2:	b003      	add	sp, #12
   16ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   16ea6:	3d98      	subs	r5, #152	; 0x98
   16ea8:	2207      	movs	r2, #7
   16eaa:	4629      	mov	r1, r5
   16eac:	4638      	mov	r0, r7
   16eae:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   16eb0:	2806      	cmp	r0, #6
   16eb2:	d810      	bhi.n	16ed6 <set+0x8e>
   16eb4:	4b0b      	ldr	r3, [pc, #44]	; (16ee4 <set+0x9c>)
   16eb6:	490a      	ldr	r1, [pc, #40]	; (16ee0 <set+0x98>)
				BT_ERR("Invalid length ID address in storage");
   16eb8:	480f      	ldr	r0, [pc, #60]	; (16ef8 <set+0xb0>)
   16eba:	1ac9      	subs	r1, r1, r3
   16ebc:	08c9      	lsrs	r1, r1, #3
   16ebe:	0189      	lsls	r1, r1, #6
   16ec0:	f041 0101 	orr.w	r1, r1, #1
   16ec4:	f00f ff34 	bl	26d30 <log_0>
			(void)memset(bt_dev.id_addr, 0,
   16ec8:	2207      	movs	r2, #7
   16eca:	4621      	mov	r1, r4
   16ecc:	4628      	mov	r0, r5
   16ece:	f011 fb8b 	bl	285e8 <memset>
			bt_dev.id_count = 0U;
   16ed2:	71ec      	strb	r4, [r5, #7]
   16ed4:	e7e4      	b.n	16ea0 <set+0x58>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   16ed6:	2307      	movs	r3, #7
   16ed8:	fbb0 f0f3 	udiv	r0, r0, r3
   16edc:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   16ede:	e7df      	b.n	16ea0 <set+0x58>
   16ee0:	0002c05c 	.word	0x0002c05c
   16ee4:	0002bfe4 	.word	0x0002bfe4
   16ee8:	0002ea59 	.word	0x0002ea59
   16eec:	0002cbe9 	.word	0x0002cbe9
   16ef0:	20008098 	.word	0x20008098
   16ef4:	0002ea7a 	.word	0x0002ea7a
   16ef8:	0002ea9e 	.word	0x0002ea9e

00016efc <bt_settings_encode_key>:
{
   16efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16f00:	b088      	sub	sp, #32
   16f02:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   16f06:	799c      	ldrb	r4, [r3, #6]
   16f08:	795d      	ldrb	r5, [r3, #5]
   16f0a:	791e      	ldrb	r6, [r3, #4]
   16f0c:	78df      	ldrb	r7, [r3, #3]
   16f0e:	f893 c002 	ldrb.w	ip, [r3, #2]
   16f12:	f893 e001 	ldrb.w	lr, [r3, #1]
   16f16:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   16f18:	f1b8 0f00 	cmp.w	r8, #0
   16f1c:	d00e      	beq.n	16f3c <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   16f1e:	e9cd 3806 	strd	r3, r8, [sp, #24]
   16f22:	e9cd ce04 	strd	ip, lr, [sp, #16]
   16f26:	4613      	mov	r3, r2
   16f28:	e9cd 6702 	strd	r6, r7, [sp, #8]
   16f2c:	e9cd 4500 	strd	r4, r5, [sp]
   16f30:	4a08      	ldr	r2, [pc, #32]	; (16f54 <bt_settings_encode_key+0x58>)
   16f32:	f00f fc00 	bl	26736 <snprintk>
}
   16f36:	b008      	add	sp, #32
   16f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   16f3c:	e9cd e305 	strd	lr, r3, [sp, #20]
   16f40:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   16f44:	4613      	mov	r3, r2
   16f46:	e9cd 5601 	strd	r5, r6, [sp, #4]
   16f4a:	4a03      	ldr	r2, [pc, #12]	; (16f58 <bt_settings_encode_key+0x5c>)
   16f4c:	9400      	str	r4, [sp, #0]
   16f4e:	f00f fbf2 	bl	26736 <snprintk>
}
   16f52:	e7f0      	b.n	16f36 <bt_settings_encode_key+0x3a>
   16f54:	0002eac3 	.word	0x0002eac3
   16f58:	0002eae7 	.word	0x0002eae7

00016f5c <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   16f5c:	4801      	ldr	r0, [pc, #4]	; (16f64 <bt_settings_save_id+0x8>)
   16f5e:	f00c bdfd 	b.w	23b5c <k_work_submit>
   16f62:	bf00      	nop
   16f64:	20008254 	.word	0x20008254

00016f68 <commit>:
}

static int commit(void)
{
   16f68:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   16f6a:	4c16      	ldr	r4, [pc, #88]	; (16fc4 <commit+0x5c>)
   16f6c:	79e3      	ldrb	r3, [r4, #7]
   16f6e:	b99b      	cbnz	r3, 16f98 <commit+0x30>
		bt_setup_public_id_addr();
   16f70:	f001 fea6 	bl	18cc0 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
   16f74:	79e3      	ldrb	r3, [r4, #7]
   16f76:	b97b      	cbnz	r3, 16f98 <commit+0x30>
		int err;

		err = bt_setup_random_id_addr();
   16f78:	f001 ff0c 	bl	18d94 <bt_setup_random_id_addr>
		if (err) {
   16f7c:	4604      	mov	r4, r0
   16f7e:	b158      	cbz	r0, 16f98 <commit+0x30>
   16f80:	4911      	ldr	r1, [pc, #68]	; (16fc8 <commit+0x60>)
   16f82:	4b12      	ldr	r3, [pc, #72]	; (16fcc <commit+0x64>)
			BT_ERR("Unable to setup an identity address");
   16f84:	4812      	ldr	r0, [pc, #72]	; (16fd0 <commit+0x68>)
   16f86:	1ac9      	subs	r1, r1, r3
   16f88:	08c9      	lsrs	r1, r1, #3
   16f8a:	0189      	lsls	r1, r1, #6
   16f8c:	f041 0101 	orr.w	r1, r1, #1
   16f90:	f00f fece 	bl	26d30 <log_0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   16f94:	4620      	mov	r0, r4
   16f96:	bd38      	pop	{r3, r4, r5, pc}
   16f98:	4d0e      	ldr	r5, [pc, #56]	; (16fd4 <commit+0x6c>)
   16f9a:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16f9e:	079b      	lsls	r3, r3, #30
   16fa0:	d401      	bmi.n	16fa6 <commit+0x3e>
		bt_finalize_init();
   16fa2:	f001 fb3d 	bl	18620 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16fa6:	e8d5 4fef 	ldaex	r4, [r5]
   16faa:	f424 4380 	bic.w	r3, r4, #16384	; 0x4000
   16fae:	e8c5 3fe2 	stlex	r2, r3, [r5]
   16fb2:	2a00      	cmp	r2, #0
   16fb4:	d1f7      	bne.n	16fa6 <commit+0x3e>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   16fb6:	f414 4480 	ands.w	r4, r4, #16384	; 0x4000
   16fba:	d0eb      	beq.n	16f94 <commit+0x2c>
		bt_settings_save_id();
   16fbc:	f7ff ffce 	bl	16f5c <bt_settings_save_id>
	return 0;
   16fc0:	2400      	movs	r4, #0
   16fc2:	e7e7      	b.n	16f94 <commit+0x2c>
   16fc4:	20008000 	.word	0x20008000
   16fc8:	0002c05c 	.word	0x0002c05c
   16fcc:	0002bfe4 	.word	0x0002bfe4
   16fd0:	0002eb08 	.word	0x0002eb08
   16fd4:	20008098 	.word	0x20008098

00016fd8 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
   16fd8:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   16fda:	f7fd f9d9 	bl	14390 <settings_subsys_init>
	if (err) {
   16fde:	4604      	mov	r4, r0
   16fe0:	b150      	cbz	r0, 16ff8 <bt_settings_init+0x20>
   16fe2:	4a06      	ldr	r2, [pc, #24]	; (16ffc <bt_settings_init+0x24>)
   16fe4:	4b06      	ldr	r3, [pc, #24]	; (17000 <bt_settings_init+0x28>)
		BT_ERR("settings_subsys_init failed (err %d)", err);
   16fe6:	4601      	mov	r1, r0
   16fe8:	1ad2      	subs	r2, r2, r3
   16fea:	08d2      	lsrs	r2, r2, #3
   16fec:	0192      	lsls	r2, r2, #6
   16fee:	4805      	ldr	r0, [pc, #20]	; (17004 <bt_settings_init+0x2c>)
   16ff0:	f042 0201 	orr.w	r2, r2, #1
   16ff4:	f00f fea9 	bl	26d4a <log_1>
		return err;
	}

	return 0;
}
   16ff8:	4620      	mov	r0, r4
   16ffa:	bd10      	pop	{r4, pc}
   16ffc:	0002c05c 	.word	0x0002c05c
   17000:	0002bfe4 	.word	0x0002bfe4
   17004:	0002eb2c 	.word	0x0002eb2c

00017008 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   17008:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
   1700a:	7802      	ldrb	r2, [r0, #0]
{
   1700c:	4604      	mov	r4, r0
	switch (src->type) {
   1700e:	2a01      	cmp	r2, #1
{
   17010:	460b      	mov	r3, r1
	switch (src->type) {
   17012:	d016      	beq.n	17042 <uuid_to_uuid128+0x3a>
   17014:	2a02      	cmp	r2, #2
   17016:	d02c      	beq.n	17072 <uuid_to_uuid128+0x6a>
   17018:	b98a      	cbnz	r2, 1703e <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   1701a:	460d      	mov	r5, r1
   1701c:	4a18      	ldr	r2, [pc, #96]	; (17080 <uuid_to_uuid128+0x78>)
   1701e:	f102 0710 	add.w	r7, r2, #16
   17022:	462e      	mov	r6, r5
   17024:	6810      	ldr	r0, [r2, #0]
   17026:	6851      	ldr	r1, [r2, #4]
   17028:	3208      	adds	r2, #8
   1702a:	c603      	stmia	r6!, {r0, r1}
   1702c:	42ba      	cmp	r2, r7
   1702e:	4635      	mov	r5, r6
   17030:	d1f7      	bne.n	17022 <uuid_to_uuid128+0x1a>
   17032:	7812      	ldrb	r2, [r2, #0]
   17034:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   17036:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
   17038:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   1703a:	0a12      	lsrs	r2, r2, #8
   1703c:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   1703e:	bcf0      	pop	{r4, r5, r6, r7}
   17040:	4770      	bx	lr
		*dst = uuid128_base;
   17042:	460d      	mov	r5, r1
   17044:	4a0e      	ldr	r2, [pc, #56]	; (17080 <uuid_to_uuid128+0x78>)
   17046:	f102 0710 	add.w	r7, r2, #16
   1704a:	462e      	mov	r6, r5
   1704c:	6810      	ldr	r0, [r2, #0]
   1704e:	6851      	ldr	r1, [r2, #4]
   17050:	3208      	adds	r2, #8
   17052:	c603      	stmia	r6!, {r0, r1}
   17054:	42ba      	cmp	r2, r7
   17056:	4635      	mov	r5, r6
   17058:	d1f7      	bne.n	1704a <uuid_to_uuid128+0x42>
   1705a:	7812      	ldrb	r2, [r2, #0]
   1705c:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   1705e:	6862      	ldr	r2, [r4, #4]
   17060:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
   17064:	735a      	strb	r2, [r3, #13]
	sys_put_le16(val >> 16, &dst[2]);
   17066:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   17068:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   1706a:	0a12      	lsrs	r2, r2, #8
   1706c:	7399      	strb	r1, [r3, #14]
   1706e:	741a      	strb	r2, [r3, #16]
}
   17070:	e7e5      	b.n	1703e <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
   17072:	4601      	mov	r1, r0
}
   17074:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
   17076:	2211      	movs	r2, #17
   17078:	4618      	mov	r0, r3
   1707a:	f011 ba8a 	b.w	28592 <memcpy>
   1707e:	bf00      	nop
   17080:	0002eb60 	.word	0x0002eb60

00017084 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   17084:	2801      	cmp	r0, #1
{
   17086:	b570      	push	{r4, r5, r6, lr}
   17088:	4605      	mov	r5, r0
   1708a:	4616      	mov	r6, r2
   1708c:	461c      	mov	r4, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   1708e:	d014      	beq.n	170ba <bt_buf_get_rx+0x36>
   17090:	2803      	cmp	r0, #3
   17092:	d00e      	beq.n	170b2 <bt_buf_get_rx+0x2e>
   17094:	2805      	cmp	r0, #5
   17096:	d00c      	beq.n	170b2 <bt_buf_get_rx+0x2e>
   17098:	490e      	ldr	r1, [pc, #56]	; (170d4 <bt_buf_get_rx+0x50>)
   1709a:	2338      	movs	r3, #56	; 0x38
   1709c:	4a0e      	ldr	r2, [pc, #56]	; (170d8 <bt_buf_get_rx+0x54>)
   1709e:	480f      	ldr	r0, [pc, #60]	; (170dc <bt_buf_get_rx+0x58>)
   170a0:	f00f fb3c 	bl	2671c <printk>
   170a4:	480e      	ldr	r0, [pc, #56]	; (170e0 <bt_buf_get_rx+0x5c>)
   170a6:	f00f fb39 	bl	2671c <printk>
   170aa:	2138      	movs	r1, #56	; 0x38
   170ac:	480a      	ldr	r0, [pc, #40]	; (170d8 <bt_buf_get_rx+0x54>)
   170ae:	f00f fdda 	bl	26c66 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   170b2:	4632      	mov	r2, r6
   170b4:	4623      	mov	r3, r4
   170b6:	480b      	ldr	r0, [pc, #44]	; (170e4 <bt_buf_get_rx+0x60>)
   170b8:	e000      	b.n	170bc <bt_buf_get_rx+0x38>
   170ba:	480b      	ldr	r0, [pc, #44]	; (170e8 <bt_buf_get_rx+0x64>)
   170bc:	f013 faa9 	bl	2a612 <net_buf_alloc_fixed>
   170c0:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   170c2:	b12c      	cbz	r4, 170d0 <bt_buf_get_rx+0x4c>
	net_buf_simple_reserve(&buf->b, reserve);
   170c4:	2101      	movs	r1, #1
   170c6:	f104 0008 	add.w	r0, r4, #8
   170ca:	f008 ff8f 	bl	1ffec <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   170ce:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   170d0:	4620      	mov	r0, r4
   170d2:	bd70      	pop	{r4, r5, r6, pc}
   170d4:	0002eba0 	.word	0x0002eba0
   170d8:	0002eb71 	.word	0x0002eb71
   170dc:	0002cfb2 	.word	0x0002cfb2
   170e0:	0002ebe5 	.word	0x0002ebe5
   170e4:	200085ec 	.word	0x200085ec
   170e8:	20008670 	.word	0x20008670

000170ec <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   170ec:	4602      	mov	r2, r0
   170ee:	460b      	mov	r3, r1
   170f0:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   170f2:	f04f 0120 	mov.w	r1, #32
   170f6:	f3ef 8511 	mrs	r5, BASEPRI
   170fa:	f381 8811 	msr	BASEPRI, r1
   170fe:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
   17102:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
   17104:	490b      	ldr	r1, [pc, #44]	; (17134 <bt_buf_get_cmd_complete+0x48>)
   17106:	f8d1 4108 	ldr.w	r4, [r1, #264]	; 0x108
	bt_dev.sent_cmd = NULL;
   1710a:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
	__asm__ volatile(
   1710e:	f385 8811 	msr	BASEPRI, r5
   17112:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   17116:	b924      	cbnz	r4, 17122 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   17118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1711c:	2001      	movs	r0, #1
   1711e:	f7ff bfb1 	b.w	17084 <bt_buf_get_rx>
   17122:	2101      	movs	r1, #1
		buf->len = 0U;
   17124:	81a0      	strh	r0, [r4, #12]
   17126:	7521      	strb	r1, [r4, #20]
   17128:	f104 0008 	add.w	r0, r4, #8
   1712c:	f008 ff5e 	bl	1ffec <net_buf_simple_reserve>
}
   17130:	4620      	mov	r0, r4
   17132:	bd70      	pop	{r4, r5, r6, pc}
   17134:	20008000 	.word	0x20008000

00017138 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   17138:	b570      	push	{r4, r5, r6, lr}
   1713a:	4604      	mov	r4, r0
	switch (evt) {
   1713c:	2c0f      	cmp	r4, #15
{
   1713e:	460d      	mov	r5, r1
   17140:	4610      	mov	r0, r2
   17142:	4619      	mov	r1, r3
	switch (evt) {
   17144:	d805      	bhi.n	17152 <bt_buf_get_evt+0x1a>
   17146:	2c0d      	cmp	r4, #13
   17148:	d912      	bls.n	17170 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   1714a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   1714e:	f7ff bfcd 	b.w	170ec <bt_buf_get_cmd_complete>
	switch (evt) {
   17152:	2c13      	cmp	r4, #19
   17154:	d10c      	bne.n	17170 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   17156:	480b      	ldr	r0, [pc, #44]	; (17184 <bt_buf_get_evt+0x4c>)
   17158:	f013 fa5b 	bl	2a612 <net_buf_alloc_fixed>
			if (buf) {
   1715c:	4604      	mov	r4, r0
   1715e:	b128      	cbz	r0, 1716c <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   17160:	2101      	movs	r1, #1
   17162:	3008      	adds	r0, #8
   17164:	f008 ff42 	bl	1ffec <net_buf_simple_reserve>
   17168:	2301      	movs	r3, #1
   1716a:	7523      	strb	r3, [r4, #20]
}
   1716c:	4620      	mov	r0, r4
   1716e:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   17170:	4602      	mov	r2, r0
   17172:	460b      	mov	r3, r1
		if (discardable) {
   17174:	b10d      	cbz	r5, 1717a <bt_buf_get_evt+0x42>
   17176:	4804      	ldr	r0, [pc, #16]	; (17188 <bt_buf_get_evt+0x50>)
   17178:	e7ee      	b.n	17158 <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1717a:	2001      	movs	r0, #1
}
   1717c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   17180:	f7ff bf80 	b.w	17084 <bt_buf_get_rx>
   17184:	200086f4 	.word	0x200086f4
   17188:	20008644 	.word	0x20008644

0001718c <hci_data_buf_overflow>:
   1718c:	4905      	ldr	r1, [pc, #20]	; (171a4 <hci_data_buf_overflow+0x18>)
   1718e:	4a06      	ldr	r2, [pc, #24]	; (171a8 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   17190:	6883      	ldr	r3, [r0, #8]
   17192:	1a52      	subs	r2, r2, r1
   17194:	08d2      	lsrs	r2, r2, #3
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   17196:	0192      	lsls	r2, r2, #6
   17198:	7819      	ldrb	r1, [r3, #0]
   1719a:	4804      	ldr	r0, [pc, #16]	; (171ac <hci_data_buf_overflow+0x20>)
   1719c:	f042 0202 	orr.w	r2, r2, #2
   171a0:	f00f bdd3 	b.w	26d4a <log_1>
   171a4:	0002bfe4 	.word	0x0002bfe4
   171a8:	0002c01c 	.word	0x0002c01c
   171ac:	0002ec0c 	.word	0x0002ec0c

000171b0 <hci_disconn_complete_prio>:
{
   171b0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   171b2:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   171b4:	781a      	ldrb	r2, [r3, #0]
   171b6:	b972      	cbnz	r2, 171d6 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   171b8:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   171bc:	4620      	mov	r0, r4
   171be:	f002 fdfb 	bl	19db8 <bt_conn_lookup_handle>
	if (!conn) {
   171c2:	4605      	mov	r5, r0
   171c4:	b940      	cbnz	r0, 171d8 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   171c6:	4b08      	ldr	r3, [pc, #32]	; (171e8 <hci_disconn_complete_prio+0x38>)
   171c8:	881a      	ldrh	r2, [r3, #0]
   171ca:	b922      	cbnz	r2, 171d6 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   171cc:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   171d0:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   171d4:	8018      	strh	r0, [r3, #0]
}
   171d6:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   171d8:	2101      	movs	r1, #1
   171da:	f002 fdf9 	bl	19dd0 <bt_conn_set_state>
	bt_conn_unref(conn);
   171de:	4628      	mov	r0, r5
}
   171e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   171e4:	f002 bdc2 	b.w	19d6c <bt_conn_unref>
   171e8:	2000a408 	.word	0x2000a408

000171ec <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   171ec:	6883      	ldr	r3, [r0, #8]
{
   171ee:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   171f0:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   171f2:	4620      	mov	r0, r4
   171f4:	f002 fde0 	bl	19db8 <bt_conn_lookup_handle>
	if (!conn) {
   171f8:	b960      	cbnz	r0, 17214 <le_data_len_change+0x28>
   171fa:	4a08      	ldr	r2, [pc, #32]	; (1721c <le_data_len_change+0x30>)
   171fc:	4b08      	ldr	r3, [pc, #32]	; (17220 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   171fe:	4621      	mov	r1, r4
}
   17200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17204:	1ad2      	subs	r2, r2, r3
   17206:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17208:	0192      	lsls	r2, r2, #6
   1720a:	4806      	ldr	r0, [pc, #24]	; (17224 <le_data_len_change+0x38>)
   1720c:	f042 0201 	orr.w	r2, r2, #1
   17210:	f00f bd9b 	b.w	26d4a <log_1>
}
   17214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   17218:	f002 bda8 	b.w	19d6c <bt_conn_unref>
   1721c:	0002c01c 	.word	0x0002c01c
   17220:	0002bfe4 	.word	0x0002bfe4
   17224:	0002ec34 	.word	0x0002ec34

00017228 <hci_hardware_error>:
{
   17228:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   1722a:	2101      	movs	r1, #1
   1722c:	3008      	adds	r0, #8
   1722e:	f009 f849 	bl	202c4 <net_buf_simple_pull_mem>
   17232:	4b06      	ldr	r3, [pc, #24]	; (1724c <hci_hardware_error+0x24>)
   17234:	4a06      	ldr	r2, [pc, #24]	; (17250 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   17236:	7801      	ldrb	r1, [r0, #0]
   17238:	1ad2      	subs	r2, r2, r3
   1723a:	08d2      	lsrs	r2, r2, #3
   1723c:	0192      	lsls	r2, r2, #6
   1723e:	4805      	ldr	r0, [pc, #20]	; (17254 <hci_hardware_error+0x2c>)
   17240:	f042 0201 	orr.w	r2, r2, #1
}
   17244:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   17248:	f00f bd7f 	b.w	26d4a <log_1>
   1724c:	0002bfe4 	.word	0x0002bfe4
   17250:	0002c01c 	.word	0x0002c01c
   17254:	0002ec58 	.word	0x0002ec58

00017258 <hci_vendor_event>:
{
   17258:	b510      	push	{r4, lr}
   1725a:	4a0a      	ldr	r2, [pc, #40]	; (17284 <hci_vendor_event+0x2c>)
   1725c:	4c0a      	ldr	r4, [pc, #40]	; (17288 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
   1725e:	8981      	ldrh	r1, [r0, #12]
   17260:	6880      	ldr	r0, [r0, #8]
   17262:	1aa4      	subs	r4, r4, r2
   17264:	f7ff fd68 	bl	16d38 <bt_hex_real>
   17268:	f7fb fb40 	bl	128ec <z_log_strdup>
   1726c:	08e4      	lsrs	r4, r4, #3
   1726e:	01a4      	lsls	r4, r4, #6
   17270:	f044 0402 	orr.w	r4, r4, #2
   17274:	4601      	mov	r1, r0
   17276:	4622      	mov	r2, r4
}
   17278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   1727c:	4803      	ldr	r0, [pc, #12]	; (1728c <hci_vendor_event+0x34>)
   1727e:	f00f bd64 	b.w	26d4a <log_1>
   17282:	bf00      	nop
   17284:	0002bfe4 	.word	0x0002bfe4
   17288:	0002c01c 	.word	0x0002c01c
   1728c:	0002ec7a 	.word	0x0002ec7a

00017290 <hci_encrypt_key_refresh_complete>:
{
   17290:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   17292:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   17294:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   17298:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   1729a:	4630      	mov	r0, r6
   1729c:	f002 fd8c 	bl	19db8 <bt_conn_lookup_handle>
	if (!conn) {
   172a0:	4604      	mov	r4, r0
   172a2:	b960      	cbnz	r0, 172be <hci_encrypt_key_refresh_complete+0x2e>
   172a4:	4a1e      	ldr	r2, [pc, #120]	; (17320 <hci_encrypt_key_refresh_complete+0x90>)
   172a6:	4b1f      	ldr	r3, [pc, #124]	; (17324 <hci_encrypt_key_refresh_complete+0x94>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   172a8:	4631      	mov	r1, r6
}
   172aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   172ae:	1ad2      	subs	r2, r2, r3
   172b0:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
   172b2:	0192      	lsls	r2, r2, #6
   172b4:	481c      	ldr	r0, [pc, #112]	; (17328 <hci_encrypt_key_refresh_complete+0x98>)
   172b6:	f042 0201 	orr.w	r2, r2, #1
   172ba:	f00f bd46 	b.w	26d4a <log_1>
	if (status) {
   172be:	b16d      	cbz	r5, 172dc <hci_encrypt_key_refresh_complete+0x4c>
	switch (hci_err) {
   172c0:	2d29      	cmp	r5, #41	; 0x29
   172c2:	bf94      	ite	ls
   172c4:	4b19      	ldrls	r3, [pc, #100]	; (1732c <hci_encrypt_key_refresh_complete+0x9c>)
	if (status) {
   172c6:	2208      	movhi	r2, #8
		bt_conn_security_changed(conn, status,
   172c8:	4629      	mov	r1, r5
   172ca:	bf98      	it	ls
   172cc:	5d5a      	ldrbls	r2, [r3, r5]
   172ce:	f002 fb95 	bl	199fc <bt_conn_security_changed>
	bt_conn_unref(conn);
   172d2:	4620      	mov	r0, r4
}
   172d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   172d8:	f002 bd48 	b.w	19d6c <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   172dc:	7883      	ldrb	r3, [r0, #2]
   172de:	2b01      	cmp	r3, #1
   172e0:	d107      	bne.n	172f2 <hci_encrypt_key_refresh_complete+0x62>
		bt_smp_update_keys(conn);
   172e2:	f008 fb03 	bl	1f8ec <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   172e6:	4620      	mov	r0, r4
   172e8:	f011 fa60 	bl	287ac <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   172ec:	2800      	cmp	r0, #0
   172ee:	bf08      	it	eq
   172f0:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   172f2:	4b0e      	ldr	r3, [pc, #56]	; (1732c <hci_encrypt_key_refresh_complete+0x9c>)
   172f4:	4629      	mov	r1, r5
   172f6:	4620      	mov	r0, r4
   172f8:	5d5a      	ldrb	r2, [r3, r5]
   172fa:	f002 fb7f 	bl	199fc <bt_conn_security_changed>
	if (status) {
   172fe:	2d00      	cmp	r5, #0
   17300:	d0e7      	beq.n	172d2 <hci_encrypt_key_refresh_complete+0x42>
   17302:	4b08      	ldr	r3, [pc, #32]	; (17324 <hci_encrypt_key_refresh_complete+0x94>)
   17304:	4906      	ldr	r1, [pc, #24]	; (17320 <hci_encrypt_key_refresh_complete+0x90>)
		BT_ERR("Failed to set required security level");
   17306:	480a      	ldr	r0, [pc, #40]	; (17330 <hci_encrypt_key_refresh_complete+0xa0>)
   17308:	1ac9      	subs	r1, r1, r3
   1730a:	08c9      	lsrs	r1, r1, #3
   1730c:	0189      	lsls	r1, r1, #6
   1730e:	f041 0101 	orr.w	r1, r1, #1
   17312:	f00f fd0d 	bl	26d30 <log_0>
		bt_conn_disconnect(conn, status);
   17316:	4629      	mov	r1, r5
   17318:	4620      	mov	r0, r4
   1731a:	f011 fd16 	bl	28d4a <bt_conn_disconnect>
   1731e:	e7d8      	b.n	172d2 <hci_encrypt_key_refresh_complete+0x42>
   17320:	0002c01c 	.word	0x0002c01c
   17324:	0002bfe4 	.word	0x0002bfe4
   17328:	0002ec9e 	.word	0x0002ec9e
   1732c:	0002f208 	.word	0x0002f208
   17330:	0002ecc4 	.word	0x0002ecc4

00017334 <hci_encrypt_change>:
{
   17334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   17336:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17338:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   1733c:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   1733e:	4638      	mov	r0, r7
   17340:	f002 fd3a 	bl	19db8 <bt_conn_lookup_handle>
	if (!conn) {
   17344:	4604      	mov	r4, r0
   17346:	b960      	cbnz	r0, 17362 <hci_encrypt_change+0x2e>
   17348:	4b20      	ldr	r3, [pc, #128]	; (173cc <hci_encrypt_change+0x98>)
   1734a:	4a21      	ldr	r2, [pc, #132]	; (173d0 <hci_encrypt_change+0x9c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   1734c:	4639      	mov	r1, r7
   1734e:	1ad2      	subs	r2, r2, r3
   17350:	08d2      	lsrs	r2, r2, #3
   17352:	0192      	lsls	r2, r2, #6
   17354:	481f      	ldr	r0, [pc, #124]	; (173d4 <hci_encrypt_change+0xa0>)
   17356:	f042 0201 	orr.w	r2, r2, #1
}
   1735a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   1735e:	f00f bcf4 	b.w	26d4a <log_1>
	if (status) {
   17362:	b16d      	cbz	r5, 17380 <hci_encrypt_change+0x4c>
	switch (hci_err) {
   17364:	2d29      	cmp	r5, #41	; 0x29
   17366:	bf94      	ite	ls
   17368:	4b1b      	ldrls	r3, [pc, #108]	; (173d8 <hci_encrypt_change+0xa4>)
	if (status) {
   1736a:	2208      	movhi	r2, #8
		bt_conn_security_changed(conn, status,
   1736c:	4629      	mov	r1, r5
   1736e:	bf98      	it	ls
   17370:	5d5a      	ldrbls	r2, [r3, r5]
   17372:	f002 fb43 	bl	199fc <bt_conn_security_changed>
	bt_conn_unref(conn);
   17376:	4620      	mov	r0, r4
}
   17378:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   1737c:	f002 bcf6 	b.w	19d6c <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   17380:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   17382:	78f3      	ldrb	r3, [r6, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
   17384:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
   17386:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   17388:	d108      	bne.n	1739c <hci_encrypt_change+0x68>
		if (conn->encrypt) {
   1738a:	b10b      	cbz	r3, 17390 <hci_encrypt_change+0x5c>
			bt_smp_update_keys(conn);
   1738c:	f008 faae 	bl	1f8ec <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   17390:	4620      	mov	r0, r4
   17392:	f011 fa0b 	bl	287ac <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   17396:	2800      	cmp	r0, #0
   17398:	bf08      	it	eq
   1739a:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1739c:	4b0e      	ldr	r3, [pc, #56]	; (173d8 <hci_encrypt_change+0xa4>)
   1739e:	4629      	mov	r1, r5
   173a0:	4620      	mov	r0, r4
   173a2:	5d5a      	ldrb	r2, [r3, r5]
   173a4:	f002 fb2a 	bl	199fc <bt_conn_security_changed>
	if (status) {
   173a8:	2d00      	cmp	r5, #0
   173aa:	d0e4      	beq.n	17376 <hci_encrypt_change+0x42>
   173ac:	4b07      	ldr	r3, [pc, #28]	; (173cc <hci_encrypt_change+0x98>)
   173ae:	4908      	ldr	r1, [pc, #32]	; (173d0 <hci_encrypt_change+0x9c>)
		BT_ERR("Failed to set required security level");
   173b0:	480a      	ldr	r0, [pc, #40]	; (173dc <hci_encrypt_change+0xa8>)
   173b2:	1ac9      	subs	r1, r1, r3
   173b4:	08c9      	lsrs	r1, r1, #3
   173b6:	0189      	lsls	r1, r1, #6
   173b8:	f041 0101 	orr.w	r1, r1, #1
   173bc:	f00f fcb8 	bl	26d30 <log_0>
		bt_conn_disconnect(conn, status);
   173c0:	4629      	mov	r1, r5
   173c2:	4620      	mov	r0, r4
   173c4:	f011 fcc1 	bl	28d4a <bt_conn_disconnect>
   173c8:	e7d5      	b.n	17376 <hci_encrypt_change+0x42>
   173ca:	bf00      	nop
   173cc:	0002bfe4 	.word	0x0002bfe4
   173d0:	0002c01c 	.word	0x0002c01c
   173d4:	0002ec9e 	.word	0x0002ec9e
   173d8:	0002f208 	.word	0x0002f208
   173dc:	0002ecc4 	.word	0x0002ecc4

000173e0 <le_conn_update_complete>:
{
   173e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   173e2:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   173e4:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   173e8:	4630      	mov	r0, r6
   173ea:	f002 fce5 	bl	19db8 <bt_conn_lookup_handle>
	if (!conn) {
   173ee:	4604      	mov	r4, r0
   173f0:	b960      	cbnz	r0, 1740c <le_conn_update_complete+0x2c>
   173f2:	4a1f      	ldr	r2, [pc, #124]	; (17470 <le_conn_update_complete+0x90>)
   173f4:	4b1f      	ldr	r3, [pc, #124]	; (17474 <le_conn_update_complete+0x94>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   173f6:	4631      	mov	r1, r6
   173f8:	1ad2      	subs	r2, r2, r3
   173fa:	08d2      	lsrs	r2, r2, #3
   173fc:	0192      	lsls	r2, r2, #6
   173fe:	481e      	ldr	r0, [pc, #120]	; (17478 <le_conn_update_complete+0x98>)
   17400:	f042 0201 	orr.w	r2, r2, #1
   17404:	f00f fca1 	bl	26d4a <log_1>
}
   17408:	b002      	add	sp, #8
   1740a:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   1740c:	782b      	ldrb	r3, [r5, #0]
   1740e:	b9bb      	cbnz	r3, 17440 <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   17410:	792a      	ldrb	r2, [r5, #4]
   17412:	78eb      	ldrb	r3, [r5, #3]
   17414:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17418:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1741c:	79aa      	ldrb	r2, [r5, #6]
   1741e:	796b      	ldrb	r3, [r5, #5]
   17420:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17424:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   17428:	79eb      	ldrb	r3, [r5, #7]
   1742a:	7a2a      	ldrb	r2, [r5, #8]
   1742c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17430:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   17434:	f002 fa78 	bl	19928 <notify_le_param_updated>
	bt_conn_unref(conn);
   17438:	4620      	mov	r0, r4
   1743a:	f002 fc97 	bl	19d6c <bt_conn_unref>
   1743e:	e7e3      	b.n	17408 <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   17440:	2b1a      	cmp	r3, #26
   17442:	d1f9      	bne.n	17438 <le_conn_update_complete+0x58>
   17444:	78c3      	ldrb	r3, [r0, #3]
   17446:	2b01      	cmp	r3, #1
   17448:	d1f6      	bne.n	17438 <le_conn_update_complete+0x58>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1744a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1744e:	3004      	adds	r0, #4
   17450:	f011 f9c7 	bl	287e2 <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   17454:	0543      	lsls	r3, r0, #21
   17456:	d4ef      	bmi.n	17438 <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
   17458:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
   1745c:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
   1745e:	9300      	str	r3, [sp, #0]
		param.latency = conn->le.pending_latency;
   17460:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		bt_l2cap_update_conn_param(conn, &param);
   17464:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
   17466:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   17468:	f003 fad2 	bl	1aa10 <bt_l2cap_update_conn_param>
   1746c:	e7e4      	b.n	17438 <le_conn_update_complete+0x58>
   1746e:	bf00      	nop
   17470:	0002c01c 	.word	0x0002c01c
   17474:	0002bfe4 	.word	0x0002bfe4
   17478:	0002ec34 	.word	0x0002ec34

0001747c <handle_event>:
{
   1747c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1747e:	4605      	mov	r5, r0
   17480:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   17482:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
   17486:	7811      	ldrb	r1, [r2, #0]
   17488:	42a9      	cmp	r1, r5
   1748a:	d01a      	beq.n	174c2 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
   1748c:	3208      	adds	r2, #8
   1748e:	429a      	cmp	r2, r3
   17490:	d1f9      	bne.n	17486 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   17492:	8986      	ldrh	r6, [r0, #12]
   17494:	4b16      	ldr	r3, [pc, #88]	; (174f0 <handle_event+0x74>)
   17496:	4c17      	ldr	r4, [pc, #92]	; (174f4 <handle_event+0x78>)
   17498:	4631      	mov	r1, r6
   1749a:	6880      	ldr	r0, [r0, #8]
   1749c:	1ae4      	subs	r4, r4, r3
   1749e:	f7ff fc4b 	bl	16d38 <bt_hex_real>
   174a2:	f7fb fa23 	bl	128ec <z_log_strdup>
   174a6:	08e4      	lsrs	r4, r4, #3
   174a8:	01a4      	lsls	r4, r4, #6
   174aa:	f044 0402 	orr.w	r4, r4, #2
   174ae:	4603      	mov	r3, r0
   174b0:	4632      	mov	r2, r6
   174b2:	4629      	mov	r1, r5
   174b4:	4810      	ldr	r0, [pc, #64]	; (174f8 <handle_event+0x7c>)
   174b6:	f8ad 4000 	strh.w	r4, [sp]
   174ba:	f00f fc73 	bl	26da4 <log_3>
}
   174be:	b002      	add	sp, #8
   174c0:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
   174c2:	8981      	ldrh	r1, [r0, #12]
   174c4:	7853      	ldrb	r3, [r2, #1]
   174c6:	428b      	cmp	r3, r1
   174c8:	d90d      	bls.n	174e6 <handle_event+0x6a>
   174ca:	4a09      	ldr	r2, [pc, #36]	; (174f0 <handle_event+0x74>)
   174cc:	4b09      	ldr	r3, [pc, #36]	; (174f4 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
   174ce:	480b      	ldr	r0, [pc, #44]	; (174fc <handle_event+0x80>)
   174d0:	1a9b      	subs	r3, r3, r2
   174d2:	462a      	mov	r2, r5
   174d4:	08db      	lsrs	r3, r3, #3
   174d6:	019b      	lsls	r3, r3, #6
   174d8:	f043 0301 	orr.w	r3, r3, #1
}
   174dc:	b002      	add	sp, #8
   174de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   174e2:	f00f bc46 	b.w	26d72 <log_2>
		handler->handler(buf);
   174e6:	6853      	ldr	r3, [r2, #4]
}
   174e8:	b002      	add	sp, #8
   174ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
   174ee:	4718      	bx	r3
   174f0:	0002bfe4 	.word	0x0002bfe4
   174f4:	0002c01c 	.word	0x0002c01c
   174f8:	0002ed0c 	.word	0x0002ed0c
   174fc:	0002ecea 	.word	0x0002ecea

00017500 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   17500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17504:	4b47      	ldr	r3, [pc, #284]	; (17624 <hci_rx_thread+0x124>)
   17506:	4d48      	ldr	r5, [pc, #288]	; (17628 <hci_rx_thread+0x128>)

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   17508:	f8df 813c 	ldr.w	r8, [pc, #316]	; 17648 <hci_rx_thread+0x148>
   1750c:	1aed      	subs	r5, r5, r3
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1750e:	f8df 913c 	ldr.w	r9, [pc, #316]	; 1764c <hci_rx_thread+0x14c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   17512:	4f46      	ldr	r7, [pc, #280]	; (1762c <hci_rx_thread+0x12c>)
   17514:	08ed      	lsrs	r5, r5, #3
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   17516:	f04f 32ff 	mov.w	r2, #4294967295
   1751a:	f04f 33ff 	mov.w	r3, #4294967295
   1751e:	4640      	mov	r0, r8
   17520:	f008 fd30 	bl	1ff84 <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   17524:	7d01      	ldrb	r1, [r0, #20]
   17526:	4604      	mov	r4, r0

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   17528:	2901      	cmp	r1, #1
   1752a:	d046      	beq.n	175ba <hci_rx_thread+0xba>
   1752c:	2903      	cmp	r1, #3
   1752e:	d173      	bne.n	17618 <hci_rx_thread+0x118>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17530:	8983      	ldrh	r3, [r0, #12]
   17532:	2b03      	cmp	r3, #3
   17534:	d80c      	bhi.n	17550 <hci_rx_thread+0x50>
   17536:	f240 1379 	movw	r3, #377	; 0x179
   1753a:	463a      	mov	r2, r7
   1753c:	493c      	ldr	r1, [pc, #240]	; (17630 <hci_rx_thread+0x130>)
   1753e:	483d      	ldr	r0, [pc, #244]	; (17634 <hci_rx_thread+0x134>)
   17540:	f00f f8ec 	bl	2671c <printk>
   17544:	4040      	eors	r0, r0
   17546:	f380 8811 	msr	BASEPRI, r0
   1754a:	f04f 0003 	mov.w	r0, #3
   1754e:	df02      	svc	2
   17550:	2104      	movs	r1, #4
   17552:	f104 0008 	add.w	r0, r4, #8
   17556:	f008 feb5 	bl	202c4 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1755a:	23ff      	movs	r3, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   1755c:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   1755e:	f8b0 a000 	ldrh.w	sl, [r0]
	if (buf->len != len) {
   17562:	89a1      	ldrh	r1, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   17564:	f3ca 000b 	ubfx	r0, sl, #0, #12
	if (buf->len != len) {
   17568:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
   1756a:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1756c:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   1756e:	d009      	beq.n	17584 <hci_rx_thread+0x84>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   17570:	01ab      	lsls	r3, r5, #6
   17572:	4831      	ldr	r0, [pc, #196]	; (17638 <hci_rx_thread+0x138>)
   17574:	f043 0301 	orr.w	r3, r3, #1
   17578:	f00f fbfb 	bl	26d72 <log_2>
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   1757c:	4620      	mov	r0, r4
   1757e:	f008 fd93 	bl	200a8 <net_buf_unref>
			break;
   17582:	e017      	b.n	175b4 <hci_rx_thread+0xb4>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   17584:	f002 fc18 	bl	19db8 <bt_conn_lookup_handle>
	if (!conn) {
   17588:	4606      	mov	r6, r0
   1758a:	b938      	cbnz	r0, 1759c <hci_rx_thread+0x9c>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   1758c:	01aa      	lsls	r2, r5, #6
   1758e:	8ae1      	ldrh	r1, [r4, #22]
   17590:	482a      	ldr	r0, [pc, #168]	; (1763c <hci_rx_thread+0x13c>)
   17592:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   17596:	f00f fbd8 	bl	26d4a <log_1>
   1759a:	e7ef      	b.n	1757c <hci_rx_thread+0x7c>
	acl(buf)->index = bt_conn_index(conn);
   1759c:	f003 f812 	bl	1a5c4 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   175a0:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
   175a2:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   175a4:	ea4f 321a 	mov.w	r2, sl, lsr #12
   175a8:	4630      	mov	r0, r6
   175aa:	f002 fa8d 	bl	19ac8 <bt_conn_recv>
	bt_conn_unref(conn);
   175ae:	4630      	mov	r0, r6
   175b0:	f002 fbdc 	bl	19d6c <bt_conn_unref>
	z_impl_k_yield();
   175b4:	f00d fce2 	bl	24f7c <z_impl_k_yield>
	while (1) {
   175b8:	e7ad      	b.n	17516 <hci_rx_thread+0x16>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   175ba:	8983      	ldrh	r3, [r0, #12]
   175bc:	2b01      	cmp	r3, #1
   175be:	d80c      	bhi.n	175da <hci_rx_thread+0xda>
   175c0:	f640 03f9 	movw	r3, #2297	; 0x8f9
   175c4:	463a      	mov	r2, r7
   175c6:	491a      	ldr	r1, [pc, #104]	; (17630 <hci_rx_thread+0x130>)
   175c8:	481a      	ldr	r0, [pc, #104]	; (17634 <hci_rx_thread+0x134>)
   175ca:	f00f f8a7 	bl	2671c <printk>
   175ce:	4040      	eors	r0, r0
   175d0:	f380 8811 	msr	BASEPRI, r0
   175d4:	f04f 0003 	mov.w	r0, #3
   175d8:	df02      	svc	2
   175da:	2102      	movs	r1, #2
   175dc:	f104 0008 	add.w	r0, r4, #8
   175e0:	f008 fe70 	bl	202c4 <net_buf_simple_pull_mem>
   175e4:	4606      	mov	r6, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   175e6:	7800      	ldrb	r0, [r0, #0]
   175e8:	f011 f8ce 	bl	28788 <bt_hci_evt_get_flags>
   175ec:	0783      	lsls	r3, r0, #30
   175ee:	d40c      	bmi.n	1760a <hci_rx_thread+0x10a>
   175f0:	f640 03fd 	movw	r3, #2301	; 0x8fd
   175f4:	463a      	mov	r2, r7
   175f6:	4912      	ldr	r1, [pc, #72]	; (17640 <hci_rx_thread+0x140>)
   175f8:	480e      	ldr	r0, [pc, #56]	; (17634 <hci_rx_thread+0x134>)
   175fa:	f00f f88f 	bl	2671c <printk>
   175fe:	4040      	eors	r0, r0
   17600:	f380 8811 	msr	BASEPRI, r0
   17604:	f04f 0003 	mov.w	r0, #3
   17608:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1760a:	2306      	movs	r3, #6
   1760c:	464a      	mov	r2, r9
   1760e:	4621      	mov	r1, r4
   17610:	7830      	ldrb	r0, [r6, #0]
   17612:	f7ff ff33 	bl	1747c <handle_event>
	net_buf_unref(buf);
   17616:	e7b1      	b.n	1757c <hci_rx_thread+0x7c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   17618:	01aa      	lsls	r2, r5, #6
   1761a:	480a      	ldr	r0, [pc, #40]	; (17644 <hci_rx_thread+0x144>)
   1761c:	f042 0201 	orr.w	r2, r2, #1
   17620:	e7b9      	b.n	17596 <hci_rx_thread+0x96>
   17622:	bf00      	nop
   17624:	0002bfe4 	.word	0x0002bfe4
   17628:	0002c01c 	.word	0x0002c01c
   1762c:	0002ed2e 	.word	0x0002ed2e
   17630:	0002ed62 	.word	0x0002ed62
   17634:	0002cfb2 	.word	0x0002cfb2
   17638:	0002ed7b 	.word	0x0002ed7b
   1763c:	0002ed9f 	.word	0x0002ed9f
   17640:	0002edc1 	.word	0x0002edc1
   17644:	0002edef 	.word	0x0002edef
   17648:	2000810c 	.word	0x2000810c
   1764c:	0002c564 	.word	0x0002c564

00017650 <hci_le_meta_event>:
{
   17650:	b510      	push	{r4, lr}
   17652:	2101      	movs	r1, #1
   17654:	4604      	mov	r4, r0
   17656:	3008      	adds	r0, #8
   17658:	f008 fe34 	bl	202c4 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1765c:	4621      	mov	r1, r4
}
   1765e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   17662:	230b      	movs	r3, #11
   17664:	4a01      	ldr	r2, [pc, #4]	; (1766c <hci_le_meta_event+0x1c>)
   17666:	7800      	ldrb	r0, [r0, #0]
   17668:	f7ff bf08 	b.w	1747c <handle_event>
   1766c:	0002c4fc 	.word	0x0002c4fc

00017670 <hci_num_completed_packets>:
{
   17670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
   17674:	2600      	movs	r6, #0
			tx->pending_no_cb = 0U;
   17676:	46b1      	mov	r9, r6
   17678:	4d38      	ldr	r5, [pc, #224]	; (1775c <hci_num_completed_packets+0xec>)
   1767a:	4b39      	ldr	r3, [pc, #228]	; (17760 <hci_num_completed_packets+0xf0>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1767c:	f8d0 8008 	ldr.w	r8, [r0, #8]
   17680:	1aed      	subs	r5, r5, r3
				BT_ERR("packets count mismatch");
   17682:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 17768 <hci_num_completed_packets+0xf8>
   17686:	08ed      	lsrs	r5, r5, #3
	for (i = 0; i < evt->num_handles; i++) {
   17688:	f898 3000 	ldrb.w	r3, [r8]
   1768c:	429e      	cmp	r6, r3
   1768e:	db01      	blt.n	17694 <hci_num_completed_packets+0x24>
}
   17690:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   17694:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   17698:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   1769c:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   176a0:	4658      	mov	r0, fp
   176a2:	f002 fb89 	bl	19db8 <bt_conn_lookup_handle>
		if (!conn) {
   176a6:	4604      	mov	r4, r0
   176a8:	b1d8      	cbz	r0, 176e2 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   176aa:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   176ae:	2f00      	cmp	r7, #0
   176b0:	d033      	beq.n	1771a <hci_num_completed_packets+0xaa>
	__asm__ volatile(
   176b2:	f04f 0320 	mov.w	r3, #32
   176b6:	f3ef 8211 	mrs	r2, BASEPRI
   176ba:	f383 8811 	msr	BASEPRI, r3
   176be:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   176c2:	69e3      	ldr	r3, [r4, #28]
   176c4:	b1b3      	cbz	r3, 176f4 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
   176c6:	3b01      	subs	r3, #1
   176c8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   176ca:	f382 8811 	msr	BASEPRI, r2
   176ce:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   176d2:	4620      	mov	r0, r4
   176d4:	f002 f924 	bl	19920 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   176d8:	3f01      	subs	r7, #1
   176da:	f00b fedf 	bl	2349c <z_impl_k_sem_give>
   176de:	b2bf      	uxth	r7, r7
   176e0:	e7e5      	b.n	176ae <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
   176e2:	01aa      	lsls	r2, r5, #6
   176e4:	4659      	mov	r1, fp
   176e6:	481f      	ldr	r0, [pc, #124]	; (17764 <hci_num_completed_packets+0xf4>)
   176e8:	f042 0201 	orr.w	r2, r2, #1
   176ec:	f00f fb2d 	bl	26d4a <log_1>
	for (i = 0; i < evt->num_handles; i++) {
   176f0:	3601      	adds	r6, #1
   176f2:	e7c9      	b.n	17688 <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
   176f4:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   176f6:	b12b      	cbz	r3, 17704 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   176f8:	69a1      	ldr	r1, [r4, #24]
   176fa:	6818      	ldr	r0, [r3, #0]
   176fc:	428b      	cmp	r3, r1
	list->head = node;
   176fe:	6160      	str	r0, [r4, #20]
	list->tail = node;
   17700:	bf08      	it	eq
   17702:	61a0      	streq	r0, [r4, #24]
   17704:	f382 8811 	msr	BASEPRI, r2
   17708:	f3bf 8f6f 	isb	sy
			if (!node) {
   1770c:	b94b      	cbnz	r3, 17722 <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
   1770e:	01a9      	lsls	r1, r5, #6
   17710:	4650      	mov	r0, sl
   17712:	f041 0101 	orr.w	r1, r1, #1
   17716:	f00f fb0b 	bl	26d30 <log_0>
		bt_conn_unref(conn);
   1771a:	4620      	mov	r0, r4
   1771c:	f002 fb26 	bl	19d6c <bt_conn_unref>
   17720:	e7e6      	b.n	176f0 <hci_num_completed_packets+0x80>
	__asm__ volatile(
   17722:	f04f 0220 	mov.w	r2, #32
   17726:	f3ef 8111 	mrs	r1, BASEPRI
   1772a:	f382 8811 	msr	BASEPRI, r2
   1772e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   17732:	68da      	ldr	r2, [r3, #12]
   17734:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   17736:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
   1773a:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   1773c:	f8c3 900c 	str.w	r9, [r3, #12]
   17740:	b94a      	cbnz	r2, 17756 <hci_num_completed_packets+0xe6>
	list->head = node;
   17742:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   17746:	f381 8811 	msr	BASEPRI, r1
   1774a:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1774e:	4658      	mov	r0, fp
   17750:	f00c fa04 	bl	23b5c <k_work_submit>
   17754:	e7bd      	b.n	176d2 <hci_num_completed_packets+0x62>
	parent->next = child;
   17756:	6013      	str	r3, [r2, #0]
	list->tail = node;
   17758:	6263      	str	r3, [r4, #36]	; 0x24
}
   1775a:	e7f4      	b.n	17746 <hci_num_completed_packets+0xd6>
   1775c:	0002c01c 	.word	0x0002c01c
   17760:	0002bfe4 	.word	0x0002bfe4
   17764:	0002ee03 	.word	0x0002ee03
   17768:	0002ee1f 	.word	0x0002ee1f

0001776c <hci_disconn_complete>:
{
   1776c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1776e:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   17770:	7835      	ldrb	r5, [r6, #0]
   17772:	bb75      	cbnz	r5, 177d2 <hci_disconn_complete+0x66>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17774:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   17778:	4638      	mov	r0, r7
   1777a:	f002 fb1d 	bl	19db8 <bt_conn_lookup_handle>
	if (!conn) {
   1777e:	4604      	mov	r4, r0
   17780:	b960      	cbnz	r0, 1779c <hci_disconn_complete+0x30>
   17782:	4b14      	ldr	r3, [pc, #80]	; (177d4 <hci_disconn_complete+0x68>)
   17784:	4a14      	ldr	r2, [pc, #80]	; (177d8 <hci_disconn_complete+0x6c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   17786:	4639      	mov	r1, r7
   17788:	1ad2      	subs	r2, r2, r3
   1778a:	08d2      	lsrs	r2, r2, #3
   1778c:	0192      	lsls	r2, r2, #6
   1778e:	4813      	ldr	r0, [pc, #76]	; (177dc <hci_disconn_complete+0x70>)
   17790:	f042 0201 	orr.w	r2, r2, #1
}
   17794:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   17798:	f00f bad7 	b.w	26d4a <log_1>
	conn->err = evt->reason;
   1779c:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1779e:	4629      	mov	r1, r5
	conn->err = evt->reason;
   177a0:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   177a2:	f002 fb15 	bl	19dd0 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   177a6:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
   177a8:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
   177aa:	2b01      	cmp	r3, #1
   177ac:	d004      	beq.n	177b8 <hci_disconn_complete+0x4c>
	bt_conn_unref(conn);
   177ae:	4620      	mov	r0, r4
}
   177b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   177b4:	f002 bada 	b.w	19d6c <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   177b8:	1d23      	adds	r3, r4, #4
   177ba:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   177be:	07db      	lsls	r3, r3, #31
   177c0:	d5f5      	bpl.n	177ae <hci_disconn_complete+0x42>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   177c2:	4620      	mov	r0, r4
   177c4:	2102      	movs	r1, #2
   177c6:	f002 fb03 	bl	19dd0 <bt_conn_set_state>
		bt_le_scan_update(false);
   177ca:	4628      	mov	r0, r5
   177cc:	f001 fbba 	bl	18f44 <bt_le_scan_update>
   177d0:	e7ed      	b.n	177ae <hci_disconn_complete+0x42>
}
   177d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   177d4:	0002bfe4 	.word	0x0002bfe4
   177d8:	0002c01c 	.word	0x0002c01c
   177dc:	0002ec9e 	.word	0x0002ec9e

000177e0 <hci_cmd_done>:
{
   177e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   177e4:	4607      	mov	r7, r0
   177e6:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   177e8:	7990      	ldrb	r0, [r2, #6]
{
   177ea:	4688      	mov	r8, r1
   177ec:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   177ee:	f008 fabb 	bl	1fd68 <net_buf_pool_get>
   177f2:	4e3c      	ldr	r6, [pc, #240]	; (178e4 <hci_cmd_done+0x104>)
   177f4:	4286      	cmp	r6, r0
   177f6:	d016      	beq.n	17826 <hci_cmd_done+0x46>
   177f8:	4b3b      	ldr	r3, [pc, #236]	; (178e8 <hci_cmd_done+0x108>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   177fa:	79a0      	ldrb	r0, [r4, #6]
   177fc:	4d3b      	ldr	r5, [pc, #236]	; (178ec <hci_cmd_done+0x10c>)
   177fe:	9700      	str	r7, [sp, #0]
   17800:	1aed      	subs	r5, r5, r3
   17802:	9001      	str	r0, [sp, #4]
   17804:	f008 fab0 	bl	1fd68 <net_buf_pool_get>
   17808:	08ed      	lsrs	r5, r5, #3
   1780a:	01ad      	lsls	r5, r5, #6
   1780c:	f045 0502 	orr.w	r5, r5, #2
   17810:	e9cd 0602 	strd	r0, r6, [sp, #8]
   17814:	462b      	mov	r3, r5
   17816:	2204      	movs	r2, #4
   17818:	4669      	mov	r1, sp
   1781a:	4835      	ldr	r0, [pc, #212]	; (178f0 <hci_cmd_done+0x110>)
   1781c:	f00f fade 	bl	26ddc <log_n>
}
   17820:	b005      	add	sp, #20
   17822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   17826:	4620      	mov	r0, r4
   17828:	f008 faa6 	bl	1fd78 <net_buf_id>
   1782c:	f04f 090c 	mov.w	r9, #12
   17830:	4d30      	ldr	r5, [pc, #192]	; (178f4 <hci_cmd_done+0x114>)
   17832:	fb09 5300 	mla	r3, r9, r0, r5
   17836:	885b      	ldrh	r3, [r3, #2]
   17838:	42bb      	cmp	r3, r7
   1783a:	d011      	beq.n	17860 <hci_cmd_done+0x80>
   1783c:	4b2a      	ldr	r3, [pc, #168]	; (178e8 <hci_cmd_done+0x108>)
   1783e:	4e2b      	ldr	r6, [pc, #172]	; (178ec <hci_cmd_done+0x10c>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   17840:	4620      	mov	r0, r4
   17842:	1af6      	subs	r6, r6, r3
   17844:	f008 fa98 	bl	1fd78 <net_buf_id>
   17848:	fb09 5000 	mla	r0, r9, r0, r5
   1784c:	08f6      	lsrs	r6, r6, #3
   1784e:	01b6      	lsls	r6, r6, #6
   17850:	f046 0602 	orr.w	r6, r6, #2
   17854:	8842      	ldrh	r2, [r0, #2]
   17856:	4633      	mov	r3, r6
   17858:	4639      	mov	r1, r7
   1785a:	4827      	ldr	r0, [pc, #156]	; (178f8 <hci_cmd_done+0x118>)
   1785c:	f00f fa89 	bl	26d72 <log_2>
	if (cmd(buf)->state && !status) {
   17860:	4620      	mov	r0, r4
   17862:	f008 fa89 	bl	1fd78 <net_buf_id>
   17866:	260c      	movs	r6, #12
   17868:	fb06 5000 	mla	r0, r6, r0, r5
   1786c:	6843      	ldr	r3, [r0, #4]
   1786e:	b1ab      	cbz	r3, 1789c <hci_cmd_done+0xbc>
   17870:	f1b8 0f00 	cmp.w	r8, #0
   17874:	d112      	bne.n	1789c <hci_cmd_done+0xbc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   17876:	4620      	mov	r0, r4
   17878:	f008 fa7e 	bl	1fd78 <net_buf_id>
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1787c:	2101      	movs	r1, #1
   1787e:	fb06 5000 	mla	r0, r6, r0, r5
   17882:	6842      	ldr	r2, [r0, #4]
   17884:	e9d2 3000 	ldrd	r3, r0, [r2]

	if (val) {
   17888:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   1788a:	f000 061f 	and.w	r6, r0, #31
   1788e:	40b1      	lsls	r1, r6
	if (val) {
   17890:	0940      	lsrs	r0, r0, #5
   17892:	b1da      	cbz	r2, 178cc <hci_cmd_done+0xec>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17894:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   17898:	f010 ffa3 	bl	287e2 <atomic_or>
	if (cmd(buf)->sync) {
   1789c:	4620      	mov	r0, r4
   1789e:	f008 fa6b 	bl	1fd78 <net_buf_id>
   178a2:	260c      	movs	r6, #12
   178a4:	fb06 5000 	mla	r0, r6, r0, r5
   178a8:	6883      	ldr	r3, [r0, #8]
   178aa:	2b00      	cmp	r3, #0
   178ac:	d0b8      	beq.n	17820 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
   178ae:	4620      	mov	r0, r4
   178b0:	f008 fa62 	bl	1fd78 <net_buf_id>
   178b4:	4370      	muls	r0, r6
   178b6:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   178ba:	4620      	mov	r0, r4
   178bc:	f008 fa5c 	bl	1fd78 <net_buf_id>
   178c0:	fb06 5500 	mla	r5, r6, r0, r5
   178c4:	68a8      	ldr	r0, [r5, #8]
   178c6:	f00b fde9 	bl	2349c <z_impl_k_sem_give>
}
   178ca:	e7a9      	b.n	17820 <hci_cmd_done+0x40>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   178cc:	43c9      	mvns	r1, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   178ce:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   178d2:	e8d3 2fef 	ldaex	r2, [r3]
   178d6:	400a      	ands	r2, r1
   178d8:	e8c3 2fe0 	stlex	r0, r2, [r3]
   178dc:	2800      	cmp	r0, #0
   178de:	d0dd      	beq.n	1789c <hci_cmd_done+0xbc>
   178e0:	e7f7      	b.n	178d2 <hci_cmd_done+0xf2>
   178e2:	bf00      	nop
   178e4:	200086c8 	.word	0x200086c8
   178e8:	0002bfe4 	.word	0x0002bfe4
   178ec:	0002c01c 	.word	0x0002c01c
   178f0:	0002ee36 	.word	0x0002ee36
   178f4:	200097e0 	.word	0x200097e0
   178f8:	0002ee6b 	.word	0x0002ee6b

000178fc <hci_cmd_status>:
{
   178fc:	b538      	push	{r3, r4, r5, lr}
   178fe:	2104      	movs	r1, #4
   17900:	4604      	mov	r4, r0
   17902:	3008      	adds	r0, #8
   17904:	f008 fcde 	bl	202c4 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   17908:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1790a:	7801      	ldrb	r1, [r0, #0]
   1790c:	4622      	mov	r2, r4
   1790e:	8840      	ldrh	r0, [r0, #2]
   17910:	f7ff ff66 	bl	177e0 <hci_cmd_done>
	if (ncmd) {
   17914:	b125      	cbz	r5, 17920 <hci_cmd_status+0x24>
}
   17916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   1791a:	4802      	ldr	r0, [pc, #8]	; (17924 <hci_cmd_status+0x28>)
   1791c:	f00b bdbe 	b.w	2349c <z_impl_k_sem_give>
   17920:	bd38      	pop	{r3, r4, r5, pc}
   17922:	bf00      	nop
   17924:	200080f0 	.word	0x200080f0

00017928 <hci_cmd_complete>:
{
   17928:	b538      	push	{r3, r4, r5, lr}
   1792a:	2103      	movs	r1, #3
   1792c:	4604      	mov	r4, r0
   1792e:	3008      	adds	r0, #8
   17930:	f008 fcc8 	bl	202c4 <net_buf_simple_pull_mem>
	status = buf->data[0];
   17934:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   17936:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   17938:	4622      	mov	r2, r4
   1793a:	7819      	ldrb	r1, [r3, #0]
   1793c:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   17940:	f7ff ff4e 	bl	177e0 <hci_cmd_done>
	if (ncmd) {
   17944:	b125      	cbz	r5, 17950 <hci_cmd_complete+0x28>
}
   17946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1794a:	4802      	ldr	r0, [pc, #8]	; (17954 <hci_cmd_complete+0x2c>)
   1794c:	f00b bda6 	b.w	2349c <z_impl_k_sem_give>
   17950:	bd38      	pop	{r3, r4, r5, pc}
   17952:	bf00      	nop
   17954:	200080f0 	.word	0x200080f0

00017958 <bt_hci_cmd_state_set_init>:
{
   17958:	b510      	push	{r4, lr}
	state->bit = bit;
   1795a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   1795e:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
   17962:	460c      	mov	r4, r1
	state->val = val;
   17964:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   17966:	f008 fa07 	bl	1fd78 <net_buf_id>
   1796a:	220c      	movs	r2, #12
   1796c:	4b02      	ldr	r3, [pc, #8]	; (17978 <bt_hci_cmd_state_set_init+0x20>)
   1796e:	fb02 3000 	mla	r0, r2, r0, r3
   17972:	6044      	str	r4, [r0, #4]
}
   17974:	bd10      	pop	{r4, pc}
   17976:	bf00      	nop
   17978:	200097e0 	.word	0x200097e0

0001797c <bt_hci_cmd_create>:
{
   1797c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   17980:	f04f 32ff 	mov.w	r2, #4294967295
   17984:	4605      	mov	r5, r0
   17986:	f04f 33ff 	mov.w	r3, #4294967295
   1798a:	481b      	ldr	r0, [pc, #108]	; (179f8 <bt_hci_cmd_create+0x7c>)
   1798c:	460e      	mov	r6, r1
   1798e:	f012 fe40 	bl	2a612 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   17992:	4604      	mov	r4, r0
   17994:	b948      	cbnz	r0, 179aa <bt_hci_cmd_create+0x2e>
   17996:	4919      	ldr	r1, [pc, #100]	; (179fc <bt_hci_cmd_create+0x80>)
   17998:	4819      	ldr	r0, [pc, #100]	; (17a00 <bt_hci_cmd_create+0x84>)
   1799a:	23e8      	movs	r3, #232	; 0xe8
   1799c:	4a19      	ldr	r2, [pc, #100]	; (17a04 <bt_hci_cmd_create+0x88>)
   1799e:	f00e febd 	bl	2671c <printk>
   179a2:	21e8      	movs	r1, #232	; 0xe8
   179a4:	4817      	ldr	r0, [pc, #92]	; (17a04 <bt_hci_cmd_create+0x88>)
   179a6:	f00f f95e 	bl	26c66 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   179aa:	2700      	movs	r7, #0
	net_buf_simple_reserve(&buf->b, reserve);
   179ac:	f104 0b08 	add.w	fp, r4, #8
   179b0:	2101      	movs	r1, #1
   179b2:	4658      	mov	r0, fp
   179b4:	f008 fb1a 	bl	1ffec <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
   179b8:	4620      	mov	r0, r4
   179ba:	7527      	strb	r7, [r4, #20]
   179bc:	f008 f9dc 	bl	1fd78 <net_buf_id>
   179c0:	f04f 0a0c 	mov.w	sl, #12
   179c4:	f8df 8040 	ldr.w	r8, [pc, #64]	; 17a08 <bt_hci_cmd_create+0x8c>
   179c8:	fb0a 8000 	mla	r0, sl, r0, r8
   179cc:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   179ce:	4620      	mov	r0, r4
   179d0:	f008 f9d2 	bl	1fd78 <net_buf_id>
   179d4:	fb0a 8000 	mla	r0, sl, r0, r8
   179d8:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   179da:	4620      	mov	r0, r4
   179dc:	f008 f9cc 	bl	1fd78 <net_buf_id>
   179e0:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   179e4:	2103      	movs	r1, #3
   179e6:	6047      	str	r7, [r0, #4]
   179e8:	4658      	mov	r0, fp
   179ea:	f008 fc8d 	bl	20308 <net_buf_simple_add>
	hdr->param_len = param_len;
   179ee:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   179f0:	8005      	strh	r5, [r0, #0]
}
   179f2:	4620      	mov	r0, r4
   179f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179f8:	200086c8 	.word	0x200086c8
   179fc:	0002ec08 	.word	0x0002ec08
   17a00:	0002cfb2 	.word	0x0002cfb2
   17a04:	0002ed2e 	.word	0x0002ed2e
   17a08:	200097e0 	.word	0x200097e0

00017a0c <bt_hci_cmd_send_sync>:
{
   17a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17a10:	4607      	mov	r7, r0
   17a12:	4615      	mov	r5, r2
	if (!buf) {
   17a14:	460c      	mov	r4, r1
{
   17a16:	b086      	sub	sp, #24
	if (!buf) {
   17a18:	b921      	cbnz	r1, 17a24 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   17a1a:	f7ff ffaf 	bl	1797c <bt_hci_cmd_create>
		if (!buf) {
   17a1e:	4604      	mov	r4, r0
   17a20:	2800      	cmp	r0, #0
   17a22:	d055      	beq.n	17ad0 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   17a24:	2201      	movs	r2, #1
   17a26:	2100      	movs	r1, #0
   17a28:	4668      	mov	r0, sp
   17a2a:	f013 ffdc 	bl	2b9e6 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   17a2e:	4620      	mov	r0, r4
   17a30:	f008 f9a2 	bl	1fd78 <net_buf_id>
   17a34:	230c      	movs	r3, #12
   17a36:	4e28      	ldr	r6, [pc, #160]	; (17ad8 <bt_hci_cmd_send_sync+0xcc>)
   17a38:	fb03 6000 	mla	r0, r3, r0, r6
   17a3c:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
   17a40:	4620      	mov	r0, r4
   17a42:	f008 fb77 	bl	20134 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   17a46:	4621      	mov	r1, r4
   17a48:	4824      	ldr	r0, [pc, #144]	; (17adc <bt_hci_cmd_send_sync+0xd0>)
   17a4a:	f008 faf9 	bl	20040 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   17a4e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   17a52:	2300      	movs	r3, #0
   17a54:	4668      	mov	r0, sp
   17a56:	f00b fd65 	bl	23524 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   17a5a:	4680      	mov	r8, r0
   17a5c:	b180      	cbz	r0, 17a80 <bt_hci_cmd_send_sync+0x74>
   17a5e:	f240 1333 	movw	r3, #307	; 0x133
   17a62:	4a1f      	ldr	r2, [pc, #124]	; (17ae0 <bt_hci_cmd_send_sync+0xd4>)
   17a64:	491f      	ldr	r1, [pc, #124]	; (17ae4 <bt_hci_cmd_send_sync+0xd8>)
   17a66:	4820      	ldr	r0, [pc, #128]	; (17ae8 <bt_hci_cmd_send_sync+0xdc>)
   17a68:	f00e fe58 	bl	2671c <printk>
   17a6c:	4641      	mov	r1, r8
   17a6e:	481f      	ldr	r0, [pc, #124]	; (17aec <bt_hci_cmd_send_sync+0xe0>)
   17a70:	f00e fe54 	bl	2671c <printk>
   17a74:	4040      	eors	r0, r0
   17a76:	f380 8811 	msr	BASEPRI, r0
   17a7a:	f04f 0003 	mov.w	r0, #3
   17a7e:	df02      	svc	2
	status = cmd(buf)->status;
   17a80:	4620      	mov	r0, r4
   17a82:	f008 f979 	bl	1fd78 <net_buf_id>
   17a86:	230c      	movs	r3, #12
   17a88:	4343      	muls	r3, r0
   17a8a:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   17a8c:	b1be      	cbz	r6, 17abe <bt_hci_cmd_send_sync+0xb2>
   17a8e:	4a18      	ldr	r2, [pc, #96]	; (17af0 <bt_hci_cmd_send_sync+0xe4>)
   17a90:	4b18      	ldr	r3, [pc, #96]	; (17af4 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   17a92:	4639      	mov	r1, r7
   17a94:	1a9b      	subs	r3, r3, r2
   17a96:	08db      	lsrs	r3, r3, #3
   17a98:	019b      	lsls	r3, r3, #6
   17a9a:	4632      	mov	r2, r6
   17a9c:	4816      	ldr	r0, [pc, #88]	; (17af8 <bt_hci_cmd_send_sync+0xec>)
   17a9e:	f043 0302 	orr.w	r3, r3, #2
   17aa2:	f00f f966 	bl	26d72 <log_2>
		net_buf_unref(buf);
   17aa6:	4620      	mov	r0, r4
   17aa8:	f008 fafe 	bl	200a8 <net_buf_unref>
			return -EIO;
   17aac:	2e09      	cmp	r6, #9
   17aae:	bf0c      	ite	eq
   17ab0:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   17ab4:	f06f 0004 	mvnne.w	r0, #4
}
   17ab8:	b006      	add	sp, #24
   17aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   17abe:	b115      	cbz	r5, 17ac6 <bt_hci_cmd_send_sync+0xba>
	return 0;
   17ac0:	4630      	mov	r0, r6
		*rsp = buf;
   17ac2:	602c      	str	r4, [r5, #0]
   17ac4:	e7f8      	b.n	17ab8 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
   17ac6:	4620      	mov	r0, r4
   17ac8:	f008 faee 	bl	200a8 <net_buf_unref>
	return 0;
   17acc:	4628      	mov	r0, r5
   17ace:	e7f3      	b.n	17ab8 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
   17ad0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17ad4:	e7f0      	b.n	17ab8 <bt_hci_cmd_send_sync+0xac>
   17ad6:	bf00      	nop
   17ad8:	200097e0 	.word	0x200097e0
   17adc:	20008128 	.word	0x20008128
   17ae0:	0002ed2e 	.word	0x0002ed2e
   17ae4:	0002ee9e 	.word	0x0002ee9e
   17ae8:	0002cfb2 	.word	0x0002cfb2
   17aec:	0002eea7 	.word	0x0002eea7
   17af0:	0002bfe4 	.word	0x0002bfe4
   17af4:	0002c01c 	.word	0x0002c01c
   17af8:	0002eec7 	.word	0x0002eec7

00017afc <hci_le_read_max_data_len>:
{
   17afc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17afe:	4606      	mov	r6, r0
   17b00:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   17b02:	f242 002f 	movw	r0, #8239	; 0x202f
   17b06:	2100      	movs	r1, #0
   17b08:	aa01      	add	r2, sp, #4
   17b0a:	f7ff ff7f 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
   17b0e:	4604      	mov	r4, r0
   17b10:	b160      	cbz	r0, 17b2c <hci_le_read_max_data_len+0x30>
   17b12:	490c      	ldr	r1, [pc, #48]	; (17b44 <hci_le_read_max_data_len+0x48>)
   17b14:	4b0c      	ldr	r3, [pc, #48]	; (17b48 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
   17b16:	480d      	ldr	r0, [pc, #52]	; (17b4c <hci_le_read_max_data_len+0x50>)
   17b18:	1ac9      	subs	r1, r1, r3
   17b1a:	08c9      	lsrs	r1, r1, #3
   17b1c:	0189      	lsls	r1, r1, #6
   17b1e:	f041 0101 	orr.w	r1, r1, #1
   17b22:	f00f f905 	bl	26d30 <log_0>
}
   17b26:	4620      	mov	r0, r4
   17b28:	b002      	add	sp, #8
   17b2a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   17b2c:	9801      	ldr	r0, [sp, #4]
   17b2e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   17b30:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   17b34:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   17b36:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   17b3a:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   17b3c:	f008 fab4 	bl	200a8 <net_buf_unref>
	return 0;
   17b40:	e7f1      	b.n	17b26 <hci_le_read_max_data_len+0x2a>
   17b42:	bf00      	nop
   17b44:	0002c01c 	.word	0x0002c01c
   17b48:	0002bfe4 	.word	0x0002bfe4
   17b4c:	0002eee3 	.word	0x0002eee3

00017b50 <bt_le_create_conn_legacy>:
{
   17b50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   17b54:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   17b56:	f10d 0103 	add.w	r1, sp, #3
   17b5a:	2000      	movs	r0, #0
   17b5c:	f001 f946 	bl	18dec <bt_id_set_create_conn_own_addr>
	if (err) {
   17b60:	4605      	mov	r5, r0
   17b62:	2800      	cmp	r0, #0
   17b64:	d150      	bne.n	17c08 <bt_le_create_conn_legacy+0xb8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   17b66:	2119      	movs	r1, #25
   17b68:	f242 000d 	movw	r0, #8205	; 0x200d
   17b6c:	f7ff ff06 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   17b70:	4607      	mov	r7, r0
   17b72:	2800      	cmp	r0, #0
   17b74:	d04f      	beq.n	17c16 <bt_le_create_conn_legacy+0xc6>
   17b76:	2119      	movs	r1, #25
   17b78:	3008      	adds	r0, #8
   17b7a:	f008 fbc5 	bl	20308 <net_buf_simple_add>
   17b7e:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
   17b80:	4629      	mov	r1, r5
   17b82:	2219      	movs	r2, #25
   17b84:	f010 fd30 	bl	285e8 <memset>
	cp->own_addr_type = own_addr_type;
   17b88:	f89d 3003 	ldrb.w	r3, [sp, #3]
		if (!bt_dev.le.rl_size ||
   17b8c:	4d23      	ldr	r5, [pc, #140]	; (17c1c <bt_le_create_conn_legacy+0xcc>)
	cp->own_addr_type = own_addr_type;
   17b8e:	7323      	strb	r3, [r4, #12]
		if (!bt_dev.le.rl_size ||
   17b90:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   17b94:	2b00      	cmp	r3, #0
   17b96:	d03b      	beq.n	17c10 <bt_le_create_conn_legacy+0xc0>
   17b98:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   17b9c:	429a      	cmp	r2, r3
   17b9e:	d837      	bhi.n	17c10 <bt_le_create_conn_legacy+0xc0>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   17ba0:	f106 0190 	add.w	r1, r6, #144	; 0x90
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
   17ba4:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   17ba8:	1d60      	adds	r0, r4, #5
   17baa:	f010 fe17 	bl	287dc <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
   17bae:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   17bb2:	89ab      	ldrh	r3, [r5, #12]
	cmd(buf)->state = state;
   17bb4:	4638      	mov	r0, r7
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   17bb6:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   17bb8:	89eb      	ldrh	r3, [r5, #14]
   17bba:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   17bbc:	f8b6 30a8 	ldrh.w	r3, [r6, #168]	; 0xa8
   17bc0:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   17bc4:	f8b6 30aa 	ldrh.w	r3, [r6, #170]	; 0xaa
   17bc8:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   17bcc:	f8b6 30ac 	ldrh.w	r3, [r6, #172]	; 0xac
   17bd0:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   17bd4:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
   17bd8:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
   17bdc:	4b10      	ldr	r3, [pc, #64]	; (17c20 <bt_le_create_conn_legacy+0xd0>)
   17bde:	9301      	str	r3, [sp, #4]
	state->bit = bit;
   17be0:	230b      	movs	r3, #11
   17be2:	9302      	str	r3, [sp, #8]
	state->val = val;
   17be4:	2301      	movs	r3, #1
   17be6:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = state;
   17bea:	f008 f8c5 	bl	1fd78 <net_buf_id>
   17bee:	220c      	movs	r2, #12
   17bf0:	4b0c      	ldr	r3, [pc, #48]	; (17c24 <bt_le_create_conn_legacy+0xd4>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   17bf2:	4639      	mov	r1, r7
	cmd(buf)->state = state;
   17bf4:	fb02 3000 	mla	r0, r2, r0, r3
   17bf8:	ab01      	add	r3, sp, #4
   17bfa:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   17bfc:	4642      	mov	r2, r8
   17bfe:	f242 000d 	movw	r0, #8205	; 0x200d
   17c02:	f7ff ff03 	bl	17a0c <bt_hci_cmd_send_sync>
   17c06:	4605      	mov	r5, r0
}
   17c08:	4628      	mov	r0, r5
   17c0a:	b004      	add	sp, #16
   17c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			peer_addr = &conn->le.resp_addr;
   17c10:	f106 019e 	add.w	r1, r6, #158	; 0x9e
   17c14:	e7c6      	b.n	17ba4 <bt_le_create_conn_legacy+0x54>
		return -ENOBUFS;
   17c16:	f06f 0568 	mvn.w	r5, #104	; 0x68
   17c1a:	e7f5      	b.n	17c08 <bt_le_create_conn_legacy+0xb8>
   17c1c:	20008000 	.word	0x20008000
   17c20:	20008098 	.word	0x20008098
   17c24:	200097e0 	.word	0x200097e0

00017c28 <bt_le_create_conn_cancel>:
{
   17c28:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   17c2a:	2100      	movs	r1, #0
{
   17c2c:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   17c2e:	f242 000e 	movw	r0, #8206	; 0x200e
   17c32:	f7ff fea3 	bl	1797c <bt_hci_cmd_create>
	state->target = target;
   17c36:	4b0c      	ldr	r3, [pc, #48]	; (17c68 <bt_le_create_conn_cancel+0x40>)
	state->val = val;
   17c38:	2500      	movs	r5, #0
	state->target = target;
   17c3a:	9301      	str	r3, [sp, #4]
	state->bit = bit;
   17c3c:	230b      	movs	r3, #11
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   17c3e:	4604      	mov	r4, r0
	state->bit = bit;
   17c40:	9302      	str	r3, [sp, #8]
	state->val = val;
   17c42:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = state;
   17c46:	f008 f897 	bl	1fd78 <net_buf_id>
   17c4a:	220c      	movs	r2, #12
   17c4c:	4b07      	ldr	r3, [pc, #28]	; (17c6c <bt_le_create_conn_cancel+0x44>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   17c4e:	4621      	mov	r1, r4
	cmd(buf)->state = state;
   17c50:	fb02 3000 	mla	r0, r2, r0, r3
   17c54:	ab01      	add	r3, sp, #4
   17c56:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   17c58:	462a      	mov	r2, r5
   17c5a:	f242 000e 	movw	r0, #8206	; 0x200e
   17c5e:	f7ff fed5 	bl	17a0c <bt_hci_cmd_send_sync>
}
   17c62:	b005      	add	sp, #20
   17c64:	bd30      	pop	{r4, r5, pc}
   17c66:	bf00      	nop
   17c68:	20008098 	.word	0x20008098
   17c6c:	200097e0 	.word	0x200097e0

00017c70 <bt_security_err_get>:
	switch (hci_err) {
   17c70:	2829      	cmp	r0, #41	; 0x29
   17c72:	bf9a      	itte	ls
   17c74:	4b01      	ldrls	r3, [pc, #4]	; (17c7c <bt_security_err_get+0xc>)
   17c76:	5c18      	ldrbls	r0, [r3, r0]
{
   17c78:	2008      	movhi	r0, #8
}
   17c7a:	4770      	bx	lr
   17c7c:	0002f208 	.word	0x0002f208

00017c80 <bt_send>:
	return bt_dev.drv->send(buf);
   17c80:	4b02      	ldr	r3, [pc, #8]	; (17c8c <bt_send+0xc>)
   17c82:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   17c86:	691b      	ldr	r3, [r3, #16]
   17c88:	4718      	bx	r3
   17c8a:	bf00      	nop
   17c8c:	20008000 	.word	0x20008000

00017c90 <bt_hci_cmd_send>:
{
   17c90:	b538      	push	{r3, r4, r5, lr}
   17c92:	4605      	mov	r5, r0
	if (!buf) {
   17c94:	460c      	mov	r4, r1
   17c96:	b919      	cbnz	r1, 17ca0 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   17c98:	f7ff fe70 	bl	1797c <bt_hci_cmd_create>
		if (!buf) {
   17c9c:	4604      	mov	r4, r0
   17c9e:	b1f0      	cbz	r0, 17cde <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   17ca0:	f640 4335 	movw	r3, #3125	; 0xc35
   17ca4:	429d      	cmp	r5, r3
   17ca6:	d114      	bne.n	17cd2 <bt_hci_cmd_send+0x42>
		err = bt_send(buf);
   17ca8:	4620      	mov	r0, r4
   17caa:	f7ff ffe9 	bl	17c80 <bt_send>
		if (err) {
   17cae:	4605      	mov	r5, r0
   17cb0:	b168      	cbz	r0, 17cce <bt_hci_cmd_send+0x3e>
   17cb2:	4b0c      	ldr	r3, [pc, #48]	; (17ce4 <bt_hci_cmd_send+0x54>)
   17cb4:	4a0c      	ldr	r2, [pc, #48]	; (17ce8 <bt_hci_cmd_send+0x58>)
			BT_ERR("Unable to send to driver (err %d)", err);
   17cb6:	4601      	mov	r1, r0
   17cb8:	1ad2      	subs	r2, r2, r3
   17cba:	08d2      	lsrs	r2, r2, #3
   17cbc:	0192      	lsls	r2, r2, #6
   17cbe:	480b      	ldr	r0, [pc, #44]	; (17cec <bt_hci_cmd_send+0x5c>)
   17cc0:	f042 0201 	orr.w	r2, r2, #1
   17cc4:	f00f f841 	bl	26d4a <log_1>
			net_buf_unref(buf);
   17cc8:	4620      	mov	r0, r4
   17cca:	f008 f9ed 	bl	200a8 <net_buf_unref>
}
   17cce:	4628      	mov	r0, r5
   17cd0:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   17cd2:	4621      	mov	r1, r4
   17cd4:	4806      	ldr	r0, [pc, #24]	; (17cf0 <bt_hci_cmd_send+0x60>)
   17cd6:	f008 f9b3 	bl	20040 <net_buf_put>
	return 0;
   17cda:	2500      	movs	r5, #0
   17cdc:	e7f7      	b.n	17cce <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
   17cde:	f06f 0568 	mvn.w	r5, #104	; 0x68
   17ce2:	e7f4      	b.n	17cce <bt_hci_cmd_send+0x3e>
   17ce4:	0002bfe4 	.word	0x0002bfe4
   17ce8:	0002c01c 	.word	0x0002c01c
   17cec:	0002ef03 	.word	0x0002ef03
   17cf0:	20008128 	.word	0x20008128

00017cf4 <bt_hci_host_num_completed_packets>:
{
   17cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17cf6:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
   17cf8:	8ac6      	ldrh	r6, [r0, #22]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17cfa:	7980      	ldrb	r0, [r0, #6]
   17cfc:	f008 f834 	bl	1fd68 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   17d00:	4621      	mov	r1, r4
   17d02:	f013 fe66 	bl	2b9d2 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   17d06:	4b2d      	ldr	r3, [pc, #180]	; (17dbc <bt_hci_host_num_completed_packets+0xc8>)
   17d08:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   17d0c:	069b      	lsls	r3, r3, #26
   17d0e:	d553      	bpl.n	17db8 <bt_hci_host_num_completed_packets+0xc4>
	conn = bt_conn_lookup_index(acl(buf)->index);
   17d10:	7d60      	ldrb	r0, [r4, #21]
   17d12:	f002 fc7d 	bl	1a610 <bt_conn_lookup_index>
	if (!conn) {
   17d16:	4605      	mov	r5, r0
   17d18:	b960      	cbnz	r0, 17d34 <bt_hci_host_num_completed_packets+0x40>
   17d1a:	4b29      	ldr	r3, [pc, #164]	; (17dc0 <bt_hci_host_num_completed_packets+0xcc>)
   17d1c:	4a29      	ldr	r2, [pc, #164]	; (17dc4 <bt_hci_host_num_completed_packets+0xd0>)
		BT_WARN("Unable to look up conn with index 0x%02x",
   17d1e:	7d61      	ldrb	r1, [r4, #21]
   17d20:	1ad2      	subs	r2, r2, r3
   17d22:	08d2      	lsrs	r2, r2, #3
   17d24:	0192      	lsls	r2, r2, #6
   17d26:	4828      	ldr	r0, [pc, #160]	; (17dc8 <bt_hci_host_num_completed_packets+0xd4>)
   17d28:	f042 0202 	orr.w	r2, r2, #2
}
   17d2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
   17d30:	f00f b80b 	b.w	26d4a <log_1>
	if (!bt_conn_is_handle_valid(conn)) {
   17d34:	7b43      	ldrb	r3, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   17d36:	2b01      	cmp	r3, #1
   17d38:	d002      	beq.n	17d40 <bt_hci_host_num_completed_packets+0x4c>
   17d3a:	3b07      	subs	r3, #7
   17d3c:	2b01      	cmp	r3, #1
   17d3e:	d815      	bhi.n	17d6c <bt_hci_host_num_completed_packets+0x78>
	bt_conn_unref(conn);
   17d40:	4628      	mov	r0, r5
   17d42:	f002 f813 	bl	19d6c <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   17d46:	2105      	movs	r1, #5
   17d48:	f640 4035 	movw	r0, #3125	; 0xc35
   17d4c:	f7ff fe16 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   17d50:	4604      	mov	r4, r0
   17d52:	b9d0      	cbnz	r0, 17d8a <bt_hci_host_num_completed_packets+0x96>
   17d54:	4b1a      	ldr	r3, [pc, #104]	; (17dc0 <bt_hci_host_num_completed_packets+0xcc>)
   17d56:	491b      	ldr	r1, [pc, #108]	; (17dc4 <bt_hci_host_num_completed_packets+0xd0>)
		BT_ERR("Unable to allocate new HCI command");
   17d58:	481c      	ldr	r0, [pc, #112]	; (17dcc <bt_hci_host_num_completed_packets+0xd8>)
   17d5a:	1ac9      	subs	r1, r1, r3
   17d5c:	08c9      	lsrs	r1, r1, #3
   17d5e:	0189      	lsls	r1, r1, #6
   17d60:	f041 0101 	orr.w	r1, r1, #1
}
   17d64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
   17d68:	f00e bfe2 	b.w	26d30 <log_0>
   17d6c:	4b14      	ldr	r3, [pc, #80]	; (17dc0 <bt_hci_host_num_completed_packets+0xcc>)
   17d6e:	4915      	ldr	r1, [pc, #84]	; (17dc4 <bt_hci_host_num_completed_packets+0xd0>)
		BT_WARN("Not reporting packet for non-connected conn");
   17d70:	4817      	ldr	r0, [pc, #92]	; (17dd0 <bt_hci_host_num_completed_packets+0xdc>)
   17d72:	1ac9      	subs	r1, r1, r3
   17d74:	08c9      	lsrs	r1, r1, #3
   17d76:	0189      	lsls	r1, r1, #6
   17d78:	f041 0102 	orr.w	r1, r1, #2
   17d7c:	f00e ffd8 	bl	26d30 <log_0>
		bt_conn_unref(conn);
   17d80:	4628      	mov	r0, r5
}
   17d82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   17d86:	f001 bff1 	b.w	19d6c <bt_conn_unref>
	return net_buf_simple_add(&buf->b, len);
   17d8a:	f100 0708 	add.w	r7, r0, #8
   17d8e:	2101      	movs	r1, #1
   17d90:	4638      	mov	r0, r7
   17d92:	f008 fab9 	bl	20308 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   17d96:	2501      	movs	r5, #1
   17d98:	2104      	movs	r1, #4
   17d9a:	7005      	strb	r5, [r0, #0]
   17d9c:	4638      	mov	r0, r7
   17d9e:	f008 fab3 	bl	20308 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
   17da2:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
   17da4:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   17da6:	7085      	strb	r5, [r0, #2]
   17da8:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   17daa:	4621      	mov	r1, r4
}
   17dac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   17db0:	f640 4035 	movw	r0, #3125	; 0xc35
   17db4:	f7ff bf6c 	b.w	17c90 <bt_hci_cmd_send>
}
   17db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17dba:	bf00      	nop
   17dbc:	20008000 	.word	0x20008000
   17dc0:	0002bfe4 	.word	0x0002bfe4
   17dc4:	0002c01c 	.word	0x0002c01c
   17dc8:	0002ef25 	.word	0x0002ef25
   17dcc:	0002ef7a 	.word	0x0002ef7a
   17dd0:	0002ef4e 	.word	0x0002ef4e

00017dd4 <conn_auto_initiate>:
{
   17dd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   17dd6:	7b43      	ldrb	r3, [r0, #13]
{
   17dd8:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   17dda:	2b07      	cmp	r3, #7
   17ddc:	d11d      	bne.n	17e1a <conn_auto_initiate+0x46>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   17dde:	1d06      	adds	r6, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17de0:	e8d6 3faf 	lda	r3, [r6]
   17de4:	049b      	lsls	r3, r3, #18
   17de6:	d41a      	bmi.n	17e1e <conn_auto_initiate+0x4a>
   17de8:	78c3      	ldrb	r3, [r0, #3]
   17dea:	b123      	cbz	r3, 17df6 <conn_auto_initiate+0x22>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   17dec:	4b30      	ldr	r3, [pc, #192]	; (17eb0 <conn_auto_initiate+0xdc>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   17dee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   17df2:	071d      	lsls	r5, r3, #28
   17df4:	d513      	bpl.n	17e1e <conn_auto_initiate+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   17df6:	2102      	movs	r1, #2
   17df8:	f242 0016 	movw	r0, #8214	; 0x2016
   17dfc:	f7ff fdbe 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   17e00:	4605      	mov	r5, r0
   17e02:	b160      	cbz	r0, 17e1e <conn_auto_initiate+0x4a>
   17e04:	2102      	movs	r1, #2
   17e06:	3008      	adds	r0, #8
   17e08:	f008 fa7e 	bl	20308 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   17e0c:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   17e0e:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
   17e10:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   17e12:	f242 0016 	movw	r0, #8214	; 0x2016
   17e16:	f7ff ff3b 	bl	17c90 <bt_hci_cmd_send>
}
   17e1a:	b004      	add	sp, #16
   17e1c:	bd70      	pop	{r4, r5, r6, pc}
   17e1e:	e8d6 3faf 	lda	r3, [r6]
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   17e22:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   17e26:	4d22      	ldr	r5, [pc, #136]	; (17eb0 <conn_auto_initiate+0xdc>)
   17e28:	f3c3 3100 	ubfx	r1, r3, #12, #1
   17e2c:	d11a      	bne.n	17e64 <conn_auto_initiate+0x90>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   17e2e:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
   17e32:	07d8      	lsls	r0, r3, #31
   17e34:	d516      	bpl.n	17e64 <conn_auto_initiate+0x90>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   17e36:	2302      	movs	r3, #2
   17e38:	9100      	str	r1, [sp, #0]
   17e3a:	461a      	mov	r2, r3
   17e3c:	4620      	mov	r0, r4
   17e3e:	f010 fd45 	bl	288cc <bt_le_set_phy>
		if (!err) {
   17e42:	4601      	mov	r1, r0
   17e44:	b920      	cbnz	r0, 17e50 <conn_auto_initiate+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17e46:	2180      	movs	r1, #128	; 0x80
   17e48:	4630      	mov	r0, r6
   17e4a:	f010 fcca 	bl	287e2 <atomic_or>
			return;
   17e4e:	e7e4      	b.n	17e1a <conn_auto_initiate+0x46>
   17e50:	4a18      	ldr	r2, [pc, #96]	; (17eb4 <conn_auto_initiate+0xe0>)
   17e52:	4b19      	ldr	r3, [pc, #100]	; (17eb8 <conn_auto_initiate+0xe4>)
		BT_ERR("Failed to set LE PHY (%d)", err);
   17e54:	4819      	ldr	r0, [pc, #100]	; (17ebc <conn_auto_initiate+0xe8>)
   17e56:	1ad2      	subs	r2, r2, r3
   17e58:	08d2      	lsrs	r2, r2, #3
   17e5a:	0192      	lsls	r2, r2, #6
   17e5c:	f042 0201 	orr.w	r2, r2, #1
   17e60:	f00e ff73 	bl	26d4a <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   17e64:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   17e68:	069a      	lsls	r2, r3, #26
   17e6a:	d5d6      	bpl.n	17e1a <conn_auto_initiate+0x46>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   17e6c:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   17e70:	689b      	ldr	r3, [r3, #8]
   17e72:	079b      	lsls	r3, r3, #30
   17e74:	d5d1      	bpl.n	17e1a <conn_auto_initiate+0x46>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   17e76:	f10d 010e 	add.w	r1, sp, #14
   17e7a:	a803      	add	r0, sp, #12
   17e7c:	f7ff fe3e 	bl	17afc <hci_le_read_max_data_len>
			if (!err) {
   17e80:	2800      	cmp	r0, #0
   17e82:	d1ca      	bne.n	17e1a <conn_auto_initiate+0x46>
				err = bt_le_set_data_len(conn,
   17e84:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   17e88:	4620      	mov	r0, r4
   17e8a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   17e8e:	f010 fd00 	bl	28892 <bt_le_set_data_len>
				if (err) {
   17e92:	4601      	mov	r1, r0
   17e94:	2800      	cmp	r0, #0
   17e96:	d0c0      	beq.n	17e1a <conn_auto_initiate+0x46>
   17e98:	4b07      	ldr	r3, [pc, #28]	; (17eb8 <conn_auto_initiate+0xe4>)
   17e9a:	4a06      	ldr	r2, [pc, #24]	; (17eb4 <conn_auto_initiate+0xe0>)
					BT_ERR("Failed to set data len (%d)", err);
   17e9c:	4808      	ldr	r0, [pc, #32]	; (17ec0 <conn_auto_initiate+0xec>)
   17e9e:	1ad2      	subs	r2, r2, r3
   17ea0:	08d2      	lsrs	r2, r2, #3
   17ea2:	0192      	lsls	r2, r2, #6
   17ea4:	f042 0201 	orr.w	r2, r2, #1
   17ea8:	f00e ff4f 	bl	26d4a <log_1>
		}
   17eac:	e7b5      	b.n	17e1a <conn_auto_initiate+0x46>
   17eae:	bf00      	nop
   17eb0:	20008000 	.word	0x20008000
   17eb4:	0002c01c 	.word	0x0002c01c
   17eb8:	0002bfe4 	.word	0x0002bfe4
   17ebc:	0002ef9d 	.word	0x0002ef9d
   17ec0:	0002efb7 	.word	0x0002efb7

00017ec4 <bt_hci_le_enh_conn_complete>:
{
   17ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17ec8:	f8b0 9001 	ldrh.w	r9, [r0, #1]
{
   17ecc:	4605      	mov	r5, r0
	handle |= ~BT_ACL_HANDLE_MASK;
   17ece:	ea6f 5309 	mvn.w	r3, r9, lsl #20
   17ed2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
   17ed6:	f04f 0800 	mov.w	r8, #0
		if (disconnected_handles[i] == handle) {
   17eda:	4a6f      	ldr	r2, [pc, #444]	; (18098 <bt_hci_le_enh_conn_complete+0x1d4>)
   17edc:	b29b      	uxth	r3, r3
   17ede:	8811      	ldrh	r1, [r2, #0]
{
   17ee0:	b085      	sub	sp, #20
		if (disconnected_handles[i] == handle) {
   17ee2:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
   17ee4:	bf04      	itt	eq
   17ee6:	f8a2 8000 	strheq.w	r8, [r2]
			return true;
   17eea:	f04f 0801 	moveq.w	r8, #1
	bt_id_pending_keys_update();
   17eee:	f000 fcc1 	bl	18874 <bt_id_pending_keys_update>
	if (evt->status) {
   17ef2:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17ef4:	fa1f f689 	uxth.w	r6, r9
	if (evt->status) {
   17ef8:	b3ac      	cbz	r4, 17f66 <bt_hci_le_enh_conn_complete+0xa2>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17efa:	2c02      	cmp	r4, #2
   17efc:	d127      	bne.n	17f4e <bt_hci_le_enh_conn_complete+0x8a>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   17efe:	2100      	movs	r1, #0
   17f00:	2206      	movs	r2, #6
   17f02:	4608      	mov	r0, r1
   17f04:	f002 f8ac 	bl	1a060 <bt_conn_lookup_state_le>
	if (!conn) {
   17f08:	4605      	mov	r5, r0
   17f0a:	b978      	cbnz	r0, 17f2c <bt_hci_le_enh_conn_complete+0x68>
   17f0c:	4963      	ldr	r1, [pc, #396]	; (1809c <bt_hci_le_enh_conn_complete+0x1d8>)
   17f0e:	4b64      	ldr	r3, [pc, #400]	; (180a0 <bt_hci_le_enh_conn_complete+0x1dc>)
		BT_ERR("No pending master connection");
   17f10:	4864      	ldr	r0, [pc, #400]	; (180a4 <bt_hci_le_enh_conn_complete+0x1e0>)
   17f12:	1ac9      	subs	r1, r1, r3
   17f14:	08c9      	lsrs	r1, r1, #3
   17f16:	0189      	lsls	r1, r1, #6
   17f18:	f041 0101 	orr.w	r1, r1, #1
   17f1c:	f00e ff08 	bl	26d30 <log_0>
			bt_le_scan_update(false);
   17f20:	2000      	movs	r0, #0
   17f22:	f001 f80f 	bl	18f44 <bt_le_scan_update>
}
   17f26:	b005      	add	sp, #20
   17f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17f2c:	2100      	movs	r1, #0
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   17f2e:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17f30:	f001 ff4e 	bl	19dd0 <bt_conn_set_state>
   17f34:	1d2b      	adds	r3, r5, #4
   17f36:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   17f3a:	07db      	lsls	r3, r3, #31
   17f3c:	d503      	bpl.n	17f46 <bt_hci_le_enh_conn_complete+0x82>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   17f3e:	4621      	mov	r1, r4
   17f40:	4628      	mov	r0, r5
   17f42:	f001 ff45 	bl	19dd0 <bt_conn_set_state>
	bt_conn_unref(conn);
   17f46:	4628      	mov	r0, r5
   17f48:	f001 ff10 	bl	19d6c <bt_conn_unref>
   17f4c:	e7e8      	b.n	17f20 <bt_hci_le_enh_conn_complete+0x5c>
   17f4e:	4b54      	ldr	r3, [pc, #336]	; (180a0 <bt_hci_le_enh_conn_complete+0x1dc>)
   17f50:	4a52      	ldr	r2, [pc, #328]	; (1809c <bt_hci_le_enh_conn_complete+0x1d8>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
   17f52:	4621      	mov	r1, r4
   17f54:	1ad2      	subs	r2, r2, r3
   17f56:	08d2      	lsrs	r2, r2, #3
   17f58:	0192      	lsls	r2, r2, #6
   17f5a:	4853      	ldr	r0, [pc, #332]	; (180a8 <bt_hci_le_enh_conn_complete+0x1e4>)
   17f5c:	f042 0202 	orr.w	r2, r2, #2
   17f60:	f00e fef3 	bl	26d4a <log_1>
		return;
   17f64:	e7df      	b.n	17f26 <bt_hci_le_enh_conn_complete+0x62>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   17f66:	792b      	ldrb	r3, [r5, #4]
   17f68:	1d2f      	adds	r7, r5, #4
   17f6a:	3b02      	subs	r3, #2
   17f6c:	2b01      	cmp	r3, #1
   17f6e:	d83b      	bhi.n	17fe8 <bt_hci_le_enh_conn_complete+0x124>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   17f70:	4639      	mov	r1, r7
   17f72:	a802      	add	r0, sp, #8
   17f74:	f010 fc32 	bl	287dc <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   17f78:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
   17f7c:	2206      	movs	r2, #6
   17f7e:	3b02      	subs	r3, #2
   17f80:	f105 0111 	add.w	r1, r5, #17
   17f84:	f10d 0001 	add.w	r0, sp, #1
   17f88:	f88d 3008 	strb.w	r3, [sp, #8]
   17f8c:	f010 fb01 	bl	28592 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   17f90:	2301      	movs	r3, #1
   17f92:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
   17f96:	78e8      	ldrb	r0, [r5, #3]
   17f98:	b980      	cbnz	r0, 17fbc <bt_hci_le_enh_conn_complete+0xf8>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   17f9a:	2206      	movs	r2, #6
   17f9c:	a902      	add	r1, sp, #8
   17f9e:	f002 f85f 	bl	1a060 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17fa2:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   17fa4:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17fa6:	b943      	cbnz	r3, 17fba <bt_hci_le_enh_conn_complete+0xf6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17fa8:	4b40      	ldr	r3, [pc, #256]	; (180ac <bt_hci_le_enh_conn_complete+0x1e8>)
   17faa:	e8d3 2fef 	ldaex	r2, [r3]
   17fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   17fb2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   17fb6:	2900      	cmp	r1, #0
   17fb8:	d1f7      	bne.n	17faa <bt_hci_le_enh_conn_complete+0xe6>
	if (!conn) {
   17fba:	bb44      	cbnz	r4, 1800e <bt_hci_le_enh_conn_complete+0x14a>
   17fbc:	4a38      	ldr	r2, [pc, #224]	; (180a0 <bt_hci_le_enh_conn_complete+0x1dc>)
   17fbe:	4c37      	ldr	r4, [pc, #220]	; (1809c <bt_hci_le_enh_conn_complete+0x1d8>)
		BT_ERR("No pending conn for peer %s",
   17fc0:	4638      	mov	r0, r7
   17fc2:	1aa4      	subs	r4, r4, r2
   17fc4:	f7fe feda 	bl	16d7c <bt_addr_le_str_real>
   17fc8:	f7fa fc90 	bl	128ec <z_log_strdup>
   17fcc:	08e4      	lsrs	r4, r4, #3
   17fce:	01a4      	lsls	r4, r4, #6
   17fd0:	f044 0401 	orr.w	r4, r4, #1
   17fd4:	4601      	mov	r1, r0
   17fd6:	4622      	mov	r2, r4
   17fd8:	4835      	ldr	r0, [pc, #212]	; (180b0 <bt_hci_le_enh_conn_complete+0x1ec>)
   17fda:	f00e feb6 	bl	26d4a <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   17fde:	211f      	movs	r1, #31
   17fe0:	4630      	mov	r0, r6
   17fe2:	f010 fc1b 	bl	2881c <bt_hci_disconnect>
		return;
   17fe6:	e79e      	b.n	17f26 <bt_hci_le_enh_conn_complete+0x62>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   17fe8:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
   17fea:	4639      	mov	r1, r7
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   17fec:	2b01      	cmp	r3, #1
   17fee:	bf04      	itt	eq
   17ff0:	4b30      	ldreq	r3, [pc, #192]	; (180b4 <bt_hci_le_enh_conn_complete+0x1f0>)
   17ff2:	f893 4033 	ldrbeq.w	r4, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
   17ff6:	4620      	mov	r0, r4
   17ff8:	f010 fd1f 	bl	28a3a <bt_lookup_id_addr>
   17ffc:	4601      	mov	r1, r0
   17ffe:	a802      	add	r0, sp, #8
   18000:	f010 fbec 	bl	287dc <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   18004:	4639      	mov	r1, r7
   18006:	4668      	mov	r0, sp
   18008:	f010 fbe8 	bl	287dc <bt_addr_le_copy>
   1800c:	e7c3      	b.n	17f96 <bt_hci_le_enh_conn_complete+0xd2>
	conn->handle = handle;
   1800e:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   18010:	a902      	add	r1, sp, #8
	conn->handle = handle;
   18012:	f820 9b90 	strh.w	r9, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   18016:	f010 fbe1 	bl	287dc <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   1801a:	7e2a      	ldrb	r2, [r5, #24]
   1801c:	7deb      	ldrb	r3, [r5, #23]
   1801e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18022:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   18026:	7eaa      	ldrb	r2, [r5, #26]
   18028:	7e6b      	ldrb	r3, [r5, #25]
   1802a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1802e:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   18032:	7f2a      	ldrb	r2, [r5, #28]
   18034:	7eeb      	ldrb	r3, [r5, #27]
   18036:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->err = 0U;
   1803a:	2200      	movs	r2, #0
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1803c:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   18040:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   18042:	7322      	strb	r2, [r4, #12]
	conn->role = evt->role;
   18044:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18046:	b96b      	cbnz	r3, 18064 <bt_hci_le_enh_conn_complete+0x1a0>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   18048:	4669      	mov	r1, sp
   1804a:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   1804e:	f010 fbc5 	bl	287dc <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   18052:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   18054:	4b17      	ldr	r3, [pc, #92]	; (180b4 <bt_hci_le_enh_conn_complete+0x1f0>)
					&bt_dev.id_addr[conn->id]);
   18056:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   1805a:	4419      	add	r1, r3
   1805c:	f104 0097 	add.w	r0, r4, #151	; 0x97
   18060:	f010 fbbc 	bl	287dc <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   18064:	2107      	movs	r1, #7
   18066:	4620      	mov	r0, r4
   18068:	f001 feb2 	bl	19dd0 <bt_conn_set_state>
	if (is_disconnected) {
   1806c:	f1b8 0f00 	cmp.w	r8, #0
   18070:	d003      	beq.n	1807a <bt_hci_le_enh_conn_complete+0x1b6>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   18072:	2101      	movs	r1, #1
   18074:	4620      	mov	r0, r4
   18076:	f001 feab 	bl	19dd0 <bt_conn_set_state>
	bt_conn_connected(conn);
   1807a:	4620      	mov	r0, r4
   1807c:	f010 fe01 	bl	28c82 <bt_conn_connected>
	conn_auto_initiate(conn);
   18080:	4620      	mov	r0, r4
   18082:	f7ff fea7 	bl	17dd4 <conn_auto_initiate>
	bt_conn_unref(conn);
   18086:	4620      	mov	r0, r4
   18088:	f001 fe70 	bl	19d6c <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1808c:	78e3      	ldrb	r3, [r4, #3]
   1808e:	2b00      	cmp	r3, #0
   18090:	f47f af49 	bne.w	17f26 <bt_hci_le_enh_conn_complete+0x62>
   18094:	e744      	b.n	17f20 <bt_hci_le_enh_conn_complete+0x5c>
   18096:	bf00      	nop
   18098:	2000a408 	.word	0x2000a408
   1809c:	0002c01c 	.word	0x0002c01c
   180a0:	0002bfe4 	.word	0x0002bfe4
   180a4:	0002efd3 	.word	0x0002efd3
   180a8:	0002eff0 	.word	0x0002eff0
   180ac:	20008098 	.word	0x20008098
   180b0:	0002f009 	.word	0x0002f009
   180b4:	20008000 	.word	0x20008000

000180b8 <le_phy_update_complete>:
{
   180b8:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   180ba:	6883      	ldr	r3, [r0, #8]
   180bc:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   180c0:	4628      	mov	r0, r5
   180c2:	f001 fe79 	bl	19db8 <bt_conn_lookup_handle>
	if (!conn) {
   180c6:	4604      	mov	r4, r0
   180c8:	b960      	cbnz	r0, 180e4 <le_phy_update_complete+0x2c>
   180ca:	4b12      	ldr	r3, [pc, #72]	; (18114 <le_phy_update_complete+0x5c>)
   180cc:	4a12      	ldr	r2, [pc, #72]	; (18118 <le_phy_update_complete+0x60>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   180ce:	4629      	mov	r1, r5
   180d0:	1ad2      	subs	r2, r2, r3
   180d2:	08d2      	lsrs	r2, r2, #3
   180d4:	0192      	lsls	r2, r2, #6
   180d6:	4811      	ldr	r0, [pc, #68]	; (1811c <le_phy_update_complete+0x64>)
   180d8:	f042 0201 	orr.w	r2, r2, #1
}
   180dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   180e0:	f00e be33 	b.w	26d4a <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   180e4:	3004      	adds	r0, #4
   180e6:	e8d0 3fef 	ldaex	r3, [r0]
   180ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   180ee:	e8c0 2fe1 	stlex	r1, r2, [r0]
   180f2:	2900      	cmp	r1, #0
   180f4:	d1f7      	bne.n	180e6 <le_phy_update_complete+0x2e>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   180f6:	061b      	lsls	r3, r3, #24
   180f8:	d506      	bpl.n	18108 <le_phy_update_complete+0x50>
   180fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   180fe:	f010 fb70 	bl	287e2 <atomic_or>
		conn_auto_initiate(conn);
   18102:	4620      	mov	r0, r4
   18104:	f7ff fe66 	bl	17dd4 <conn_auto_initiate>
	bt_conn_unref(conn);
   18108:	4620      	mov	r0, r4
}
   1810a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1810e:	f001 be2d 	b.w	19d6c <bt_conn_unref>
   18112:	bf00      	nop
   18114:	0002bfe4 	.word	0x0002bfe4
   18118:	0002c01c 	.word	0x0002c01c
   1811c:	0002ec34 	.word	0x0002ec34

00018120 <le_remote_feat_complete>:
{
   18120:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   18122:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18124:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   18128:	4630      	mov	r0, r6
   1812a:	f001 fe45 	bl	19db8 <bt_conn_lookup_handle>
	if (!conn) {
   1812e:	4604      	mov	r4, r0
   18130:	b960      	cbnz	r0, 1814c <le_remote_feat_complete+0x2c>
   18132:	4a10      	ldr	r2, [pc, #64]	; (18174 <le_remote_feat_complete+0x54>)
   18134:	4b10      	ldr	r3, [pc, #64]	; (18178 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   18136:	4631      	mov	r1, r6
}
   18138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1813c:	1ad2      	subs	r2, r2, r3
   1813e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   18140:	0192      	lsls	r2, r2, #6
   18142:	480e      	ldr	r0, [pc, #56]	; (1817c <le_remote_feat_complete+0x5c>)
   18144:	f042 0201 	orr.w	r2, r2, #1
   18148:	f00e bdff 	b.w	26d4a <log_1>
	if (!evt->status) {
   1814c:	782b      	ldrb	r3, [r5, #0]
   1814e:	b923      	cbnz	r3, 1815a <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
   18150:	2208      	movs	r2, #8
   18152:	1ce9      	adds	r1, r5, #3
   18154:	30b4      	adds	r0, #180	; 0xb4
   18156:	f010 fa1c 	bl	28592 <memcpy>
   1815a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1815e:	1d20      	adds	r0, r4, #4
   18160:	f010 fb3f 	bl	287e2 <atomic_or>
	conn_auto_initiate(conn);
   18164:	4620      	mov	r0, r4
   18166:	f7ff fe35 	bl	17dd4 <conn_auto_initiate>
	bt_conn_unref(conn);
   1816a:	4620      	mov	r0, r4
}
   1816c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   18170:	f001 bdfc 	b.w	19d6c <bt_conn_unref>
   18174:	0002c01c 	.word	0x0002c01c
   18178:	0002bfe4 	.word	0x0002bfe4
   1817c:	0002ec34 	.word	0x0002ec34

00018180 <le_ltk_request>:
{
   18180:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   18182:	6885      	ldr	r5, [r0, #8]
{
   18184:	b087      	sub	sp, #28
	handle = sys_le16_to_cpu(evt->handle);
   18186:	882e      	ldrh	r6, [r5, #0]
   18188:	b2b7      	uxth	r7, r6
	conn = bt_conn_lookup_handle(handle);
   1818a:	4638      	mov	r0, r7
   1818c:	f001 fe14 	bl	19db8 <bt_conn_lookup_handle>
	if (!conn) {
   18190:	4604      	mov	r4, r0
   18192:	b960      	cbnz	r0, 181ae <le_ltk_request+0x2e>
   18194:	4a26      	ldr	r2, [pc, #152]	; (18230 <le_ltk_request+0xb0>)
   18196:	4b27      	ldr	r3, [pc, #156]	; (18234 <le_ltk_request+0xb4>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   18198:	4639      	mov	r1, r7
   1819a:	1ad2      	subs	r2, r2, r3
   1819c:	08d2      	lsrs	r2, r2, #3
   1819e:	0192      	lsls	r2, r2, #6
   181a0:	4825      	ldr	r0, [pc, #148]	; (18238 <le_ltk_request+0xb8>)
   181a2:	f042 0201 	orr.w	r2, r2, #1
   181a6:	f00e fdd0 	bl	26d4a <log_1>
}
   181aa:	b007      	add	sp, #28
   181ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   181ae:	af02      	add	r7, sp, #8
   181b0:	f8d5 2002 	ldr.w	r2, [r5, #2]
   181b4:	f8d5 3006 	ldr.w	r3, [r5, #6]
   181b8:	9701      	str	r7, [sp, #4]
   181ba:	8969      	ldrh	r1, [r5, #10]
   181bc:	9100      	str	r1, [sp, #0]
   181be:	f012 f85c 	bl	2a27a <bt_smp_request_ltk>
   181c2:	b320      	cbz	r0, 1820e <le_ltk_request+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   181c4:	2112      	movs	r1, #18
   181c6:	f242 001a 	movw	r0, #8218	; 0x201a
   181ca:	f7ff fbd7 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   181ce:	4605      	mov	r5, r0
   181d0:	b968      	cbnz	r0, 181ee <le_ltk_request+0x6e>
   181d2:	4917      	ldr	r1, [pc, #92]	; (18230 <le_ltk_request+0xb0>)
   181d4:	4b17      	ldr	r3, [pc, #92]	; (18234 <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
   181d6:	4819      	ldr	r0, [pc, #100]	; (1823c <le_ltk_request+0xbc>)
   181d8:	1ac9      	subs	r1, r1, r3
   181da:	08c9      	lsrs	r1, r1, #3
   181dc:	0189      	lsls	r1, r1, #6
   181de:	f041 0101 	orr.w	r1, r1, #1
   181e2:	f00e fda5 	bl	26d30 <log_0>
	bt_conn_unref(conn);
   181e6:	4620      	mov	r0, r4
   181e8:	f001 fdc0 	bl	19d6c <bt_conn_unref>
   181ec:	e7dd      	b.n	181aa <le_ltk_request+0x2a>
   181ee:	2112      	movs	r1, #18
   181f0:	3008      	adds	r0, #8
   181f2:	f008 f889 	bl	20308 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   181f6:	4639      	mov	r1, r7
   181f8:	2210      	movs	r2, #16
	cp->handle = sys_cpu_to_le16(handle);
   181fa:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   181fe:	f010 f9c8 	bl	28592 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   18202:	4629      	mov	r1, r5
   18204:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   18208:	f7ff fd42 	bl	17c90 <bt_hci_cmd_send>
   1820c:	e7eb      	b.n	181e6 <le_ltk_request+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   1820e:	2102      	movs	r1, #2
   18210:	f242 001b 	movw	r0, #8219	; 0x201b
   18214:	f7ff fbb2 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   18218:	4605      	mov	r5, r0
   1821a:	2800      	cmp	r0, #0
   1821c:	d0d9      	beq.n	181d2 <le_ltk_request+0x52>
   1821e:	2102      	movs	r1, #2
   18220:	3008      	adds	r0, #8
   18222:	f008 f871 	bl	20308 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   18226:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
   18228:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1822a:	f242 001b 	movw	r0, #8219	; 0x201b
   1822e:	e7eb      	b.n	18208 <le_ltk_request+0x88>
   18230:	0002c01c 	.word	0x0002c01c
   18234:	0002bfe4 	.word	0x0002bfe4
   18238:	0002ec34 	.word	0x0002ec34
   1823c:	0002f025 	.word	0x0002f025

00018240 <le_conn_param_neg_reply>:
{
   18240:	b570      	push	{r4, r5, r6, lr}
   18242:	4606      	mov	r6, r0
   18244:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   18246:	f242 0021 	movw	r0, #8225	; 0x2021
   1824a:	2103      	movs	r1, #3
   1824c:	f7ff fb96 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   18250:	4604      	mov	r4, r0
   18252:	b958      	cbnz	r0, 1826c <le_conn_param_neg_reply+0x2c>
}
   18254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18258:	490b      	ldr	r1, [pc, #44]	; (18288 <le_conn_param_neg_reply+0x48>)
   1825a:	4b0c      	ldr	r3, [pc, #48]	; (1828c <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
   1825c:	480c      	ldr	r0, [pc, #48]	; (18290 <le_conn_param_neg_reply+0x50>)
   1825e:	1ac9      	subs	r1, r1, r3
   18260:	08c9      	lsrs	r1, r1, #3
   18262:	0189      	lsls	r1, r1, #6
   18264:	f041 0101 	orr.w	r1, r1, #1
   18268:	f00e bd62 	b.w	26d30 <log_0>
   1826c:	2103      	movs	r1, #3
   1826e:	3008      	adds	r0, #8
   18270:	f008 f84a 	bl	20308 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   18274:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   18276:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   18278:	4621      	mov	r1, r4
}
   1827a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1827e:	f242 0021 	movw	r0, #8225	; 0x2021
   18282:	f7ff bd05 	b.w	17c90 <bt_hci_cmd_send>
   18286:	bf00      	nop
   18288:	0002c01c 	.word	0x0002c01c
   1828c:	0002bfe4 	.word	0x0002bfe4
   18290:	0002f03c 	.word	0x0002f03c

00018294 <le_conn_param_req>:
{
   18294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   18296:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   18298:	78d9      	ldrb	r1, [r3, #3]
   1829a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1829c:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1829e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   182a2:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   182a6:	7959      	ldrb	r1, [r3, #5]
   182a8:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   182aa:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   182ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   182b0:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   182b4:	799a      	ldrb	r2, [r3, #6]
   182b6:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   182b8:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
   182ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   182be:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   182c2:	7a1a      	ldrb	r2, [r3, #8]
   182c4:	7a5b      	ldrb	r3, [r3, #9]
   182c6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   182ca:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   182ce:	f001 fd73 	bl	19db8 <bt_conn_lookup_handle>
	if (!conn) {
   182d2:	4606      	mov	r6, r0
   182d4:	b980      	cbnz	r0, 182f8 <le_conn_param_req+0x64>
   182d6:	4b20      	ldr	r3, [pc, #128]	; (18358 <le_conn_param_req+0xc4>)
   182d8:	4a20      	ldr	r2, [pc, #128]	; (1835c <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   182da:	4621      	mov	r1, r4
   182dc:	1ad2      	subs	r2, r2, r3
   182de:	08d2      	lsrs	r2, r2, #3
   182e0:	0192      	lsls	r2, r2, #6
   182e2:	481f      	ldr	r0, [pc, #124]	; (18360 <le_conn_param_req+0xcc>)
   182e4:	f042 0201 	orr.w	r2, r2, #1
   182e8:	f00e fd2f 	bl	26d4a <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   182ec:	2102      	movs	r1, #2
   182ee:	4620      	mov	r0, r4
   182f0:	f7ff ffa6 	bl	18240 <le_conn_param_neg_reply>
}
   182f4:	b003      	add	sp, #12
   182f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   182f8:	4669      	mov	r1, sp
   182fa:	f001 fb45 	bl	19988 <le_param_req>
   182fe:	b938      	cbnz	r0, 18310 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   18300:	211e      	movs	r1, #30
   18302:	4620      	mov	r0, r4
   18304:	f7ff ff9c 	bl	18240 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   18308:	4630      	mov	r0, r6
   1830a:	f001 fd2f 	bl	19d6c <bt_conn_unref>
   1830e:	e7f1      	b.n	182f4 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   18310:	210e      	movs	r1, #14
   18312:	f242 0020 	movw	r0, #8224	; 0x2020
   18316:	f7ff fb31 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   1831a:	4605      	mov	r5, r0
   1831c:	2800      	cmp	r0, #0
   1831e:	d0f3      	beq.n	18308 <le_conn_param_req+0x74>
   18320:	210e      	movs	r1, #14
   18322:	3008      	adds	r0, #8
   18324:	f007 fff0 	bl	20308 <net_buf_simple_add>
   18328:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   1832a:	220e      	movs	r2, #14
   1832c:	2100      	movs	r1, #0
   1832e:	f010 f95b 	bl	285e8 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   18332:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   18336:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   18338:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1833a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1833e:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   18340:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   18342:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   18346:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
   1834a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1834c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   18350:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   18352:	f7ff fc9d 	bl	17c90 <bt_hci_cmd_send>
   18356:	e7d7      	b.n	18308 <le_conn_param_req+0x74>
   18358:	0002bfe4 	.word	0x0002bfe4
   1835c:	0002c01c 	.word	0x0002c01c
   18360:	0002ec34 	.word	0x0002ec34

00018364 <hci_tx_thread>:
{
   18364:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18368:	4d51      	ldr	r5, [pc, #324]	; (184b0 <hci_tx_thread+0x14c>)
   1836a:	4b52      	ldr	r3, [pc, #328]	; (184b4 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
   1836c:	f8df 914c 	ldr.w	r9, [pc, #332]	; 184bc <hci_tx_thread+0x158>
   18370:	1aed      	subs	r5, r5, r3
		BT_ASSERT(err == 0);
   18372:	f8df a174 	ldr.w	sl, [pc, #372]	; 184e8 <hci_tx_thread+0x184>
   18376:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
   18378:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1837c:	484e      	ldr	r0, [pc, #312]	; (184b8 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
   1837e:	f36f 3352 	bfc	r3, #13, #6
   18382:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   18386:	f001 fc8d 	bl	19ca4 <bt_conn_prepare_events>
   1838a:	1c47      	adds	r7, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   1838c:	f04f 32ff 	mov.w	r2, #4294967295
   18390:	f04f 33ff 	mov.w	r3, #4294967295
   18394:	4639      	mov	r1, r7
   18396:	4849      	ldr	r0, [pc, #292]	; (184bc <hci_tx_thread+0x158>)
   18398:	f00d ff26 	bl	261e8 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1839c:	b160      	cbz	r0, 183b8 <hci_tx_thread+0x54>
   1839e:	f640 136f 	movw	r3, #2415	; 0x96f
   183a2:	4652      	mov	r2, sl
   183a4:	4946      	ldr	r1, [pc, #280]	; (184c0 <hci_tx_thread+0x15c>)
   183a6:	4847      	ldr	r0, [pc, #284]	; (184c4 <hci_tx_thread+0x160>)
   183a8:	f00e f9b8 	bl	2671c <printk>
   183ac:	4040      	eors	r0, r0
   183ae:	f380 8811 	msr	BASEPRI, r0
   183b2:	f04f 0003 	mov.w	r0, #3
   183b6:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   183b8:	4e43      	ldr	r6, [pc, #268]	; (184c8 <hci_tx_thread+0x164>)
{
   183ba:	f8df 8100 	ldr.w	r8, [pc, #256]	; 184bc <hci_tx_thread+0x158>
   183be:	f106 0bf0 	add.w	fp, r6, #240	; 0xf0
	for (; count; ev++, count--) {
   183c2:	b917      	cbnz	r7, 183ca <hci_tx_thread+0x66>
	z_impl_k_yield();
   183c4:	f00c fdda 	bl	24f7c <z_impl_k_yield>
	while (1) {
   183c8:	e7d6      	b.n	18378 <hci_tx_thread+0x14>
		switch (ev->state) {
   183ca:	f8d8 100c 	ldr.w	r1, [r8, #12]
   183ce:	f3c1 3145 	ubfx	r1, r1, #13, #6
   183d2:	2901      	cmp	r1, #1
   183d4:	d959      	bls.n	1848a <hci_tx_thread+0x126>
   183d6:	2904      	cmp	r1, #4
   183d8:	d163      	bne.n	184a2 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   183da:	f898 300c 	ldrb.w	r3, [r8, #12]
   183de:	2b00      	cmp	r3, #0
   183e0:	d157      	bne.n	18492 <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   183e2:	2200      	movs	r2, #0
   183e4:	2300      	movs	r3, #0
   183e6:	4839      	ldr	r0, [pc, #228]	; (184cc <hci_tx_thread+0x168>)
   183e8:	f007 fdcc 	bl	1ff84 <net_buf_get>
	BT_ASSERT(buf);
   183ec:	4604      	mov	r4, r0
   183ee:	b960      	cbnz	r0, 1840a <hci_tx_thread+0xa6>
   183f0:	f640 130c 	movw	r3, #2316	; 0x90c
   183f4:	4652      	mov	r2, sl
   183f6:	4936      	ldr	r1, [pc, #216]	; (184d0 <hci_tx_thread+0x16c>)
   183f8:	4832      	ldr	r0, [pc, #200]	; (184c4 <hci_tx_thread+0x160>)
   183fa:	f00e f98f 	bl	2671c <printk>
   183fe:	4040      	eors	r0, r0
   18400:	f380 8811 	msr	BASEPRI, r0
   18404:	f04f 0003 	mov.w	r0, #3
   18408:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   1840a:	f04f 33ff 	mov.w	r3, #4294967295
   1840e:	f04f 32ff 	mov.w	r2, #4294967295
   18412:	4658      	mov	r0, fp
   18414:	f00b f886 	bl	23524 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   18418:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
   1841c:	b163      	cbz	r3, 18438 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
   1841e:	01a9      	lsls	r1, r5, #6
   18420:	482c      	ldr	r0, [pc, #176]	; (184d4 <hci_tx_thread+0x170>)
   18422:	f041 0101 	orr.w	r1, r1, #1
   18426:	f00e fc83 	bl	26d30 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   1842a:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   1842e:	f007 fe3b 	bl	200a8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   18432:	2300      	movs	r3, #0
   18434:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
	bt_dev.sent_cmd = net_buf_ref(buf);
   18438:	4620      	mov	r0, r4
   1843a:	f007 fe7b 	bl	20134 <net_buf_ref>
   1843e:	f8c6 0108 	str.w	r0, [r6, #264]	; 0x108
	err = bt_send(buf);
   18442:	4620      	mov	r0, r4
   18444:	f7ff fc1c 	bl	17c80 <bt_send>
	if (err) {
   18448:	4601      	mov	r1, r0
   1844a:	b1f0      	cbz	r0, 1848a <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
   1844c:	01aa      	lsls	r2, r5, #6
   1844e:	4822      	ldr	r0, [pc, #136]	; (184d8 <hci_tx_thread+0x174>)
   18450:	f042 0201 	orr.w	r2, r2, #1
   18454:	f00e fc79 	bl	26d4a <log_1>
	z_impl_k_sem_give(sem);
   18458:	4820      	ldr	r0, [pc, #128]	; (184dc <hci_tx_thread+0x178>)
   1845a:	f00b f81f 	bl	2349c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1845e:	4620      	mov	r0, r4
   18460:	f007 fc8a 	bl	1fd78 <net_buf_id>
   18464:	220c      	movs	r2, #12
   18466:	4b1e      	ldr	r3, [pc, #120]	; (184e0 <hci_tx_thread+0x17c>)
   18468:	211f      	movs	r1, #31
   1846a:	fb02 3000 	mla	r0, r2, r0, r3
   1846e:	4622      	mov	r2, r4
   18470:	8840      	ldrh	r0, [r0, #2]
   18472:	f7ff f9b5 	bl	177e0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   18476:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
   1847a:	f007 fe15 	bl	200a8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1847e:	2300      	movs	r3, #0
		net_buf_unref(buf);
   18480:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   18482:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
		net_buf_unref(buf);
   18486:	f007 fe0f 	bl	200a8 <net_buf_unref>
	for (; count; ev++, count--) {
   1848a:	f108 0814 	add.w	r8, r8, #20
   1848e:	3f01      	subs	r7, #1
   18490:	e797      	b.n	183c2 <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   18492:	2b01      	cmp	r3, #1
   18494:	d1f9      	bne.n	1848a <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
   18496:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
   1849a:	3838      	subs	r0, #56	; 0x38
   1849c:	f002 f804 	bl	1a4a8 <bt_conn_process_tx>
   184a0:	e7f3      	b.n	1848a <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   184a2:	01aa      	lsls	r2, r5, #6
   184a4:	480f      	ldr	r0, [pc, #60]	; (184e4 <hci_tx_thread+0x180>)
   184a6:	f042 0202 	orr.w	r2, r2, #2
   184aa:	f00e fc4e 	bl	26d4a <log_1>
   184ae:	e7ec      	b.n	1848a <hci_tx_thread+0x126>
   184b0:	0002c01c 	.word	0x0002c01c
   184b4:	0002bfe4 	.word	0x0002bfe4
   184b8:	20008278 	.word	0x20008278
   184bc:	20008264 	.word	0x20008264
   184c0:	0002ee9e 	.word	0x0002ee9e
   184c4:	0002cfb2 	.word	0x0002cfb2
   184c8:	20008000 	.word	0x20008000
   184cc:	20008128 	.word	0x20008128
   184d0:	0002ec08 	.word	0x0002ec08
   184d4:	0002f056 	.word	0x0002f056
   184d8:	0002ef03 	.word	0x0002ef03
   184dc:	200080f0 	.word	0x200080f0
   184e0:	200097e0 	.word	0x200097e0
   184e4:	0002f071 	.word	0x0002f071
   184e8:	0002ed2e 	.word	0x0002ed2e

000184ec <hci_event_prio>:
{
   184ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   184f0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   184f2:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   184f6:	4630      	mov	r0, r6
   184f8:	f012 f8ad 	bl	2a656 <net_buf_simple_headroom>
	state->len = buf->len;
   184fc:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   18500:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   18502:	f1b8 0f01 	cmp.w	r8, #1
   18506:	d80c      	bhi.n	18522 <hci_event_prio+0x36>
   18508:	f640 43dc 	movw	r3, #3292	; 0xcdc
   1850c:	4a1b      	ldr	r2, [pc, #108]	; (1857c <hci_event_prio+0x90>)
   1850e:	491c      	ldr	r1, [pc, #112]	; (18580 <hci_event_prio+0x94>)
   18510:	481c      	ldr	r0, [pc, #112]	; (18584 <hci_event_prio+0x98>)
   18512:	f00e f903 	bl	2671c <printk>
   18516:	4040      	eors	r0, r0
   18518:	f380 8811 	msr	BASEPRI, r0
   1851c:	f04f 0003 	mov.w	r0, #3
   18520:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   18522:	2102      	movs	r1, #2
   18524:	4630      	mov	r0, r6
   18526:	f007 fecd 	bl	202c4 <net_buf_simple_pull_mem>
   1852a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1852c:	7800      	ldrb	r0, [r0, #0]
   1852e:	f010 f92b 	bl	28788 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   18532:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   18534:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   18536:	d40c      	bmi.n	18552 <hci_event_prio+0x66>
   18538:	f44f 634e 	mov.w	r3, #3296	; 0xce0
   1853c:	4a0f      	ldr	r2, [pc, #60]	; (1857c <hci_event_prio+0x90>)
   1853e:	4912      	ldr	r1, [pc, #72]	; (18588 <hci_event_prio+0x9c>)
   18540:	4810      	ldr	r0, [pc, #64]	; (18584 <hci_event_prio+0x98>)
   18542:	f00e f8eb 	bl	2671c <printk>
   18546:	4040      	eors	r0, r0
   18548:	f380 8811 	msr	BASEPRI, r0
   1854c:	f04f 0003 	mov.w	r0, #3
   18550:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   18552:	2305      	movs	r3, #5
   18554:	4621      	mov	r1, r4
   18556:	4a0d      	ldr	r2, [pc, #52]	; (1858c <hci_event_prio+0xa0>)
   18558:	7838      	ldrb	r0, [r7, #0]
   1855a:	f7fe ff8f 	bl	1747c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1855e:	07b3      	lsls	r3, r6, #30
   18560:	d507      	bpl.n	18572 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   18562:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   18564:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   18568:	fa10 f585 	uxtah	r5, r0, r5
   1856c:	60a5      	str	r5, [r4, #8]
}
   1856e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   18572:	4620      	mov	r0, r4
}
   18574:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   18578:	f007 bd96 	b.w	200a8 <net_buf_unref>
   1857c:	0002ed2e 	.word	0x0002ed2e
   18580:	0002ed62 	.word	0x0002ed62
   18584:	0002cfb2 	.word	0x0002cfb2
   18588:	0002f092 	.word	0x0002f092
   1858c:	0002c594 	.word	0x0002c594

00018590 <bt_recv>:
{
   18590:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   18592:	7d01      	ldrb	r1, [r0, #20]
   18594:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   18596:	2901      	cmp	r1, #1
   18598:	d007      	beq.n	185aa <bt_recv+0x1a>
   1859a:	2903      	cmp	r1, #3
   1859c:	d113      	bne.n	185c6 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   1859e:	4812      	ldr	r0, [pc, #72]	; (185e8 <bt_recv+0x58>)
   185a0:	4629      	mov	r1, r5
   185a2:	f007 fd4d 	bl	20040 <net_buf_put>
		return 0;
   185a6:	2000      	movs	r0, #0
   185a8:	e00c      	b.n	185c4 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   185aa:	6883      	ldr	r3, [r0, #8]
   185ac:	7818      	ldrb	r0, [r3, #0]
   185ae:	f010 f8eb 	bl	28788 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   185b2:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   185b4:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   185b6:	d502      	bpl.n	185be <bt_recv+0x2e>
			hci_event_prio(buf);
   185b8:	4628      	mov	r0, r5
   185ba:	f7ff ff97 	bl	184ec <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   185be:	f014 0002 	ands.w	r0, r4, #2
   185c2:	d1ec      	bne.n	1859e <bt_recv+0xe>
}
   185c4:	bd38      	pop	{r3, r4, r5, pc}
   185c6:	4b09      	ldr	r3, [pc, #36]	; (185ec <bt_recv+0x5c>)
   185c8:	4a09      	ldr	r2, [pc, #36]	; (185f0 <bt_recv+0x60>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   185ca:	480a      	ldr	r0, [pc, #40]	; (185f4 <bt_recv+0x64>)
   185cc:	1ad2      	subs	r2, r2, r3
   185ce:	08d2      	lsrs	r2, r2, #3
   185d0:	0192      	lsls	r2, r2, #6
   185d2:	f042 0201 	orr.w	r2, r2, #1
   185d6:	f00e fbb8 	bl	26d4a <log_1>
		net_buf_unref(buf);
   185da:	4628      	mov	r0, r5
   185dc:	f007 fd64 	bl	200a8 <net_buf_unref>
		return -EINVAL;
   185e0:	f06f 0015 	mvn.w	r0, #21
   185e4:	e7ee      	b.n	185c4 <bt_recv+0x34>
   185e6:	bf00      	nop
   185e8:	2000810c 	.word	0x2000810c
   185ec:	0002bfe4 	.word	0x0002bfe4
   185f0:	0002c01c 	.word	0x0002c01c
   185f4:	0002f0ab 	.word	0x0002f0ab

000185f8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   185f8:	4a08      	ldr	r2, [pc, #32]	; (1861c <bt_hci_driver_register+0x24>)
{
   185fa:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   185fc:	f8d2 0144 	ldr.w	r0, [r2, #324]	; 0x144
   18600:	b930      	cbnz	r0, 18610 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   18602:	68d9      	ldr	r1, [r3, #12]
   18604:	b139      	cbz	r1, 18616 <bt_hci_driver_register+0x1e>
   18606:	6919      	ldr	r1, [r3, #16]
   18608:	b129      	cbz	r1, 18616 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1860a:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
	return 0;
   1860e:	4770      	bx	lr
		return -EALREADY;
   18610:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18614:	4770      	bx	lr
		return -EINVAL;
   18616:	f06f 0015 	mvn.w	r0, #21
}
   1861a:	4770      	bx	lr
   1861c:	20008000 	.word	0x20008000

00018620 <bt_finalize_init>:
{
   18620:	b508      	push	{r3, lr}
   18622:	2102      	movs	r1, #2
   18624:	4803      	ldr	r0, [pc, #12]	; (18634 <bt_finalize_init+0x14>)
   18626:	f010 f8dc 	bl	287e2 <atomic_or>
}
   1862a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
   1862e:	2000      	movs	r0, #0
   18630:	f000 bc88 	b.w	18f44 <bt_le_scan_update>
   18634:	20008098 	.word	0x20008098

00018638 <init_work>:
{
   18638:	b510      	push	{r4, lr}
	err = bt_init();
   1863a:	f7f7 ff81 	bl	10540 <bt_init>
	if (ready_cb) {
   1863e:	4b03      	ldr	r3, [pc, #12]	; (1864c <init_work+0x14>)
   18640:	681b      	ldr	r3, [r3, #0]
   18642:	b113      	cbz	r3, 1864a <init_work+0x12>
}
   18644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   18648:	4718      	bx	r3
}
   1864a:	bd10      	pop	{r4, pc}
   1864c:	200097f8 	.word	0x200097f8

00018650 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   18650:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
   18654:	4d37      	ldr	r5, [pc, #220]	; (18734 <bt_enable+0xe4>)
{
   18656:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   18658:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
{
   1865c:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
   1865e:	b97b      	cbnz	r3, 18680 <bt_enable+0x30>
   18660:	4b35      	ldr	r3, [pc, #212]	; (18738 <bt_enable+0xe8>)
   18662:	4936      	ldr	r1, [pc, #216]	; (1873c <bt_enable+0xec>)
		BT_ERR("No HCI driver registered");
   18664:	4836      	ldr	r0, [pc, #216]	; (18740 <bt_enable+0xf0>)
   18666:	1ac9      	subs	r1, r1, r3
   18668:	08c9      	lsrs	r1, r1, #3
   1866a:	0189      	lsls	r1, r1, #6
   1866c:	f041 0101 	orr.w	r1, r1, #1
   18670:	f00e fb5e 	bl	26d30 <log_0>
		return -ENODEV;
   18674:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   18678:	4620      	mov	r0, r4
   1867a:	b008      	add	sp, #32
   1867c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   18680:	2101      	movs	r1, #1
   18682:	f105 0098 	add.w	r0, r5, #152	; 0x98
   18686:	f010 f8ac 	bl	287e2 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1868a:	07c3      	lsls	r3, r0, #31
   1868c:	d44f      	bmi.n	1872e <bt_enable+0xde>
		err = bt_settings_init();
   1868e:	f7fe fca3 	bl	16fd8 <bt_settings_init>
		if (err) {
   18692:	4604      	mov	r4, r0
   18694:	2800      	cmp	r0, #0
   18696:	d1ef      	bne.n	18678 <bt_enable+0x28>
	ready_cb = cb;
   18698:	4b2a      	ldr	r3, [pc, #168]	; (18744 <bt_enable+0xf4>)
   1869a:	f04f 0800 	mov.w	r8, #0
   1869e:	f04f 0900 	mov.w	r9, #0
   186a2:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   186a4:	f06f 0308 	mvn.w	r3, #8
   186a8:	e9cd 0000 	strd	r0, r0, [sp]
   186ac:	e9cd 0302 	strd	r0, r3, [sp, #8]
   186b0:	9004      	str	r0, [sp, #16]
   186b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   186b6:	e9cd 8906 	strd	r8, r9, [sp, #24]
   186ba:	4b23      	ldr	r3, [pc, #140]	; (18748 <bt_enable+0xf8>)
   186bc:	4923      	ldr	r1, [pc, #140]	; (1874c <bt_enable+0xfc>)
   186be:	4824      	ldr	r0, [pc, #144]	; (18750 <bt_enable+0x100>)
   186c0:	f00a faac 	bl	22c1c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   186c4:	4923      	ldr	r1, [pc, #140]	; (18754 <bt_enable+0x104>)
   186c6:	4822      	ldr	r0, [pc, #136]	; (18750 <bt_enable+0x100>)
   186c8:	f013 f94a 	bl	2b960 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   186cc:	f06f 0307 	mvn.w	r3, #7
   186d0:	f640 0298 	movw	r2, #2200	; 0x898
   186d4:	e9cd 4302 	strd	r4, r3, [sp, #8]
   186d8:	e9cd 8906 	strd	r8, r9, [sp, #24]
   186dc:	e9cd 4400 	strd	r4, r4, [sp]
   186e0:	4b1d      	ldr	r3, [pc, #116]	; (18758 <bt_enable+0x108>)
   186e2:	491e      	ldr	r1, [pc, #120]	; (1875c <bt_enable+0x10c>)
   186e4:	9404      	str	r4, [sp, #16]
   186e6:	481e      	ldr	r0, [pc, #120]	; (18760 <bt_enable+0x110>)
   186e8:	f00a fa98 	bl	22c1c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   186ec:	491d      	ldr	r1, [pc, #116]	; (18764 <bt_enable+0x114>)
   186ee:	481c      	ldr	r0, [pc, #112]	; (18760 <bt_enable+0x110>)
   186f0:	f013 f936 	bl	2b960 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   186f4:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   186f8:	68db      	ldr	r3, [r3, #12]
   186fa:	4798      	blx	r3
	if (err) {
   186fc:	4604      	mov	r4, r0
   186fe:	b158      	cbz	r0, 18718 <bt_enable+0xc8>
   18700:	4b0d      	ldr	r3, [pc, #52]	; (18738 <bt_enable+0xe8>)
   18702:	4a0e      	ldr	r2, [pc, #56]	; (1873c <bt_enable+0xec>)
		BT_ERR("HCI driver open failed (%d)", err);
   18704:	4601      	mov	r1, r0
   18706:	1ad2      	subs	r2, r2, r3
   18708:	08d2      	lsrs	r2, r2, #3
   1870a:	0192      	lsls	r2, r2, #6
   1870c:	4816      	ldr	r0, [pc, #88]	; (18768 <bt_enable+0x118>)
   1870e:	f042 0201 	orr.w	r2, r2, #1
   18712:	f00e fb1a 	bl	26d4a <log_1>
		return err;
   18716:	e7af      	b.n	18678 <bt_enable+0x28>
	if (!cb) {
   18718:	b926      	cbnz	r6, 18724 <bt_enable+0xd4>
}
   1871a:	b008      	add	sp, #32
   1871c:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
   18720:	f7f7 bf0e 	b.w	10540 <bt_init>
	k_work_submit(&bt_dev.init);
   18724:	f105 0088 	add.w	r0, r5, #136	; 0x88
   18728:	f00b fa18 	bl	23b5c <k_work_submit>
	return 0;
   1872c:	e7a4      	b.n	18678 <bt_enable+0x28>
		return -EALREADY;
   1872e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   18732:	e7a1      	b.n	18678 <bt_enable+0x28>
   18734:	20008000 	.word	0x20008000
   18738:	0002bfe4 	.word	0x0002bfe4
   1873c:	0002c01c 	.word	0x0002c01c
   18740:	0002f1b4 	.word	0x0002f1b4
   18744:	200097f8 	.word	0x200097f8
   18748:	00018365 	.word	0x00018365
   1874c:	2000bcc8 	.word	0x2000bcc8
   18750:	20008958 	.word	0x20008958
   18754:	0002f1cd 	.word	0x0002f1cd
   18758:	00017501 	.word	0x00017501
   1875c:	2000b430 	.word	0x2000b430
   18760:	200088d8 	.word	0x200088d8
   18764:	0002f1d3 	.word	0x0002f1d3
   18768:	0002f1d9 	.word	0x0002f1d9

0001876c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   1876c:	4800      	ldr	r0, [pc, #0]	; (18770 <bt_get_name+0x4>)
   1876e:	4770      	bx	lr
   18770:	0002f1f5 	.word	0x0002f1f5

00018774 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18774:	4b01      	ldr	r3, [pc, #4]	; (1877c <atomic_get.constprop.0+0x8>)
   18776:	e8d3 0faf 	lda	r0, [r3]
}
   1877a:	4770      	bx	lr
   1877c:	20008098 	.word	0x20008098

00018780 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   18780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18782:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   18784:	2500      	movs	r5, #0
   18786:	4f0a      	ldr	r7, [pc, #40]	; (187b0 <id_find+0x30>)
   18788:	79fb      	ldrb	r3, [r7, #7]
   1878a:	b2ec      	uxtb	r4, r5
   1878c:	42a3      	cmp	r3, r4
   1878e:	d802      	bhi.n	18796 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   18790:	f06f 0401 	mvn.w	r4, #1
   18794:	e009      	b.n	187aa <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   18796:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   1879a:	2207      	movs	r2, #7
   1879c:	4630      	mov	r0, r6
   1879e:	4439      	add	r1, r7
   187a0:	f00f fee7 	bl	28572 <memcmp>
   187a4:	3501      	adds	r5, #1
   187a6:	2800      	cmp	r0, #0
   187a8:	d1ee      	bne.n	18788 <id_find+0x8>
}
   187aa:	4620      	mov	r0, r4
   187ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   187ae:	bf00      	nop
   187b0:	20008000 	.word	0x20008000

000187b4 <set_random_address>:
{
   187b4:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   187b6:	2206      	movs	r2, #6
   187b8:	4913      	ldr	r1, [pc, #76]	; (18808 <set_random_address+0x54>)
   187ba:	4605      	mov	r5, r0
   187bc:	f00f fed9 	bl	28572 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   187c0:	4604      	mov	r4, r0
   187c2:	b1e0      	cbz	r0, 187fe <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   187c4:	2106      	movs	r1, #6
   187c6:	f242 0005 	movw	r0, #8197	; 0x2005
   187ca:	f7ff f8d7 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   187ce:	4604      	mov	r4, r0
   187d0:	b1b8      	cbz	r0, 18802 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   187d2:	2206      	movs	r2, #6
   187d4:	4629      	mov	r1, r5
   187d6:	3008      	adds	r0, #8
   187d8:	f011 ff49 	bl	2a66e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   187dc:	4621      	mov	r1, r4
   187de:	2200      	movs	r2, #0
   187e0:	f242 0005 	movw	r0, #8197	; 0x2005
   187e4:	f7ff f912 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
   187e8:	4604      	mov	r4, r0
   187ea:	b940      	cbnz	r0, 187fe <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   187ec:	2206      	movs	r2, #6
   187ee:	4629      	mov	r1, r5
   187f0:	4805      	ldr	r0, [pc, #20]	; (18808 <set_random_address+0x54>)
   187f2:	f00f fece 	bl	28592 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   187f6:	2201      	movs	r2, #1
   187f8:	4b04      	ldr	r3, [pc, #16]	; (1880c <set_random_address+0x58>)
   187fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
   187fe:	4620      	mov	r0, r4
   18800:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   18802:	f06f 0468 	mvn.w	r4, #104	; 0x68
   18806:	e7fa      	b.n	187fe <set_random_address+0x4a>
   18808:	2000802d 	.word	0x2000802d
   1880c:	20008000 	.word	0x20008000

00018810 <id_create.isra.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   18810:	b530      	push	{r4, r5, lr}
   18812:	4c17      	ldr	r4, [pc, #92]	; (18870 <id_create.isra.0+0x60>)
   18814:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   18818:	460d      	mov	r5, r1
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   1881a:	b085      	sub	sp, #20
   1881c:	4404      	add	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1881e:	b1a9      	cbz	r1, 1884c <id_create.isra.0+0x3c>
   18820:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   18822:	2207      	movs	r2, #7
   18824:	4628      	mov	r0, r5
   18826:	a902      	add	r1, sp, #8
   18828:	9302      	str	r3, [sp, #8]
   1882a:	f8cd 300b 	str.w	r3, [sp, #11]
   1882e:	f00f fea0 	bl	28572 <memcmp>
   18832:	b158      	cbz	r0, 1884c <id_create.isra.0+0x3c>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   18834:	4629      	mov	r1, r5
   18836:	4620      	mov	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   18838:	f010 f8b3 	bl	289a2 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1883c:	f7ff ff9a 	bl	18774 <atomic_get.constprop.0>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   18840:	0783      	lsls	r3, r0, #30
   18842:	d501      	bpl.n	18848 <id_create.isra.0+0x38>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   18844:	f7fe fb8a 	bl	16f5c <bt_settings_save_id>
	}
}
   18848:	b005      	add	sp, #20
   1884a:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
   1884c:	4668      	mov	r0, sp
   1884e:	f00f ff8d 	bl	2876c <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
   18852:	4668      	mov	r0, sp
   18854:	f7ff ff94 	bl	18780 <id_find>
   18858:	2800      	cmp	r0, #0
   1885a:	daf7      	bge.n	1884c <id_create.isra.0+0x3c>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1885c:	4669      	mov	r1, sp
   1885e:	4620      	mov	r0, r4
   18860:	f010 f89f 	bl	289a2 <bt_addr_le_copy>
		if (addr) {
   18864:	2d00      	cmp	r5, #0
   18866:	d0e9      	beq.n	1883c <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   18868:	4621      	mov	r1, r4
   1886a:	4628      	mov	r0, r5
   1886c:	e7e4      	b.n	18838 <id_create.isra.0+0x28>
   1886e:	bf00      	nop
   18870:	20008000 	.word	0x20008000

00018874 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18874:	4b08      	ldr	r3, [pc, #32]	; (18898 <bt_id_pending_keys_update+0x24>)
   18876:	e8d3 2fef 	ldaex	r2, [r3]
   1887a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   1887e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   18882:	2800      	cmp	r0, #0
   18884:	d1f7      	bne.n	18876 <bt_id_pending_keys_update+0x2>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   18886:	0493      	lsls	r3, r2, #18
   18888:	d504      	bpl.n	18894 <bt_id_pending_keys_update+0x20>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   1888a:	2200      	movs	r2, #0
   1888c:	2002      	movs	r0, #2
   1888e:	4903      	ldr	r1, [pc, #12]	; (1889c <bt_id_pending_keys_update+0x28>)
   18890:	f007 b8f6 	b.w	1fa80 <bt_keys_foreach>
}
   18894:	4770      	bx	lr
   18896:	bf00      	nop
   18898:	20008098 	.word	0x20008098
   1889c:	00028a73 	.word	0x00028a73

000188a0 <bt_id_add>:
{
   188a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   188a4:	4e5f      	ldr	r6, [pc, #380]	; (18a24 <bt_id_add+0x184>)
{
   188a6:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   188a8:	f896 20e8 	ldrb.w	r2, [r6, #232]	; 0xe8
   188ac:	4635      	mov	r5, r6
   188ae:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
   188b2:	b10a      	cbz	r2, 188b8 <bt_id_add+0x18>
   188b4:	429a      	cmp	r2, r3
   188b6:	d209      	bcs.n	188cc <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
   188b8:	3301      	adds	r3, #1
   188ba:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
   188be:	7a23      	ldrb	r3, [r4, #8]
   188c0:	f043 0304 	orr.w	r3, r3, #4
   188c4:	7223      	strb	r3, [r4, #8]
}
   188c6:	b002      	add	sp, #8
   188c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   188cc:	2100      	movs	r1, #0
   188ce:	2206      	movs	r2, #6
   188d0:	4608      	mov	r0, r1
   188d2:	f001 fbc5 	bl	1a060 <bt_conn_lookup_state_le>
	if (conn) {
   188d6:	4602      	mov	r2, r0
   188d8:	b178      	cbz	r0, 188fa <bt_id_add+0x5a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   188da:	3698      	adds	r6, #152	; 0x98
   188dc:	e8d6 3fef 	ldaex	r3, [r6]
   188e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   188e4:	e8c6 3fe2 	stlex	r2, r3, [r6]
   188e8:	2a00      	cmp	r2, #0
   188ea:	d1f7      	bne.n	188dc <bt_id_add+0x3c>
	keys->state |= flag;
   188ec:	7a23      	ldrb	r3, [r4, #8]
   188ee:	f043 0301 	orr.w	r3, r3, #1
   188f2:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   188f4:	f001 fa3a 	bl	19d6c <bt_conn_unref>
		return;
   188f8:	e7e5      	b.n	188c6 <bt_id_add+0x26>
   188fa:	f7ff ff3b 	bl	18774 <atomic_get.constprop.0>
	if (scan_enabled) {
   188fe:	0681      	lsls	r1, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   18900:	f3c0 1740 	ubfx	r7, r0, #5, #1
   18904:	d502      	bpl.n	1890c <bt_id_add+0x6c>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   18906:	4610      	mov	r0, r2
   18908:	f010 f8d0 	bl	28aac <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries) {
   1890c:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   18910:	b173      	cbz	r3, 18930 <bt_id_add+0x90>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   18912:	2000      	movs	r0, #0
   18914:	f010 f848 	bl	289a8 <addr_res_enable>
		if (err) {
   18918:	b150      	cbz	r0, 18930 <bt_id_add+0x90>
   1891a:	4943      	ldr	r1, [pc, #268]	; (18a28 <bt_id_add+0x188>)
   1891c:	4b43      	ldr	r3, [pc, #268]	; (18a2c <bt_id_add+0x18c>)
			BT_WARN("Failed to disable address resolution");
   1891e:	4844      	ldr	r0, [pc, #272]	; (18a30 <bt_id_add+0x190>)
   18920:	1ac9      	subs	r1, r1, r3
   18922:	08c9      	lsrs	r1, r1, #3
   18924:	0189      	lsls	r1, r1, #6
   18926:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
   1892a:	f00e fa01 	bl	26d30 <log_0>
	if (err) {
   1892e:	e023      	b.n	18978 <bt_id_add+0xd8>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   18930:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   18934:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   18938:	429a      	cmp	r2, r3
   1893a:	d126      	bne.n	1898a <bt_id_add+0xea>
   1893c:	4b3b      	ldr	r3, [pc, #236]	; (18a2c <bt_id_add+0x18c>)
   1893e:	4e3a      	ldr	r6, [pc, #232]	; (18a28 <bt_id_add+0x188>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
   18940:	483c      	ldr	r0, [pc, #240]	; (18a34 <bt_id_add+0x194>)
   18942:	1af6      	subs	r6, r6, r3
   18944:	08f6      	lsrs	r6, r6, #3
   18946:	01b6      	lsls	r6, r6, #6
   18948:	f046 0102 	orr.w	r1, r6, #2
   1894c:	f00e f9f0 	bl	26d30 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   18950:	2200      	movs	r2, #0
   18952:	f242 0029 	movw	r0, #8233	; 0x2029
   18956:	4611      	mov	r1, r2
   18958:	f7ff f858 	bl	17a0c <bt_hci_cmd_send_sync>
		if (err) {
   1895c:	b118      	cbz	r0, 18966 <bt_id_add+0xc6>
			BT_ERR("Failed to clear resolution list");
   1895e:	4836      	ldr	r0, [pc, #216]	; (18a38 <bt_id_add+0x198>)
   18960:	f046 0101 	orr.w	r1, r6, #1
   18964:	e7e1      	b.n	1892a <bt_id_add+0x8a>
		bt_dev.le.rl_entries++;
   18966:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   1896a:	3301      	adds	r3, #1
   1896c:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
   18970:	7a23      	ldrb	r3, [r4, #8]
   18972:	f043 0304 	orr.w	r3, r3, #4
   18976:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   18978:	2001      	movs	r0, #1
   1897a:	f010 f815 	bl	289a8 <addr_res_enable>
	if (scan_enabled) {
   1897e:	2f00      	cmp	r7, #0
   18980:	d0a1      	beq.n	188c6 <bt_id_add+0x26>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   18982:	2001      	movs	r0, #1
   18984:	f010 f892 	bl	28aac <bt_le_scan_set_enable>
   18988:	e79d      	b.n	188c6 <bt_id_add+0x26>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1898a:	f104 0801 	add.w	r8, r4, #1
   1898e:	4640      	mov	r0, r8
   18990:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   18994:	f010 f820 	bl	289d8 <hci_id_add.isra.0>
	if (err) {
   18998:	4606      	mov	r6, r0
   1899a:	b140      	cbz	r0, 189ae <bt_id_add+0x10e>
   1899c:	4922      	ldr	r1, [pc, #136]	; (18a28 <bt_id_add+0x188>)
   1899e:	4b23      	ldr	r3, [pc, #140]	; (18a2c <bt_id_add+0x18c>)
		BT_ERR("Failed to add IRK to controller");
   189a0:	4826      	ldr	r0, [pc, #152]	; (18a3c <bt_id_add+0x19c>)
   189a2:	1ac9      	subs	r1, r1, r3
   189a4:	08c9      	lsrs	r1, r1, #3
   189a6:	0189      	lsls	r1, r1, #6
   189a8:	f041 0101 	orr.w	r1, r1, #1
   189ac:	e7bd      	b.n	1892a <bt_id_add+0x8a>
	bt_dev.le.rl_entries++;
   189ae:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   189b2:	3301      	adds	r3, #1
   189b4:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state |= BT_KEYS_ID_ADDED;
   189b8:	7a23      	ldrb	r3, [r4, #8]
   189ba:	f043 0304 	orr.w	r3, r3, #4
   189be:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   189c0:	f895 306b 	ldrb.w	r3, [r5, #107]	; 0x6b
   189c4:	075b      	lsls	r3, r3, #29
   189c6:	d408      	bmi.n	189da <bt_id_add+0x13a>
   189c8:	4917      	ldr	r1, [pc, #92]	; (18a28 <bt_id_add+0x188>)
   189ca:	4b18      	ldr	r3, [pc, #96]	; (18a2c <bt_id_add+0x18c>)
		BT_WARN("Set privacy mode command is not supported");
   189cc:	481c      	ldr	r0, [pc, #112]	; (18a40 <bt_id_add+0x1a0>)
   189ce:	1ac9      	subs	r1, r1, r3
   189d0:	08c9      	lsrs	r1, r1, #3
   189d2:	0189      	lsls	r1, r1, #6
   189d4:	f041 0102 	orr.w	r1, r1, #2
   189d8:	e7a7      	b.n	1892a <bt_id_add+0x8a>
	bt_addr_le_copy(&cp.id_addr, addr);
   189da:	4641      	mov	r1, r8
   189dc:	4668      	mov	r0, sp
   189de:	f00f ffe0 	bl	289a2 <bt_addr_le_copy>
	cp.mode = mode;
   189e2:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   189e4:	2108      	movs	r1, #8
   189e6:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   189ea:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   189ee:	f7fe ffc5 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   189f2:	4604      	mov	r4, r0
   189f4:	b940      	cbnz	r0, 18a08 <bt_id_add+0x168>
   189f6:	490c      	ldr	r1, [pc, #48]	; (18a28 <bt_id_add+0x188>)
   189f8:	4b0c      	ldr	r3, [pc, #48]	; (18a2c <bt_id_add+0x18c>)
		BT_ERR("Failed to set privacy mode");
   189fa:	4812      	ldr	r0, [pc, #72]	; (18a44 <bt_id_add+0x1a4>)
   189fc:	1ac9      	subs	r1, r1, r3
   189fe:	08c9      	lsrs	r1, r1, #3
   18a00:	0189      	lsls	r1, r1, #6
   18a02:	f041 0101 	orr.w	r1, r1, #1
   18a06:	e790      	b.n	1892a <bt_id_add+0x8a>
   18a08:	2208      	movs	r2, #8
   18a0a:	4669      	mov	r1, sp
   18a0c:	4410      	add	r0, r2
   18a0e:	f011 fe2e 	bl	2a66e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   18a12:	4632      	mov	r2, r6
   18a14:	4621      	mov	r1, r4
   18a16:	f242 004e 	movw	r0, #8270	; 0x204e
   18a1a:	f7fe fff7 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
   18a1e:	2800      	cmp	r0, #0
   18a20:	d0aa      	beq.n	18978 <bt_id_add+0xd8>
   18a22:	e7e8      	b.n	189f6 <bt_id_add+0x156>
   18a24:	20008000 	.word	0x20008000
   18a28:	0002c034 	.word	0x0002c034
   18a2c:	0002bfe4 	.word	0x0002bfe4
   18a30:	0002f232 	.word	0x0002f232
   18a34:	0002f257 	.word	0x0002f257
   18a38:	0002f288 	.word	0x0002f288
   18a3c:	0002f2a8 	.word	0x0002f2a8
   18a40:	0002f2c8 	.word	0x0002f2c8
   18a44:	0002f2f2 	.word	0x0002f2f2

00018a48 <bt_id_del>:
{
   18a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
   18a4c:	4e48      	ldr	r6, [pc, #288]	; (18b70 <bt_id_del+0x128>)
{
   18a4e:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
   18a50:	f896 20e8 	ldrb.w	r2, [r6, #232]	; 0xe8
   18a54:	4635      	mov	r5, r6
   18a56:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
   18a5a:	b112      	cbz	r2, 18a62 <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   18a5c:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   18a5e:	4293      	cmp	r3, r2
   18a60:	dd08      	ble.n	18a74 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
   18a62:	3b01      	subs	r3, #1
   18a64:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
   18a68:	7a23      	ldrb	r3, [r4, #8]
   18a6a:	f023 0304 	bic.w	r3, r3, #4
   18a6e:	7223      	strb	r3, [r4, #8]
}
   18a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   18a74:	2100      	movs	r1, #0
   18a76:	2206      	movs	r2, #6
   18a78:	4608      	mov	r0, r1
   18a7a:	f001 faf1 	bl	1a060 <bt_conn_lookup_state_le>
	if (conn) {
   18a7e:	4602      	mov	r2, r0
   18a80:	b180      	cbz	r0, 18aa4 <bt_id_del+0x5c>
   18a82:	3698      	adds	r6, #152	; 0x98
   18a84:	e8d6 3fef 	ldaex	r3, [r6]
   18a88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   18a8c:	e8c6 3fe2 	stlex	r2, r3, [r6]
   18a90:	2a00      	cmp	r2, #0
   18a92:	d1f7      	bne.n	18a84 <bt_id_del+0x3c>
	keys->state |= flag;
   18a94:	7a23      	ldrb	r3, [r4, #8]
   18a96:	f043 0302 	orr.w	r3, r3, #2
   18a9a:	7223      	strb	r3, [r4, #8]
}
   18a9c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   18aa0:	f001 b964 	b.w	19d6c <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18aa4:	f7ff fe66 	bl	18774 <atomic_get.constprop.0>
	if (scan_enabled) {
   18aa8:	0683      	lsls	r3, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   18aaa:	f3c0 1640 	ubfx	r6, r0, #5, #1
   18aae:	d502      	bpl.n	18ab6 <bt_id_del+0x6e>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   18ab0:	4610      	mov	r0, r2
   18ab2:	f00f fffb 	bl	28aac <bt_le_scan_set_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   18ab6:	2000      	movs	r0, #0
   18ab8:	f00f ff76 	bl	289a8 <addr_res_enable>
	if (err) {
   18abc:	4607      	mov	r7, r0
   18abe:	b1b8      	cbz	r0, 18af0 <bt_id_del+0xa8>
   18ac0:	4a2c      	ldr	r2, [pc, #176]	; (18b74 <bt_id_del+0x12c>)
   18ac2:	4b2d      	ldr	r3, [pc, #180]	; (18b78 <bt_id_del+0x130>)
		BT_ERR("Disabling address resolution failed (err %d)", err);
   18ac4:	4601      	mov	r1, r0
   18ac6:	1ad2      	subs	r2, r2, r3
   18ac8:	08d2      	lsrs	r2, r2, #3
   18aca:	0192      	lsls	r2, r2, #6
   18acc:	482b      	ldr	r0, [pc, #172]	; (18b7c <bt_id_del+0x134>)
   18ace:	f042 0201 	orr.w	r2, r2, #1
   18ad2:	f00e f93a 	bl	26d4a <log_1>
	if (bt_dev.le.rl_entries) {
   18ad6:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   18ada:	b113      	cbz	r3, 18ae2 <bt_id_del+0x9a>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   18adc:	2001      	movs	r0, #1
   18ade:	f00f ff63 	bl	289a8 <addr_res_enable>
	if (scan_enabled) {
   18ae2:	2e00      	cmp	r6, #0
   18ae4:	d0c4      	beq.n	18a70 <bt_id_del+0x28>
}
   18ae6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   18aea:	2001      	movs	r0, #1
   18aec:	f00f bfde 	b.w	28aac <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   18af0:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   18af4:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   18af8:	429a      	cmp	r2, r3
   18afa:	d20c      	bcs.n	18b16 <bt_id_del+0xce>
		bt_dev.le.rl_entries--;
   18afc:	3b01      	subs	r3, #1
   18afe:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
   18b02:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   18b04:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   18b06:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   18b0a:	2002      	movs	r0, #2
   18b0c:	491c      	ldr	r1, [pc, #112]	; (18b80 <bt_id_del+0x138>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   18b0e:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   18b10:	f006 ffb6 	bl	1fa80 <bt_keys_foreach>
		goto done;
   18b14:	e7df      	b.n	18ad6 <bt_id_del+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   18b16:	2107      	movs	r1, #7
   18b18:	f242 0028 	movw	r0, #8232	; 0x2028
   18b1c:	f7fe ff2e 	bl	1797c <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   18b20:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
   18b24:	4680      	mov	r8, r0
   18b26:	b950      	cbnz	r0, 18b3e <bt_id_del+0xf6>
   18b28:	4b13      	ldr	r3, [pc, #76]	; (18b78 <bt_id_del+0x130>)
   18b2a:	4912      	ldr	r1, [pc, #72]	; (18b74 <bt_id_del+0x12c>)
		BT_ERR("Failed to remove IRK from controller");
   18b2c:	4815      	ldr	r0, [pc, #84]	; (18b84 <bt_id_del+0x13c>)
   18b2e:	1ac9      	subs	r1, r1, r3
   18b30:	08c9      	lsrs	r1, r1, #3
   18b32:	0189      	lsls	r1, r1, #6
   18b34:	f041 0101 	orr.w	r1, r1, #1
   18b38:	f00e f8fa 	bl	26d30 <log_0>
		goto done;
   18b3c:	e7cb      	b.n	18ad6 <bt_id_del+0x8e>
	return net_buf_simple_add(&buf->b, len);
   18b3e:	2107      	movs	r1, #7
   18b40:	3008      	adds	r0, #8
   18b42:	f007 fbe1 	bl	20308 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   18b46:	4649      	mov	r1, r9
   18b48:	f00f ff2b 	bl	289a2 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   18b4c:	463a      	mov	r2, r7
   18b4e:	4641      	mov	r1, r8
   18b50:	f242 0028 	movw	r0, #8232	; 0x2028
   18b54:	f7fe ff5a 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
   18b58:	2800      	cmp	r0, #0
   18b5a:	d1e5      	bne.n	18b28 <bt_id_del+0xe0>
	bt_dev.le.rl_entries--;
   18b5c:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   18b60:	3b01      	subs	r3, #1
   18b62:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state &= ~BT_KEYS_ID_ADDED;
   18b66:	7a23      	ldrb	r3, [r4, #8]
   18b68:	f023 0304 	bic.w	r3, r3, #4
   18b6c:	7223      	strb	r3, [r4, #8]
   18b6e:	e7b2      	b.n	18ad6 <bt_id_del+0x8e>
   18b70:	20008000 	.word	0x20008000
   18b74:	0002c034 	.word	0x0002c034
   18b78:	0002bfe4 	.word	0x0002bfe4
   18b7c:	0002f30d 	.word	0x0002f30d
   18b80:	00028a29 	.word	0x00028a29
   18b84:	0002f33a 	.word	0x0002f33a

00018b88 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   18b88:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18b8a:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   18b8c:	4605      	mov	r5, r0
   18b8e:	b918      	cbnz	r0, 18b98 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   18b90:	b34c      	cbz	r4, 18be6 <bt_id_create+0x5e>
		return -EINVAL;
   18b92:	f06f 0415 	mvn.w	r4, #21
   18b96:	e023      	b.n	18be0 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   18b98:	2300      	movs	r3, #0
   18b9a:	2207      	movs	r2, #7
   18b9c:	4669      	mov	r1, sp
   18b9e:	9300      	str	r3, [sp, #0]
   18ba0:	f8cd 3003 	str.w	r3, [sp, #3]
   18ba4:	f00f fce5 	bl	28572 <memcmp>
   18ba8:	2800      	cmp	r0, #0
   18baa:	d0f1      	beq.n	18b90 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   18bac:	782b      	ldrb	r3, [r5, #0]
   18bae:	2b01      	cmp	r3, #1
   18bb0:	d104      	bne.n	18bbc <bt_id_create+0x34>
   18bb2:	79ab      	ldrb	r3, [r5, #6]
   18bb4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18bb8:	2bc0      	cmp	r3, #192	; 0xc0
   18bba:	d00a      	beq.n	18bd2 <bt_id_create+0x4a>
   18bbc:	4b19      	ldr	r3, [pc, #100]	; (18c24 <bt_id_create+0x9c>)
   18bbe:	491a      	ldr	r1, [pc, #104]	; (18c28 <bt_id_create+0xa0>)
			BT_ERR("Only static random identity address supported");
   18bc0:	481a      	ldr	r0, [pc, #104]	; (18c2c <bt_id_create+0xa4>)
   18bc2:	1ac9      	subs	r1, r1, r3
   18bc4:	08c9      	lsrs	r1, r1, #3
   18bc6:	0189      	lsls	r1, r1, #6
   18bc8:	f041 0101 	orr.w	r1, r1, #1
   18bcc:	f00e f8b0 	bl	26d30 <log_0>
			return -EINVAL;
   18bd0:	e7df      	b.n	18b92 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   18bd2:	4628      	mov	r0, r5
   18bd4:	f7ff fdd4 	bl	18780 <id_find>
   18bd8:	2800      	cmp	r0, #0
   18bda:	dbd9      	blt.n	18b90 <bt_id_create+0x8>
			return -EALREADY;
   18bdc:	f06f 0477 	mvn.w	r4, #119	; 0x77

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
   18be0:	4620      	mov	r0, r4
   18be2:	b002      	add	sp, #8
   18be4:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   18be6:	4e12      	ldr	r6, [pc, #72]	; (18c30 <bt_id_create+0xa8>)
   18be8:	79f3      	ldrb	r3, [r6, #7]
   18bea:	2b01      	cmp	r3, #1
   18bec:	d017      	beq.n	18c1e <bt_id_create+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18bee:	f7ff fdc1 	bl	18774 <atomic_get.constprop.0>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   18bf2:	07c3      	lsls	r3, r0, #31
   18bf4:	d40b      	bmi.n	18c0e <bt_id_create+0x86>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   18bf6:	2d00      	cmp	r5, #0
   18bf8:	d0cb      	beq.n	18b92 <bt_id_create+0xa>
   18bfa:	2207      	movs	r2, #7
   18bfc:	4669      	mov	r1, sp
   18bfe:	4628      	mov	r0, r5
   18c00:	9400      	str	r4, [sp, #0]
   18c02:	f8cd 4003 	str.w	r4, [sp, #3]
   18c06:	f00f fcb4 	bl	28572 <memcmp>
   18c0a:	2800      	cmp	r0, #0
   18c0c:	d0c1      	beq.n	18b92 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   18c0e:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
   18c10:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   18c12:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
   18c14:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   18c16:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
   18c18:	f7ff fdfa 	bl	18810 <id_create.isra.0>
	return new_id;
   18c1c:	e7e0      	b.n	18be0 <bt_id_create+0x58>
		return -ENOMEM;
   18c1e:	f06f 040b 	mvn.w	r4, #11
   18c22:	e7dd      	b.n	18be0 <bt_id_create+0x58>
   18c24:	0002bfe4 	.word	0x0002bfe4
   18c28:	0002c034 	.word	0x0002c034
   18c2c:	0002f35f 	.word	0x0002f35f
   18c30:	20008000 	.word	0x20008000

00018c34 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   18c34:	b570      	push	{r4, r5, r6, lr}
   18c36:	b086      	sub	sp, #24
   18c38:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   18c3a:	2100      	movs	r1, #0
   18c3c:	f241 0009 	movw	r0, #4105	; 0x1009
   18c40:	aa01      	add	r2, sp, #4
   18c42:	f7fe fee3 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
   18c46:	4604      	mov	r4, r0
   18c48:	b160      	cbz	r0, 18c64 <bt_id_read_public_addr+0x30>
   18c4a:	491a      	ldr	r1, [pc, #104]	; (18cb4 <bt_id_read_public_addr+0x80>)
   18c4c:	4b1a      	ldr	r3, [pc, #104]	; (18cb8 <bt_id_read_public_addr+0x84>)
		BT_WARN("Failed to read public address");
   18c4e:	481b      	ldr	r0, [pc, #108]	; (18cbc <bt_id_read_public_addr+0x88>)
   18c50:	1ac9      	subs	r1, r1, r3
   18c52:	08c9      	lsrs	r1, r1, #3
   18c54:	0189      	lsls	r1, r1, #6
   18c56:	f041 0102 	orr.w	r1, r1, #2
   18c5a:	f00e f869 	bl	26d30 <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   18c5e:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   18c60:	b006      	add	sp, #24
   18c62:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   18c64:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   18c66:	9002      	str	r0, [sp, #8]
   18c68:	689d      	ldr	r5, [r3, #8]
	return memcmp(a, b, sizeof(*a));
   18c6a:	2206      	movs	r2, #6
   18c6c:	3501      	adds	r5, #1
   18c6e:	f8ad 000c 	strh.w	r0, [sp, #12]
   18c72:	a902      	add	r1, sp, #8
   18c74:	4628      	mov	r0, r5
   18c76:	f00f fc7c 	bl	28572 <memcmp>
   18c7a:	b918      	cbnz	r0, 18c84 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   18c7c:	9801      	ldr	r0, [sp, #4]
   18c7e:	f007 fa13 	bl	200a8 <net_buf_unref>
   18c82:	e7ec      	b.n	18c5e <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   18c84:	f04f 33ff 	mov.w	r3, #4294967295
   18c88:	2206      	movs	r2, #6
   18c8a:	4628      	mov	r0, r5
   18c8c:	a904      	add	r1, sp, #16
   18c8e:	9304      	str	r3, [sp, #16]
   18c90:	f8ad 3014 	strh.w	r3, [sp, #20]
   18c94:	f00f fc6d 	bl	28572 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   18c98:	2800      	cmp	r0, #0
   18c9a:	d0ef      	beq.n	18c7c <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   18c9c:	2206      	movs	r2, #6
   18c9e:	4629      	mov	r1, r5
   18ca0:	1c70      	adds	r0, r6, #1
   18ca2:	f00f fc76 	bl	28592 <memcpy>
	net_buf_unref(rsp);
   18ca6:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   18ca8:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   18caa:	f007 f9fd 	bl	200a8 <net_buf_unref>
	return 1U;
   18cae:	2001      	movs	r0, #1
   18cb0:	e7d6      	b.n	18c60 <bt_id_read_public_addr+0x2c>
   18cb2:	bf00      	nop
   18cb4:	0002c034 	.word	0x0002c034
   18cb8:	0002bfe4 	.word	0x0002bfe4
   18cbc:	0002f38d 	.word	0x0002f38d

00018cc0 <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
   18cc0:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   18cc2:	4668      	mov	r0, sp
   18cc4:	f7ff ffb6 	bl	18c34 <bt_id_read_public_addr>
   18cc8:	4b04      	ldr	r3, [pc, #16]	; (18cdc <bt_setup_public_id_addr+0x1c>)
   18cca:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   18ccc:	b118      	cbz	r0, 18cd6 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
   18cce:	4669      	mov	r1, sp
   18cd0:	2000      	movs	r0, #0
   18cd2:	f7ff fd9d 	bl	18810 <id_create.isra.0>
}
   18cd6:	b003      	add	sp, #12
   18cd8:	f85d fb04 	ldr.w	pc, [sp], #4
   18cdc:	20008000 	.word	0x20008000

00018ce0 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   18ce0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   18ce4:	4b25      	ldr	r3, [pc, #148]	; (18d7c <bt_read_static_addr+0x9c>)
{
   18ce6:	4607      	mov	r7, r0
   18ce8:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
   18cec:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   18cee:	f014 0401 	ands.w	r4, r4, #1
   18cf2:	d10a      	bne.n	18d0a <bt_read_static_addr+0x2a>
   18cf4:	4922      	ldr	r1, [pc, #136]	; (18d80 <bt_read_static_addr+0xa0>)
   18cf6:	4b23      	ldr	r3, [pc, #140]	; (18d84 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
   18cf8:	4823      	ldr	r0, [pc, #140]	; (18d88 <bt_read_static_addr+0xa8>)
   18cfa:	1ac9      	subs	r1, r1, r3
   18cfc:	08c9      	lsrs	r1, r1, #3
   18cfe:	0189      	lsls	r1, r1, #6
   18d00:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   18d04:	f00e f814 	bl	26d30 <log_0>
   18d08:	e012      	b.n	18d30 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   18d0a:	2100      	movs	r1, #0
   18d0c:	f64f 4009 	movw	r0, #64521	; 0xfc09
   18d10:	aa01      	add	r2, sp, #4
   18d12:	f7fe fe7b 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
   18d16:	4605      	mov	r5, r0
   18d18:	b170      	cbz	r0, 18d38 <bt_read_static_addr+0x58>
   18d1a:	4b1a      	ldr	r3, [pc, #104]	; (18d84 <bt_read_static_addr+0xa4>)
   18d1c:	4918      	ldr	r1, [pc, #96]	; (18d80 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
   18d1e:	481b      	ldr	r0, [pc, #108]	; (18d8c <bt_read_static_addr+0xac>)
   18d20:	1ac9      	subs	r1, r1, r3
   18d22:	08c9      	lsrs	r1, r1, #3
   18d24:	0189      	lsls	r1, r1, #6
   18d26:	f041 0102 	orr.w	r1, r1, #2
   18d2a:	f00e f801 	bl	26d30 <log_0>
		return 0;
   18d2e:	2400      	movs	r4, #0
	}

	return cnt;
}
   18d30:	4620      	mov	r0, r4
   18d32:	b002      	add	sp, #8
   18d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   18d38:	f04f 0816 	mov.w	r8, #22
	rp = (void *)rsp->data;
   18d3c:	9b01      	ldr	r3, [sp, #4]
   18d3e:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   18d40:	785c      	ldrb	r4, [r3, #1]
   18d42:	42b4      	cmp	r4, r6
   18d44:	bf28      	it	cs
   18d46:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   18d48:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   18d4a:	42a5      	cmp	r5, r4
   18d4c:	db0d      	blt.n	18d6a <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
   18d4e:	9801      	ldr	r0, [sp, #4]
   18d50:	f007 f9aa 	bl	200a8 <net_buf_unref>
	if (!cnt) {
   18d54:	2c00      	cmp	r4, #0
   18d56:	d1eb      	bne.n	18d30 <bt_read_static_addr+0x50>
   18d58:	4909      	ldr	r1, [pc, #36]	; (18d80 <bt_read_static_addr+0xa0>)
   18d5a:	4b0a      	ldr	r3, [pc, #40]	; (18d84 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
   18d5c:	480c      	ldr	r0, [pc, #48]	; (18d90 <bt_read_static_addr+0xb0>)
   18d5e:	1ac9      	subs	r1, r1, r3
   18d60:	08c9      	lsrs	r1, r1, #3
   18d62:	0189      	lsls	r1, r1, #6
   18d64:	f041 0102 	orr.w	r1, r1, #2
   18d68:	e7cc      	b.n	18d04 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   18d6a:	fb08 7005 	mla	r0, r8, r5, r7
   18d6e:	2216      	movs	r2, #22
   18d70:	4631      	mov	r1, r6
   18d72:	f00f fc0e 	bl	28592 <memcpy>
	for (i = 0; i < cnt; i++) {
   18d76:	3501      	adds	r5, #1
   18d78:	e7e7      	b.n	18d4a <bt_read_static_addr+0x6a>
   18d7a:	bf00      	nop
   18d7c:	20008000 	.word	0x20008000
   18d80:	0002c034 	.word	0x0002c034
   18d84:	0002bfe4 	.word	0x0002bfe4
   18d88:	0002f3ab 	.word	0x0002f3ab
   18d8c:	0002f3d7 	.word	0x0002f3d7
   18d90:	0002f3f7 	.word	0x0002f3f7

00018d94 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   18d94:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   18d96:	4d14      	ldr	r5, [pc, #80]	; (18de8 <bt_setup_random_id_addr+0x54>)
{
   18d98:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   18d9a:	79ec      	ldrb	r4, [r5, #7]
   18d9c:	b9f4      	cbnz	r4, 18ddc <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   18d9e:	2101      	movs	r1, #1
   18da0:	a802      	add	r0, sp, #8
   18da2:	f7ff ff9d 	bl	18ce0 <bt_read_static_addr>
   18da6:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   18da8:	b1c0      	cbz	r0, 18ddc <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   18daa:	2716      	movs	r7, #22
   18dac:	e00f      	b.n	18dce <bt_setup_random_id_addr+0x3a>
   18dae:	ab02      	add	r3, sp, #8
   18db0:	fb07 3106 	mla	r1, r7, r6, r3
   18db4:	2206      	movs	r2, #6
   18db6:	f10d 0001 	add.w	r0, sp, #1
   18dba:	f00f fbea 	bl	28592 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   18dbe:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
   18dc0:	4669      	mov	r1, sp
   18dc2:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   18dc4:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
   18dc8:	f7ff fd22 	bl	18810 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   18dcc:	3401      	adds	r4, #1
   18dce:	79eb      	ldrb	r3, [r5, #7]
   18dd0:	b2e6      	uxtb	r6, r4
   18dd2:	42b3      	cmp	r3, r6
   18dd4:	d8eb      	bhi.n	18dae <bt_setup_random_id_addr+0x1a>
			}

			return 0;
   18dd6:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   18dd8:	b009      	add	sp, #36	; 0x24
   18dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   18ddc:	2100      	movs	r1, #0
   18dde:	4608      	mov	r0, r1
   18de0:	f7ff fed2 	bl	18b88 <bt_id_create>
   18de4:	e7f8      	b.n	18dd8 <bt_setup_random_id_addr+0x44>
   18de6:	bf00      	nop
   18de8:	20008000 	.word	0x20008000

00018dec <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   18dec:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   18dee:	4c07      	ldr	r4, [pc, #28]	; (18e0c <bt_id_set_create_conn_own_addr+0x20>)
{
   18df0:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
   18df2:	7823      	ldrb	r3, [r4, #0]
   18df4:	2b01      	cmp	r3, #1
   18df6:	d003      	beq.n	18e00 <bt_id_set_create_conn_own_addr+0x14>
		}

		*own_addr_type = addr->type;
	}

	return 0;
   18df8:	2000      	movs	r0, #0
		*own_addr_type = addr->type;
   18dfa:	7823      	ldrb	r3, [r4, #0]
   18dfc:	702b      	strb	r3, [r5, #0]
}
   18dfe:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
   18e00:	1c60      	adds	r0, r4, #1
   18e02:	f7ff fcd7 	bl	187b4 <set_random_address>
			if (err) {
   18e06:	2800      	cmp	r0, #0
   18e08:	d0f6      	beq.n	18df8 <bt_id_set_create_conn_own_addr+0xc>
   18e0a:	e7f8      	b.n	18dfe <bt_id_set_create_conn_own_addr+0x12>
   18e0c:	20008000 	.word	0x20008000

00018e10 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   18e10:	b510      	push	{r4, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   18e12:	4b05      	ldr	r3, [pc, #20]	; (18e28 <bt_id_set_scan_own_addr+0x18>)
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   18e14:	2000      	movs	r0, #0
		*own_addr_type = bt_dev.id_addr[0].type;
   18e16:	781b      	ldrb	r3, [r3, #0]
{
   18e18:	460c      	mov	r4, r1
		*own_addr_type = bt_dev.id_addr[0].type;
   18e1a:	700b      	strb	r3, [r1, #0]
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   18e1c:	f00f fe15 	bl	28a4a <bt_id_set_private_addr>
			if (err) {
   18e20:	b908      	cbnz	r0, 18e26 <bt_id_set_scan_own_addr+0x16>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   18e22:	2301      	movs	r3, #1
   18e24:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return 0;
}
   18e26:	bd10      	pop	{r4, pc}
   18e28:	20008000 	.word	0x20008000

00018e2c <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18e2c:	4b01      	ldr	r3, [pc, #4]	; (18e34 <atomic_get.constprop.0+0x8>)
   18e2e:	e8d3 0faf 	lda	r0, [r3]
}
   18e32:	4770      	bx	lr
   18e34:	20008098 	.word	0x20008098

00018e38 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   18e38:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   18e3a:	2102      	movs	r1, #2
{
   18e3c:	4604      	mov	r4, r0
   18e3e:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   18e40:	f242 000c 	movw	r0, #8204	; 0x200c
   18e44:	f7fe fd9a 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   18e48:	4605      	mov	r5, r0
   18e4a:	b308      	cbz	r0, 18e90 <bt_le_scan_set_enable_legacy+0x58>
   18e4c:	2102      	movs	r1, #2
   18e4e:	3008      	adds	r0, #8
   18e50:	f007 fa5a 	bl	20308 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   18e54:	2c01      	cmp	r4, #1
   18e56:	4602      	mov	r2, r0
   18e58:	d117      	bne.n	18e8a <bt_le_scan_set_enable_legacy+0x52>
   18e5a:	f7ff ffe7 	bl	18e2c <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   18e5e:	f3c0 2000 	ubfx	r0, r0, #8, #1
   18e62:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   18e64:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   18e66:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   18e68:	425c      	negs	r4, r3
   18e6a:	415c      	adcs	r4, r3
   18e6c:	4628      	mov	r0, r5
   18e6e:	4a0a      	ldr	r2, [pc, #40]	; (18e98 <bt_le_scan_set_enable_legacy+0x60>)
   18e70:	a903      	add	r1, sp, #12
   18e72:	2305      	movs	r3, #5
   18e74:	9400      	str	r4, [sp, #0]
   18e76:	f7fe fd6f 	bl	17958 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   18e7a:	2200      	movs	r2, #0
   18e7c:	4629      	mov	r1, r5
   18e7e:	f242 000c 	movw	r0, #8204	; 0x200c
   18e82:	f7fe fdc3 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   18e86:	b007      	add	sp, #28
   18e88:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   18e8a:	2300      	movs	r3, #0
   18e8c:	7043      	strb	r3, [r0, #1]
   18e8e:	e7e9      	b.n	18e64 <bt_le_scan_set_enable_legacy+0x2c>
		return -ENOBUFS;
   18e90:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18e94:	e7f7      	b.n	18e86 <bt_le_scan_set_enable_legacy+0x4e>
   18e96:	bf00      	nop
   18e98:	20008098 	.word	0x20008098

00018e9c <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   18e9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18e9e:	4605      	mov	r5, r0
   18ea0:	4614      	mov	r4, r2
   18ea2:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   18ea4:	2207      	movs	r2, #7
   18ea6:	2100      	movs	r1, #0
   18ea8:	4668      	mov	r0, sp
   18eaa:	f00f fb9d 	bl	285e8 <memset>

	if (IS_ENABLED(CONFIG_BT_WHITELIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_WL)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_USE_WHITELIST;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
   18eae:	2300      	movs	r3, #0
   18eb0:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   18eb4:	1e6b      	subs	r3, r5, #1
   18eb6:	4258      	negs	r0, r3
   18eb8:	f10d 0105 	add.w	r1, sp, #5
   18ebc:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
   18ebe:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
   18ec2:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
   18ec6:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   18eca:	f7ff ffa1 	bl	18e10 <bt_id_set_scan_own_addr>
	if (err) {
   18ece:	4604      	mov	r4, r0
   18ed0:	bb18      	cbnz	r0, 18f1a <start_le_scan_legacy+0x7e>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   18ed2:	2107      	movs	r1, #7
   18ed4:	f242 000b 	movw	r0, #8203	; 0x200b
   18ed8:	f7fe fd50 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   18edc:	4606      	mov	r6, r0
   18ede:	b328      	cbz	r0, 18f2c <start_le_scan_legacy+0x90>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18ee0:	2207      	movs	r2, #7
   18ee2:	4669      	mov	r1, sp
   18ee4:	3008      	adds	r0, #8
   18ee6:	f011 fbc2 	bl	2a66e <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   18eea:	4622      	mov	r2, r4
   18eec:	4631      	mov	r1, r6
   18eee:	f242 000b 	movw	r0, #8203	; 0x200b
   18ef2:	f7fe fd8b 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
   18ef6:	4604      	mov	r4, r0
   18ef8:	b978      	cbnz	r0, 18f1a <start_le_scan_legacy+0x7e>
	return bt_le_scan_set_enable_legacy(enable);
   18efa:	2001      	movs	r0, #1
   18efc:	f7ff ff9c 	bl	18e38 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   18f00:	4604      	mov	r4, r0
   18f02:	b950      	cbnz	r0, 18f1a <start_le_scan_legacy+0x7e>
	if (val) {
   18f04:	2d01      	cmp	r5, #1
   18f06:	d10b      	bne.n	18f20 <start_le_scan_legacy+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18f08:	4b0a      	ldr	r3, [pc, #40]	; (18f34 <start_le_scan_legacy+0x98>)
   18f0a:	e8d3 2fef 	ldaex	r2, [r3]
   18f0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   18f12:	e8c3 2fe1 	stlex	r1, r2, [r3]
   18f16:	2900      	cmp	r1, #0
   18f18:	d1f7      	bne.n	18f0a <start_le_scan_legacy+0x6e>
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   18f1a:	4620      	mov	r0, r4
   18f1c:	b002      	add	sp, #8
   18f1e:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18f20:	f06f 0180 	mvn.w	r1, #128	; 0x80
   18f24:	4803      	ldr	r0, [pc, #12]	; (18f34 <start_le_scan_legacy+0x98>)
   18f26:	f00f fdb6 	bl	28a96 <atomic_and>
   18f2a:	e7f6      	b.n	18f1a <start_le_scan_legacy+0x7e>
		return -ENOBUFS;
   18f2c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   18f30:	e7f3      	b.n	18f1a <start_le_scan_legacy+0x7e>
   18f32:	bf00      	nop
   18f34:	20008098 	.word	0x20008098

00018f38 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   18f38:	2200      	movs	r2, #0
   18f3a:	4b01      	ldr	r3, [pc, #4]	; (18f40 <bt_scan_reset+0x8>)
   18f3c:	601a      	str	r2, [r3, #0]
}
   18f3e:	4770      	bx	lr
   18f40:	20009804 	.word	0x20009804

00018f44 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   18f44:	b538      	push	{r3, r4, r5, lr}
   18f46:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18f48:	f7ff ff70 	bl	18e2c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   18f4c:	0641      	lsls	r1, r0, #25
   18f4e:	f3c0 1280 	ubfx	r2, r0, #6, #1
   18f52:	d501      	bpl.n	18f58 <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
   18f54:	2000      	movs	r0, #0
   18f56:	e02c      	b.n	18fb2 <bt_le_scan_update+0x6e>
   18f58:	f7ff ff68 	bl	18e2c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   18f5c:	0683      	lsls	r3, r0, #26
   18f5e:	d423      	bmi.n	18fa8 <bt_le_scan_update+0x64>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   18f60:	2100      	movs	r1, #0
   18f62:	2206      	movs	r2, #6
   18f64:	4608      	mov	r0, r1
   18f66:	f001 f87b 	bl	1a060 <bt_conn_lookup_state_le>
		if (conn) {
   18f6a:	4604      	mov	r4, r0
   18f6c:	bb10      	cbnz	r0, 18fb4 <bt_le_scan_update+0x70>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   18f6e:	2202      	movs	r2, #2
   18f70:	4601      	mov	r1, r0
   18f72:	f001 f875 	bl	1a060 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
   18f76:	2800      	cmp	r0, #0
   18f78:	d0ec      	beq.n	18f54 <bt_le_scan_update+0x10>
   18f7a:	4b10      	ldr	r3, [pc, #64]	; (18fbc <bt_le_scan_update+0x78>)
   18f7c:	e8d3 2fef 	ldaex	r2, [r3]
   18f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   18f84:	e8c3 2fe1 	stlex	r1, r2, [r3]
   18f88:	2900      	cmp	r1, #0
   18f8a:	d1f7      	bne.n	18f7c <bt_le_scan_update+0x38>
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   18f8c:	f000 feee 	bl	19d6c <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   18f90:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   18f92:	4620      	mov	r0, r4
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   18f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   18f98:	bf15      	itete	ne
   18f9a:	2230      	movne	r2, #48	; 0x30
   18f9c:	2212      	moveq	r2, #18
   18f9e:	2160      	movne	r1, #96	; 0x60
   18fa0:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   18fa4:	f7ff bf7a 	b.w	18e9c <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   18fa8:	4610      	mov	r0, r2
   18faa:	f7ff ff45 	bl	18e38 <bt_le_scan_set_enable_legacy>
		if (err) {
   18fae:	2800      	cmp	r0, #0
   18fb0:	d0d6      	beq.n	18f60 <bt_le_scan_update+0x1c>
}
   18fb2:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
   18fb4:	f000 feda 	bl	19d6c <bt_conn_unref>
   18fb8:	e7cc      	b.n	18f54 <bt_le_scan_update+0x10>
   18fba:	bf00      	nop
   18fbc:	20008098 	.word	0x20008098

00018fc0 <bt_data_parse>:

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   18fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18fc2:	4604      	mov	r4, r0
   18fc4:	460e      	mov	r6, r1
   18fc6:	4617      	mov	r7, r2
	while (ad->len > 1) {
   18fc8:	88a3      	ldrh	r3, [r4, #4]
   18fca:	2b01      	cmp	r3, #1
   18fcc:	d912      	bls.n	18ff4 <bt_data_parse+0x34>
		struct bt_data data;
		uint8_t len;

		len = net_buf_simple_pull_u8(ad);
   18fce:	4620      	mov	r0, r4
   18fd0:	f011 fb31 	bl	2a636 <net_buf_simple_pull_u8>
		if (len == 0U) {
   18fd4:	4605      	mov	r5, r0
   18fd6:	b168      	cbz	r0, 18ff4 <bt_data_parse+0x34>
			/* Early termination */
			return;
		}

		if (len > ad->len) {
   18fd8:	88a2      	ldrh	r2, [r4, #4]
   18fda:	b283      	uxth	r3, r0
   18fdc:	429a      	cmp	r2, r3
   18fde:	d20b      	bcs.n	18ff8 <bt_data_parse+0x38>
   18fe0:	490f      	ldr	r1, [pc, #60]	; (19020 <bt_data_parse+0x60>)
   18fe2:	4b10      	ldr	r3, [pc, #64]	; (19024 <bt_data_parse+0x64>)
			BT_WARN("Malformed data");
   18fe4:	4810      	ldr	r0, [pc, #64]	; (19028 <bt_data_parse+0x68>)
   18fe6:	1ac9      	subs	r1, r1, r3
   18fe8:	08c9      	lsrs	r1, r1, #3
   18fea:	0189      	lsls	r1, r1, #6
   18fec:	f041 0102 	orr.w	r1, r1, #2
   18ff0:	f00d fe9e 	bl	26d30 <log_0>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   18ff4:	b003      	add	sp, #12
   18ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data.type = net_buf_simple_pull_u8(ad);
   18ff8:	4620      	mov	r0, r4
   18ffa:	f011 fb1c 	bl	2a636 <net_buf_simple_pull_u8>
		data.data = ad->data;
   18ffe:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
   19000:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
   19004:	3d01      	subs	r5, #1
		if (!func(&data, user_data)) {
   19006:	4639      	mov	r1, r7
   19008:	4668      	mov	r0, sp
		data.data_len = len - 1;
   1900a:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
   1900e:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
   19010:	47b0      	blx	r6
   19012:	2800      	cmp	r0, #0
   19014:	d0ee      	beq.n	18ff4 <bt_data_parse+0x34>
		net_buf_simple_pull(ad, len - 1);
   19016:	4629      	mov	r1, r5
   19018:	4620      	mov	r0, r4
   1901a:	f007 f933 	bl	20284 <net_buf_simple_pull>
   1901e:	e7d3      	b.n	18fc8 <bt_data_parse+0x8>
   19020:	0002c054 	.word	0x0002c054
   19024:	0002bfe4 	.word	0x0002bfe4
   19028:	0002f426 	.word	0x0002f426

0001902c <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   1902c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   19030:	f100 0708 	add.w	r7, r0, #8
   19034:	b08d      	sub	sp, #52	; 0x34
   19036:	4604      	mov	r4, r0
   19038:	4638      	mov	r0, r7
   1903a:	f011 fafc 	bl	2a636 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   1903e:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 1922c <bt_hci_le_adv_report+0x200>
   19042:	9001      	str	r0, [sp, #4]
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   19044:	9b01      	ldr	r3, [sp, #4]
   19046:	b163      	cbz	r3, 19062 <bt_hci_le_adv_report+0x36>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
   19048:	89a3      	ldrh	r3, [r4, #12]
   1904a:	2b08      	cmp	r3, #8
   1904c:	d80c      	bhi.n	19068 <bt_hci_le_adv_report+0x3c>
   1904e:	4972      	ldr	r1, [pc, #456]	; (19218 <bt_hci_le_adv_report+0x1ec>)
   19050:	4b72      	ldr	r3, [pc, #456]	; (1921c <bt_hci_le_adv_report+0x1f0>)
			BT_ERR("Unexpected end of buffer");
   19052:	4873      	ldr	r0, [pc, #460]	; (19220 <bt_hci_le_adv_report+0x1f4>)
   19054:	1ac9      	subs	r1, r1, r3
   19056:	08c9      	lsrs	r1, r1, #3
   19058:	0189      	lsls	r1, r1, #6
   1905a:	f041 0101 	orr.w	r1, r1, #1
   1905e:	f00d fe67 	bl	26d30 <log_0>

		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   19062:	b00d      	add	sp, #52	; 0x34
   19064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19068:	2109      	movs	r1, #9
   1906a:	4638      	mov	r0, r7
   1906c:	f007 f92a 	bl	202c4 <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   19070:	237f      	movs	r3, #127	; 0x7f
		adv_info.rssi = evt->data[evt->length];
   19072:	f890 9008 	ldrb.w	r9, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   19076:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
   1907a:	eb00 0309 	add.w	r3, r0, r9
   1907e:	7a5b      	ldrb	r3, [r3, #9]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   19080:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
   19082:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
   19086:	23ff      	movs	r3, #255	; 0xff
   19088:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
   1908c:	2300      	movs	r3, #0
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   1908e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.interval = 0U;
   19092:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.adv_type = evt->evt_type;
   19096:	7802      	ldrb	r2, [r0, #0]
   19098:	4606      	mov	r6, r0
   1909a:	2a04      	cmp	r2, #4
   1909c:	bf98      	it	ls
   1909e:	4b61      	ldrls	r3, [pc, #388]	; (19224 <bt_hci_le_adv_report+0x1f8>)
   190a0:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
	switch (evt_type) {
   190a4:	bf98      	it	ls
   190a6:	5c9b      	ldrbls	r3, [r3, r2]
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
   190a8:	f100 0801 	add.w	r8, r0, #1
		adv_info.adv_props = get_adv_props(evt->evt_type);
   190ac:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   190b0:	f7ff febc 	bl	18e2c <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   190b4:	0645      	lsls	r5, r0, #25
   190b6:	d50d      	bpl.n	190d4 <bt_hci_le_adv_report+0xa8>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   190b8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   190bc:	0758      	lsls	r0, r3, #29
   190be:	d509      	bpl.n	190d4 <bt_hci_le_adv_report+0xa8>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   190c0:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
   190c2:	4638      	mov	r0, r7
   190c4:	3101      	adds	r1, #1
   190c6:	f007 f8dd 	bl	20284 <net_buf_simple_pull>
   190ca:	9b01      	ldr	r3, [sp, #4]
   190cc:	1e58      	subs	r0, r3, #1
   190ce:	b2c3      	uxtb	r3, r0
   190d0:	9301      	str	r3, [sp, #4]
   190d2:	e7b7      	b.n	19044 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   190d4:	7873      	ldrb	r3, [r6, #1]
   190d6:	1e9a      	subs	r2, r3, #2
   190d8:	2a01      	cmp	r2, #1
   190da:	d84f      	bhi.n	1917c <bt_hci_le_adv_report+0x150>
	memcpy(dst, src, sizeof(*dst));
   190dc:	2207      	movs	r2, #7
   190de:	4641      	mov	r1, r8
   190e0:	a804      	add	r0, sp, #16
   190e2:	f00f fa56 	bl	28592 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   190e6:	f89d 3010 	ldrb.w	r3, [sp, #16]
   190ea:	3b02      	subs	r3, #2
   190ec:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
   190f0:	ab04      	add	r3, sp, #16
   190f2:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
   190f4:	f8da 3000 	ldr.w	r3, [sl]
   190f8:	b1b3      	cbz	r3, 19128 <bt_hci_le_adv_report+0xfc>
	state->offset = net_buf_simple_headroom(buf);
   190fa:	4638      	mov	r0, r7
   190fc:	f011 faab 	bl	2a656 <net_buf_simple_headroom>
   19100:	4683      	mov	fp, r0
	state->len = buf->len;
   19102:	89a3      	ldrh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
   19104:	a804      	add	r0, sp, #16
   19106:	9302      	str	r3, [sp, #8]
   19108:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   1910c:	463b      	mov	r3, r7
   1910e:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
   19112:	f8da 5000 	ldr.w	r5, [sl]
		buf->len = len;
   19116:	f8a4 900c 	strh.w	r9, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
   1911a:	47a8      	blx	r5
	buf->data = buf->__buf + state->offset;
   1911c:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1911e:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
   19120:	fa10 f08b 	uxtah	r0, r0, fp
   19124:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
   19126:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   19128:	4b3f      	ldr	r3, [pc, #252]	; (19228 <bt_hci_le_adv_report+0x1fc>)
   1912a:	681b      	ldr	r3, [r3, #0]
   1912c:	2b00      	cmp	r3, #0
   1912e:	d038      	beq.n	191a2 <bt_hci_le_adv_report+0x176>
   19130:	f1b3 0208 	subs.w	r2, r3, #8
   19134:	d035      	beq.n	191a2 <bt_hci_le_adv_report+0x176>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19136:	681d      	ldr	r5, [r3, #0]
   19138:	b105      	cbz	r5, 1913c <bt_hci_le_adv_report+0x110>
   1913a:	3d08      	subs	r5, #8
		if (listener->recv) {
   1913c:	6813      	ldr	r3, [r2, #0]
   1913e:	9203      	str	r2, [sp, #12]
   19140:	b193      	cbz	r3, 19168 <bt_hci_le_adv_report+0x13c>
	state->offset = net_buf_simple_headroom(buf);
   19142:	4638      	mov	r0, r7
   19144:	f011 fa87 	bl	2a656 <net_buf_simple_headroom>
   19148:	4683      	mov	fp, r0
			listener->recv(info, &buf->b);
   1914a:	9a03      	ldr	r2, [sp, #12]
	state->len = buf->len;
   1914c:	89a3      	ldrh	r3, [r4, #12]
   1914e:	a808      	add	r0, sp, #32
   19150:	4639      	mov	r1, r7
   19152:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
   19154:	f8a4 900c 	strh.w	r9, [r4, #12]
   19158:	9302      	str	r3, [sp, #8]
			listener->recv(info, &buf->b);
   1915a:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   1915c:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1915e:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
   19160:	fa10 f08b 	uxtah	r0, r0, fp
   19164:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
   19166:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   19168:	b1dd      	cbz	r5, 191a2 <bt_hci_le_adv_report+0x176>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1916a:	f115 0308 	adds.w	r3, r5, #8
   1916e:	d002      	beq.n	19176 <bt_hci_le_adv_report+0x14a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19170:	68ab      	ldr	r3, [r5, #8]
   19172:	b103      	cbz	r3, 19176 <bt_hci_le_adv_report+0x14a>
   19174:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
   19176:	462a      	mov	r2, r5
   19178:	461d      	mov	r5, r3
   1917a:	e7df      	b.n	1913c <bt_hci_le_adv_report+0x110>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   1917c:	2bff      	cmp	r3, #255	; 0xff
   1917e:	d109      	bne.n	19194 <bt_hci_le_adv_report+0x168>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   19180:	2300      	movs	r3, #0
   19182:	2207      	movs	r2, #7
   19184:	9306      	str	r3, [sp, #24]
   19186:	a906      	add	r1, sp, #24
   19188:	f8cd 301b 	str.w	r3, [sp, #27]
   1918c:	a804      	add	r0, sp, #16
   1918e:	f00f fa00 	bl	28592 <memcpy>
}
   19192:	e7ad      	b.n	190f0 <bt_hci_le_adv_report+0xc4>
		bt_addr_le_copy(&id_addr,
   19194:	4641      	mov	r1, r8
   19196:	2000      	movs	r0, #0
   19198:	f00f fc4f 	bl	28a3a <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   1919c:	2207      	movs	r2, #7
   1919e:	4601      	mov	r1, r0
   191a0:	e7f4      	b.n	1918c <bt_hci_le_adv_report+0x160>
	check_pending_conn(&id_addr, addr, info->adv_props);
   191a2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   191a6:	f7ff fe41 	bl	18e2c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   191aa:	0641      	lsls	r1, r0, #25
   191ac:	f3c0 1980 	ubfx	r9, r0, #6, #1
   191b0:	d486      	bmi.n	190c0 <bt_hci_le_adv_report+0x94>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   191b2:	07d2      	lsls	r2, r2, #31
   191b4:	d584      	bpl.n	190c0 <bt_hci_le_adv_report+0x94>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   191b6:	2202      	movs	r2, #2
   191b8:	4648      	mov	r0, r9
   191ba:	a904      	add	r1, sp, #16
   191bc:	f000 ff50 	bl	1a060 <bt_conn_lookup_state_le>
	if (!conn) {
   191c0:	4605      	mov	r5, r0
   191c2:	2800      	cmp	r0, #0
   191c4:	f43f af7c 	beq.w	190c0 <bt_hci_le_adv_report+0x94>
   191c8:	f7ff fe30 	bl	18e2c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   191cc:	0683      	lsls	r3, r0, #26
   191ce:	d411      	bmi.n	191f4 <bt_hci_le_adv_report+0x1c8>
   191d0:	2207      	movs	r2, #7
   191d2:	4641      	mov	r1, r8
   191d4:	f105 009e 	add.w	r0, r5, #158	; 0x9e
   191d8:	f00f f9db 	bl	28592 <memcpy>
	if (bt_le_create_conn(conn)) {
   191dc:	4628      	mov	r0, r5
   191de:	f00f fb1b 	bl	28818 <bt_le_create_conn>
   191e2:	b960      	cbnz	r0, 191fe <bt_hci_le_adv_report+0x1d2>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   191e4:	4628      	mov	r0, r5
   191e6:	2106      	movs	r1, #6
   191e8:	f000 fdf2 	bl	19dd0 <bt_conn_set_state>
	bt_conn_unref(conn);
   191ec:	4628      	mov	r0, r5
   191ee:	f000 fdbd 	bl	19d6c <bt_conn_unref>
	return;
   191f2:	e765      	b.n	190c0 <bt_hci_le_adv_report+0x94>
	return bt_le_scan_set_enable_legacy(enable);
   191f4:	4648      	mov	r0, r9
   191f6:	f7ff fe1f 	bl	18e38 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   191fa:	2800      	cmp	r0, #0
   191fc:	d0e8      	beq.n	191d0 <bt_hci_le_adv_report+0x1a4>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   191fe:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19200:	2100      	movs	r1, #0
   19202:	4628      	mov	r0, r5
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   19204:	732b      	strb	r3, [r5, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19206:	f000 fde3 	bl	19dd0 <bt_conn_set_state>
	bt_conn_unref(conn);
   1920a:	4628      	mov	r0, r5
   1920c:	f000 fdae 	bl	19d6c <bt_conn_unref>
	bt_le_scan_update(false);
   19210:	2000      	movs	r0, #0
   19212:	f7ff fe97 	bl	18f44 <bt_le_scan_update>
   19216:	e753      	b.n	190c0 <bt_hci_le_adv_report+0x94>
   19218:	0002c054 	.word	0x0002c054
   1921c:	0002bfe4 	.word	0x0002bfe4
   19220:	0002f435 	.word	0x0002f435
   19224:	0002f44e 	.word	0x0002f44e
   19228:	200097fc 	.word	0x200097fc
   1922c:	20009804 	.word	0x20009804

00019230 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   19230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19234:	4605      	mov	r5, r0
   19236:	460f      	mov	r7, r1
   19238:	f7ff fdf8 	bl	18e2c <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1923c:	0780      	lsls	r0, r0, #30
   1923e:	d567      	bpl.n	19310 <bt_le_scan_start+0xe0>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   19240:	782a      	ldrb	r2, [r5, #0]
   19242:	2a01      	cmp	r2, #1
   19244:	d904      	bls.n	19250 <bt_le_scan_start+0x20>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   19246:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   1924a:	4620      	mov	r0, r4
   1924c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   19250:	686b      	ldr	r3, [r5, #4]
   19252:	f033 030f 	bics.w	r3, r3, #15
   19256:	d1f6      	bne.n	19246 <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   19258:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   1925c:	8928      	ldrh	r0, [r5, #8]
   1925e:	1f03      	subs	r3, r0, #4
   19260:	b29b      	uxth	r3, r3
   19262:	42a3      	cmp	r3, r4
   19264:	d8ef      	bhi.n	19246 <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   19266:	8969      	ldrh	r1, [r5, #10]
   19268:	1f0b      	subs	r3, r1, #4
   1926a:	b29b      	uxth	r3, r3
   1926c:	42a3      	cmp	r3, r4
   1926e:	d8ea      	bhi.n	19246 <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   19270:	4288      	cmp	r0, r1
   19272:	d3e8      	bcc.n	19246 <bt_le_scan_start+0x16>
	if (param->type && !bt_id_scan_random_addr_check()) {
   19274:	b97a      	cbnz	r2, 19296 <bt_le_scan_start+0x66>
   19276:	4e28      	ldr	r6, [pc, #160]	; (19318 <bt_le_scan_start+0xe8>)
   19278:	e8d6 0fef 	ldaex	r0, [r6]
   1927c:	f040 0340 	orr.w	r3, r0, #64	; 0x40
   19280:	e8c6 3fe2 	stlex	r2, r3, [r6]
   19284:	2a00      	cmp	r2, #0
   19286:	d1f7      	bne.n	19278 <bt_le_scan_start+0x48>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   19288:	f010 0240 	ands.w	r2, r0, #64	; 0x40
   1928c:	46b0      	mov	r8, r6
   1928e:	d007      	beq.n	192a0 <bt_le_scan_start+0x70>
		return -EALREADY;
   19290:	f06f 0477 	mvn.w	r4, #119	; 0x77
   19294:	e7d9      	b.n	1924a <bt_le_scan_start+0x1a>
	if (param->type && !bt_id_scan_random_addr_check()) {
   19296:	f00f fbea 	bl	28a6e <bt_id_scan_random_addr_check>
   1929a:	2800      	cmp	r0, #0
   1929c:	d1eb      	bne.n	19276 <bt_le_scan_start+0x46>
   1929e:	e7d2      	b.n	19246 <bt_le_scan_start+0x16>
   192a0:	f7ff fdc4 	bl	18e2c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   192a4:	0681      	lsls	r1, r0, #26
   192a6:	d50a      	bpl.n	192be <bt_le_scan_start+0x8e>
	return bt_le_scan_set_enable_legacy(enable);
   192a8:	4610      	mov	r0, r2
   192aa:	f7ff fdc5 	bl	18e38 <bt_le_scan_set_enable_legacy>
		if (err) {
   192ae:	4604      	mov	r4, r0
   192b0:	b128      	cbz	r0, 192be <bt_le_scan_start+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   192b2:	f06f 0140 	mvn.w	r1, #64	; 0x40
   192b6:	4630      	mov	r0, r6
   192b8:	f00f fbed 	bl	28a96 <atomic_and>
		return err;
   192bc:	e7c5      	b.n	1924a <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   192be:	686b      	ldr	r3, [r5, #4]
	if (val) {
   192c0:	07db      	lsls	r3, r3, #31
   192c2:	d511      	bpl.n	192e8 <bt_le_scan_start+0xb8>
   192c4:	e8d8 3fef 	ldaex	r3, [r8]
   192c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   192cc:	e8c8 3fe2 	stlex	r2, r3, [r8]
   192d0:	2a00      	cmp	r2, #0
   192d2:	d1f7      	bne.n	192c4 <bt_le_scan_start+0x94>
		if (param->timeout) {
   192d4:	89ab      	ldrh	r3, [r5, #12]
   192d6:	b16b      	cbz	r3, 192f4 <bt_le_scan_start+0xc4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   192d8:	f06f 0140 	mvn.w	r1, #64	; 0x40
   192dc:	480e      	ldr	r0, [pc, #56]	; (19318 <bt_le_scan_start+0xe8>)
   192de:	f00f fbda 	bl	28a96 <atomic_and>
			return -ENOTSUP;
   192e2:	f06f 0485 	mvn.w	r4, #133	; 0x85
   192e6:	e7b0      	b.n	1924a <bt_le_scan_start+0x1a>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   192e8:	f46f 7180 	mvn.w	r1, #256	; 0x100
   192ec:	480a      	ldr	r0, [pc, #40]	; (19318 <bt_le_scan_start+0xe8>)
   192ee:	f00f fbd2 	bl	28a96 <atomic_and>
   192f2:	e7ef      	b.n	192d4 <bt_le_scan_start+0xa4>
		err = start_le_scan_legacy(param->type, param->interval,
   192f4:	896a      	ldrh	r2, [r5, #10]
   192f6:	8929      	ldrh	r1, [r5, #8]
   192f8:	7828      	ldrb	r0, [r5, #0]
   192fa:	f7ff fdcf 	bl	18e9c <start_le_scan_legacy>
	if (err) {
   192fe:	4604      	mov	r4, r0
   19300:	b118      	cbz	r0, 1930a <bt_le_scan_start+0xda>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19302:	f06f 0140 	mvn.w	r1, #64	; 0x40
   19306:	4804      	ldr	r0, [pc, #16]	; (19318 <bt_le_scan_start+0xe8>)
   19308:	e7d6      	b.n	192b8 <bt_le_scan_start+0x88>
	scan_dev_found_cb = cb;
   1930a:	4b04      	ldr	r3, [pc, #16]	; (1931c <bt_le_scan_start+0xec>)
   1930c:	601f      	str	r7, [r3, #0]
	return 0;
   1930e:	e79c      	b.n	1924a <bt_le_scan_start+0x1a>
		return -EAGAIN;
   19310:	f06f 040a 	mvn.w	r4, #10
   19314:	e799      	b.n	1924a <bt_le_scan_start+0x1a>
   19316:	bf00      	nop
   19318:	20008098 	.word	0x20008098
   1931c:	20009804 	.word	0x20009804

00019320 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   19320:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19322:	f06f 0140 	mvn.w	r1, #64	; 0x40
   19326:	4807      	ldr	r0, [pc, #28]	; (19344 <bt_le_scan_stop+0x24>)
   19328:	f00f fbb5 	bl	28a96 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1932c:	0643      	lsls	r3, r0, #25
   1932e:	d506      	bpl.n	1933e <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
   19330:	2000      	movs	r0, #0
   19332:	4b05      	ldr	r3, [pc, #20]	; (19348 <bt_le_scan_stop+0x28>)
   19334:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   19336:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   1933a:	f7ff be03 	b.w	18f44 <bt_le_scan_update>
}
   1933e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   19342:	bd08      	pop	{r3, pc}
   19344:	20008098 	.word	0x20008098
   19348:	20009804 	.word	0x20009804

0001934c <bt_le_scan_cb_register>:
	parent->next = child;
   1934c:	2300      	movs	r3, #0
   1934e:	6083      	str	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   19350:	4b05      	ldr	r3, [pc, #20]	; (19368 <bt_le_scan_cb_register+0x1c>)

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   19352:	f100 0208 	add.w	r2, r0, #8
   19356:	6859      	ldr	r1, [r3, #4]
   19358:	b911      	cbnz	r1, 19360 <bt_le_scan_cb_register+0x14>
	list->head = node;
   1935a:	e9c3 2200 	strd	r2, r2, [r3]
}
   1935e:	4770      	bx	lr
	parent->next = child;
   19360:	600a      	str	r2, [r1, #0]
	list->tail = node;
   19362:	605a      	str	r2, [r3, #4]
}
   19364:	4770      	bx	lr
   19366:	bf00      	nop
   19368:	200097fc 	.word	0x200097fc

0001936c <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   1936c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
   19370:	2500      	movs	r5, #0
static int prng_reseed(struct tc_hmac_prng_struct *h)
   19372:	b08c      	sub	sp, #48	; 0x30
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   19374:	2100      	movs	r1, #0
   19376:	f242 0018 	movw	r0, #8216	; 0x2018
   1937a:	aa02      	add	r2, sp, #8
   1937c:	f7fe fb46 	bl	17a0c <bt_hci_cmd_send_sync>
		if (ret) {
   19380:	4604      	mov	r4, r0
   19382:	bb98      	cbnz	r0, 193ec <prng_reseed.constprop.0+0x80>
			return ret;
		}

		rp = (void *)rsp->data;
   19384:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
   19386:	2208      	movs	r2, #8
   19388:	6899      	ldr	r1, [r3, #8]
   1938a:	ab04      	add	r3, sp, #16
   1938c:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
   19390:	3101      	adds	r1, #1
   19392:	f00f f8fe 	bl	28592 <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   19396:	3501      	adds	r5, #1

		net_buf_unref(rsp);
   19398:	9802      	ldr	r0, [sp, #8]
   1939a:	f006 fe85 	bl	200a8 <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   1939e:	2d04      	cmp	r5, #4
   193a0:	d1e8      	bne.n	19374 <prng_reseed.constprop.0+0x8>
	return z_impl_k_uptime_ticks();
   193a2:	f012 fbb5 	bl	2bb10 <z_impl_k_uptime_ticks>
		} else {
			return (t * to_hz + off) / from_hz;
   193a6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   193aa:	fba0 bc05 	umull	fp, ip, r0, r5
   193ae:	fb05 cc01 	mla	ip, r5, r1, ip
   193b2:	ea4f 32db 	mov.w	r2, fp, lsr #15
   193b6:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
   193ba:	ea4f 33dc 	mov.w	r3, ip, lsr #15
	}

	extra = k_uptime_get();
   193be:	e9cd 2302 	strd	r2, r3, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   193c2:	2308      	movs	r3, #8
   193c4:	2220      	movs	r2, #32
   193c6:	9300      	str	r3, [sp, #0]
   193c8:	480a      	ldr	r0, [pc, #40]	; (193f4 <prng_reseed.constprop.0+0x88>)
   193ca:	446b      	add	r3, sp
   193cc:	a904      	add	r1, sp, #16
   193ce:	f00e ff7b 	bl	282c8 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   193d2:	b958      	cbnz	r0, 193ec <prng_reseed.constprop.0+0x80>
   193d4:	4b08      	ldr	r3, [pc, #32]	; (193f8 <prng_reseed.constprop.0+0x8c>)
   193d6:	4909      	ldr	r1, [pc, #36]	; (193fc <prng_reseed.constprop.0+0x90>)
		BT_ERR("Failed to re-seed PRNG");
   193d8:	4809      	ldr	r0, [pc, #36]	; (19400 <prng_reseed.constprop.0+0x94>)
   193da:	1ac9      	subs	r1, r1, r3
   193dc:	08c9      	lsrs	r1, r1, #3
   193de:	0189      	lsls	r1, r1, #6
   193e0:	f041 0101 	orr.w	r1, r1, #1
   193e4:	f00d fca4 	bl	26d30 <log_0>
		return -EIO;
   193e8:	f06f 0404 	mvn.w	r4, #4
	}

	return 0;
}
   193ec:	4620      	mov	r0, r4
   193ee:	b00c      	add	sp, #48	; 0x30
   193f0:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   193f4:	200089d8 	.word	0x200089d8
   193f8:	0002bfe4 	.word	0x0002bfe4
   193fc:	0002bffc 	.word	0x0002bffc
   19400:	0002f453 	.word	0x0002f453

00019404 <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   19404:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   19406:	b570      	push	{r4, r5, r6, lr}
   19408:	4604      	mov	r4, r0
   1940a:	460d      	mov	r5, r1
   1940c:	f101 0610 	add.w	r6, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   19410:	d919      	bls.n	19446 <sys_memcpy_swap.constprop.0+0x42>
   19412:	42b0      	cmp	r0, r6
   19414:	d20e      	bcs.n	19434 <sys_memcpy_swap.constprop.0+0x30>
   19416:	490e      	ldr	r1, [pc, #56]	; (19450 <sys_memcpy_swap.constprop.0+0x4c>)
   19418:	f240 2317 	movw	r3, #535	; 0x217
   1941c:	4a0d      	ldr	r2, [pc, #52]	; (19454 <sys_memcpy_swap.constprop.0+0x50>)
   1941e:	480e      	ldr	r0, [pc, #56]	; (19458 <sys_memcpy_swap.constprop.0+0x54>)
   19420:	f00d f97c 	bl	2671c <printk>
   19424:	480d      	ldr	r0, [pc, #52]	; (1945c <sys_memcpy_swap.constprop.0+0x58>)
   19426:	f00d f979 	bl	2671c <printk>
   1942a:	f240 2117 	movw	r1, #535	; 0x217
   1942e:	4809      	ldr	r0, [pc, #36]	; (19454 <sys_memcpy_swap.constprop.0+0x50>)
   19430:	f00d fc19 	bl	26c66 <assert_post_action>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   19434:	4633      	mov	r3, r6
   19436:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   19438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   1943c:	42ab      	cmp	r3, r5
		*pdst++ = *psrc--;
   1943e:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   19442:	d1f9      	bne.n	19438 <sys_memcpy_swap.constprop.0+0x34>
	}
}
   19444:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   19446:	d0e6      	beq.n	19416 <sys_memcpy_swap.constprop.0+0x12>
   19448:	f100 0310 	add.w	r3, r0, #16
   1944c:	4299      	cmp	r1, r3
   1944e:	e7e1      	b.n	19414 <sys_memcpy_swap.constprop.0+0x10>
   19450:	0002f495 	.word	0x0002f495
   19454:	0002f46a 	.word	0x0002f46a
   19458:	0002cfb2 	.word	0x0002cfb2
   1945c:	0002f4ec 	.word	0x0002f4ec

00019460 <prng_init>:

int prng_init(void)
{
   19460:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   19462:	4b16      	ldr	r3, [pc, #88]	; (194bc <prng_init+0x5c>)
   19464:	f993 305f 	ldrsb.w	r3, [r3, #95]	; 0x5f
   19468:	2b00      	cmp	r3, #0
   1946a:	da23      	bge.n	194b4 <prng_init+0x54>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1946c:	2100      	movs	r1, #0
   1946e:	f242 0018 	movw	r0, #8216	; 0x2018
   19472:	aa01      	add	r2, sp, #4
   19474:	f7fe faca 	bl	17a0c <bt_hci_cmd_send_sync>
	if (ret) {
   19478:	b9b8      	cbnz	r0, 194aa <prng_init+0x4a>
		return ret;
	}

	rp = (void *)rsp->data;
   1947a:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
   1947c:	2208      	movs	r2, #8
   1947e:	6899      	ldr	r1, [r3, #8]
   19480:	480f      	ldr	r0, [pc, #60]	; (194c0 <prng_init+0x60>)
   19482:	3101      	adds	r1, #1
   19484:	f00e ff00 	bl	28288 <tc_hmac_prng_init>
   19488:	4604      	mov	r4, r0

	net_buf_unref(rsp);
   1948a:	9801      	ldr	r0, [sp, #4]
   1948c:	f006 fe0c 	bl	200a8 <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
   19490:	b96c      	cbnz	r4, 194ae <prng_init+0x4e>
   19492:	4b0c      	ldr	r3, [pc, #48]	; (194c4 <prng_init+0x64>)
   19494:	490c      	ldr	r1, [pc, #48]	; (194c8 <prng_init+0x68>)
		BT_ERR("Failed to initialize PRNG");
   19496:	480d      	ldr	r0, [pc, #52]	; (194cc <prng_init+0x6c>)
   19498:	1ac9      	subs	r1, r1, r3
   1949a:	08c9      	lsrs	r1, r1, #3
   1949c:	0189      	lsls	r1, r1, #6
   1949e:	f041 0101 	orr.w	r1, r1, #1
   194a2:	f00d fc45 	bl	26d30 <log_0>
		return -EIO;
   194a6:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   194aa:	b002      	add	sp, #8
   194ac:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   194ae:	f7ff ff5d 	bl	1936c <prng_reseed.constprop.0>
   194b2:	e7fa      	b.n	194aa <prng_init+0x4a>
		return -ENOTSUP;
   194b4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   194b8:	e7f7      	b.n	194aa <prng_init+0x4a>
   194ba:	bf00      	nop
   194bc:	20008000 	.word	0x20008000
   194c0:	200089d8 	.word	0x200089d8
   194c4:	0002bfe4 	.word	0x0002bfe4
   194c8:	0002bffc 	.word	0x0002bffc
   194cc:	0002f51e 	.word	0x0002f51e

000194d0 <bt_rand>:

int bt_rand(void *buf, size_t len)
{
   194d0:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
   194d2:	4a0a      	ldr	r2, [pc, #40]	; (194fc <bt_rand+0x2c>)
{
   194d4:	4604      	mov	r4, r0
   194d6:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
   194d8:	f00e ff0f 	bl	282fa <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   194dc:	1c43      	adds	r3, r0, #1
   194de:	d107      	bne.n	194f0 <bt_rand+0x20>
		ret = prng_reseed(&prng);
   194e0:	f7ff ff44 	bl	1936c <prng_reseed.constprop.0>
		if (ret) {
   194e4:	b948      	cbnz	r0, 194fa <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   194e6:	4629      	mov	r1, r5
   194e8:	4620      	mov	r0, r4
   194ea:	4a04      	ldr	r2, [pc, #16]	; (194fc <bt_rand+0x2c>)
   194ec:	f00e ff05 	bl	282fa <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
   194f0:	2801      	cmp	r0, #1
   194f2:	bf14      	ite	ne
   194f4:	f06f 0004 	mvnne.w	r0, #4
   194f8:	2000      	moveq	r0, #0
	}

	return -EIO;
}
   194fa:	bd38      	pop	{r3, r4, r5, pc}
   194fc:	200089d8 	.word	0x200089d8

00019500 <bt_pub_key_is_debug>:
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
	return memcmp(pub_key, debug_public_key, 64) == 0;
   19500:	2240      	movs	r2, #64	; 0x40
{
   19502:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, 64) == 0;
   19504:	4903      	ldr	r1, [pc, #12]	; (19514 <bt_pub_key_is_debug+0x14>)
   19506:	f00f f834 	bl	28572 <memcmp>
}
   1950a:	fab0 f080 	clz	r0, r0
   1950e:	0940      	lsrs	r0, r0, #5
   19510:	bd08      	pop	{r3, pc}
   19512:	bf00      	nop
   19514:	0002f5d0 	.word	0x0002f5d0

00019518 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   19518:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1951a:	4b3e      	ldr	r3, [pc, #248]	; (19614 <bt_pub_key_gen+0xfc>)
   1951c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
   19520:	f003 0306 	and.w	r3, r3, #6
   19524:	2b06      	cmp	r3, #6
   19526:	d00d      	beq.n	19544 <bt_pub_key_gen+0x2c>
   19528:	4b3b      	ldr	r3, [pc, #236]	; (19618 <bt_pub_key_gen+0x100>)
   1952a:	493c      	ldr	r1, [pc, #240]	; (1961c <bt_pub_key_gen+0x104>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   1952c:	483c      	ldr	r0, [pc, #240]	; (19620 <bt_pub_key_gen+0x108>)
   1952e:	1ac9      	subs	r1, r1, r3
   19530:	08c9      	lsrs	r1, r1, #3
   19532:	0189      	lsls	r1, r1, #6
   19534:	f041 0102 	orr.w	r1, r1, #2
   19538:	f00d fbfa 	bl	26d30 <log_0>
		return -ENOTSUP;
   1953c:	f06f 0685 	mvn.w	r6, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   19540:	4630      	mov	r0, r6
   19542:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
   19544:	2800      	cmp	r0, #0
   19546:	d061      	beq.n	1960c <bt_pub_key_gen+0xf4>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   19548:	4d36      	ldr	r5, [pc, #216]	; (19624 <bt_pub_key_gen+0x10c>)
   1954a:	682a      	ldr	r2, [r5, #0]
   1954c:	b10a      	cbz	r2, 19552 <bt_pub_key_gen+0x3a>
   1954e:	1f13      	subs	r3, r2, #4
   19550:	b99b      	cbnz	r3, 1957a <bt_pub_key_gen+0x62>
	parent->next = child;
   19552:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   19554:	686a      	ldr	r2, [r5, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   19556:	1d03      	adds	r3, r0, #4
	list->head = node;
   19558:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1955a:	b902      	cbnz	r2, 1955e <bt_pub_key_gen+0x46>
	list->tail = node;
   1955c:	606b      	str	r3, [r5, #4]
   1955e:	4c32      	ldr	r4, [pc, #200]	; (19628 <bt_pub_key_gen+0x110>)
   19560:	e8d4 2fef 	ldaex	r2, [r4]
   19564:	f042 0310 	orr.w	r3, r2, #16
   19568:	e8c4 3fe1 	stlex	r1, r3, [r4]
   1956c:	2900      	cmp	r1, #0
   1956e:	d1f7      	bne.n	19560 <bt_pub_key_gen+0x48>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   19570:	f012 0210 	ands.w	r2, r2, #16
   19574:	d017      	beq.n	195a6 <bt_pub_key_gen+0x8e>
		return 0;
   19576:	2600      	movs	r6, #0
   19578:	e7e2      	b.n	19540 <bt_pub_key_gen+0x28>
		if (cb == new_cb) {
   1957a:	4298      	cmp	r0, r3
   1957c:	d10c      	bne.n	19598 <bt_pub_key_gen+0x80>
   1957e:	4b26      	ldr	r3, [pc, #152]	; (19618 <bt_pub_key_gen+0x100>)
   19580:	4926      	ldr	r1, [pc, #152]	; (1961c <bt_pub_key_gen+0x104>)
			BT_WARN("Callback already registered");
   19582:	482a      	ldr	r0, [pc, #168]	; (1962c <bt_pub_key_gen+0x114>)
   19584:	1ac9      	subs	r1, r1, r3
   19586:	08c9      	lsrs	r1, r1, #3
   19588:	0189      	lsls	r1, r1, #6
   1958a:	f041 0102 	orr.w	r1, r1, #2
   1958e:	f00d fbcf 	bl	26d30 <log_0>
			return -EALREADY;
   19592:	f06f 0677 	mvn.w	r6, #119	; 0x77
   19596:	e7d3      	b.n	19540 <bt_pub_key_gen+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19598:	1d19      	adds	r1, r3, #4
   1959a:	d0da      	beq.n	19552 <bt_pub_key_gen+0x3a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1959c:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1959e:	2b00      	cmp	r3, #0
   195a0:	d0d7      	beq.n	19552 <bt_pub_key_gen+0x3a>
   195a2:	3b04      	subs	r3, #4
   195a4:	e7d4      	b.n	19550 <bt_pub_key_gen+0x38>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   195a6:	e8d4 3fef 	ldaex	r3, [r4]
   195aa:	f023 0308 	bic.w	r3, r3, #8
   195ae:	e8c4 3fe1 	stlex	r1, r3, [r4]
   195b2:	2900      	cmp	r1, #0
   195b4:	d1f7      	bne.n	195a6 <bt_pub_key_gen+0x8e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   195b6:	4611      	mov	r1, r2
   195b8:	f242 0025 	movw	r0, #8229	; 0x2025
   195bc:	f7fe fa26 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
   195c0:	4606      	mov	r6, r0
   195c2:	2800      	cmp	r0, #0
   195c4:	d0d7      	beq.n	19576 <bt_pub_key_gen+0x5e>
   195c6:	4915      	ldr	r1, [pc, #84]	; (1961c <bt_pub_key_gen+0x104>)
   195c8:	4b13      	ldr	r3, [pc, #76]	; (19618 <bt_pub_key_gen+0x100>)
		BT_ERR("Sending LE P256 Public Key command failed");
   195ca:	4819      	ldr	r0, [pc, #100]	; (19630 <bt_pub_key_gen+0x118>)
   195cc:	1ac9      	subs	r1, r1, r3
   195ce:	08c9      	lsrs	r1, r1, #3
   195d0:	0189      	lsls	r1, r1, #6
   195d2:	f041 0101 	orr.w	r1, r1, #1
   195d6:	f00d fbab 	bl	26d30 <log_0>
   195da:	e8d4 3fef 	ldaex	r3, [r4]
   195de:	f023 0310 	bic.w	r3, r3, #16
   195e2:	e8c4 3fe2 	stlex	r2, r3, [r4]
   195e6:	2a00      	cmp	r2, #0
   195e8:	d1f7      	bne.n	195da <bt_pub_key_gen+0xc2>
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   195ea:	682c      	ldr	r4, [r5, #0]
   195ec:	b91c      	cbnz	r4, 195f6 <bt_pub_key_gen+0xde>
	list->head = NULL;
   195ee:	2300      	movs	r3, #0
	list->tail = NULL;
   195f0:	e9c5 3300 	strd	r3, r3, [r5]
		return err;
   195f4:	e7a4      	b.n	19540 <bt_pub_key_gen+0x28>
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   195f6:	3c04      	subs	r4, #4
   195f8:	2c00      	cmp	r4, #0
   195fa:	d0f8      	beq.n	195ee <bt_pub_key_gen+0xd6>
			if (cb->func) {
   195fc:	6823      	ldr	r3, [r4, #0]
   195fe:	b10b      	cbz	r3, 19604 <bt_pub_key_gen+0xec>
				cb->func(NULL);
   19600:	2000      	movs	r0, #0
   19602:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   19604:	1d23      	adds	r3, r4, #4
   19606:	d0f2      	beq.n	195ee <bt_pub_key_gen+0xd6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19608:	6864      	ldr	r4, [r4, #4]
	return node->next;
   1960a:	e7ef      	b.n	195ec <bt_pub_key_gen+0xd4>
		return -EINVAL;
   1960c:	f06f 0615 	mvn.w	r6, #21
   19610:	e796      	b.n	19540 <bt_pub_key_gen+0x28>
   19612:	bf00      	nop
   19614:	20008000 	.word	0x20008000
   19618:	0002bfe4 	.word	0x0002bfe4
   1961c:	0002c004 	.word	0x0002c004
   19620:	0002f542 	.word	0x0002f542
   19624:	2000980c 	.word	0x2000980c
   19628:	20008098 	.word	0x20008098
   1962c:	0002f561 	.word	0x0002f561
   19630:	0002f57d 	.word	0x0002f57d

00019634 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19634:	4b04      	ldr	r3, [pc, #16]	; (19648 <bt_pub_key_get+0x14>)
   19636:	e8d3 3faf 	lda	r3, [r3]
	if (IS_ENABLED(CONFIG_BT_USE_DEBUG_KEYS) &&
	    BT_CMD_TEST(bt_dev.supported_commands, 41, 2)) {
		return debug_public_key;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   1963a:	f013 0f08 	tst.w	r3, #8
		return pub_key;
	}

	return NULL;
}
   1963e:	4803      	ldr	r0, [pc, #12]	; (1964c <bt_pub_key_get+0x18>)
   19640:	bf08      	it	eq
   19642:	2000      	moveq	r0, #0
   19644:	4770      	bx	lr
   19646:	bf00      	nop
   19648:	20008098 	.word	0x20008098
   1964c:	2000a4db 	.word	0x2000a4db

00019650 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
   19650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   19652:	4d22      	ldr	r5, [pc, #136]	; (196dc <bt_dh_key_gen+0x8c>)
{
   19654:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   19656:	682b      	ldr	r3, [r5, #0]
   19658:	428b      	cmp	r3, r1
   1965a:	d039      	beq.n	196d0 <bt_dh_key_gen+0x80>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1965c:	b11b      	cbz	r3, 19666 <bt_dh_key_gen+0x16>
		return -EBUSY;
   1965e:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   19662:	4620      	mov	r0, r4
   19664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19666:	4b1e      	ldr	r3, [pc, #120]	; (196e0 <bt_dh_key_gen+0x90>)
   19668:	e8d3 2faf 	lda	r2, [r3]
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1966c:	f3c2 1700 	ubfx	r7, r2, #4, #1
   19670:	06d2      	lsls	r2, r2, #27
   19672:	d4f4      	bmi.n	1965e <bt_dh_key_gen+0xe>
   19674:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   19678:	071b      	lsls	r3, r3, #28
   1967a:	d52c      	bpl.n	196d6 <bt_dh_key_gen+0x86>
	dh_key_cb = cb;
   1967c:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   1967e:	f242 0026 	movw	r0, #8230	; 0x2026
   19682:	2140      	movs	r1, #64	; 0x40
   19684:	f7fe f97a 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   19688:	4604      	mov	r4, r0
   1968a:	b1f0      	cbz	r0, 196ca <bt_dh_key_gen+0x7a>
	return net_buf_simple_add(&buf->b, len);
   1968c:	2140      	movs	r1, #64	; 0x40
   1968e:	3008      	adds	r0, #8
   19690:	f006 fe3a 	bl	20308 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   19694:	2240      	movs	r2, #64	; 0x40
   19696:	4631      	mov	r1, r6
   19698:	f00e ff7b 	bl	28592 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   1969c:	4621      	mov	r1, r4
   1969e:	463a      	mov	r2, r7
   196a0:	f242 0026 	movw	r0, #8230	; 0x2026
   196a4:	f7fe f9b2 	bl	17a0c <bt_hci_cmd_send_sync>
	if (err) {
   196a8:	4604      	mov	r4, r0
   196aa:	2800      	cmp	r0, #0
   196ac:	d0d9      	beq.n	19662 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   196ae:	2300      	movs	r3, #0
   196b0:	4a0c      	ldr	r2, [pc, #48]	; (196e4 <bt_dh_key_gen+0x94>)
   196b2:	602b      	str	r3, [r5, #0]
   196b4:	4b0c      	ldr	r3, [pc, #48]	; (196e8 <bt_dh_key_gen+0x98>)
		BT_WARN("Failed to generate DHKey (err %d)", err);
   196b6:	4621      	mov	r1, r4
   196b8:	1ad2      	subs	r2, r2, r3
   196ba:	08d2      	lsrs	r2, r2, #3
   196bc:	0192      	lsls	r2, r2, #6
   196be:	480b      	ldr	r0, [pc, #44]	; (196ec <bt_dh_key_gen+0x9c>)
   196c0:	f042 0202 	orr.w	r2, r2, #2
   196c4:	f00d fb41 	bl	26d4a <log_1>
		return err;
   196c8:	e7cb      	b.n	19662 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   196ca:	f06f 0468 	mvn.w	r4, #104	; 0x68
   196ce:	e7ee      	b.n	196ae <bt_dh_key_gen+0x5e>
		return -EALREADY;
   196d0:	f06f 0477 	mvn.w	r4, #119	; 0x77
   196d4:	e7c5      	b.n	19662 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   196d6:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   196da:	e7c2      	b.n	19662 <bt_dh_key_gen+0x12>
   196dc:	20009808 	.word	0x20009808
   196e0:	20008098 	.word	0x20008098
   196e4:	0002c004 	.word	0x0002c004
   196e8:	0002bfe4 	.word	0x0002bfe4
   196ec:	0002f5a7 	.word	0x0002f5a7

000196f0 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   196f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   196f2:	6886      	ldr	r6, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   196f4:	4c18      	ldr	r4, [pc, #96]	; (19758 <bt_hci_evt_le_pkey_complete+0x68>)
   196f6:	e8d4 3fef 	ldaex	r3, [r4]
   196fa:	f023 0310 	bic.w	r3, r3, #16
   196fe:	e8c4 3fe2 	stlex	r2, r3, [r4]
   19702:	2a00      	cmp	r2, #0
   19704:	d1f7      	bne.n	196f6 <bt_hci_evt_le_pkey_complete+0x6>

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   19706:	7833      	ldrb	r3, [r6, #0]
   19708:	b963      	cbnz	r3, 19724 <bt_hci_evt_le_pkey_complete+0x34>
		memcpy(pub_key, evt->key, 64);
   1970a:	2240      	movs	r2, #64	; 0x40
   1970c:	4813      	ldr	r0, [pc, #76]	; (1975c <bt_hci_evt_le_pkey_complete+0x6c>)
   1970e:	1c71      	adds	r1, r6, #1
   19710:	f00e ff3f 	bl	28592 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19714:	e8d4 3fef 	ldaex	r3, [r4]
   19718:	f043 0308 	orr.w	r3, r3, #8
   1971c:	e8c4 3fe2 	stlex	r2, r3, [r4]
   19720:	2a00      	cmp	r2, #0
   19722:	d1f7      	bne.n	19714 <bt_hci_evt_le_pkey_complete+0x24>
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   19724:	4d0e      	ldr	r5, [pc, #56]	; (19760 <bt_hci_evt_le_pkey_complete+0x70>)
   19726:	682c      	ldr	r4, [r5, #0]
   19728:	b91c      	cbnz	r4, 19732 <bt_hci_evt_le_pkey_complete+0x42>
	list->head = NULL;
   1972a:	2300      	movs	r3, #0
	list->tail = NULL;
   1972c:	e9c5 3300 	strd	r3, r3, [r5]
			cb->func(evt->status ? NULL : pub_key);
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   19730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			cb->func(evt->status ? NULL : pub_key);
   19732:	4f0a      	ldr	r7, [pc, #40]	; (1975c <bt_hci_evt_le_pkey_complete+0x6c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   19734:	3c04      	subs	r4, #4
   19736:	2c00      	cmp	r4, #0
   19738:	d0f7      	beq.n	1972a <bt_hci_evt_le_pkey_complete+0x3a>
		if (cb->func) {
   1973a:	6823      	ldr	r3, [r4, #0]
   1973c:	b12b      	cbz	r3, 1974a <bt_hci_evt_le_pkey_complete+0x5a>
			cb->func(evt->status ? NULL : pub_key);
   1973e:	7832      	ldrb	r2, [r6, #0]
   19740:	2a00      	cmp	r2, #0
   19742:	bf0c      	ite	eq
   19744:	4638      	moveq	r0, r7
   19746:	2000      	movne	r0, #0
   19748:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1974a:	1d23      	adds	r3, r4, #4
   1974c:	d0ed      	beq.n	1972a <bt_hci_evt_le_pkey_complete+0x3a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1974e:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   19750:	2c00      	cmp	r4, #0
   19752:	d0ea      	beq.n	1972a <bt_hci_evt_le_pkey_complete+0x3a>
   19754:	3c04      	subs	r4, #4
   19756:	e7ee      	b.n	19736 <bt_hci_evt_le_pkey_complete+0x46>
   19758:	20008098 	.word	0x20008098
   1975c:	2000a4db 	.word	0x2000a4db
   19760:	2000980c 	.word	0x2000980c

00019764 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   19764:	4905      	ldr	r1, [pc, #20]	; (1977c <bt_hci_evt_le_dhkey_complete+0x18>)
   19766:	680b      	ldr	r3, [r1, #0]
   19768:	b133      	cbz	r3, 19778 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   1976a:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   1976c:	2000      	movs	r0, #0
   1976e:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   19770:	7811      	ldrb	r1, [r2, #0]
   19772:	b901      	cbnz	r1, 19776 <bt_hci_evt_le_dhkey_complete+0x12>
   19774:	1c50      	adds	r0, r2, #1
   19776:	4718      	bx	r3
	}
}
   19778:	4770      	bx	lr
   1977a:	bf00      	nop
   1977c:	20009808 	.word	0x20009808

00019780 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   19780:	2300      	movs	r3, #0
{
   19782:	4601      	mov	r1, r0
	tx->user_data = NULL;
   19784:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
   19788:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1978a:	4801      	ldr	r0, [pc, #4]	; (19790 <tx_free+0x10>)
   1978c:	f012 b916 	b.w	2b9bc <k_queue_append>
   19790:	200085d0 	.word	0x200085d0

00019794 <notify_connected>:
{
   19794:	b538      	push	{r3, r4, r5, lr}
   19796:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   19798:	4b08      	ldr	r3, [pc, #32]	; (197bc <notify_connected+0x28>)
   1979a:	681d      	ldr	r5, [r3, #0]
   1979c:	7b21      	ldrb	r1, [r4, #12]
   1979e:	b92d      	cbnz	r5, 197ac <notify_connected+0x18>
	if (!conn->err) {
   197a0:	b951      	cbnz	r1, 197b8 <notify_connected+0x24>
		bt_gatt_connected(conn);
   197a2:	4620      	mov	r0, r4
}
   197a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   197a8:	f004 ba7a 	b.w	1dca0 <bt_gatt_connected>
		if (cb->connected) {
   197ac:	682b      	ldr	r3, [r5, #0]
   197ae:	b10b      	cbz	r3, 197b4 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   197b0:	4620      	mov	r0, r4
   197b2:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   197b4:	69ad      	ldr	r5, [r5, #24]
   197b6:	e7f1      	b.n	1979c <notify_connected+0x8>
}
   197b8:	bd38      	pop	{r3, r4, r5, pc}
   197ba:	bf00      	nop
   197bc:	20009818 	.word	0x20009818

000197c0 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   197c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   197c4:	4604      	mov	r4, r0
   197c6:	460e      	mov	r6, r1
   197c8:	4691      	mov	r9, r2
   197ca:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   197cc:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
   197ce:	f04f 33ff 	mov.w	r3, #4294967295
   197d2:	f04f 32ff 	mov.w	r2, #4294967295
   197d6:	484b      	ldr	r0, [pc, #300]	; (19904 <send_frag+0x144>)
   197d8:	f009 fea4 	bl	23524 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   197dc:	7b63      	ldrb	r3, [r4, #13]
   197de:	2b07      	cmp	r3, #7
   197e0:	d151      	bne.n	19886 <send_frag+0xc6>
	__asm__ volatile(
   197e2:	f04f 0320 	mov.w	r3, #32
   197e6:	f3ef 8211 	mrs	r2, BASEPRI
   197ea:	f383 8811 	msr	BASEPRI, r3
   197ee:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   197f2:	2d00      	cmp	r5, #0
   197f4:	d059      	beq.n	198aa <send_frag+0xea>
	parent->next = child;
   197f6:	2300      	movs	r3, #0
   197f8:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   197fa:	69a3      	ldr	r3, [r4, #24]
   197fc:	2b00      	cmp	r3, #0
   197fe:	d151      	bne.n	198a4 <send_frag+0xe4>
	list->head = node;
   19800:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   19804:	f382 8811 	msr	BASEPRI, r2
   19808:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   1980c:	2104      	movs	r1, #4
   1980e:	f106 0008 	add.w	r0, r6, #8
   19812:	f006 fd15 	bl	20240 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   19816:	8823      	ldrh	r3, [r4, #0]
   19818:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   1981c:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   19820:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   19822:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   19826:	3b04      	subs	r3, #4
   19828:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1982a:	2302      	movs	r3, #2
	return bt_send(buf);
   1982c:	4630      	mov	r0, r6
   1982e:	7533      	strb	r3, [r6, #20]
   19830:	f7fe fa26 	bl	17c80 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   19834:	4601      	mov	r1, r0
   19836:	2800      	cmp	r0, #0
   19838:	d062      	beq.n	19900 <send_frag+0x140>
   1983a:	4b33      	ldr	r3, [pc, #204]	; (19908 <send_frag+0x148>)
   1983c:	4a33      	ldr	r2, [pc, #204]	; (1990c <send_frag+0x14c>)
		BT_ERR("Unable to send to driver (err %d)", err);
   1983e:	4834      	ldr	r0, [pc, #208]	; (19910 <send_frag+0x150>)
   19840:	1ad2      	subs	r2, r2, r3
   19842:	08d2      	lsrs	r2, r2, #3
   19844:	0192      	lsls	r2, r2, #6
   19846:	f042 0201 	orr.w	r2, r2, #1
   1984a:	f00d fa7e 	bl	26d4a <log_1>
	__asm__ volatile(
   1984e:	f04f 0320 	mov.w	r3, #32
   19852:	f3ef 8911 	mrs	r9, BASEPRI
   19856:	f383 8811 	msr	BASEPRI, r3
   1985a:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   1985e:	2d00      	cmp	r5, #0
   19860:	d039      	beq.n	198d6 <send_frag+0x116>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19862:	2200      	movs	r2, #0
   19864:	6963      	ldr	r3, [r4, #20]
   19866:	b153      	cbz	r3, 1987e <send_frag+0xbe>
   19868:	429d      	cmp	r5, r3
   1986a:	d131      	bne.n	198d0 <send_frag+0x110>
Z_GENLIST_REMOVE(slist, snode)
   1986c:	682b      	ldr	r3, [r5, #0]
   1986e:	bb4a      	cbnz	r2, 198c4 <send_frag+0x104>
   19870:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   19872:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   19874:	4295      	cmp	r5, r2
   19876:	d100      	bne.n	1987a <send_frag+0xba>
	list->tail = node;
   19878:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   1987a:	2300      	movs	r3, #0
   1987c:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   1987e:	f389 8811 	msr	BASEPRI, r9
   19882:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   19886:	481f      	ldr	r0, [pc, #124]	; (19904 <send_frag+0x144>)
   19888:	f009 fe08 	bl	2349c <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   1988c:	b115      	cbz	r5, 19894 <send_frag+0xd4>
		tx_free(tx);
   1988e:	4628      	mov	r0, r5
   19890:	f7ff ff76 	bl	19780 <tx_free>
	}

	if (always_consume) {
   19894:	b11f      	cbz	r7, 1989e <send_frag+0xde>
		net_buf_unref(buf);
   19896:	4630      	mov	r0, r6
   19898:	f006 fc06 	bl	200a8 <net_buf_unref>
	}
	return false;
   1989c:	2700      	movs	r7, #0
}
   1989e:	4638      	mov	r0, r7
   198a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   198a4:	601d      	str	r5, [r3, #0]
	list->tail = node;
   198a6:	61a5      	str	r5, [r4, #24]
}
   198a8:	e7ac      	b.n	19804 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   198aa:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   198ac:	b133      	cbz	r3, 198bc <send_frag+0xfc>
			pending_no_cb = &tail_tx->pending_no_cb;
   198ae:	f103 080c 	add.w	r8, r3, #12
   198b2:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   198b4:	3301      	adds	r3, #1
   198b6:	f8c8 3000 	str.w	r3, [r8]
   198ba:	e7a3      	b.n	19804 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   198bc:	69e3      	ldr	r3, [r4, #28]
   198be:	f104 081c 	add.w	r8, r4, #28
   198c2:	e7f7      	b.n	198b4 <send_frag+0xf4>
	parent->next = child;
   198c4:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   198c6:	69a3      	ldr	r3, [r4, #24]
   198c8:	429d      	cmp	r5, r3
	list->tail = node;
   198ca:	bf08      	it	eq
   198cc:	61a2      	streq	r2, [r4, #24]
}
   198ce:	e7d4      	b.n	1987a <send_frag+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   198d0:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   198d2:	681b      	ldr	r3, [r3, #0]
   198d4:	e7c7      	b.n	19866 <send_frag+0xa6>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   198d6:	f8d8 3000 	ldr.w	r3, [r8]
   198da:	b95b      	cbnz	r3, 198f4 <send_frag+0x134>
   198dc:	490d      	ldr	r1, [pc, #52]	; (19914 <send_frag+0x154>)
   198de:	480e      	ldr	r0, [pc, #56]	; (19918 <send_frag+0x158>)
   198e0:	f240 438a 	movw	r3, #1162	; 0x48a
   198e4:	4a0d      	ldr	r2, [pc, #52]	; (1991c <send_frag+0x15c>)
   198e6:	f00c ff19 	bl	2671c <printk>
   198ea:	f240 418a 	movw	r1, #1162	; 0x48a
   198ee:	480b      	ldr	r0, [pc, #44]	; (1991c <send_frag+0x15c>)
   198f0:	f00d f9b9 	bl	26c66 <assert_post_action>
			(*pending_no_cb)--;
   198f4:	f8d8 3000 	ldr.w	r3, [r8]
   198f8:	3b01      	subs	r3, #1
   198fa:	f8c8 3000 	str.w	r3, [r8]
   198fe:	e7be      	b.n	1987e <send_frag+0xbe>
	return true;
   19900:	2701      	movs	r7, #1
   19902:	e7cc      	b.n	1989e <send_frag+0xde>
   19904:	200080d0 	.word	0x200080d0
   19908:	0002bfe4 	.word	0x0002bfe4
   1990c:	0002bff4 	.word	0x0002bff4
   19910:	0002ef03 	.word	0x0002ef03
   19914:	0002f640 	.word	0x0002f640
   19918:	0002cfb2 	.word	0x0002cfb2
   1991c:	0002f610 	.word	0x0002f610

00019920 <bt_conn_get_pkts>:
}
   19920:	4800      	ldr	r0, [pc, #0]	; (19924 <bt_conn_get_pkts+0x4>)
   19922:	4770      	bx	lr
   19924:	200080d0 	.word	0x200080d0

00019928 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   19928:	1d03      	adds	r3, r0, #4
{
   1992a:	b570      	push	{r4, r5, r6, lr}
   1992c:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1992e:	4618      	mov	r0, r3
   19930:	f00f f8e7 	bl	28b02 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   19934:	0582      	lsls	r2, r0, #22
   19936:	d515      	bpl.n	19964 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   19938:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   1993c:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
   19940:	4291      	cmp	r1, r2
   19942:	d80f      	bhi.n	19964 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   19944:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
   19948:	4291      	cmp	r1, r2
   1994a:	d30b      	bcc.n	19964 <notify_le_param_updated+0x3c>
	    conn->le.latency == conn->le.pending_latency &&
   1994c:	e9d4 122b 	ldrd	r1, r2, [r4, #172]	; 0xac
   19950:	4291      	cmp	r1, r2
   19952:	d107      	bne.n	19964 <notify_le_param_updated+0x3c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19954:	e8d3 2fef 	ldaex	r2, [r3]
   19958:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   1995c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   19960:	2900      	cmp	r1, #0
   19962:	d1f7      	bne.n	19954 <notify_le_param_updated+0x2c>
	for (cb = callback_list; cb; cb = cb->_next) {
   19964:	4b07      	ldr	r3, [pc, #28]	; (19984 <notify_le_param_updated+0x5c>)
   19966:	681d      	ldr	r5, [r3, #0]
   19968:	b905      	cbnz	r5, 1996c <notify_le_param_updated+0x44>
}
   1996a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   1996c:	68ee      	ldr	r6, [r5, #12]
   1996e:	b13e      	cbz	r6, 19980 <notify_le_param_updated+0x58>
			cb->le_param_updated(conn, conn->le.interval,
   19970:	4620      	mov	r0, r4
   19972:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   19976:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   1997a:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   1997e:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   19980:	69ad      	ldr	r5, [r5, #24]
   19982:	e7f1      	b.n	19968 <notify_le_param_updated+0x40>
   19984:	20009818 	.word	0x20009818

00019988 <le_param_req>:
{
   19988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1998a:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   1998c:	4608      	mov	r0, r1
{
   1998e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   19990:	f00e ff5f 	bl	28852 <bt_le_conn_params_valid>
   19994:	4604      	mov	r4, r0
   19996:	b910      	cbnz	r0, 1999e <le_param_req+0x16>
		return false;
   19998:	2400      	movs	r4, #0
}
   1999a:	4620      	mov	r0, r4
   1999c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1999e:	4b09      	ldr	r3, [pc, #36]	; (199c4 <le_param_req+0x3c>)
   199a0:	681e      	ldr	r6, [r3, #0]
   199a2:	2e00      	cmp	r6, #0
   199a4:	d0f9      	beq.n	1999a <le_param_req+0x12>
		if (!cb->le_param_req) {
   199a6:	68b3      	ldr	r3, [r6, #8]
   199a8:	b90b      	cbnz	r3, 199ae <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   199aa:	69b6      	ldr	r6, [r6, #24]
   199ac:	e7f9      	b.n	199a2 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   199ae:	4629      	mov	r1, r5
   199b0:	4638      	mov	r0, r7
   199b2:	4798      	blx	r3
   199b4:	2800      	cmp	r0, #0
   199b6:	d0ef      	beq.n	19998 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   199b8:	4628      	mov	r0, r5
   199ba:	f00e ff4a 	bl	28852 <bt_le_conn_params_valid>
   199be:	2800      	cmp	r0, #0
   199c0:	d1f3      	bne.n	199aa <le_param_req+0x22>
   199c2:	e7e9      	b.n	19998 <le_param_req+0x10>
   199c4:	20009818 	.word	0x20009818

000199c8 <bt_conn_identity_resolved>:
{
   199c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
   199ca:	78c3      	ldrb	r3, [r0, #3]
{
   199cc:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
   199ce:	b93b      	cbnz	r3, 199e0 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
   199d0:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	for (cb = callback_list; cb; cb = cb->_next) {
   199d4:	4b08      	ldr	r3, [pc, #32]	; (199f8 <bt_conn_identity_resolved+0x30>)
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   199d6:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   199da:	681d      	ldr	r5, [r3, #0]
   199dc:	b91d      	cbnz	r5, 199e6 <bt_conn_identity_resolved+0x1e>
}
   199de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
   199e0:	f100 0697 	add.w	r6, r0, #151	; 0x97
   199e4:	e7f6      	b.n	199d4 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
   199e6:	692b      	ldr	r3, [r5, #16]
   199e8:	b11b      	cbz	r3, 199f2 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   199ea:	463a      	mov	r2, r7
   199ec:	4631      	mov	r1, r6
   199ee:	4620      	mov	r0, r4
   199f0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   199f2:	69ad      	ldr	r5, [r5, #24]
   199f4:	e7f2      	b.n	199dc <bt_conn_identity_resolved+0x14>
   199f6:	bf00      	nop
   199f8:	20009818 	.word	0x20009818

000199fc <bt_conn_security_changed>:
{
   199fc:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
   199fe:	7a43      	ldrb	r3, [r0, #9]
{
   19a00:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
   19a02:	7283      	strb	r3, [r0, #10]
{
   19a04:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
   19a06:	f00f fa52 	bl	28eae <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
   19a0a:	4b06      	ldr	r3, [pc, #24]	; (19a24 <bt_conn_security_changed+0x28>)
   19a0c:	681d      	ldr	r5, [r3, #0]
   19a0e:	b905      	cbnz	r5, 19a12 <bt_conn_security_changed+0x16>
}
   19a10:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
   19a12:	696b      	ldr	r3, [r5, #20]
   19a14:	b11b      	cbz	r3, 19a1e <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
   19a16:	4632      	mov	r2, r6
   19a18:	4620      	mov	r0, r4
   19a1a:	7a61      	ldrb	r1, [r4, #9]
   19a1c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   19a1e:	69ad      	ldr	r5, [r5, #24]
   19a20:	e7f5      	b.n	19a0e <bt_conn_security_changed+0x12>
   19a22:	bf00      	nop
   19a24:	20009818 	.word	0x20009818

00019a28 <bt_conn_cb_register>:
	cb->_next = callback_list;
   19a28:	4b02      	ldr	r3, [pc, #8]	; (19a34 <bt_conn_cb_register+0xc>)
   19a2a:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
   19a2c:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
   19a2e:	6182      	str	r2, [r0, #24]
}
   19a30:	4770      	bx	lr
   19a32:	bf00      	nop
   19a34:	20009818 	.word	0x20009818

00019a38 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   19a38:	b570      	push	{r4, r5, r6, lr}
   19a3a:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   19a3c:	f100 0638 	add.w	r6, r0, #56	; 0x38
   19a40:	2200      	movs	r2, #0
   19a42:	2300      	movs	r3, #0
   19a44:	4630      	mov	r0, r6
   19a46:	f006 fa9d 	bl	1ff84 <net_buf_get>
   19a4a:	4605      	mov	r5, r0
   19a4c:	bb48      	cbnz	r0, 19aa2 <conn_cleanup+0x6a>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   19a4e:	6963      	ldr	r3, [r4, #20]
   19a50:	b173      	cbz	r3, 19a70 <conn_cleanup+0x38>
   19a52:	4918      	ldr	r1, [pc, #96]	; (19ab4 <conn_cleanup+0x7c>)
   19a54:	f240 5304 	movw	r3, #1284	; 0x504
   19a58:	4a17      	ldr	r2, [pc, #92]	; (19ab8 <conn_cleanup+0x80>)
   19a5a:	4818      	ldr	r0, [pc, #96]	; (19abc <conn_cleanup+0x84>)
   19a5c:	f00c fe5e 	bl	2671c <printk>
   19a60:	4817      	ldr	r0, [pc, #92]	; (19ac0 <conn_cleanup+0x88>)
   19a62:	f00c fe5b 	bl	2671c <printk>
   19a66:	f240 5104 	movw	r1, #1284	; 0x504
   19a6a:	4813      	ldr	r0, [pc, #76]	; (19ab8 <conn_cleanup+0x80>)
   19a6c:	f00d f8fb 	bl	26c66 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   19a70:	69e3      	ldr	r3, [r4, #28]
   19a72:	b15b      	cbz	r3, 19a8c <conn_cleanup+0x54>
   19a74:	4913      	ldr	r1, [pc, #76]	; (19ac4 <conn_cleanup+0x8c>)
   19a76:	4811      	ldr	r0, [pc, #68]	; (19abc <conn_cleanup+0x84>)
   19a78:	f240 5305 	movw	r3, #1285	; 0x505
   19a7c:	4a0e      	ldr	r2, [pc, #56]	; (19ab8 <conn_cleanup+0x80>)
   19a7e:	f00c fe4d 	bl	2671c <printk>
   19a82:	f240 5105 	movw	r1, #1285	; 0x505
   19a86:	480c      	ldr	r0, [pc, #48]	; (19ab8 <conn_cleanup+0x80>)
   19a88:	f00d f8ed 	bl	26c66 <assert_post_action>

	bt_conn_reset_rx_state(conn);
   19a8c:	4620      	mov	r0, r4
   19a8e:	f00f f8ef 	bl	28c70 <bt_conn_reset_rx_state>

	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   19a92:	f104 0060 	add.w	r0, r4, #96	; 0x60
   19a96:	2200      	movs	r2, #0
}
   19a98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   19a9c:	2300      	movs	r3, #0
   19a9e:	f00a b9f9 	b.w	23e94 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   19aa2:	6968      	ldr	r0, [r5, #20]
   19aa4:	b108      	cbz	r0, 19aaa <conn_cleanup+0x72>
			tx_free(tx_data(buf)->tx);
   19aa6:	f7ff fe6b 	bl	19780 <tx_free>
		net_buf_unref(buf);
   19aaa:	4628      	mov	r0, r5
   19aac:	f006 fafc 	bl	200a8 <net_buf_unref>
   19ab0:	e7c6      	b.n	19a40 <conn_cleanup+0x8>
   19ab2:	bf00      	nop
   19ab4:	0002f653 	.word	0x0002f653
   19ab8:	0002f610 	.word	0x0002f610
   19abc:	0002cfb2 	.word	0x0002cfb2
   19ac0:	0002f679 	.word	0x0002f679
   19ac4:	0002f68e 	.word	0x0002f68e

00019ac8 <bt_conn_recv>:
{
   19ac8:	b570      	push	{r4, r5, r6, lr}
   19aca:	4616      	mov	r6, r2
   19acc:	4604      	mov	r4, r0
   19ace:	460d      	mov	r5, r1
	tx_notify(conn);
   19ad0:	f00f f81a 	bl	28b08 <tx_notify>
	switch (flags) {
   19ad4:	2e01      	cmp	r6, #1
   19ad6:	d02e      	beq.n	19b36 <bt_conn_recv+0x6e>
   19ad8:	2e02      	cmp	r6, #2
   19ada:	d15b      	bne.n	19b94 <bt_conn_recv+0xcc>
		if (conn->rx) {
   19adc:	6923      	ldr	r3, [r4, #16]
   19ade:	b163      	cbz	r3, 19afa <bt_conn_recv+0x32>
   19ae0:	4b37      	ldr	r3, [pc, #220]	; (19bc0 <bt_conn_recv+0xf8>)
   19ae2:	4938      	ldr	r1, [pc, #224]	; (19bc4 <bt_conn_recv+0xfc>)
			BT_ERR("Unexpected first L2CAP frame");
   19ae4:	4838      	ldr	r0, [pc, #224]	; (19bc8 <bt_conn_recv+0x100>)
   19ae6:	1ac9      	subs	r1, r1, r3
   19ae8:	08c9      	lsrs	r1, r1, #3
   19aea:	0189      	lsls	r1, r1, #6
   19aec:	f041 0101 	orr.w	r1, r1, #1
   19af0:	f00d f91e 	bl	26d30 <log_0>
			bt_conn_reset_rx_state(conn);
   19af4:	4620      	mov	r0, r4
   19af6:	f00f f8bb 	bl	28c70 <bt_conn_reset_rx_state>
		conn->rx = buf;
   19afa:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   19afc:	6923      	ldr	r3, [r4, #16]
   19afe:	8999      	ldrh	r1, [r3, #12]
   19b00:	2901      	cmp	r1, #1
   19b02:	d95b      	bls.n	19bbc <bt_conn_recv+0xf4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   19b04:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   19b06:	7845      	ldrb	r5, [r0, #1]
   19b08:	7802      	ldrb	r2, [r0, #0]
   19b0a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   19b0e:	3204      	adds	r2, #4
   19b10:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   19b12:	4291      	cmp	r1, r2
   19b14:	d352      	bcc.n	19bbc <bt_conn_recv+0xf4>
	if (conn->rx->len > acl_total_len) {
   19b16:	d949      	bls.n	19bac <bt_conn_recv+0xe4>
   19b18:	4829      	ldr	r0, [pc, #164]	; (19bc0 <bt_conn_recv+0xf8>)
   19b1a:	4b2a      	ldr	r3, [pc, #168]	; (19bc4 <bt_conn_recv+0xfc>)
   19b1c:	1a1b      	subs	r3, r3, r0
   19b1e:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   19b20:	019b      	lsls	r3, r3, #6
   19b22:	482a      	ldr	r0, [pc, #168]	; (19bcc <bt_conn_recv+0x104>)
   19b24:	f043 0301 	orr.w	r3, r3, #1
   19b28:	f00d f923 	bl	26d72 <log_2>
		bt_conn_reset_rx_state(conn);
   19b2c:	4620      	mov	r0, r4
}
   19b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   19b32:	f00f b89d 	b.w	28c70 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   19b36:	6920      	ldr	r0, [r4, #16]
   19b38:	b968      	cbnz	r0, 19b56 <bt_conn_recv+0x8e>
   19b3a:	4922      	ldr	r1, [pc, #136]	; (19bc4 <bt_conn_recv+0xfc>)
   19b3c:	4b20      	ldr	r3, [pc, #128]	; (19bc0 <bt_conn_recv+0xf8>)
			BT_ERR("Unexpected L2CAP continuation");
   19b3e:	4824      	ldr	r0, [pc, #144]	; (19bd0 <bt_conn_recv+0x108>)
   19b40:	1ac9      	subs	r1, r1, r3
   19b42:	08c9      	lsrs	r1, r1, #3
   19b44:	0189      	lsls	r1, r1, #6
   19b46:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
   19b4a:	f00d f8f1 	bl	26d30 <log_0>
			bt_conn_reset_rx_state(conn);
   19b4e:	4620      	mov	r0, r4
   19b50:	f00f f88e 	bl	28c70 <bt_conn_reset_rx_state>
   19b54:	e001      	b.n	19b5a <bt_conn_recv+0x92>
		if (!buf->len) {
   19b56:	89ae      	ldrh	r6, [r5, #12]
   19b58:	b926      	cbnz	r6, 19b64 <bt_conn_recv+0x9c>
			net_buf_unref(buf);
   19b5a:	4628      	mov	r0, r5
}
   19b5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   19b60:	f006 baa2 	b.w	200a8 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   19b64:	3008      	adds	r0, #8
   19b66:	f010 fd7a 	bl	2a65e <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   19b6a:	4286      	cmp	r6, r0
   19b6c:	d908      	bls.n	19b80 <bt_conn_recv+0xb8>
   19b6e:	4915      	ldr	r1, [pc, #84]	; (19bc4 <bt_conn_recv+0xfc>)
   19b70:	4b13      	ldr	r3, [pc, #76]	; (19bc0 <bt_conn_recv+0xf8>)
			BT_ERR("Not enough buffer space for L2CAP data");
   19b72:	4818      	ldr	r0, [pc, #96]	; (19bd4 <bt_conn_recv+0x10c>)
   19b74:	1ac9      	subs	r1, r1, r3
   19b76:	08c9      	lsrs	r1, r1, #3
   19b78:	0189      	lsls	r1, r1, #6
   19b7a:	f041 0101 	orr.w	r1, r1, #1
   19b7e:	e7e4      	b.n	19b4a <bt_conn_recv+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19b80:	6920      	ldr	r0, [r4, #16]
   19b82:	89aa      	ldrh	r2, [r5, #12]
   19b84:	68a9      	ldr	r1, [r5, #8]
   19b86:	3008      	adds	r0, #8
   19b88:	f010 fd71 	bl	2a66e <net_buf_simple_add_mem>
		net_buf_unref(buf);
   19b8c:	4628      	mov	r0, r5
   19b8e:	f006 fa8b 	bl	200a8 <net_buf_unref>
		break;
   19b92:	e7b3      	b.n	19afc <bt_conn_recv+0x34>
   19b94:	4a0a      	ldr	r2, [pc, #40]	; (19bc0 <bt_conn_recv+0xf8>)
   19b96:	4b0b      	ldr	r3, [pc, #44]	; (19bc4 <bt_conn_recv+0xfc>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   19b98:	4631      	mov	r1, r6
   19b9a:	1a9b      	subs	r3, r3, r2
   19b9c:	08db      	lsrs	r3, r3, #3
   19b9e:	019b      	lsls	r3, r3, #6
   19ba0:	480d      	ldr	r0, [pc, #52]	; (19bd8 <bt_conn_recv+0x110>)
   19ba2:	f043 0201 	orr.w	r2, r3, #1
   19ba6:	f00d f8d0 	bl	26d4a <log_1>
		bt_conn_reset_rx_state(conn);
   19baa:	e7d0      	b.n	19b4e <bt_conn_recv+0x86>
	conn->rx = NULL;
   19bac:	2200      	movs	r2, #0
	bt_l2cap_recv(conn, buf);
   19bae:	4620      	mov	r0, r4
	conn->rx = NULL;
   19bb0:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
   19bb2:	4619      	mov	r1, r3
}
   19bb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   19bb8:	f000 bef2 	b.w	1a9a0 <bt_l2cap_recv>
}
   19bbc:	bd70      	pop	{r4, r5, r6, pc}
   19bbe:	bf00      	nop
   19bc0:	0002bfe4 	.word	0x0002bfe4
   19bc4:	0002bff4 	.word	0x0002bff4
   19bc8:	0002f6a7 	.word	0x0002f6a7
   19bcc:	0002f727 	.word	0x0002f727
   19bd0:	0002f6c4 	.word	0x0002f6c4
   19bd4:	0002f6e2 	.word	0x0002f6e2
   19bd8:	0002f709 	.word	0x0002f709

00019bdc <bt_conn_send_cb>:
{
   19bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19be0:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   19be2:	7b43      	ldrb	r3, [r0, #13]
{
   19be4:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   19be6:	2b07      	cmp	r3, #7
{
   19be8:	460e      	mov	r6, r1
   19bea:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   19bec:	d00c      	beq.n	19c08 <bt_conn_send_cb+0x2c>
   19bee:	4926      	ldr	r1, [pc, #152]	; (19c88 <bt_conn_send_cb+0xac>)
   19bf0:	4b26      	ldr	r3, [pc, #152]	; (19c8c <bt_conn_send_cb+0xb0>)
		BT_ERR("not connected!");
   19bf2:	4827      	ldr	r0, [pc, #156]	; (19c90 <bt_conn_send_cb+0xb4>)
   19bf4:	1ac9      	subs	r1, r1, r3
   19bf6:	08c9      	lsrs	r1, r1, #3
   19bf8:	0189      	lsls	r1, r1, #6
   19bfa:	f041 0101 	orr.w	r1, r1, #1
   19bfe:	f00d f897 	bl	26d30 <log_0>
			return -ENOTCONN;
   19c02:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19c06:	e01d      	b.n	19c44 <bt_conn_send_cb+0x68>
	if (cb) {
   19c08:	2a00      	cmp	r2, #0
   19c0a:	d03a      	beq.n	19c82 <bt_conn_send_cb+0xa6>
	return z_impl_k_current_get();
   19c0c:	f00b fb3e 	bl	2528c <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   19c10:	4b20      	ldr	r3, [pc, #128]	; (19c94 <bt_conn_send_cb+0xb8>)
   19c12:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   19c14:	4820      	ldr	r0, [pc, #128]	; (19c98 <bt_conn_send_cb+0xbc>)
   19c16:	bf07      	ittee	eq
   19c18:	2200      	moveq	r2, #0
   19c1a:	2300      	moveq	r3, #0
   19c1c:	f04f 32ff 	movne.w	r2, #4294967295
   19c20:	f04f 33ff 	movne.w	r3, #4294967295
   19c24:	f009 fbcc 	bl	233c0 <z_impl_k_queue_get>
   19c28:	4604      	mov	r4, r0
		if (!tx) {
   19c2a:	b968      	cbnz	r0, 19c48 <bt_conn_send_cb+0x6c>
   19c2c:	4b17      	ldr	r3, [pc, #92]	; (19c8c <bt_conn_send_cb+0xb0>)
   19c2e:	4916      	ldr	r1, [pc, #88]	; (19c88 <bt_conn_send_cb+0xac>)
			BT_ERR("Unable to allocate TX context");
   19c30:	481a      	ldr	r0, [pc, #104]	; (19c9c <bt_conn_send_cb+0xc0>)
   19c32:	1ac9      	subs	r1, r1, r3
   19c34:	08c9      	lsrs	r1, r1, #3
   19c36:	0189      	lsls	r1, r1, #6
   19c38:	f041 0101 	orr.w	r1, r1, #1
   19c3c:	f00d f878 	bl	26d30 <log_0>
			return -ENOBUFS;
   19c40:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   19c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   19c48:	7b6b      	ldrb	r3, [r5, #13]
   19c4a:	2b07      	cmp	r3, #7
   19c4c:	d00d      	beq.n	19c6a <bt_conn_send_cb+0x8e>
   19c4e:	4b0f      	ldr	r3, [pc, #60]	; (19c8c <bt_conn_send_cb+0xb0>)
   19c50:	490d      	ldr	r1, [pc, #52]	; (19c88 <bt_conn_send_cb+0xac>)
			BT_WARN("Disconnected while allocating context");
   19c52:	4813      	ldr	r0, [pc, #76]	; (19ca0 <bt_conn_send_cb+0xc4>)
   19c54:	1ac9      	subs	r1, r1, r3
   19c56:	08c9      	lsrs	r1, r1, #3
   19c58:	0189      	lsls	r1, r1, #6
   19c5a:	f041 0102 	orr.w	r1, r1, #2
   19c5e:	f00d f867 	bl	26d30 <log_0>
			tx_free(tx);
   19c62:	4620      	mov	r0, r4
   19c64:	f7ff fd8c 	bl	19780 <tx_free>
   19c68:	e7cb      	b.n	19c02 <bt_conn_send_cb+0x26>
		tx->pending_no_cb = 0U;
   19c6a:	2300      	movs	r3, #0
		tx->user_data = user_data;
   19c6c:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   19c70:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   19c72:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   19c74:	f105 0038 	add.w	r0, r5, #56	; 0x38
   19c78:	4631      	mov	r1, r6
   19c7a:	f006 f9e1 	bl	20040 <net_buf_put>
	return 0;
   19c7e:	2000      	movs	r0, #0
   19c80:	e7e0      	b.n	19c44 <bt_conn_send_cb+0x68>
		tx_data(buf)->tx = NULL;
   19c82:	614a      	str	r2, [r1, #20]
   19c84:	e7f6      	b.n	19c74 <bt_conn_send_cb+0x98>
   19c86:	bf00      	nop
   19c88:	0002bff4 	.word	0x0002bff4
   19c8c:	0002bfe4 	.word	0x0002bfe4
   19c90:	0002f742 	.word	0x0002f742
   19c94:	20009170 	.word	0x20009170
   19c98:	200085d0 	.word	0x200085d0
   19c9c:	0002f751 	.word	0x0002f751
   19ca0:	0002f76f 	.word	0x0002f76f

00019ca4 <bt_conn_prepare_events>:
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   19ca4:	2200      	movs	r2, #0
{
   19ca6:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
   19ca8:	4b18      	ldr	r3, [pc, #96]	; (19d0c <bt_conn_prepare_events+0x68>)
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   19caa:	2101      	movs	r1, #1
{
   19cac:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
   19cae:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   19cb0:	f00c fa4c 	bl	2614c <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   19cb4:	4b16      	ldr	r3, [pc, #88]	; (19d10 <bt_conn_prepare_events+0x6c>)
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   19cb6:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
   19cba:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
   19cbe:	f00e ff20 	bl	28b02 <atomic_get>
   19cc2:	4619      	mov	r1, r3
   19cc4:	b908      	cbnz	r0, 19cca <bt_conn_prepare_events+0x26>
		conn_cleanup(conn);
   19cc6:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
   19cc8:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   19cca:	7b5a      	ldrb	r2, [r3, #13]
   19ccc:	b97a      	cbnz	r2, 19cee <bt_conn_prepare_events+0x4a>
   19cce:	1d1a      	adds	r2, r3, #4
   19cd0:	e8d2 0fef 	ldaex	r0, [r2]
   19cd4:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
   19cd8:	e8c2 cfee 	stlex	lr, ip, [r2]
   19cdc:	f1be 0f00 	cmp.w	lr, #0
   19ce0:	d1f6      	bne.n	19cd0 <bt_conn_prepare_events+0x2c>
   19ce2:	0642      	lsls	r2, r0, #25
   19ce4:	d503      	bpl.n	19cee <bt_conn_prepare_events+0x4a>
		conn_cleanup(conn);
   19ce6:	4618      	mov	r0, r3
   19ce8:	f7ff fea6 	bl	19a38 <conn_cleanup>
   19cec:	e7eb      	b.n	19cc6 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   19cee:	7b4b      	ldrb	r3, [r1, #13]
   19cf0:	2b07      	cmp	r3, #7
   19cf2:	d1e8      	bne.n	19cc6 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   19cf4:	4628      	mov	r0, r5
   19cf6:	4b07      	ldr	r3, [pc, #28]	; (19d14 <bt_conn_prepare_events+0x70>)
   19cf8:	2200      	movs	r2, #0
   19cfa:	2104      	movs	r1, #4
   19cfc:	f00c fa26 	bl	2614c <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   19d00:	2301      	movs	r3, #1
			ev_count++;
   19d02:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   19d04:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   19d08:	e7de      	b.n	19cc8 <bt_conn_prepare_events+0x24>
   19d0a:	bf00      	nop
   19d0c:	200082a0 	.word	0x200082a0
   19d10:	20008b10 	.word	0x20008b10
   19d14:	20008b48 	.word	0x20008b48

00019d18 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   19d18:	b570      	push	{r4, r5, r6, lr}
   19d1a:	4606      	mov	r6, r0
   19d1c:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   19d1e:	480f      	ldr	r0, [pc, #60]	; (19d5c <bt_conn_add_le+0x44>)
   19d20:	2101      	movs	r1, #1
   19d22:	f00e ff17 	bl	28b54 <bt_conn_new>
	if (!conn) {
   19d26:	4604      	mov	r4, r0
   19d28:	b1b0      	cbz	r0, 19d58 <bt_conn_add_le+0x40>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   19d2a:	490d      	ldr	r1, [pc, #52]	; (19d60 <bt_conn_add_le+0x48>)
   19d2c:	3060      	adds	r0, #96	; 0x60
   19d2e:	f009 ff8d 	bl	23c4c <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   19d32:	490c      	ldr	r1, [pc, #48]	; (19d64 <bt_conn_add_le+0x4c>)
   19d34:	f104 0028 	add.w	r0, r4, #40	; 0x28
   19d38:	f009 fe84 	bl	23a44 <k_work_init>
   19d3c:	2207      	movs	r2, #7
   19d3e:	4629      	mov	r1, r5

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   19d40:	7226      	strb	r6, [r4, #8]
   19d42:	f104 0090 	add.w	r0, r4, #144	; 0x90
   19d46:	f00e fc24 	bl	28592 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   19d4a:	2301      	movs	r3, #1
   19d4c:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   19d4e:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   19d50:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   19d52:	4b05      	ldr	r3, [pc, #20]	; (19d68 <bt_conn_add_le+0x50>)
   19d54:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   19d58:	4620      	mov	r0, r4
   19d5a:	bd70      	pop	{r4, r5, r6, pc}
   19d5c:	20008b10 	.word	0x20008b10
   19d60:	0001a32d 	.word	0x0001a32d
   19d64:	00028b4f 	.word	0x00028b4f
   19d68:	00280018 	.word	0x00280018

00019d6c <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
   19d6c:	b508      	push	{r3, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   19d6e:	30c0      	adds	r0, #192	; 0xc0
   19d70:	e8d0 3fef 	ldaex	r3, [r0]
   19d74:	1e5a      	subs	r2, r3, #1
   19d76:	e8c0 2fe1 	stlex	r1, r2, [r0]
   19d7a:	2900      	cmp	r1, #0
   19d7c:	d1f8      	bne.n	19d70 <bt_conn_unref+0x4>
	atomic_val_t old = atomic_dec(&conn->ref);

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	__ASSERT(old > 0, "Conn reference counter is 0");
   19d7e:	2b00      	cmp	r3, #0
   19d80:	dc10      	bgt.n	19da4 <bt_conn_unref+0x38>
   19d82:	f240 7361 	movw	r3, #1889	; 0x761
   19d86:	4908      	ldr	r1, [pc, #32]	; (19da8 <bt_conn_unref+0x3c>)
   19d88:	4a08      	ldr	r2, [pc, #32]	; (19dac <bt_conn_unref+0x40>)
   19d8a:	4809      	ldr	r0, [pc, #36]	; (19db0 <bt_conn_unref+0x44>)
   19d8c:	f00c fcc6 	bl	2671c <printk>
   19d90:	4808      	ldr	r0, [pc, #32]	; (19db4 <bt_conn_unref+0x48>)
   19d92:	f00c fcc3 	bl	2671c <printk>

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    atomic_get(&conn->ref) == 0) {
		bt_le_adv_resume();
	}
}
   19d96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT(old > 0, "Conn reference counter is 0");
   19d9a:	f240 7161 	movw	r1, #1889	; 0x761
   19d9e:	4803      	ldr	r0, [pc, #12]	; (19dac <bt_conn_unref+0x40>)
   19da0:	f00c bf61 	b.w	26c66 <assert_post_action>
}
   19da4:	bd08      	pop	{r3, pc}
   19da6:	bf00      	nop
   19da8:	0002f795 	.word	0x0002f795
   19dac:	0002f610 	.word	0x0002f610
   19db0:	0002cfb2 	.word	0x0002cfb2
   19db4:	0002f79d 	.word	0x0002f79d

00019db8 <bt_conn_lookup_handle>:
{
   19db8:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   19dba:	2101      	movs	r1, #1
{
   19dbc:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   19dbe:	4803      	ldr	r0, [pc, #12]	; (19dcc <bt_conn_lookup_handle+0x14>)
   19dc0:	f00e ff9f 	bl	28d02 <conn_lookup_handle>
}
   19dc4:	2800      	cmp	r0, #0
   19dc6:	bf38      	it	cc
   19dc8:	2000      	movcc	r0, #0
   19dca:	bd08      	pop	{r3, pc}
   19dcc:	20008b10 	.word	0x20008b10

00019dd0 <bt_conn_set_state>:
{
   19dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   19dd4:	7b46      	ldrb	r6, [r0, #13]
{
   19dd6:	4604      	mov	r4, r0
	if (conn->state == state) {
   19dd8:	428e      	cmp	r6, r1
{
   19dda:	460d      	mov	r5, r1
	if (conn->state == state) {
   19ddc:	d115      	bne.n	19e0a <bt_conn_set_state+0x3a>
   19dde:	4b73      	ldr	r3, [pc, #460]	; (19fac <bt_conn_set_state+0x1dc>)
   19de0:	4a73      	ldr	r2, [pc, #460]	; (19fb0 <bt_conn_set_state+0x1e0>)
   19de2:	2e08      	cmp	r6, #8
   19de4:	eba2 0203 	sub.w	r2, r2, r3
   19de8:	bf98      	it	ls
   19dea:	4b72      	ldrls	r3, [pc, #456]	; (19fb4 <bt_conn_set_state+0x1e4>)
   19dec:	ea4f 02d2 	mov.w	r2, r2, lsr #3
		BT_WARN("no transition %s", state2str(state));
   19df0:	ea4f 1282 	mov.w	r2, r2, lsl #6
   19df4:	bf94      	ite	ls
   19df6:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
   19dfa:	496f      	ldrhi	r1, [pc, #444]	; (19fb8 <bt_conn_set_state+0x1e8>)
   19dfc:	486f      	ldr	r0, [pc, #444]	; (19fbc <bt_conn_set_state+0x1ec>)
   19dfe:	f042 0202 	orr.w	r2, r2, #2
}
   19e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("no valid (%u) state was set", state);
   19e06:	f00c bfa0 	b.w	26d4a <log_1>
	conn->state = state;
   19e0a:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   19e0c:	b166      	cbz	r6, 19e28 <bt_conn_set_state+0x58>
   19e0e:	2e06      	cmp	r6, #6
   19e10:	d00d      	beq.n	19e2e <bt_conn_set_state+0x5e>
	switch (conn->state) {
   19e12:	7b63      	ldrb	r3, [r4, #13]
   19e14:	2b08      	cmp	r3, #8
   19e16:	f200 80be 	bhi.w	19f96 <bt_conn_set_state+0x1c6>
   19e1a:	e8df f003 	tbb	[pc, r3]
   19e1e:	0f36      	.short	0x0f36
   19e20:	34343434 	.word	0x34343434
   19e24:	267f      	.short	0x267f
   19e26:	34          	.byte	0x34
   19e27:	00          	.byte	0x00
		bt_conn_ref(conn);
   19e28:	f00e ff54 	bl	28cd4 <bt_conn_ref>
		break;
   19e2c:	e7f1      	b.n	19e12 <bt_conn_set_state+0x42>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   19e2e:	7883      	ldrb	r3, [r0, #2]
   19e30:	2b01      	cmp	r3, #1
   19e32:	d1ee      	bne.n	19e12 <bt_conn_set_state+0x42>
			k_work_cancel_delayable(&conn->deferred_work);
   19e34:	3060      	adds	r0, #96	; 0x60
   19e36:	f00a f833 	bl	23ea0 <k_work_cancel_delayable>
   19e3a:	e7ea      	b.n	19e12 <bt_conn_set_state+0x42>
		tx->pending_no_cb = 0U;
   19e3c:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   19e3e:	4d60      	ldr	r5, [pc, #384]	; (19fc0 <bt_conn_set_state+0x1f0>)
	__asm__ volatile(
   19e40:	f04f 0320 	mov.w	r3, #32
   19e44:	f3ef 8211 	mrs	r2, BASEPRI
   19e48:	f383 8811 	msr	BASEPRI, r3
   19e4c:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   19e50:	69e3      	ldr	r3, [r4, #28]
   19e52:	2b00      	cmp	r3, #0
   19e54:	d07f      	beq.n	19f56 <bt_conn_set_state+0x186>
			conn->pending_no_cb--;
   19e56:	3b01      	subs	r3, #1
   19e58:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   19e5a:	f382 8811 	msr	BASEPRI, r2
   19e5e:	f3bf 8f6f 	isb	sy
   19e62:	4628      	mov	r0, r5
   19e64:	f009 fb1a 	bl	2349c <z_impl_k_sem_give>
}
   19e68:	e7ea      	b.n	19e40 <bt_conn_set_state+0x70>
		if (conn->type == BT_CONN_TYPE_SCO) {
   19e6a:	78a3      	ldrb	r3, [r4, #2]
   19e6c:	2b04      	cmp	r3, #4
   19e6e:	d00a      	beq.n	19e86 <bt_conn_set_state+0xb6>
	z_impl_k_queue_init(queue);
   19e70:	f104 0038 	add.w	r0, r4, #56	; 0x38
   19e74:	f011 fd95 	bl	2b9a2 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   19e78:	2100      	movs	r1, #0
   19e7a:	4852      	ldr	r0, [pc, #328]	; (19fc4 <bt_conn_set_state+0x1f4>)
   19e7c:	f00c fac2 	bl	26404 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   19e80:	2300      	movs	r3, #0
	list->tail = NULL;
   19e82:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
}
   19e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   19e8a:	78a3      	ldrb	r3, [r4, #2]
   19e8c:	2b04      	cmp	r3, #4
   19e8e:	d104      	bne.n	19e9a <bt_conn_set_state+0xca>
			bt_conn_unref(conn);
   19e90:	4620      	mov	r0, r4
}
   19e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			bt_conn_unref(conn);
   19e96:	f7ff bf69 	b.w	19d6c <bt_conn_unref>
		switch (old_state) {
   19e9a:	2e08      	cmp	r6, #8
   19e9c:	d8f3      	bhi.n	19e86 <bt_conn_set_state+0xb6>
   19e9e:	a301      	add	r3, pc, #4	; (adr r3, 19ea4 <bt_conn_set_state+0xd4>)
   19ea0:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   19ea4:	00019f09 	.word	0x00019f09
   19ea8:	00019ec9 	.word	0x00019ec9
   19eac:	00019efb 	.word	0x00019efb
   19eb0:	00019e91 	.word	0x00019e91
   19eb4:	00019e91 	.word	0x00019e91
   19eb8:	00019efb 	.word	0x00019efb
   19ebc:	00019efb 	.word	0x00019efb
   19ec0:	00019f09 	.word	0x00019f09
   19ec4:	00019f09 	.word	0x00019f09
			tx_notify(conn);
   19ec8:	4620      	mov	r0, r4
   19eca:	f00e fe1d 	bl	28b08 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   19ece:	78a3      	ldrb	r3, [r4, #2]
   19ed0:	2b01      	cmp	r3, #1
   19ed2:	d103      	bne.n	19edc <bt_conn_set_state+0x10c>
				k_work_cancel_delayable(&conn->deferred_work);
   19ed4:	f104 0060 	add.w	r0, r4, #96	; 0x60
   19ed8:	f009 ffe2 	bl	23ea0 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19edc:	3404      	adds	r4, #4
   19ede:	e8d4 3fef 	ldaex	r3, [r4]
   19ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19ee6:	e8c4 3fe2 	stlex	r2, r3, [r4]
   19eea:	2a00      	cmp	r2, #0
   19eec:	d1f7      	bne.n	19ede <bt_conn_set_state+0x10e>
}
   19eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19ef2:	2100      	movs	r1, #0
   19ef4:	4833      	ldr	r0, [pc, #204]	; (19fc4 <bt_conn_set_state+0x1f4>)
   19ef6:	f00c ba85 	b.w	26404 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   19efa:	7b23      	ldrb	r3, [r4, #12]
   19efc:	2b00      	cmp	r3, #0
   19efe:	d0c7      	beq.n	19e90 <bt_conn_set_state+0xc0>
				notify_connected(conn);
   19f00:	4620      	mov	r0, r4
   19f02:	f7ff fc47 	bl	19794 <notify_connected>
   19f06:	e7c3      	b.n	19e90 <bt_conn_set_state+0xc0>
   19f08:	4a29      	ldr	r2, [pc, #164]	; (19fb0 <bt_conn_set_state+0x1e0>)
   19f0a:	4b28      	ldr	r3, [pc, #160]	; (19fac <bt_conn_set_state+0x1dc>)
			BT_WARN("Invalid (%u) old state", state);
   19f0c:	4629      	mov	r1, r5
   19f0e:	1ad2      	subs	r2, r2, r3
   19f10:	08d2      	lsrs	r2, r2, #3
   19f12:	0192      	lsls	r2, r2, #6
   19f14:	482c      	ldr	r0, [pc, #176]	; (19fc8 <bt_conn_set_state+0x1f8>)
   19f16:	f042 0202 	orr.w	r2, r2, #2
   19f1a:	e772      	b.n	19e02 <bt_conn_set_state+0x32>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   19f1c:	78a3      	ldrb	r3, [r4, #2]
   19f1e:	2b01      	cmp	r3, #1
   19f20:	d1b1      	bne.n	19e86 <bt_conn_set_state+0xb6>
					K_MSEC(10 * bt_dev.create_param.timeout));
   19f22:	210a      	movs	r1, #10
   19f24:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   19f28:	f240 36e7 	movw	r6, #999	; 0x3e7
   19f2c:	2700      	movs	r7, #0
   19f2e:	4b27      	ldr	r3, [pc, #156]	; (19fcc <bt_conn_set_state+0x1fc>)
   19f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19f34:	8a9b      	ldrh	r3, [r3, #20]
   19f36:	4359      	muls	r1, r3
   19f38:	fbc0 6701 	smlal	r6, r7, r0, r1
   19f3c:	2300      	movs	r3, #0
   19f3e:	4630      	mov	r0, r6
   19f40:	4639      	mov	r1, r7
   19f42:	f7f6 f97d 	bl	10240 <__aeabi_uldivmod>
   19f46:	4602      	mov	r2, r0
   19f48:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   19f4a:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   19f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_work_schedule(&conn->deferred_work,
   19f52:	f009 bf23 	b.w	23d9c <k_work_schedule>
Z_GENLIST_IS_EMPTY(slist)
   19f56:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   19f58:	b128      	cbz	r0, 19f66 <bt_conn_set_state+0x196>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19f5a:	69a1      	ldr	r1, [r4, #24]
   19f5c:	6803      	ldr	r3, [r0, #0]
   19f5e:	4288      	cmp	r0, r1
	list->head = node;
   19f60:	6163      	str	r3, [r4, #20]
	list->tail = node;
   19f62:	bf08      	it	eq
   19f64:	61a3      	streq	r3, [r4, #24]
   19f66:	f382 8811 	msr	BASEPRI, r2
   19f6a:	f3bf 8f6f 	isb	sy
		if (!node) {
   19f6e:	2800      	cmp	r0, #0
   19f70:	d089      	beq.n	19e86 <bt_conn_set_state+0xb6>
	__asm__ volatile(
   19f72:	f04f 0220 	mov.w	r2, #32
   19f76:	f3ef 8311 	mrs	r3, BASEPRI
   19f7a:	f382 8811 	msr	BASEPRI, r2
   19f7e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   19f82:	68c2      	ldr	r2, [r0, #12]
   19f84:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   19f86:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   19f88:	f383 8811 	msr	BASEPRI, r3
   19f8c:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   19f90:	f7ff fbf6 	bl	19780 <tx_free>
   19f94:	e765      	b.n	19e62 <bt_conn_set_state+0x92>
   19f96:	4a06      	ldr	r2, [pc, #24]	; (19fb0 <bt_conn_set_state+0x1e0>)
   19f98:	4b04      	ldr	r3, [pc, #16]	; (19fac <bt_conn_set_state+0x1dc>)
		BT_WARN("no valid (%u) state was set", state);
   19f9a:	4629      	mov	r1, r5
   19f9c:	1ad2      	subs	r2, r2, r3
   19f9e:	08d2      	lsrs	r2, r2, #3
   19fa0:	0192      	lsls	r2, r2, #6
   19fa2:	480b      	ldr	r0, [pc, #44]	; (19fd0 <bt_conn_set_state+0x200>)
   19fa4:	f042 0202 	orr.w	r2, r2, #2
   19fa8:	e72b      	b.n	19e02 <bt_conn_set_state+0x32>
   19faa:	bf00      	nop
   19fac:	0002bfe4 	.word	0x0002bfe4
   19fb0:	0002bff4 	.word	0x0002bff4
   19fb4:	0002c5bc 	.word	0x0002c5bc
   19fb8:	0002f7bb 	.word	0x0002f7bb
   19fbc:	0002f7c5 	.word	0x0002f7c5
   19fc0:	200080d0 	.word	0x200080d0
   19fc4:	200082a0 	.word	0x200082a0
   19fc8:	0002f7d6 	.word	0x0002f7d6
   19fcc:	20008000 	.word	0x20008000
   19fd0:	0002f7ed 	.word	0x0002f7ed

00019fd4 <bt_conn_lookup_addr_le>:
{
   19fd4:	b570      	push	{r4, r5, r6, lr}
   19fd6:	4605      	mov	r5, r0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19fd8:	480c      	ldr	r0, [pc, #48]	; (1a00c <bt_conn_lookup_addr_le+0x38>)
{
   19fda:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19fdc:	f00e fe7a 	bl	28cd4 <bt_conn_ref>
		if (!conn) {
   19fe0:	4604      	mov	r4, r0
   19fe2:	b128      	cbz	r0, 19ff0 <bt_conn_lookup_addr_le+0x1c>
		if (conn->type != BT_CONN_TYPE_LE) {
   19fe4:	7883      	ldrb	r3, [r0, #2]
   19fe6:	2b01      	cmp	r3, #1
   19fe8:	d004      	beq.n	19ff4 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   19fea:	f7ff febf 	bl	19d6c <bt_conn_unref>
	return NULL;
   19fee:	2400      	movs	r4, #0
}
   19ff0:	4620      	mov	r0, r4
   19ff2:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   19ff4:	4629      	mov	r1, r5
   19ff6:	4632      	mov	r2, r6
   19ff8:	f00e fe4c 	bl	28c94 <bt_conn_is_peer_addr_le>
   19ffc:	4605      	mov	r5, r0
   19ffe:	2800      	cmp	r0, #0
   1a000:	d1f6      	bne.n	19ff0 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   1a002:	4620      	mov	r0, r4
   1a004:	f7ff feb2 	bl	19d6c <bt_conn_unref>
	return NULL;
   1a008:	462c      	mov	r4, r5
			continue;
   1a00a:	e7f1      	b.n	19ff0 <bt_conn_lookup_addr_le+0x1c>
   1a00c:	20008b10 	.word	0x20008b10

0001a010 <bt_conn_exists_le>:
{
   1a010:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1a012:	f7ff ffdf 	bl	19fd4 <bt_conn_lookup_addr_le>
	if (conn) {
   1a016:	4604      	mov	r4, r0
   1a018:	b1b0      	cbz	r0, 1a048 <bt_conn_exists_le+0x38>
   1a01a:	4b0c      	ldr	r3, [pc, #48]	; (1a04c <bt_conn_exists_le+0x3c>)
   1a01c:	4a0c      	ldr	r2, [pc, #48]	; (1a050 <bt_conn_exists_le+0x40>)
   1a01e:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
   1a020:	7b43      	ldrb	r3, [r0, #13]
   1a022:	08d2      	lsrs	r2, r2, #3
   1a024:	2b08      	cmp	r3, #8
   1a026:	bf98      	it	ls
   1a028:	490a      	ldrls	r1, [pc, #40]	; (1a054 <bt_conn_exists_le+0x44>)
   1a02a:	ea4f 1282 	mov.w	r2, r2, lsl #6
   1a02e:	bf94      	ite	ls
   1a030:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
   1a034:	4908      	ldrhi	r1, [pc, #32]	; (1a058 <bt_conn_exists_le+0x48>)
   1a036:	4809      	ldr	r0, [pc, #36]	; (1a05c <bt_conn_exists_le+0x4c>)
   1a038:	f042 0202 	orr.w	r2, r2, #2
   1a03c:	f00c fe85 	bl	26d4a <log_1>
		bt_conn_unref(conn);
   1a040:	4620      	mov	r0, r4
   1a042:	f7ff fe93 	bl	19d6c <bt_conn_unref>
		return true;
   1a046:	2001      	movs	r0, #1
}
   1a048:	bd10      	pop	{r4, pc}
   1a04a:	bf00      	nop
   1a04c:	0002bfe4 	.word	0x0002bfe4
   1a050:	0002bff4 	.word	0x0002bff4
   1a054:	0002c5bc 	.word	0x0002c5bc
   1a058:	0002f7bb 	.word	0x0002f7bb
   1a05c:	0002f809 	.word	0x0002f809

0001a060 <bt_conn_lookup_state_le>:
{
   1a060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a062:	4605      	mov	r5, r0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a064:	480e      	ldr	r0, [pc, #56]	; (1a0a0 <bt_conn_lookup_state_le+0x40>)
{
   1a066:	460e      	mov	r6, r1
   1a068:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a06a:	f00e fe33 	bl	28cd4 <bt_conn_ref>
		if (!conn) {
   1a06e:	4604      	mov	r4, r0
   1a070:	b1a0      	cbz	r0, 1a09c <bt_conn_lookup_state_le+0x3c>
		if (conn->type != BT_CONN_TYPE_LE) {
   1a072:	7883      	ldrb	r3, [r0, #2]
   1a074:	2b01      	cmp	r3, #1
   1a076:	d003      	beq.n	1a080 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
   1a078:	f7ff fe78 	bl	19d6c <bt_conn_unref>
	return NULL;
   1a07c:	2400      	movs	r4, #0
			continue;
   1a07e:	e00d      	b.n	1a09c <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1a080:	b136      	cbz	r6, 1a090 <bt_conn_lookup_state_le+0x30>
   1a082:	4632      	mov	r2, r6
   1a084:	4629      	mov	r1, r5
   1a086:	f00e fe05 	bl	28c94 <bt_conn_is_peer_addr_le>
   1a08a:	b908      	cbnz	r0, 1a090 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1a08c:	4620      	mov	r0, r4
   1a08e:	e7f3      	b.n	1a078 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   1a090:	7b63      	ldrb	r3, [r4, #13]
   1a092:	42bb      	cmp	r3, r7
   1a094:	d1fa      	bne.n	1a08c <bt_conn_lookup_state_le+0x2c>
   1a096:	7a23      	ldrb	r3, [r4, #8]
   1a098:	42ab      	cmp	r3, r5
   1a09a:	d1f7      	bne.n	1a08c <bt_conn_lookup_state_le+0x2c>
}
   1a09c:	4620      	mov	r0, r4
   1a09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a0a0:	20008b10 	.word	0x20008b10

0001a0a4 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   1a0a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a0a8:	4604      	mov	r4, r0
   1a0aa:	4850      	ldr	r0, [pc, #320]	; (1a1ec <bt_conn_le_create+0x148>)
   1a0ac:	460f      	mov	r7, r1
   1a0ae:	4615      	mov	r5, r2
   1a0b0:	461e      	mov	r6, r3
   1a0b2:	f00e fd26 	bl	28b02 <atomic_get>
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a0b6:	0781      	lsls	r1, r0, #30
   1a0b8:	d405      	bmi.n	1a0c6 <bt_conn_le_create+0x22>
		return -EAGAIN;
   1a0ba:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   1a0be:	4628      	mov	r0, r5
   1a0c0:	b002      	add	sp, #8
   1a0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   1a0c6:	4610      	mov	r0, r2
   1a0c8:	f00e fbc3 	bl	28852 <bt_le_conn_params_valid>
   1a0cc:	b910      	cbnz	r0, 1a0d4 <bt_conn_le_create+0x30>
		return -EINVAL;
   1a0ce:	f06f 0515 	mvn.w	r5, #21
   1a0d2:	e7f4      	b.n	1a0be <bt_conn_le_create+0x1a>
   1a0d4:	4845      	ldr	r0, [pc, #276]	; (1a1ec <bt_conn_le_create+0x148>)
   1a0d6:	f00e fd14 	bl	28b02 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1a0da:	0642      	lsls	r2, r0, #25
   1a0dc:	d4ed      	bmi.n	1a0ba <bt_conn_le_create+0x16>
   1a0de:	4843      	ldr	r0, [pc, #268]	; (1a1ec <bt_conn_le_create+0x148>)
   1a0e0:	f00e fd0f 	bl	28b02 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   1a0e4:	0503      	lsls	r3, r0, #20
   1a0e6:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   1a0ea:	d479      	bmi.n	1a1e0 <bt_conn_le_create+0x13c>
	if (!bt_id_scan_random_addr_check()) {
   1a0ec:	f00e fcbf 	bl	28a6e <bt_id_scan_random_addr_check>
   1a0f0:	2800      	cmp	r0, #0
   1a0f2:	d0ec      	beq.n	1a0ce <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   1a0f4:	4621      	mov	r1, r4
   1a0f6:	4640      	mov	r0, r8
   1a0f8:	f7ff ff8a 	bl	1a010 <bt_conn_exists_le>
   1a0fc:	2800      	cmp	r0, #0
   1a0fe:	d1e6      	bne.n	1a0ce <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   1a100:	7823      	ldrb	r3, [r4, #0]
   1a102:	3b02      	subs	r3, #2
   1a104:	2b01      	cmp	r3, #1
   1a106:	d84a      	bhi.n	1a19e <bt_conn_le_create+0xfa>
   1a108:	2207      	movs	r2, #7
   1a10a:	4621      	mov	r1, r4
   1a10c:	4668      	mov	r0, sp
   1a10e:	f00e fa40 	bl	28592 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   1a112:	f89d 3000 	ldrb.w	r3, [sp]
   1a116:	3b02      	subs	r3, #2
   1a118:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   1a11c:	4669      	mov	r1, sp
   1a11e:	2000      	movs	r0, #0
   1a120:	f7ff fdfa 	bl	19d18 <bt_conn_add_le>
	if (!conn) {
   1a124:	4604      	mov	r4, r0
   1a126:	2800      	cmp	r0, #0
   1a128:	d05d      	beq.n	1a1e6 <bt_conn_le_create+0x142>
	conn->le.interval_min = param->interval_min;
   1a12a:	882b      	ldrh	r3, [r5, #0]
   1a12c:	f8a0 30a8 	strh.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
   1a130:	886b      	ldrh	r3, [r5, #2]
   1a132:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
	conn->le.latency = param->latency;
   1a136:	88ab      	ldrh	r3, [r5, #4]
   1a138:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
	conn->le.timeout = param->timeout;
   1a13c:	88eb      	ldrh	r3, [r5, #6]
	bt_dev.create_param = *param;
   1a13e:	4d2c      	ldr	r5, [pc, #176]	; (1a1f0 <bt_conn_le_create+0x14c>)
	conn->le.timeout = param->timeout;
   1a140:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
	bt_dev.create_param = *param;
   1a144:	f105 0c08 	add.w	ip, r5, #8
   1a148:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1a14c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   1a150:	8aab      	ldrh	r3, [r5, #20]
   1a152:	462a      	mov	r2, r5
	bt_dev.create_param.timeout =
   1a154:	2b00      	cmp	r3, #0
   1a156:	bf08      	it	eq
   1a158:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   1a15c:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   1a15e:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   1a160:	b903      	cbnz	r3, 1a164 <bt_conn_le_create+0xc0>
   1a162:	89ab      	ldrh	r3, [r5, #12]
   1a164:	8213      	strh	r3, [r2, #16]
		(bt_dev.create_param.window_coded != 0) ?
   1a166:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
   1a168:	b903      	cbnz	r3, 1a16c <bt_conn_le_create+0xc8>
   1a16a:	89d3      	ldrh	r3, [r2, #14]
   1a16c:	8253      	strh	r3, [r2, #18]
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1a16e:	f892 30e8 	ldrb.w	r3, [r2, #232]	; 0xe8
   1a172:	b11b      	cbz	r3, 1a17c <bt_conn_le_create+0xd8>
   1a174:	f892 20e9 	ldrb.w	r2, [r2, #233]	; 0xe9
   1a178:	429a      	cmp	r2, r3
   1a17a:	d919      	bls.n	1a1b0 <bt_conn_le_create+0x10c>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1a17c:	2102      	movs	r1, #2
   1a17e:	4620      	mov	r0, r4
   1a180:	f7ff fe26 	bl	19dd0 <bt_conn_set_state>
		err = bt_le_scan_update(true);
   1a184:	2001      	movs	r0, #1
   1a186:	f7fe fedd 	bl	18f44 <bt_le_scan_update>
		if (err) {
   1a18a:	4605      	mov	r5, r0
   1a18c:	b330      	cbz	r0, 1a1dc <bt_conn_le_create+0x138>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a18e:	4620      	mov	r0, r4
   1a190:	2100      	movs	r1, #0
   1a192:	f7ff fe1d 	bl	19dd0 <bt_conn_set_state>
			bt_conn_unref(conn);
   1a196:	4620      	mov	r0, r4
   1a198:	f7ff fde8 	bl	19d6c <bt_conn_unref>
			return err;
   1a19c:	e78f      	b.n	1a0be <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   1a19e:	4621      	mov	r1, r4
   1a1a0:	f00e fc4b 	bl	28a3a <bt_lookup_id_addr>
   1a1a4:	2207      	movs	r2, #7
   1a1a6:	4601      	mov	r1, r0
   1a1a8:	4668      	mov	r0, sp
   1a1aa:	f00e f9f2 	bl	28592 <memcpy>
}
   1a1ae:	e7b5      	b.n	1a11c <bt_conn_le_create+0x78>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   1a1b0:	2106      	movs	r1, #6
   1a1b2:	4620      	mov	r0, r4
   1a1b4:	f7ff fe0c 	bl	19dd0 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   1a1b8:	4620      	mov	r0, r4
   1a1ba:	f00e fb2d 	bl	28818 <bt_le_create_conn>
	if (err) {
   1a1be:	4605      	mov	r5, r0
   1a1c0:	b160      	cbz	r0, 1a1dc <bt_conn_le_create+0x138>
		conn->err = 0;
   1a1c2:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a1c4:	4620      	mov	r0, r4
   1a1c6:	4631      	mov	r1, r6
		conn->err = 0;
   1a1c8:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a1ca:	f7ff fe01 	bl	19dd0 <bt_conn_set_state>
		bt_conn_unref(conn);
   1a1ce:	4620      	mov	r0, r4
   1a1d0:	f7ff fdcc 	bl	19d6c <bt_conn_unref>
		bt_le_scan_update(false);
   1a1d4:	4630      	mov	r0, r6
   1a1d6:	f7fe feb5 	bl	18f44 <bt_le_scan_update>
		return err;
   1a1da:	e770      	b.n	1a0be <bt_conn_le_create+0x1a>
	*ret_conn = conn;
   1a1dc:	6034      	str	r4, [r6, #0]
	return 0;
   1a1de:	e76e      	b.n	1a0be <bt_conn_le_create+0x1a>
		return -EALREADY;
   1a1e0:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1a1e4:	e76b      	b.n	1a0be <bt_conn_le_create+0x1a>
		return -ENOMEM;
   1a1e6:	f06f 050b 	mvn.w	r5, #11
   1a1ea:	e768      	b.n	1a0be <bt_conn_le_create+0x1a>
   1a1ec:	20008098 	.word	0x20008098
   1a1f0:	20008000 	.word	0x20008000

0001a1f4 <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   1a1f4:	b570      	push	{r4, r5, r6, lr}
   1a1f6:	4606      	mov	r6, r0
   1a1f8:	4834      	ldr	r0, [pc, #208]	; (1a2cc <bt_le_set_auto_conn+0xd8>)
   1a1fa:	460d      	mov	r5, r1
   1a1fc:	f00e fc81 	bl	28b02 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a200:	0780      	lsls	r0, r0, #30
   1a202:	d55c      	bpl.n	1a2be <bt_le_set_auto_conn+0xca>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   1a204:	b929      	cbnz	r1, 1a212 <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
   1a206:	f00e fc32 	bl	28a6e <bt_id_scan_random_addr_check>
   1a20a:	b940      	cbnz	r0, 1a21e <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   1a20c:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   1a210:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   1a212:	4608      	mov	r0, r1
   1a214:	f00e fb1d 	bl	28852 <bt_le_conn_params_valid>
   1a218:	2800      	cmp	r0, #0
   1a21a:	d1f4      	bne.n	1a206 <bt_le_set_auto_conn+0x12>
   1a21c:	e7f6      	b.n	1a20c <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   1a21e:	4631      	mov	r1, r6
   1a220:	2000      	movs	r0, #0
   1a222:	f7ff fed7 	bl	19fd4 <bt_conn_lookup_addr_le>
	if (!conn) {
   1a226:	4604      	mov	r4, r0
   1a228:	b928      	cbnz	r0, 1a236 <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   1a22a:	4631      	mov	r1, r6
   1a22c:	f7ff fd74 	bl	19d18 <bt_conn_add_le>
		if (!conn) {
   1a230:	4604      	mov	r4, r0
   1a232:	2800      	cmp	r0, #0
   1a234:	d046      	beq.n	1a2c4 <bt_le_set_auto_conn+0xd0>
	if (param) {
   1a236:	1d23      	adds	r3, r4, #4
   1a238:	b365      	cbz	r5, 1a294 <bt_le_set_auto_conn+0xa0>
	conn->le.interval_min = param->interval_min;
   1a23a:	882a      	ldrh	r2, [r5, #0]
   1a23c:	f8a4 20a8 	strh.w	r2, [r4, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
   1a240:	886a      	ldrh	r2, [r5, #2]
   1a242:	f8a4 20aa 	strh.w	r2, [r4, #170]	; 0xaa
	conn->le.latency = param->latency;
   1a246:	88aa      	ldrh	r2, [r5, #4]
   1a248:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
	conn->le.timeout = param->timeout;
   1a24c:	88ea      	ldrh	r2, [r5, #6]
   1a24e:	f8a4 20ae 	strh.w	r2, [r4, #174]	; 0xae
   1a252:	e8d3 2fef 	ldaex	r2, [r3]
   1a256:	f042 0101 	orr.w	r1, r2, #1
   1a25a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1a25e:	2800      	cmp	r0, #0
   1a260:	d1f7      	bne.n	1a252 <bt_le_set_auto_conn+0x5e>
		if (!atomic_test_and_set_bit(conn->flags,
   1a262:	07d1      	lsls	r1, r2, #31
   1a264:	d402      	bmi.n	1a26c <bt_le_set_auto_conn+0x78>
			bt_conn_ref(conn);
   1a266:	4620      	mov	r0, r4
   1a268:	f00e fd34 	bl	28cd4 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   1a26c:	7b63      	ldrb	r3, [r4, #13]
   1a26e:	b963      	cbnz	r3, 1a28a <bt_le_set_auto_conn+0x96>
   1a270:	4816      	ldr	r0, [pc, #88]	; (1a2cc <bt_le_set_auto_conn+0xd8>)
   1a272:	f00e fc46 	bl	28b02 <atomic_get>
   1a276:	0783      	lsls	r3, r0, #30
   1a278:	d507      	bpl.n	1a28a <bt_le_set_auto_conn+0x96>
		if (param) {
   1a27a:	b11d      	cbz	r5, 1a284 <bt_le_set_auto_conn+0x90>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1a27c:	2102      	movs	r1, #2
   1a27e:	4620      	mov	r0, r4
   1a280:	f7ff fda6 	bl	19dd0 <bt_conn_set_state>
		bt_le_scan_update(false);
   1a284:	2000      	movs	r0, #0
   1a286:	f7fe fe5d 	bl	18f44 <bt_le_scan_update>
	bt_conn_unref(conn);
   1a28a:	4620      	mov	r0, r4
   1a28c:	f7ff fd6e 	bl	19d6c <bt_conn_unref>
	return 0;
   1a290:	2000      	movs	r0, #0
   1a292:	e7bd      	b.n	1a210 <bt_le_set_auto_conn+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a294:	e8d3 2fef 	ldaex	r2, [r3]
   1a298:	f022 0101 	bic.w	r1, r2, #1
   1a29c:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1a2a0:	2800      	cmp	r0, #0
   1a2a2:	d1f7      	bne.n	1a294 <bt_le_set_auto_conn+0xa0>
		if (atomic_test_and_clear_bit(conn->flags,
   1a2a4:	07d2      	lsls	r2, r2, #31
   1a2a6:	d5e1      	bpl.n	1a26c <bt_le_set_auto_conn+0x78>
			bt_conn_unref(conn);
   1a2a8:	4620      	mov	r0, r4
   1a2aa:	f7ff fd5f 	bl	19d6c <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
   1a2ae:	7b63      	ldrb	r3, [r4, #13]
   1a2b0:	2b02      	cmp	r3, #2
   1a2b2:	d1db      	bne.n	1a26c <bt_le_set_auto_conn+0x78>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a2b4:	4629      	mov	r1, r5
   1a2b6:	4620      	mov	r0, r4
   1a2b8:	f7ff fd8a 	bl	19dd0 <bt_conn_set_state>
   1a2bc:	e7d6      	b.n	1a26c <bt_le_set_auto_conn+0x78>
		return -EAGAIN;
   1a2be:	f06f 000a 	mvn.w	r0, #10
   1a2c2:	e7a5      	b.n	1a210 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   1a2c4:	f06f 000b 	mvn.w	r0, #11
   1a2c8:	e7a2      	b.n	1a210 <bt_le_set_auto_conn+0x1c>
   1a2ca:	bf00      	nop
   1a2cc:	20008098 	.word	0x20008098

0001a2d0 <send_conn_le_param_update>:
{
   1a2d0:	b538      	push	{r3, r4, r5, lr}
   1a2d2:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   1a2d4:	4608      	mov	r0, r1
{
   1a2d6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1a2d8:	f00e fabb 	bl	28852 <bt_le_conn_params_valid>
   1a2dc:	b308      	cbz	r0, 1a322 <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1a2de:	4b12      	ldr	r3, [pc, #72]	; (1a328 <send_conn_le_param_update+0x58>)
   1a2e0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   1a2e4:	0799      	lsls	r1, r3, #30
   1a2e6:	d407      	bmi.n	1a2f8 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   1a2e8:	78e3      	ldrb	r3, [r4, #3]
   1a2ea:	b173      	cbz	r3, 1a30a <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   1a2ec:	4629      	mov	r1, r5
   1a2ee:	4620      	mov	r0, r4
}
   1a2f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   1a2f4:	f000 bb8c 	b.w	1aa10 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1a2f8:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   1a2fc:	079a      	lsls	r2, r3, #30
   1a2fe:	d5f3      	bpl.n	1a2e8 <send_conn_le_param_update+0x18>
   1a300:	1d20      	adds	r0, r4, #4
   1a302:	f00e fbfe 	bl	28b02 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1a306:	0543      	lsls	r3, r0, #21
   1a308:	d4ee      	bmi.n	1a2e8 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1a30a:	4629      	mov	r1, r5
   1a30c:	4620      	mov	r0, r4
   1a30e:	f00e fd55 	bl	28dbc <bt_conn_le_conn_update>
		if (rc == 0) {
   1a312:	b928      	cbnz	r0, 1a320 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
   1a314:	88ab      	ldrh	r3, [r5, #4]
   1a316:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   1a31a:	88eb      	ldrh	r3, [r5, #6]
   1a31c:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   1a320:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1a322:	f06f 0015 	mvn.w	r0, #21
   1a326:	e7fb      	b.n	1a320 <send_conn_le_param_update+0x50>
   1a328:	20008000 	.word	0x20008000

0001a32c <deferred_work>:
{
   1a32c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   1a32e:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   1a332:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   1a334:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   1a338:	b993      	cbnz	r3, 1a360 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
   1a33a:	4630      	mov	r0, r6
   1a33c:	f00e fda1 	bl	28e82 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   1a340:	4b1b      	ldr	r3, [pc, #108]	; (1a3b0 <deferred_work+0x84>)
   1a342:	681d      	ldr	r5, [r3, #0]
   1a344:	b925      	cbnz	r5, 1a350 <deferred_work+0x24>
		bt_conn_unref(conn);
   1a346:	4630      	mov	r0, r6
   1a348:	f7ff fd10 	bl	19d6c <bt_conn_unref>
}
   1a34c:	b002      	add	sp, #8
   1a34e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
   1a350:	686b      	ldr	r3, [r5, #4]
   1a352:	b11b      	cbz	r3, 1a35c <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
   1a354:	4630      	mov	r0, r6
   1a356:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   1a35a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1a35c:	69ad      	ldr	r5, [r5, #24]
   1a35e:	e7f1      	b.n	1a344 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   1a360:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   1a364:	2b01      	cmp	r3, #1
   1a366:	d1f1      	bne.n	1a34c <deferred_work+0x20>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1a368:	f810 3c5d 	ldrb.w	r3, [r0, #-93]
   1a36c:	b913      	cbnz	r3, 1a374 <deferred_work+0x48>
		bt_le_create_conn_cancel();
   1a36e:	f7fd fc5b 	bl	17c28 <bt_le_create_conn_cancel>
		return;
   1a372:	e7eb      	b.n	1a34c <deferred_work+0x20>
	if (atomic_test_and_clear_bit(conn->flags,
   1a374:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
   1a378:	e8d5 3fef 	ldaex	r3, [r5]
   1a37c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   1a380:	e8c5 2fe1 	stlex	r1, r2, [r5]
   1a384:	2900      	cmp	r1, #0
   1a386:	d1f7      	bne.n	1a378 <deferred_work+0x4c>
   1a388:	059b      	lsls	r3, r3, #22
   1a38a:	d507      	bpl.n	1a39c <deferred_work+0x70>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1a38c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		send_conn_le_param_update(conn, param);
   1a38e:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1a390:	9300      	str	r3, [sp, #0]
   1a392:	6d23      	ldr	r3, [r4, #80]	; 0x50
		send_conn_le_param_update(conn, param);
   1a394:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1a396:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   1a398:	f7ff ff9a 	bl	1a2d0 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a39c:	e8d5 3fef 	ldaex	r3, [r5]
   1a3a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1a3a4:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1a3a8:	2a00      	cmp	r2, #0
   1a3aa:	d0cf      	beq.n	1a34c <deferred_work+0x20>
   1a3ac:	e7f6      	b.n	1a39c <deferred_work+0x70>
   1a3ae:	bf00      	nop
   1a3b0:	20009818 	.word	0x20009818

0001a3b4 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   1a3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a3b6:	4604      	mov	r4, r0
   1a3b8:	460d      	mov	r5, r1
   1a3ba:	4617      	mov	r7, r2
   1a3bc:	461e      	mov	r6, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
   1a3be:	f011 fac9 	bl	2b954 <k_is_in_isr>
   1a3c2:	b158      	cbz	r0, 1a3dc <bt_conn_create_pdu_timeout+0x28>
   1a3c4:	4913      	ldr	r1, [pc, #76]	; (1a414 <bt_conn_create_pdu_timeout+0x60>)
   1a3c6:	4814      	ldr	r0, [pc, #80]	; (1a418 <bt_conn_create_pdu_timeout+0x64>)
   1a3c8:	f640 13e1 	movw	r3, #2529	; 0x9e1
   1a3cc:	4a13      	ldr	r2, [pc, #76]	; (1a41c <bt_conn_create_pdu_timeout+0x68>)
   1a3ce:	f00c f9a5 	bl	2671c <printk>
   1a3d2:	f640 11e1 	movw	r1, #2529	; 0x9e1
   1a3d6:	4811      	ldr	r0, [pc, #68]	; (1a41c <bt_conn_create_pdu_timeout+0x68>)
   1a3d8:	f00c fc45 	bl	26c66 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   1a3dc:	4810      	ldr	r0, [pc, #64]	; (1a420 <bt_conn_create_pdu_timeout+0x6c>)
   1a3de:	463a      	mov	r2, r7
   1a3e0:	2c00      	cmp	r4, #0
   1a3e2:	bf18      	it	ne
   1a3e4:	4620      	movne	r0, r4
   1a3e6:	4633      	mov	r3, r6
   1a3e8:	f010 f913 	bl	2a612 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   1a3ec:	4604      	mov	r4, r0
   1a3ee:	b958      	cbnz	r0, 1a408 <bt_conn_create_pdu_timeout+0x54>
   1a3f0:	490c      	ldr	r1, [pc, #48]	; (1a424 <bt_conn_create_pdu_timeout+0x70>)
   1a3f2:	4b0d      	ldr	r3, [pc, #52]	; (1a428 <bt_conn_create_pdu_timeout+0x74>)
		BT_WARN("Unable to allocate buffer within timeout");
   1a3f4:	480d      	ldr	r0, [pc, #52]	; (1a42c <bt_conn_create_pdu_timeout+0x78>)
   1a3f6:	1ac9      	subs	r1, r1, r3
   1a3f8:	08c9      	lsrs	r1, r1, #3
   1a3fa:	0189      	lsls	r1, r1, #6
   1a3fc:	f041 0102 	orr.w	r1, r1, #2
   1a400:	f00c fc96 	bl	26d30 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   1a404:	4620      	mov	r0, r4
   1a406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   1a408:	1d69      	adds	r1, r5, #5
   1a40a:	3008      	adds	r0, #8
   1a40c:	f005 fdee 	bl	1ffec <net_buf_simple_reserve>
	return buf;
   1a410:	e7f8      	b.n	1a404 <bt_conn_create_pdu_timeout+0x50>
   1a412:	bf00      	nop
   1a414:	0002f82c 	.word	0x0002f82c
   1a418:	0002cfb2 	.word	0x0002cfb2
   1a41c:	0002f610 	.word	0x0002f610
   1a420:	20008618 	.word	0x20008618
   1a424:	0002bff4 	.word	0x0002bff4
   1a428:	0002bfe4 	.word	0x0002bfe4
   1a42c:	0002f83b 	.word	0x0002f83b

0001a430 <bt_conn_create_frag_timeout>:
{
   1a430:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1a432:	4801      	ldr	r0, [pc, #4]	; (1a438 <bt_conn_create_frag_timeout+0x8>)
   1a434:	f7ff bfbe 	b.w	1a3b4 <bt_conn_create_pdu_timeout>
   1a438:	2000869c 	.word	0x2000869c

0001a43c <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   1a43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a440:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   1a442:	f04f 33ff 	mov.w	r3, #4294967295
   1a446:	f04f 32ff 	mov.w	r2, #4294967295
   1a44a:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   1a44c:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1a44e:	f7ff ffef 	bl	1a430 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1a452:	7833      	ldrb	r3, [r6, #0]
		frag = bt_conn_create_frag(0);
   1a454:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1a456:	2b07      	cmp	r3, #7
   1a458:	f04f 0600 	mov.w	r6, #0
   1a45c:	d005      	beq.n	1a46a <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   1a45e:	f005 fe23 	bl	200a8 <net_buf_unref>
		return NULL;
   1a462:	4635      	mov	r5, r6
}
   1a464:	4628      	mov	r0, r5
   1a466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   1a46a:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   1a46c:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   1a470:	4e0c      	ldr	r6, [pc, #48]	; (1a4a4 <create_frag.isra.0+0x68>)
   1a472:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1a474:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
   1a478:	f010 f8f1 	bl	2a65e <net_buf_simple_tailroom>
   1a47c:	4580      	cmp	r8, r0
   1a47e:	d20c      	bcs.n	1a49a <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   1a480:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a484:	f854 1f08 	ldr.w	r1, [r4, #8]!
   1a488:	4632      	mov	r2, r6
   1a48a:	4638      	mov	r0, r7
   1a48c:	f010 f8ef 	bl	2a66e <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1a490:	4631      	mov	r1, r6
   1a492:	4620      	mov	r0, r4
   1a494:	f005 fef6 	bl	20284 <net_buf_simple_pull>
   1a498:	e7e4      	b.n	1a464 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   1a49a:	4638      	mov	r0, r7
   1a49c:	f010 f8df 	bl	2a65e <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1a4a0:	b286      	uxth	r6, r0
   1a4a2:	e7ef      	b.n	1a484 <create_frag.isra.0+0x48>
   1a4a4:	20008000 	.word	0x20008000

0001a4a8 <bt_conn_process_tx>:
{
   1a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1a4aa:	7b43      	ldrb	r3, [r0, #13]
{
   1a4ac:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1a4ae:	b973      	cbnz	r3, 1a4ce <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a4b0:	1d03      	adds	r3, r0, #4
   1a4b2:	e8d3 2fef 	ldaex	r2, [r3]
   1a4b6:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   1a4ba:	e8c3 1fe4 	stlex	r4, r1, [r3]
   1a4be:	2c00      	cmp	r4, #0
   1a4c0:	d1f7      	bne.n	1a4b2 <bt_conn_process_tx+0xa>
   1a4c2:	0653      	lsls	r3, r2, #25
   1a4c4:	d503      	bpl.n	1a4ce <bt_conn_process_tx+0x26>
}
   1a4c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   1a4ca:	f7ff bab5 	b.w	19a38 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1a4ce:	2200      	movs	r2, #0
   1a4d0:	2300      	movs	r3, #0
   1a4d2:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1a4d6:	f005 fd55 	bl	1ff84 <net_buf_get>
	BT_ASSERT(buf);
   1a4da:	4604      	mov	r4, r0
   1a4dc:	b960      	cbnz	r0, 1a4f8 <bt_conn_process_tx+0x50>
   1a4de:	f240 5357 	movw	r3, #1367	; 0x557
   1a4e2:	4a1f      	ldr	r2, [pc, #124]	; (1a560 <bt_conn_process_tx+0xb8>)
   1a4e4:	491f      	ldr	r1, [pc, #124]	; (1a564 <bt_conn_process_tx+0xbc>)
   1a4e6:	4820      	ldr	r0, [pc, #128]	; (1a568 <bt_conn_process_tx+0xc0>)
   1a4e8:	f00c f918 	bl	2671c <printk>
   1a4ec:	4040      	eors	r0, r0
   1a4ee:	f380 8811 	msr	BASEPRI, r0
   1a4f2:	f04f 0003 	mov.w	r0, #3
   1a4f6:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   1a4f8:	4f1c      	ldr	r7, [pc, #112]	; (1a56c <bt_conn_process_tx+0xc4>)
	if (buf->len <= conn_mtu(conn)) {
   1a4fa:	89a1      	ldrh	r1, [r4, #12]
   1a4fc:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
   1a500:	4291      	cmp	r1, r2
   1a502:	d807      	bhi.n	1a514 <bt_conn_process_tx+0x6c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1a504:	2300      	movs	r3, #0
   1a506:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1a508:	4621      	mov	r1, r4
   1a50a:	4628      	mov	r0, r5
   1a50c:	f7ff f958 	bl	197c0 <send_frag>
	if (!send_buf(conn, buf)) {
   1a510:	b140      	cbz	r0, 1a524 <bt_conn_process_tx+0x7c>
}
   1a512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   1a514:	f105 060d 	add.w	r6, r5, #13
   1a518:	4621      	mov	r1, r4
   1a51a:	4630      	mov	r0, r6
   1a51c:	f7ff ff8e 	bl	1a43c <create_frag.isra.0>
	if (!frag) {
   1a520:	4601      	mov	r1, r0
   1a522:	b920      	cbnz	r0, 1a52e <bt_conn_process_tx+0x86>
		net_buf_unref(buf);
   1a524:	4620      	mov	r0, r4
}
   1a526:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   1a52a:	f005 bdbd 	b.w	200a8 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1a52e:	2301      	movs	r3, #1
   1a530:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1a532:	4628      	mov	r0, r5
   1a534:	f7ff f944 	bl	197c0 <send_frag>
   1a538:	2800      	cmp	r0, #0
   1a53a:	d0f3      	beq.n	1a524 <bt_conn_process_tx+0x7c>
	while (buf->len > conn_mtu(conn)) {
   1a53c:	89a2      	ldrh	r2, [r4, #12]
   1a53e:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
   1a542:	429a      	cmp	r2, r3
   1a544:	d802      	bhi.n	1a54c <bt_conn_process_tx+0xa4>
	return send_frag(conn, buf, FRAG_END, false);
   1a546:	2300      	movs	r3, #0
   1a548:	2203      	movs	r2, #3
   1a54a:	e7dd      	b.n	1a508 <bt_conn_process_tx+0x60>
		frag = create_frag(conn, buf);
   1a54c:	4621      	mov	r1, r4
   1a54e:	4630      	mov	r0, r6
   1a550:	f7ff ff74 	bl	1a43c <create_frag.isra.0>
		if (!frag) {
   1a554:	4601      	mov	r1, r0
   1a556:	2800      	cmp	r0, #0
   1a558:	d0e4      	beq.n	1a524 <bt_conn_process_tx+0x7c>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1a55a:	2301      	movs	r3, #1
   1a55c:	461a      	mov	r2, r3
   1a55e:	e7e8      	b.n	1a532 <bt_conn_process_tx+0x8a>
   1a560:	0002f610 	.word	0x0002f610
   1a564:	0002ec08 	.word	0x0002ec08
   1a568:	0002cfb2 	.word	0x0002cfb2
   1a56c:	20008000 	.word	0x20008000

0001a570 <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   1a570:	4b0c      	ldr	r3, [pc, #48]	; (1a5a4 <bt_conn_auth_cb_register+0x34>)
   1a572:	b908      	cbnz	r0, 1a578 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
   1a574:	6018      	str	r0, [r3, #0]
		return 0;
   1a576:	4770      	bx	lr
	}

	if (bt_auth) {
   1a578:	681a      	ldr	r2, [r3, #0]
   1a57a:	b962      	cbnz	r2, 1a596 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   1a57c:	6902      	ldr	r2, [r0, #16]
   1a57e:	b93a      	cbnz	r2, 1a590 <bt_conn_auth_cb_register+0x20>
   1a580:	6802      	ldr	r2, [r0, #0]
   1a582:	b95a      	cbnz	r2, 1a59c <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   1a584:	6842      	ldr	r2, [r0, #4]
   1a586:	b94a      	cbnz	r2, 1a59c <bt_conn_auth_cb_register+0x2c>
   1a588:	6882      	ldr	r2, [r0, #8]
   1a58a:	b93a      	cbnz	r2, 1a59c <bt_conn_auth_cb_register+0x2c>
   1a58c:	6942      	ldr	r2, [r0, #20]
   1a58e:	b92a      	cbnz	r2, 1a59c <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   1a590:	6018      	str	r0, [r3, #0]
	return 0;
   1a592:	2000      	movs	r0, #0
   1a594:	4770      	bx	lr
		return -EALREADY;
   1a596:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1a59a:	4770      	bx	lr
		return -EINVAL;
   1a59c:	f06f 0015 	mvn.w	r0, #21
}
   1a5a0:	4770      	bx	lr
   1a5a2:	bf00      	nop
   1a5a4:	20009814 	.word	0x20009814

0001a5a8 <bt_conn_auth_pairing_confirm>:
	return -EINVAL;
}

int bt_conn_auth_pairing_confirm(struct bt_conn *conn)
{
	if (!bt_auth) {
   1a5a8:	4a05      	ldr	r2, [pc, #20]	; (1a5c0 <bt_conn_auth_pairing_confirm+0x18>)
   1a5aa:	6812      	ldr	r2, [r2, #0]
   1a5ac:	b122      	cbz	r2, 1a5b8 <bt_conn_auth_pairing_confirm+0x10>
		return -EINVAL;
	}

	switch (conn->type) {
   1a5ae:	7883      	ldrb	r3, [r0, #2]
   1a5b0:	2b01      	cmp	r3, #1
   1a5b2:	d101      	bne.n	1a5b8 <bt_conn_auth_pairing_confirm+0x10>
#if defined(CONFIG_BT_SMP)
	case BT_CONN_TYPE_LE:
		return bt_smp_auth_pairing_confirm(conn);
   1a5b4:	f004 be24 	b.w	1f200 <bt_smp_auth_pairing_confirm>
		return bt_ssp_auth_pairing_confirm(conn);
#endif /* CONFIG_BT_BREDR */
	default:
		return -EINVAL;
	}
}
   1a5b8:	f06f 0015 	mvn.w	r0, #21
   1a5bc:	4770      	bx	lr
   1a5be:	bf00      	nop
   1a5c0:	20009814 	.word	0x20009814

0001a5c4 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   1a5c4:	4a0c      	ldr	r2, [pc, #48]	; (1a5f8 <bt_conn_index+0x34>)
{
   1a5c6:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   1a5c8:	1a84      	subs	r4, r0, r2
   1a5ca:	10e3      	asrs	r3, r4, #3
   1a5cc:	4c0b      	ldr	r4, [pc, #44]	; (1a5fc <bt_conn_index+0x38>)
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   1a5ce:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   1a5d0:	fb04 f403 	mul.w	r4, r4, r3
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   1a5d4:	d00e      	beq.n	1a5f4 <bt_conn_index+0x30>
   1a5d6:	490a      	ldr	r1, [pc, #40]	; (1a600 <bt_conn_index+0x3c>)
   1a5d8:	f640 2388 	movw	r3, #2696	; 0xa88
   1a5dc:	4a09      	ldr	r2, [pc, #36]	; (1a604 <bt_conn_index+0x40>)
   1a5de:	480a      	ldr	r0, [pc, #40]	; (1a608 <bt_conn_index+0x44>)
   1a5e0:	f00c f89c 	bl	2671c <printk>
   1a5e4:	4809      	ldr	r0, [pc, #36]	; (1a60c <bt_conn_index+0x48>)
   1a5e6:	f00c f899 	bl	2671c <printk>
   1a5ea:	f640 2188 	movw	r1, #2696	; 0xa88
   1a5ee:	4805      	ldr	r0, [pc, #20]	; (1a604 <bt_conn_index+0x40>)
   1a5f0:	f00c fb39 	bl	26c66 <assert_post_action>
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   1a5f4:	b2e0      	uxtb	r0, r4
   1a5f6:	bd10      	pop	{r4, pc}
   1a5f8:	20008b10 	.word	0x20008b10
   1a5fc:	c28f5c29 	.word	0xc28f5c29
   1a600:	0002f864 	.word	0x0002f864
   1a604:	0002f610 	.word	0x0002f610
   1a608:	0002cfb2 	.word	0x0002cfb2
   1a60c:	0002f92b 	.word	0x0002f92b

0001a610 <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   1a610:	b910      	cbnz	r0, 1a618 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   1a612:	4802      	ldr	r0, [pc, #8]	; (1a61c <bt_conn_lookup_index+0xc>)
   1a614:	f00e bb5e 	b.w	28cd4 <bt_conn_ref>
}
   1a618:	2000      	movs	r0, #0
   1a61a:	4770      	bx	lr
   1a61c:	20008b10 	.word	0x20008b10

0001a620 <bt_conn_init>:

int bt_conn_init(void)
{
   1a620:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1a622:	4914      	ldr	r1, [pc, #80]	; (1a674 <bt_conn_init+0x54>)
   1a624:	4814      	ldr	r0, [pc, #80]	; (1a678 <bt_conn_init+0x58>)
   1a626:	f011 f9c9 	bl	2b9bc <k_queue_append>
   1a62a:	4914      	ldr	r1, [pc, #80]	; (1a67c <bt_conn_init+0x5c>)
   1a62c:	4812      	ldr	r0, [pc, #72]	; (1a678 <bt_conn_init+0x58>)
   1a62e:	f011 f9c5 	bl	2b9bc <k_queue_append>
   1a632:	4913      	ldr	r1, [pc, #76]	; (1a680 <bt_conn_init+0x60>)
   1a634:	4810      	ldr	r0, [pc, #64]	; (1a678 <bt_conn_init+0x58>)
   1a636:	f011 f9c1 	bl	2b9bc <k_queue_append>
	}

	bt_att_init();
   1a63a:	f00e ff82 	bl	29542 <bt_att_init>

	err = bt_smp_init();
   1a63e:	f005 f9e1 	bl	1fa04 <bt_smp_init>
	if (err) {
   1a642:	4605      	mov	r5, r0
   1a644:	b998      	cbnz	r0, 1a66e <bt_conn_init+0x4e>
		return err;
	}

	bt_l2cap_init();
   1a646:	f00e fca6 	bl	28f96 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a64a:	480e      	ldr	r0, [pc, #56]	; (1a684 <bt_conn_init+0x64>)
   1a64c:	f00e fb42 	bl	28cd4 <bt_conn_ref>

			if (!conn) {
   1a650:	4604      	mov	r4, r0
   1a652:	b160      	cbz	r0, 1a66e <bt_conn_init+0x4e>
   1a654:	3004      	adds	r0, #4
   1a656:	f00e fa54 	bl	28b02 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
   1a65a:	07c3      	lsls	r3, r0, #31
   1a65c:	d504      	bpl.n	1a668 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1a65e:	2102      	movs	r1, #2
   1a660:	4620      	mov	r0, r4
				conn->id = BT_ID_DEFAULT;
   1a662:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1a664:	f7ff fbb4 	bl	19dd0 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_WHITELIST) */

			bt_conn_unref(conn);
   1a668:	4620      	mov	r0, r4
   1a66a:	f7ff fb7f 	bl	19d6c <bt_conn_unref>
		}
	}

	return 0;
}
   1a66e:	4628      	mov	r0, r5
   1a670:	bd38      	pop	{r3, r4, r5, pc}
   1a672:	bf00      	nop
   1a674:	2000981c 	.word	0x2000981c
   1a678:	200085d0 	.word	0x200085d0
   1a67c:	2000982c 	.word	0x2000982c
   1a680:	2000983c 	.word	0x2000983c
   1a684:	20008b10 	.word	0x20008b10

0001a688 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   1a688:	4a0b      	ldr	r2, [pc, #44]	; (1a6b8 <l2cap_accept+0x30>)
{
   1a68a:	b508      	push	{r3, lr}
   1a68c:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
   1a68e:	6810      	ldr	r0, [r2, #0]
   1a690:	b918      	cbnz	r0, 1a69a <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   1a692:	4b0a      	ldr	r3, [pc, #40]	; (1a6bc <l2cap_accept+0x34>)
   1a694:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
   1a696:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   1a698:	bd08      	pop	{r3, pc}
   1a69a:	4909      	ldr	r1, [pc, #36]	; (1a6c0 <l2cap_accept+0x38>)
   1a69c:	4a09      	ldr	r2, [pc, #36]	; (1a6c4 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
   1a69e:	480a      	ldr	r0, [pc, #40]	; (1a6c8 <l2cap_accept+0x40>)
   1a6a0:	1a52      	subs	r2, r2, r1
   1a6a2:	08d2      	lsrs	r2, r2, #3
   1a6a4:	0192      	lsls	r2, r2, #6
   1a6a6:	4619      	mov	r1, r3
   1a6a8:	f042 0201 	orr.w	r2, r2, #1
   1a6ac:	f00c fb4d 	bl	26d4a <log_1>
	return -ENOMEM;
   1a6b0:	f06f 000b 	mvn.w	r0, #11
   1a6b4:	e7f0      	b.n	1a698 <l2cap_accept+0x10>
   1a6b6:	bf00      	nop
   1a6b8:	20008bd8 	.word	0x20008bd8
   1a6bc:	0002c600 	.word	0x0002c600
   1a6c0:	0002bfe4 	.word	0x0002bfe4
   1a6c4:	0002c044 	.word	0x0002c044
   1a6c8:	0002f9a2 	.word	0x0002f9a2

0001a6cc <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a6ce:	4605      	mov	r5, r0
   1a6d0:	460f      	mov	r7, r1
   1a6d2:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   1a6d4:	2300      	movs	r3, #0
   1a6d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a6da:	2104      	movs	r1, #4
   1a6dc:	2000      	movs	r0, #0
   1a6de:	f7ff fe69 	bl	1a3b4 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1a6e2:	4604      	mov	r4, r0
   1a6e4:	b960      	cbnz	r0, 1a700 <l2cap_create_le_sig_pdu.isra.0+0x34>
   1a6e6:	4a0a      	ldr	r2, [pc, #40]	; (1a710 <l2cap_create_le_sig_pdu.isra.0+0x44>)
   1a6e8:	4b0a      	ldr	r3, [pc, #40]	; (1a714 <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   1a6ea:	4629      	mov	r1, r5
   1a6ec:	1ad2      	subs	r2, r2, r3
   1a6ee:	08d2      	lsrs	r2, r2, #3
   1a6f0:	0192      	lsls	r2, r2, #6
   1a6f2:	4809      	ldr	r0, [pc, #36]	; (1a718 <l2cap_create_le_sig_pdu.isra.0+0x4c>)
   1a6f4:	f042 0201 	orr.w	r2, r2, #1
   1a6f8:	f00c fb27 	bl	26d4a <log_1>
}
   1a6fc:	4620      	mov	r0, r4
   1a6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1a700:	2104      	movs	r1, #4
   1a702:	3008      	adds	r0, #8
   1a704:	f005 fe00 	bl	20308 <net_buf_simple_add>
	hdr->code = code;
   1a708:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1a70a:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1a70c:	8046      	strh	r6, [r0, #2]
	return buf;
   1a70e:	e7f5      	b.n	1a6fc <l2cap_create_le_sig_pdu.isra.0+0x30>
   1a710:	0002c044 	.word	0x0002c044
   1a714:	0002bfe4 	.word	0x0002bfe4
   1a718:	0002f9c9 	.word	0x0002f9c9

0001a71c <l2cap_rtx_timeout>:
{
   1a71c:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
   1a71e:	4604      	mov	r4, r0
   1a720:	4b0a      	ldr	r3, [pc, #40]	; (1a74c <l2cap_rtx_timeout+0x30>)
   1a722:	4a0b      	ldr	r2, [pc, #44]	; (1a750 <l2cap_rtx_timeout+0x34>)
   1a724:	f854 5d10 	ldr.w	r5, [r4, #-16]!
   1a728:	1ad2      	subs	r2, r2, r3
   1a72a:	08d2      	lsrs	r2, r2, #3
	BT_ERR("chan %p timeout", chan);
   1a72c:	0192      	lsls	r2, r2, #6
   1a72e:	4621      	mov	r1, r4
   1a730:	4808      	ldr	r0, [pc, #32]	; (1a754 <l2cap_rtx_timeout+0x38>)
   1a732:	f042 0201 	orr.w	r2, r2, #1
   1a736:	f00c fb08 	bl	26d4a <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   1a73a:	4628      	mov	r0, r5
   1a73c:	4621      	mov	r1, r4
   1a73e:	f00e fb69 	bl	28e14 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   1a742:	4620      	mov	r0, r4
}
   1a744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   1a748:	f00e bb86 	b.w	28e58 <bt_l2cap_chan_del>
   1a74c:	0002bfe4 	.word	0x0002bfe4
   1a750:	0002c044 	.word	0x0002c044
   1a754:	0002f9f1 	.word	0x0002f9f1

0001a758 <bt_l2cap_connected>:
{
   1a758:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1a75c:	4f2e      	ldr	r7, [pc, #184]	; (1a818 <bt_l2cap_connected+0xc0>)
{
   1a75e:	4604      	mov	r4, r0
   1a760:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1a762:	4e2e      	ldr	r6, [pc, #184]	; (1a81c <bt_l2cap_connected+0xc4>)
   1a764:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 1a830 <bt_l2cap_connected+0xd8>
   1a768:	42be      	cmp	r6, r7
   1a76a:	d90e      	bls.n	1a78a <bt_l2cap_connected+0x32>
   1a76c:	492c      	ldr	r1, [pc, #176]	; (1a820 <bt_l2cap_connected+0xc8>)
   1a76e:	f240 1365 	movw	r3, #357	; 0x165
   1a772:	4642      	mov	r2, r8
   1a774:	482b      	ldr	r0, [pc, #172]	; (1a824 <bt_l2cap_connected+0xcc>)
   1a776:	f00b ffd1 	bl	2671c <printk>
   1a77a:	482b      	ldr	r0, [pc, #172]	; (1a828 <bt_l2cap_connected+0xd0>)
   1a77c:	f00b ffce 	bl	2671c <printk>
   1a780:	f240 1165 	movw	r1, #357	; 0x165
   1a784:	4640      	mov	r0, r8
   1a786:	f00c fa6e 	bl	26c66 <assert_post_action>
   1a78a:	454e      	cmp	r6, r9
   1a78c:	d302      	bcc.n	1a794 <bt_l2cap_connected+0x3c>
}
   1a78e:	b002      	add	sp, #8
   1a790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fchan->accept(conn, &chan) < 0) {
   1a794:	4620      	mov	r0, r4
   1a796:	6873      	ldr	r3, [r6, #4]
   1a798:	a901      	add	r1, sp, #4
   1a79a:	4798      	blx	r3
   1a79c:	2800      	cmp	r0, #0
   1a79e:	db35      	blt.n	1a80c <bt_l2cap_connected+0xb4>
		ch = BT_L2CAP_LE_CHAN(chan);
   1a7a0:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   1a7a2:	8833      	ldrh	r3, [r6, #0]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1a7a4:	4921      	ldr	r1, [pc, #132]	; (1a82c <bt_l2cap_connected+0xd4>)
		ch->rx.cid = fchan->cid;
   1a7a6:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   1a7aa:	f8a5 307c 	strh.w	r3, [r5, #124]	; 0x7c
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1a7ae:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1a7b2:	f8d6 a008 	ldr.w	sl, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1a7b6:	f009 fa49 	bl	23c4c <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a7ba:	2200      	movs	r2, #0
   1a7bc:	f105 0368 	add.w	r3, r5, #104	; 0x68
   1a7c0:	e8d3 1fef 	ldaex	r1, [r3]
   1a7c4:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1a7c8:	2800      	cmp	r0, #0
   1a7ca:	d1f9      	bne.n	1a7c0 <bt_l2cap_connected+0x68>
	parent->next = child;
   1a7cc:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   1a7ce:	6da2      	ldr	r2, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   1a7d0:	f105 0308 	add.w	r3, r5, #8
   1a7d4:	b9e2      	cbnz	r2, 1a810 <bt_l2cap_connected+0xb8>
	list->head = node;
   1a7d6:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (chan->ops->connected) {
   1a7da:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   1a7dc:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   1a7de:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   1a7e0:	f8c5 a00c 	str.w	sl, [r5, #12]
		if (chan->ops->connected) {
   1a7e4:	681b      	ldr	r3, [r3, #0]
   1a7e6:	b103      	cbz	r3, 1a7ea <bt_l2cap_connected+0x92>
			chan->ops->connected(chan);
   1a7e8:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a7ea:	9b01      	ldr	r3, [sp, #4]
   1a7ec:	3368      	adds	r3, #104	; 0x68
   1a7ee:	e8d3 2fef 	ldaex	r2, [r3]
   1a7f2:	f042 0201 	orr.w	r2, r2, #1
   1a7f6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1a7fa:	2900      	cmp	r1, #0
   1a7fc:	d1f7      	bne.n	1a7ee <bt_l2cap_connected+0x96>
		if (chan->ops->status) {
   1a7fe:	9801      	ldr	r0, [sp, #4]
   1a800:	6843      	ldr	r3, [r0, #4]
   1a802:	699b      	ldr	r3, [r3, #24]
   1a804:	b113      	cbz	r3, 1a80c <bt_l2cap_connected+0xb4>
			chan->ops->status(chan, chan->status);
   1a806:	f100 0168 	add.w	r1, r0, #104	; 0x68
   1a80a:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1a80c:	360c      	adds	r6, #12
   1a80e:	e7ab      	b.n	1a768 <bt_l2cap_connected+0x10>
	parent->next = child;
   1a810:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1a812:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1a814:	e7e1      	b.n	1a7da <bt_l2cap_connected+0x82>
   1a816:	bf00      	nop
   1a818:	0002bf5c 	.word	0x0002bf5c
   1a81c:	0002bf38 	.word	0x0002bf38
   1a820:	0002fa32 	.word	0x0002fa32
   1a824:	0002cfb2 	.word	0x0002cfb2
   1a828:	0002d8a9 	.word	0x0002d8a9
   1a82c:	0001a71d 	.word	0x0001a71d
   1a830:	0002fa01 	.word	0x0002fa01

0001a834 <l2cap_recv>:
{
   1a834:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1a836:	898b      	ldrh	r3, [r1, #12]
{
   1a838:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   1a83a:	2b03      	cmp	r3, #3
{
   1a83c:	460d      	mov	r5, r1
   1a83e:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   1a840:	d80a      	bhi.n	1a858 <l2cap_recv+0x24>
   1a842:	494f      	ldr	r1, [pc, #316]	; (1a980 <l2cap_recv+0x14c>)
   1a844:	4b4f      	ldr	r3, [pc, #316]	; (1a984 <l2cap_recv+0x150>)
		BT_ERR("Too small L2CAP signaling PDU");
   1a846:	4850      	ldr	r0, [pc, #320]	; (1a988 <l2cap_recv+0x154>)
   1a848:	1ac9      	subs	r1, r1, r3
   1a84a:	08c9      	lsrs	r1, r1, #3
   1a84c:	0189      	lsls	r1, r1, #6
   1a84e:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
   1a852:	f00c fa6d 	bl	26d30 <log_0>
		return 0;
   1a856:	e013      	b.n	1a880 <l2cap_recv+0x4c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1a858:	2104      	movs	r1, #4
   1a85a:	f105 0008 	add.w	r0, r5, #8
   1a85e:	f005 fd31 	bl	202c4 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1a862:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   1a864:	8842      	ldrh	r2, [r0, #2]
   1a866:	4604      	mov	r4, r0
	if (buf->len != len) {
   1a868:	428a      	cmp	r2, r1
   1a86a:	d00c      	beq.n	1a886 <l2cap_recv+0x52>
   1a86c:	4845      	ldr	r0, [pc, #276]	; (1a984 <l2cap_recv+0x150>)
   1a86e:	4b44      	ldr	r3, [pc, #272]	; (1a980 <l2cap_recv+0x14c>)
   1a870:	1a1b      	subs	r3, r3, r0
   1a872:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1a874:	019b      	lsls	r3, r3, #6
   1a876:	4845      	ldr	r0, [pc, #276]	; (1a98c <l2cap_recv+0x158>)
   1a878:	f043 0301 	orr.w	r3, r3, #1
   1a87c:	f00c fa79 	bl	26d72 <log_2>
}
   1a880:	2000      	movs	r0, #0
   1a882:	b005      	add	sp, #20
   1a884:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   1a886:	7841      	ldrb	r1, [r0, #1]
   1a888:	b941      	cbnz	r1, 1a89c <l2cap_recv+0x68>
   1a88a:	493d      	ldr	r1, [pc, #244]	; (1a980 <l2cap_recv+0x14c>)
   1a88c:	4b3d      	ldr	r3, [pc, #244]	; (1a984 <l2cap_recv+0x150>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   1a88e:	4840      	ldr	r0, [pc, #256]	; (1a990 <l2cap_recv+0x15c>)
   1a890:	1ac9      	subs	r1, r1, r3
   1a892:	08c9      	lsrs	r1, r1, #3
   1a894:	0189      	lsls	r1, r1, #6
   1a896:	f041 0101 	orr.w	r1, r1, #1
   1a89a:	e7da      	b.n	1a852 <l2cap_recv+0x1e>
	switch (hdr->code) {
   1a89c:	7803      	ldrb	r3, [r0, #0]
   1a89e:	2b12      	cmp	r3, #18
   1a8a0:	d01c      	beq.n	1a8dc <l2cap_recv+0xa8>
   1a8a2:	2b13      	cmp	r3, #19
   1a8a4:	d00f      	beq.n	1a8c6 <l2cap_recv+0x92>
   1a8a6:	2b01      	cmp	r3, #1
   1a8a8:	d0ea      	beq.n	1a880 <l2cap_recv+0x4c>
   1a8aa:	4936      	ldr	r1, [pc, #216]	; (1a984 <l2cap_recv+0x150>)
   1a8ac:	4a34      	ldr	r2, [pc, #208]	; (1a980 <l2cap_recv+0x14c>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   1a8ae:	4839      	ldr	r0, [pc, #228]	; (1a994 <l2cap_recv+0x160>)
   1a8b0:	1a52      	subs	r2, r2, r1
   1a8b2:	08d2      	lsrs	r2, r2, #3
   1a8b4:	0192      	lsls	r2, r2, #6
   1a8b6:	4619      	mov	r1, r3
   1a8b8:	f042 0202 	orr.w	r2, r2, #2
   1a8bc:	f00c fa45 	bl	26d4a <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
   1a8c0:	7861      	ldrb	r1, [r4, #1]
   1a8c2:	6830      	ldr	r0, [r6, #0]
   1a8c4:	e019      	b.n	1a8fa <l2cap_recv+0xc6>
	if (buf->len < sizeof(*rsp)) {
   1a8c6:	2a01      	cmp	r2, #1
   1a8c8:	d8da      	bhi.n	1a880 <l2cap_recv+0x4c>
   1a8ca:	492d      	ldr	r1, [pc, #180]	; (1a980 <l2cap_recv+0x14c>)
   1a8cc:	4b2d      	ldr	r3, [pc, #180]	; (1a984 <l2cap_recv+0x150>)
		BT_ERR("Too small LE conn param rsp");
   1a8ce:	4832      	ldr	r0, [pc, #200]	; (1a998 <l2cap_recv+0x164>)
   1a8d0:	1ac9      	subs	r1, r1, r3
   1a8d2:	08c9      	lsrs	r1, r1, #3
   1a8d4:	0189      	lsls	r1, r1, #6
   1a8d6:	f041 0101 	orr.w	r1, r1, #1
   1a8da:	e7ba      	b.n	1a852 <l2cap_recv+0x1e>
	if (buf->len < sizeof(*req)) {
   1a8dc:	2a07      	cmp	r2, #7
   1a8de:	d808      	bhi.n	1a8f2 <l2cap_recv+0xbe>
   1a8e0:	4927      	ldr	r1, [pc, #156]	; (1a980 <l2cap_recv+0x14c>)
   1a8e2:	4b28      	ldr	r3, [pc, #160]	; (1a984 <l2cap_recv+0x150>)
		BT_ERR("Too small LE conn update param req");
   1a8e4:	482d      	ldr	r0, [pc, #180]	; (1a99c <l2cap_recv+0x168>)
   1a8e6:	1ac9      	subs	r1, r1, r3
   1a8e8:	08c9      	lsrs	r1, r1, #3
   1a8ea:	0189      	lsls	r1, r1, #6
   1a8ec:	f041 0101 	orr.w	r1, r1, #1
   1a8f0:	e7af      	b.n	1a852 <l2cap_recv+0x1e>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   1a8f2:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
   1a8f4:	78f7      	ldrb	r7, [r6, #3]
   1a8f6:	b11f      	cbz	r7, 1a900 <l2cap_recv+0xcc>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   1a8f8:	4630      	mov	r0, r6
		l2cap_send_reject(chan->conn, hdr->ident,
   1a8fa:	f00e fb0e 	bl	28f1a <l2cap_send_reject.constprop.0>
		break;
   1a8fe:	e7bf      	b.n	1a880 <l2cap_recv+0x4c>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   1a900:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   1a902:	7850      	ldrb	r0, [r2, #1]
   1a904:	7813      	ldrb	r3, [r2, #0]
   1a906:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1a90a:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   1a90e:	78d0      	ldrb	r0, [r2, #3]
   1a910:	7893      	ldrb	r3, [r2, #2]
   1a912:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1a916:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   1a91a:	7950      	ldrb	r0, [r2, #5]
   1a91c:	7913      	ldrb	r3, [r2, #4]
   1a91e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1a922:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   1a926:	7993      	ldrb	r3, [r2, #6]
   1a928:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1a92a:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   1a92c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1a930:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   1a932:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1a936:	f7ff fec9 	bl	1a6cc <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1a93a:	4604      	mov	r4, r0
   1a93c:	2800      	cmp	r0, #0
   1a93e:	d09f      	beq.n	1a880 <l2cap_recv+0x4c>
	accepted = le_param_req(conn, &param);
   1a940:	a902      	add	r1, sp, #8
   1a942:	4630      	mov	r0, r6
   1a944:	f7ff f820 	bl	19988 <le_param_req>
   1a948:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   1a94a:	2102      	movs	r1, #2
   1a94c:	f104 0008 	add.w	r0, r4, #8
   1a950:	f005 fcda 	bl	20308 <net_buf_simple_add>
	if (accepted) {
   1a954:	f085 0301 	eor.w	r3, r5, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   1a958:	b2db      	uxtb	r3, r3
   1a95a:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1a95c:	4622      	mov	r2, r4
   1a95e:	463b      	mov	r3, r7
   1a960:	2105      	movs	r1, #5
   1a962:	4630      	mov	r0, r6
   1a964:	9700      	str	r7, [sp, #0]
   1a966:	f00e fabf 	bl	28ee8 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1a96a:	b110      	cbz	r0, 1a972 <l2cap_recv+0x13e>
		net_buf_unref(buf);
   1a96c:	4620      	mov	r0, r4
   1a96e:	f005 fb9b 	bl	200a8 <net_buf_unref>
	if (accepted) {
   1a972:	2d00      	cmp	r5, #0
   1a974:	d084      	beq.n	1a880 <l2cap_recv+0x4c>
		bt_conn_le_conn_update(conn, &param);
   1a976:	4630      	mov	r0, r6
   1a978:	a902      	add	r1, sp, #8
   1a97a:	f00e fa1f 	bl	28dbc <bt_conn_le_conn_update>
   1a97e:	e77f      	b.n	1a880 <l2cap_recv+0x4c>
   1a980:	0002c044 	.word	0x0002c044
   1a984:	0002bfe4 	.word	0x0002bfe4
   1a988:	0002fa59 	.word	0x0002fa59
   1a98c:	0002fa77 	.word	0x0002fa77
   1a990:	0002fa98 	.word	0x0002fa98
   1a994:	0002faf8 	.word	0x0002faf8
   1a998:	0002fab9 	.word	0x0002fab9
   1a99c:	0002fad5 	.word	0x0002fad5

0001a9a0 <bt_l2cap_recv>:
{
   1a9a0:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1a9a2:	898b      	ldrh	r3, [r1, #12]
{
   1a9a4:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   1a9a6:	2b03      	cmp	r3, #3
{
   1a9a8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1a9aa:	d80e      	bhi.n	1a9ca <bt_l2cap_recv+0x2a>
   1a9ac:	4914      	ldr	r1, [pc, #80]	; (1aa00 <bt_l2cap_recv+0x60>)
   1a9ae:	4b15      	ldr	r3, [pc, #84]	; (1aa04 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
   1a9b0:	4815      	ldr	r0, [pc, #84]	; (1aa08 <bt_l2cap_recv+0x68>)
   1a9b2:	1ac9      	subs	r1, r1, r3
   1a9b4:	08c9      	lsrs	r1, r1, #3
   1a9b6:	0189      	lsls	r1, r1, #6
   1a9b8:	f041 0101 	orr.w	r1, r1, #1
   1a9bc:	f00c f9b8 	bl	26d30 <log_0>
	net_buf_unref(buf);
   1a9c0:	4620      	mov	r0, r4
}
   1a9c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1a9c6:	f005 bb6f 	b.w	200a8 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1a9ca:	2104      	movs	r1, #4
   1a9cc:	f104 0008 	add.w	r0, r4, #8
   1a9d0:	f005 fc78 	bl	202c4 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1a9d4:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1a9d6:	4628      	mov	r0, r5
   1a9d8:	f00e facd 	bl	28f76 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1a9dc:	b950      	cbnz	r0, 1a9f4 <bt_l2cap_recv+0x54>
   1a9de:	4b09      	ldr	r3, [pc, #36]	; (1aa04 <bt_l2cap_recv+0x64>)
   1a9e0:	4a07      	ldr	r2, [pc, #28]	; (1aa00 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   1a9e2:	480a      	ldr	r0, [pc, #40]	; (1aa0c <bt_l2cap_recv+0x6c>)
   1a9e4:	1ad2      	subs	r2, r2, r3
   1a9e6:	08d2      	lsrs	r2, r2, #3
   1a9e8:	0192      	lsls	r2, r2, #6
   1a9ea:	f042 0202 	orr.w	r2, r2, #2
   1a9ee:	f00c f9ac 	bl	26d4a <log_1>
		net_buf_unref(buf);
   1a9f2:	e7e5      	b.n	1a9c0 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
   1a9f4:	6843      	ldr	r3, [r0, #4]
   1a9f6:	4621      	mov	r1, r4
   1a9f8:	691b      	ldr	r3, [r3, #16]
   1a9fa:	4798      	blx	r3
   1a9fc:	e7e0      	b.n	1a9c0 <bt_l2cap_recv+0x20>
   1a9fe:	bf00      	nop
   1aa00:	0002c044 	.word	0x0002c044
   1aa04:	0002bfe4 	.word	0x0002bfe4
   1aa08:	0002fb16 	.word	0x0002fb16
   1aa0c:	0002fb33 	.word	0x0002fb33

0001aa10 <bt_l2cap_update_conn_param>:
{
   1aa10:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   1aa12:	4b17      	ldr	r3, [pc, #92]	; (1aa70 <bt_l2cap_update_conn_param+0x60>)
{
   1aa14:	4606      	mov	r6, r0
	ident++;
   1aa16:	781a      	ldrb	r2, [r3, #0]
{
   1aa18:	460d      	mov	r5, r1
	ident++;
   1aa1a:	3201      	adds	r2, #1
	if (!ident) {
   1aa1c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   1aa20:	bf08      	it	eq
   1aa22:	2201      	moveq	r2, #1
   1aa24:	701a      	strb	r2, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1aa26:	2012      	movs	r0, #18
   1aa28:	2208      	movs	r2, #8
   1aa2a:	7819      	ldrb	r1, [r3, #0]
   1aa2c:	f7ff fe4e 	bl	1a6cc <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1aa30:	4604      	mov	r4, r0
   1aa32:	b1d0      	cbz	r0, 1aa6a <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   1aa34:	2108      	movs	r1, #8
   1aa36:	4408      	add	r0, r1
   1aa38:	f005 fc66 	bl	20308 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1aa3c:	882b      	ldrh	r3, [r5, #0]
   1aa3e:	4622      	mov	r2, r4
   1aa40:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1aa42:	886b      	ldrh	r3, [r5, #2]
   1aa44:	2105      	movs	r1, #5
   1aa46:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1aa48:	88ab      	ldrh	r3, [r5, #4]
   1aa4a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1aa4c:	88eb      	ldrh	r3, [r5, #6]
   1aa4e:	80c3      	strh	r3, [r0, #6]
   1aa50:	2300      	movs	r3, #0
   1aa52:	4630      	mov	r0, r6
   1aa54:	9300      	str	r3, [sp, #0]
   1aa56:	f00e fa47 	bl	28ee8 <bt_l2cap_send_cb>
	if (err) {
   1aa5a:	4605      	mov	r5, r0
   1aa5c:	b110      	cbz	r0, 1aa64 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   1aa5e:	4620      	mov	r0, r4
   1aa60:	f005 fb22 	bl	200a8 <net_buf_unref>
}
   1aa64:	4628      	mov	r0, r5
   1aa66:	b002      	add	sp, #8
   1aa68:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1aa6a:	f06f 050b 	mvn.w	r5, #11
   1aa6e:	e7f9      	b.n	1aa64 <bt_l2cap_update_conn_param+0x54>
   1aa70:	2000a51b 	.word	0x2000a51b

0001aa74 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   1aa74:	4b02      	ldr	r3, [pc, #8]	; (1aa80 <att_cfm_sent+0xc>)
   1aa76:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1aa7a:	f00e baba 	b.w	28ff2 <att_sent>
   1aa7e:	bf00      	nop
   1aa80:	00029343 	.word	0x00029343

0001aa84 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   1aa84:	4b02      	ldr	r3, [pc, #8]	; (1aa90 <att_rsp_sent+0xc>)
   1aa86:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1aa8a:	f00e bab2 	b.w	28ff2 <att_sent>
   1aa8e:	bf00      	nop
   1aa90:	0002932f 	.word	0x0002932f

0001aa94 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   1aa94:	4b02      	ldr	r3, [pc, #8]	; (1aaa0 <att_req_sent+0xc>)
   1aa96:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1aa9a:	f00e baaa 	b.w	28ff2 <att_sent>
   1aa9e:	bf00      	nop
   1aaa0:	00029315 	.word	0x00029315

0001aaa4 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1aaa4:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1aaa6:	3808      	subs	r0, #8
   1aaa8:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1aaaa:	a901      	add	r1, sp, #4
   1aaac:	4802      	ldr	r0, [pc, #8]	; (1aab8 <bt_att_released+0x14>)
   1aaae:	f007 fff1 	bl	22a94 <k_mem_slab_free>
}
   1aab2:	b003      	add	sp, #12
   1aab4:	f85d fb04 	ldr.w	pc, [sp], #4
   1aab8:	200084bc 	.word	0x200084bc

0001aabc <read_group_cb>:
{
   1aabc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1aac0:	f04f 0800 	mov.w	r8, #0
   1aac4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   1aac8:	4606      	mov	r6, r0
   1aaca:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1aacc:	6800      	ldr	r0, [r0, #0]
   1aace:	a902      	add	r1, sp, #8
{
   1aad0:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1aad2:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1aad4:	f88d 8008 	strb.w	r8, [sp, #8]
   1aad8:	f8ad 300a 	strh.w	r3, [sp, #10]
   1aadc:	f00d fdf4 	bl	286c8 <bt_uuid_cmp>
   1aae0:	b1a0      	cbz	r0, 1ab0c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1aae2:	f642 0301 	movw	r3, #10241	; 0x2801
   1aae6:	6830      	ldr	r0, [r6, #0]
   1aae8:	a903      	add	r1, sp, #12
   1aaea:	f88d 800c 	strb.w	r8, [sp, #12]
   1aaee:	f8ad 300e 	strh.w	r3, [sp, #14]
   1aaf2:	f00d fde9 	bl	286c8 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1aaf6:	b148      	cbz	r0, 1ab0c <read_group_cb+0x50>
		if (data->group &&
   1aaf8:	6923      	ldr	r3, [r4, #16]
   1aafa:	b11b      	cbz	r3, 1ab04 <read_group_cb+0x48>
   1aafc:	885a      	ldrh	r2, [r3, #2]
   1aafe:	42aa      	cmp	r2, r5
   1ab00:	d200      	bcs.n	1ab04 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1ab02:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1ab04:	2001      	movs	r0, #1
}
   1ab06:	b004      	add	sp, #16
   1ab08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1ab0c:	6861      	ldr	r1, [r4, #4]
   1ab0e:	6830      	ldr	r0, [r6, #0]
   1ab10:	f00d fdda 	bl	286c8 <bt_uuid_cmp>
   1ab14:	b110      	cbz	r0, 1ab1c <read_group_cb+0x60>
		data->group = NULL;
   1ab16:	2300      	movs	r3, #0
   1ab18:	6123      	str	r3, [r4, #16]
   1ab1a:	e7f3      	b.n	1ab04 <read_group_cb+0x48>
	if (data->rsp->len &&
   1ab1c:	68e3      	ldr	r3, [r4, #12]
   1ab1e:	68a0      	ldr	r0, [r4, #8]
   1ab20:	781a      	ldrb	r2, [r3, #0]
   1ab22:	b13a      	cbz	r2, 1ab34 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1ab24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
   1ab28:	8981      	ldrh	r1, [r0, #12]
   1ab2a:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1ab2c:	4293      	cmp	r3, r2
   1ab2e:	da01      	bge.n	1ab34 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   1ab30:	2000      	movs	r0, #0
   1ab32:	e7e8      	b.n	1ab06 <read_group_cb+0x4a>
   1ab34:	2104      	movs	r1, #4
   1ab36:	3008      	adds	r0, #8
   1ab38:	f005 fbe6 	bl	20308 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1ab3c:	4b09      	ldr	r3, [pc, #36]	; (1ab64 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1ab3e:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1ab40:	4631      	mov	r1, r6
	data->group->start_handle = sys_cpu_to_le16(handle);
   1ab42:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1ab44:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1ab46:	68a2      	ldr	r2, [r4, #8]
   1ab48:	9300      	str	r3, [sp, #0]
   1ab4a:	4638      	mov	r0, r7
   1ab4c:	2300      	movs	r3, #0
   1ab4e:	9401      	str	r4, [sp, #4]
   1ab50:	f00e fab8 	bl	290c4 <att_chan_read>
	if (read < 0) {
   1ab54:	2800      	cmp	r0, #0
   1ab56:	dbeb      	blt.n	1ab30 <read_group_cb+0x74>
	if (!data->group) {
   1ab58:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1ab5a:	3800      	subs	r0, #0
   1ab5c:	bf18      	it	ne
   1ab5e:	2001      	movne	r0, #1
   1ab60:	e7d1      	b.n	1ab06 <read_group_cb+0x4a>
   1ab62:	bf00      	nop
   1ab64:	00029273 	.word	0x00029273

0001ab68 <read_type_cb>:
{
   1ab68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1ab6c:	f8d2 8000 	ldr.w	r8, [r2]
{
   1ab70:	4606      	mov	r6, r0
   1ab72:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1ab74:	6800      	ldr	r0, [r0, #0]
   1ab76:	6851      	ldr	r1, [r2, #4]
{
   1ab78:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1ab7a:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1ab7e:	f00d fda3 	bl	286c8 <bt_uuid_cmp>
   1ab82:	4607      	mov	r7, r0
   1ab84:	2800      	cmp	r0, #0
   1ab86:	d13e      	bne.n	1ac06 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1ab88:	4628      	mov	r0, r5
   1ab8a:	2215      	movs	r2, #21
   1ab8c:	4631      	mov	r1, r6
   1ab8e:	f00f f87b 	bl	29c88 <bt_gatt_check_perm>
   1ab92:	4605      	mov	r5, r0
   1ab94:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1ab96:	b148      	cbz	r0, 1abac <read_type_cb+0x44>
		if (data->rsp->len) {
   1ab98:	68e3      	ldr	r3, [r4, #12]
   1ab9a:	781b      	ldrb	r3, [r3, #0]
   1ab9c:	b923      	cbnz	r3, 1aba8 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   1ab9e:	2500      	movs	r5, #0
}
   1aba0:	4628      	mov	r0, r5
   1aba2:	b003      	add	sp, #12
   1aba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   1aba8:	7527      	strb	r7, [r4, #20]
   1abaa:	e7f8      	b.n	1ab9e <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1abac:	68a0      	ldr	r0, [r4, #8]
   1abae:	f005 fadb 	bl	20168 <net_buf_frag_last>
   1abb2:	2102      	movs	r1, #2
   1abb4:	3008      	adds	r0, #8
   1abb6:	f005 fba7 	bl	20308 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1abba:	4b14      	ldr	r3, [pc, #80]	; (1ac0c <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1abbc:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1abbe:	4631      	mov	r1, r6
	data->item->handle = sys_cpu_to_le16(handle);
   1abc0:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1abc4:	68a2      	ldr	r2, [r4, #8]
   1abc6:	9300      	str	r3, [sp, #0]
   1abc8:	4640      	mov	r0, r8
   1abca:	462b      	mov	r3, r5
   1abcc:	9401      	str	r4, [sp, #4]
   1abce:	f00e fa79 	bl	290c4 <att_chan_read>
	if (read < 0) {
   1abd2:	2800      	cmp	r0, #0
   1abd4:	da07      	bge.n	1abe6 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1abd6:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1abda:	bf32      	itee	cc
   1abdc:	200e      	movcc	r0, #14
		return -err;
   1abde:	4240      	negcs	r0, r0
   1abe0:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   1abe2:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1abe4:	e7dc      	b.n	1aba0 <read_type_cb+0x38>
	if (!data->item) {
   1abe6:	6923      	ldr	r3, [r4, #16]
   1abe8:	2b00      	cmp	r3, #0
   1abea:	d0d8      	beq.n	1ab9e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1abec:	68a0      	ldr	r0, [r4, #8]
   1abee:	f00e f9f8 	bl	28fe2 <net_buf_frags_len>
   1abf2:	f8b8 5086 	ldrh.w	r5, [r8, #134]	; 0x86
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1abf6:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1abf8:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1abfa:	7818      	ldrb	r0, [r3, #0]
   1abfc:	4285      	cmp	r5, r0
   1abfe:	bf94      	ite	ls
   1ac00:	2500      	movls	r5, #0
   1ac02:	2501      	movhi	r5, #1
   1ac04:	e7cc      	b.n	1aba0 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1ac06:	2501      	movs	r5, #1
   1ac08:	e7ca      	b.n	1aba0 <read_type_cb+0x38>
   1ac0a:	bf00      	nop
   1ac0c:	00028fff 	.word	0x00028fff

0001ac10 <find_type_cb>:
{
   1ac10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ac14:	f642 0301 	movw	r3, #10241	; 0x2801
   1ac18:	2500      	movs	r5, #0
{
   1ac1a:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   1ac1c:	f8d2 9000 	ldr.w	r9, [r2]
{
   1ac20:	4607      	mov	r7, r0
   1ac22:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ac24:	6800      	ldr	r0, [r0, #0]
   1ac26:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = chan->chan.chan.conn;
   1ac28:	f8d9 8008 	ldr.w	r8, [r9, #8]
{
   1ac2c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ac2e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1ac32:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1ac36:	f00d fd47 	bl	286c8 <bt_uuid_cmp>
   1ac3a:	2800      	cmp	r0, #0
   1ac3c:	d066      	beq.n	1ad0c <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1ac3e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1ac42:	6838      	ldr	r0, [r7, #0]
   1ac44:	a90b      	add	r1, sp, #44	; 0x2c
   1ac46:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1ac4a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1ac4e:	f00d fd3b 	bl	286c8 <bt_uuid_cmp>
   1ac52:	b138      	cbz	r0, 1ac64 <find_type_cb+0x54>
		if (data->group &&
   1ac54:	68a3      	ldr	r3, [r4, #8]
   1ac56:	b11b      	cbz	r3, 1ac60 <find_type_cb+0x50>
   1ac58:	885a      	ldrh	r2, [r3, #2]
   1ac5a:	42b2      	cmp	r2, r6
   1ac5c:	d200      	bcs.n	1ac60 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1ac5e:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1ac60:	2001      	movs	r0, #1
   1ac62:	e009      	b.n	1ac78 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1ac64:	6861      	ldr	r1, [r4, #4]
   1ac66:	4608      	mov	r0, r1
   1ac68:	f00e f9bb 	bl	28fe2 <net_buf_frags_len>
   1ac6c:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   1ac70:	1a1b      	subs	r3, r3, r0
   1ac72:	2b03      	cmp	r3, #3
   1ac74:	d803      	bhi.n	1ac7e <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1ac76:	2000      	movs	r0, #0
}
   1ac78:	b011      	add	sp, #68	; 0x44
   1ac7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1ac7e:	4608      	mov	r0, r1
   1ac80:	f005 fa72 	bl	20168 <net_buf_frag_last>
   1ac84:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1ac86:	6860      	ldr	r0, [r4, #4]
   1ac88:	f00e f9ab 	bl	28fe2 <net_buf_frags_len>
   1ac8c:	f8b9 a086 	ldrh.w	sl, [r9, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   1ac90:	f105 0b08 	add.w	fp, r5, #8
   1ac94:	ebaa 0a00 	sub.w	sl, sl, r0
   1ac98:	4658      	mov	r0, fp
   1ac9a:	f00f fce0 	bl	2a65e <net_buf_simple_tailroom>
   1ac9e:	4582      	cmp	sl, r0
   1aca0:	d237      	bcs.n	1ad12 <find_type_cb+0x102>
   1aca2:	6860      	ldr	r0, [r4, #4]
   1aca4:	f00e f99d 	bl	28fe2 <net_buf_frags_len>
   1aca8:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   1acac:	1a18      	subs	r0, r3, r0
	if (!len) {
   1acae:	b970      	cbnz	r0, 1acce <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1acb0:	6863      	ldr	r3, [r4, #4]
   1acb2:	7998      	ldrb	r0, [r3, #6]
   1acb4:	f005 f858 	bl	1fd68 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1acb8:	2200      	movs	r2, #0
   1acba:	2300      	movs	r3, #0
   1acbc:	f00f fca9 	bl	2a612 <net_buf_alloc_fixed>
		if (!frag) {
   1acc0:	4605      	mov	r5, r0
   1acc2:	2800      	cmp	r0, #0
   1acc4:	d0d7      	beq.n	1ac76 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1acc6:	4601      	mov	r1, r0
   1acc8:	6860      	ldr	r0, [r4, #4]
   1acca:	f005 fa95 	bl	201f8 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1acce:	2300      	movs	r3, #0
   1acd0:	9300      	str	r3, [sp, #0]
   1acd2:	4639      	mov	r1, r7
   1acd4:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1acd8:	2310      	movs	r3, #16
   1acda:	4640      	mov	r0, r8
   1acdc:	aa02      	add	r2, sp, #8
   1acde:	47c8      	blx	r9
	if (read < 0) {
   1ace0:	1e07      	subs	r7, r0, #0
   1ace2:	db13      	blt.n	1ad0c <find_type_cb+0xfc>
	if (read != data->value_len) {
   1ace4:	7c22      	ldrb	r2, [r4, #16]
   1ace6:	68e0      	ldr	r0, [r4, #12]
   1ace8:	42ba      	cmp	r2, r7
   1acea:	d037      	beq.n	1ad5c <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1acec:	4601      	mov	r1, r0
   1acee:	a80b      	add	r0, sp, #44	; 0x2c
   1acf0:	f00d fd14 	bl	2871c <bt_uuid_create>
   1acf4:	b988      	cbnz	r0, 1ad1a <find_type_cb+0x10a>
   1acf6:	4a1b      	ldr	r2, [pc, #108]	; (1ad64 <find_type_cb+0x154>)
   1acf8:	4b1b      	ldr	r3, [pc, #108]	; (1ad68 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1acfa:	7c21      	ldrb	r1, [r4, #16]
   1acfc:	1ad2      	subs	r2, r2, r3
   1acfe:	08d2      	lsrs	r2, r2, #3
   1ad00:	0192      	lsls	r2, r2, #6
   1ad02:	481a      	ldr	r0, [pc, #104]	; (1ad6c <find_type_cb+0x15c>)
   1ad04:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
   1ad08:	f00c f81f 	bl	26d4a <log_1>
	data->group = NULL;
   1ad0c:	2300      	movs	r3, #0
   1ad0e:	60a3      	str	r3, [r4, #8]
   1ad10:	e7a6      	b.n	1ac60 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1ad12:	4658      	mov	r0, fp
   1ad14:	f00f fca3 	bl	2a65e <net_buf_simple_tailroom>
   1ad18:	e7c9      	b.n	1acae <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1ad1a:	b2fa      	uxtb	r2, r7
   1ad1c:	a902      	add	r1, sp, #8
   1ad1e:	a806      	add	r0, sp, #24
   1ad20:	f00d fcfc 	bl	2871c <bt_uuid_create>
   1ad24:	b948      	cbnz	r0, 1ad3a <find_type_cb+0x12a>
   1ad26:	4a0f      	ldr	r2, [pc, #60]	; (1ad64 <find_type_cb+0x154>)
   1ad28:	4b0f      	ldr	r3, [pc, #60]	; (1ad68 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
   1ad2a:	4639      	mov	r1, r7
   1ad2c:	1ad2      	subs	r2, r2, r3
   1ad2e:	08d2      	lsrs	r2, r2, #3
   1ad30:	0192      	lsls	r2, r2, #6
   1ad32:	480f      	ldr	r0, [pc, #60]	; (1ad70 <find_type_cb+0x160>)
   1ad34:	f042 0202 	orr.w	r2, r2, #2
   1ad38:	e7e6      	b.n	1ad08 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1ad3a:	a906      	add	r1, sp, #24
   1ad3c:	a80b      	add	r0, sp, #44	; 0x2c
   1ad3e:	f00d fcc3 	bl	286c8 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1ad42:	2800      	cmp	r0, #0
   1ad44:	d1e2      	bne.n	1ad0c <find_type_cb+0xfc>
	data->err = 0x00;
   1ad46:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   1ad48:	2104      	movs	r1, #4
   1ad4a:	7463      	strb	r3, [r4, #17]
   1ad4c:	f105 0008 	add.w	r0, r5, #8
   1ad50:	f005 fada 	bl	20308 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1ad54:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1ad56:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1ad58:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1ad5a:	e781      	b.n	1ac60 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   1ad5c:	a902      	add	r1, sp, #8
   1ad5e:	f00d fc08 	bl	28572 <memcmp>
   1ad62:	e7ee      	b.n	1ad42 <find_type_cb+0x132>
   1ad64:	0002bfe4 	.word	0x0002bfe4
   1ad68:	0002bfe4 	.word	0x0002bfe4
   1ad6c:	0002fb68 	.word	0x0002fb68
   1ad70:	0002fb87 	.word	0x0002fb87

0001ad74 <chan_send>:
{
   1ad74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1ad78:	688b      	ldr	r3, [r1, #8]
{
   1ad7a:	4606      	mov	r6, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1ad7c:	781b      	ldrb	r3, [r3, #0]
{
   1ad7e:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1ad80:	2bd2      	cmp	r3, #210	; 0xd2
{
   1ad82:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1ad84:	d116      	bne.n	1adb4 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
   1ad86:	6803      	ldr	r3, [r0, #0]
   1ad88:	6818      	ldr	r0, [r3, #0]
   1ad8a:	f00f fb15 	bl	2a3b8 <bt_smp_sign>
		if (err) {
   1ad8e:	4605      	mov	r5, r0
   1ad90:	b180      	cbz	r0, 1adb4 <chan_send+0x40>
   1ad92:	4b24      	ldr	r3, [pc, #144]	; (1ae24 <chan_send+0xb0>)
   1ad94:	4924      	ldr	r1, [pc, #144]	; (1ae28 <chan_send+0xb4>)
			BT_ERR("Error signing data");
   1ad96:	4825      	ldr	r0, [pc, #148]	; (1ae2c <chan_send+0xb8>)
   1ad98:	1ac9      	subs	r1, r1, r3
   1ad9a:	08c9      	lsrs	r1, r1, #3
   1ad9c:	0189      	lsls	r1, r1, #6
   1ad9e:	f041 0101 	orr.w	r1, r1, #1
   1ada2:	f00b ffc5 	bl	26d30 <log_0>
			net_buf_unref(buf);
   1ada6:	4620      	mov	r0, r4
   1ada8:	f005 f97e 	bl	200a8 <net_buf_unref>
}
   1adac:	4628      	mov	r0, r5
   1adae:	b003      	add	sp, #12
   1adb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   1adb4:	f104 0008 	add.w	r0, r4, #8
   1adb8:	f00f fc4d 	bl	2a656 <net_buf_simple_headroom>
	state->len = buf->len;
   1adbc:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1adc0:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   1adc2:	b957      	cbnz	r7, 1adda <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
   1adc4:	68a3      	ldr	r3, [r4, #8]
   1adc6:	7818      	ldrb	r0, [r3, #0]
   1adc8:	f00e f92b 	bl	29022 <att_op_get_type>
   1adcc:	1e43      	subs	r3, r0, #1
   1adce:	b2db      	uxtb	r3, r3
   1add0:	2b04      	cmp	r3, #4
   1add2:	bf9c      	itt	ls
   1add4:	4a16      	ldrls	r2, [pc, #88]	; (1ae30 <chan_send+0xbc>)
   1add6:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1adda:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   1addc:	f8c6 7150 	str.w	r7, [r6, #336]	; 0x150
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1ade0:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   1ade2:	4b14      	ldr	r3, [pc, #80]	; (1ae34 <chan_send+0xc0>)
   1ade4:	429f      	cmp	r7, r3
   1ade6:	d018      	beq.n	1ae1a <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
   1ade8:	4b13      	ldr	r3, [pc, #76]	; (1ae38 <chan_send+0xc4>)
   1adea:	429f      	cmp	r7, r3
   1adec:	d017      	beq.n	1ae1e <chan_send+0xaa>
		return att_sent;
   1adee:	4913      	ldr	r1, [pc, #76]	; (1ae3c <chan_send+0xc8>)
   1adf0:	4b13      	ldr	r3, [pc, #76]	; (1ae40 <chan_send+0xcc>)
   1adf2:	4a14      	ldr	r2, [pc, #80]	; (1ae44 <chan_send+0xd0>)
   1adf4:	428f      	cmp	r7, r1
   1adf6:	bf18      	it	ne
   1adf8:	4613      	movne	r3, r2
			       &chan->chan.chan);
   1adfa:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1adfc:	4622      	mov	r2, r4
   1adfe:	2104      	movs	r1, #4
   1ae00:	9600      	str	r6, [sp, #0]
   1ae02:	f00e f871 	bl	28ee8 <bt_l2cap_send_cb>
	if (err) {
   1ae06:	4605      	mov	r5, r0
   1ae08:	2800      	cmp	r0, #0
   1ae0a:	d0cf      	beq.n	1adac <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
   1ae0c:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1ae0e:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1ae12:	fa10 f088 	uxtah	r0, r0, r8
   1ae16:	60a0      	str	r0, [r4, #8]
}
   1ae18:	e7c8      	b.n	1adac <chan_send+0x38>
		return att_rsp_sent;
   1ae1a:	4b0b      	ldr	r3, [pc, #44]	; (1ae48 <chan_send+0xd4>)
   1ae1c:	e7ed      	b.n	1adfa <chan_send+0x86>
		return att_cfm_sent;
   1ae1e:	4b0b      	ldr	r3, [pc, #44]	; (1ae4c <chan_send+0xd8>)
   1ae20:	e7eb      	b.n	1adfa <chan_send+0x86>
   1ae22:	bf00      	nop
   1ae24:	0002bfe4 	.word	0x0002bfe4
   1ae28:	0002bfe4 	.word	0x0002bfe4
   1ae2c:	0002fba6 	.word	0x0002fba6
   1ae30:	0002c620 	.word	0x0002c620
   1ae34:	0002932f 	.word	0x0002932f
   1ae38:	00029343 	.word	0x00029343
   1ae3c:	00029315 	.word	0x00029315
   1ae40:	0001aa95 	.word	0x0001aa95
   1ae44:	00028ff3 	.word	0x00028ff3
   1ae48:	0001aa85 	.word	0x0001aa85
   1ae4c:	0001aa75 	.word	0x0001aa75

0001ae50 <bt_att_chan_req_send>:
{
   1ae50:	b538      	push	{r3, r4, r5, lr}
   1ae52:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   1ae54:	4604      	mov	r4, r0
   1ae56:	b958      	cbnz	r0, 1ae70 <bt_att_chan_req_send+0x20>
   1ae58:	491d      	ldr	r1, [pc, #116]	; (1aed0 <bt_att_chan_req_send+0x80>)
   1ae5a:	481e      	ldr	r0, [pc, #120]	; (1aed4 <bt_att_chan_req_send+0x84>)
   1ae5c:	f240 2332 	movw	r3, #562	; 0x232
   1ae60:	4a1d      	ldr	r2, [pc, #116]	; (1aed8 <bt_att_chan_req_send+0x88>)
   1ae62:	f00b fc5b 	bl	2671c <printk>
   1ae66:	f240 2132 	movw	r1, #562	; 0x232
   1ae6a:	481b      	ldr	r0, [pc, #108]	; (1aed8 <bt_att_chan_req_send+0x88>)
   1ae6c:	f00b fefb 	bl	26c66 <assert_post_action>
	__ASSERT_NO_MSG(req);
   1ae70:	b95d      	cbnz	r5, 1ae8a <bt_att_chan_req_send+0x3a>
   1ae72:	491a      	ldr	r1, [pc, #104]	; (1aedc <bt_att_chan_req_send+0x8c>)
   1ae74:	4817      	ldr	r0, [pc, #92]	; (1aed4 <bt_att_chan_req_send+0x84>)
   1ae76:	f240 2333 	movw	r3, #563	; 0x233
   1ae7a:	4a17      	ldr	r2, [pc, #92]	; (1aed8 <bt_att_chan_req_send+0x88>)
   1ae7c:	f00b fc4e 	bl	2671c <printk>
   1ae80:	f240 2133 	movw	r1, #563	; 0x233
   1ae84:	4814      	ldr	r0, [pc, #80]	; (1aed8 <bt_att_chan_req_send+0x88>)
   1ae86:	f00b feee 	bl	26c66 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   1ae8a:	686b      	ldr	r3, [r5, #4]
   1ae8c:	b95b      	cbnz	r3, 1aea6 <bt_att_chan_req_send+0x56>
   1ae8e:	4914      	ldr	r1, [pc, #80]	; (1aee0 <bt_att_chan_req_send+0x90>)
   1ae90:	4810      	ldr	r0, [pc, #64]	; (1aed4 <bt_att_chan_req_send+0x84>)
   1ae92:	f44f 730d 	mov.w	r3, #564	; 0x234
   1ae96:	4a10      	ldr	r2, [pc, #64]	; (1aed8 <bt_att_chan_req_send+0x88>)
   1ae98:	f00b fc40 	bl	2671c <printk>
   1ae9c:	f44f 710d 	mov.w	r1, #564	; 0x234
   1aea0:	480d      	ldr	r0, [pc, #52]	; (1aed8 <bt_att_chan_req_send+0x88>)
   1aea2:	f00b fee0 	bl	26c66 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   1aea6:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   1aeaa:	b15b      	cbz	r3, 1aec4 <bt_att_chan_req_send+0x74>
   1aeac:	490d      	ldr	r1, [pc, #52]	; (1aee4 <bt_att_chan_req_send+0x94>)
   1aeae:	4809      	ldr	r0, [pc, #36]	; (1aed4 <bt_att_chan_req_send+0x84>)
   1aeb0:	f240 2335 	movw	r3, #565	; 0x235
   1aeb4:	4a08      	ldr	r2, [pc, #32]	; (1aed8 <bt_att_chan_req_send+0x88>)
   1aeb6:	f00b fc31 	bl	2671c <printk>
   1aeba:	f240 2135 	movw	r1, #565	; 0x235
   1aebe:	4806      	ldr	r0, [pc, #24]	; (1aed8 <bt_att_chan_req_send+0x88>)
   1aec0:	f00b fed1 	bl	26c66 <assert_post_action>
	return chan_req_send(chan, req);
   1aec4:	4629      	mov	r1, r5
   1aec6:	4620      	mov	r0, r4
}
   1aec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return chan_req_send(chan, req);
   1aecc:	f00e b9e1 	b.w	29292 <chan_req_send>
   1aed0:	0002fbe8 	.word	0x0002fbe8
   1aed4:	0002cfb2 	.word	0x0002cfb2
   1aed8:	0002fbb9 	.word	0x0002fbb9
   1aedc:	0002faf4 	.word	0x0002faf4
   1aee0:	0002fbed 	.word	0x0002fbed
   1aee4:	0002fbf7 	.word	0x0002fbf7

0001aee8 <att_get>:
{
   1aee8:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1aeea:	7b43      	ldrb	r3, [r0, #13]
   1aeec:	2b07      	cmp	r3, #7
   1aeee:	d00b      	beq.n	1af08 <att_get+0x20>
   1aef0:	4917      	ldr	r1, [pc, #92]	; (1af50 <att_get+0x68>)
   1aef2:	4b18      	ldr	r3, [pc, #96]	; (1af54 <att_get+0x6c>)
		BT_WARN("Not connected");
   1aef4:	4818      	ldr	r0, [pc, #96]	; (1af58 <att_get+0x70>)
   1aef6:	1ac9      	subs	r1, r1, r3
   1aef8:	08c9      	lsrs	r1, r1, #3
   1aefa:	0189      	lsls	r1, r1, #6
   1aefc:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
   1af00:	f00b ff16 	bl	26d30 <log_0>
		return NULL;
   1af04:	2400      	movs	r4, #0
   1af06:	e00e      	b.n	1af26 <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1af08:	2104      	movs	r1, #4
   1af0a:	f00e f834 	bl	28f76 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1af0e:	4604      	mov	r4, r0
   1af10:	b958      	cbnz	r0, 1af2a <att_get+0x42>
   1af12:	490f      	ldr	r1, [pc, #60]	; (1af50 <att_get+0x68>)
   1af14:	4b0f      	ldr	r3, [pc, #60]	; (1af54 <att_get+0x6c>)
		BT_ERR("Unable to find ATT channel");
   1af16:	4811      	ldr	r0, [pc, #68]	; (1af5c <att_get+0x74>)
   1af18:	1ac9      	subs	r1, r1, r3
   1af1a:	08c9      	lsrs	r1, r1, #3
   1af1c:	0189      	lsls	r1, r1, #6
   1af1e:	f041 0101 	orr.w	r1, r1, #1
   1af22:	f00b ff05 	bl	26d30 <log_0>
}
   1af26:	4620      	mov	r0, r4
   1af28:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1af2a:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
   1af2e:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1af32:	075b      	lsls	r3, r3, #29
   1af34:	d508      	bpl.n	1af48 <att_get+0x60>
   1af36:	4906      	ldr	r1, [pc, #24]	; (1af50 <att_get+0x68>)
   1af38:	4b06      	ldr	r3, [pc, #24]	; (1af54 <att_get+0x6c>)
		BT_WARN("ATT channel flagged as disconnected");
   1af3a:	4809      	ldr	r0, [pc, #36]	; (1af60 <att_get+0x78>)
   1af3c:	1ac9      	subs	r1, r1, r3
   1af3e:	08c9      	lsrs	r1, r1, #3
   1af40:	0189      	lsls	r1, r1, #6
   1af42:	f041 0102 	orr.w	r1, r1, #2
   1af46:	e7db      	b.n	1af00 <att_get+0x18>
	return att_chan->att;
   1af48:	f850 4c08 	ldr.w	r4, [r0, #-8]
   1af4c:	e7eb      	b.n	1af26 <att_get+0x3e>
   1af4e:	bf00      	nop
   1af50:	0002bfe4 	.word	0x0002bfe4
   1af54:	0002bfe4 	.word	0x0002bfe4
   1af58:	0002fc02 	.word	0x0002fc02
   1af5c:	0002fc10 	.word	0x0002fc10
   1af60:	0002fc2b 	.word	0x0002fc2b

0001af64 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1af64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1af66:	2300      	movs	r3, #0
{
   1af68:	4606      	mov	r6, r0
   1af6a:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1af6c:	2200      	movs	r2, #0
   1af6e:	4669      	mov	r1, sp
   1af70:	4826      	ldr	r0, [pc, #152]	; (1b00c <bt_att_accept+0xa8>)
   1af72:	f007 fd23 	bl	229bc <k_mem_slab_alloc>
   1af76:	4604      	mov	r4, r0
   1af78:	b178      	cbz	r0, 1af9a <bt_att_accept+0x36>
		BT_ERR("No available ATT context for conn %p", conn);
   1af7a:	4631      	mov	r1, r6
   1af7c:	4a24      	ldr	r2, [pc, #144]	; (1b010 <bt_att_accept+0xac>)
   1af7e:	4b25      	ldr	r3, [pc, #148]	; (1b014 <bt_att_accept+0xb0>)
   1af80:	4825      	ldr	r0, [pc, #148]	; (1b018 <bt_att_accept+0xb4>)
   1af82:	1ad2      	subs	r2, r2, r3
   1af84:	08d2      	lsrs	r2, r2, #3
   1af86:	0192      	lsls	r2, r2, #6
   1af88:	f042 0201 	orr.w	r2, r2, #1
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1af8c:	f00b fedd 	bl	26d4a <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   1af90:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1af94:	4620      	mov	r0, r4
   1af96:	b003      	add	sp, #12
   1af98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   1af9a:	4601      	mov	r1, r0
   1af9c:	2230      	movs	r2, #48	; 0x30
   1af9e:	9800      	ldr	r0, [sp, #0]
   1afa0:	f00d fb22 	bl	285e8 <memset>
	att->conn = conn;
   1afa4:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1afa6:	2200      	movs	r2, #0
	list->head = NULL;
   1afa8:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   1afac:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   1afb0:	60ac      	str	r4, [r5, #8]
   1afb2:	2300      	movs	r3, #0
   1afb4:	4819      	ldr	r0, [pc, #100]	; (1b01c <bt_att_accept+0xb8>)
   1afb6:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1afb8:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1afba:	f007 fcff 	bl	229bc <k_mem_slab_alloc>
   1afbe:	4604      	mov	r4, r0
   1afc0:	b148      	cbz	r0, 1afd6 <bt_att_accept+0x72>
   1afc2:	4a13      	ldr	r2, [pc, #76]	; (1b010 <bt_att_accept+0xac>)
   1afc4:	4b13      	ldr	r3, [pc, #76]	; (1b014 <bt_att_accept+0xb0>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1afc6:	6829      	ldr	r1, [r5, #0]
   1afc8:	1ad2      	subs	r2, r2, r3
   1afca:	08d2      	lsrs	r2, r2, #3
   1afcc:	0192      	lsls	r2, r2, #6
   1afce:	4814      	ldr	r0, [pc, #80]	; (1b020 <bt_att_accept+0xbc>)
   1afd0:	f042 0201 	orr.w	r2, r2, #1
   1afd4:	e7da      	b.n	1af8c <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
   1afd6:	4601      	mov	r1, r0
   1afd8:	f44f 72ac 	mov.w	r2, #344	; 0x158
   1afdc:	9801      	ldr	r0, [sp, #4]
   1afde:	f00d fb03 	bl	285e8 <memset>
	chan->chan.chan.ops = &ops;
   1afe2:	9801      	ldr	r0, [sp, #4]
   1afe4:	4b0f      	ldr	r3, [pc, #60]	; (1b024 <bt_att_accept+0xc0>)
   1afe6:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   1afe8:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1afec:	f010 fcd9 	bl	2b9a2 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1aff0:	9b01      	ldr	r3, [sp, #4]
   1aff2:	33f8      	adds	r3, #248	; 0xf8
   1aff4:	e8d3 2fef 	ldaex	r2, [r3]
   1aff8:	e8c3 4fe1 	stlex	r1, r4, [r3]
   1affc:	2900      	cmp	r1, #0
   1affe:	d1f9      	bne.n	1aff4 <bt_att_accept+0x90>
	chan->att = att;
   1b000:	9b01      	ldr	r3, [sp, #4]
   1b002:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   1b006:	603b      	str	r3, [r7, #0]
	return 0;
   1b008:	e7c4      	b.n	1af94 <bt_att_accept+0x30>
   1b00a:	bf00      	nop
   1b00c:	2000849c 	.word	0x2000849c
   1b010:	0002bfe4 	.word	0x0002bfe4
   1b014:	0002bfe4 	.word	0x0002bfe4
   1b018:	0002fc4f 	.word	0x0002fc4f
   1b01c:	200084bc 	.word	0x200084bc
   1b020:	0002fc74 	.word	0x0002fc74
   1b024:	200082b0 	.word	0x200082b0

0001b028 <bt_att_connected>:
{
   1b028:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1b02a:	2104      	movs	r1, #4
{
   1b02c:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1b02e:	6800      	ldr	r0, [r0, #0]
   1b030:	f00d ff91 	bl	28f56 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   1b034:	4605      	mov	r5, r0
   1b036:	b970      	cbnz	r0, 1b056 <bt_att_connected+0x2e>
   1b038:	4919      	ldr	r1, [pc, #100]	; (1b0a0 <bt_att_connected+0x78>)
   1b03a:	f640 2317 	movw	r3, #2583	; 0xa17
   1b03e:	4a19      	ldr	r2, [pc, #100]	; (1b0a4 <bt_att_connected+0x7c>)
   1b040:	4819      	ldr	r0, [pc, #100]	; (1b0a8 <bt_att_connected+0x80>)
   1b042:	f00b fb6b 	bl	2671c <printk>
   1b046:	4819      	ldr	r0, [pc, #100]	; (1b0ac <bt_att_connected+0x84>)
   1b048:	f00b fb68 	bl	2671c <printk>
   1b04c:	f640 2117 	movw	r1, #2583	; 0xa17
   1b050:	4814      	ldr	r0, [pc, #80]	; (1b0a4 <bt_att_connected+0x7c>)
   1b052:	f00b fe08 	bl	26c66 <assert_post_action>
	struct bt_att *att = att_chan->att;
   1b056:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   1b05a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1b05c:	b91b      	cbnz	r3, 1b066 <bt_att_connected+0x3e>
   1b05e:	f105 000c 	add.w	r0, r5, #12
   1b062:	f010 fc9e 	bl	2b9a2 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   1b066:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   1b068:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
	parent->next = child;
   1b06c:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
Z_GENLIST_PREPEND(slist, snode)
   1b070:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	list->head = node;
   1b072:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   1b074:	b902      	cbnz	r2, 1b078 <bt_att_connected+0x50>
	list->tail = node;
   1b076:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b078:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
   1b07c:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   1b080:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1b082:	bf58      	it	pl
   1b084:	2317      	movpl	r3, #23
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1b086:	f504 708c 	add.w	r0, r4, #280	; 0x118
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1b08a:	bf5c      	itt	pl
   1b08c:	f8a4 307e 	strhpl.w	r3, [r4, #126]	; 0x7e
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1b090:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1b094:	4906      	ldr	r1, [pc, #24]	; (1b0b0 <bt_att_connected+0x88>)
}
   1b096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1b09a:	f008 bdd7 	b.w	23c4c <k_work_init_delayable>
   1b09e:	bf00      	nop
   1b0a0:	0002fbe8 	.word	0x0002fbe8
   1b0a4:	0002fbb9 	.word	0x0002fbb9
   1b0a8:	0002cfb2 	.word	0x0002cfb2
   1b0ac:	0002fc99 	.word	0x0002fc99
   1b0b0:	0001bb5d 	.word	0x0001bb5d

0001b0b4 <att_write_cmd>:
{
   1b0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b0b6:	4604      	mov	r4, r0
   1b0b8:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   1b0ba:	f101 0008 	add.w	r0, r1, #8
   1b0be:	460d      	mov	r5, r1
   1b0c0:	f00f fac1 	bl	2a646 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1b0c4:	6823      	ldr	r3, [r4, #0]
   1b0c6:	4606      	mov	r6, r0
   1b0c8:	2100      	movs	r1, #0
   1b0ca:	6818      	ldr	r0, [r3, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1b0cc:	68af      	ldr	r7, [r5, #8]
   1b0ce:	89ad      	ldrh	r5, [r5, #12]
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1b0d0:	f00e fe98 	bl	29e04 <bt_gatt_change_aware>
   1b0d4:	b328      	cbz	r0, 1b122 <att_write_cmd+0x6e>
	if (!handle) {
   1b0d6:	b336      	cbz	r6, 1b126 <att_write_cmd+0x72>
	(void)memset(&data, 0, sizeof(data));
   1b0d8:	2218      	movs	r2, #24
   1b0da:	2100      	movs	r1, #0
   1b0dc:	4668      	mov	r0, sp
   1b0de:	f00d fa83 	bl	285e8 <memset>
	data.conn = chan->att->conn;
   1b0e2:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b0e4:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   1b0e6:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b0e8:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   1b0ea:	9300      	str	r3, [sp, #0]
	data.req = req;
   1b0ec:	2300      	movs	r3, #0
   1b0ee:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   1b0f2:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b0f6:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b0f8:	4a0c      	ldr	r2, [pc, #48]	; (1b12c <att_write_cmd+0x78>)
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b0fa:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b0fe:	466b      	mov	r3, sp
	data.value = value;
   1b100:	9703      	str	r7, [sp, #12]
	data.len = len;
   1b102:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b106:	f00d ffd2 	bl	290ae <bt_gatt_foreach_attr>
	if (data.err) {
   1b10a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1b10e:	b92b      	cbnz	r3, 1b11c <att_write_cmd+0x68>
	if (data.buf) {
   1b110:	9901      	ldr	r1, [sp, #4]
   1b112:	b119      	cbz	r1, 1b11c <att_write_cmd+0x68>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b114:	4620      	mov	r0, r4
   1b116:	4a06      	ldr	r2, [pc, #24]	; (1b130 <att_write_cmd+0x7c>)
   1b118:	f00e f8ee 	bl	292f8 <bt_att_chan_send_rsp>
   1b11c:	2000      	movs	r0, #0
}
   1b11e:	b007      	add	sp, #28
   1b120:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b122:	2012      	movs	r0, #18
   1b124:	e7fb      	b.n	1b11e <att_write_cmd+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
   1b126:	2001      	movs	r0, #1
   1b128:	e7f9      	b.n	1b11e <att_write_cmd+0x6a>
   1b12a:	bf00      	nop
   1b12c:	000293f1 	.word	0x000293f1
   1b130:	0002932f 	.word	0x0002932f

0001b134 <bt_att_chan_create_pdu>:
{
   1b134:	b538      	push	{r3, r4, r5, lr}
   1b136:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b138:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
   1b13c:	3201      	adds	r2, #1
   1b13e:	428a      	cmp	r2, r1
   1b140:	d90c      	bls.n	1b15c <bt_att_chan_create_pdu+0x28>
   1b142:	481a      	ldr	r0, [pc, #104]	; (1b1ac <bt_att_chan_create_pdu+0x78>)
   1b144:	4b1a      	ldr	r3, [pc, #104]	; (1b1b0 <bt_att_chan_create_pdu+0x7c>)
		return NULL;
   1b146:	2400      	movs	r4, #0
   1b148:	1a1b      	subs	r3, r3, r0
   1b14a:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1b14c:	019b      	lsls	r3, r3, #6
   1b14e:	4819      	ldr	r0, [pc, #100]	; (1b1b4 <bt_att_chan_create_pdu+0x80>)
   1b150:	f043 0302 	orr.w	r3, r3, #2
   1b154:	f00b fe0d 	bl	26d72 <log_2>
}
   1b158:	4620      	mov	r0, r4
   1b15a:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   1b15c:	4628      	mov	r0, r5
   1b15e:	f00d ff60 	bl	29022 <att_op_get_type>
   1b162:	2802      	cmp	r0, #2
   1b164:	d001      	beq.n	1b16a <bt_att_chan_create_pdu+0x36>
   1b166:	2804      	cmp	r0, #4
   1b168:	d114      	bne.n	1b194 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1b16a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1b16e:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1b170:	2100      	movs	r1, #0
   1b172:	4608      	mov	r0, r1
   1b174:	f00d feb5 	bl	28ee2 <bt_l2cap_create_pdu_timeout>
   1b178:	4604      	mov	r4, r0
	if (!buf) {
   1b17a:	b980      	cbnz	r0, 1b19e <bt_att_chan_create_pdu+0x6a>
   1b17c:	4b0b      	ldr	r3, [pc, #44]	; (1b1ac <bt_att_chan_create_pdu+0x78>)
   1b17e:	4a0c      	ldr	r2, [pc, #48]	; (1b1b0 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   1b180:	4629      	mov	r1, r5
   1b182:	1ad2      	subs	r2, r2, r3
   1b184:	08d2      	lsrs	r2, r2, #3
   1b186:	0192      	lsls	r2, r2, #6
   1b188:	480b      	ldr	r0, [pc, #44]	; (1b1b8 <bt_att_chan_create_pdu+0x84>)
   1b18a:	f042 0201 	orr.w	r2, r2, #1
   1b18e:	f00b fddc 	bl	26d4a <log_1>
		return NULL;
   1b192:	e7e1      	b.n	1b158 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
   1b194:	f04f 32ff 	mov.w	r2, #4294967295
   1b198:	f04f 33ff 	mov.w	r3, #4294967295
   1b19c:	e7e8      	b.n	1b170 <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
   1b19e:	2101      	movs	r1, #1
   1b1a0:	3008      	adds	r0, #8
   1b1a2:	f005 f8b1 	bl	20308 <net_buf_simple_add>
	hdr->code = op;
   1b1a6:	7005      	strb	r5, [r0, #0]
	return buf;
   1b1a8:	e7d6      	b.n	1b158 <bt_att_chan_create_pdu+0x24>
   1b1aa:	bf00      	nop
   1b1ac:	0002bfe4 	.word	0x0002bfe4
   1b1b0:	0002bfe4 	.word	0x0002bfe4
   1b1b4:	0002fcb0 	.word	0x0002fcb0
   1b1b8:	0002f9c9 	.word	0x0002f9c9

0001b1bc <att_indicate>:
{
   1b1bc:	b570      	push	{r4, r5, r6, lr}
   1b1be:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   1b1c0:	f101 0008 	add.w	r0, r1, #8
   1b1c4:	460d      	mov	r5, r1
   1b1c6:	f00f fa3e 	bl	2a646 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1b1ca:	6826      	ldr	r6, [r4, #0]
   1b1cc:	4601      	mov	r1, r0
   1b1ce:	89ab      	ldrh	r3, [r5, #12]
   1b1d0:	68aa      	ldr	r2, [r5, #8]
   1b1d2:	6830      	ldr	r0, [r6, #0]
   1b1d4:	f00e fdeb 	bl	29dae <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   1b1d8:	211e      	movs	r1, #30
   1b1da:	2200      	movs	r2, #0
   1b1dc:	4620      	mov	r0, r4
   1b1de:	f7ff ffa9 	bl	1b134 <bt_att_chan_create_pdu>
	if (!buf) {
   1b1e2:	4601      	mov	r1, r0
   1b1e4:	b118      	cbz	r0, 1b1ee <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   1b1e6:	4620      	mov	r0, r4
   1b1e8:	4a02      	ldr	r2, [pc, #8]	; (1b1f4 <att_indicate+0x38>)
   1b1ea:	f00e f885 	bl	292f8 <bt_att_chan_send_rsp>
}
   1b1ee:	2000      	movs	r0, #0
   1b1f0:	bd70      	pop	{r4, r5, r6, pc}
   1b1f2:	bf00      	nop
   1b1f4:	00029343 	.word	0x00029343

0001b1f8 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1b1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b1fc:	4688      	mov	r8, r1
   1b1fe:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1b200:	2101      	movs	r1, #1
   1b202:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1b204:	4605      	mov	r5, r0
   1b206:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1b208:	f7ff ff94 	bl	1b134 <bt_att_chan_create_pdu>
	if (!buf) {
   1b20c:	4604      	mov	r4, r0
   1b20e:	b178      	cbz	r0, 1b230 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   1b210:	2104      	movs	r1, #4
   1b212:	3008      	adds	r0, #8
   1b214:	f005 f878 	bl	20308 <net_buf_simple_add>
	rsp->request = req;
   1b218:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1b21c:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1b21e:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1b222:	4621      	mov	r1, r4
   1b224:	4628      	mov	r0, r5
}
   1b226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1b22a:	4a02      	ldr	r2, [pc, #8]	; (1b234 <send_err_rsp.part.0+0x3c>)
   1b22c:	f00e b864 	b.w	292f8 <bt_att_chan_send_rsp>
}
   1b230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b234:	0002932f 	.word	0x0002932f

0001b238 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   1b238:	898b      	ldrh	r3, [r1, #12]
{
   1b23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b23e:	4604      	mov	r4, r0
   1b240:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   1b242:	b963      	cbnz	r3, 1b25e <bt_att_recv+0x26>
   1b244:	4948      	ldr	r1, [pc, #288]	; (1b368 <bt_att_recv+0x130>)
   1b246:	4b49      	ldr	r3, [pc, #292]	; (1b36c <bt_att_recv+0x134>)
		BT_ERR("Too small ATT PDU received");
   1b248:	4849      	ldr	r0, [pc, #292]	; (1b370 <bt_att_recv+0x138>)
   1b24a:	1ac9      	subs	r1, r1, r3
   1b24c:	08c9      	lsrs	r1, r1, #3
   1b24e:	0189      	lsls	r1, r1, #6
   1b250:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
   1b254:	f00b fd6c 	bl	26d30 <log_0>
}
   1b258:	2000      	movs	r0, #0
   1b25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1b25e:	2101      	movs	r1, #1
   1b260:	f108 0008 	add.w	r0, r8, #8
   1b264:	f005 f82e 	bl	202c4 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1b268:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1b26c:	4605      	mov	r5, r0
   1b26e:	2b00      	cmp	r3, #0
   1b270:	d0f2      	beq.n	1b258 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
   1b272:	4a40      	ldr	r2, [pc, #256]	; (1b374 <bt_att_recv+0x13c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1b274:	2300      	movs	r3, #0
   1b276:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   1b278:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1b27a:	f1a4 0608 	sub.w	r6, r4, #8
		if (hdr->code == handlers[i].op) {
   1b27e:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   1b282:	4288      	cmp	r0, r1
   1b284:	d119      	bne.n	1b2ba <bt_att_recv+0x82>
		if (handler->type == ATT_REQUEST &&
   1b286:	00d8      	lsls	r0, r3, #3
   1b288:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1b28c:	789f      	ldrb	r7, [r3, #2]
   1b28e:	2f01      	cmp	r7, #1
   1b290:	d12e      	bne.n	1b2f0 <bt_att_recv+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b292:	34f0      	adds	r4, #240	; 0xf0
   1b294:	e8d4 3fef 	ldaex	r3, [r4]
   1b298:	f043 0201 	orr.w	r2, r3, #1
   1b29c:	e8c4 2fe1 	stlex	r1, r2, [r4]
   1b2a0:	2900      	cmp	r1, #0
   1b2a2:	d1f7      	bne.n	1b294 <bt_att_recv+0x5c>
   1b2a4:	07da      	lsls	r2, r3, #31
   1b2a6:	d539      	bpl.n	1b31c <bt_att_recv+0xe4>
   1b2a8:	492f      	ldr	r1, [pc, #188]	; (1b368 <bt_att_recv+0x130>)
   1b2aa:	4b30      	ldr	r3, [pc, #192]	; (1b36c <bt_att_recv+0x134>)
			BT_WARN("Ignoring unexpected request");
   1b2ac:	4832      	ldr	r0, [pc, #200]	; (1b378 <bt_att_recv+0x140>)
   1b2ae:	1ac9      	subs	r1, r1, r3
   1b2b0:	08c9      	lsrs	r1, r1, #3
   1b2b2:	0189      	lsls	r1, r1, #6
   1b2b4:	f041 0102 	orr.w	r1, r1, #2
   1b2b8:	e7cc      	b.n	1b254 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1b2ba:	3301      	adds	r3, #1
   1b2bc:	2b1c      	cmp	r3, #28
   1b2be:	d1de      	bne.n	1b27e <bt_att_recv+0x46>
   1b2c0:	4b2a      	ldr	r3, [pc, #168]	; (1b36c <bt_att_recv+0x134>)
   1b2c2:	4a29      	ldr	r2, [pc, #164]	; (1b368 <bt_att_recv+0x130>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1b2c4:	482d      	ldr	r0, [pc, #180]	; (1b37c <bt_att_recv+0x144>)
   1b2c6:	1ad2      	subs	r2, r2, r3
   1b2c8:	08d2      	lsrs	r2, r2, #3
   1b2ca:	0192      	lsls	r2, r2, #6
   1b2cc:	f042 0202 	orr.w	r2, r2, #2
   1b2d0:	f00b fd3b 	bl	26d4a <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   1b2d4:	7829      	ldrb	r1, [r5, #0]
   1b2d6:	4608      	mov	r0, r1
   1b2d8:	f00d fea3 	bl	29022 <att_op_get_type>
   1b2dc:	2800      	cmp	r0, #0
   1b2de:	d0bb      	beq.n	1b258 <bt_att_recv+0x20>
	if (!req) {
   1b2e0:	2900      	cmp	r1, #0
   1b2e2:	d0b9      	beq.n	1b258 <bt_att_recv+0x20>
   1b2e4:	2306      	movs	r3, #6
   1b2e6:	2200      	movs	r2, #0
   1b2e8:	4630      	mov	r0, r6
   1b2ea:	f7ff ff85 	bl	1b1f8 <send_err_rsp.part.0>
   1b2ee:	e7b3      	b.n	1b258 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   1b2f0:	2f05      	cmp	r7, #5
   1b2f2:	d113      	bne.n	1b31c <bt_att_recv+0xe4>
   1b2f4:	34f0      	adds	r4, #240	; 0xf0
   1b2f6:	e8d4 3fef 	ldaex	r3, [r4]
   1b2fa:	f043 0202 	orr.w	r2, r3, #2
   1b2fe:	e8c4 2fe1 	stlex	r1, r2, [r4]
   1b302:	2900      	cmp	r1, #0
   1b304:	d1f7      	bne.n	1b2f6 <bt_att_recv+0xbe>
   1b306:	079b      	lsls	r3, r3, #30
   1b308:	d508      	bpl.n	1b31c <bt_att_recv+0xe4>
   1b30a:	4917      	ldr	r1, [pc, #92]	; (1b368 <bt_att_recv+0x130>)
   1b30c:	4b17      	ldr	r3, [pc, #92]	; (1b36c <bt_att_recv+0x134>)
			BT_WARN("Ignoring unexpected indication");
   1b30e:	481c      	ldr	r0, [pc, #112]	; (1b380 <bt_att_recv+0x148>)
   1b310:	1ac9      	subs	r1, r1, r3
   1b312:	08c9      	lsrs	r1, r1, #3
   1b314:	0189      	lsls	r1, r1, #6
   1b316:	f041 0102 	orr.w	r1, r1, #2
   1b31a:	e79b      	b.n	1b254 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
   1b31c:	eb0c 0300 	add.w	r3, ip, r0
   1b320:	f8b8 100c 	ldrh.w	r1, [r8, #12]
   1b324:	785a      	ldrb	r2, [r3, #1]
   1b326:	428a      	cmp	r2, r1
   1b328:	d90e      	bls.n	1b348 <bt_att_recv+0x110>
   1b32a:	4a10      	ldr	r2, [pc, #64]	; (1b36c <bt_att_recv+0x134>)
   1b32c:	4b0e      	ldr	r3, [pc, #56]	; (1b368 <bt_att_recv+0x130>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1b32e:	4815      	ldr	r0, [pc, #84]	; (1b384 <bt_att_recv+0x14c>)
   1b330:	1a9b      	subs	r3, r3, r2
   1b332:	08db      	lsrs	r3, r3, #3
   1b334:	019b      	lsls	r3, r3, #6
   1b336:	782a      	ldrb	r2, [r5, #0]
   1b338:	f043 0301 	orr.w	r3, r3, #1
   1b33c:	f00b fd19 	bl	26d72 <log_2>
	if (handler->type == ATT_REQUEST && err) {
   1b340:	2f01      	cmp	r7, #1
   1b342:	d189      	bne.n	1b258 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   1b344:	2304      	movs	r3, #4
   1b346:	e009      	b.n	1b35c <bt_att_recv+0x124>
		err = handler->func(att_chan, buf);
   1b348:	685b      	ldr	r3, [r3, #4]
   1b34a:	4641      	mov	r1, r8
   1b34c:	4630      	mov	r0, r6
   1b34e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1b350:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   1b352:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1b354:	d180      	bne.n	1b258 <bt_att_recv+0x20>
   1b356:	2800      	cmp	r0, #0
   1b358:	f43f af7e 	beq.w	1b258 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1b35c:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   1b35e:	2900      	cmp	r1, #0
   1b360:	f43f af7a 	beq.w	1b258 <bt_att_recv+0x20>
   1b364:	e7bf      	b.n	1b2e6 <bt_att_recv+0xae>
   1b366:	bf00      	nop
   1b368:	0002bfe4 	.word	0x0002bfe4
   1b36c:	0002bfe4 	.word	0x0002bfe4
   1b370:	0002fcd5 	.word	0x0002fcd5
   1b374:	0002c634 	.word	0x0002c634
   1b378:	0002fcf0 	.word	0x0002fcf0
   1b37c:	0002fd4a 	.word	0x0002fd4a
   1b380:	0002fd0c 	.word	0x0002fd0c
   1b384:	0002fd2b 	.word	0x0002fd2b

0001b388 <att_write_req>:
{
   1b388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b38c:	4604      	mov	r4, r0
   1b38e:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   1b390:	f101 0008 	add.w	r0, r1, #8
   1b394:	460d      	mov	r5, r1
   1b396:	f00f f956 	bl	2a646 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1b39a:	6823      	ldr	r3, [r4, #0]
   1b39c:	4606      	mov	r6, r0
   1b39e:	2101      	movs	r1, #1
   1b3a0:	6818      	ldr	r0, [r3, #0]
			     handle, 0, buf->data, buf->len);
   1b3a2:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1b3a6:	89ad      	ldrh	r5, [r5, #12]
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1b3a8:	f00e fd2c 	bl	29e04 <bt_gatt_change_aware>
   1b3ac:	2800      	cmp	r0, #0
   1b3ae:	d040      	beq.n	1b432 <att_write_req+0xaa>
	if (!handle) {
   1b3b0:	2e00      	cmp	r6, #0
   1b3b2:	d040      	beq.n	1b436 <att_write_req+0xae>
	(void)memset(&data, 0, sizeof(data));
   1b3b4:	2218      	movs	r2, #24
   1b3b6:	2100      	movs	r1, #0
   1b3b8:	4668      	mov	r0, sp
   1b3ba:	f00d f915 	bl	285e8 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1b3be:	2200      	movs	r2, #0
   1b3c0:	2113      	movs	r1, #19
   1b3c2:	4620      	mov	r0, r4
   1b3c4:	f7ff feb6 	bl	1b134 <bt_att_chan_create_pdu>
   1b3c8:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1b3ca:	b380      	cbz	r0, 1b42e <att_write_req+0xa6>
	data.conn = chan->att->conn;
   1b3cc:	6823      	ldr	r3, [r4, #0]
	data.req = req;
   1b3ce:	f04f 0812 	mov.w	r8, #18
	data.conn = chan->att->conn;
   1b3d2:	681b      	ldr	r3, [r3, #0]
	data.offset = offset;
   1b3d4:	2700      	movs	r7, #0
	data.conn = chan->att->conn;
   1b3d6:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b3d8:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b3da:	4631      	mov	r1, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b3dc:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b3e0:	4630      	mov	r0, r6
   1b3e2:	466b      	mov	r3, sp
   1b3e4:	4a15      	ldr	r2, [pc, #84]	; (1b43c <att_write_req+0xb4>)
	data.len = len;
   1b3e6:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   1b3ea:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   1b3ee:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   1b3f2:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b3f6:	f00d fe5a 	bl	290ae <bt_gatt_foreach_attr>
	if (data.err) {
   1b3fa:	f89d 5014 	ldrb.w	r5, [sp, #20]
   1b3fe:	b175      	cbz	r5, 1b41e <att_write_req+0x96>
			net_buf_unref(data.buf);
   1b400:	9801      	ldr	r0, [sp, #4]
   1b402:	f004 fe51 	bl	200a8 <net_buf_unref>
	if (!req) {
   1b406:	4632      	mov	r2, r6
   1b408:	4641      	mov	r1, r8
   1b40a:	4620      	mov	r0, r4
   1b40c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1b410:	f7ff fef2 	bl	1b1f8 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1b414:	463d      	mov	r5, r7
}
   1b416:	4628      	mov	r0, r5
   1b418:	b007      	add	sp, #28
   1b41a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   1b41e:	9901      	ldr	r1, [sp, #4]
   1b420:	2900      	cmp	r1, #0
   1b422:	d0f8      	beq.n	1b416 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b424:	4620      	mov	r0, r4
   1b426:	4a06      	ldr	r2, [pc, #24]	; (1b440 <att_write_req+0xb8>)
   1b428:	f00d ff66 	bl	292f8 <bt_att_chan_send_rsp>
   1b42c:	e7f3      	b.n	1b416 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   1b42e:	250e      	movs	r5, #14
   1b430:	e7f1      	b.n	1b416 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b432:	2512      	movs	r5, #18
   1b434:	e7ef      	b.n	1b416 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   1b436:	2501      	movs	r5, #1
   1b438:	e7ed      	b.n	1b416 <att_write_req+0x8e>
   1b43a:	bf00      	nop
   1b43c:	000293f1 	.word	0x000293f1
   1b440:	0002932f 	.word	0x0002932f

0001b444 <bt_att_create_pdu>:
{
   1b444:	b570      	push	{r4, r5, r6, lr}
   1b446:	460e      	mov	r6, r1
   1b448:	4615      	mov	r5, r2
	att = att_get(conn);
   1b44a:	f7ff fd4d 	bl	1aee8 <att_get>
	if (!att) {
   1b44e:	b1c0      	cbz	r0, 1b482 <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b450:	6a83      	ldr	r3, [r0, #40]	; 0x28
	return list->head;
   1b452:	1c69      	adds	r1, r5, #1
   1b454:	b15b      	cbz	r3, 1b46e <bt_att_create_pdu+0x2a>
   1b456:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   1b45a:	d008      	beq.n	1b46e <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b45c:	681b      	ldr	r3, [r3, #0]
   1b45e:	b10b      	cbz	r3, 1b464 <bt_att_create_pdu+0x20>
   1b460:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b464:	f8b0 2086 	ldrh.w	r2, [r0, #134]	; 0x86
   1b468:	4291      	cmp	r1, r2
   1b46a:	d90c      	bls.n	1b486 <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b46c:	b98b      	cbnz	r3, 1b492 <bt_att_create_pdu+0x4e>
   1b46e:	4a0e      	ldr	r2, [pc, #56]	; (1b4a8 <bt_att_create_pdu+0x64>)
   1b470:	4b0e      	ldr	r3, [pc, #56]	; (1b4ac <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1b472:	480f      	ldr	r0, [pc, #60]	; (1b4b0 <bt_att_create_pdu+0x6c>)
   1b474:	1ad2      	subs	r2, r2, r3
   1b476:	08d2      	lsrs	r2, r2, #3
   1b478:	0192      	lsls	r2, r2, #6
   1b47a:	f042 0202 	orr.w	r2, r2, #2
   1b47e:	f00b fc64 	bl	26d4a <log_1>
}
   1b482:	2000      	movs	r0, #0
   1b484:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1b486:	462a      	mov	r2, r5
   1b488:	4631      	mov	r1, r6
}
   1b48a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1b48e:	f7ff be51 	b.w	1b134 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b492:	f513 74aa 	adds.w	r4, r3, #340	; 0x154
   1b496:	d004      	beq.n	1b4a2 <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b498:	f8d3 4154 	ldr.w	r4, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b49c:	b10c      	cbz	r4, 1b4a2 <bt_att_create_pdu+0x5e>
   1b49e:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
{
   1b4a2:	4618      	mov	r0, r3
   1b4a4:	4623      	mov	r3, r4
   1b4a6:	e7dd      	b.n	1b464 <bt_att_create_pdu+0x20>
   1b4a8:	0002bfe4 	.word	0x0002bfe4
   1b4ac:	0002bfe4 	.word	0x0002bfe4
   1b4b0:	0002fd64 	.word	0x0002fd64

0001b4b4 <att_read_group_req>:
{
   1b4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1b4b8:	7b0c      	ldrb	r4, [r1, #12]
{
   1b4ba:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   1b4bc:	3c04      	subs	r4, #4
   1b4be:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1b4c0:	2c02      	cmp	r4, #2
{
   1b4c2:	4608      	mov	r0, r1
   1b4c4:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1b4c6:	d001      	beq.n	1b4cc <att_read_group_req+0x18>
   1b4c8:	2c10      	cmp	r4, #16
   1b4ca:	d16f      	bne.n	1b5ac <att_read_group_req+0xf8>
	return net_buf_simple_pull_mem(&buf->b, len);
   1b4cc:	2104      	movs	r1, #4
   1b4ce:	3008      	adds	r0, #8
   1b4d0:	f004 fef8 	bl	202c4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b4d4:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b4d8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b4da:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b4dc:	1d01      	adds	r1, r0, #4
   1b4de:	4622      	mov	r2, r4
   1b4e0:	4640      	mov	r0, r8
   1b4e2:	f00d f91b 	bl	2871c <bt_uuid_create>
   1b4e6:	2800      	cmp	r0, #0
   1b4e8:	d062      	beq.n	1b5b0 <att_read_group_req+0xfc>
	if (!start || !end) {
   1b4ea:	2e00      	cmp	r6, #0
   1b4ec:	d03a      	beq.n	1b564 <att_read_group_req+0xb0>
   1b4ee:	2400      	movs	r4, #0
   1b4f0:	2f00      	cmp	r7, #0
   1b4f2:	d036      	beq.n	1b562 <att_read_group_req+0xae>
	if (start > end) {
   1b4f4:	42b7      	cmp	r7, r6
   1b4f6:	d335      	bcc.n	1b564 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1b4f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b4fc:	4640      	mov	r0, r8
   1b4fe:	a901      	add	r1, sp, #4
   1b500:	f88d 4004 	strb.w	r4, [sp, #4]
   1b504:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b508:	f00d f8de 	bl	286c8 <bt_uuid_cmp>
   1b50c:	2800      	cmp	r0, #0
   1b50e:	d134      	bne.n	1b57a <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   1b510:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1b512:	2214      	movs	r2, #20
   1b514:	2100      	movs	r1, #0
   1b516:	a807      	add	r0, sp, #28
   1b518:	f00d f866 	bl	285e8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1b51c:	2201      	movs	r2, #1
   1b51e:	2111      	movs	r1, #17
   1b520:	4620      	mov	r0, r4
   1b522:	f7ff ff8f 	bl	1b444 <bt_att_create_pdu>
   1b526:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1b528:	2800      	cmp	r0, #0
   1b52a:	d041      	beq.n	1b5b0 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   1b52c:	2101      	movs	r1, #1
   1b52e:	3008      	adds	r0, #8
	data.uuid = uuid;
   1b530:	e9cd 5807 	strd	r5, r8, [sp, #28]
   1b534:	f004 fee8 	bl	20308 <net_buf_simple_add>
	data.rsp->len = 0U;
   1b538:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1b53c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1b53e:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   1b540:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1b544:	4639      	mov	r1, r7
   1b546:	4630      	mov	r0, r6
   1b548:	4a1a      	ldr	r2, [pc, #104]	; (1b5b4 <att_read_group_req+0x100>)
	data.group = NULL;
   1b54a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1b54e:	f00d fdae 	bl	290ae <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1b552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b554:	781c      	ldrb	r4, [r3, #0]
   1b556:	bb1c      	cbnz	r4, 1b5a0 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   1b558:	9809      	ldr	r0, [sp, #36]	; 0x24
   1b55a:	f004 fda5 	bl	200a8 <net_buf_unref>
	if (!req) {
   1b55e:	230a      	movs	r3, #10
   1b560:	e018      	b.n	1b594 <att_read_group_req+0xe0>
			*err = 0U;
   1b562:	463e      	mov	r6, r7
	if (!req) {
   1b564:	2301      	movs	r3, #1
   1b566:	4632      	mov	r2, r6
   1b568:	2110      	movs	r1, #16
   1b56a:	4628      	mov	r0, r5
   1b56c:	f7ff fe44 	bl	1b1f8 <send_err_rsp.part.0>
		return 0;
   1b570:	2400      	movs	r4, #0
}
   1b572:	4620      	mov	r0, r4
   1b574:	b00c      	add	sp, #48	; 0x30
   1b576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1b57a:	f642 0301 	movw	r3, #10241	; 0x2801
   1b57e:	4640      	mov	r0, r8
   1b580:	a907      	add	r1, sp, #28
   1b582:	f88d 401c 	strb.w	r4, [sp, #28]
   1b586:	f8ad 301e 	strh.w	r3, [sp, #30]
   1b58a:	f00d f89d 	bl	286c8 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1b58e:	2800      	cmp	r0, #0
   1b590:	d0be      	beq.n	1b510 <att_read_group_req+0x5c>
	if (!req) {
   1b592:	2310      	movs	r3, #16
   1b594:	4632      	mov	r2, r6
   1b596:	2110      	movs	r1, #16
   1b598:	4628      	mov	r0, r5
   1b59a:	f7ff fe2d 	bl	1b1f8 <send_err_rsp.part.0>
		return 0;
   1b59e:	e7e8      	b.n	1b572 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b5a0:	4628      	mov	r0, r5
   1b5a2:	4a05      	ldr	r2, [pc, #20]	; (1b5b8 <att_read_group_req+0x104>)
   1b5a4:	9909      	ldr	r1, [sp, #36]	; 0x24
   1b5a6:	f00d fea7 	bl	292f8 <bt_att_chan_send_rsp>
	return 0;
   1b5aa:	e7e1      	b.n	1b570 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   1b5ac:	2404      	movs	r4, #4
   1b5ae:	e7e0      	b.n	1b572 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   1b5b0:	240e      	movs	r4, #14
   1b5b2:	e7de      	b.n	1b572 <att_read_group_req+0xbe>
   1b5b4:	0001aabd 	.word	0x0001aabd
   1b5b8:	0002932f 	.word	0x0002932f

0001b5bc <att_read_mult_req>:
{
   1b5bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1b5c0:	6886      	ldr	r6, [r0, #8]
{
   1b5c2:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   1b5c4:	2210      	movs	r2, #16
{
   1b5c6:	4604      	mov	r4, r0
   1b5c8:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   1b5ca:	4668      	mov	r0, sp
   1b5cc:	2100      	movs	r1, #0
   1b5ce:	f00d f80b 	bl	285e8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1b5d2:	2200      	movs	r2, #0
   1b5d4:	210f      	movs	r1, #15
   1b5d6:	4630      	mov	r0, r6
   1b5d8:	f7ff ff34 	bl	1b444 <bt_att_create_pdu>
   1b5dc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b5de:	b360      	cbz	r0, 1b63a <att_read_mult_req+0x7e>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b5e0:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b5e4:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1b644 <att_read_mult_req+0x88>
	data.chan = chan;
   1b5e8:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1b5ea:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   1b5ee:	89ab      	ldrh	r3, [r5, #12]
   1b5f0:	2b01      	cmp	r3, #1
   1b5f2:	d805      	bhi.n	1b600 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b5f4:	4620      	mov	r0, r4
   1b5f6:	4a12      	ldr	r2, [pc, #72]	; (1b640 <att_read_mult_req+0x84>)
   1b5f8:	9902      	ldr	r1, [sp, #8]
   1b5fa:	f00d fe7d 	bl	292f8 <bt_att_chan_send_rsp>
   1b5fe:	e018      	b.n	1b632 <att_read_mult_req+0x76>
   1b600:	4638      	mov	r0, r7
   1b602:	f00f f820 	bl	2a646 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b606:	466b      	mov	r3, sp
   1b608:	464a      	mov	r2, r9
   1b60a:	4601      	mov	r1, r0
   1b60c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b60e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b612:	f00d fd4c 	bl	290ae <bt_gatt_foreach_attr>
		if (data.err) {
   1b616:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b61a:	2b00      	cmp	r3, #0
   1b61c:	d0e7      	beq.n	1b5ee <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   1b61e:	9802      	ldr	r0, [sp, #8]
   1b620:	f004 fd42 	bl	200a8 <net_buf_unref>
	if (!req) {
   1b624:	4632      	mov	r2, r6
   1b626:	210e      	movs	r1, #14
   1b628:	4620      	mov	r0, r4
   1b62a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b62e:	f7ff fde3 	bl	1b1f8 <send_err_rsp.part.0>
	return 0;
   1b632:	2000      	movs	r0, #0
}
   1b634:	b005      	add	sp, #20
   1b636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   1b63a:	200e      	movs	r0, #14
   1b63c:	e7fa      	b.n	1b634 <att_read_mult_req+0x78>
   1b63e:	bf00      	nop
   1b640:	0002932f 	.word	0x0002932f
   1b644:	000294bf 	.word	0x000294bf

0001b648 <att_read_rsp>:
{
   1b648:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1b64c:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   1b650:	4605      	mov	r5, r0
   1b652:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1b654:	4640      	mov	r0, r8
   1b656:	2101      	movs	r1, #1
{
   1b658:	4614      	mov	r4, r2
   1b65a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1b65c:	f00e fbd2 	bl	29e04 <bt_gatt_change_aware>
   1b660:	b390      	cbz	r0, 1b6c8 <att_read_rsp+0x80>
	if (!handle) {
   1b662:	b39e      	cbz	r6, 1b6cc <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   1b664:	2210      	movs	r2, #16
   1b666:	2100      	movs	r1, #0
   1b668:	4668      	mov	r0, sp
   1b66a:	f00c ffbd 	bl	285e8 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1b66e:	2200      	movs	r2, #0
   1b670:	4621      	mov	r1, r4
   1b672:	4640      	mov	r0, r8
   1b674:	f7ff fee6 	bl	1b444 <bt_att_create_pdu>
   1b678:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b67a:	b348      	cbz	r0, 1b6d0 <att_read_rsp+0x88>
	data.offset = offset;
   1b67c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b680:	4631      	mov	r1, r6
	data.offset = offset;
   1b682:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b686:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b688:	4630      	mov	r0, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b68a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b68e:	4a11      	ldr	r2, [pc, #68]	; (1b6d4 <att_read_rsp+0x8c>)
   1b690:	466b      	mov	r3, sp
	data.chan = chan;
   1b692:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b694:	f00d fd0b 	bl	290ae <bt_gatt_foreach_attr>
	if (data.err) {
   1b698:	f89d 400c 	ldrb.w	r4, [sp, #12]
   1b69c:	b174      	cbz	r4, 1b6bc <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   1b69e:	9802      	ldr	r0, [sp, #8]
   1b6a0:	f004 fd02 	bl	200a8 <net_buf_unref>
	if (!req) {
   1b6a4:	4632      	mov	r2, r6
   1b6a6:	4639      	mov	r1, r7
   1b6a8:	4628      	mov	r0, r5
   1b6aa:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b6ae:	f7ff fda3 	bl	1b1f8 <send_err_rsp.part.0>
		return 0;
   1b6b2:	2400      	movs	r4, #0
}
   1b6b4:	4620      	mov	r0, r4
   1b6b6:	b004      	add	sp, #16
   1b6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b6bc:	4628      	mov	r0, r5
   1b6be:	4a06      	ldr	r2, [pc, #24]	; (1b6d8 <att_read_rsp+0x90>)
   1b6c0:	9902      	ldr	r1, [sp, #8]
   1b6c2:	f00d fe19 	bl	292f8 <bt_att_chan_send_rsp>
	return 0;
   1b6c6:	e7f5      	b.n	1b6b4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b6c8:	2412      	movs	r4, #18
   1b6ca:	e7f3      	b.n	1b6b4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1b6cc:	2401      	movs	r4, #1
   1b6ce:	e7f1      	b.n	1b6b4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1b6d0:	240e      	movs	r4, #14
   1b6d2:	e7ef      	b.n	1b6b4 <att_read_rsp+0x6c>
   1b6d4:	000294bf 	.word	0x000294bf
   1b6d8:	0002932f 	.word	0x0002932f

0001b6dc <att_read_type_req>:
{
   1b6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1b6e0:	7b0c      	ldrb	r4, [r1, #12]
{
   1b6e2:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   1b6e4:	3c04      	subs	r4, #4
   1b6e6:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1b6e8:	2c02      	cmp	r4, #2
{
   1b6ea:	4608      	mov	r0, r1
   1b6ec:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1b6ee:	d001      	beq.n	1b6f4 <att_read_type_req+0x18>
   1b6f0:	2c10      	cmp	r4, #16
   1b6f2:	d150      	bne.n	1b796 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1b6f4:	2104      	movs	r1, #4
   1b6f6:	3008      	adds	r0, #8
   1b6f8:	f004 fde4 	bl	202c4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b6fc:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b700:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b702:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b704:	1d01      	adds	r1, r0, #4
   1b706:	4622      	mov	r2, r4
   1b708:	4640      	mov	r0, r8
   1b70a:	f00d f807 	bl	2871c <bt_uuid_create>
   1b70e:	b188      	cbz	r0, 1b734 <att_read_type_req+0x58>
	if (!start || !end) {
   1b710:	b19e      	cbz	r6, 1b73a <att_read_type_req+0x5e>
   1b712:	b18f      	cbz	r7, 1b738 <att_read_type_req+0x5c>
	if (start > end) {
   1b714:	42be      	cmp	r6, r7
   1b716:	d810      	bhi.n	1b73a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1b718:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1b71a:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1b71c:	2100      	movs	r1, #0
   1b71e:	eb0d 0002 	add.w	r0, sp, r2
   1b722:	f00c ff61 	bl	285e8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1b726:	2201      	movs	r2, #1
   1b728:	2109      	movs	r1, #9
   1b72a:	4620      	mov	r0, r4
   1b72c:	f7ff fe8a 	bl	1b444 <bt_att_create_pdu>
   1b730:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1b732:	b968      	cbnz	r0, 1b750 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   1b734:	240e      	movs	r4, #14
   1b736:	e007      	b.n	1b748 <att_read_type_req+0x6c>
			*err = 0U;
   1b738:	463e      	mov	r6, r7
	if (!req) {
   1b73a:	2301      	movs	r3, #1
   1b73c:	4632      	mov	r2, r6
   1b73e:	2108      	movs	r1, #8
   1b740:	4628      	mov	r0, r5
   1b742:	f7ff fd59 	bl	1b1f8 <send_err_rsp.part.0>
		return 0;
   1b746:	2400      	movs	r4, #0
}
   1b748:	4620      	mov	r0, r4
   1b74a:	b00c      	add	sp, #48	; 0x30
   1b74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1b750:	2101      	movs	r1, #1
   1b752:	3008      	adds	r0, #8
	data.uuid = uuid;
   1b754:	e9cd 5806 	strd	r5, r8, [sp, #24]
   1b758:	f004 fdd6 	bl	20308 <net_buf_simple_add>
	data.rsp->len = 0U;
   1b75c:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b760:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1b762:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1b764:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   1b766:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1b76a:	4a0c      	ldr	r2, [pc, #48]	; (1b79c <att_read_type_req+0xc0>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b76c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1b770:	4630      	mov	r0, r6
   1b772:	ab06      	add	r3, sp, #24
   1b774:	f00d fc9b 	bl	290ae <bt_gatt_foreach_attr>
	if (data.err) {
   1b778:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   1b77c:	b12c      	cbz	r4, 1b78a <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   1b77e:	9808      	ldr	r0, [sp, #32]
   1b780:	f004 fc92 	bl	200a8 <net_buf_unref>
	if (!req) {
   1b784:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1b788:	e7d8      	b.n	1b73c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b78a:	4628      	mov	r0, r5
   1b78c:	4a04      	ldr	r2, [pc, #16]	; (1b7a0 <att_read_type_req+0xc4>)
   1b78e:	9908      	ldr	r1, [sp, #32]
   1b790:	f00d fdb2 	bl	292f8 <bt_att_chan_send_rsp>
	return 0;
   1b794:	e7d8      	b.n	1b748 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   1b796:	2404      	movs	r4, #4
   1b798:	e7d6      	b.n	1b748 <att_read_type_req+0x6c>
   1b79a:	bf00      	nop
   1b79c:	0001ab69 	.word	0x0001ab69
   1b7a0:	0002932f 	.word	0x0002932f

0001b7a4 <att_find_type_req>:
{
   1b7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b7a8:	4688      	mov	r8, r1
   1b7aa:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1b7ac:	2106      	movs	r1, #6
   1b7ae:	b086      	sub	sp, #24
   1b7b0:	f108 0008 	add.w	r0, r8, #8
   1b7b4:	f004 fd86 	bl	202c4 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b7b8:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   1b7ba:	b317      	cbz	r7, 1b802 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b7bc:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   1b7c0:	f1b9 0f00 	cmp.w	r9, #0
   1b7c4:	d01c      	beq.n	1b800 <att_find_type_req+0x5c>
	if (start > end) {
   1b7c6:	45b9      	cmp	r9, r7
   1b7c8:	d31b      	bcc.n	1b802 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   1b7ca:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1b7cc:	2400      	movs	r4, #0
   1b7ce:	f8ad 3002 	strh.w	r3, [sp, #2]
   1b7d2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b7d6:	4668      	mov	r0, sp
   1b7d8:	a901      	add	r1, sp, #4
	value = buf->data;
   1b7da:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1b7de:	f88d 4000 	strb.w	r4, [sp]
   1b7e2:	f88d 4004 	strb.w	r4, [sp, #4]
   1b7e6:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b7ea:	f00c ff6d 	bl	286c8 <bt_uuid_cmp>
   1b7ee:	4606      	mov	r6, r0
   1b7f0:	b190      	cbz	r0, 1b818 <att_find_type_req+0x74>
	if (!req) {
   1b7f2:	230a      	movs	r3, #10
   1b7f4:	463a      	mov	r2, r7
   1b7f6:	2106      	movs	r1, #6
   1b7f8:	4628      	mov	r0, r5
   1b7fa:	f7ff fcfd 	bl	1b1f8 <send_err_rsp.part.0>
		return 0;
   1b7fe:	e007      	b.n	1b810 <att_find_type_req+0x6c>
			*err = 0U;
   1b800:	464f      	mov	r7, r9
	if (!req) {
   1b802:	2301      	movs	r3, #1
   1b804:	463a      	mov	r2, r7
   1b806:	2106      	movs	r1, #6
   1b808:	4628      	mov	r0, r5
   1b80a:	f7ff fcf5 	bl	1b1f8 <send_err_rsp.part.0>
		return 0;
   1b80e:	2400      	movs	r4, #0
}
   1b810:	4620      	mov	r0, r4
   1b812:	b006      	add	sp, #24
   1b814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1b818:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   1b81c:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1b820:	4601      	mov	r1, r0
   1b822:	2214      	movs	r2, #20
   1b824:	a801      	add	r0, sp, #4
   1b826:	f00c fedf 	bl	285e8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1b82a:	4632      	mov	r2, r6
   1b82c:	2107      	movs	r1, #7
   1b82e:	4640      	mov	r0, r8
   1b830:	f7ff fe08 	bl	1b444 <bt_att_create_pdu>
   1b834:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b836:	b1e0      	cbz	r0, 1b872 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b838:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b83a:	4649      	mov	r1, r9
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b83c:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b840:	4638      	mov	r0, r7
   1b842:	4a0d      	ldr	r2, [pc, #52]	; (1b878 <att_find_type_req+0xd4>)
   1b844:	ab01      	add	r3, sp, #4
	data.value_len = value_len;
   1b846:	f88d 4014 	strb.w	r4, [sp, #20]
	data.value = value;
   1b84a:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   1b84e:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b850:	f00d fc2d 	bl	290ae <bt_gatt_foreach_attr>
	if (data.err) {
   1b854:	f89d 4015 	ldrb.w	r4, [sp, #21]
   1b858:	b12c      	cbz	r4, 1b866 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   1b85a:	9802      	ldr	r0, [sp, #8]
   1b85c:	f004 fc24 	bl	200a8 <net_buf_unref>
	if (!req) {
   1b860:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1b864:	e7ce      	b.n	1b804 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b866:	4628      	mov	r0, r5
   1b868:	4a04      	ldr	r2, [pc, #16]	; (1b87c <att_find_type_req+0xd8>)
   1b86a:	9902      	ldr	r1, [sp, #8]
   1b86c:	f00d fd44 	bl	292f8 <bt_att_chan_send_rsp>
	return 0;
   1b870:	e7ce      	b.n	1b810 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1b872:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1b874:	e7cc      	b.n	1b810 <att_find_type_req+0x6c>
   1b876:	bf00      	nop
   1b878:	0001ac11 	.word	0x0001ac11
   1b87c:	0002932f 	.word	0x0002932f

0001b880 <att_find_info_req>:
{
   1b880:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1b882:	688b      	ldr	r3, [r1, #8]
{
   1b884:	4605      	mov	r5, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b886:	881e      	ldrh	r6, [r3, #0]
{
   1b888:	b085      	sub	sp, #20
	if (!start || !end) {
   1b88a:	b19e      	cbz	r6, 1b8b4 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b88c:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   1b88e:	b184      	cbz	r4, 1b8b2 <att_find_info_req+0x32>
	if (start > end) {
   1b890:	42a6      	cmp	r6, r4
   1b892:	d80f      	bhi.n	1b8b4 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1b894:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1b896:	2210      	movs	r2, #16
   1b898:	2100      	movs	r1, #0
   1b89a:	4668      	mov	r0, sp
   1b89c:	f00c fea4 	bl	285e8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1b8a0:	2200      	movs	r2, #0
   1b8a2:	2105      	movs	r1, #5
   1b8a4:	4638      	mov	r0, r7
   1b8a6:	f7ff fdcd 	bl	1b444 <bt_att_create_pdu>
   1b8aa:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1b8ac:	b958      	cbnz	r0, 1b8c6 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1b8ae:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1b8b0:	e007      	b.n	1b8c2 <att_find_info_req+0x42>
			*err = 0U;
   1b8b2:	4626      	mov	r6, r4
	if (!req) {
   1b8b4:	2301      	movs	r3, #1
   1b8b6:	4632      	mov	r2, r6
   1b8b8:	2104      	movs	r1, #4
   1b8ba:	4628      	mov	r0, r5
   1b8bc:	f7ff fc9c 	bl	1b1f8 <send_err_rsp.part.0>
	return 0;
   1b8c0:	2000      	movs	r0, #0
}
   1b8c2:	b005      	add	sp, #20
   1b8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1b8c6:	4621      	mov	r1, r4
   1b8c8:	466b      	mov	r3, sp
   1b8ca:	4630      	mov	r0, r6
   1b8cc:	4a08      	ldr	r2, [pc, #32]	; (1b8f0 <att_find_info_req+0x70>)
	data.chan = chan;
   1b8ce:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1b8d0:	f00d fbed 	bl	290ae <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1b8d4:	9c02      	ldr	r4, [sp, #8]
   1b8d6:	b924      	cbnz	r4, 1b8e2 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   1b8d8:	9801      	ldr	r0, [sp, #4]
   1b8da:	f004 fbe5 	bl	200a8 <net_buf_unref>
	if (!req) {
   1b8de:	230a      	movs	r3, #10
   1b8e0:	e7e9      	b.n	1b8b6 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b8e2:	4628      	mov	r0, r5
   1b8e4:	4a03      	ldr	r2, [pc, #12]	; (1b8f4 <att_find_info_req+0x74>)
   1b8e6:	9901      	ldr	r1, [sp, #4]
   1b8e8:	f00d fd06 	bl	292f8 <bt_att_chan_send_rsp>
   1b8ec:	e7e8      	b.n	1b8c0 <att_find_info_req+0x40>
   1b8ee:	bf00      	nop
   1b8f0:	000291db 	.word	0x000291db
   1b8f4:	0002932f 	.word	0x0002932f

0001b8f8 <att_mtu_req>:
{
   1b8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1b8fa:	4603      	mov	r3, r0
   1b8fc:	f853 2bf8 	ldr.w	r2, [r3], #248
{
   1b900:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   1b902:	6810      	ldr	r0, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b904:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1b908:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   1b90c:	071b      	lsls	r3, r3, #28
   1b90e:	d41e      	bmi.n	1b94e <att_mtu_req+0x56>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1b910:	688b      	ldr	r3, [r1, #8]
   1b912:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1b914:	2e16      	cmp	r6, #22
   1b916:	d91c      	bls.n	1b952 <att_mtu_req+0x5a>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1b918:	2202      	movs	r2, #2
   1b91a:	2103      	movs	r1, #3
   1b91c:	f7ff fd92 	bl	1b444 <bt_att_create_pdu>
	if (!pdu) {
   1b920:	4607      	mov	r7, r0
   1b922:	b1c0      	cbz	r0, 1b956 <att_mtu_req+0x5e>
	return net_buf_simple_add(&buf->b, len);
   1b924:	2102      	movs	r1, #2
   1b926:	3008      	adds	r0, #8
   1b928:	f004 fcee 	bl	20308 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1b92c:	2341      	movs	r3, #65	; 0x41
   1b92e:	7044      	strb	r4, [r0, #1]
   1b930:	7003      	strb	r3, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1b932:	4639      	mov	r1, r7
   1b934:	4628      	mov	r0, r5
   1b936:	4a09      	ldr	r2, [pc, #36]	; (1b95c <att_mtu_req+0x64>)
   1b938:	f00d fcde 	bl	292f8 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1b93c:	2e41      	cmp	r6, #65	; 0x41
   1b93e:	bf28      	it	cs
   1b940:	2641      	movcs	r6, #65	; 0x41
	return 0;
   1b942:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1b944:	f8a5 607a 	strh.w	r6, [r5, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1b948:	f8a5 6086 	strh.w	r6, [r5, #134]	; 0x86
}
   1b94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1b94e:	2006      	movs	r0, #6
   1b950:	e7fc      	b.n	1b94c <att_mtu_req+0x54>
		return BT_ATT_ERR_INVALID_PDU;
   1b952:	2004      	movs	r0, #4
   1b954:	e7fa      	b.n	1b94c <att_mtu_req+0x54>
		return BT_ATT_ERR_UNLIKELY;
   1b956:	200e      	movs	r0, #14
   1b958:	e7f8      	b.n	1b94c <att_mtu_req+0x54>
   1b95a:	bf00      	nop
   1b95c:	0002932f 	.word	0x0002932f

0001b960 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1b960:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
   1b962:	2400      	movs	r4, #0
{
   1b964:	4602      	mov	r2, r0
   1b966:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1b968:	4807      	ldr	r0, [pc, #28]	; (1b988 <bt_att_req_alloc+0x28>)
   1b96a:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   1b96c:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1b96e:	f007 f825 	bl	229bc <k_mem_slab_alloc>
   1b972:	4601      	mov	r1, r0
   1b974:	b930      	cbnz	r0, 1b984 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1b976:	221c      	movs	r2, #28
   1b978:	9801      	ldr	r0, [sp, #4]
   1b97a:	f00c fe35 	bl	285e8 <memset>

	return req;
   1b97e:	9801      	ldr	r0, [sp, #4]
}
   1b980:	b002      	add	sp, #8
   1b982:	bd10      	pop	{r4, pc}
		return NULL;
   1b984:	4620      	mov	r0, r4
   1b986:	e7fb      	b.n	1b980 <bt_att_req_alloc+0x20>
   1b988:	200084dc 	.word	0x200084dc

0001b98c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1b98c:	b507      	push	{r0, r1, r2, lr}
   1b98e:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   1b990:	6880      	ldr	r0, [r0, #8]
   1b992:	b120      	cbz	r0, 1b99e <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   1b994:	f004 fb88 	bl	200a8 <net_buf_unref>
		req->buf = NULL;
   1b998:	2200      	movs	r2, #0
   1b99a:	9b01      	ldr	r3, [sp, #4]
   1b99c:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1b99e:	4803      	ldr	r0, [pc, #12]	; (1b9ac <bt_att_req_free+0x20>)
   1b9a0:	a901      	add	r1, sp, #4
   1b9a2:	f007 f877 	bl	22a94 <k_mem_slab_free>
}
   1b9a6:	b003      	add	sp, #12
   1b9a8:	f85d fb04 	ldr.w	pc, [sp], #4
   1b9ac:	200084dc 	.word	0x200084dc

0001b9b0 <att_handle_rsp>:
{
   1b9b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9b4:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   1b9b6:	f500 7090 	add.w	r0, r0, #288	; 0x120
{
   1b9ba:	460f      	mov	r7, r1
   1b9bc:	4690      	mov	r8, r2
   1b9be:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1b9c0:	f008 fa6e 	bl	23ea0 <k_work_cancel_delayable>
	if (!chan->req) {
   1b9c4:	f8d4 50fc 	ldr.w	r5, [r4, #252]	; 0xfc
   1b9c8:	b9e5      	cbnz	r5, 1ba04 <att_handle_rsp+0x54>
   1b9ca:	4919      	ldr	r1, [pc, #100]	; (1ba30 <att_handle_rsp+0x80>)
   1b9cc:	4819      	ldr	r0, [pc, #100]	; (1ba34 <att_handle_rsp+0x84>)
	bt_att_func_t func = NULL;
   1b9ce:	46aa      	mov	sl, r5
   1b9d0:	1a40      	subs	r0, r0, r1
   1b9d2:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
   1b9d4:	0180      	lsls	r0, r0, #6
   1b9d6:	f040 0102 	orr.w	r1, r0, #2
   1b9da:	4817      	ldr	r0, [pc, #92]	; (1ba38 <att_handle_rsp+0x88>)
   1b9dc:	f00b f9a8 	bl	26d30 <log_0>
	att_req_send_process(chan->att);
   1b9e0:	6820      	ldr	r0, [r4, #0]
   1b9e2:	f00d fcd9 	bl	29398 <att_req_send_process>
	if (func) {
   1b9e6:	f1ba 0f00 	cmp.w	sl, #0
   1b9ea:	d007      	beq.n	1b9fc <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
   1b9ec:	6820      	ldr	r0, [r4, #0]
   1b9ee:	f8cd 9000 	str.w	r9, [sp]
   1b9f2:	4643      	mov	r3, r8
   1b9f4:	463a      	mov	r2, r7
   1b9f6:	4631      	mov	r1, r6
   1b9f8:	6800      	ldr	r0, [r0, #0]
   1b9fa:	47d0      	blx	sl
}
   1b9fc:	2000      	movs	r0, #0
   1b9fe:	b003      	add	sp, #12
   1ba00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   1ba04:	4b0d      	ldr	r3, [pc, #52]	; (1ba3c <att_handle_rsp+0x8c>)
   1ba06:	f04f 0b00 	mov.w	fp, #0
   1ba0a:	429d      	cmp	r5, r3
   1ba0c:	d103      	bne.n	1ba16 <att_handle_rsp+0x66>
	bt_att_func_t func = NULL;
   1ba0e:	46da      	mov	sl, fp
		chan->req = NULL;
   1ba10:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
		goto process;
   1ba14:	e7e4      	b.n	1b9e0 <att_handle_rsp+0x30>
	func = chan->req->func;
   1ba16:	f8d5 a004 	ldr.w	sl, [r5, #4]
	bt_att_req_free(chan->req);
   1ba1a:	4628      	mov	r0, r5
	chan->req->func = NULL;
   1ba1c:	f8c5 b004 	str.w	fp, [r5, #4]
	params = chan->req->user_data;
   1ba20:	f8d5 9018 	ldr.w	r9, [r5, #24]
	bt_att_req_free(chan->req);
   1ba24:	f7ff ffb2 	bl	1b98c <bt_att_req_free>
	chan->req = NULL;
   1ba28:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
   1ba2c:	e7d8      	b.n	1b9e0 <att_handle_rsp+0x30>
   1ba2e:	bf00      	nop
   1ba30:	0002bfe4 	.word	0x0002bfe4
   1ba34:	0002bfe4 	.word	0x0002bfe4
   1ba38:	0002fd7f 	.word	0x0002fd7f
   1ba3c:	2000984c 	.word	0x2000984c

0001ba40 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   1ba40:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
{
   1ba44:	b570      	push	{r4, r5, r6, lr}
   1ba46:	4604      	mov	r4, r0
	if (!chan->req || chan->req == &cancel) {
   1ba48:	b313      	cbz	r3, 1ba90 <att_error_rsp+0x50>
   1ba4a:	4a16      	ldr	r2, [pc, #88]	; (1baa4 <att_error_rsp+0x64>)
   1ba4c:	4293      	cmp	r3, r2
   1ba4e:	d01f      	beq.n	1ba90 <att_error_rsp+0x50>
	err = rsp->error;
   1ba50:	688b      	ldr	r3, [r1, #8]
	if (!att_change_security(chan->chan.chan.conn, err)) {
   1ba52:	6880      	ldr	r0, [r0, #8]
	err = rsp->error;
   1ba54:	78dd      	ldrb	r5, [r3, #3]
	switch (err) {
   1ba56:	2d05      	cmp	r5, #5
   1ba58:	d006      	beq.n	1ba68 <att_error_rsp+0x28>
   1ba5a:	2d0f      	cmp	r5, #15
   1ba5c:	d119      	bne.n	1ba92 <att_error_rsp+0x52>
		if (conn->sec_level >= BT_SECURITY_L2)
   1ba5e:	7a43      	ldrb	r3, [r0, #9]
   1ba60:	2b01      	cmp	r3, #1
   1ba62:	d816      	bhi.n	1ba92 <att_error_rsp+0x52>
		sec = BT_SECURITY_L2;
   1ba64:	2102      	movs	r1, #2
   1ba66:	e007      	b.n	1ba78 <att_error_rsp+0x38>
		if (conn->sec_level < BT_SECURITY_L2) {
   1ba68:	7a43      	ldrb	r3, [r0, #9]
   1ba6a:	2b01      	cmp	r3, #1
   1ba6c:	d9fa      	bls.n	1ba64 <att_error_rsp+0x24>
		} else if (conn->sec_level < BT_SECURITY_L3) {
   1ba6e:	2b02      	cmp	r3, #2
   1ba70:	d00c      	beq.n	1ba8c <att_error_rsp+0x4c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
   1ba72:	2b03      	cmp	r3, #3
   1ba74:	d10d      	bne.n	1ba92 <att_error_rsp+0x52>
			sec = BT_SECURITY_L4;
   1ba76:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
   1ba78:	f00d f8c9 	bl	28c0e <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
   1ba7c:	b948      	cbnz	r0, 1ba92 <att_error_rsp+0x52>
		chan->req->retrying = true;
   1ba7e:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
   1ba82:	7c13      	ldrb	r3, [r2, #16]
   1ba84:	f043 0301 	orr.w	r3, r3, #1
   1ba88:	7413      	strb	r3, [r2, #16]
}
   1ba8a:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
   1ba8c:	2103      	movs	r1, #3
   1ba8e:	e7f3      	b.n	1ba78 <att_error_rsp+0x38>
		err = BT_ATT_ERR_UNLIKELY;
   1ba90:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
   1ba92:	2200      	movs	r2, #0
   1ba94:	462b      	mov	r3, r5
   1ba96:	4620      	mov	r0, r4
}
   1ba98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
   1ba9c:	4611      	mov	r1, r2
   1ba9e:	f7ff bf87 	b.w	1b9b0 <att_handle_rsp>
   1baa2:	bf00      	nop
   1baa4:	2000984c 	.word	0x2000984c

0001baa8 <bt_att_disconnected>:
{
   1baa8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   1baaa:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   1baae:	4604      	mov	r4, r0
   1bab0:	b085      	sub	sp, #20
	if (!att_chan->att) {
   1bab2:	b385      	cbz	r5, 1bb16 <bt_att_disconnected+0x6e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1bab4:	f500 71a6 	add.w	r1, r0, #332	; 0x14c
   1bab8:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1babc:	f00d fa76 	bl	28fac <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1bac0:	f1a4 0608 	sub.w	r6, r4, #8
   1bac4:	f104 07f8 	add.w	r7, r4, #248	; 0xf8
   1bac8:	2200      	movs	r2, #0
   1baca:	2300      	movs	r3, #0
   1bacc:	4638      	mov	r0, r7
   1bace:	f004 fa59 	bl	1ff84 <net_buf_get>
   1bad2:	4602      	mov	r2, r0
   1bad4:	bb08      	cbnz	r0, 1bb1a <bt_att_disconnected+0x72>
	if (chan->req) {
   1bad6:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1bada:	b123      	cbz	r3, 1bae6 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1badc:	4601      	mov	r1, r0
   1bade:	230e      	movs	r3, #14
   1bae0:	4630      	mov	r0, r6
   1bae2:	f7ff ff65 	bl	1b9b0 <att_handle_rsp>
	chan->att = NULL;
   1bae6:	2300      	movs	r3, #0
   1bae8:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   1baec:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1baee:	b993      	cbnz	r3, 1bb16 <bt_att_disconnected+0x6e>
	att_reset(att);
   1baf0:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1baf2:	9803      	ldr	r0, [sp, #12]
   1baf4:	2200      	movs	r2, #0
   1baf6:	2300      	movs	r3, #0
   1baf8:	300c      	adds	r0, #12
   1bafa:	f004 fa43 	bl	1ff84 <net_buf_get>
   1bafe:	b978      	cbnz	r0, 1bb20 <bt_att_disconnected+0x78>
	att->conn = NULL;
   1bb00:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1bb02:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
   1bb04:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1bb06:	b976      	cbnz	r6, 1bb26 <bt_att_disconnected+0x7e>
	k_mem_slab_free(&att_slab, (void **)&att);
   1bb08:	4813      	ldr	r0, [pc, #76]	; (1bb58 <bt_att_disconnected+0xb0>)
   1bb0a:	a903      	add	r1, sp, #12
   1bb0c:	f006 ffc2 	bl	22a94 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   1bb10:	6820      	ldr	r0, [r4, #0]
   1bb12:	f002 f9a1 	bl	1de58 <bt_gatt_disconnected>
}
   1bb16:	b005      	add	sp, #20
   1bb18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   1bb1a:	f004 fac5 	bl	200a8 <net_buf_unref>
   1bb1e:	e7d3      	b.n	1bac8 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   1bb20:	f004 fac2 	bl	200a8 <net_buf_unref>
   1bb24:	e7e5      	b.n	1baf2 <bt_att_disconnected+0x4a>
	return node->next;
   1bb26:	6835      	ldr	r5, [r6, #0]
   1bb28:	2d00      	cmp	r5, #0
   1bb2a:	bf38      	it	cc
   1bb2c:	2500      	movcc	r5, #0
		if (req->func) {
   1bb2e:	6877      	ldr	r7, [r6, #4]
   1bb30:	b137      	cbz	r7, 1bb40 <bt_att_disconnected+0x98>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1bb32:	69b3      	ldr	r3, [r6, #24]
   1bb34:	210e      	movs	r1, #14
   1bb36:	9300      	str	r3, [sp, #0]
   1bb38:	2300      	movs	r3, #0
   1bb3a:	461a      	mov	r2, r3
   1bb3c:	4618      	mov	r0, r3
   1bb3e:	47b8      	blx	r7
		bt_att_req_free(req);
   1bb40:	4630      	mov	r0, r6
   1bb42:	f7ff ff23 	bl	1b98c <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1bb46:	2d00      	cmp	r5, #0
   1bb48:	d0de      	beq.n	1bb08 <bt_att_disconnected+0x60>
   1bb4a:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1bb4c:	462e      	mov	r6, r5
   1bb4e:	2b00      	cmp	r3, #0
   1bb50:	bf38      	it	cc
   1bb52:	2300      	movcc	r3, #0
   1bb54:	461d      	mov	r5, r3
   1bb56:	e7ea      	b.n	1bb2e <bt_att_disconnected+0x86>
   1bb58:	2000849c 	.word	0x2000849c

0001bb5c <att_timeout>:
{
   1bb5c:	b510      	push	{r4, lr}
   1bb5e:	4604      	mov	r4, r0
   1bb60:	4b07      	ldr	r3, [pc, #28]	; (1bb80 <att_timeout+0x24>)
   1bb62:	4908      	ldr	r1, [pc, #32]	; (1bb84 <att_timeout+0x28>)
	BT_ERR("ATT Timeout");
   1bb64:	4808      	ldr	r0, [pc, #32]	; (1bb88 <att_timeout+0x2c>)
   1bb66:	1ac9      	subs	r1, r1, r3
   1bb68:	08c9      	lsrs	r1, r1, #3
   1bb6a:	0189      	lsls	r1, r1, #6
   1bb6c:	f041 0101 	orr.w	r1, r1, #1
   1bb70:	f00b f8de 	bl	26d30 <log_0>
	bt_att_disconnected(&chan->chan.chan);
   1bb74:	f5a4 708c 	sub.w	r0, r4, #280	; 0x118
}
   1bb78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1bb7c:	f7ff bf94 	b.w	1baa8 <bt_att_disconnected>
   1bb80:	0002bfe4 	.word	0x0002bfe4
   1bb84:	0002bfe4 	.word	0x0002bfe4
   1bb88:	0002fd96 	.word	0x0002fd96

0001bb8c <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1bb8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1bb90:	460c      	mov	r4, r1
   1bb92:	4617      	mov	r7, r2
   1bb94:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1bb96:	4605      	mov	r5, r0
   1bb98:	b958      	cbnz	r0, 1bbb2 <bt_att_send+0x26>
   1bb9a:	492f      	ldr	r1, [pc, #188]	; (1bc58 <bt_att_send+0xcc>)
   1bb9c:	482f      	ldr	r0, [pc, #188]	; (1bc5c <bt_att_send+0xd0>)
   1bb9e:	f640 33ae 	movw	r3, #2990	; 0xbae
   1bba2:	4a2f      	ldr	r2, [pc, #188]	; (1bc60 <bt_att_send+0xd4>)
   1bba4:	f00a fdba 	bl	2671c <printk>
   1bba8:	f640 31ae 	movw	r1, #2990	; 0xbae
   1bbac:	482c      	ldr	r0, [pc, #176]	; (1bc60 <bt_att_send+0xd4>)
   1bbae:	f00b f85a 	bl	26c66 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1bbb2:	b95c      	cbnz	r4, 1bbcc <bt_att_send+0x40>
   1bbb4:	492b      	ldr	r1, [pc, #172]	; (1bc64 <bt_att_send+0xd8>)
   1bbb6:	4829      	ldr	r0, [pc, #164]	; (1bc5c <bt_att_send+0xd0>)
   1bbb8:	f640 33af 	movw	r3, #2991	; 0xbaf
   1bbbc:	4a28      	ldr	r2, [pc, #160]	; (1bc60 <bt_att_send+0xd4>)
   1bbbe:	f00a fdad 	bl	2671c <printk>
   1bbc2:	f640 31af 	movw	r1, #2991	; 0xbaf
   1bbc6:	4826      	ldr	r0, [pc, #152]	; (1bc60 <bt_att_send+0xd4>)
   1bbc8:	f00b f84d 	bl	26c66 <assert_post_action>

	att = att_get(conn);
   1bbcc:	4628      	mov	r0, r5
   1bbce:	f7ff f98b 	bl	1aee8 <att_get>
	if (!att) {
   1bbd2:	4606      	mov	r6, r0
   1bbd4:	b938      	cbnz	r0, 1bbe6 <bt_att_send+0x5a>
		net_buf_unref(buf);
   1bbd6:	4620      	mov	r0, r4
   1bbd8:	f004 fa66 	bl	200a8 <net_buf_unref>
		return -ENOTCONN;
   1bbdc:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1bbe0:	b002      	add	sp, #8
   1bbe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1bbe6:	b147      	cbz	r7, 1bbfa <bt_att_send+0x6e>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1bbe8:	463b      	mov	r3, r7
   1bbea:	4622      	mov	r2, r4
   1bbec:	2104      	movs	r1, #4
   1bbee:	4628      	mov	r0, r5
   1bbf0:	f8cd 8000 	str.w	r8, [sp]
   1bbf4:	f00d f978 	bl	28ee8 <bt_l2cap_send_cb>
   1bbf8:	e7f2      	b.n	1bbe0 <bt_att_send+0x54>
	net_buf_put(&att->tx_queue, buf);
   1bbfa:	f100 070c 	add.w	r7, r0, #12
   1bbfe:	4621      	mov	r1, r4
   1bc00:	4638      	mov	r0, r7
   1bc02:	f004 fa1d 	bl	20040 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1bc06:	2200      	movs	r2, #0
   1bc08:	2300      	movs	r3, #0
   1bc0a:	4638      	mov	r0, r7
   1bc0c:	f004 f9ba 	bl	1ff84 <net_buf_get>
	if (!buf) {
   1bc10:	4605      	mov	r5, r0
   1bc12:	b908      	cbnz	r0, 1bc18 <bt_att_send+0x8c>
	return 0;
   1bc14:	2000      	movs	r0, #0
   1bc16:	e7e3      	b.n	1bbe0 <bt_att_send+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1bc18:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1bc1a:	b1c3      	cbz	r3, 1bc4e <bt_att_send+0xc2>
   1bc1c:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   1bc20:	d015      	beq.n	1bc4e <bt_att_send+0xc2>
   1bc22:	681c      	ldr	r4, [r3, #0]
   1bc24:	b10c      	cbz	r4, 1bc2a <bt_att_send+0x9e>
   1bc26:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
	return chan_send(chan, buf, cb);
   1bc2a:	2200      	movs	r2, #0
   1bc2c:	4629      	mov	r1, r5
   1bc2e:	f7ff f8a1 	bl	1ad74 <chan_send>
		if (err >= 0) {
   1bc32:	2800      	cmp	r0, #0
   1bc34:	daee      	bge.n	1bc14 <bt_att_send+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1bc36:	b154      	cbz	r4, 1bc4e <bt_att_send+0xc2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bc38:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   1bc3c:	d004      	beq.n	1bc48 <bt_att_send+0xbc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1bc3e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   1bc42:	b10b      	cbz	r3, 1bc48 <bt_att_send+0xbc>
   1bc44:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   1bc48:	4620      	mov	r0, r4
   1bc4a:	461c      	mov	r4, r3
   1bc4c:	e7ed      	b.n	1bc2a <bt_att_send+0x9e>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1bc4e:	4629      	mov	r1, r5
   1bc50:	4638      	mov	r0, r7
   1bc52:	f00f febe 	bl	2b9d2 <k_queue_prepend>
   1bc56:	e7dd      	b.n	1bc14 <bt_att_send+0x88>
   1bc58:	0002ef75 	.word	0x0002ef75
   1bc5c:	0002cfb2 	.word	0x0002cfb2
   1bc60:	0002fbb9 	.word	0x0002fbb9
   1bc64:	0002ec08 	.word	0x0002ec08

0001bc68 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1bc68:	b538      	push	{r3, r4, r5, lr}
   1bc6a:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1bc6c:	4605      	mov	r5, r0
   1bc6e:	b958      	cbnz	r0, 1bc88 <bt_att_req_send+0x20>
   1bc70:	4916      	ldr	r1, [pc, #88]	; (1bccc <bt_att_req_send+0x64>)
   1bc72:	4817      	ldr	r0, [pc, #92]	; (1bcd0 <bt_att_req_send+0x68>)
   1bc74:	f640 33cb 	movw	r3, #3019	; 0xbcb
   1bc78:	4a16      	ldr	r2, [pc, #88]	; (1bcd4 <bt_att_req_send+0x6c>)
   1bc7a:	f00a fd4f 	bl	2671c <printk>
   1bc7e:	f640 31cb 	movw	r1, #3019	; 0xbcb
   1bc82:	4814      	ldr	r0, [pc, #80]	; (1bcd4 <bt_att_req_send+0x6c>)
   1bc84:	f00a ffef 	bl	26c66 <assert_post_action>
	__ASSERT_NO_MSG(req);
   1bc88:	b95c      	cbnz	r4, 1bca2 <bt_att_req_send+0x3a>
   1bc8a:	4913      	ldr	r1, [pc, #76]	; (1bcd8 <bt_att_req_send+0x70>)
   1bc8c:	4810      	ldr	r0, [pc, #64]	; (1bcd0 <bt_att_req_send+0x68>)
   1bc8e:	f640 33cc 	movw	r3, #3020	; 0xbcc
   1bc92:	4a10      	ldr	r2, [pc, #64]	; (1bcd4 <bt_att_req_send+0x6c>)
   1bc94:	f00a fd42 	bl	2671c <printk>
   1bc98:	f640 31cc 	movw	r1, #3020	; 0xbcc
   1bc9c:	480d      	ldr	r0, [pc, #52]	; (1bcd4 <bt_att_req_send+0x6c>)
   1bc9e:	f00a ffe2 	bl	26c66 <assert_post_action>

	att = att_get(conn);
   1bca2:	4628      	mov	r0, r5
   1bca4:	f7ff f920 	bl	1aee8 <att_get>
	if (!att) {
   1bca8:	b160      	cbz	r0, 1bcc4 <bt_att_req_send+0x5c>
	parent->next = child;
   1bcaa:	2300      	movs	r3, #0
   1bcac:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1bcae:	6883      	ldr	r3, [r0, #8]
   1bcb0:	b92b      	cbnz	r3, 1bcbe <bt_att_req_send+0x56>
	list->head = node;
   1bcb2:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1bcb6:	f00d fb6f 	bl	29398 <att_req_send_process>

	return 0;
   1bcba:	2000      	movs	r0, #0
}
   1bcbc:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   1bcbe:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1bcc0:	6084      	str	r4, [r0, #8]
}
   1bcc2:	e7f8      	b.n	1bcb6 <bt_att_req_send+0x4e>
		return -ENOTCONN;
   1bcc4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1bcc8:	e7f8      	b.n	1bcbc <bt_att_req_send+0x54>
   1bcca:	bf00      	nop
   1bccc:	0002ef75 	.word	0x0002ef75
   1bcd0:	0002cfb2 	.word	0x0002cfb2
   1bcd4:	0002fbb9 	.word	0x0002fbb9
   1bcd8:	0002faf4 	.word	0x0002faf4

0001bcdc <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   1bcdc:	b510      	push	{r4, lr}
   1bcde:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   1bce0:	b348      	cbz	r0, 1bd36 <bt_att_req_cancel+0x5a>
   1bce2:	b341      	cbz	r1, 1bd36 <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
   1bce4:	f7ff f900 	bl	1aee8 <att_get>
	if (!att) {
   1bce8:	b328      	cbz	r0, 1bd36 <bt_att_req_cancel+0x5a>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1bcea:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1bcec:	b15b      	cbz	r3, 1bd06 <bt_att_req_cancel+0x2a>
   1bcee:	f5b3 71aa 	subs.w	r1, r3, #340	; 0x154
   1bcf2:	d008      	beq.n	1bd06 <bt_att_req_cancel+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1bcf4:	681b      	ldr	r3, [r3, #0]
   1bcf6:	b10b      	cbz	r3, 1bcfc <bt_att_req_cancel+0x20>
   1bcf8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
	if (chan->req != req) {
   1bcfc:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   1bd00:	4294      	cmp	r4, r2
   1bd02:	d005      	beq.n	1bd10 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1bd04:	b963      	cbnz	r3, 1bd20 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   1bd06:	4621      	mov	r1, r4
   1bd08:	3004      	adds	r0, #4
   1bd0a:	f00d f94f 	bl	28fac <sys_slist_find_and_remove>
   1bd0e:	e002      	b.n	1bd16 <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
   1bd10:	4b09      	ldr	r3, [pc, #36]	; (1bd38 <bt_att_req_cancel+0x5c>)
   1bd12:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc

	bt_att_req_free(req);
   1bd16:	4620      	mov	r0, r4
}
   1bd18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1bd1c:	f7ff be36 	b.w	1b98c <bt_att_req_free>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bd20:	f513 72aa 	adds.w	r2, r3, #340	; 0x154
   1bd24:	d004      	beq.n	1bd30 <bt_att_req_cancel+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1bd26:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1bd2a:	b10a      	cbz	r2, 1bd30 <bt_att_req_cancel+0x54>
   1bd2c:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
{
   1bd30:	4619      	mov	r1, r3
   1bd32:	4613      	mov	r3, r2
   1bd34:	e7e2      	b.n	1bcfc <bt_att_req_cancel+0x20>
}
   1bd36:	bd10      	pop	{r4, pc}
   1bd38:	2000984c 	.word	0x2000984c

0001bd3c <db_hash_store>:

static void db_hash_store(void)
{
	int err;

	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1bd3c:	490a      	ldr	r1, [pc, #40]	; (1bd68 <db_hash_store+0x2c>)
   1bd3e:	2210      	movs	r2, #16
{
   1bd40:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1bd42:	480a      	ldr	r0, [pc, #40]	; (1bd6c <db_hash_store+0x30>)
   1bd44:	f7f8 f982 	bl	1404c <settings_save_one>
	if (err) {
   1bd48:	4601      	mov	r1, r0
   1bd4a:	b158      	cbz	r0, 1bd64 <db_hash_store+0x28>
   1bd4c:	4b08      	ldr	r3, [pc, #32]	; (1bd70 <db_hash_store+0x34>)
   1bd4e:	4a09      	ldr	r2, [pc, #36]	; (1bd74 <db_hash_store+0x38>)
		BT_ERR("Failed to save Database Hash (err %d)", err);
   1bd50:	4809      	ldr	r0, [pc, #36]	; (1bd78 <db_hash_store+0x3c>)
   1bd52:	1ad2      	subs	r2, r2, r3
   1bd54:	08d2      	lsrs	r2, r2, #3
   1bd56:	0192      	lsls	r2, r2, #6
   1bd58:	f042 0201 	orr.w	r2, r2, #1
	}

	BT_DBG("Database Hash stored");
}
   1bd5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   1bd60:	f00a bff3 	b.w	26d4a <log_1>
}
   1bd64:	bd08      	pop	{r3, pc}
   1bd66:	bf00      	nop
   1bd68:	20008cc8 	.word	0x20008cc8
   1bd6c:	0002fda9 	.word	0x0002fda9
   1bd70:	0002bfe4 	.word	0x0002bfe4
   1bd74:	0002c00c 	.word	0x0002c00c
   1bd78:	0002fdb1 	.word	0x0002fdb1

0001bd7c <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   1bd7c:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1bd7e:	4618      	mov	r0, r3
{
   1bd80:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1bd82:	490a      	ldr	r1, [pc, #40]	; (1bdac <db_hash_set+0x30>)
   1bd84:	2210      	movs	r2, #16
   1bd86:	47a0      	blx	r4
	if (len < 0) {
   1bd88:	1e04      	subs	r4, r0, #0
   1bd8a:	da0c      	bge.n	1bda6 <db_hash_set+0x2a>
   1bd8c:	4a08      	ldr	r2, [pc, #32]	; (1bdb0 <db_hash_set+0x34>)
   1bd8e:	4b09      	ldr	r3, [pc, #36]	; (1bdb4 <db_hash_set+0x38>)
		BT_ERR("Failed to decode value (err %zd)", len);
   1bd90:	4621      	mov	r1, r4
   1bd92:	1ad2      	subs	r2, r2, r3
   1bd94:	08d2      	lsrs	r2, r2, #3
   1bd96:	0192      	lsls	r2, r2, #6
   1bd98:	4807      	ldr	r0, [pc, #28]	; (1bdb8 <db_hash_set+0x3c>)
   1bd9a:	f042 0201 	orr.w	r2, r2, #1
   1bd9e:	f00a ffd4 	bl	26d4a <log_1>

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   1bda2:	4620      	mov	r0, r4
   1bda4:	bd10      	pop	{r4, pc}
	return 0;
   1bda6:	2400      	movs	r4, #0
   1bda8:	e7fb      	b.n	1bda2 <db_hash_set+0x26>
   1bdaa:	bf00      	nop
   1bdac:	20008cd8 	.word	0x20008cd8
   1bdb0:	0002c00c 	.word	0x0002c00c
   1bdb4:	0002bfe4 	.word	0x0002bfe4
   1bdb8:	0002fdd7 	.word	0x0002fdd7

0001bdbc <find_cf_cfg>:
{
   1bdbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (!conn) {
   1bdbe:	4605      	mov	r5, r0
   1bdc0:	4c14      	ldr	r4, [pc, #80]	; (1be14 <find_cf_cfg+0x58>)
   1bdc2:	b140      	cbz	r0, 1bdd6 <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1bdc4:	4622      	mov	r2, r4
   1bdc6:	f812 1b01 	ldrb.w	r1, [r2], #1
   1bdca:	f00c ff63 	bl	28c94 <bt_conn_is_peer_addr_le>
   1bdce:	b1b0      	cbz	r0, 1bdfe <find_cf_cfg+0x42>
}
   1bdd0:	4620      	mov	r0, r4
   1bdd2:	b003      	add	sp, #12
   1bdd4:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1bdd6:	9000      	str	r0, [sp, #0]
   1bdd8:	4669      	mov	r1, sp
   1bdda:	f8cd 0003 	str.w	r0, [sp, #3]
   1bdde:	1c60      	adds	r0, r4, #1
   1bde0:	f00d fcab 	bl	2973a <bt_addr_le_cmp>
   1bde4:	2800      	cmp	r0, #0
   1bde6:	d0f3      	beq.n	1bdd0 <find_cf_cfg+0x14>
   1bde8:	4669      	mov	r1, sp
   1bdea:	f104 0011 	add.w	r0, r4, #17
   1bdee:	9500      	str	r5, [sp, #0]
   1bdf0:	f8cd 5003 	str.w	r5, [sp, #3]
   1bdf4:	f00d fca1 	bl	2973a <bt_addr_le_cmp>
   1bdf8:	b948      	cbnz	r0, 1be0e <find_cf_cfg+0x52>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1bdfa:	3410      	adds	r4, #16
   1bdfc:	e7e8      	b.n	1bdd0 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1bdfe:	4628      	mov	r0, r5
   1be00:	7c21      	ldrb	r1, [r4, #16]
   1be02:	f104 0211 	add.w	r2, r4, #17
   1be06:	f00c ff45 	bl	28c94 <bt_conn_is_peer_addr_le>
   1be0a:	2800      	cmp	r0, #0
   1be0c:	d1f5      	bne.n	1bdfa <find_cf_cfg+0x3e>
	return NULL;
   1be0e:	2400      	movs	r4, #0
   1be10:	e7de      	b.n	1bdd0 <find_cf_cfg+0x14>
   1be12:	bf00      	nop
   1be14:	20009868 	.word	0x20009868

0001be18 <find_sc_cfg>:
{
   1be18:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1be1a:	4c0d      	ldr	r4, [pc, #52]	; (1be50 <find_sc_cfg+0x38>)
{
   1be1c:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
   1be1e:	7823      	ldrb	r3, [r4, #0]
{
   1be20:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   1be22:	4283      	cmp	r3, r0
   1be24:	d009      	beq.n	1be3a <find_sc_cfg+0x22>
   1be26:	7b23      	ldrb	r3, [r4, #12]
   1be28:	42ab      	cmp	r3, r5
   1be2a:	d10f      	bne.n	1be4c <find_sc_cfg+0x34>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   1be2c:	4631      	mov	r1, r6
   1be2e:	4809      	ldr	r0, [pc, #36]	; (1be54 <find_sc_cfg+0x3c>)
   1be30:	f00d fc83 	bl	2973a <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   1be34:	b950      	cbnz	r0, 1be4c <find_sc_cfg+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1be36:	2001      	movs	r0, #1
   1be38:	e004      	b.n	1be44 <find_sc_cfg+0x2c>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   1be3a:	1c60      	adds	r0, r4, #1
   1be3c:	f00d fc7d 	bl	2973a <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   1be40:	2800      	cmp	r0, #0
   1be42:	d1f0      	bne.n	1be26 <find_sc_cfg+0xe>
			return &sc_cfg[i];
   1be44:	230c      	movs	r3, #12
   1be46:	fb03 4000 	mla	r0, r3, r0, r4
   1be4a:	e000      	b.n	1be4e <find_sc_cfg+0x36>
	return NULL;
   1be4c:	2000      	movs	r0, #0
}
   1be4e:	bd70      	pop	{r4, r5, r6, pc}
   1be50:	2000a40c 	.word	0x2000a40c
   1be54:	2000a419 	.word	0x2000a419

0001be58 <gatt_sub_find>:
{
   1be58:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (!conn) {
   1be5a:	4605      	mov	r5, r0
   1be5c:	4c14      	ldr	r4, [pc, #80]	; (1beb0 <gatt_sub_find+0x58>)
   1be5e:	b140      	cbz	r0, 1be72 <gatt_sub_find+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   1be60:	4622      	mov	r2, r4
   1be62:	f812 1b01 	ldrb.w	r1, [r2], #1
   1be66:	f00c ff15 	bl	28c94 <bt_conn_is_peer_addr_le>
   1be6a:	b1b0      	cbz	r0, 1be9a <gatt_sub_find+0x42>
}
   1be6c:	4620      	mov	r0, r4
   1be6e:	b003      	add	sp, #12
   1be70:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   1be72:	9000      	str	r0, [sp, #0]
   1be74:	4669      	mov	r1, sp
   1be76:	f8cd 0003 	str.w	r0, [sp, #3]
   1be7a:	1c60      	adds	r0, r4, #1
   1be7c:	f00d fc5d 	bl	2973a <bt_addr_le_cmp>
   1be80:	2800      	cmp	r0, #0
   1be82:	d0f3      	beq.n	1be6c <gatt_sub_find+0x14>
   1be84:	4669      	mov	r1, sp
   1be86:	f104 0011 	add.w	r0, r4, #17
   1be8a:	9500      	str	r5, [sp, #0]
   1be8c:	f8cd 5003 	str.w	r5, [sp, #3]
   1be90:	f00d fc53 	bl	2973a <bt_addr_le_cmp>
   1be94:	b948      	cbnz	r0, 1beaa <gatt_sub_find+0x52>
		struct gatt_sub *sub = &subscriptions[i];
   1be96:	3410      	adds	r4, #16
   1be98:	e7e8      	b.n	1be6c <gatt_sub_find+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   1be9a:	4628      	mov	r0, r5
   1be9c:	7c21      	ldrb	r1, [r4, #16]
   1be9e:	f104 0211 	add.w	r2, r4, #17
   1bea2:	f00c fef7 	bl	28c94 <bt_conn_is_peer_addr_le>
   1bea6:	2800      	cmp	r0, #0
   1bea8:	d1f5      	bne.n	1be96 <gatt_sub_find+0x3e>
	return NULL;
   1beaa:	2400      	movs	r4, #0
   1beac:	e7de      	b.n	1be6c <gatt_sub_find+0x14>
   1beae:	bf00      	nop
   1beb0:	200098a8 	.word	0x200098a8

0001beb4 <find_cf_cfg_by_addr>:
{
   1beb4:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   1beb6:	4c0d      	ldr	r4, [pc, #52]	; (1beec <find_cf_cfg_by_addr+0x38>)
{
   1beb8:	4606      	mov	r6, r0
			if (id == cf_cfg[i].id &&
   1beba:	7823      	ldrb	r3, [r4, #0]
{
   1bebc:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   1bebe:	4283      	cmp	r3, r0
   1bec0:	d009      	beq.n	1bed6 <find_cf_cfg_by_addr+0x22>
   1bec2:	7c23      	ldrb	r3, [r4, #16]
   1bec4:	42b3      	cmp	r3, r6
   1bec6:	d10f      	bne.n	1bee8 <find_cf_cfg_by_addr+0x34>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   1bec8:	4628      	mov	r0, r5
   1beca:	4909      	ldr	r1, [pc, #36]	; (1bef0 <find_cf_cfg_by_addr+0x3c>)
   1becc:	f00d fc35 	bl	2973a <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   1bed0:	b950      	cbnz	r0, 1bee8 <find_cf_cfg_by_addr+0x34>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1bed2:	2001      	movs	r0, #1
   1bed4:	e005      	b.n	1bee2 <find_cf_cfg_by_addr+0x2e>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   1bed6:	4628      	mov	r0, r5
   1bed8:	1c61      	adds	r1, r4, #1
   1beda:	f00d fc2e 	bl	2973a <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   1bede:	2800      	cmp	r0, #0
   1bee0:	d1ef      	bne.n	1bec2 <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   1bee2:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   1bee6:	e000      	b.n	1beea <find_cf_cfg_by_addr+0x36>
	return NULL;
   1bee8:	2000      	movs	r0, #0
}
   1beea:	bd70      	pop	{r4, r5, r6, pc}
   1beec:	20009868 	.word	0x20009868
   1bef0:	20009879 	.word	0x20009879

0001bef4 <bt_gatt_attr_write_ccc>:
{
   1bef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bef8:	461f      	mov	r7, r3
   1befa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1befe:	4606      	mov	r6, r0
   1bf00:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1bf02:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   1bf06:	2b00      	cmp	r3, #0
   1bf08:	d14a      	bne.n	1bfa0 <bt_gatt_attr_write_ccc+0xac>
	if (!len || len > sizeof(uint16_t)) {
   1bf0a:	1e7b      	subs	r3, r7, #1
   1bf0c:	2b01      	cmp	r3, #1
   1bf0e:	d84a      	bhi.n	1bfa6 <bt_gatt_attr_write_ccc+0xb2>
	if (len < sizeof(uint16_t)) {
   1bf10:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   1bf12:	7815      	ldrb	r5, [r2, #0]
   1bf14:	bf18      	it	ne
   1bf16:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   1bf18:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1bf1a:	bf0c      	ite	eq
   1bf1c:	b2ad      	uxtheq	r5, r5
   1bf1e:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1bf22:	f00d fc0d 	bl	29740 <find_ccc_cfg>
	if (!cfg) {
   1bf26:	4604      	mov	r4, r0
   1bf28:	b9e0      	cbnz	r0, 1bf64 <bt_gatt_attr_write_ccc+0x70>
		if (!value) {
   1bf2a:	b915      	cbnz	r5, 1bf32 <bt_gatt_attr_write_ccc+0x3e>
			return len;
   1bf2c:	4638      	mov	r0, r7
}
   1bf2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1bf32:	4649      	mov	r1, r9
   1bf34:	f00d fc04 	bl	29740 <find_ccc_cfg>
		if (!cfg) {
   1bf38:	4604      	mov	r4, r0
   1bf3a:	b960      	cbnz	r0, 1bf56 <bt_gatt_attr_write_ccc+0x62>
   1bf3c:	4b1b      	ldr	r3, [pc, #108]	; (1bfac <bt_gatt_attr_write_ccc+0xb8>)
   1bf3e:	491c      	ldr	r1, [pc, #112]	; (1bfb0 <bt_gatt_attr_write_ccc+0xbc>)
			BT_WARN("No space to store CCC cfg");
   1bf40:	481c      	ldr	r0, [pc, #112]	; (1bfb4 <bt_gatt_attr_write_ccc+0xc0>)
   1bf42:	1ac9      	subs	r1, r1, r3
   1bf44:	08c9      	lsrs	r1, r1, #3
   1bf46:	0189      	lsls	r1, r1, #6
   1bf48:	f041 0102 	orr.w	r1, r1, #2
   1bf4c:	f00a fef0 	bl	26d30 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1bf50:	f06f 0010 	mvn.w	r0, #16
   1bf54:	e7eb      	b.n	1bf2e <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1bf56:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1bf5a:	3001      	adds	r0, #1
   1bf5c:	f00d fc16 	bl	2978c <bt_addr_le_copy>
		cfg->id = conn->id;
   1bf60:	7a33      	ldrb	r3, [r6, #8]
   1bf62:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1bf64:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1bf68:	b973      	cbnz	r3, 1bf88 <bt_gatt_attr_write_ccc+0x94>
	if (cfg->value != ccc->value) {
   1bf6a:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   1bf6e:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1bf70:	42ab      	cmp	r3, r5
   1bf72:	d003      	beq.n	1bf7c <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
   1bf74:	4649      	mov	r1, r9
   1bf76:	4640      	mov	r0, r8
   1bf78:	f00d fb55 	bl	29626 <gatt_ccc_changed>
	if (!value) {
   1bf7c:	2d00      	cmp	r5, #0
   1bf7e:	d1d5      	bne.n	1bf2c <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
   1bf80:	4620      	mov	r0, r4
   1bf82:	f00d fc06 	bl	29792 <clear_ccc_cfg>
   1bf86:	e7d1      	b.n	1bf2c <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1bf88:	462a      	mov	r2, r5
   1bf8a:	4641      	mov	r1, r8
   1bf8c:	4630      	mov	r0, r6
   1bf8e:	4798      	blx	r3
		if (write < 0) {
   1bf90:	2800      	cmp	r0, #0
   1bf92:	dbcc      	blt.n	1bf2e <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1bf94:	1e42      	subs	r2, r0, #1
   1bf96:	2a01      	cmp	r2, #1
   1bf98:	d9e7      	bls.n	1bf6a <bt_gatt_attr_write_ccc+0x76>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1bf9a:	f06f 000d 	mvn.w	r0, #13
   1bf9e:	e7c6      	b.n	1bf2e <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bfa0:	f06f 0006 	mvn.w	r0, #6
   1bfa4:	e7c3      	b.n	1bf2e <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1bfa6:	f06f 000c 	mvn.w	r0, #12
   1bfaa:	e7c0      	b.n	1bf2e <bt_gatt_attr_write_ccc+0x3a>
   1bfac:	0002bfe4 	.word	0x0002bfe4
   1bfb0:	0002c00c 	.word	0x0002c00c
   1bfb4:	0002fdf8 	.word	0x0002fdf8

0001bfb8 <sc_store>:
{
   1bfb8:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   1bfba:	4605      	mov	r5, r0
   1bfbc:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1bfc0:	4604      	mov	r4, r0
   1bfc2:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   1bfc4:	b1fa      	cbz	r2, 1c006 <sc_store+0x4e>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1bfc6:	ae02      	add	r6, sp, #8
   1bfc8:	2104      	movs	r1, #4
   1bfca:	4630      	mov	r0, r6
   1bfcc:	f00a fb0a 	bl	265e4 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   1bfd0:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   1bfd2:	462b      	mov	r3, r5
   1bfd4:	2124      	movs	r1, #36	; 0x24
   1bfd6:	4a0d      	ldr	r2, [pc, #52]	; (1c00c <sc_store+0x54>)
   1bfd8:	a803      	add	r0, sp, #12
   1bfda:	f7fa ff8f 	bl	16efc <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1bfde:	f104 0108 	add.w	r1, r4, #8
   1bfe2:	2204      	movs	r2, #4
   1bfe4:	a803      	add	r0, sp, #12
   1bfe6:	f7f8 f831 	bl	1404c <settings_save_one>
	if (err) {
   1bfea:	4601      	mov	r1, r0
   1bfec:	b148      	cbz	r0, 1c002 <sc_store+0x4a>
   1bfee:	4a08      	ldr	r2, [pc, #32]	; (1c010 <sc_store+0x58>)
   1bff0:	4b08      	ldr	r3, [pc, #32]	; (1c014 <sc_store+0x5c>)
		BT_ERR("failed to store SC (err %d)", err);
   1bff2:	4809      	ldr	r0, [pc, #36]	; (1c018 <sc_store+0x60>)
   1bff4:	1ad2      	subs	r2, r2, r3
   1bff6:	08d2      	lsrs	r2, r2, #3
   1bff8:	0192      	lsls	r2, r2, #6
   1bffa:	f042 0201 	orr.w	r2, r2, #1
   1bffe:	f00a fea4 	bl	26d4a <log_1>
}
   1c002:	b00c      	add	sp, #48	; 0x30
   1c004:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   1c006:	9200      	str	r2, [sp, #0]
   1c008:	e7e3      	b.n	1bfd2 <sc_store+0x1a>
   1c00a:	bf00      	nop
   1c00c:	0003023c 	.word	0x0003023c
   1c010:	0002c00c 	.word	0x0002c00c
   1c014:	0002bfe4 	.word	0x0002bfe4
   1c018:	0002fe12 	.word	0x0002fe12

0001c01c <sc_save>:
{
   1c01c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c020:	4680      	mov	r8, r0
   1c022:	460f      	mov	r7, r1
   1c024:	4616      	mov	r6, r2
   1c026:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1c028:	f7ff fef6 	bl	1be18 <find_sc_cfg>
	if (!cfg) {
   1c02c:	4604      	mov	r4, r0
   1c02e:	b9c8      	cbnz	r0, 1c064 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1c030:	4669      	mov	r1, sp
   1c032:	9000      	str	r0, [sp, #0]
   1c034:	f8cd 0003 	str.w	r0, [sp, #3]
   1c038:	f7ff feee 	bl	1be18 <find_sc_cfg>
		if (!cfg) {
   1c03c:	4604      	mov	r4, r0
   1c03e:	b960      	cbnz	r0, 1c05a <sc_save+0x3e>
   1c040:	4915      	ldr	r1, [pc, #84]	; (1c098 <sc_save+0x7c>)
   1c042:	4b16      	ldr	r3, [pc, #88]	; (1c09c <sc_save+0x80>)
			BT_ERR("unable to save SC: no cfg left");
   1c044:	4816      	ldr	r0, [pc, #88]	; (1c0a0 <sc_save+0x84>)
   1c046:	1ac9      	subs	r1, r1, r3
   1c048:	08c9      	lsrs	r1, r1, #3
   1c04a:	0189      	lsls	r1, r1, #6
   1c04c:	f041 0101 	orr.w	r1, r1, #1
   1c050:	f00a fe6e 	bl	26d30 <log_0>
}
   1c054:	b002      	add	sp, #8
   1c056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   1c05a:	4639      	mov	r1, r7
		cfg->id = id;
   1c05c:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1c060:	f00d fb94 	bl	2978c <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1c064:	8922      	ldrh	r2, [r4, #8]
   1c066:	8963      	ldrh	r3, [r4, #10]
   1c068:	b96a      	cbnz	r2, 1c086 <sc_save+0x6a>
   1c06a:	b973      	cbnz	r3, 1c08a <sc_save+0x6e>
		cfg->data.start = start;
   1c06c:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1c06e:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   1c070:	4621      	mov	r1, r4
   1c072:	f811 0b01 	ldrb.w	r0, [r1], #1
   1c076:	f00c fc8b 	bl	28990 <bt_addr_le_is_bonded>
   1c07a:	2800      	cmp	r0, #0
   1c07c:	d0ea      	beq.n	1c054 <sc_save+0x38>
		sc_store(cfg);
   1c07e:	4620      	mov	r0, r4
   1c080:	f7ff ff9a 	bl	1bfb8 <sc_store>
   1c084:	e7e6      	b.n	1c054 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
   1c086:	4296      	cmp	r6, r2
   1c088:	d302      	bcc.n	1c090 <sc_save+0x74>
   1c08a:	429d      	cmp	r5, r3
   1c08c:	d8ef      	bhi.n	1c06e <sc_save+0x52>
   1c08e:	e7e1      	b.n	1c054 <sc_save+0x38>
	if (*end < new_end) {
   1c090:	429d      	cmp	r5, r3
		*start = new_start;
   1c092:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1c094:	d9ec      	bls.n	1c070 <sc_save+0x54>
   1c096:	e7ea      	b.n	1c06e <sc_save+0x52>
   1c098:	0002c00c 	.word	0x0002c00c
   1c09c:	0002bfe4 	.word	0x0002bfe4
   1c0a0:	0002fe2e 	.word	0x0002fe2e

0001c0a4 <db_hash_commit>:

static int db_hash_commit(void)
{
   1c0a4:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c0a6:	2108      	movs	r1, #8
   1c0a8:	4804      	ldr	r0, [pc, #16]	; (1c0bc <db_hash_commit+0x18>)
   1c0aa:	f00d fb3b 	bl	29724 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   1c0ae:	2200      	movs	r2, #0
   1c0b0:	2300      	movs	r3, #0
   1c0b2:	4803      	ldr	r0, [pc, #12]	; (1c0c0 <db_hash_commit+0x1c>)
   1c0b4:	f007 feee 	bl	23e94 <k_work_reschedule>

	return 0;
}
   1c0b8:	2000      	movs	r0, #0
   1c0ba:	bd08      	pop	{r3, pc}
   1c0bc:	20008d90 	.word	0x20008d90
   1c0c0:	20008ce8 	.word	0x20008ce8

0001c0c4 <sc_set>:
{
   1c0c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c0c8:	460e      	mov	r6, r1
   1c0ca:	4690      	mov	r8, r2
   1c0cc:	4699      	mov	r9, r3
	if (!name) {
   1c0ce:	4607      	mov	r7, r0
{
   1c0d0:	b087      	sub	sp, #28
	if (!name) {
   1c0d2:	b978      	cbnz	r0, 1c0f4 <sc_set+0x30>
   1c0d4:	4937      	ldr	r1, [pc, #220]	; (1c1b4 <sc_set+0xf0>)
   1c0d6:	4b38      	ldr	r3, [pc, #224]	; (1c1b8 <sc_set+0xf4>)
		BT_ERR("Insufficient number of arguments");
   1c0d8:	4838      	ldr	r0, [pc, #224]	; (1c1bc <sc_set+0xf8>)
   1c0da:	1ac9      	subs	r1, r1, r3
   1c0dc:	08c9      	lsrs	r1, r1, #3
   1c0de:	0189      	lsls	r1, r1, #6
   1c0e0:	f041 0101 	orr.w	r1, r1, #1
   1c0e4:	f00a fe24 	bl	26d30 <log_0>
		return -EINVAL;
   1c0e8:	f06f 0515 	mvn.w	r5, #21
}
   1c0ec:	4628      	mov	r0, r5
   1c0ee:	b007      	add	sp, #28
   1c0f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1c0f4:	a902      	add	r1, sp, #8
   1c0f6:	f00c fac3 	bl	28680 <bt_settings_decode_key>
	if (err) {
   1c0fa:	4605      	mov	r5, r0
   1c0fc:	b178      	cbz	r0, 1c11e <sc_set+0x5a>
   1c0fe:	4a2e      	ldr	r2, [pc, #184]	; (1c1b8 <sc_set+0xf4>)
   1c100:	4c2c      	ldr	r4, [pc, #176]	; (1c1b4 <sc_set+0xf0>)
   1c102:	4638      	mov	r0, r7
   1c104:	1aa4      	subs	r4, r4, r2
   1c106:	f7f6 fbf1 	bl	128ec <z_log_strdup>
   1c10a:	08e4      	lsrs	r4, r4, #3
		BT_ERR("Unable to decode address %s", log_strdup(name));
   1c10c:	01a4      	lsls	r4, r4, #6
   1c10e:	f044 0401 	orr.w	r4, r4, #1
   1c112:	4601      	mov	r1, r0
   1c114:	4622      	mov	r2, r4
   1c116:	482a      	ldr	r0, [pc, #168]	; (1c1c0 <sc_set+0xfc>)
   1c118:	f00a fe17 	bl	26d4a <log_1>
   1c11c:	e7e4      	b.n	1c0e8 <sc_set+0x24>
	settings_name_next(name, &next);
   1c11e:	4638      	mov	r0, r7
   1c120:	a901      	add	r1, sp, #4
   1c122:	f00b fa6d 	bl	27600 <settings_name_next>
	if (!next) {
   1c126:	9801      	ldr	r0, [sp, #4]
   1c128:	b308      	cbz	r0, 1c16e <sc_set+0xaa>
		id = strtol(next, NULL, 10);
   1c12a:	220a      	movs	r2, #10
   1c12c:	4629      	mov	r1, r5
   1c12e:	f00c f962 	bl	283f6 <strtol>
   1c132:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   1c134:	4638      	mov	r0, r7
   1c136:	a902      	add	r1, sp, #8
   1c138:	f7ff fe6e 	bl	1be18 <find_sc_cfg>
	if (!cfg && len_rd) {
   1c13c:	4604      	mov	r4, r0
   1c13e:	bb88      	cbnz	r0, 1c1a4 <sc_set+0xe0>
   1c140:	2e00      	cmp	r6, #0
   1c142:	d0d3      	beq.n	1c0ec <sc_set+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1c144:	a904      	add	r1, sp, #16
   1c146:	9004      	str	r0, [sp, #16]
   1c148:	f8cd 0013 	str.w	r0, [sp, #19]
   1c14c:	f7ff fe64 	bl	1be18 <find_sc_cfg>
		if (!cfg) {
   1c150:	4604      	mov	r4, r0
   1c152:	b970      	cbnz	r0, 1c172 <sc_set+0xae>
   1c154:	4b18      	ldr	r3, [pc, #96]	; (1c1b8 <sc_set+0xf4>)
   1c156:	4917      	ldr	r1, [pc, #92]	; (1c1b4 <sc_set+0xf0>)
			BT_ERR("Unable to restore SC: no cfg left");
   1c158:	481a      	ldr	r0, [pc, #104]	; (1c1c4 <sc_set+0x100>)
   1c15a:	1ac9      	subs	r1, r1, r3
   1c15c:	08c9      	lsrs	r1, r1, #3
   1c15e:	0189      	lsls	r1, r1, #6
   1c160:	f041 0101 	orr.w	r1, r1, #1
   1c164:	f00a fde4 	bl	26d30 <log_0>
			return -ENOMEM;
   1c168:	f06f 050b 	mvn.w	r5, #11
   1c16c:	e7be      	b.n	1c0ec <sc_set+0x28>
		id = BT_ID_DEFAULT;
   1c16e:	462f      	mov	r7, r5
   1c170:	e7e0      	b.n	1c134 <sc_set+0x70>
		cfg->id = id;
   1c172:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1c176:	a902      	add	r1, sp, #8
   1c178:	f00d fb08 	bl	2978c <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   1c17c:	f104 0108 	add.w	r1, r4, #8
   1c180:	2204      	movs	r2, #4
   1c182:	4648      	mov	r0, r9
   1c184:	47c0      	blx	r8
		if (len < 0) {
   1c186:	1e04      	subs	r4, r0, #0
   1c188:	dab0      	bge.n	1c0ec <sc_set+0x28>
   1c18a:	4b0b      	ldr	r3, [pc, #44]	; (1c1b8 <sc_set+0xf4>)
   1c18c:	4a09      	ldr	r2, [pc, #36]	; (1c1b4 <sc_set+0xf0>)
			BT_ERR("Failed to decode value (err %zd)", len);
   1c18e:	4621      	mov	r1, r4
   1c190:	1ad2      	subs	r2, r2, r3
   1c192:	08d2      	lsrs	r2, r2, #3
   1c194:	0192      	lsls	r2, r2, #6
   1c196:	480c      	ldr	r0, [pc, #48]	; (1c1c8 <sc_set+0x104>)
   1c198:	f042 0201 	orr.w	r2, r2, #1
   1c19c:	f00a fdd5 	bl	26d4a <log_1>
			return len;
   1c1a0:	4625      	mov	r5, r4
   1c1a2:	e7a3      	b.n	1c0ec <sc_set+0x28>
	if (len_rd) {
   1c1a4:	2e00      	cmp	r6, #0
   1c1a6:	d1e9      	bne.n	1c17c <sc_set+0xb8>
		memset(cfg, 0, sizeof(*cfg));
   1c1a8:	220c      	movs	r2, #12
   1c1aa:	4631      	mov	r1, r6
   1c1ac:	f00c fa1c 	bl	285e8 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1c1b0:	e79c      	b.n	1c0ec <sc_set+0x28>
   1c1b2:	bf00      	nop
   1c1b4:	0002c00c 	.word	0x0002c00c
   1c1b8:	0002bfe4 	.word	0x0002bfe4
   1c1bc:	0002ea59 	.word	0x0002ea59
   1c1c0:	0002fe4d 	.word	0x0002fe4d
   1c1c4:	0002fe69 	.word	0x0002fe69
   1c1c8:	0002fdd7 	.word	0x0002fdd7

0001c1cc <ccc_save>:
{
   1c1cc:	b538      	push	{r3, r4, r5, lr}
   1c1ce:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c1d0:	4b0b      	ldr	r3, [pc, #44]	; (1c200 <ccc_save+0x34>)
   1c1d2:	6882      	ldr	r2, [r0, #8]
{
   1c1d4:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c1d6:	429a      	cmp	r2, r3
   1c1d8:	d10f      	bne.n	1c1fa <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1c1da:	7922      	ldrb	r2, [r4, #4]
   1c1dc:	6821      	ldr	r1, [r4, #0]
   1c1de:	68c0      	ldr	r0, [r0, #12]
   1c1e0:	f00d fac6 	bl	29770 <ccc_find_cfg>
	if (!cfg) {
   1c1e4:	b148      	cbz	r0, 1c1fa <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1c1e6:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   1c1ea:	8901      	ldrh	r1, [r0, #8]
   1c1ec:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   1c1f0:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   1c1f2:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   1c1f4:	8151      	strh	r1, [r2, #10]
	save->count++;
   1c1f6:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   1c1fa:	2001      	movs	r0, #1
   1c1fc:	bd38      	pop	{r3, r4, r5, pc}
   1c1fe:	bf00      	nop
   1c200:	0001bef5 	.word	0x0001bef5

0001c204 <ccc_load>:
{
   1c204:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c206:	4b21      	ldr	r3, [pc, #132]	; (1c28c <ccc_load+0x88>)
{
   1c208:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c20a:	6882      	ldr	r2, [r0, #8]
   1c20c:	429a      	cmp	r2, r3
   1c20e:	d002      	beq.n	1c216 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   1c210:	2001      	movs	r0, #1
}
   1c212:	b002      	add	sp, #8
   1c214:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   1c216:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
   1c218:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   1c21a:	b94b      	cbnz	r3, 1c230 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   1c21c:	4630      	mov	r0, r6
   1c21e:	7922      	ldrb	r2, [r4, #4]
   1c220:	6821      	ldr	r1, [r4, #0]
   1c222:	f00d faa5 	bl	29770 <ccc_find_cfg>
	if (!cfg) {
   1c226:	2800      	cmp	r0, #0
   1c228:	d0f2      	beq.n	1c210 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   1c22a:	f00d fab2 	bl	29792 <clear_ccc_cfg>
   1c22e:	e7ef      	b.n	1c210 <ccc_load+0xc>
	} else if (!load->count) {
   1c230:	68e0      	ldr	r0, [r4, #12]
   1c232:	2800      	cmp	r0, #0
   1c234:	d0ed      	beq.n	1c212 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   1c236:	881b      	ldrh	r3, [r3, #0]
   1c238:	4299      	cmp	r1, r3
   1c23a:	d00a      	beq.n	1c252 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   1c23c:	d9e8      	bls.n	1c210 <ccc_load+0xc>
	load->count--;
   1c23e:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   1c240:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   1c242:	3801      	subs	r0, #1
	load->entry++;
   1c244:	3304      	adds	r3, #4
	load->count--;
   1c246:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1c248:	3800      	subs	r0, #0
   1c24a:	bf18      	it	ne
   1c24c:	2001      	movne	r0, #1
	load->entry++;
   1c24e:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1c250:	e7df      	b.n	1c212 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1c252:	4630      	mov	r0, r6
   1c254:	7922      	ldrb	r2, [r4, #4]
   1c256:	6821      	ldr	r1, [r4, #0]
   1c258:	f00d fa8a 	bl	29770 <ccc_find_cfg>
	if (!cfg) {
   1c25c:	4605      	mov	r5, r0
   1c25e:	b980      	cbnz	r0, 1c282 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   1c260:	9000      	str	r0, [sp, #0]
   1c262:	4602      	mov	r2, r0
   1c264:	f8cd 0003 	str.w	r0, [sp, #3]
   1c268:	4669      	mov	r1, sp
   1c26a:	4630      	mov	r0, r6
   1c26c:	f00d fa80 	bl	29770 <ccc_find_cfg>
		if (!cfg) {
   1c270:	4605      	mov	r5, r0
   1c272:	2800      	cmp	r0, #0
   1c274:	d0e3      	beq.n	1c23e <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   1c276:	6821      	ldr	r1, [r4, #0]
   1c278:	3001      	adds	r0, #1
   1c27a:	f00d fa87 	bl	2978c <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   1c27e:	7923      	ldrb	r3, [r4, #4]
   1c280:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   1c282:	68a3      	ldr	r3, [r4, #8]
   1c284:	885b      	ldrh	r3, [r3, #2]
   1c286:	812b      	strh	r3, [r5, #8]
   1c288:	e7d9      	b.n	1c23e <ccc_load+0x3a>
   1c28a:	bf00      	nop
   1c28c:	0001bef5 	.word	0x0001bef5

0001c290 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   1c290:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c292:	6881      	ldr	r1, [r0, #8]
{
   1c294:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c296:	4a07      	ldr	r2, [pc, #28]	; (1c2b4 <remove_peer_from_attr+0x24>)
   1c298:	4291      	cmp	r1, r2
   1c29a:	d109      	bne.n	1c2b0 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1c29c:	791a      	ldrb	r2, [r3, #4]
   1c29e:	6819      	ldr	r1, [r3, #0]
   1c2a0:	68c0      	ldr	r0, [r0, #12]
   1c2a2:	f00d fa65 	bl	29770 <ccc_find_cfg>
	if (cfg) {
   1c2a6:	b118      	cbz	r0, 1c2b0 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   1c2a8:	220a      	movs	r2, #10
   1c2aa:	2100      	movs	r1, #0
   1c2ac:	f00c f99c 	bl	285e8 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   1c2b0:	2001      	movs	r0, #1
   1c2b2:	bd08      	pop	{r3, pc}
   1c2b4:	0001bef5 	.word	0x0001bef5

0001c2b8 <cf_set>:
{
   1c2b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c2bc:	4689      	mov	r9, r1
   1c2be:	4617      	mov	r7, r2
   1c2c0:	4698      	mov	r8, r3
	if (!name) {
   1c2c2:	4605      	mov	r5, r0
{
   1c2c4:	b085      	sub	sp, #20
	if (!name) {
   1c2c6:	b978      	cbnz	r0, 1c2e8 <cf_set+0x30>
   1c2c8:	4934      	ldr	r1, [pc, #208]	; (1c39c <cf_set+0xe4>)
   1c2ca:	4b35      	ldr	r3, [pc, #212]	; (1c3a0 <cf_set+0xe8>)
		BT_ERR("Insufficient number of arguments");
   1c2cc:	4835      	ldr	r0, [pc, #212]	; (1c3a4 <cf_set+0xec>)
   1c2ce:	1ac9      	subs	r1, r1, r3
   1c2d0:	08c9      	lsrs	r1, r1, #3
   1c2d2:	0189      	lsls	r1, r1, #6
   1c2d4:	f041 0101 	orr.w	r1, r1, #1
   1c2d8:	f00a fd2a 	bl	26d30 <log_0>
		return -EINVAL;
   1c2dc:	f06f 0415 	mvn.w	r4, #21
}
   1c2e0:	4620      	mov	r0, r4
   1c2e2:	b005      	add	sp, #20
   1c2e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1c2e8:	a902      	add	r1, sp, #8
   1c2ea:	f00c f9c9 	bl	28680 <bt_settings_decode_key>
	if (err) {
   1c2ee:	4604      	mov	r4, r0
   1c2f0:	b178      	cbz	r0, 1c312 <cf_set+0x5a>
   1c2f2:	4a2b      	ldr	r2, [pc, #172]	; (1c3a0 <cf_set+0xe8>)
   1c2f4:	4c29      	ldr	r4, [pc, #164]	; (1c39c <cf_set+0xe4>)
   1c2f6:	4628      	mov	r0, r5
   1c2f8:	1aa4      	subs	r4, r4, r2
   1c2fa:	f7f6 faf7 	bl	128ec <z_log_strdup>
   1c2fe:	08e4      	lsrs	r4, r4, #3
		BT_ERR("Unable to decode address %s", log_strdup(name));
   1c300:	01a4      	lsls	r4, r4, #6
   1c302:	f044 0401 	orr.w	r4, r4, #1
   1c306:	4601      	mov	r1, r0
   1c308:	4622      	mov	r2, r4
   1c30a:	4827      	ldr	r0, [pc, #156]	; (1c3a8 <cf_set+0xf0>)
   1c30c:	f00a fd1d 	bl	26d4a <log_1>
   1c310:	e7e4      	b.n	1c2dc <cf_set+0x24>
	settings_name_next(name, &next);
   1c312:	4628      	mov	r0, r5
   1c314:	a901      	add	r1, sp, #4
   1c316:	f00b f973 	bl	27600 <settings_name_next>
	if (!next) {
   1c31a:	9801      	ldr	r0, [sp, #4]
   1c31c:	b1d8      	cbz	r0, 1c356 <cf_set+0x9e>
		id = strtol(next, NULL, 10);
   1c31e:	220a      	movs	r2, #10
   1c320:	4621      	mov	r1, r4
   1c322:	f00c f868 	bl	283f6 <strtol>
   1c326:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   1c328:	4630      	mov	r0, r6
   1c32a:	a902      	add	r1, sp, #8
   1c32c:	f7ff fdc2 	bl	1beb4 <find_cf_cfg_by_addr>
	if (!cfg) {
   1c330:	4605      	mov	r5, r0
   1c332:	b9b8      	cbnz	r0, 1c364 <cf_set+0xac>
		cfg = find_cf_cfg(NULL);
   1c334:	f7ff fd42 	bl	1bdbc <find_cf_cfg>
		if (!cfg) {
   1c338:	4605      	mov	r5, r0
   1c33a:	b970      	cbnz	r0, 1c35a <cf_set+0xa2>
   1c33c:	4b18      	ldr	r3, [pc, #96]	; (1c3a0 <cf_set+0xe8>)
   1c33e:	4917      	ldr	r1, [pc, #92]	; (1c39c <cf_set+0xe4>)
			BT_ERR("Unable to restore CF: no cfg left");
   1c340:	481a      	ldr	r0, [pc, #104]	; (1c3ac <cf_set+0xf4>)
   1c342:	1ac9      	subs	r1, r1, r3
   1c344:	08c9      	lsrs	r1, r1, #3
   1c346:	0189      	lsls	r1, r1, #6
   1c348:	f041 0101 	orr.w	r1, r1, #1
   1c34c:	f00a fcf0 	bl	26d30 <log_0>
			return -ENOMEM;
   1c350:	f06f 040b 	mvn.w	r4, #11
   1c354:	e7c4      	b.n	1c2e0 <cf_set+0x28>
		id = BT_ID_DEFAULT;
   1c356:	4626      	mov	r6, r4
   1c358:	e7e6      	b.n	1c328 <cf_set+0x70>
		cfg->id = id;
   1c35a:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1c35e:	a902      	add	r1, sp, #8
   1c360:	f00d fa14 	bl	2978c <bt_addr_le_copy>
	if (len_rd) {
   1c364:	f1b9 0f00 	cmp.w	r9, #0
   1c368:	d013      	beq.n	1c392 <cf_set+0xda>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1c36a:	f105 0108 	add.w	r1, r5, #8
   1c36e:	2201      	movs	r2, #1
   1c370:	4640      	mov	r0, r8
   1c372:	47b8      	blx	r7
		if (len < 0) {
   1c374:	1e05      	subs	r5, r0, #0
   1c376:	dab3      	bge.n	1c2e0 <cf_set+0x28>
   1c378:	4b09      	ldr	r3, [pc, #36]	; (1c3a0 <cf_set+0xe8>)
   1c37a:	4a08      	ldr	r2, [pc, #32]	; (1c39c <cf_set+0xe4>)
			BT_ERR("Failed to decode value (err %zd)", len);
   1c37c:	4629      	mov	r1, r5
   1c37e:	1ad2      	subs	r2, r2, r3
   1c380:	08d2      	lsrs	r2, r2, #3
   1c382:	0192      	lsls	r2, r2, #6
   1c384:	480a      	ldr	r0, [pc, #40]	; (1c3b0 <cf_set+0xf8>)
   1c386:	f042 0201 	orr.w	r2, r2, #1
   1c38a:	f00a fcde 	bl	26d4a <log_1>
			return len;
   1c38e:	462c      	mov	r4, r5
   1c390:	e7a6      	b.n	1c2e0 <cf_set+0x28>
		clear_cf_cfg(cfg);
   1c392:	4628      	mov	r0, r5
   1c394:	f00d fa9f 	bl	298d6 <clear_cf_cfg>
   1c398:	e7a2      	b.n	1c2e0 <cf_set+0x28>
   1c39a:	bf00      	nop
   1c39c:	0002c00c 	.word	0x0002c00c
   1c3a0:	0002bfe4 	.word	0x0002bfe4
   1c3a4:	0002ea59 	.word	0x0002ea59
   1c3a8:	0002fe4d 	.word	0x0002fe4d
   1c3ac:	0002fe8b 	.word	0x0002fe8b
   1c3b0:	0002fdd7 	.word	0x0002fdd7

0001c3b4 <sc_commit>:
{
   1c3b4:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c3b6:	f06f 0102 	mvn.w	r1, #2
   1c3ba:	4808      	ldr	r0, [pc, #32]	; (1c3dc <sc_commit+0x28>)
   1c3bc:	f00d f9f7 	bl	297ae <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c3c0:	4806      	ldr	r0, [pc, #24]	; (1c3dc <sc_commit+0x28>)
   1c3c2:	f00d f956 	bl	29672 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1c3c6:	07c3      	lsls	r3, r0, #31
   1c3c8:	d505      	bpl.n	1c3d6 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1c3ca:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1c3ce:	2300      	movs	r3, #0
   1c3d0:	4803      	ldr	r0, [pc, #12]	; (1c3e0 <sc_commit+0x2c>)
   1c3d2:	f007 fd5f 	bl	23e94 <k_work_reschedule>
}
   1c3d6:	2000      	movs	r0, #0
   1c3d8:	bd08      	pop	{r3, pc}
   1c3da:	bf00      	nop
   1c3dc:	20008d90 	.word	0x20008d90
   1c3e0:	20008d60 	.word	0x20008d60

0001c3e4 <cf_write>:
{
   1c3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c3e8:	4698      	mov	r8, r3
   1c3ea:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1c3ee:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   1c3f0:	2b01      	cmp	r3, #1
{
   1c3f2:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1c3f4:	d83d      	bhi.n	1c472 <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   1c3f6:	4443      	add	r3, r8
   1c3f8:	2b01      	cmp	r3, #1
   1c3fa:	4645      	mov	r5, r8
   1c3fc:	dc3c      	bgt.n	1c478 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   1c3fe:	f7ff fcdd 	bl	1bdbc <find_cf_cfg>
	if (!cfg) {
   1c402:	4604      	mov	r4, r0
   1c404:	b990      	cbnz	r0, 1c42c <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   1c406:	f7ff fcd9 	bl	1bdbc <find_cf_cfg>
	if (!cfg) {
   1c40a:	4604      	mov	r4, r0
   1c40c:	b970      	cbnz	r0, 1c42c <cf_write+0x48>
   1c40e:	4b1d      	ldr	r3, [pc, #116]	; (1c484 <cf_write+0xa0>)
   1c410:	491d      	ldr	r1, [pc, #116]	; (1c488 <cf_write+0xa4>)
		BT_WARN("No space to store Client Supported Features");
   1c412:	481e      	ldr	r0, [pc, #120]	; (1c48c <cf_write+0xa8>)
   1c414:	1ac9      	subs	r1, r1, r3
   1c416:	08c9      	lsrs	r1, r1, #3
   1c418:	0189      	lsls	r1, r1, #6
   1c41a:	f041 0102 	orr.w	r1, r1, #2
   1c41e:	f00a fc87 	bl	26d30 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1c422:	f06f 0510 	mvn.w	r5, #16
}
   1c426:	4628      	mov	r0, r5
   1c428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1c42c:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1c42e:	f1b8 0f00 	cmp.w	r8, #0
   1c432:	d10c      	bne.n	1c44e <cf_write+0x6a>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1c434:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1c438:	1c60      	adds	r0, r4, #1
   1c43a:	f00d f9a7 	bl	2978c <bt_addr_le_copy>
	cfg->id = conn->id;
   1c43e:	4620      	mov	r0, r4
   1c440:	7a33      	ldrb	r3, [r6, #8]
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c442:	2101      	movs	r1, #1
   1c444:	f800 3b0c 	strb.w	r3, [r0], #12
   1c448:	f00d f96c 	bl	29724 <atomic_or>
}
   1c44c:	e7eb      	b.n	1c426 <cf_write+0x42>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1c44e:	7a20      	ldrb	r0, [r4, #8]
   1c450:	fa20 f301 	lsr.w	r3, r0, r1
   1c454:	07da      	lsls	r2, r3, #31
   1c456:	d503      	bpl.n	1c460 <cf_write+0x7c>
		    !(value[i / 8] & BIT(i % 8))) {
   1c458:	783b      	ldrb	r3, [r7, #0]
   1c45a:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1c45c:	07db      	lsls	r3, r3, #31
   1c45e:	d50e      	bpl.n	1c47e <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1c460:	3101      	adds	r1, #1
   1c462:	2903      	cmp	r1, #3
   1c464:	d1e3      	bne.n	1c42e <cf_write+0x4a>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1c466:	783b      	ldrb	r3, [r7, #0]
   1c468:	f003 0307 	and.w	r3, r3, #7
   1c46c:	4318      	orrs	r0, r3
   1c46e:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1c470:	e7e0      	b.n	1c434 <cf_write+0x50>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c472:	f06f 0506 	mvn.w	r5, #6
   1c476:	e7d6      	b.n	1c426 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1c478:	f06f 050c 	mvn.w	r5, #12
   1c47c:	e7d3      	b.n	1c426 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1c47e:	f06f 0512 	mvn.w	r5, #18
   1c482:	e7d0      	b.n	1c426 <cf_write+0x42>
   1c484:	0002bfe4 	.word	0x0002bfe4
   1c488:	0002c00c 	.word	0x0002c00c
   1c48c:	0002fead 	.word	0x0002fead

0001c490 <sc_indicate_rsp>:
{
   1c490:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c492:	f06f 0102 	mvn.w	r1, #2
   1c496:	4604      	mov	r4, r0
   1c498:	480d      	ldr	r0, [pc, #52]	; (1c4d0 <sc_indicate_rsp+0x40>)
   1c49a:	f00d f988 	bl	297ae <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c49e:	480c      	ldr	r0, [pc, #48]	; (1c4d0 <sc_indicate_rsp+0x40>)
   1c4a0:	f00d f8e7 	bl	29672 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1c4a4:	07c2      	lsls	r2, r0, #31
   1c4a6:	d504      	bpl.n	1c4b2 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1c4a8:	2200      	movs	r2, #0
   1c4aa:	2300      	movs	r3, #0
   1c4ac:	4809      	ldr	r0, [pc, #36]	; (1c4d4 <sc_indicate_rsp+0x44>)
   1c4ae:	f007 fcf1 	bl	23e94 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   1c4b2:	4620      	mov	r0, r4
   1c4b4:	f7ff fc82 	bl	1bdbc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1c4b8:	b140      	cbz	r0, 1c4cc <sc_indicate_rsp+0x3c>
   1c4ba:	7a03      	ldrb	r3, [r0, #8]
   1c4bc:	07db      	lsls	r3, r3, #31
   1c4be:	d505      	bpl.n	1c4cc <sc_indicate_rsp+0x3c>
}
   1c4c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c4c4:	2101      	movs	r1, #1
   1c4c6:	300c      	adds	r0, #12
   1c4c8:	f00d b92c 	b.w	29724 <atomic_or>
   1c4cc:	bd10      	pop	{r4, pc}
   1c4ce:	bf00      	nop
   1c4d0:	20008d90 	.word	0x20008d90
   1c4d4:	20008d60 	.word	0x20008d60

0001c4d8 <bt_gatt_clear_sc>:
{
   1c4d8:	b570      	push	{r4, r5, r6, lr}
   1c4da:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1c4dc:	f7ff fc9c 	bl	1be18 <find_sc_cfg>
	if (!cfg) {
   1c4e0:	4604      	mov	r4, r0
   1c4e2:	b318      	cbz	r0, 1c52c <bt_gatt_clear_sc+0x54>
		if (cfg->id) {
   1c4e4:	4605      	mov	r5, r0
   1c4e6:	f815 2b01 	ldrb.w	r2, [r5], #1
   1c4ea:	b312      	cbz	r2, 1c532 <bt_gatt_clear_sc+0x5a>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1c4ec:	ae02      	add	r6, sp, #8
   1c4ee:	2104      	movs	r1, #4
   1c4f0:	4630      	mov	r0, r6
   1c4f2:	f00a f877 	bl	265e4 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1c4f6:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   1c4f8:	2124      	movs	r1, #36	; 0x24
   1c4fa:	462b      	mov	r3, r5
   1c4fc:	4a0e      	ldr	r2, [pc, #56]	; (1c538 <bt_gatt_clear_sc+0x60>)
   1c4fe:	a803      	add	r0, sp, #12
   1c500:	f7fa fcfc 	bl	16efc <bt_settings_encode_key>
		err = settings_delete(key);
   1c504:	a803      	add	r0, sp, #12
   1c506:	f00b f854 	bl	275b2 <settings_delete>
		if (err) {
   1c50a:	4601      	mov	r1, r0
   1c50c:	b148      	cbz	r0, 1c522 <bt_gatt_clear_sc+0x4a>
   1c50e:	4a0b      	ldr	r2, [pc, #44]	; (1c53c <bt_gatt_clear_sc+0x64>)
   1c510:	4b0b      	ldr	r3, [pc, #44]	; (1c540 <bt_gatt_clear_sc+0x68>)
			BT_ERR("failed to delete SC (err %d)", err);
   1c512:	480c      	ldr	r0, [pc, #48]	; (1c544 <bt_gatt_clear_sc+0x6c>)
   1c514:	1ad2      	subs	r2, r2, r3
   1c516:	08d2      	lsrs	r2, r2, #3
   1c518:	0192      	lsls	r2, r2, #6
   1c51a:	f042 0201 	orr.w	r2, r2, #1
   1c51e:	f00a fc14 	bl	26d4a <log_1>
	memset(cfg, 0, sizeof(*cfg));
   1c522:	220c      	movs	r2, #12
   1c524:	2100      	movs	r1, #0
   1c526:	4620      	mov	r0, r4
   1c528:	f00c f85e 	bl	285e8 <memset>
}
   1c52c:	2000      	movs	r0, #0
   1c52e:	b00c      	add	sp, #48	; 0x30
   1c530:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1c532:	9200      	str	r2, [sp, #0]
   1c534:	e7e0      	b.n	1c4f8 <bt_gatt_clear_sc+0x20>
   1c536:	bf00      	nop
   1c538:	0003023c 	.word	0x0003023c
   1c53c:	0002c00c 	.word	0x0002c00c
   1c540:	0002bfe4 	.word	0x0002bfe4
   1c544:	0002fed9 	.word	0x0002fed9

0001c548 <sc_clear>:
{
   1c548:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c54a:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   1c54e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c550:	4631      	mov	r1, r6
   1c552:	7a00      	ldrb	r0, [r0, #8]
   1c554:	f00c fa1c 	bl	28990 <bt_addr_le_is_bonded>
   1c558:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1c55a:	4631      	mov	r1, r6
   1c55c:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c55e:	b17d      	cbz	r5, 1c580 <sc_clear+0x38>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1c560:	f7ff ffba 	bl	1c4d8 <bt_gatt_clear_sc>
		if (err) {
   1c564:	4601      	mov	r1, r0
   1c566:	b1a0      	cbz	r0, 1c592 <sc_clear+0x4a>
}
   1c568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c56c:	4a09      	ldr	r2, [pc, #36]	; (1c594 <sc_clear+0x4c>)
   1c56e:	4b0a      	ldr	r3, [pc, #40]	; (1c598 <sc_clear+0x50>)
			BT_ERR("Failed to clear SC %d", err);
   1c570:	480a      	ldr	r0, [pc, #40]	; (1c59c <sc_clear+0x54>)
   1c572:	1ad2      	subs	r2, r2, r3
   1c574:	08d2      	lsrs	r2, r2, #3
   1c576:	0192      	lsls	r2, r2, #6
   1c578:	f042 0201 	orr.w	r2, r2, #1
   1c57c:	f00a bbe5 	b.w	26d4a <log_1>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1c580:	f7ff fc4a 	bl	1be18 <find_sc_cfg>
		if (cfg) {
   1c584:	b128      	cbz	r0, 1c592 <sc_clear+0x4a>
	memset(cfg, 0, sizeof(*cfg));
   1c586:	4629      	mov	r1, r5
}
   1c588:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1c58c:	220c      	movs	r2, #12
   1c58e:	f00c b82b 	b.w	285e8 <memset>
}
   1c592:	bd70      	pop	{r4, r5, r6, pc}
   1c594:	0002c00c 	.word	0x0002c00c
   1c598:	0002bfe4 	.word	0x0002bfe4
   1c59c:	0002fef6 	.word	0x0002fef6

0001c5a0 <disconnected_cb>:
{
   1c5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c5a4:	4b1f      	ldr	r3, [pc, #124]	; (1c624 <disconnected_cb+0x84>)
{
   1c5a6:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c5a8:	6882      	ldr	r2, [r0, #8]
{
   1c5aa:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c5ac:	429a      	cmp	r2, r3
   1c5ae:	d102      	bne.n	1c5b6 <disconnected_cb+0x16>
	ccc = attr->user_data;
   1c5b0:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1c5b2:	8963      	ldrh	r3, [r4, #10]
   1c5b4:	b9c3      	cbnz	r3, 1c5e8 <disconnected_cb+0x48>
}
   1c5b6:	2001      	movs	r0, #1
   1c5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c5bc:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1c5c0:	4641      	mov	r1, r8
   1c5c2:	7a28      	ldrb	r0, [r5, #8]
   1c5c4:	f00c f9e4 	bl	28990 <bt_addr_le_is_bonded>
   1c5c8:	b948      	cbnz	r0, 1c5de <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   1c5ca:	4b17      	ldr	r3, [pc, #92]	; (1c628 <disconnected_cb+0x88>)
   1c5cc:	429c      	cmp	r4, r3
   1c5ce:	d102      	bne.n	1c5d6 <disconnected_cb+0x36>
					sc_clear(conn);
   1c5d0:	4628      	mov	r0, r5
   1c5d2:	f7ff ffb9 	bl	1c548 <sc_clear>
				clear_ccc_cfg(cfg);
   1c5d6:	4620      	mov	r0, r4
   1c5d8:	f00d f8db 	bl	29792 <clear_ccc_cfg>
	if (!value_used) {
   1c5dc:	e019      	b.n	1c612 <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1c5de:	4641      	mov	r1, r8
   1c5e0:	4638      	mov	r0, r7
   1c5e2:	f00d f8d3 	bl	2978c <bt_addr_le_copy>
	if (!value_used) {
   1c5e6:	e014      	b.n	1c612 <disconnected_cb+0x72>
		if (!cfg->value) {
   1c5e8:	8923      	ldrh	r3, [r4, #8]
   1c5ea:	b193      	cbz	r3, 1c612 <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1c5ec:	4627      	mov	r7, r4
   1c5ee:	f817 1b01 	ldrb.w	r1, [r7], #1
   1c5f2:	4628      	mov	r0, r5
   1c5f4:	463a      	mov	r2, r7
   1c5f6:	f00c fb4d 	bl	28c94 <bt_conn_is_peer_addr_le>
   1c5fa:	2800      	cmp	r0, #0
   1c5fc:	d1de      	bne.n	1c5bc <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1c5fe:	4639      	mov	r1, r7
   1c600:	7820      	ldrb	r0, [r4, #0]
   1c602:	f7fd fce7 	bl	19fd4 <bt_conn_lookup_addr_le>
			if (tmp) {
   1c606:	b120      	cbz	r0, 1c612 <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
   1c608:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
   1c60a:	f7fd fbaf 	bl	19d6c <bt_conn_unref>
	if (!value_used) {
   1c60e:	2d07      	cmp	r5, #7
   1c610:	d0d1      	beq.n	1c5b6 <disconnected_cb+0x16>
		ccc->value = 0U;
   1c612:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
   1c614:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1c616:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1c618:	2b00      	cmp	r3, #0
   1c61a:	d0cc      	beq.n	1c5b6 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1c61c:	4630      	mov	r0, r6
   1c61e:	4798      	blx	r3
   1c620:	e7c9      	b.n	1c5b6 <disconnected_cb+0x16>
   1c622:	bf00      	nop
   1c624:	0001bef5 	.word	0x0001bef5
   1c628:	200082f8 	.word	0x200082f8

0001c62c <gatt_write_ccc>:
{
   1c62c:	b507      	push	{r0, r1, r2, lr}
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1c62e:	2312      	movs	r3, #18
{
   1c630:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1c632:	2104      	movs	r1, #4
   1c634:	e9cd 3100 	strd	r3, r1, [sp]
   1c638:	4b03      	ldr	r3, [pc, #12]	; (1c648 <gatt_write_ccc+0x1c>)
   1c63a:	4904      	ldr	r1, [pc, #16]	; (1c64c <gatt_write_ccc+0x20>)
   1c63c:	f00d fa91 	bl	29b62 <gatt_req_send>
}
   1c640:	b003      	add	sp, #12
   1c642:	f85d fb04 	ldr.w	pc, [sp], #4
   1c646:	bf00      	nop
   1c648:	00029909 	.word	0x00029909
   1c64c:	00029adb 	.word	0x00029adb

0001c650 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c650:	2201      	movs	r2, #1
{
   1c652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c654:	4b23      	ldr	r3, [pc, #140]	; (1c6e4 <bt_gatt_init+0x94>)
   1c656:	e8d3 1fef 	ldaex	r1, [r3]
   1c65a:	2900      	cmp	r1, #0
   1c65c:	d103      	bne.n	1c666 <bt_gatt_init+0x16>
   1c65e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1c662:	2800      	cmp	r0, #0
   1c664:	d1f7      	bne.n	1c656 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   1c666:	d13c      	bne.n	1c6e2 <bt_gatt_init+0x92>
   1c668:	4b1f      	ldr	r3, [pc, #124]	; (1c6e8 <bt_gatt_init+0x98>)
   1c66a:	e8d3 1fef 	ldaex	r1, [r3]
   1c66e:	2900      	cmp	r1, #0
   1c670:	d103      	bne.n	1c67a <bt_gatt_init+0x2a>
   1c672:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1c676:	2800      	cmp	r0, #0
   1c678:	d1f7      	bne.n	1c66a <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   1c67a:	d02d      	beq.n	1c6d8 <bt_gatt_init+0x88>
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1c67c:	491b      	ldr	r1, [pc, #108]	; (1c6ec <bt_gatt_init+0x9c>)
   1c67e:	481c      	ldr	r0, [pc, #112]	; (1c6f0 <bt_gatt_init+0xa0>)
   1c680:	f007 fae4 	bl	23c4c <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1c684:	2300      	movs	r3, #0
   1c686:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1c68a:	4819      	ldr	r0, [pc, #100]	; (1c6f0 <bt_gatt_init+0xa0>)
   1c68c:	f007 fb86 	bl	23d9c <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1c690:	4918      	ldr	r1, [pc, #96]	; (1c6f4 <bt_gatt_init+0xa4>)
   1c692:	4819      	ldr	r0, [pc, #100]	; (1c6f8 <bt_gatt_init+0xa8>)
   1c694:	f007 fada 	bl	23c4c <k_work_init_delayable>
}
   1c698:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1c69c:	2102      	movs	r1, #2
   1c69e:	4817      	ldr	r0, [pc, #92]	; (1c6fc <bt_gatt_init+0xac>)
   1c6a0:	f00d b840 	b.w	29724 <atomic_or>
		last_static_handle += svc->attr_count;
   1c6a4:	4a16      	ldr	r2, [pc, #88]	; (1c700 <bt_gatt_init+0xb0>)
   1c6a6:	6863      	ldr	r3, [r4, #4]
   1c6a8:	8811      	ldrh	r1, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1c6aa:	3408      	adds	r4, #8
		last_static_handle += svc->attr_count;
   1c6ac:	440b      	add	r3, r1
   1c6ae:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1c6b0:	42ac      	cmp	r4, r5
   1c6b2:	d90e      	bls.n	1c6d2 <bt_gatt_init+0x82>
   1c6b4:	4913      	ldr	r1, [pc, #76]	; (1c704 <bt_gatt_init+0xb4>)
   1c6b6:	f44f 6389 	mov.w	r3, #1096	; 0x448
   1c6ba:	4632      	mov	r2, r6
   1c6bc:	4812      	ldr	r0, [pc, #72]	; (1c708 <bt_gatt_init+0xb8>)
   1c6be:	f00a f82d 	bl	2671c <printk>
   1c6c2:	4812      	ldr	r0, [pc, #72]	; (1c70c <bt_gatt_init+0xbc>)
   1c6c4:	f00a f82a 	bl	2671c <printk>
   1c6c8:	f44f 6189 	mov.w	r1, #1096	; 0x448
   1c6cc:	4630      	mov	r0, r6
   1c6ce:	f00a faca 	bl	26c66 <assert_post_action>
   1c6d2:	42bc      	cmp	r4, r7
   1c6d4:	d3e6      	bcc.n	1c6a4 <bt_gatt_init+0x54>
   1c6d6:	e7d1      	b.n	1c67c <bt_gatt_init+0x2c>
   1c6d8:	4d0d      	ldr	r5, [pc, #52]	; (1c710 <bt_gatt_init+0xc0>)
   1c6da:	4c0e      	ldr	r4, [pc, #56]	; (1c714 <bt_gatt_init+0xc4>)
   1c6dc:	462f      	mov	r7, r5
   1c6de:	4e0e      	ldr	r6, [pc, #56]	; (1c718 <bt_gatt_init+0xc8>)
   1c6e0:	e7e6      	b.n	1c6b0 <bt_gatt_init+0x60>
}
   1c6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c6e4:	20009888 	.word	0x20009888
   1c6e8:	200098a4 	.word	0x200098a4
   1c6ec:	0001c945 	.word	0x0001c945
   1c6f0:	20008ce8 	.word	0x20008ce8
   1c6f4:	0001cd29 	.word	0x0001cd29
   1c6f8:	20008d60 	.word	0x20008d60
   1c6fc:	20008d90 	.word	0x20008d90
   1c700:	2000a40a 	.word	0x2000a40a
   1c704:	0002ff43 	.word	0x0002ff43
   1c708:	0002cfb2 	.word	0x0002cfb2
   1c70c:	0002d8a9 	.word	0x0002d8a9
   1c710:	0002bf6c 	.word	0x0002bf6c
   1c714:	0002bf5c 	.word	0x0002bf5c
   1c718:	0002ff0c 	.word	0x0002ff0c

0001c71c <bt_gatt_attr_get_handle>:
{
   1c71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!attr) {
   1c720:	4604      	mov	r4, r0
   1c722:	b910      	cbnz	r0, 1c72a <bt_gatt_attr_get_handle+0xe>
		return 0;
   1c724:	2000      	movs	r0, #0
}
   1c726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (attr->handle) {
   1c72a:	8a00      	ldrh	r0, [r0, #16]
   1c72c:	2800      	cmp	r0, #0
   1c72e:	d1fa      	bne.n	1c726 <bt_gatt_attr_get_handle+0xa>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c730:	4f1a      	ldr	r7, [pc, #104]	; (1c79c <bt_gatt_attr_get_handle+0x80>)
	uint16_t handle = 1;
   1c732:	2601      	movs	r6, #1
   1c734:	46b8      	mov	r8, r7
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c736:	4d1a      	ldr	r5, [pc, #104]	; (1c7a0 <bt_gatt_attr_get_handle+0x84>)
   1c738:	f8df 9074 	ldr.w	r9, [pc, #116]	; 1c7b0 <bt_gatt_attr_get_handle+0x94>
   1c73c:	42bd      	cmp	r5, r7
   1c73e:	d90e      	bls.n	1c75e <bt_gatt_attr_get_handle+0x42>
   1c740:	4918      	ldr	r1, [pc, #96]	; (1c7a4 <bt_gatt_attr_get_handle+0x88>)
   1c742:	f240 536a 	movw	r3, #1386	; 0x56a
   1c746:	464a      	mov	r2, r9
   1c748:	4817      	ldr	r0, [pc, #92]	; (1c7a8 <bt_gatt_attr_get_handle+0x8c>)
   1c74a:	f009 ffe7 	bl	2671c <printk>
   1c74e:	4817      	ldr	r0, [pc, #92]	; (1c7ac <bt_gatt_attr_get_handle+0x90>)
   1c750:	f009 ffe4 	bl	2671c <printk>
   1c754:	f240 516a 	movw	r1, #1386	; 0x56a
   1c758:	4648      	mov	r0, r9
   1c75a:	f00a fa84 	bl	26c66 <assert_post_action>
   1c75e:	4545      	cmp	r5, r8
   1c760:	d2e0      	bcs.n	1c724 <bt_gatt_attr_get_handle+0x8>
		if ((attr < &static_svc->attrs[0]) ||
   1c762:	e9d5 ec00 	ldrd	lr, ip, [r5]
   1c766:	4574      	cmp	r4, lr
   1c768:	d305      	bcc.n	1c776 <bt_gatt_attr_get_handle+0x5a>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1c76a:	2114      	movs	r1, #20
   1c76c:	fb01 e30c 	mla	r3, r1, ip, lr
   1c770:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   1c772:	429c      	cmp	r4, r3
   1c774:	d90f      	bls.n	1c796 <bt_gatt_attr_get_handle+0x7a>
			handle += static_svc->attr_count;
   1c776:	eb06 030c 	add.w	r3, r6, ip
   1c77a:	b298      	uxth	r0, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c77c:	4606      	mov	r6, r0
   1c77e:	3508      	adds	r5, #8
   1c780:	e7dc      	b.n	1c73c <bt_gatt_attr_get_handle+0x20>
			if (attr == &static_svc->attrs[i]) {
   1c782:	fb01 e302 	mla	r3, r1, r2, lr
   1c786:	429c      	cmp	r4, r3
   1c788:	d0cd      	beq.n	1c726 <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1c78a:	3201      	adds	r2, #1
   1c78c:	18b3      	adds	r3, r6, r2
   1c78e:	4562      	cmp	r2, ip
   1c790:	b298      	uxth	r0, r3
   1c792:	d1f6      	bne.n	1c782 <bt_gatt_attr_get_handle+0x66>
   1c794:	e7f2      	b.n	1c77c <bt_gatt_attr_get_handle+0x60>
   1c796:	2200      	movs	r2, #0
   1c798:	e7f8      	b.n	1c78c <bt_gatt_attr_get_handle+0x70>
   1c79a:	bf00      	nop
   1c79c:	0002bf6c 	.word	0x0002bf6c
   1c7a0:	0002bf5c 	.word	0x0002bf5c
   1c7a4:	0002ff3c 	.word	0x0002ff3c
   1c7a8:	0002cfb2 	.word	0x0002cfb2
   1c7ac:	0002d8a9 	.word	0x0002d8a9
   1c7b0:	0002ff0c 	.word	0x0002ff0c

0001c7b4 <bt_gatt_foreach_attr_type>:
{
   1c7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7b8:	b085      	sub	sp, #20
   1c7ba:	9301      	str	r3, [sp, #4]
		num_matches = UINT16_MAX;
   1c7bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   1c7c0:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
   1c7c4:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   1c7c6:	2d00      	cmp	r5, #0
   1c7c8:	bf08      	it	eq
   1c7ca:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1c7cc:	4b2d      	ldr	r3, [pc, #180]	; (1c884 <bt_gatt_foreach_attr_type+0xd0>)
{
   1c7ce:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1c7d0:	881b      	ldrh	r3, [r3, #0]
{
   1c7d2:	9102      	str	r1, [sp, #8]
	if (start_handle <= last_static_handle) {
   1c7d4:	4283      	cmp	r3, r0
   1c7d6:	d24e      	bcs.n	1c876 <bt_gatt_foreach_attr_type+0xc2>
}
   1c7d8:	b005      	add	sp, #20
   1c7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1c7de:	6873      	ldr	r3, [r6, #4]
   1c7e0:	4423      	add	r3, r4
   1c7e2:	42bb      	cmp	r3, r7
   1c7e4:	d244      	bcs.n	1c870 <bt_gatt_foreach_attr_type+0xbc>
				handle += static_svc->attr_count;
   1c7e6:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c7e8:	3608      	adds	r6, #8
   1c7ea:	4556      	cmp	r6, sl
   1c7ec:	d90e      	bls.n	1c80c <bt_gatt_foreach_attr_type+0x58>
   1c7ee:	4926      	ldr	r1, [pc, #152]	; (1c888 <bt_gatt_foreach_attr_type+0xd4>)
   1c7f0:	f240 632e 	movw	r3, #1582	; 0x62e
   1c7f4:	465a      	mov	r2, fp
   1c7f6:	4825      	ldr	r0, [pc, #148]	; (1c88c <bt_gatt_foreach_attr_type+0xd8>)
   1c7f8:	f009 ff90 	bl	2671c <printk>
   1c7fc:	4824      	ldr	r0, [pc, #144]	; (1c890 <bt_gatt_foreach_attr_type+0xdc>)
   1c7fe:	f009 ff8d 	bl	2671c <printk>
   1c802:	f240 612e 	movw	r1, #1582	; 0x62e
   1c806:	4658      	mov	r0, fp
   1c808:	f00a fa2d 	bl	26c66 <assert_post_action>
   1c80c:	4b21      	ldr	r3, [pc, #132]	; (1c894 <bt_gatt_foreach_attr_type+0xe0>)
   1c80e:	429e      	cmp	r6, r3
   1c810:	d3e5      	bcc.n	1c7de <bt_gatt_foreach_attr_type+0x2a>
   1c812:	e7e1      	b.n	1c7d8 <bt_gatt_foreach_attr_type+0x24>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1c814:	4640      	mov	r0, r8
   1c816:	5889      	ldr	r1, [r1, r2]
   1c818:	9303      	str	r3, [sp, #12]
   1c81a:	f00b ff55 	bl	286c8 <bt_uuid_cmp>
   1c81e:	9b03      	ldr	r3, [sp, #12]
   1c820:	b198      	cbz	r0, 1c84a <bt_gatt_foreach_attr_type+0x96>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1c822:	3401      	adds	r4, #1
   1c824:	f109 0901 	add.w	r9, r9, #1
   1c828:	b2a4      	uxth	r4, r4
   1c82a:	6873      	ldr	r3, [r6, #4]
   1c82c:	454b      	cmp	r3, r9
   1c82e:	d9db      	bls.n	1c7e8 <bt_gatt_foreach_attr_type+0x34>
	if (handle > end_handle) {
   1c830:	9b02      	ldr	r3, [sp, #8]
   1c832:	429c      	cmp	r4, r3
   1c834:	d8d0      	bhi.n	1c7d8 <bt_gatt_foreach_attr_type+0x24>
	if (handle < start_handle) {
   1c836:	42bc      	cmp	r4, r7
   1c838:	d3f3      	bcc.n	1c822 <bt_gatt_foreach_attr_type+0x6e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1c83a:	2314      	movs	r3, #20
   1c83c:	fb03 f209 	mul.w	r2, r3, r9
   1c840:	6831      	ldr	r1, [r6, #0]
   1c842:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1c844:	f1b8 0f00 	cmp.w	r8, #0
   1c848:	d1e4      	bne.n	1c814 <bt_gatt_foreach_attr_type+0x60>
	if (attr_data && attr_data != attr->user_data) {
   1c84a:	9a01      	ldr	r2, [sp, #4]
   1c84c:	b95a      	cbnz	r2, 1c866 <bt_gatt_foreach_attr_type+0xb2>
	*num_matches -= 1;
   1c84e:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   1c850:	4618      	mov	r0, r3
	*num_matches -= 1;
   1c852:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1c854:	4621      	mov	r1, r4
   1c856:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c858:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c85a:	4798      	blx	r3
	if (!*num_matches) {
   1c85c:	2d00      	cmp	r5, #0
   1c85e:	d0bb      	beq.n	1c7d8 <bt_gatt_foreach_attr_type+0x24>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1c860:	2800      	cmp	r0, #0
   1c862:	d1de      	bne.n	1c822 <bt_gatt_foreach_attr_type+0x6e>
   1c864:	e7b8      	b.n	1c7d8 <bt_gatt_foreach_attr_type+0x24>
	if (attr_data && attr_data != attr->user_data) {
   1c866:	68da      	ldr	r2, [r3, #12]
   1c868:	9901      	ldr	r1, [sp, #4]
   1c86a:	4291      	cmp	r1, r2
   1c86c:	d1d9      	bne.n	1c822 <bt_gatt_foreach_attr_type+0x6e>
   1c86e:	e7ee      	b.n	1c84e <bt_gatt_foreach_attr_type+0x9a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1c870:	f04f 0900 	mov.w	r9, #0
   1c874:	e7d9      	b.n	1c82a <bt_gatt_foreach_attr_type+0x76>
		uint16_t handle = 1;
   1c876:	2401      	movs	r4, #1
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c878:	4e07      	ldr	r6, [pc, #28]	; (1c898 <bt_gatt_foreach_attr_type+0xe4>)
   1c87a:	f8df a018 	ldr.w	sl, [pc, #24]	; 1c894 <bt_gatt_foreach_attr_type+0xe0>
   1c87e:	f8df b01c 	ldr.w	fp, [pc, #28]	; 1c89c <bt_gatt_foreach_attr_type+0xe8>
   1c882:	e7b2      	b.n	1c7ea <bt_gatt_foreach_attr_type+0x36>
   1c884:	2000a40a 	.word	0x2000a40a
   1c888:	0002ff3c 	.word	0x0002ff3c
   1c88c:	0002cfb2 	.word	0x0002cfb2
   1c890:	0002d8a9 	.word	0x0002d8a9
   1c894:	0002bf6c 	.word	0x0002bf6c
   1c898:	0002bf5c 	.word	0x0002bf5c
   1c89c:	0002ff0c 	.word	0x0002ff0c

0001c8a0 <db_hash_gen>:
	uint8_t key[16] = {};
   1c8a0:	2300      	movs	r3, #0
{
   1c8a2:	b530      	push	{r4, r5, lr}
   1c8a4:	b0c9      	sub	sp, #292	; 0x124
   1c8a6:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1c8a8:	4669      	mov	r1, sp
   1c8aa:	aa1c      	add	r2, sp, #112	; 0x70
   1c8ac:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   1c8ae:	e9cd 3300 	strd	r3, r3, [sp]
   1c8b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1c8b6:	f00b fa7a 	bl	27dae <tc_cmac_setup>
   1c8ba:	b958      	cbnz	r0, 1c8d4 <db_hash_gen+0x34>
   1c8bc:	491a      	ldr	r1, [pc, #104]	; (1c928 <db_hash_gen+0x88>)
   1c8be:	4b1b      	ldr	r3, [pc, #108]	; (1c92c <db_hash_gen+0x8c>)
		BT_ERR("Unable to setup AES CMAC");
   1c8c0:	481b      	ldr	r0, [pc, #108]	; (1c930 <db_hash_gen+0x90>)
   1c8c2:	1ac9      	subs	r1, r1, r3
   1c8c4:	08c9      	lsrs	r1, r1, #3
   1c8c6:	0189      	lsls	r1, r1, #6
   1c8c8:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
   1c8cc:	f00a fa30 	bl	26d30 <log_0>
}
   1c8d0:	b049      	add	sp, #292	; 0x124
   1c8d2:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1c8d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c8d8:	2001      	movs	r0, #1
   1c8da:	4a16      	ldr	r2, [pc, #88]	; (1c934 <db_hash_gen+0x94>)
   1c8dc:	ab04      	add	r3, sp, #16
   1c8de:	f00d f9c8 	bl	29c72 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1c8e2:	4815      	ldr	r0, [pc, #84]	; (1c938 <db_hash_gen+0x98>)
   1c8e4:	a904      	add	r1, sp, #16
   1c8e6:	f00b faf9 	bl	27edc <tc_cmac_final>
   1c8ea:	b940      	cbnz	r0, 1c8fe <db_hash_gen+0x5e>
   1c8ec:	490e      	ldr	r1, [pc, #56]	; (1c928 <db_hash_gen+0x88>)
   1c8ee:	4b0f      	ldr	r3, [pc, #60]	; (1c92c <db_hash_gen+0x8c>)
		BT_ERR("Unable to calculate hash");
   1c8f0:	4812      	ldr	r0, [pc, #72]	; (1c93c <db_hash_gen+0x9c>)
   1c8f2:	1ac9      	subs	r1, r1, r3
   1c8f4:	08c9      	lsrs	r1, r1, #3
   1c8f6:	0189      	lsls	r1, r1, #6
   1c8f8:	f041 0101 	orr.w	r1, r1, #1
   1c8fc:	e7e6      	b.n	1c8cc <db_hash_gen+0x2c>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1c8fe:	2208      	movs	r2, #8
   1c900:	4b0d      	ldr	r3, [pc, #52]	; (1c938 <db_hash_gen+0x98>)
   1c902:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1c906:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1c908:	780d      	ldrb	r5, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   1c90a:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1c90c:	f803 5b01 	strb.w	r5, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1c910:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   1c914:	d1f7      	bne.n	1c906 <db_hash_gen+0x66>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1c916:	b10c      	cbz	r4, 1c91c <db_hash_gen+0x7c>
		db_hash_store();
   1c918:	f7ff fa10 	bl	1bd3c <db_hash_store>
   1c91c:	2104      	movs	r1, #4
   1c91e:	4808      	ldr	r0, [pc, #32]	; (1c940 <db_hash_gen+0xa0>)
   1c920:	f00c ff00 	bl	29724 <atomic_or>
   1c924:	e7d4      	b.n	1c8d0 <db_hash_gen+0x30>
   1c926:	bf00      	nop
   1c928:	0002c00c 	.word	0x0002c00c
   1c92c:	0002bfe4 	.word	0x0002bfe4
   1c930:	0002ff6b 	.word	0x0002ff6b
   1c934:	00029679 	.word	0x00029679
   1c938:	20008cc8 	.word	0x20008cc8
   1c93c:	0002ff84 	.word	0x0002ff84
   1c940:	20008d90 	.word	0x20008d90

0001c944 <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c944:	f06f 0108 	mvn.w	r1, #8
{
   1c948:	b510      	push	{r4, lr}
   1c94a:	4828      	ldr	r0, [pc, #160]	; (1c9ec <db_hash_process+0xa8>)
   1c94c:	f00c ff2f 	bl	297ae <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   1c950:	0701      	lsls	r1, r0, #28
   1c952:	d545      	bpl.n	1c9e0 <db_hash_process+0x9c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c954:	4825      	ldr	r0, [pc, #148]	; (1c9ec <db_hash_process+0xa8>)
   1c956:	f00c fe8c 	bl	29672 <atomic_get>
   1c95a:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1c95c:	075a      	lsls	r2, r3, #29
   1c95e:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1c962:	d401      	bmi.n	1c968 <db_hash_process+0x24>
			db_hash_gen(false);
   1c964:	f7ff ff9c 	bl	1c8a0 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   1c968:	2210      	movs	r2, #16
   1c96a:	4921      	ldr	r1, [pc, #132]	; (1c9f0 <db_hash_process+0xac>)
   1c96c:	1888      	adds	r0, r1, r2
   1c96e:	f00b fe00 	bl	28572 <memcmp>
   1c972:	b948      	cbnz	r0, 1c988 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   1c974:	481f      	ldr	r0, [pc, #124]	; (1c9f4 <db_hash_process+0xb0>)
   1c976:	f007 fa93 	bl	23ea0 <k_work_cancel_delayable>
}
   1c97a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c97e:	f06f 0101 	mvn.w	r1, #1
   1c982:	481a      	ldr	r0, [pc, #104]	; (1c9ec <db_hash_process+0xa8>)
   1c984:	f00c bf13 	b.w	297ae <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c988:	4c1b      	ldr	r4, [pc, #108]	; (1c9f8 <db_hash_process+0xb4>)
   1c98a:	2101      	movs	r1, #1
   1c98c:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1c990:	f00c fec8 	bl	29724 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1c994:	f010 0f01 	tst.w	r0, #1
   1c998:	4623      	mov	r3, r4
   1c99a:	d110      	bne.n	1c9be <db_hash_process+0x7a>
		gatt_sc.start = start;
   1c99c:	4b17      	ldr	r3, [pc, #92]	; (1c9fc <db_hash_process+0xb8>)
   1c99e:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c9a0:	4812      	ldr	r0, [pc, #72]	; (1c9ec <db_hash_process+0xa8>)
   1c9a2:	f00c fe66 	bl	29672 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1c9a6:	0783      	lsls	r3, r0, #30
   1c9a8:	d405      	bmi.n	1c9b6 <db_hash_process+0x72>
	k_work_reschedule(&gatt_sc.work, timeout);
   1c9aa:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1c9ae:	2300      	movs	r3, #0
   1c9b0:	4810      	ldr	r0, [pc, #64]	; (1c9f4 <db_hash_process+0xb0>)
   1c9b2:	f007 fa6f 	bl	23e94 <k_work_reschedule>
}
   1c9b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		db_hash_store();
   1c9ba:	f7ff b9bf 	b.w	1bd3c <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   1c9be:	8b22      	ldrh	r2, [r4, #24]
   1c9c0:	8b61      	ldrh	r1, [r4, #26]
   1c9c2:	2a01      	cmp	r2, #1
   1c9c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c9c8:	d805      	bhi.n	1c9d6 <db_hash_process+0x92>
   1c9ca:	4291      	cmp	r1, r2
   1c9cc:	d0f3      	beq.n	1c9b6 <db_hash_process+0x72>
		*end = new_end;
   1c9ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c9d2:	835a      	strh	r2, [r3, #26]
   1c9d4:	e7e4      	b.n	1c9a0 <db_hash_process+0x5c>
		*start = new_start;
   1c9d6:	2001      	movs	r0, #1
	if (*end < new_end) {
   1c9d8:	4291      	cmp	r1, r2
		*start = new_start;
   1c9da:	8320      	strh	r0, [r4, #24]
	if (*end < new_end) {
   1c9dc:	d0e0      	beq.n	1c9a0 <db_hash_process+0x5c>
   1c9de:	e7f6      	b.n	1c9ce <db_hash_process+0x8a>
	db_hash_gen(true);
   1c9e0:	2001      	movs	r0, #1
}
   1c9e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   1c9e6:	f7ff bf5b 	b.w	1c8a0 <db_hash_gen>
   1c9ea:	bf00      	nop
   1c9ec:	20008d90 	.word	0x20008d90
   1c9f0:	20008cc8 	.word	0x20008cc8
   1c9f4:	20008d60 	.word	0x20008d60
   1c9f8:	20008d40 	.word	0x20008d40
   1c9fc:	ffff0001 	.word	0xffff0001

0001ca00 <ccc_set_direct>:
{
   1ca00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ca04:	b0b9      	sub	sp, #228	; 0xe4
   1ca06:	4688      	mov	r8, r1
   1ca08:	4614      	mov	r4, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1ca0a:	4939      	ldr	r1, [pc, #228]	; (1caf0 <ccc_set_direct+0xf0>)
   1ca0c:	466a      	mov	r2, sp
   1ca0e:	9840      	ldr	r0, [sp, #256]	; 0x100
{
   1ca10:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1ca12:	f00a fdd2 	bl	275ba <settings_name_steq>
   1ca16:	b978      	cbnz	r0, 1ca38 <ccc_set_direct+0x38>
   1ca18:	4b36      	ldr	r3, [pc, #216]	; (1caf4 <ccc_set_direct+0xf4>)
   1ca1a:	4937      	ldr	r1, [pc, #220]	; (1caf8 <ccc_set_direct+0xf8>)
			BT_ERR("Invalid key");
   1ca1c:	4837      	ldr	r0, [pc, #220]	; (1cafc <ccc_set_direct+0xfc>)
   1ca1e:	1ac9      	subs	r1, r1, r3
   1ca20:	08c9      	lsrs	r1, r1, #3
   1ca22:	0189      	lsls	r1, r1, #6
   1ca24:	f041 0101 	orr.w	r1, r1, #1
   1ca28:	f00a f982 	bl	26d30 <log_0>
			return -EINVAL;
   1ca2c:	f06f 0515 	mvn.w	r5, #21
}
   1ca30:	4628      	mov	r0, r5
   1ca32:	b039      	add	sp, #228	; 0xe4
   1ca34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   1ca38:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
   1ca3a:	a901      	add	r1, sp, #4
   1ca3c:	4630      	mov	r0, r6
   1ca3e:	f00a fddf 	bl	27600 <settings_name_next>
		if (!name) {
   1ca42:	b96e      	cbnz	r6, 1ca60 <ccc_set_direct+0x60>
   1ca44:	492c      	ldr	r1, [pc, #176]	; (1caf8 <ccc_set_direct+0xf8>)
   1ca46:	4b2b      	ldr	r3, [pc, #172]	; (1caf4 <ccc_set_direct+0xf4>)
			BT_ERR("Insufficient number of arguments");
   1ca48:	482d      	ldr	r0, [pc, #180]	; (1cb00 <ccc_set_direct+0x100>)
   1ca4a:	1ac9      	subs	r1, r1, r3
   1ca4c:	08c9      	lsrs	r1, r1, #3
   1ca4e:	0189      	lsls	r1, r1, #6
   1ca50:	f041 0101 	orr.w	r1, r1, #1
   1ca54:	f00a f96c 	bl	26d30 <log_0>
			return -EINVAL;
   1ca58:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   1ca5c:	4625      	mov	r5, r4
   1ca5e:	e7e7      	b.n	1ca30 <ccc_set_direct+0x30>
		} else if (!next) {
   1ca60:	9801      	ldr	r0, [sp, #4]
   1ca62:	b9c8      	cbnz	r0, 1ca98 <ccc_set_direct+0x98>
		err = bt_settings_decode_key(name, &addr);
   1ca64:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
   1ca68:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   1ca6c:	4649      	mov	r1, r9
   1ca6e:	4630      	mov	r0, r6
   1ca70:	f00b fe06 	bl	28680 <bt_settings_decode_key>
		if (err) {
   1ca74:	4605      	mov	r5, r0
   1ca76:	b1a0      	cbz	r0, 1caa2 <ccc_set_direct+0xa2>
   1ca78:	4a1e      	ldr	r2, [pc, #120]	; (1caf4 <ccc_set_direct+0xf4>)
   1ca7a:	4c1f      	ldr	r4, [pc, #124]	; (1caf8 <ccc_set_direct+0xf8>)
   1ca7c:	4630      	mov	r0, r6
   1ca7e:	1aa4      	subs	r4, r4, r2
   1ca80:	f7f5 ff34 	bl	128ec <z_log_strdup>
   1ca84:	08e4      	lsrs	r4, r4, #3
			BT_ERR("Unable to decode address %s", log_strdup(name));
   1ca86:	01a4      	lsls	r4, r4, #6
   1ca88:	f044 0401 	orr.w	r4, r4, #1
   1ca8c:	4601      	mov	r1, r0
   1ca8e:	4622      	mov	r2, r4
   1ca90:	481c      	ldr	r0, [pc, #112]	; (1cb04 <ccc_set_direct+0x104>)
   1ca92:	f00a f95a 	bl	26d4a <log_1>
   1ca96:	e7df      	b.n	1ca58 <ccc_set_direct+0x58>
			load.addr_with_id.id = strtol(next, NULL, 10);
   1ca98:	220a      	movs	r2, #10
   1ca9a:	2100      	movs	r1, #0
   1ca9c:	f00b fcab 	bl	283f6 <strtol>
   1caa0:	e7e0      	b.n	1ca64 <ccc_set_direct+0x64>
		load.addr_with_id.addr = &addr;
   1caa2:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   1caa6:	f1b8 0f00 	cmp.w	r8, #0
   1caaa:	d01d      	beq.n	1cae8 <ccc_set_direct+0xe8>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1caac:	ae08      	add	r6, sp, #32
   1caae:	22c0      	movs	r2, #192	; 0xc0
   1cab0:	4631      	mov	r1, r6
   1cab2:	4638      	mov	r0, r7
   1cab4:	47a0      	blx	r4
			if (len < 0) {
   1cab6:	1e04      	subs	r4, r0, #0
   1cab8:	da0b      	bge.n	1cad2 <ccc_set_direct+0xd2>
   1caba:	4b0e      	ldr	r3, [pc, #56]	; (1caf4 <ccc_set_direct+0xf4>)
   1cabc:	4a0e      	ldr	r2, [pc, #56]	; (1caf8 <ccc_set_direct+0xf8>)
				BT_ERR("Failed to decode value (err %zd)", len);
   1cabe:	4621      	mov	r1, r4
   1cac0:	1ad2      	subs	r2, r2, r3
   1cac2:	08d2      	lsrs	r2, r2, #3
   1cac4:	0192      	lsls	r2, r2, #6
   1cac6:	4810      	ldr	r0, [pc, #64]	; (1cb08 <ccc_set_direct+0x108>)
   1cac8:	f042 0201 	orr.w	r2, r2, #1
   1cacc:	f00a f93d 	bl	26d4a <log_1>
				return len;
   1cad0:	e7c4      	b.n	1ca5c <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
   1cad2:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   1cad4:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   1cad6:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1cad8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cadc:	2001      	movs	r0, #1
   1cade:	4a0b      	ldr	r2, [pc, #44]	; (1cb0c <ccc_set_direct+0x10c>)
   1cae0:	ab04      	add	r3, sp, #16
   1cae2:	f00d f8c6 	bl	29c72 <bt_gatt_foreach_attr>
	return 0;
   1cae6:	e7a3      	b.n	1ca30 <ccc_set_direct+0x30>
			load.count = 0;
   1cae8:	e9cd 0006 	strd	r0, r0, [sp, #24]
   1caec:	e7f4      	b.n	1cad8 <ccc_set_direct+0xd8>
   1caee:	bf00      	nop
   1caf0:	0002ff9d 	.word	0x0002ff9d
   1caf4:	0002bfe4 	.word	0x0002bfe4
   1caf8:	0002c00c 	.word	0x0002c00c
   1cafc:	0002ffa4 	.word	0x0002ffa4
   1cb00:	0002ea59 	.word	0x0002ea59
   1cb04:	0002fe4d 	.word	0x0002fe4d
   1cb08:	0002fdd7 	.word	0x0002fdd7
   1cb0c:	0001c205 	.word	0x0001c205

0001cb10 <gatt_indicate>:
{
   1cb10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cb14:	4615      	mov	r5, r2
   1cb16:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1cb18:	2214      	movs	r2, #20
   1cb1a:	6869      	ldr	r1, [r5, #4]
{
   1cb1c:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1cb1e:	f00d f8b3 	bl	29c88 <bt_gatt_check_perm>
   1cb22:	4607      	mov	r7, r0
   1cb24:	b170      	cbz	r0, 1cb44 <gatt_indicate+0x34>
   1cb26:	4b2a      	ldr	r3, [pc, #168]	; (1cbd0 <gatt_indicate+0xc0>)
   1cb28:	492a      	ldr	r1, [pc, #168]	; (1cbd4 <gatt_indicate+0xc4>)
		BT_WARN("Link is not encrypted");
   1cb2a:	482b      	ldr	r0, [pc, #172]	; (1cbd8 <gatt_indicate+0xc8>)
   1cb2c:	1ac9      	subs	r1, r1, r3
   1cb2e:	08c9      	lsrs	r1, r1, #3
   1cb30:	0189      	lsls	r1, r1, #6
   1cb32:	f041 0102 	orr.w	r1, r1, #2
   1cb36:	f00a f8fb 	bl	26d30 <log_0>
		return -EPERM;
   1cb3a:	f04f 35ff 	mov.w	r5, #4294967295
}
   1cb3e:	4628      	mov	r0, r5
   1cb40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1cb44:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1cb48:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1cb4a:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1cb4c:	f7fe ff08 	bl	1b960 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1cb50:	3602      	adds	r6, #2
	if (!req) {
   1cb52:	4604      	mov	r4, r0
   1cb54:	b910      	cbnz	r0, 1cb5c <gatt_indicate+0x4c>
		return -ENOMEM;
   1cb56:	f06f 050b 	mvn.w	r5, #11
   1cb5a:	e7f0      	b.n	1cb3e <gatt_indicate+0x2e>
	req->att_op = op;
   1cb5c:	211d      	movs	r1, #29
	req->func = func;
   1cb5e:	4b1f      	ldr	r3, [pc, #124]	; (1cbdc <gatt_indicate+0xcc>)
	req->len = len;
   1cb60:	6146      	str	r6, [r0, #20]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1cb62:	4632      	mov	r2, r6
	req->att_op = op;
   1cb64:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1cb66:	60c7      	str	r7, [r0, #12]
	req->func = func;
   1cb68:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1cb6a:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1cb6c:	4640      	mov	r0, r8
   1cb6e:	f7fe fc69 	bl	1b444 <bt_att_create_pdu>
	if (!buf) {
   1cb72:	4606      	mov	r6, r0
   1cb74:	b968      	cbnz	r0, 1cb92 <gatt_indicate+0x82>
   1cb76:	4b16      	ldr	r3, [pc, #88]	; (1cbd0 <gatt_indicate+0xc0>)
   1cb78:	4916      	ldr	r1, [pc, #88]	; (1cbd4 <gatt_indicate+0xc4>)
		BT_WARN("No buffer available to send indication");
   1cb7a:	4819      	ldr	r0, [pc, #100]	; (1cbe0 <gatt_indicate+0xd0>)
   1cb7c:	1ac9      	subs	r1, r1, r3
   1cb7e:	08c9      	lsrs	r1, r1, #3
   1cb80:	0189      	lsls	r1, r1, #6
   1cb82:	f041 0102 	orr.w	r1, r1, #2
   1cb86:	f00a f8d3 	bl	26d30 <log_0>
		bt_att_req_free(req);
   1cb8a:	4620      	mov	r0, r4
   1cb8c:	f7fe fefe 	bl	1b98c <bt_att_req_free>
   1cb90:	e7e1      	b.n	1cb56 <gatt_indicate+0x46>
   1cb92:	f100 0a08 	add.w	sl, r0, #8
   1cb96:	2102      	movs	r1, #2
   1cb98:	4650      	mov	r0, sl
   1cb9a:	f003 fbb5 	bl	20308 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1cb9e:	4607      	mov	r7, r0
   1cba0:	8aa9      	ldrh	r1, [r5, #20]
   1cba2:	f827 9b02 	strh.w	r9, [r7], #2
   1cba6:	4650      	mov	r0, sl
   1cba8:	f003 fbae 	bl	20308 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1cbac:	8aaa      	ldrh	r2, [r5, #20]
   1cbae:	6929      	ldr	r1, [r5, #16]
   1cbb0:	4638      	mov	r0, r7
   1cbb2:	f00b fcee 	bl	28592 <memcpy>
	err = bt_att_req_send(conn, req);
   1cbb6:	4621      	mov	r1, r4
   1cbb8:	4640      	mov	r0, r8
	req->buf = buf;
   1cbba:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   1cbbc:	f7ff f854 	bl	1bc68 <bt_att_req_send>
	if (err) {
   1cbc0:	4605      	mov	r5, r0
   1cbc2:	2800      	cmp	r0, #0
   1cbc4:	d0bb      	beq.n	1cb3e <gatt_indicate+0x2e>
		bt_att_req_free(req);
   1cbc6:	4620      	mov	r0, r4
   1cbc8:	f7fe fee0 	bl	1b98c <bt_att_req_free>
   1cbcc:	e7b7      	b.n	1cb3e <gatt_indicate+0x2e>
   1cbce:	bf00      	nop
   1cbd0:	0002bfe4 	.word	0x0002bfe4
   1cbd4:	0002c00c 	.word	0x0002c00c
   1cbd8:	0002ffb0 	.word	0x0002ffb0
   1cbdc:	0002963b 	.word	0x0002963b
   1cbe0:	0002ffc6 	.word	0x0002ffc6

0001cbe4 <bt_gatt_indicate>:
{
   1cbe4:	b530      	push	{r4, r5, lr}
   1cbe6:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   1cbe8:	460c      	mov	r4, r1
{
   1cbea:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1cbec:	b971      	cbnz	r1, 1cc0c <bt_gatt_indicate+0x28>
   1cbee:	4946      	ldr	r1, [pc, #280]	; (1cd08 <bt_gatt_indicate+0x124>)
   1cbf0:	f640 1315 	movw	r3, #2325	; 0x915
   1cbf4:	4a45      	ldr	r2, [pc, #276]	; (1cd0c <bt_gatt_indicate+0x128>)
   1cbf6:	4846      	ldr	r0, [pc, #280]	; (1cd10 <bt_gatt_indicate+0x12c>)
   1cbf8:	f009 fd90 	bl	2671c <printk>
   1cbfc:	4845      	ldr	r0, [pc, #276]	; (1cd14 <bt_gatt_indicate+0x130>)
   1cbfe:	f009 fd8d 	bl	2671c <printk>
   1cc02:	f640 1115 	movw	r1, #2325	; 0x915
   1cc06:	4841      	ldr	r0, [pc, #260]	; (1cd0c <bt_gatt_indicate+0x128>)
   1cc08:	f00a f82d 	bl	26c66 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   1cc0c:	6863      	ldr	r3, [r4, #4]
   1cc0e:	b973      	cbnz	r3, 1cc2e <bt_gatt_indicate+0x4a>
   1cc10:	4941      	ldr	r1, [pc, #260]	; (1cd18 <bt_gatt_indicate+0x134>)
   1cc12:	f640 1316 	movw	r3, #2326	; 0x916
   1cc16:	4a3d      	ldr	r2, [pc, #244]	; (1cd0c <bt_gatt_indicate+0x128>)
   1cc18:	483d      	ldr	r0, [pc, #244]	; (1cd10 <bt_gatt_indicate+0x12c>)
   1cc1a:	f009 fd7f 	bl	2671c <printk>
   1cc1e:	483d      	ldr	r0, [pc, #244]	; (1cd14 <bt_gatt_indicate+0x130>)
   1cc20:	f009 fd7c 	bl	2671c <printk>
   1cc24:	f640 1116 	movw	r1, #2326	; 0x916
   1cc28:	4838      	ldr	r0, [pc, #224]	; (1cd0c <bt_gatt_indicate+0x128>)
   1cc2a:	f00a f81c 	bl	26c66 <assert_post_action>
   1cc2e:	483b      	ldr	r0, [pc, #236]	; (1cd1c <bt_gatt_indicate+0x138>)
   1cc30:	f00c fd1f 	bl	29672 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1cc34:	0782      	lsls	r2, r0, #30
   1cc36:	d561      	bpl.n	1ccfc <bt_gatt_indicate+0x118>
	data.attr = params->attr;
   1cc38:	6860      	ldr	r0, [r4, #4]
   1cc3a:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1cc3c:	b115      	cbz	r5, 1cc44 <bt_gatt_indicate+0x60>
   1cc3e:	7b6b      	ldrb	r3, [r5, #13]
   1cc40:	2b07      	cmp	r3, #7
   1cc42:	d15e      	bne.n	1cd02 <bt_gatt_indicate+0x11e>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1cc44:	f7ff fd6a 	bl	1c71c <bt_gatt_attr_get_handle>
   1cc48:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   1cc4c:	b918      	cbnz	r0, 1cc56 <bt_gatt_indicate+0x72>
		return -ENOENT;
   1cc4e:	f06f 0001 	mvn.w	r0, #1
}
   1cc52:	b00b      	add	sp, #44	; 0x2c
   1cc54:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   1cc56:	6822      	ldr	r2, [r4, #0]
   1cc58:	b9ba      	cbnz	r2, 1cc8a <bt_gatt_indicate+0xa6>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1cc5a:	9b05      	ldr	r3, [sp, #20]
   1cc5c:	a904      	add	r1, sp, #16
   1cc5e:	6818      	ldr	r0, [r3, #0]
   1cc60:	2300      	movs	r3, #0
   1cc62:	f88d 3010 	strb.w	r3, [sp, #16]
   1cc66:	f642 0303 	movw	r3, #10243	; 0x2803
   1cc6a:	f8ad 3012 	strh.w	r3, [sp, #18]
   1cc6e:	f00b fd2b 	bl	286c8 <bt_uuid_cmp>
   1cc72:	b1d0      	cbz	r0, 1ccaa <bt_gatt_indicate+0xc6>
	if (conn) {
   1cc74:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1cc78:	b325      	cbz	r5, 1ccc4 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   1cc7a:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1cc7c:	4601      	mov	r1, r0
   1cc7e:	4622      	mov	r2, r4
   1cc80:	4628      	mov	r0, r5
		params->_ref = 1;
   1cc82:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1cc84:	f7ff ff44 	bl	1cb10 <gatt_indicate>
   1cc88:	e7e3      	b.n	1cc52 <bt_gatt_indicate+0x6e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1cc8a:	a905      	add	r1, sp, #20
   1cc8c:	9102      	str	r1, [sp, #8]
   1cc8e:	4924      	ldr	r1, [pc, #144]	; (1cd20 <bt_gatt_indicate+0x13c>)
	found->attr = NULL;
   1cc90:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1cc92:	9101      	str	r1, [sp, #4]
   1cc94:	2101      	movs	r1, #1
   1cc96:	9100      	str	r1, [sp, #0]
   1cc98:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1cc9c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1cc9e:	f7ff fd89 	bl	1c7b4 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1cca2:	9b05      	ldr	r3, [sp, #20]
   1cca4:	2b00      	cmp	r3, #0
   1cca6:	d1d8      	bne.n	1cc5a <bt_gatt_indicate+0x76>
   1cca8:	e7d1      	b.n	1cc4e <bt_gatt_indicate+0x6a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1ccaa:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1ccac:	68c3      	ldr	r3, [r0, #12]
   1ccae:	799b      	ldrb	r3, [r3, #6]
   1ccb0:	069b      	lsls	r3, r3, #26
   1ccb2:	d402      	bmi.n	1ccba <bt_gatt_indicate+0xd6>
			return -EINVAL;
   1ccb4:	f06f 0015 	mvn.w	r0, #21
   1ccb8:	e7cb      	b.n	1cc52 <bt_gatt_indicate+0x6e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1ccba:	f00c ff8c 	bl	29bd6 <bt_gatt_attr_value_handle>
   1ccbe:	f8ad 0018 	strh.w	r0, [sp, #24]
   1ccc2:	e7d7      	b.n	1cc74 <bt_gatt_indicate+0x90>
	data.err = -ENOTCONN;
   1ccc4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1ccc8:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1ccca:	2302      	movs	r3, #2
   1cccc:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1ccd0:	f642 1302 	movw	r3, #10498	; 0x2902
   1ccd4:	f8ad 3012 	strh.w	r3, [sp, #18]
   1ccd8:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1ccda:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1ccdc:	9302      	str	r3, [sp, #8]
   1ccde:	4b11      	ldr	r3, [pc, #68]	; (1cd24 <bt_gatt_indicate+0x140>)
   1cce0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cce4:	9301      	str	r3, [sp, #4]
   1cce6:	2301      	movs	r3, #1
   1cce8:	aa04      	add	r2, sp, #16
   1ccea:	9300      	str	r3, [sp, #0]
   1ccec:	462b      	mov	r3, r5
	data.ind_params = params;
   1ccee:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1ccf0:	f88d 5010 	strb.w	r5, [sp, #16]
   1ccf4:	f7ff fd5e 	bl	1c7b4 <bt_gatt_foreach_attr_type>
	return data.err;
   1ccf8:	9807      	ldr	r0, [sp, #28]
   1ccfa:	e7aa      	b.n	1cc52 <bt_gatt_indicate+0x6e>
		return -EAGAIN;
   1ccfc:	f06f 000a 	mvn.w	r0, #10
   1cd00:	e7a7      	b.n	1cc52 <bt_gatt_indicate+0x6e>
		return -ENOTCONN;
   1cd02:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1cd06:	e7a4      	b.n	1cc52 <bt_gatt_indicate+0x6e>
   1cd08:	0002ffed 	.word	0x0002ffed
   1cd0c:	0002ff0c 	.word	0x0002ff0c
   1cd10:	0002cfb2 	.word	0x0002cfb2
   1cd14:	0002fff4 	.word	0x0002fff4
   1cd18:	0003000a 	.word	0x0003000a
   1cd1c:	20008098 	.word	0x20008098
   1cd20:	00029661 	.word	0x00029661
   1cd24:	0001ce59 	.word	0x0001ce59

0001cd28 <sc_process>:
{
   1cd28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1cd2a:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1cd2e:	4604      	mov	r4, r0
   1cd30:	4628      	mov	r0, r5
   1cd32:	f00c fc9e 	bl	29672 <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1cd36:	0783      	lsls	r3, r0, #30
   1cd38:	d50e      	bpl.n	1cd58 <sc_process+0x30>
   1cd3a:	4919      	ldr	r1, [pc, #100]	; (1cda0 <sc_process+0x78>)
   1cd3c:	f240 33de 	movw	r3, #990	; 0x3de
   1cd40:	4a18      	ldr	r2, [pc, #96]	; (1cda4 <sc_process+0x7c>)
   1cd42:	4819      	ldr	r0, [pc, #100]	; (1cda8 <sc_process+0x80>)
   1cd44:	f009 fcea 	bl	2671c <printk>
   1cd48:	4818      	ldr	r0, [pc, #96]	; (1cdac <sc_process+0x84>)
   1cd4a:	f009 fce7 	bl	2671c <printk>
   1cd4e:	f240 31de 	movw	r1, #990	; 0x3de
   1cd52:	4814      	ldr	r0, [pc, #80]	; (1cda4 <sc_process+0x7c>)
   1cd54:	f009 ff87 	bl	26c66 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1cd58:	f854 3c08 	ldr.w	r3, [r4, #-8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1cd5c:	f06f 0101 	mvn.w	r1, #1
   1cd60:	4628      	mov	r0, r5
   1cd62:	9301      	str	r3, [sp, #4]
   1cd64:	f00c fd23 	bl	297ae <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1cd68:	4b11      	ldr	r3, [pc, #68]	; (1cdb0 <sc_process+0x88>)
	sc->start = 0U;
   1cd6a:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1cd6c:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1cd70:	4b10      	ldr	r3, [pc, #64]	; (1cdb4 <sc_process+0x8c>)
	sc->start = 0U;
   1cd72:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->params.func = sc_indicate_rsp;
   1cd76:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1cd7a:	ab01      	add	r3, sp, #4
   1cd7c:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1cd80:	2304      	movs	r3, #4
	sc->end = 0U;
   1cd82:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1cd86:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1cd8a:	f1a4 0120 	sub.w	r1, r4, #32
   1cd8e:	f7ff ff29 	bl	1cbe4 <bt_gatt_indicate>
   1cd92:	b918      	cbnz	r0, 1cd9c <sc_process+0x74>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1cd94:	2102      	movs	r1, #2
   1cd96:	4628      	mov	r0, r5
   1cd98:	f00c fcc4 	bl	29724 <atomic_or>
}
   1cd9c:	b003      	add	sp, #12
   1cd9e:	bd30      	pop	{r4, r5, pc}
   1cda0:	00030017 	.word	0x00030017
   1cda4:	0002ff0c 	.word	0x0002ff0c
   1cda8:	0002cfb2 	.word	0x0002cfb2
   1cdac:	00030048 	.word	0x00030048
   1cdb0:	0002c73c 	.word	0x0002c73c
   1cdb4:	0001c491 	.word	0x0001c491

0001cdb8 <gatt_notify>:
{
   1cdb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cdbc:	4614      	mov	r4, r2
   1cdbe:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1cdc0:	2214      	movs	r2, #20
   1cdc2:	6861      	ldr	r1, [r4, #4]
{
   1cdc4:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1cdc6:	f00c ff5f 	bl	29c88 <bt_gatt_check_perm>
   1cdca:	b168      	cbz	r0, 1cde8 <gatt_notify+0x30>
   1cdcc:	4b1e      	ldr	r3, [pc, #120]	; (1ce48 <gatt_notify+0x90>)
   1cdce:	491f      	ldr	r1, [pc, #124]	; (1ce4c <gatt_notify+0x94>)
		BT_WARN("Link is not encrypted");
   1cdd0:	481f      	ldr	r0, [pc, #124]	; (1ce50 <gatt_notify+0x98>)
   1cdd2:	1ac9      	subs	r1, r1, r3
   1cdd4:	08c9      	lsrs	r1, r1, #3
   1cdd6:	0189      	lsls	r1, r1, #6
   1cdd8:	f041 0102 	orr.w	r1, r1, #2
   1cddc:	f009 ffa8 	bl	26d30 <log_0>
		return -EPERM;
   1cde0:	f04f 30ff 	mov.w	r0, #4294967295
}
   1cde4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
   1cde8:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1cdea:	211b      	movs	r1, #27
   1cdec:	4638      	mov	r0, r7
   1cdee:	3202      	adds	r2, #2
   1cdf0:	f7fe fb28 	bl	1b444 <bt_att_create_pdu>
	if (!buf) {
   1cdf4:	4605      	mov	r5, r0
   1cdf6:	b960      	cbnz	r0, 1ce12 <gatt_notify+0x5a>
   1cdf8:	4b13      	ldr	r3, [pc, #76]	; (1ce48 <gatt_notify+0x90>)
   1cdfa:	4914      	ldr	r1, [pc, #80]	; (1ce4c <gatt_notify+0x94>)
		BT_WARN("No buffer available to send notification");
   1cdfc:	4815      	ldr	r0, [pc, #84]	; (1ce54 <gatt_notify+0x9c>)
   1cdfe:	1ac9      	subs	r1, r1, r3
   1ce00:	08c9      	lsrs	r1, r1, #3
   1ce02:	0189      	lsls	r1, r1, #6
   1ce04:	f041 0102 	orr.w	r1, r1, #2
   1ce08:	f009 ff92 	bl	26d30 <log_0>
		return -ENOMEM;
   1ce0c:	f06f 000b 	mvn.w	r0, #11
   1ce10:	e7e8      	b.n	1cde4 <gatt_notify+0x2c>
   1ce12:	f100 0908 	add.w	r9, r0, #8
   1ce16:	2102      	movs	r1, #2
   1ce18:	4648      	mov	r0, r9
   1ce1a:	f003 fa75 	bl	20308 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1ce1e:	4606      	mov	r6, r0
   1ce20:	89a1      	ldrh	r1, [r4, #12]
   1ce22:	f826 8b02 	strh.w	r8, [r6], #2
   1ce26:	4648      	mov	r0, r9
   1ce28:	f003 fa6e 	bl	20308 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1ce2c:	89a2      	ldrh	r2, [r4, #12]
   1ce2e:	68a1      	ldr	r1, [r4, #8]
   1ce30:	4630      	mov	r0, r6
   1ce32:	f00b fbae 	bl	28592 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1ce36:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1ce3a:	4629      	mov	r1, r5
   1ce3c:	4638      	mov	r0, r7
}
   1ce3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1ce42:	f7fe bea3 	b.w	1bb8c <bt_att_send>
   1ce46:	bf00      	nop
   1ce48:	0002bfe4 	.word	0x0002bfe4
   1ce4c:	0002c00c 	.word	0x0002c00c
   1ce50:	0002ffb0 	.word	0x0002ffb0
   1ce54:	00030063 	.word	0x00030063

0001ce58 <notify_cb>:
{
   1ce58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ce5c:	4b3c      	ldr	r3, [pc, #240]	; (1cf50 <notify_cb+0xf8>)
{
   1ce5e:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ce60:	6882      	ldr	r2, [r0, #8]
{
   1ce62:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ce64:	429a      	cmp	r2, r3
   1ce66:	d113      	bne.n	1ce90 <notify_cb+0x38>
	ccc = attr->user_data;
   1ce68:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1ce6a:	4b3a      	ldr	r3, [pc, #232]	; (1cf54 <notify_cb+0xfc>)
   1ce6c:	429f      	cmp	r7, r3
   1ce6e:	d014      	beq.n	1ce9a <notify_cb+0x42>
		if (cfg->value != data->type) {
   1ce70:	893a      	ldrh	r2, [r7, #8]
   1ce72:	89a3      	ldrh	r3, [r4, #12]
   1ce74:	429a      	cmp	r2, r3
   1ce76:	d10b      	bne.n	1ce90 <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1ce78:	4639      	mov	r1, r7
   1ce7a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1ce7e:	f7fd f8a9 	bl	19fd4 <bt_conn_lookup_addr_le>
		if (!conn) {
   1ce82:	4605      	mov	r5, r0
   1ce84:	b120      	cbz	r0, 1ce90 <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
   1ce86:	7b43      	ldrb	r3, [r0, #13]
   1ce88:	2b07      	cmp	r3, #7
   1ce8a:	d02d      	beq.n	1cee8 <notify_cb+0x90>
			bt_conn_unref(conn);
   1ce8c:	f7fc ff6e 	bl	19d6c <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   1ce90:	2701      	movs	r7, #1
}
   1ce92:	4638      	mov	r0, r7
   1ce94:	b003      	add	sp, #12
   1ce96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1ce9a:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1ce9e:	46c1      	mov	r9, r8
   1cea0:	4d2d      	ldr	r5, [pc, #180]	; (1cf58 <notify_cb+0x100>)
   1cea2:	4669      	mov	r1, sp
   1cea4:	4628      	mov	r0, r5
   1cea6:	f8cd 9000 	str.w	r9, [sp]
   1ceaa:	f8cd 9003 	str.w	r9, [sp, #3]
   1ceae:	f00c fc44 	bl	2973a <bt_addr_le_cmp>
   1ceb2:	b178      	cbz	r0, 1ced4 <notify_cb+0x7c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1ceb4:	2207      	movs	r2, #7
   1ceb6:	4629      	mov	r1, r5
   1ceb8:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1cebc:	f7fd f8d0 	bl	1a060 <bt_conn_lookup_state_le>
			if (!conn) {
   1cec0:	b978      	cbnz	r0, 1cee2 <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
   1cec2:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   1cec4:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   1cec6:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1cec8:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1cecc:	8853      	ldrh	r3, [r2, #2]
   1cece:	8812      	ldrh	r2, [r2, #0]
   1ced0:	f7ff f8a4 	bl	1c01c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1ced4:	350c      	adds	r5, #12
   1ced6:	f1b8 0f00 	cmp.w	r8, #0
   1ceda:	d1c9      	bne.n	1ce70 <notify_cb+0x18>
   1cedc:	f04f 0801 	mov.w	r8, #1
   1cee0:	e7df      	b.n	1cea2 <notify_cb+0x4a>
			bt_conn_unref(conn);
   1cee2:	f7fc ff43 	bl	19d6c <bt_conn_unref>
   1cee6:	e7f5      	b.n	1ced4 <notify_cb+0x7c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1cee8:	697b      	ldr	r3, [r7, #20]
   1ceea:	b123      	cbz	r3, 1cef6 <notify_cb+0x9e>
   1ceec:	4631      	mov	r1, r6
   1ceee:	4798      	blx	r3
   1cef0:	b908      	cbnz	r0, 1cef6 <notify_cb+0x9e>
			bt_conn_unref(conn);
   1cef2:	4628      	mov	r0, r5
   1cef4:	e7ca      	b.n	1ce8c <notify_cb+0x34>
		if (bt_gatt_check_perm(conn, attr,
   1cef6:	2214      	movs	r2, #20
   1cef8:	4631      	mov	r1, r6
   1cefa:	4628      	mov	r0, r5
   1cefc:	f00c fec4 	bl	29c88 <bt_gatt_check_perm>
   1cf00:	4607      	mov	r7, r0
   1cf02:	b150      	cbz	r0, 1cf1a <notify_cb+0xc2>
   1cf04:	4b15      	ldr	r3, [pc, #84]	; (1cf5c <notify_cb+0x104>)
   1cf06:	4916      	ldr	r1, [pc, #88]	; (1cf60 <notify_cb+0x108>)
			BT_WARN("Link is not encrypted");
   1cf08:	4816      	ldr	r0, [pc, #88]	; (1cf64 <notify_cb+0x10c>)
   1cf0a:	1ac9      	subs	r1, r1, r3
   1cf0c:	08c9      	lsrs	r1, r1, #3
   1cf0e:	0189      	lsls	r1, r1, #6
   1cf10:	f041 0102 	orr.w	r1, r1, #2
   1cf14:	f009 ff0c 	bl	26d30 <log_0>
			continue;
   1cf18:	e7ba      	b.n	1ce90 <notify_cb+0x38>
		if (data->type == BT_GATT_CCC_INDICATE) {
   1cf1a:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   1cf1c:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   1cf1e:	2b02      	cmp	r3, #2
   1cf20:	88a1      	ldrh	r1, [r4, #4]
   1cf22:	6922      	ldr	r2, [r4, #16]
   1cf24:	d10f      	bne.n	1cf46 <notify_cb+0xee>
			err = gatt_indicate(conn, data->handle,
   1cf26:	f7ff fdf3 	bl	1cb10 <gatt_indicate>
			if (err == 0) {
   1cf2a:	4606      	mov	r6, r0
   1cf2c:	b918      	cbnz	r0, 1cf36 <notify_cb+0xde>
				data->ind_params->_ref++;
   1cf2e:	6922      	ldr	r2, [r4, #16]
   1cf30:	7d93      	ldrb	r3, [r2, #22]
   1cf32:	3301      	adds	r3, #1
   1cf34:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1cf36:	4628      	mov	r0, r5
   1cf38:	f7fc ff18 	bl	19d6c <bt_conn_unref>
		if (err < 0) {
   1cf3c:	2e00      	cmp	r6, #0
   1cf3e:	dba8      	blt.n	1ce92 <notify_cb+0x3a>
		data->err = 0;
   1cf40:	2300      	movs	r3, #0
   1cf42:	60a3      	str	r3, [r4, #8]
   1cf44:	e7a4      	b.n	1ce90 <notify_cb+0x38>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1cf46:	f7ff ff37 	bl	1cdb8 <gatt_notify>
   1cf4a:	4606      	mov	r6, r0
   1cf4c:	e7f3      	b.n	1cf36 <notify_cb+0xde>
   1cf4e:	bf00      	nop
   1cf50:	0001bef5 	.word	0x0001bef5
   1cf54:	200082f8 	.word	0x200082f8
   1cf58:	2000a40d 	.word	0x2000a40d
   1cf5c:	0002bfe4 	.word	0x0002bfe4
   1cf60:	0002c00c 	.word	0x0002c00c
   1cf64:	0002ffb0 	.word	0x0002ffb0

0001cf68 <update_ccc>:
{
   1cf68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1cf6c:	4b3e      	ldr	r3, [pc, #248]	; (1d068 <update_ccc+0x100>)
{
   1cf6e:	4616      	mov	r6, r2
	struct bt_conn *conn = data->conn;
   1cf70:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1cf72:	6882      	ldr	r2, [r0, #8]
{
   1cf74:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1cf76:	429a      	cmp	r2, r3
   1cf78:	d11c      	bne.n	1cfb4 <update_ccc+0x4c>
	ccc = attr->user_data;
   1cf7a:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
   1cf7c:	893b      	ldrh	r3, [r7, #8]
   1cf7e:	b1cb      	cbz	r3, 1cfb4 <update_ccc+0x4c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1cf80:	463a      	mov	r2, r7
   1cf82:	4628      	mov	r0, r5
   1cf84:	f812 1b01 	ldrb.w	r1, [r2], #1
   1cf88:	f00b fe84 	bl	28c94 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1cf8c:	b190      	cbz	r0, 1cfb4 <update_ccc+0x4c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1cf8e:	222a      	movs	r2, #42	; 0x2a
   1cf90:	4621      	mov	r1, r4
   1cf92:	4628      	mov	r0, r5
   1cf94:	f00c fe78 	bl	29c88 <bt_gatt_check_perm>
		if (err) {
   1cf98:	b308      	cbz	r0, 1cfde <update_ccc+0x76>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1cf9a:	2803      	cmp	r0, #3
   1cf9c:	d10e      	bne.n	1cfbc <update_ccc+0x54>
   1cf9e:	4a33      	ldr	r2, [pc, #204]	; (1d06c <update_ccc+0x104>)
   1cfa0:	4b33      	ldr	r3, [pc, #204]	; (1d070 <update_ccc+0x108>)
				BT_WARN("CCC %p not writable", attr);
   1cfa2:	4621      	mov	r1, r4
   1cfa4:	1ad2      	subs	r2, r2, r3
   1cfa6:	08d2      	lsrs	r2, r2, #3
   1cfa8:	0192      	lsls	r2, r2, #6
   1cfaa:	4832      	ldr	r0, [pc, #200]	; (1d074 <update_ccc+0x10c>)
   1cfac:	f042 0202 	orr.w	r2, r2, #2
   1cfb0:	f009 fecb 	bl	26d4a <log_1>
}
   1cfb4:	2001      	movs	r0, #1
   1cfb6:	b002      	add	sp, #8
   1cfb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				sec = BT_SECURITY_L3;
   1cfbc:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1cfbe:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
   1cfc0:	bf14      	ite	ne
   1cfc2:	f04f 0802 	movne.w	r8, #2
   1cfc6:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
   1cfca:	f00b fe4f 	bl	28c6c <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1cfce:	4580      	cmp	r8, r0
   1cfd0:	d905      	bls.n	1cfde <update_ccc+0x76>
				if (data->sec < sec) {
   1cfd2:	7933      	ldrb	r3, [r6, #4]
   1cfd4:	4543      	cmp	r3, r8
   1cfd6:	d2ed      	bcs.n	1cfb4 <update_ccc+0x4c>
					data->sec = sec;
   1cfd8:	f886 8004 	strb.w	r8, [r6, #4]
   1cfdc:	e7ea      	b.n	1cfb4 <update_ccc+0x4c>
		gatt_ccc_changed(attr, ccc);
   1cfde:	4639      	mov	r1, r7
   1cfe0:	4620      	mov	r0, r4
   1cfe2:	f00c fb20 	bl	29626 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1cfe6:	4b24      	ldr	r3, [pc, #144]	; (1d078 <update_ccc+0x110>)
   1cfe8:	429f      	cmp	r7, r3
   1cfea:	d1e3      	bne.n	1cfb4 <update_ccc+0x4c>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1cfec:	7a28      	ldrb	r0, [r5, #8]
   1cfee:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1cff2:	f7fe ff11 	bl	1be18 <find_sc_cfg>
	if (!cfg) {
   1cff6:	4604      	mov	r4, r0
   1cff8:	2800      	cmp	r0, #0
   1cffa:	d0db      	beq.n	1cfb4 <update_ccc+0x4c>
	if (!(cfg->data.start || cfg->data.end)) {
   1cffc:	8902      	ldrh	r2, [r0, #8]
   1cffe:	8943      	ldrh	r3, [r0, #10]
   1d000:	ea52 0103 	orrs.w	r1, r2, r3
   1d004:	d0d6      	beq.n	1cfb4 <update_ccc+0x4c>
	index = bt_conn_index(conn);
   1d006:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1d008:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1d00c:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1d010:	f7fd fad8 	bl	1a5c4 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1d014:	2318      	movs	r3, #24
   1d016:	4919      	ldr	r1, [pc, #100]	; (1d07c <update_ccc+0x114>)
   1d018:	4a19      	ldr	r2, [pc, #100]	; (1d080 <update_ccc+0x118>)
   1d01a:	fb03 1300 	mla	r3, r3, r0, r1
   1d01e:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1d020:	4a18      	ldr	r2, [pc, #96]	; (1d084 <update_ccc+0x11c>)
   1d022:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1d024:	aa01      	add	r2, sp, #4
   1d026:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1d028:	2204      	movs	r2, #4
   1d02a:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1d02c:	b203      	sxth	r3, r0
   1d02e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d032:	4628      	mov	r0, r5
   1d034:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1d038:	f7ff fdd4 	bl	1cbe4 <bt_gatt_indicate>
   1d03c:	b148      	cbz	r0, 1d052 <update_ccc+0xea>
   1d03e:	490b      	ldr	r1, [pc, #44]	; (1d06c <update_ccc+0x104>)
   1d040:	4b0b      	ldr	r3, [pc, #44]	; (1d070 <update_ccc+0x108>)
		BT_ERR("SC restore indication failed");
   1d042:	4811      	ldr	r0, [pc, #68]	; (1d088 <update_ccc+0x120>)
   1d044:	1ac9      	subs	r1, r1, r3
   1d046:	08c9      	lsrs	r1, r1, #3
   1d048:	0189      	lsls	r1, r1, #6
   1d04a:	f041 0101 	orr.w	r1, r1, #1
   1d04e:	f009 fe6f 	bl	26d30 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
   1d052:	2204      	movs	r2, #4
   1d054:	2100      	movs	r1, #0
   1d056:	f104 0008 	add.w	r0, r4, #8
   1d05a:	f00b fac5 	bl	285e8 <memset>
		sc_store(cfg);
   1d05e:	4620      	mov	r0, r4
   1d060:	f7fe ffaa 	bl	1bfb8 <sc_store>
   1d064:	e7a6      	b.n	1cfb4 <update_ccc+0x4c>
   1d066:	bf00      	nop
   1d068:	0001bef5 	.word	0x0001bef5
   1d06c:	0002c00c 	.word	0x0002c00c
   1d070:	0002bfe4 	.word	0x0002bfe4
   1d074:	0003008c 	.word	0x0003008c
   1d078:	200082f8 	.word	0x200082f8
   1d07c:	2000988c 	.word	0x2000988c
   1d080:	0002c73c 	.word	0x0002c73c
   1d084:	00029933 	.word	0x00029933
   1d088:	000300a0 	.word	0x000300a0

0001d08c <bt_gatt_exchange_mtu>:
{
   1d08c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d08e:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameter\n");
   1d090:	4604      	mov	r4, r0
   1d092:	b970      	cbnz	r0, 1d0b2 <bt_gatt_exchange_mtu+0x26>
   1d094:	4918      	ldr	r1, [pc, #96]	; (1d0f8 <bt_gatt_exchange_mtu+0x6c>)
   1d096:	f640 3349 	movw	r3, #2889	; 0xb49
   1d09a:	4a18      	ldr	r2, [pc, #96]	; (1d0fc <bt_gatt_exchange_mtu+0x70>)
   1d09c:	4818      	ldr	r0, [pc, #96]	; (1d100 <bt_gatt_exchange_mtu+0x74>)
   1d09e:	f009 fb3d 	bl	2671c <printk>
   1d0a2:	4818      	ldr	r0, [pc, #96]	; (1d104 <bt_gatt_exchange_mtu+0x78>)
   1d0a4:	f009 fb3a 	bl	2671c <printk>
   1d0a8:	f640 3149 	movw	r1, #2889	; 0xb49
   1d0ac:	4813      	ldr	r0, [pc, #76]	; (1d0fc <bt_gatt_exchange_mtu+0x70>)
   1d0ae:	f009 fdda 	bl	26c66 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   1d0b2:	b10d      	cbz	r5, 1d0b8 <bt_gatt_exchange_mtu+0x2c>
   1d0b4:	682b      	ldr	r3, [r5, #0]
   1d0b6:	b973      	cbnz	r3, 1d0d6 <bt_gatt_exchange_mtu+0x4a>
   1d0b8:	4913      	ldr	r1, [pc, #76]	; (1d108 <bt_gatt_exchange_mtu+0x7c>)
   1d0ba:	f640 334a 	movw	r3, #2890	; 0xb4a
   1d0be:	4a0f      	ldr	r2, [pc, #60]	; (1d0fc <bt_gatt_exchange_mtu+0x70>)
   1d0c0:	480f      	ldr	r0, [pc, #60]	; (1d100 <bt_gatt_exchange_mtu+0x74>)
   1d0c2:	f009 fb2b 	bl	2671c <printk>
   1d0c6:	4811      	ldr	r0, [pc, #68]	; (1d10c <bt_gatt_exchange_mtu+0x80>)
   1d0c8:	f009 fb28 	bl	2671c <printk>
   1d0cc:	f640 314a 	movw	r1, #2890	; 0xb4a
   1d0d0:	480a      	ldr	r0, [pc, #40]	; (1d0fc <bt_gatt_exchange_mtu+0x70>)
   1d0d2:	f009 fdc8 	bl	26c66 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1d0d6:	7b63      	ldrb	r3, [r4, #13]
   1d0d8:	2b07      	cmp	r3, #7
   1d0da:	d10a      	bne.n	1d0f2 <bt_gatt_exchange_mtu+0x66>
	return gatt_req_send(conn, gatt_mtu_rsp, params,
   1d0dc:	2302      	movs	r3, #2
   1d0de:	462a      	mov	r2, r5
   1d0e0:	e9cd 3300 	strd	r3, r3, [sp]
   1d0e4:	4620      	mov	r0, r4
   1d0e6:	4b0a      	ldr	r3, [pc, #40]	; (1d110 <bt_gatt_exchange_mtu+0x84>)
   1d0e8:	490a      	ldr	r1, [pc, #40]	; (1d114 <bt_gatt_exchange_mtu+0x88>)
   1d0ea:	f00c fd3a 	bl	29b62 <gatt_req_send>
}
   1d0ee:	b003      	add	sp, #12
   1d0f0:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   1d0f2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1d0f6:	e7fa      	b.n	1d0ee <bt_gatt_exchange_mtu+0x62>
   1d0f8:	0002ef75 	.word	0x0002ef75
   1d0fc:	0002ff0c 	.word	0x0002ff0c
   1d100:	0002cfb2 	.word	0x0002cfb2
   1d104:	000300bd 	.word	0x000300bd
   1d108:	000300d2 	.word	0x000300d2
   1d10c:	0002fff4 	.word	0x0002fff4
   1d110:	000297c5 	.word	0x000297c5
   1d114:	00029669 	.word	0x00029669

0001d118 <bt_gatt_discover>:
{
   1d118:	b570      	push	{r4, r5, r6, lr}
   1d11a:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   1d11c:	4605      	mov	r5, r0
{
   1d11e:	b086      	sub	sp, #24
	__ASSERT(conn, "invalid parameters\n");
   1d120:	b970      	cbnz	r0, 1d140 <bt_gatt_discover+0x28>
   1d122:	497e      	ldr	r1, [pc, #504]	; (1d31c <bt_gatt_discover+0x204>)
   1d124:	f640 6376 	movw	r3, #3702	; 0xe76
   1d128:	4a7d      	ldr	r2, [pc, #500]	; (1d320 <bt_gatt_discover+0x208>)
   1d12a:	487e      	ldr	r0, [pc, #504]	; (1d324 <bt_gatt_discover+0x20c>)
   1d12c:	f009 faf6 	bl	2671c <printk>
   1d130:	487d      	ldr	r0, [pc, #500]	; (1d328 <bt_gatt_discover+0x210>)
   1d132:	f009 faf3 	bl	2671c <printk>
   1d136:	f640 6176 	movw	r1, #3702	; 0xe76
   1d13a:	4879      	ldr	r0, [pc, #484]	; (1d320 <bt_gatt_discover+0x208>)
   1d13c:	f009 fd93 	bl	26c66 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   1d140:	b10c      	cbz	r4, 1d146 <bt_gatt_discover+0x2e>
   1d142:	6863      	ldr	r3, [r4, #4]
   1d144:	b973      	cbnz	r3, 1d164 <bt_gatt_discover+0x4c>
   1d146:	4979      	ldr	r1, [pc, #484]	; (1d32c <bt_gatt_discover+0x214>)
   1d148:	f640 6377 	movw	r3, #3703	; 0xe77
   1d14c:	4a74      	ldr	r2, [pc, #464]	; (1d320 <bt_gatt_discover+0x208>)
   1d14e:	4875      	ldr	r0, [pc, #468]	; (1d324 <bt_gatt_discover+0x20c>)
   1d150:	f009 fae4 	bl	2671c <printk>
   1d154:	4874      	ldr	r0, [pc, #464]	; (1d328 <bt_gatt_discover+0x210>)
   1d156:	f009 fae1 	bl	2671c <printk>
   1d15a:	f640 6177 	movw	r1, #3703	; 0xe77
   1d15e:	4870      	ldr	r0, [pc, #448]	; (1d320 <bt_gatt_discover+0x208>)
   1d160:	f009 fd81 	bl	26c66 <assert_post_action>
	__ASSERT((params->start_handle && params->end_handle),
   1d164:	8923      	ldrh	r3, [r4, #8]
   1d166:	b10b      	cbz	r3, 1d16c <bt_gatt_discover+0x54>
   1d168:	89e3      	ldrh	r3, [r4, #14]
   1d16a:	b973      	cbnz	r3, 1d18a <bt_gatt_discover+0x72>
   1d16c:	4970      	ldr	r1, [pc, #448]	; (1d330 <bt_gatt_discover+0x218>)
   1d16e:	f640 6378 	movw	r3, #3704	; 0xe78
   1d172:	4a6b      	ldr	r2, [pc, #428]	; (1d320 <bt_gatt_discover+0x208>)
   1d174:	486b      	ldr	r0, [pc, #428]	; (1d324 <bt_gatt_discover+0x20c>)
   1d176:	f009 fad1 	bl	2671c <printk>
   1d17a:	486b      	ldr	r0, [pc, #428]	; (1d328 <bt_gatt_discover+0x210>)
   1d17c:	f009 face 	bl	2671c <printk>
   1d180:	f640 6178 	movw	r1, #3704	; 0xe78
   1d184:	4866      	ldr	r0, [pc, #408]	; (1d320 <bt_gatt_discover+0x208>)
   1d186:	f009 fd6e 	bl	26c66 <assert_post_action>
	__ASSERT((params->start_handle <= params->end_handle),
   1d18a:	8922      	ldrh	r2, [r4, #8]
   1d18c:	89e3      	ldrh	r3, [r4, #14]
   1d18e:	429a      	cmp	r2, r3
   1d190:	d90e      	bls.n	1d1b0 <bt_gatt_discover+0x98>
   1d192:	4968      	ldr	r1, [pc, #416]	; (1d334 <bt_gatt_discover+0x21c>)
   1d194:	f640 637a 	movw	r3, #3706	; 0xe7a
   1d198:	4a61      	ldr	r2, [pc, #388]	; (1d320 <bt_gatt_discover+0x208>)
   1d19a:	4862      	ldr	r0, [pc, #392]	; (1d324 <bt_gatt_discover+0x20c>)
   1d19c:	f009 fabe 	bl	2671c <printk>
   1d1a0:	4861      	ldr	r0, [pc, #388]	; (1d328 <bt_gatt_discover+0x210>)
   1d1a2:	f009 fabb 	bl	2671c <printk>
   1d1a6:	f640 617a 	movw	r1, #3706	; 0xe7a
   1d1aa:	485d      	ldr	r0, [pc, #372]	; (1d320 <bt_gatt_discover+0x208>)
   1d1ac:	f009 fd5b 	bl	26c66 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1d1b0:	7b6b      	ldrb	r3, [r5, #13]
   1d1b2:	2b07      	cmp	r3, #7
   1d1b4:	f040 80af 	bne.w	1d316 <bt_gatt_discover+0x1fe>
	switch (params->type) {
   1d1b8:	7c21      	ldrb	r1, [r4, #16]
   1d1ba:	2906      	cmp	r1, #6
   1d1bc:	f200 80a2 	bhi.w	1d304 <bt_gatt_discover+0x1ec>
   1d1c0:	e8df f001 	tbb	[pc, r1]
   1d1c4:	5f5f0404 	.word	0x5f5f0404
   1d1c8:	9967      	.short	0x9967
   1d1ca:	2b          	.byte	0x2b
   1d1cb:	00          	.byte	0x00
		if (params->uuid) {
   1d1cc:	6823      	ldr	r3, [r4, #0]
   1d1ce:	b1e3      	cbz	r3, 1d20a <bt_gatt_discover+0xf2>
	switch (params->uuid->type) {
   1d1d0:	7819      	ldrb	r1, [r3, #0]
   1d1d2:	b161      	cbz	r1, 1d1ee <bt_gatt_discover+0xd6>
   1d1d4:	2902      	cmp	r1, #2
   1d1d6:	d016      	beq.n	1d206 <bt_gatt_discover+0xee>
   1d1d8:	4a57      	ldr	r2, [pc, #348]	; (1d338 <bt_gatt_discover+0x220>)
   1d1da:	4b58      	ldr	r3, [pc, #352]	; (1d33c <bt_gatt_discover+0x224>)
		BT_ERR("Unknown UUID type %u", params->uuid->type);
   1d1dc:	4858      	ldr	r0, [pc, #352]	; (1d340 <bt_gatt_discover+0x228>)
   1d1de:	1ad2      	subs	r2, r2, r3
   1d1e0:	08d2      	lsrs	r2, r2, #3
   1d1e2:	0192      	lsls	r2, r2, #6
   1d1e4:	f042 0201 	orr.w	r2, r2, #1
		BT_ERR("Invalid discovery type: %u", params->type);
   1d1e8:	f009 fdaf 	bl	26d4a <log_1>
   1d1ec:	e017      	b.n	1d21e <bt_gatt_discover+0x106>
		len += BT_UUID_SIZE_16;
   1d1ee:	2308      	movs	r3, #8
	return gatt_req_send(conn, gatt_find_type_rsp, params,
   1d1f0:	9301      	str	r3, [sp, #4]
   1d1f2:	2306      	movs	r3, #6
   1d1f4:	4622      	mov	r2, r4
   1d1f6:	9300      	str	r3, [sp, #0]
   1d1f8:	4952      	ldr	r1, [pc, #328]	; (1d344 <bt_gatt_discover+0x22c>)
   1d1fa:	4b53      	ldr	r3, [pc, #332]	; (1d348 <bt_gatt_discover+0x230>)
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   1d1fc:	4628      	mov	r0, r5
   1d1fe:	f00c fcb0 	bl	29b62 <gatt_req_send>
}
   1d202:	b006      	add	sp, #24
   1d204:	bd70      	pop	{r4, r5, r6, pc}
	switch (params->uuid->type) {
   1d206:	2316      	movs	r3, #22
   1d208:	e7f2      	b.n	1d1f0 <bt_gatt_discover+0xd8>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   1d20a:	2310      	movs	r3, #16
   1d20c:	2104      	movs	r1, #4
   1d20e:	4622      	mov	r2, r4
   1d210:	e9cd 3100 	strd	r3, r1, [sp]
   1d214:	4b4d      	ldr	r3, [pc, #308]	; (1d34c <bt_gatt_discover+0x234>)
   1d216:	494e      	ldr	r1, [pc, #312]	; (1d350 <bt_gatt_discover+0x238>)
   1d218:	e7f0      	b.n	1d1fc <bt_gatt_discover+0xe4>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1d21a:	6820      	ldr	r0, [r4, #0]
   1d21c:	b910      	cbnz	r0, 1d224 <bt_gatt_discover+0x10c>
	return -EINVAL;
   1d21e:	f06f 0015 	mvn.w	r0, #21
   1d222:	e7ee      	b.n	1d202 <bt_gatt_discover+0xea>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1d224:	7806      	ldrb	r6, [r0, #0]
   1d226:	2e00      	cmp	r6, #0
   1d228:	d1f9      	bne.n	1d21e <bt_gatt_discover+0x106>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   1d22a:	f44f 5324 	mov.w	r3, #10496	; 0x2900
   1d22e:	a902      	add	r1, sp, #8
   1d230:	f88d 6008 	strb.w	r6, [sp, #8]
   1d234:	f8ad 300a 	strh.w	r3, [sp, #10]
   1d238:	f00b fa46 	bl	286c8 <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1d23c:	b308      	cbz	r0, 1d282 <bt_gatt_discover+0x16a>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   1d23e:	f642 1302 	movw	r3, #10498	; 0x2902
   1d242:	6820      	ldr	r0, [r4, #0]
   1d244:	a903      	add	r1, sp, #12
   1d246:	f88d 600c 	strb.w	r6, [sp, #12]
   1d24a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1d24e:	f00b fa3b 	bl	286c8 <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   1d252:	b1b0      	cbz	r0, 1d282 <bt_gatt_discover+0x16a>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   1d254:	f642 1303 	movw	r3, #10499	; 0x2903
   1d258:	6820      	ldr	r0, [r4, #0]
   1d25a:	a904      	add	r1, sp, #16
   1d25c:	f88d 6010 	strb.w	r6, [sp, #16]
   1d260:	f8ad 3012 	strh.w	r3, [sp, #18]
   1d264:	f00b fa30 	bl	286c8 <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   1d268:	b158      	cbz	r0, 1d282 <bt_gatt_discover+0x16a>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
   1d26a:	f642 1304 	movw	r3, #10500	; 0x2904
   1d26e:	6820      	ldr	r0, [r4, #0]
   1d270:	a905      	add	r1, sp, #20
   1d272:	f88d 6014 	strb.w	r6, [sp, #20]
   1d276:	f8ad 3016 	strh.w	r3, [sp, #22]
   1d27a:	f00b fa25 	bl	286c8 <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   1d27e:	2800      	cmp	r0, #0
   1d280:	d1cd      	bne.n	1d21e <bt_gatt_discover+0x106>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
   1d282:	2308      	movs	r3, #8
   1d284:	2204      	movs	r2, #4
   1d286:	4933      	ldr	r1, [pc, #204]	; (1d354 <bt_gatt_discover+0x23c>)
   1d288:	e9cd 3200 	strd	r3, r2, [sp]
   1d28c:	4622      	mov	r2, r4
   1d28e:	4b32      	ldr	r3, [pc, #200]	; (1d358 <bt_gatt_discover+0x240>)
   1d290:	e7b4      	b.n	1d1fc <bt_gatt_discover+0xe4>
		if (params->uuid &&
   1d292:	6820      	ldr	r0, [r4, #0]
   1d294:	b378      	cbz	r0, 1d2f6 <bt_gatt_discover+0x1de>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1d296:	2600      	movs	r6, #0
   1d298:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1d29c:	a902      	add	r1, sp, #8
   1d29e:	f88d 6008 	strb.w	r6, [sp, #8]
   1d2a2:	f8ad 300a 	strh.w	r3, [sp, #10]
   1d2a6:	f00b fa0f 	bl	286c8 <bt_uuid_cmp>
		if (params->uuid &&
   1d2aa:	2800      	cmp	r0, #0
   1d2ac:	d0b7      	beq.n	1d21e <bt_gatt_discover+0x106>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   1d2ae:	f642 0301 	movw	r3, #10241	; 0x2801
   1d2b2:	6820      	ldr	r0, [r4, #0]
   1d2b4:	a903      	add	r1, sp, #12
   1d2b6:	f88d 600c 	strb.w	r6, [sp, #12]
   1d2ba:	f8ad 300e 	strh.w	r3, [sp, #14]
   1d2be:	f00b fa03 	bl	286c8 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1d2c2:	2800      	cmp	r0, #0
   1d2c4:	d0ab      	beq.n	1d21e <bt_gatt_discover+0x106>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1d2c6:	f642 0302 	movw	r3, #10242	; 0x2802
   1d2ca:	6820      	ldr	r0, [r4, #0]
   1d2cc:	a904      	add	r1, sp, #16
   1d2ce:	f88d 6010 	strb.w	r6, [sp, #16]
   1d2d2:	f8ad 3012 	strh.w	r3, [sp, #18]
   1d2d6:	f00b f9f7 	bl	286c8 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   1d2da:	2800      	cmp	r0, #0
   1d2dc:	d09f      	beq.n	1d21e <bt_gatt_discover+0x106>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   1d2de:	f642 0303 	movw	r3, #10243	; 0x2803
   1d2e2:	6820      	ldr	r0, [r4, #0]
   1d2e4:	a905      	add	r1, sp, #20
   1d2e6:	f88d 6014 	strb.w	r6, [sp, #20]
   1d2ea:	f8ad 3016 	strh.w	r3, [sp, #22]
   1d2ee:	f00b f9eb 	bl	286c8 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1d2f2:	2800      	cmp	r0, #0
   1d2f4:	d093      	beq.n	1d21e <bt_gatt_discover+0x106>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   1d2f6:	2304      	movs	r3, #4
   1d2f8:	4622      	mov	r2, r4
   1d2fa:	e9cd 3300 	strd	r3, r3, [sp]
   1d2fe:	4917      	ldr	r1, [pc, #92]	; (1d35c <bt_gatt_discover+0x244>)
   1d300:	4b17      	ldr	r3, [pc, #92]	; (1d360 <bt_gatt_discover+0x248>)
   1d302:	e77b      	b.n	1d1fc <bt_gatt_discover+0xe4>
   1d304:	4a0c      	ldr	r2, [pc, #48]	; (1d338 <bt_gatt_discover+0x220>)
   1d306:	4b0d      	ldr	r3, [pc, #52]	; (1d33c <bt_gatt_discover+0x224>)
		BT_ERR("Invalid discovery type: %u", params->type);
   1d308:	4816      	ldr	r0, [pc, #88]	; (1d364 <bt_gatt_discover+0x24c>)
   1d30a:	1ad2      	subs	r2, r2, r3
   1d30c:	08d2      	lsrs	r2, r2, #3
   1d30e:	0192      	lsls	r2, r2, #6
   1d310:	f042 0201 	orr.w	r2, r2, #1
   1d314:	e768      	b.n	1d1e8 <bt_gatt_discover+0xd0>
		return -ENOTCONN;
   1d316:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1d31a:	e772      	b.n	1d202 <bt_gatt_discover+0xea>
   1d31c:	0002ef75 	.word	0x0002ef75
   1d320:	0002ff0c 	.word	0x0002ff0c
   1d324:	0002cfb2 	.word	0x0002cfb2
   1d328:	0002fff4 	.word	0x0002fff4
   1d32c:	000300d2 	.word	0x000300d2
   1d330:	000300e9 	.word	0x000300e9
   1d334:	00030116 	.word	0x00030116
   1d338:	0002c00c 	.word	0x0002c00c
   1d33c:	0002bfe4 	.word	0x0002bfe4
   1d340:	00030143 	.word	0x00030143
   1d344:	00029d19 	.word	0x00029d19
   1d348:	0002988b 	.word	0x0002988b
   1d34c:	00029807 	.word	0x00029807
   1d350:	0001d369 	.word	0x0001d369
   1d354:	0001d479 	.word	0x0001d479
   1d358:	00029837 	.word	0x00029837
   1d35c:	0001d7e9 	.word	0x0001d7e9
   1d360:	000297ef 	.word	0x000297ef
   1d364:	00030158 	.word	0x00030158

0001d368 <gatt_read_group_rsp>:
{
   1d368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d36c:	b08f      	sub	sp, #60	; 0x3c
   1d36e:	4617      	mov	r7, r2
   1d370:	4681      	mov	r9, r0
	if (err) {
   1d372:	460a      	mov	r2, r1
{
   1d374:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (err) {
   1d376:	b131      	cbz	r1, 1d386 <gatt_read_group_rsp+0x1e>
		params->func(conn, NULL, params);
   1d378:	462a      	mov	r2, r5
   1d37a:	2100      	movs	r1, #0
   1d37c:	686b      	ldr	r3, [r5, #4]
	params->func(conn, NULL, params);
   1d37e:	4798      	blx	r3
}
   1d380:	b00f      	add	sp, #60	; 0x3c
   1d382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (rsp->len) {
   1d386:	7839      	ldrb	r1, [r7, #0]
   1d388:	2906      	cmp	r1, #6
   1d38a:	d011      	beq.n	1d3b0 <gatt_read_group_rsp+0x48>
   1d38c:	2914      	cmp	r1, #20
   1d38e:	d00e      	beq.n	1d3ae <gatt_read_group_rsp+0x46>
   1d390:	4a36      	ldr	r2, [pc, #216]	; (1d46c <gatt_read_group_rsp+0x104>)
   1d392:	4b37      	ldr	r3, [pc, #220]	; (1d470 <gatt_read_group_rsp+0x108>)
		BT_ERR("Invalid data len %u", rsp->len);
   1d394:	4837      	ldr	r0, [pc, #220]	; (1d474 <gatt_read_group_rsp+0x10c>)
   1d396:	1ad2      	subs	r2, r2, r3
   1d398:	08d2      	lsrs	r2, r2, #3
   1d39a:	0192      	lsls	r2, r2, #6
   1d39c:	f042 0201 	orr.w	r2, r2, #1
   1d3a0:	f009 fcd3 	bl	26d4a <log_1>
	params->func(conn, NULL, params);
   1d3a4:	462a      	mov	r2, r5
   1d3a6:	2100      	movs	r1, #0
   1d3a8:	4648      	mov	r0, r9
   1d3aa:	686b      	ldr	r3, [r5, #4]
   1d3ac:	e7e7      	b.n	1d37e <gatt_read_group_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
   1d3ae:	2202      	movs	r2, #2
	uint16_t start_handle, end_handle = 0U;
   1d3b0:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d3b2:	3b01      	subs	r3, #1
		u.uuid.type = BT_UUID_TYPE_128;
   1d3b4:	f88d 2010 	strb.w	r2, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d3b8:	b29c      	uxth	r4, r3
   1d3ba:	f107 0801 	add.w	r8, r7, #1
   1d3be:	783b      	ldrb	r3, [r7, #0]
   1d3c0:	42a3      	cmp	r3, r4
   1d3c2:	d909      	bls.n	1d3d8 <gatt_read_group_rsp+0x70>
	if (length == 0U && end_handle) {
   1d3c4:	2c00      	cmp	r4, #0
   1d3c6:	d1ed      	bne.n	1d3a4 <gatt_read_group_rsp+0x3c>
   1d3c8:	2e00      	cmp	r6, #0
   1d3ca:	d0eb      	beq.n	1d3a4 <gatt_read_group_rsp+0x3c>
	gatt_discover_next(conn, handle, params);
   1d3cc:	462a      	mov	r2, r5
   1d3ce:	4631      	mov	r1, r6
   1d3d0:	4648      	mov	r0, r9
   1d3d2:	f00c fc84 	bl	29cde <gatt_discover_next>
   1d3d6:	e7d3      	b.n	1d380 <gatt_read_group_rsp+0x18>
		struct bt_gatt_attr attr = {};
   1d3d8:	2214      	movs	r2, #20
   1d3da:	2100      	movs	r1, #0
   1d3dc:	a809      	add	r0, sp, #36	; 0x24
   1d3de:	f00b f903 	bl	285e8 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   1d3e2:	f8b8 a000 	ldrh.w	sl, [r8]
   1d3e6:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   1d3ea:	2b00      	cmp	r3, #0
   1d3ec:	d0da      	beq.n	1d3a4 <gatt_read_group_rsp+0x3c>
		end_handle = sys_le16_to_cpu(data->end_handle);
   1d3ee:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   1d3f2:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   1d3f6:	2e00      	cmp	r6, #0
   1d3f8:	d0d4      	beq.n	1d3a4 <gatt_read_group_rsp+0x3c>
   1d3fa:	42b3      	cmp	r3, r6
   1d3fc:	d8d2      	bhi.n	1d3a4 <gatt_read_group_rsp+0x3c>
		switch (u.uuid.type) {
   1d3fe:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1d402:	b323      	cbz	r3, 1d44e <gatt_read_group_rsp+0xe6>
   1d404:	2b02      	cmp	r3, #2
   1d406:	d02a      	beq.n	1d45e <gatt_read_group_rsp+0xf6>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1d408:	f04f 0300 	mov.w	r3, #0
   1d40c:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1d410:	7c2b      	ldrb	r3, [r5, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d412:	462a      	mov	r2, r5
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1d414:	2b00      	cmp	r3, #0
   1d416:	f642 0301 	movw	r3, #10241	; 0x2801
   1d41a:	bf08      	it	eq
   1d41c:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   1d420:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   1d424:	ab04      	add	r3, sp, #16
   1d426:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   1d428:	ab01      	add	r3, sp, #4
   1d42a:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   1d42c:	ab02      	add	r3, sp, #8
   1d42e:	930c      	str	r3, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d430:	4648      	mov	r0, r9
   1d432:	686b      	ldr	r3, [r5, #4]
		value.end_handle = end_handle;
   1d434:	f8ad b00c 	strh.w	fp, [sp, #12]
		attr.handle = start_handle;
   1d438:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d43c:	a909      	add	r1, sp, #36	; 0x24
   1d43e:	4798      	blx	r3
   1d440:	2800      	cmp	r0, #0
   1d442:	d09d      	beq.n	1d380 <gatt_read_group_rsp+0x18>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1d444:	783a      	ldrb	r2, [r7, #0]
   1d446:	1aa4      	subs	r4, r4, r2
   1d448:	b2a4      	uxth	r4, r4
   1d44a:	4490      	add	r8, r2
   1d44c:	e7b7      	b.n	1d3be <gatt_read_group_rsp+0x56>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   1d44e:	2202      	movs	r2, #2
   1d450:	f108 0104 	add.w	r1, r8, #4
   1d454:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   1d458:	f00b f89b 	bl	28592 <memcpy>
			break;
   1d45c:	e7d4      	b.n	1d408 <gatt_read_group_rsp+0xa0>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   1d45e:	2210      	movs	r2, #16
   1d460:	f108 0104 	add.w	r1, r8, #4
   1d464:	f10d 0011 	add.w	r0, sp, #17
   1d468:	e7f6      	b.n	1d458 <gatt_read_group_rsp+0xf0>
   1d46a:	bf00      	nop
   1d46c:	0002c00c 	.word	0x0002c00c
   1d470:	0002bfe4 	.word	0x0002bfe4
   1d474:	00030173 	.word	0x00030173

0001d478 <gatt_read_type_rsp>:
{
   1d478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d47c:	b093      	sub	sp, #76	; 0x4c
   1d47e:	4617      	mov	r7, r2
   1d480:	4680      	mov	r8, r0
	if (err) {
   1d482:	460a      	mov	r2, r1
{
   1d484:	9d1c      	ldr	r5, [sp, #112]	; 0x70
	if (err) {
   1d486:	b121      	cbz	r1, 1d492 <gatt_read_type_rsp+0x1a>
		params->func(conn, NULL, params);
   1d488:	462a      	mov	r2, r5
   1d48a:	2100      	movs	r1, #0
   1d48c:	686b      	ldr	r3, [r5, #4]
	params->func(conn, NULL, params);
   1d48e:	4798      	blx	r3
	if (!handle) {
   1d490:	e05c      	b.n	1d54c <gatt_read_type_rsp+0xd4>
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   1d492:	7c28      	ldrb	r0, [r5, #16]
   1d494:	2802      	cmp	r0, #2
   1d496:	d175      	bne.n	1d584 <gatt_read_type_rsp+0x10c>
	switch (rsp->len) {
   1d498:	7839      	ldrb	r1, [r7, #0]
   1d49a:	2906      	cmp	r1, #6
   1d49c:	d018      	beq.n	1d4d0 <gatt_read_type_rsp+0x58>
   1d49e:	2908      	cmp	r1, #8
   1d4a0:	d177      	bne.n	1d592 <gatt_read_type_rsp+0x11a>
		u.uuid.type = BT_UUID_TYPE_16;
   1d4a2:	f88d 2020 	strb.w	r2, [sp, #32]
	uint16_t handle = 0U;
   1d4a6:	2600      	movs	r6, #0
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d4a8:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d4aa:	1e5c      	subs	r4, r3, #1
   1d4ac:	b2a4      	uxth	r4, r4
   1d4ae:	f107 0901 	add.w	r9, r7, #1
			value.uuid = &u.uuid;
   1d4b2:	f10d 0a20 	add.w	sl, sp, #32
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d4b6:	783b      	ldrb	r3, [r7, #0]
   1d4b8:	42a3      	cmp	r3, r4
   1d4ba:	d90c      	bls.n	1d4d6 <gatt_read_type_rsp+0x5e>
	if (length == 0U && handle) {
   1d4bc:	2c00      	cmp	r4, #0
   1d4be:	d172      	bne.n	1d5a6 <gatt_read_type_rsp+0x12e>
   1d4c0:	2e00      	cmp	r6, #0
   1d4c2:	d070      	beq.n	1d5a6 <gatt_read_type_rsp+0x12e>
	gatt_discover_next(conn, handle, params);
   1d4c4:	462a      	mov	r2, r5
   1d4c6:	4631      	mov	r1, r6
   1d4c8:	4640      	mov	r0, r8
   1d4ca:	f00c fc08 	bl	29cde <gatt_discover_next>
   1d4ce:	e03d      	b.n	1d54c <gatt_read_type_rsp+0xd4>
		u.uuid.type = BT_UUID_TYPE_128;
   1d4d0:	f88d 0020 	strb.w	r0, [sp, #32]
		break;
   1d4d4:	e7e7      	b.n	1d4a6 <gatt_read_type_rsp+0x2e>
		handle = sys_le16_to_cpu(data->handle);
   1d4d6:	f8b9 3000 	ldrh.w	r3, [r9]
   1d4da:	b29e      	uxth	r6, r3
		if (!handle) {
   1d4dc:	2e00      	cmp	r6, #0
   1d4de:	d062      	beq.n	1d5a6 <gatt_read_type_rsp+0x12e>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   1d4e0:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   1d4e4:	f8ad 201c 	strh.w	r2, [sp, #28]
   1d4e8:	b291      	uxth	r1, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   1d4ea:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   1d4ee:	b290      	uxth	r0, r2
   1d4f0:	f8ad 201e 	strh.w	r2, [sp, #30]
		switch (u.uuid.type) {
   1d4f4:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1d4f8:	b172      	cbz	r2, 1d518 <gatt_read_type_rsp+0xa0>
   1d4fa:	2a02      	cmp	r2, #2
   1d4fc:	d017      	beq.n	1d52e <gatt_read_type_rsp+0xb6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1d4fe:	6829      	ldr	r1, [r5, #0]
   1d500:	b339      	cbz	r1, 1d552 <gatt_read_type_rsp+0xda>
   1d502:	4650      	mov	r0, sl
   1d504:	9303      	str	r3, [sp, #12]
   1d506:	f00b f8df 	bl	286c8 <bt_uuid_cmp>
   1d50a:	9b03      	ldr	r3, [sp, #12]
   1d50c:	b308      	cbz	r0, 1d552 <gatt_read_type_rsp+0xda>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1d50e:	783a      	ldrb	r2, [r7, #0]
   1d510:	1aa4      	subs	r4, r4, r2
   1d512:	b2a4      	uxth	r4, r4
   1d514:	4491      	add	r9, r2
   1d516:	e7ce      	b.n	1d4b6 <gatt_read_type_rsp+0x3e>
			value.uuid = &u.uuid;
   1d518:	f8cd a018 	str.w	sl, [sp, #24]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   1d51c:	f899 2006 	ldrb.w	r2, [r9, #6]
   1d520:	f899 1007 	ldrb.w	r1, [r9, #7]
   1d524:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1d528:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
			break;
   1d52c:	e7e7      	b.n	1d4fe <gatt_read_type_rsp+0x86>
	return gatt_req_send(conn, read_included_uuid_cb, params,
   1d52e:	230a      	movs	r3, #10
			params->_included.attr_handle = handle;
   1d530:	812e      	strh	r6, [r5, #8]
			params->_included.start_handle = value.start_handle;
   1d532:	8169      	strh	r1, [r5, #10]
			params->_included.end_handle = value.end_handle;
   1d534:	81a8      	strh	r0, [r5, #12]
	return gatt_req_send(conn, read_included_uuid_cb, params,
   1d536:	497c      	ldr	r1, [pc, #496]	; (1d728 <gatt_read_type_rsp+0x2b0>)
   1d538:	9201      	str	r2, [sp, #4]
   1d53a:	9300      	str	r3, [sp, #0]
   1d53c:	462a      	mov	r2, r5
   1d53e:	4640      	mov	r0, r8
   1d540:	4b7a      	ldr	r3, [pc, #488]	; (1d72c <gatt_read_type_rsp+0x2b4>)
   1d542:	f00c fb0e 	bl	29b62 <gatt_req_send>
			return read_included_uuid(conn, params);
   1d546:	b286      	uxth	r6, r0
	if (!handle) {
   1d548:	2e00      	cmp	r6, #0
   1d54a:	d1bb      	bne.n	1d4c4 <gatt_read_type_rsp+0x4c>
}
   1d54c:	b013      	add	sp, #76	; 0x4c
   1d54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d552:	f642 0202 	movw	r2, #10242	; 0x2802
   1d556:	f8ad 2016 	strh.w	r2, [sp, #22]
   1d55a:	aa05      	add	r2, sp, #20
   1d55c:	e9cd 2b0d 	strd	r2, fp, [sp, #52]	; 0x34
   1d560:	aa06      	add	r2, sp, #24
   1d562:	9210      	str	r2, [sp, #64]	; 0x40
		attr.handle = handle;
   1d564:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d568:	462a      	mov	r2, r5
   1d56a:	4640      	mov	r0, r8
   1d56c:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d56e:	f88d b014 	strb.w	fp, [sp, #20]
   1d572:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   1d576:	f88d b046 	strb.w	fp, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d57a:	a90d      	add	r1, sp, #52	; 0x34
   1d57c:	4798      	blx	r3
   1d57e:	2800      	cmp	r0, #0
   1d580:	d1c5      	bne.n	1d50e <gatt_read_type_rsp+0x96>
   1d582:	e7e3      	b.n	1d54c <gatt_read_type_rsp+0xd4>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
   1d584:	2803      	cmp	r0, #3
   1d586:	d16b      	bne.n	1d660 <gatt_read_type_rsp+0x1e8>
	switch (rsp->len) {
   1d588:	7839      	ldrb	r1, [r7, #0]
   1d58a:	2907      	cmp	r1, #7
   1d58c:	d011      	beq.n	1d5b2 <gatt_read_type_rsp+0x13a>
   1d58e:	2915      	cmp	r1, #21
   1d590:	d00e      	beq.n	1d5b0 <gatt_read_type_rsp+0x138>
   1d592:	4a67      	ldr	r2, [pc, #412]	; (1d730 <gatt_read_type_rsp+0x2b8>)
   1d594:	4b67      	ldr	r3, [pc, #412]	; (1d734 <gatt_read_type_rsp+0x2bc>)
		BT_ERR("Invalid data len %u", rsp->len);
   1d596:	4868      	ldr	r0, [pc, #416]	; (1d738 <gatt_read_type_rsp+0x2c0>)
   1d598:	1ad2      	subs	r2, r2, r3
   1d59a:	08d2      	lsrs	r2, r2, #3
   1d59c:	0192      	lsls	r2, r2, #6
   1d59e:	f042 0201 	orr.w	r2, r2, #1
   1d5a2:	f009 fbd2 	bl	26d4a <log_1>
	params->func(conn, NULL, params);
   1d5a6:	462a      	mov	r2, r5
   1d5a8:	2100      	movs	r1, #0
   1d5aa:	4640      	mov	r0, r8
   1d5ac:	686b      	ldr	r3, [r5, #4]
   1d5ae:	e76e      	b.n	1d48e <gatt_read_type_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
   1d5b0:	2202      	movs	r2, #2
	uint16_t handle = 0U;
   1d5b2:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d5b4:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_128;
   1d5b6:	f88d 2020 	strb.w	r2, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d5ba:	b2a4      	uxth	r4, r4
   1d5bc:	f107 0901 	add.w	r9, r7, #1
   1d5c0:	f10d 0a20 	add.w	sl, sp, #32
   1d5c4:	783b      	ldrb	r3, [r7, #0]
   1d5c6:	42a3      	cmp	r3, r4
   1d5c8:	f63f af78 	bhi.w	1d4bc <gatt_read_type_rsp+0x44>
		handle = sys_le16_to_cpu(data->handle);
   1d5cc:	f8b9 b000 	ldrh.w	fp, [r9]
   1d5d0:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   1d5d4:	2e00      	cmp	r6, #0
   1d5d6:	d0e6      	beq.n	1d5a6 <gatt_read_type_rsp+0x12e>
		switch (u.uuid.type) {
   1d5d8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1d5dc:	b163      	cbz	r3, 1d5f8 <gatt_read_type_rsp+0x180>
   1d5de:	2b02      	cmp	r3, #2
   1d5e0:	d013      	beq.n	1d60a <gatt_read_type_rsp+0x192>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1d5e2:	6829      	ldr	r1, [r5, #0]
   1d5e4:	b1c9      	cbz	r1, 1d61a <gatt_read_type_rsp+0x1a2>
   1d5e6:	4650      	mov	r0, sl
   1d5e8:	f00b f86e 	bl	286c8 <bt_uuid_cmp>
   1d5ec:	b1a8      	cbz	r0, 1d61a <gatt_read_type_rsp+0x1a2>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1d5ee:	783a      	ldrb	r2, [r7, #0]
   1d5f0:	1aa4      	subs	r4, r4, r2
   1d5f2:	b2a4      	uxth	r4, r4
   1d5f4:	4491      	add	r9, r2
   1d5f6:	e7e5      	b.n	1d5c4 <gatt_read_type_rsp+0x14c>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   1d5f8:	f899 3005 	ldrb.w	r3, [r9, #5]
   1d5fc:	f899 2006 	ldrb.w	r2, [r9, #6]
   1d600:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d604:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			break;
   1d608:	e7eb      	b.n	1d5e2 <gatt_read_type_rsp+0x16a>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   1d60a:	2210      	movs	r2, #16
   1d60c:	f109 0105 	add.w	r1, r9, #5
   1d610:	f10d 0021 	add.w	r0, sp, #33	; 0x21
   1d614:	f00a ffbd 	bl	28592 <memcpy>
			break;
   1d618:	e7e3      	b.n	1d5e2 <gatt_read_type_rsp+0x16a>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1d61a:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   1d61e:	f899 3002 	ldrb.w	r3, [r9, #2]
   1d622:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d626:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1d62a:	f88d 301e 	strb.w	r3, [sp, #30]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d62e:	2300      	movs	r3, #0
   1d630:	f8ad 2016 	strh.w	r2, [sp, #22]
   1d634:	aa05      	add	r2, sp, #20
   1d636:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
   1d63a:	aa06      	add	r2, sp, #24
   1d63c:	f88d 3014 	strb.w	r3, [sp, #20]
   1d640:	930f      	str	r3, [sp, #60]	; 0x3c
   1d642:	9210      	str	r2, [sp, #64]	; 0x40
   1d644:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d648:	462a      	mov	r2, r5
   1d64a:	4640      	mov	r0, r8
   1d64c:	686b      	ldr	r3, [r5, #4]
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1d64e:	f8cd a018 	str.w	sl, [sp, #24]
		attr.handle = handle;
   1d652:	f8ad b044 	strh.w	fp, [sp, #68]	; 0x44
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d656:	a90d      	add	r1, sp, #52	; 0x34
   1d658:	4798      	blx	r3
   1d65a:	2800      	cmp	r0, #0
   1d65c:	d1c7      	bne.n	1d5ee <gatt_read_type_rsp+0x176>
   1d65e:	e775      	b.n	1d54c <gatt_read_type_rsp+0xd4>
	if (params->uuid->type != BT_UUID_TYPE_16) {
   1d660:	682a      	ldr	r2, [r5, #0]
   1d662:	7816      	ldrb	r6, [r2, #0]
   1d664:	2e00      	cmp	r6, #0
   1d666:	d19e      	bne.n	1d5a6 <gatt_read_type_rsp+0x12e>
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d668:	46b2      	mov	sl, r6
	uuid_val = BT_UUID_16(params->uuid)->val;
   1d66a:	8852      	ldrh	r2, [r2, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d66c:	1e5c      	subs	r4, r3, #1
   1d66e:	b2a4      	uxth	r4, r4
   1d670:	f107 0901 	add.w	r9, r7, #1
   1d674:	f5a2 5b24 	sub.w	fp, r2, #10496	; 0x2900
   1d678:	783b      	ldrb	r3, [r7, #0]
   1d67a:	42a3      	cmp	r3, r4
   1d67c:	f63f af1e 	bhi.w	1d4bc <gatt_read_type_rsp+0x44>
		handle = sys_le16_to_cpu(data->handle);
   1d680:	f8b9 2000 	ldrh.w	r2, [r9]
   1d684:	b296      	uxth	r6, r2
		if (!handle) {
   1d686:	2e00      	cmp	r6, #0
   1d688:	d08d      	beq.n	1d5a6 <gatt_read_type_rsp+0x12e>
		switch (uuid_val) {
   1d68a:	f1bb 0f04 	cmp.w	fp, #4
   1d68e:	d88a      	bhi.n	1d5a6 <gatt_read_type_rsp+0x12e>
   1d690:	a301      	add	r3, pc, #4	; (adr r3, 1d698 <gatt_read_type_rsp+0x220>)
   1d692:	f853 f02b 	ldr.w	pc, [r3, fp, lsl #2]
   1d696:	bf00      	nop
   1d698:	0001d6ad 	.word	0x0001d6ad
   1d69c:	0001d5a7 	.word	0x0001d5a7
   1d6a0:	0001d6ad 	.word	0x0001d6ad
   1d6a4:	0001d6ad 	.word	0x0001d6ad
   1d6a8:	0001d6ed 	.word	0x0001d6ed
	return ((uint16_t)src[1] << 8) | src[0];
   1d6ac:	f899 1003 	ldrb.w	r1, [r9, #3]
   1d6b0:	f899 3002 	ldrb.w	r3, [r9, #2]
   1d6b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			value.scc.flags = sys_get_le16(data->value);
   1d6b8:	f8ad 3020 	strh.w	r3, [sp, #32]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d6bc:	682b      	ldr	r3, [r5, #0]
		attr.handle = handle;
   1d6be:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d6c2:	e9cd 3a0d 	strd	r3, sl, [sp, #52]	; 0x34
   1d6c6:	ab08      	add	r3, sp, #32
   1d6c8:	9310      	str	r3, [sp, #64]	; 0x40
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d6ca:	462a      	mov	r2, r5
   1d6cc:	4640      	mov	r0, r8
   1d6ce:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d6d0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   1d6d4:	f88d a046 	strb.w	sl, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d6d8:	a90d      	add	r1, sp, #52	; 0x34
   1d6da:	4798      	blx	r3
   1d6dc:	2800      	cmp	r0, #0
   1d6de:	f43f af35 	beq.w	1d54c <gatt_read_type_rsp+0xd4>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1d6e2:	783a      	ldrb	r2, [r7, #0]
   1d6e4:	1aa4      	subs	r4, r4, r2
   1d6e6:	b2a4      	uxth	r4, r4
   1d6e8:	4491      	add	r9, r2
   1d6ea:	e7c5      	b.n	1d678 <gatt_read_type_rsp+0x200>
			value.cpf.format = cpf->format;
   1d6ec:	f899 3002 	ldrb.w	r3, [r9, #2]
   1d6f0:	f88d 3020 	strb.w	r3, [sp, #32]
			value.cpf.exponent = cpf->exponent;
   1d6f4:	f899 3003 	ldrb.w	r3, [r9, #3]
   1d6f8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
   1d6fc:	f899 1005 	ldrb.w	r1, [r9, #5]
   1d700:	f899 3004 	ldrb.w	r3, [r9, #4]
   1d704:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1d708:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			value.cpf.name_space = cpf->name_space;
   1d70c:	f899 3006 	ldrb.w	r3, [r9, #6]
   1d710:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			value.cpf.description = sys_le16_to_cpu(cpf->description);
   1d714:	f899 3007 	ldrb.w	r3, [r9, #7]
   1d718:	f899 1008 	ldrb.w	r1, [r9, #8]
   1d71c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1d720:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
			break;
   1d724:	e7ca      	b.n	1d6bc <gatt_read_type_rsp+0x244>
   1d726:	bf00      	nop
   1d728:	0001d73d 	.word	0x0001d73d
   1d72c:	000297db 	.word	0x000297db
   1d730:	0002c00c 	.word	0x0002c00c
   1d734:	0002bfe4 	.word	0x0002bfe4
   1d738:	00030173 	.word	0x00030173

0001d73c <read_included_uuid_cb>:
{
   1d73c:	b570      	push	{r4, r5, r6, lr}
	if (length != 16U) {
   1d73e:	2b10      	cmp	r3, #16
{
   1d740:	b08e      	sub	sp, #56	; 0x38
   1d742:	4605      	mov	r5, r0
   1d744:	4611      	mov	r1, r2
   1d746:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
   1d748:	d011      	beq.n	1d76e <read_included_uuid_cb+0x32>
   1d74a:	4924      	ldr	r1, [pc, #144]	; (1d7dc <read_included_uuid_cb+0xa0>)
   1d74c:	4a24      	ldr	r2, [pc, #144]	; (1d7e0 <read_included_uuid_cb+0xa4>)
		BT_ERR("Invalid data len %u", length);
   1d74e:	4825      	ldr	r0, [pc, #148]	; (1d7e4 <read_included_uuid_cb+0xa8>)
   1d750:	1a52      	subs	r2, r2, r1
   1d752:	08d2      	lsrs	r2, r2, #3
   1d754:	0192      	lsls	r2, r2, #6
   1d756:	4619      	mov	r1, r3
   1d758:	f042 0201 	orr.w	r2, r2, #1
   1d75c:	f009 faf5 	bl	26d4a <log_1>
		params->func(conn, NULL, params);
   1d760:	4622      	mov	r2, r4
   1d762:	2100      	movs	r1, #0
   1d764:	4628      	mov	r0, r5
   1d766:	6863      	ldr	r3, [r4, #4]
   1d768:	4798      	blx	r3
}
   1d76a:	b00e      	add	sp, #56	; 0x38
   1d76c:	bd70      	pop	{r4, r5, r6, pc}
	value.start_handle = params->_included.start_handle;
   1d76e:	8962      	ldrh	r2, [r4, #10]
	value.uuid = &u.uuid;
   1d770:	ae04      	add	r6, sp, #16
	value.start_handle = params->_included.start_handle;
   1d772:	f8ad 200c 	strh.w	r2, [sp, #12]
	value.end_handle = params->_included.end_handle;
   1d776:	89a2      	ldrh	r2, [r4, #12]
	memcpy(u.u128.val, pdu, length);
   1d778:	f10d 0011 	add.w	r0, sp, #17
	value.end_handle = params->_included.end_handle;
   1d77c:	f8ad 200e 	strh.w	r2, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
   1d780:	2202      	movs	r2, #2
   1d782:	f88d 2010 	strb.w	r2, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   1d786:	461a      	mov	r2, r3
	value.uuid = &u.uuid;
   1d788:	9602      	str	r6, [sp, #8]
	memcpy(u.u128.val, pdu, length);
   1d78a:	f00a ff02 	bl	28592 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1d78e:	6821      	ldr	r1, [r4, #0]
   1d790:	b9f1      	cbnz	r1, 1d7d0 <read_included_uuid_cb+0x94>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d792:	f642 0202 	movw	r2, #10242	; 0x2802
   1d796:	2300      	movs	r3, #0
   1d798:	f8ad 2006 	strh.w	r2, [sp, #6]
   1d79c:	aa01      	add	r2, sp, #4
   1d79e:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   1d7a2:	f88d 3004 	strb.w	r3, [sp, #4]
   1d7a6:	930b      	str	r3, [sp, #44]	; 0x2c
   1d7a8:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   1d7ac:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d7ae:	aa02      	add	r2, sp, #8
   1d7b0:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   1d7b2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d7b6:	4622      	mov	r2, r4
   1d7b8:	4628      	mov	r0, r5
   1d7ba:	6863      	ldr	r3, [r4, #4]
   1d7bc:	a909      	add	r1, sp, #36	; 0x24
   1d7be:	4798      	blx	r3
   1d7c0:	2800      	cmp	r0, #0
   1d7c2:	d0d2      	beq.n	1d76a <read_included_uuid_cb+0x2e>
	gatt_discover_next(conn, params->start_handle, params);
   1d7c4:	4622      	mov	r2, r4
   1d7c6:	4628      	mov	r0, r5
   1d7c8:	8921      	ldrh	r1, [r4, #8]
   1d7ca:	f00c fa88 	bl	29cde <gatt_discover_next>
	return;
   1d7ce:	e7cc      	b.n	1d76a <read_included_uuid_cb+0x2e>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1d7d0:	4630      	mov	r0, r6
   1d7d2:	f00a ff79 	bl	286c8 <bt_uuid_cmp>
   1d7d6:	2800      	cmp	r0, #0
   1d7d8:	d0db      	beq.n	1d792 <read_included_uuid_cb+0x56>
   1d7da:	e7f3      	b.n	1d7c4 <read_included_uuid_cb+0x88>
   1d7dc:	0002bfe4 	.word	0x0002bfe4
   1d7e0:	0002c00c 	.word	0x0002c00c
   1d7e4:	00030173 	.word	0x00030173

0001d7e8 <gatt_find_info_rsp>:
{
   1d7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d7ec:	b08f      	sub	sp, #60	; 0x3c
   1d7ee:	4680      	mov	r8, r0
   1d7f0:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   1d7f2:	4608      	mov	r0, r1
   1d7f4:	b971      	cbnz	r1, 1d814 <gatt_find_info_rsp+0x2c>
	switch (rsp->format) {
   1d7f6:	7811      	ldrb	r1, [r2, #0]
   1d7f8:	2901      	cmp	r1, #1
   1d7fa:	d011      	beq.n	1d820 <gatt_find_info_rsp+0x38>
   1d7fc:	2902      	cmp	r1, #2
   1d7fe:	d028      	beq.n	1d852 <gatt_find_info_rsp+0x6a>
   1d800:	4a4f      	ldr	r2, [pc, #316]	; (1d940 <gatt_find_info_rsp+0x158>)
   1d802:	4b50      	ldr	r3, [pc, #320]	; (1d944 <gatt_find_info_rsp+0x15c>)
		BT_ERR("Invalid format %u", rsp->format);
   1d804:	4850      	ldr	r0, [pc, #320]	; (1d948 <gatt_find_info_rsp+0x160>)
   1d806:	1ad2      	subs	r2, r2, r3
   1d808:	08d2      	lsrs	r2, r2, #3
   1d80a:	0192      	lsls	r2, r2, #6
   1d80c:	f042 0201 	orr.w	r2, r2, #1
   1d810:	f009 fa9b 	bl	26d4a <log_1>
	params->func(conn, NULL, params);
   1d814:	4632      	mov	r2, r6
   1d816:	2100      	movs	r1, #0
   1d818:	4640      	mov	r0, r8
   1d81a:	6873      	ldr	r3, [r6, #4]
   1d81c:	4798      	blx	r3
   1d81e:	e08b      	b.n	1d938 <gatt_find_info_rsp+0x150>
		len = sizeof(*info.i16);
   1d820:	f04f 0a04 	mov.w	sl, #4
		u.uuid.type = BT_UUID_TYPE_16;
   1d824:	f88d 0010 	strb.w	r0, [sp, #16]
	length--;
   1d828:	3b01      	subs	r3, #1
   1d82a:	b29b      	uxth	r3, r3
	if (length < len) {
   1d82c:	4553      	cmp	r3, sl
   1d82e:	d3f1      	bcc.n	1d814 <gatt_find_info_rsp+0x2c>
	bool skip = false;
   1d830:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   1d834:	fbb3 f3fa 	udiv	r3, r3, sl
	uint16_t handle = 0U;
   1d838:	46cb      	mov	fp, r9
			skip = false;
   1d83a:	464d      	mov	r5, r9
	for (i = length / len, pdu = rsp->info; i != 0;
   1d83c:	9300      	str	r3, [sp, #0]
   1d83e:	1c54      	adds	r4, r2, #1
   1d840:	af04      	add	r7, sp, #16
   1d842:	9b00      	ldr	r3, [sp, #0]
   1d844:	b953      	cbnz	r3, 1d85c <gatt_find_info_rsp+0x74>
	gatt_discover_next(conn, handle, params);
   1d846:	4632      	mov	r2, r6
   1d848:	4659      	mov	r1, fp
   1d84a:	4640      	mov	r0, r8
   1d84c:	f00c fa47 	bl	29cde <gatt_discover_next>
	return;
   1d850:	e072      	b.n	1d938 <gatt_find_info_rsp+0x150>
		len = sizeof(*info.i128);
   1d852:	f04f 0a12 	mov.w	sl, #18
		u.uuid.type = BT_UUID_TYPE_128;
   1d856:	f88d 1010 	strb.w	r1, [sp, #16]
		break;
   1d85a:	e7e5      	b.n	1d828 <gatt_find_info_rsp+0x40>
		handle = sys_le16_to_cpu(info.i16->handle);
   1d85c:	8823      	ldrh	r3, [r4, #0]
   1d85e:	f8ad 3004 	strh.w	r3, [sp, #4]
   1d862:	fa1f fb83 	uxth.w	fp, r3
		if (skip) {
   1d866:	f1b9 0f00 	cmp.w	r9, #0
   1d86a:	d151      	bne.n	1d910 <gatt_find_info_rsp+0x128>
		switch (u.uuid.type) {
   1d86c:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1d870:	2b00      	cmp	r3, #0
   1d872:	d03a      	beq.n	1d8ea <gatt_find_info_rsp+0x102>
   1d874:	2b02      	cmp	r3, #2
   1d876:	d03f      	beq.n	1d8f8 <gatt_find_info_rsp+0x110>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1d878:	6831      	ldr	r1, [r6, #0]
   1d87a:	2900      	cmp	r1, #0
   1d87c:	d143      	bne.n	1d906 <gatt_find_info_rsp+0x11e>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   1d87e:	7c33      	ldrb	r3, [r6, #16]
   1d880:	2b04      	cmp	r3, #4
   1d882:	d148      	bne.n	1d916 <gatt_find_info_rsp+0x12e>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   1d884:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1d888:	4638      	mov	r0, r7
   1d88a:	a902      	add	r1, sp, #8
   1d88c:	f88d 5008 	strb.w	r5, [sp, #8]
   1d890:	f8ad 300a 	strh.w	r3, [sp, #10]
   1d894:	f00a ff18 	bl	286c8 <bt_uuid_cmp>
   1d898:	b310      	cbz	r0, 1d8e0 <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   1d89a:	f642 0301 	movw	r3, #10241	; 0x2801
   1d89e:	4638      	mov	r0, r7
   1d8a0:	a903      	add	r1, sp, #12
   1d8a2:	f88d 500c 	strb.w	r5, [sp, #12]
   1d8a6:	f8ad 300e 	strh.w	r3, [sp, #14]
   1d8aa:	f00a ff0d 	bl	286c8 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   1d8ae:	b1b8      	cbz	r0, 1d8e0 <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   1d8b0:	f642 0302 	movw	r3, #10242	; 0x2802
   1d8b4:	4638      	mov	r0, r7
   1d8b6:	a909      	add	r1, sp, #36	; 0x24
   1d8b8:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   1d8bc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   1d8c0:	f00a ff02 	bl	286c8 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   1d8c4:	b160      	cbz	r0, 1d8e0 <gatt_find_info_rsp+0xf8>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   1d8c6:	f642 0303 	movw	r3, #10243	; 0x2803
   1d8ca:	4638      	mov	r0, r7
   1d8cc:	a909      	add	r1, sp, #36	; 0x24
   1d8ce:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   1d8d2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   1d8d6:	f00a fef7 	bl	286c8 <bt_uuid_cmp>
   1d8da:	b9e0      	cbnz	r0, 1d916 <gatt_find_info_rsp+0x12e>
				skip = true;
   1d8dc:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   1d8e0:	9b00      	ldr	r3, [sp, #0]
   1d8e2:	4454      	add	r4, sl
   1d8e4:	3b01      	subs	r3, #1
   1d8e6:	9300      	str	r3, [sp, #0]
   1d8e8:	e7ab      	b.n	1d842 <gatt_find_info_rsp+0x5a>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   1d8ea:	78a3      	ldrb	r3, [r4, #2]
   1d8ec:	78e2      	ldrb	r2, [r4, #3]
   1d8ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d8f2:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   1d8f6:	e7bf      	b.n	1d878 <gatt_find_info_rsp+0x90>
			memcpy(u.u128.val, info.i128->uuid, 16);
   1d8f8:	2210      	movs	r2, #16
   1d8fa:	1ca1      	adds	r1, r4, #2
   1d8fc:	f10d 0011 	add.w	r0, sp, #17
   1d900:	f00a fe47 	bl	28592 <memcpy>
			break;
   1d904:	e7b8      	b.n	1d878 <gatt_find_info_rsp+0x90>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1d906:	4638      	mov	r0, r7
   1d908:	f00a fede 	bl	286c8 <bt_uuid_cmp>
   1d90c:	2800      	cmp	r0, #0
   1d90e:	d0b6      	beq.n	1d87e <gatt_find_info_rsp+0x96>
			skip = false;
   1d910:	f04f 0900 	mov.w	r9, #0
   1d914:	e7e4      	b.n	1d8e0 <gatt_find_info_rsp+0xf8>
		attr.handle = handle;
   1d916:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d91a:	4632      	mov	r2, r6
		attr.handle = handle;
   1d91c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d920:	4640      	mov	r0, r8
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d922:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   1d926:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d92a:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d92c:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d930:	a909      	add	r1, sp, #36	; 0x24
   1d932:	4798      	blx	r3
   1d934:	2800      	cmp	r0, #0
   1d936:	d1d3      	bne.n	1d8e0 <gatt_find_info_rsp+0xf8>
}
   1d938:	b00f      	add	sp, #60	; 0x3c
   1d93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d93e:	bf00      	nop
   1d940:	0002c00c 	.word	0x0002c00c
   1d944:	0002bfe4 	.word	0x0002bfe4
   1d948:	00030187 	.word	0x00030187

0001d94c <bt_gatt_subscribe>:
{
   1d94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d94e:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
   1d950:	4605      	mov	r5, r0
   1d952:	b970      	cbnz	r0, 1d972 <bt_gatt_subscribe+0x26>
   1d954:	494b      	ldr	r1, [pc, #300]	; (1da84 <bt_gatt_subscribe+0x138>)
   1d956:	f241 1355 	movw	r3, #4437	; 0x1155
   1d95a:	4a4b      	ldr	r2, [pc, #300]	; (1da88 <bt_gatt_subscribe+0x13c>)
   1d95c:	484b      	ldr	r0, [pc, #300]	; (1da8c <bt_gatt_subscribe+0x140>)
   1d95e:	f008 fedd 	bl	2671c <printk>
   1d962:	484b      	ldr	r0, [pc, #300]	; (1da90 <bt_gatt_subscribe+0x144>)
   1d964:	f008 feda 	bl	2671c <printk>
   1d968:	f241 1155 	movw	r1, #4437	; 0x1155
   1d96c:	4846      	ldr	r0, [pc, #280]	; (1da88 <bt_gatt_subscribe+0x13c>)
   1d96e:	f009 f97a 	bl	26c66 <assert_post_action>
	__ASSERT(params && params->notify,  "invalid parameters\n");
   1d972:	b10e      	cbz	r6, 1d978 <bt_gatt_subscribe+0x2c>
   1d974:	6833      	ldr	r3, [r6, #0]
   1d976:	b973      	cbnz	r3, 1d996 <bt_gatt_subscribe+0x4a>
   1d978:	4946      	ldr	r1, [pc, #280]	; (1da94 <bt_gatt_subscribe+0x148>)
   1d97a:	f241 1356 	movw	r3, #4438	; 0x1156
   1d97e:	4a42      	ldr	r2, [pc, #264]	; (1da88 <bt_gatt_subscribe+0x13c>)
   1d980:	4842      	ldr	r0, [pc, #264]	; (1da8c <bt_gatt_subscribe+0x140>)
   1d982:	f008 fecb 	bl	2671c <printk>
   1d986:	4842      	ldr	r0, [pc, #264]	; (1da90 <bt_gatt_subscribe+0x144>)
   1d988:	f008 fec8 	bl	2671c <printk>
   1d98c:	f241 1156 	movw	r1, #4438	; 0x1156
   1d990:	483d      	ldr	r0, [pc, #244]	; (1da88 <bt_gatt_subscribe+0x13c>)
   1d992:	f009 f968 	bl	26c66 <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
   1d996:	89b3      	ldrh	r3, [r6, #12]
   1d998:	b973      	cbnz	r3, 1d9b8 <bt_gatt_subscribe+0x6c>
   1d99a:	493f      	ldr	r1, [pc, #252]	; (1da98 <bt_gatt_subscribe+0x14c>)
   1d99c:	f241 1357 	movw	r3, #4439	; 0x1157
   1d9a0:	4a39      	ldr	r2, [pc, #228]	; (1da88 <bt_gatt_subscribe+0x13c>)
   1d9a2:	483a      	ldr	r0, [pc, #232]	; (1da8c <bt_gatt_subscribe+0x140>)
   1d9a4:	f008 feba 	bl	2671c <printk>
   1d9a8:	4839      	ldr	r0, [pc, #228]	; (1da90 <bt_gatt_subscribe+0x144>)
   1d9aa:	f008 feb7 	bl	2671c <printk>
   1d9ae:	f241 1157 	movw	r1, #4439	; 0x1157
   1d9b2:	4835      	ldr	r0, [pc, #212]	; (1da88 <bt_gatt_subscribe+0x13c>)
   1d9b4:	f009 f957 	bl	26c66 <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   1d9b8:	8973      	ldrh	r3, [r6, #10]
   1d9ba:	b973      	cbnz	r3, 1d9da <bt_gatt_subscribe+0x8e>
   1d9bc:	4937      	ldr	r1, [pc, #220]	; (1da9c <bt_gatt_subscribe+0x150>)
   1d9be:	f241 135d 	movw	r3, #4445	; 0x115d
   1d9c2:	4a31      	ldr	r2, [pc, #196]	; (1da88 <bt_gatt_subscribe+0x13c>)
   1d9c4:	4831      	ldr	r0, [pc, #196]	; (1da8c <bt_gatt_subscribe+0x140>)
   1d9c6:	f008 fea9 	bl	2671c <printk>
   1d9ca:	4831      	ldr	r0, [pc, #196]	; (1da90 <bt_gatt_subscribe+0x144>)
   1d9cc:	f008 fea6 	bl	2671c <printk>
   1d9d0:	f241 115d 	movw	r1, #4445	; 0x115d
   1d9d4:	482c      	ldr	r0, [pc, #176]	; (1da88 <bt_gatt_subscribe+0x13c>)
   1d9d6:	f009 f946 	bl	26c66 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1d9da:	7b6b      	ldrb	r3, [r5, #13]
   1d9dc:	2b07      	cmp	r3, #7
   1d9de:	d149      	bne.n	1da74 <bt_gatt_subscribe+0x128>
	sub = gatt_sub_find(conn);
   1d9e0:	4628      	mov	r0, r5
   1d9e2:	f7fe fa39 	bl	1be58 <gatt_sub_find>
	if (!sub) {
   1d9e6:	4604      	mov	r4, r0
   1d9e8:	b958      	cbnz	r0, 1da02 <bt_gatt_subscribe+0xb6>
		sub = gatt_sub_find(NULL);
   1d9ea:	f7fe fa35 	bl	1be58 <gatt_sub_find>
		if (sub) {
   1d9ee:	4604      	mov	r4, r0
   1d9f0:	2800      	cmp	r0, #0
   1d9f2:	d042      	beq.n	1da7a <bt_gatt_subscribe+0x12e>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1d9f4:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1d9f8:	3001      	adds	r0, #1
   1d9fa:	f00b fec7 	bl	2978c <bt_addr_le_copy>
			sub->id = conn->id;
   1d9fe:	7a2b      	ldrb	r3, [r5, #8]
   1da00:	7023      	strb	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1da02:	68a2      	ldr	r2, [r4, #8]
   1da04:	b90a      	cbnz	r2, 1da0a <bt_gatt_subscribe+0xbe>
   1da06:	4613      	mov	r3, r2
   1da08:	e001      	b.n	1da0e <bt_gatt_subscribe+0xc2>
   1da0a:	f1a2 0314 	sub.w	r3, r2, #20
			has_subscription = true;
   1da0e:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1da10:	b96b      	cbnz	r3, 1da2e <bt_gatt_subscribe+0xe2>
	if (!has_subscription) {
   1da12:	bb31      	cbnz	r1, 1da62 <bt_gatt_subscribe+0x116>
		err = gatt_write_ccc(conn, params);
   1da14:	4628      	mov	r0, r5
   1da16:	4631      	mov	r1, r6
   1da18:	f7fe fe08 	bl	1c62c <gatt_write_ccc>
		if (err) {
   1da1c:	4605      	mov	r5, r0
   1da1e:	b300      	cbz	r0, 1da62 <bt_gatt_subscribe+0x116>
	if (sys_slist_is_empty(&sub->list)) {
   1da20:	68a3      	ldr	r3, [r4, #8]
   1da22:	b913      	cbnz	r3, 1da2a <bt_gatt_subscribe+0xde>
   1da24:	4620      	mov	r0, r4
   1da26:	f00b ff24 	bl	29872 <gatt_sub_remove.part.0>
}
   1da2a:	4628      	mov	r0, r5
   1da2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tmp == params) {
   1da2e:	42b3      	cmp	r3, r6
   1da30:	d106      	bne.n	1da40 <bt_gatt_subscribe+0xf4>
	if (sys_slist_is_empty(&sub->list)) {
   1da32:	b912      	cbnz	r2, 1da3a <bt_gatt_subscribe+0xee>
   1da34:	4620      	mov	r0, r4
   1da36:	f00b ff1c 	bl	29872 <gatt_sub_remove.part.0>
			return -EALREADY;
   1da3a:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1da3e:	e7f4      	b.n	1da2a <bt_gatt_subscribe+0xde>
		if (tmp->value_handle == params->value_handle &&
   1da40:	891f      	ldrh	r7, [r3, #8]
   1da42:	8930      	ldrh	r0, [r6, #8]
   1da44:	4287      	cmp	r7, r0
   1da46:	d104      	bne.n	1da52 <bt_gatt_subscribe+0x106>
   1da48:	899f      	ldrh	r7, [r3, #12]
   1da4a:	89b0      	ldrh	r0, [r6, #12]
			has_subscription = true;
   1da4c:	4287      	cmp	r7, r0
   1da4e:	bf28      	it	cs
   1da50:	2101      	movcs	r1, #1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1da52:	f113 0f14 	cmn.w	r3, #20
   1da56:	d0dc      	beq.n	1da12 <bt_gatt_subscribe+0xc6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1da58:	695b      	ldr	r3, [r3, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1da5a:	2b00      	cmp	r3, #0
   1da5c:	d0d9      	beq.n	1da12 <bt_gatt_subscribe+0xc6>
   1da5e:	3b14      	subs	r3, #20
   1da60:	e7d6      	b.n	1da10 <bt_gatt_subscribe+0xc4>
Z_GENLIST_PREPEND(slist, snode)
   1da62:	68a2      	ldr	r2, [r4, #8]
	sys_slist_prepend(&sub->list, &params->node);
   1da64:	f106 0314 	add.w	r3, r6, #20
	parent->next = child;
   1da68:	6172      	str	r2, [r6, #20]
Z_GENLIST_PREPEND(slist, snode)
   1da6a:	68e5      	ldr	r5, [r4, #12]
	list->head = node;
   1da6c:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   1da6e:	b93d      	cbnz	r5, 1da80 <bt_gatt_subscribe+0x134>
	list->tail = node;
   1da70:	60e3      	str	r3, [r4, #12]
}
   1da72:	e7da      	b.n	1da2a <bt_gatt_subscribe+0xde>
		return -ENOTCONN;
   1da74:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   1da78:	e7d7      	b.n	1da2a <bt_gatt_subscribe+0xde>
		return -ENOMEM;
   1da7a:	f06f 050b 	mvn.w	r5, #11
   1da7e:	e7d4      	b.n	1da2a <bt_gatt_subscribe+0xde>
	return 0;
   1da80:	2500      	movs	r5, #0
   1da82:	e7d2      	b.n	1da2a <bt_gatt_subscribe+0xde>
   1da84:	0002ef75 	.word	0x0002ef75
   1da88:	0002ff0c 	.word	0x0002ff0c
   1da8c:	0002cfb2 	.word	0x0002cfb2
   1da90:	0002fff4 	.word	0x0002fff4
   1da94:	00030199 	.word	0x00030199
   1da98:	000301b2 	.word	0x000301b2
   1da9c:	000301c0 	.word	0x000301c0

0001daa0 <bt_gatt_unsubscribe>:
{
   1daa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1daa4:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
   1daa6:	4680      	mov	r8, r0
   1daa8:	b970      	cbnz	r0, 1dac8 <bt_gatt_unsubscribe+0x28>
   1daaa:	4949      	ldr	r1, [pc, #292]	; (1dbd0 <bt_gatt_unsubscribe+0x130>)
   1daac:	f241 13b5 	movw	r3, #4533	; 0x11b5
   1dab0:	4a48      	ldr	r2, [pc, #288]	; (1dbd4 <bt_gatt_unsubscribe+0x134>)
   1dab2:	4849      	ldr	r0, [pc, #292]	; (1dbd8 <bt_gatt_unsubscribe+0x138>)
   1dab4:	f008 fe32 	bl	2671c <printk>
   1dab8:	4848      	ldr	r0, [pc, #288]	; (1dbdc <bt_gatt_unsubscribe+0x13c>)
   1daba:	f008 fe2f 	bl	2671c <printk>
   1dabe:	f241 11b5 	movw	r1, #4533	; 0x11b5
   1dac2:	4844      	ldr	r0, [pc, #272]	; (1dbd4 <bt_gatt_unsubscribe+0x134>)
   1dac4:	f009 f8cf 	bl	26c66 <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   1dac8:	b976      	cbnz	r6, 1dae8 <bt_gatt_unsubscribe+0x48>
   1daca:	4945      	ldr	r1, [pc, #276]	; (1dbe0 <bt_gatt_unsubscribe+0x140>)
   1dacc:	f241 13b6 	movw	r3, #4534	; 0x11b6
   1dad0:	4a40      	ldr	r2, [pc, #256]	; (1dbd4 <bt_gatt_unsubscribe+0x134>)
   1dad2:	4841      	ldr	r0, [pc, #260]	; (1dbd8 <bt_gatt_unsubscribe+0x138>)
   1dad4:	f008 fe22 	bl	2671c <printk>
   1dad8:	4840      	ldr	r0, [pc, #256]	; (1dbdc <bt_gatt_unsubscribe+0x13c>)
   1dada:	f008 fe1f 	bl	2671c <printk>
   1dade:	f241 11b6 	movw	r1, #4534	; 0x11b6
   1dae2:	483c      	ldr	r0, [pc, #240]	; (1dbd4 <bt_gatt_unsubscribe+0x134>)
   1dae4:	f009 f8bf 	bl	26c66 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1dae8:	f898 300d 	ldrb.w	r3, [r8, #13]
   1daec:	2b07      	cmp	r3, #7
   1daee:	d16c      	bne.n	1dbca <bt_gatt_unsubscribe+0x12a>
	sub = gatt_sub_find(conn);
   1daf0:	4640      	mov	r0, r8
   1daf2:	f7fe f9b1 	bl	1be58 <gatt_sub_find>
	if (!sub) {
   1daf6:	4607      	mov	r7, r0
   1daf8:	b920      	cbnz	r0, 1db04 <bt_gatt_unsubscribe+0x64>
		return -EINVAL;
   1dafa:	f06f 0015 	mvn.w	r0, #21
}
   1dafe:	b003      	add	sp, #12
   1db00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1db04:	6884      	ldr	r4, [r0, #8]
   1db06:	b1cc      	cbz	r4, 1db3c <bt_gatt_unsubscribe+0x9c>
   1db08:	f1b4 0514 	subs.w	r5, r4, #20
   1db0c:	d018      	beq.n	1db40 <bt_gatt_unsubscribe+0xa0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1db0e:	6824      	ldr	r4, [r4, #0]
   1db10:	b104      	cbz	r4, 1db14 <bt_gatt_unsubscribe+0x74>
   1db12:	3c14      	subs	r4, #20
   1db14:	f04f 0900 	mov.w	r9, #0
   1db18:	464a      	mov	r2, r9
   1db1a:	46ca      	mov	sl, r9
			if (atomic_test_bit(params->flags,
   1db1c:	f106 0b10 	add.w	fp, r6, #16
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1db20:	b985      	cbnz	r5, 1db44 <bt_gatt_unsubscribe+0xa4>
	if (!found) {
   1db22:	2a00      	cmp	r2, #0
   1db24:	d0e9      	beq.n	1dafa <bt_gatt_unsubscribe+0x5a>
	if (has_subscription) {
   1db26:	f1ba 0f00 	cmp.w	sl, #0
   1db2a:	d045      	beq.n	1dbb8 <bt_gatt_unsubscribe+0x118>
		params->notify(conn, params, NULL, 0);
   1db2c:	462b      	mov	r3, r5
   1db2e:	462a      	mov	r2, r5
   1db30:	4631      	mov	r1, r6
   1db32:	4640      	mov	r0, r8
   1db34:	6834      	ldr	r4, [r6, #0]
   1db36:	47a0      	blx	r4
		return 0;
   1db38:	4628      	mov	r0, r5
   1db3a:	e7e0      	b.n	1dafe <bt_gatt_unsubscribe+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1db3c:	4625      	mov	r5, r4
   1db3e:	e7e9      	b.n	1db14 <bt_gatt_unsubscribe+0x74>
   1db40:	462c      	mov	r4, r5
   1db42:	e7e7      	b.n	1db14 <bt_gatt_unsubscribe+0x74>
		if (params == tmp) {
   1db44:	42b5      	cmp	r5, r6
   1db46:	f105 0114 	add.w	r1, r5, #20
   1db4a:	d129      	bne.n	1dba0 <bt_gatt_unsubscribe+0x100>
Z_GENLIST_REMOVE(slist, snode)
   1db4c:	6968      	ldr	r0, [r5, #20]
   1db4e:	f1b9 0f00 	cmp.w	r9, #0
   1db52:	d11d      	bne.n	1db90 <bt_gatt_unsubscribe+0xf0>
   1db54:	68fa      	ldr	r2, [r7, #12]
	list->head = node;
   1db56:	60b8      	str	r0, [r7, #8]
Z_GENLIST_REMOVE(slist, snode)
   1db58:	4291      	cmp	r1, r2
   1db5a:	d100      	bne.n	1db5e <bt_gatt_unsubscribe+0xbe>
	list->tail = node;
   1db5c:	60f8      	str	r0, [r7, #12]
	parent->next = child;
   1db5e:	2300      	movs	r3, #0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1db60:	4658      	mov	r0, fp
   1db62:	616b      	str	r3, [r5, #20]
   1db64:	f00b fd85 	bl	29672 <atomic_get>
			if (atomic_test_bit(params->flags,
   1db68:	0743      	lsls	r3, r0, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1db6a:	f3c0 0280 	ubfx	r2, r0, #2, #1
   1db6e:	d51f      	bpl.n	1dbb0 <bt_gatt_unsubscribe+0x110>
	bt_att_req_cancel(conn, params);
   1db70:	4631      	mov	r1, r6
   1db72:	4640      	mov	r0, r8
   1db74:	9201      	str	r2, [sp, #4]
   1db76:	f7fe f8b1 	bl	1bcdc <bt_att_req_cancel>
}
   1db7a:	9a01      	ldr	r2, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1db7c:	b1d4      	cbz	r4, 1dbb4 <bt_gatt_unsubscribe+0x114>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1db7e:	f114 0114 	adds.w	r1, r4, #20
   1db82:	d002      	beq.n	1db8a <bt_gatt_unsubscribe+0xea>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1db84:	6961      	ldr	r1, [r4, #20]
   1db86:	b101      	cbz	r1, 1db8a <bt_gatt_unsubscribe+0xea>
   1db88:	3914      	subs	r1, #20
   1db8a:	4625      	mov	r5, r4
   1db8c:	460c      	mov	r4, r1
   1db8e:	e7c7      	b.n	1db20 <bt_gatt_unsubscribe+0x80>
	parent->next = child;
   1db90:	f8c9 0000 	str.w	r0, [r9]
Z_GENLIST_REMOVE(slist, snode)
   1db94:	68fa      	ldr	r2, [r7, #12]
   1db96:	4291      	cmp	r1, r2
	list->tail = node;
   1db98:	bf08      	it	eq
   1db9a:	f8c7 900c 	streq.w	r9, [r7, #12]
}
   1db9e:	e7de      	b.n	1db5e <bt_gatt_unsubscribe+0xbe>
		if (tmp->value_handle == params->value_handle) {
   1dba0:	892d      	ldrh	r5, [r5, #8]
   1dba2:	8930      	ldrh	r0, [r6, #8]
   1dba4:	4689      	mov	r9, r1
   1dba6:	4285      	cmp	r5, r0
   1dba8:	bf08      	it	eq
   1dbaa:	f04f 0a01 	moveq.w	sl, #1
   1dbae:	e7e5      	b.n	1db7c <bt_gatt_unsubscribe+0xdc>
			found = true;
   1dbb0:	2201      	movs	r2, #1
   1dbb2:	e7e3      	b.n	1db7c <bt_gatt_unsubscribe+0xdc>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1dbb4:	4621      	mov	r1, r4
   1dbb6:	e7e8      	b.n	1db8a <bt_gatt_unsubscribe+0xea>
	return gatt_write_ccc(conn, params);
   1dbb8:	4631      	mov	r1, r6
   1dbba:	4640      	mov	r0, r8
	params->value = 0x0000;
   1dbbc:	f8a6 a00c 	strh.w	sl, [r6, #12]
}
   1dbc0:	b003      	add	sp, #12
   1dbc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params);
   1dbc6:	f7fe bd31 	b.w	1c62c <gatt_write_ccc>
		return -ENOTCONN;
   1dbca:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1dbce:	e796      	b.n	1dafe <bt_gatt_unsubscribe+0x5e>
   1dbd0:	0002ef75 	.word	0x0002ef75
   1dbd4:	0002ff0c 	.word	0x0002ff0c
   1dbd8:	0002cfb2 	.word	0x0002cfb2
   1dbdc:	0002fff4 	.word	0x0002fff4
   1dbe0:	0002ffed 	.word	0x0002ffed

0001dbe4 <bt_gatt_mult_notification>:
{
   1dbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbe8:	b087      	sub	sp, #28
   1dbea:	4682      	mov	sl, r0
   1dbec:	460c      	mov	r4, r1
   1dbee:	4616      	mov	r6, r2
	sub = gatt_sub_find(conn);
   1dbf0:	f7fe f932 	bl	1be58 <gatt_sub_find>
	if (!sub) {
   1dbf4:	4607      	mov	r7, r0
   1dbf6:	b1f8      	cbz	r0, 1dc38 <bt_gatt_mult_notification+0x54>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   1dbf8:	4632      	mov	r2, r6
   1dbfa:	4621      	mov	r1, r4
   1dbfc:	a803      	add	r0, sp, #12
   1dbfe:	f00c fd0d 	bl	2a61c <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   1dc02:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1dc06:	2b04      	cmp	r3, #4
   1dc08:	d916      	bls.n	1dc38 <bt_gatt_mult_notification+0x54>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1dc0a:	2104      	movs	r1, #4
   1dc0c:	a803      	add	r0, sp, #12
   1dc0e:	f002 fb59 	bl	202c4 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   1dc12:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		len = sys_cpu_to_le16(nfy->len);
   1dc16:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1dc1a:	4605      	mov	r5, r0
		if (len > buf.len) {
   1dc1c:	4543      	cmp	r3, r8
   1dc1e:	d20e      	bcs.n	1dc3e <bt_gatt_mult_notification+0x5a>
   1dc20:	4a1c      	ldr	r2, [pc, #112]	; (1dc94 <bt_gatt_mult_notification+0xb0>)
   1dc22:	4b1d      	ldr	r3, [pc, #116]	; (1dc98 <bt_gatt_mult_notification+0xb4>)
			BT_ERR("Invalid data len %u > %u", len, length);
   1dc24:	4641      	mov	r1, r8
   1dc26:	1a9b      	subs	r3, r3, r2
   1dc28:	08db      	lsrs	r3, r3, #3
   1dc2a:	019b      	lsls	r3, r3, #6
   1dc2c:	4632      	mov	r2, r6
   1dc2e:	481b      	ldr	r0, [pc, #108]	; (1dc9c <bt_gatt_mult_notification+0xb8>)
   1dc30:	f043 0301 	orr.w	r3, r3, #1
   1dc34:	f009 f89d 	bl	26d72 <log_2>
}
   1dc38:	b007      	add	sp, #28
   1dc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1dc3e:	68bb      	ldr	r3, [r7, #8]
   1dc40:	b31b      	cbz	r3, 1dc8a <bt_gatt_mult_notification+0xa6>
   1dc42:	f1b3 0914 	subs.w	r9, r3, #20
   1dc46:	d020      	beq.n	1dc8a <bt_gatt_mult_notification+0xa6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1dc48:	681c      	ldr	r4, [r3, #0]
   1dc4a:	b104      	cbz	r4, 1dc4e <bt_gatt_mult_notification+0x6a>
   1dc4c:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   1dc4e:	462b      	mov	r3, r5
   1dc50:	f833 bb04 	ldrh.w	fp, [r3], #4
   1dc54:	9301      	str	r3, [sp, #4]
			if (handle != params->value_handle) {
   1dc56:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   1dc5a:	455b      	cmp	r3, fp
   1dc5c:	d10b      	bne.n	1dc76 <bt_gatt_mult_notification+0x92>
			if (params->notify(conn, params, nfy->value, len) ==
   1dc5e:	4643      	mov	r3, r8
   1dc60:	4649      	mov	r1, r9
   1dc62:	4650      	mov	r0, sl
   1dc64:	9a01      	ldr	r2, [sp, #4]
   1dc66:	f8d9 5000 	ldr.w	r5, [r9]
   1dc6a:	47a8      	blx	r5
   1dc6c:	b918      	cbnz	r0, 1dc76 <bt_gatt_mult_notification+0x92>
				bt_gatt_unsubscribe(conn, params);
   1dc6e:	4649      	mov	r1, r9
   1dc70:	4650      	mov	r0, sl
   1dc72:	f7ff ff15 	bl	1daa0 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1dc76:	b144      	cbz	r4, 1dc8a <bt_gatt_mult_notification+0xa6>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1dc78:	f114 0314 	adds.w	r3, r4, #20
   1dc7c:	d002      	beq.n	1dc84 <bt_gatt_mult_notification+0xa0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1dc7e:	6963      	ldr	r3, [r4, #20]
   1dc80:	b103      	cbz	r3, 1dc84 <bt_gatt_mult_notification+0xa0>
   1dc82:	3b14      	subs	r3, #20
{
   1dc84:	46a1      	mov	r9, r4
   1dc86:	461c      	mov	r4, r3
   1dc88:	e7e5      	b.n	1dc56 <bt_gatt_mult_notification+0x72>
		net_buf_simple_pull_mem(&buf, len);
   1dc8a:	4641      	mov	r1, r8
   1dc8c:	a803      	add	r0, sp, #12
   1dc8e:	f002 fb19 	bl	202c4 <net_buf_simple_pull_mem>
   1dc92:	e7b6      	b.n	1dc02 <bt_gatt_mult_notification+0x1e>
   1dc94:	0002bfe4 	.word	0x0002bfe4
   1dc98:	0002c00c 	.word	0x0002c00c
   1dc9c:	000301d3 	.word	0x000301d3

0001dca0 <bt_gatt_connected>:
	data.sec = BT_SECURITY_L1;
   1dca0:	2301      	movs	r3, #1
{
   1dca2:	b570      	push	{r4, r5, r6, lr}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1dca4:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   1dca8:	b08e      	sub	sp, #56	; 0x38
   1dcaa:	4605      	mov	r5, r0
	data.conn = conn;
   1dcac:	9003      	str	r0, [sp, #12]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1dcae:	4631      	mov	r1, r6
   1dcb0:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1dcb2:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1dcb6:	f00a fe6b 	bl	28990 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1dcba:	b190      	cbz	r0, 1dce2 <bt_gatt_connected+0x42>
		if (conn->id) {
   1dcbc:	7a2a      	ldrb	r2, [r5, #8]
   1dcbe:	b35a      	cbz	r2, 1dd18 <bt_gatt_connected+0x78>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1dcc0:	ac02      	add	r4, sp, #8
   1dcc2:	2104      	movs	r1, #4
   1dcc4:	4620      	mov	r0, r4
   1dcc6:	f008 fc8d 	bl	265e4 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1dcca:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1dccc:	2124      	movs	r1, #36	; 0x24
   1dcce:	4a1d      	ldr	r2, [pc, #116]	; (1dd44 <bt_gatt_connected+0xa4>)
   1dcd0:	a805      	add	r0, sp, #20
   1dcd2:	4633      	mov	r3, r6
   1dcd4:	f7f9 f912 	bl	16efc <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1dcd8:	aa05      	add	r2, sp, #20
   1dcda:	4610      	mov	r0, r2
   1dcdc:	491a      	ldr	r1, [pc, #104]	; (1dd48 <bt_gatt_connected+0xa8>)
   1dcde:	f7f6 fa19 	bl	14114 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1dce2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1dce6:	2001      	movs	r0, #1
   1dce8:	4a18      	ldr	r2, [pc, #96]	; (1dd4c <bt_gatt_connected+0xac>)
   1dcea:	ab03      	add	r3, sp, #12
   1dcec:	f00b ffc1 	bl	29c72 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1dcf0:	4628      	mov	r0, r5
   1dcf2:	f00a ffbb 	bl	28c6c <bt_conn_get_security>
   1dcf6:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1dcfa:	4288      	cmp	r0, r1
   1dcfc:	d202      	bcs.n	1dd04 <bt_gatt_connected+0x64>
		bt_conn_set_security(conn, data.sec);
   1dcfe:	4628      	mov	r0, r5
   1dd00:	f00a ff85 	bl	28c0e <bt_conn_set_security>
	sub = gatt_sub_find(conn);
   1dd04:	4628      	mov	r0, r5
   1dd06:	f7fe f8a7 	bl	1be58 <gatt_sub_find>
	if (!sub) {
   1dd0a:	b118      	cbz	r0, 1dd14 <bt_gatt_connected+0x74>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1dd0c:	6884      	ldr	r4, [r0, #8]
   1dd0e:	b10c      	cbz	r4, 1dd14 <bt_gatt_connected+0x74>
   1dd10:	3c14      	subs	r4, #20
   1dd12:	b91c      	cbnz	r4, 1dd1c <bt_gatt_connected+0x7c>
}
   1dd14:	b00e      	add	sp, #56	; 0x38
   1dd16:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1dd18:	9200      	str	r2, [sp, #0]
   1dd1a:	e7d7      	b.n	1dccc <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   1dd1c:	4631      	mov	r1, r6
   1dd1e:	7a28      	ldrb	r0, [r5, #8]
   1dd20:	f00a fe36 	bl	28990 <bt_addr_le_is_bonded>
   1dd24:	b148      	cbz	r0, 1dd3a <bt_gatt_connected+0x9a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1dd26:	f104 0010 	add.w	r0, r4, #16
   1dd2a:	f00b fca2 	bl	29672 <atomic_get>
   1dd2e:	0783      	lsls	r3, r0, #30
   1dd30:	d403      	bmi.n	1dd3a <bt_gatt_connected+0x9a>
			gatt_write_ccc(conn, params);
   1dd32:	4621      	mov	r1, r4
   1dd34:	4628      	mov	r0, r5
   1dd36:	f7fe fc79 	bl	1c62c <gatt_write_ccc>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1dd3a:	f114 0f14 	cmn.w	r4, #20
   1dd3e:	d0e9      	beq.n	1dd14 <bt_gatt_connected+0x74>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1dd40:	6964      	ldr	r4, [r4, #20]
   1dd42:	e7e4      	b.n	1dd0e <bt_gatt_connected+0x6e>
   1dd44:	0002ffa0 	.word	0x0002ffa0
   1dd48:	0001ca01 	.word	0x0001ca01
   1dd4c:	0001cf69 	.word	0x0001cf69

0001dd50 <bt_gatt_encrypt_change>:
{
   1dd50:	b507      	push	{r0, r1, r2, lr}
	data.conn = conn;
   1dd52:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   1dd54:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1dd56:	466b      	mov	r3, sp
   1dd58:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1dd5c:	4a03      	ldr	r2, [pc, #12]	; (1dd6c <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
   1dd5e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1dd62:	f00b ff86 	bl	29c72 <bt_gatt_foreach_attr>
}
   1dd66:	b003      	add	sp, #12
   1dd68:	f85d fb04 	ldr.w	pc, [sp], #4
   1dd6c:	0001cf69 	.word	0x0001cf69

0001dd70 <db_hash_read>:
{
   1dd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1dd72:	4914      	ldr	r1, [pc, #80]	; (1ddc4 <db_hash_read+0x54>)
{
   1dd74:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1dd76:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1dd7a:	461f      	mov	r7, r3
   1dd7c:	4615      	mov	r5, r2
   1dd7e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1dd82:	f006 f8eb 	bl	23f5c <k_work_cancel_delayable_sync>
   1dd86:	4810      	ldr	r0, [pc, #64]	; (1ddc8 <db_hash_read+0x58>)
   1dd88:	f00b fc73 	bl	29672 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1dd8c:	0743      	lsls	r3, r0, #29
   1dd8e:	d402      	bmi.n	1dd96 <db_hash_read+0x26>
		db_hash_gen(true);
   1dd90:	2001      	movs	r0, #1
   1dd92:	f7fe fd85 	bl	1c8a0 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
   1dd96:	2101      	movs	r1, #1
   1dd98:	4620      	mov	r0, r4
   1dd9a:	f00c f833 	bl	29e04 <bt_gatt_change_aware>
	if (offset > value_len) {
   1dd9e:	2e10      	cmp	r6, #16
   1dda0:	d80c      	bhi.n	1ddbc <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
   1dda2:	f1c6 0410 	rsb	r4, r6, #16
   1dda6:	42bc      	cmp	r4, r7
   1dda8:	bfa8      	it	ge
   1ddaa:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1ddac:	4907      	ldr	r1, [pc, #28]	; (1ddcc <db_hash_read+0x5c>)
   1ddae:	4622      	mov	r2, r4
   1ddb0:	4628      	mov	r0, r5
   1ddb2:	4431      	add	r1, r6
   1ddb4:	f00a fbed 	bl	28592 <memcpy>
}
   1ddb8:	4620      	mov	r0, r4
   1ddba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ddbc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1ddc0:	e7fa      	b.n	1ddb8 <db_hash_read+0x48>
   1ddc2:	bf00      	nop
   1ddc4:	20008d18 	.word	0x20008d18
   1ddc8:	20008d90 	.word	0x20008d90
   1ddcc:	20008cc8 	.word	0x20008cc8

0001ddd0 <bt_gatt_store_ccc>:
	save.count = 0;
   1ddd0:	2300      	movs	r3, #0
{
   1ddd2:	b570      	push	{r4, r5, r6, lr}
   1ddd4:	4604      	mov	r4, r0
   1ddd6:	b0c0      	sub	sp, #256	; 0x100
   1ddd8:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1ddda:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   1dddc:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   1dde0:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1dde2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1dde6:	2001      	movs	r0, #1
   1dde8:	4a16      	ldr	r2, [pc, #88]	; (1de44 <bt_gatt_store_ccc+0x74>)
   1ddea:	ab0d      	add	r3, sp, #52	; 0x34
   1ddec:	f00b ff41 	bl	29c72 <bt_gatt_foreach_attr>
	if (id) {
   1ddf0:	b31c      	cbz	r4, 1de3a <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
   1ddf2:	ae03      	add	r6, sp, #12
   1ddf4:	4622      	mov	r2, r4
   1ddf6:	2104      	movs	r1, #4
   1ddf8:	4630      	mov	r0, r6
   1ddfa:	f008 fbf3 	bl	265e4 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1ddfe:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1de00:	4a11      	ldr	r2, [pc, #68]	; (1de48 <bt_gatt_store_ccc+0x78>)
   1de02:	462b      	mov	r3, r5
   1de04:	2124      	movs	r1, #36	; 0x24
   1de06:	a804      	add	r0, sp, #16
   1de08:	f7f9 f878 	bl	16efc <bt_settings_encode_key>
	if (save.count) {
   1de0c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   1de0e:	b1b2      	cbz	r2, 1de3e <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
   1de10:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1de12:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   1de14:	a804      	add	r0, sp, #16
   1de16:	f7f6 f919 	bl	1404c <settings_save_one>
	if (err) {
   1de1a:	4604      	mov	r4, r0
   1de1c:	b150      	cbz	r0, 1de34 <bt_gatt_store_ccc+0x64>
   1de1e:	4a0b      	ldr	r2, [pc, #44]	; (1de4c <bt_gatt_store_ccc+0x7c>)
   1de20:	4b0b      	ldr	r3, [pc, #44]	; (1de50 <bt_gatt_store_ccc+0x80>)
		BT_ERR("Failed to store CCCs (err %d)", err);
   1de22:	4601      	mov	r1, r0
   1de24:	1ad2      	subs	r2, r2, r3
   1de26:	08d2      	lsrs	r2, r2, #3
   1de28:	0192      	lsls	r2, r2, #6
   1de2a:	480a      	ldr	r0, [pc, #40]	; (1de54 <bt_gatt_store_ccc+0x84>)
   1de2c:	f042 0201 	orr.w	r2, r2, #1
   1de30:	f008 ff8b 	bl	26d4a <log_1>
}
   1de34:	4620      	mov	r0, r4
   1de36:	b040      	add	sp, #256	; 0x100
   1de38:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1de3a:	9400      	str	r4, [sp, #0]
   1de3c:	e7e0      	b.n	1de00 <bt_gatt_store_ccc+0x30>
		str = NULL;
   1de3e:	4611      	mov	r1, r2
   1de40:	e7e8      	b.n	1de14 <bt_gatt_store_ccc+0x44>
   1de42:	bf00      	nop
   1de44:	0001c1cd 	.word	0x0001c1cd
   1de48:	0002ffa0 	.word	0x0002ffa0
   1de4c:	0002c00c 	.word	0x0002c00c
   1de50:	0002bfe4 	.word	0x0002bfe4
   1de54:	000301ec 	.word	0x000301ec

0001de58 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1de58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de5c:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1de5e:	4603      	mov	r3, r0
   1de60:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1de64:	2001      	movs	r0, #1
{
   1de66:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1de68:	4a53      	ldr	r2, [pc, #332]	; (1dfb8 <bt_gatt_disconnected+0x160>)
		k_work_cancel_delayable(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1de6a:	f104 0590 	add.w	r5, r4, #144	; 0x90
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1de6e:	f00b ff00 	bl	29c72 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1de72:	4629      	mov	r1, r5
   1de74:	7a20      	ldrb	r0, [r4, #8]
   1de76:	f00a fd8b 	bl	28990 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1de7a:	2800      	cmp	r0, #0
   1de7c:	d035      	beq.n	1deea <bt_gatt_disconnected+0x92>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1de7e:	4629      	mov	r1, r5
   1de80:	7a20      	ldrb	r0, [r4, #8]
   1de82:	f7ff ffa5 	bl	1ddd0 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   1de86:	4620      	mov	r0, r4
   1de88:	f7fd ff98 	bl	1bdbc <find_cf_cfg>
	if (!cfg) {
   1de8c:	4606      	mov	r6, r0
   1de8e:	2800      	cmp	r0, #0
   1de90:	d064      	beq.n	1df5c <bt_gatt_disconnected+0x104>
		if (conn->id) {
   1de92:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   1de94:	3608      	adds	r6, #8
		if (conn->id) {
   1de96:	2a00      	cmp	r2, #0
   1de98:	d062      	beq.n	1df60 <bt_gatt_disconnected+0x108>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1de9a:	af02      	add	r7, sp, #8
   1de9c:	2104      	movs	r1, #4
   1de9e:	4638      	mov	r0, r7
   1dea0:	f008 fba0 	bl	265e4 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1dea4:	462b      	mov	r3, r5
   1dea6:	9700      	str	r7, [sp, #0]
   1dea8:	2124      	movs	r1, #36	; 0x24
   1deaa:	4a44      	ldr	r2, [pc, #272]	; (1dfbc <bt_gatt_disconnected+0x164>)
   1deac:	a803      	add	r0, sp, #12
   1deae:	f7f9 f825 	bl	16efc <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   1deb2:	7a23      	ldrb	r3, [r4, #8]
   1deb4:	2701      	movs	r7, #1
   1deb6:	b93b      	cbnz	r3, 1dec8 <bt_gatt_disconnected+0x70>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1deb8:	2300      	movs	r3, #0
   1deba:	2124      	movs	r1, #36	; 0x24
   1debc:	9300      	str	r3, [sp, #0]
   1debe:	4a3f      	ldr	r2, [pc, #252]	; (1dfbc <bt_gatt_disconnected+0x164>)
   1dec0:	462b      	mov	r3, r5
   1dec2:	a803      	add	r0, sp, #12
   1dec4:	f7f9 f81a 	bl	16efc <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1dec8:	4631      	mov	r1, r6
   1deca:	463a      	mov	r2, r7
   1decc:	a803      	add	r0, sp, #12
   1dece:	f7f6 f8bd 	bl	1404c <settings_save_one>
	if (err) {
   1ded2:	4601      	mov	r1, r0
   1ded4:	b148      	cbz	r0, 1deea <bt_gatt_disconnected+0x92>
   1ded6:	4a3a      	ldr	r2, [pc, #232]	; (1dfc0 <bt_gatt_disconnected+0x168>)
   1ded8:	4b3a      	ldr	r3, [pc, #232]	; (1dfc4 <bt_gatt_disconnected+0x16c>)
		BT_ERR("Failed to store Client Features (err %d)", err);
   1deda:	483b      	ldr	r0, [pc, #236]	; (1dfc8 <bt_gatt_disconnected+0x170>)
   1dedc:	1ad2      	subs	r2, r2, r3
   1dede:	08d2      	lsrs	r2, r2, #3
   1dee0:	0192      	lsls	r2, r2, #6
   1dee2:	f042 0201 	orr.w	r2, r2, #1
   1dee6:	f008 ff30 	bl	26d4a <log_1>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1deea:	4629      	mov	r1, r5
   1deec:	7a20      	ldrb	r0, [r4, #8]
   1deee:	f00a fd4f 	bl	28990 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1def2:	b150      	cbz	r0, 1df0a <bt_gatt_disconnected+0xb2>
		struct addr_with_id addr_with_id = {
   1def4:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1def6:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
   1defa:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1defe:	2001      	movs	r0, #1
   1df00:	4a32      	ldr	r2, [pc, #200]	; (1dfcc <bt_gatt_disconnected+0x174>)
   1df02:	ab03      	add	r3, sp, #12
		struct addr_with_id addr_with_id = {
   1df04:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1df06:	f00b feb4 	bl	29c72 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   1df0a:	4620      	mov	r0, r4
   1df0c:	f7fd ffa4 	bl	1be58 <gatt_sub_find>
	if (!sub) {
   1df10:	4607      	mov	r7, r0
   1df12:	b3b0      	cbz	r0, 1df82 <bt_gatt_disconnected+0x12a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1df14:	6883      	ldr	r3, [r0, #8]
   1df16:	b3a3      	cbz	r3, 1df82 <bt_gatt_disconnected+0x12a>
   1df18:	f1b3 0b14 	subs.w	fp, r3, #20
   1df1c:	d031      	beq.n	1df82 <bt_gatt_disconnected+0x12a>
   1df1e:	681e      	ldr	r6, [r3, #0]
   1df20:	b106      	cbz	r6, 1df24 <bt_gatt_disconnected+0xcc>
   1df22:	3e14      	subs	r6, #20
   1df24:	f04f 0800 	mov.w	r8, #0
			params->value = 0U;
   1df28:	46c2      	mov	sl, r8
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1df2a:	f107 0901 	add.w	r9, r7, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1df2e:	4629      	mov	r1, r5
   1df30:	7a20      	ldrb	r0, [r4, #8]
   1df32:	f00a fd2d 	bl	28990 <bt_addr_le_is_bonded>
   1df36:	b9a8      	cbnz	r0, 1df64 <bt_gatt_disconnected+0x10c>
			gatt_sub_remove(conn, sub, prev, params);
   1df38:	465b      	mov	r3, fp
   1df3a:	4642      	mov	r2, r8
   1df3c:	4639      	mov	r1, r7
   1df3e:	4620      	mov	r0, r4
			params->value = 0U;
   1df40:	f8ab a00c 	strh.w	sl, [fp, #12]
			gatt_sub_remove(conn, sub, prev, params);
   1df44:	f00b fda9 	bl	29a9a <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1df48:	b1de      	cbz	r6, 1df82 <bt_gatt_disconnected+0x12a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1df4a:	f116 0214 	adds.w	r2, r6, #20
   1df4e:	d002      	beq.n	1df56 <bt_gatt_disconnected+0xfe>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1df50:	6972      	ldr	r2, [r6, #20]
   1df52:	b102      	cbz	r2, 1df56 <bt_gatt_disconnected+0xfe>
   1df54:	3a14      	subs	r2, #20
   1df56:	46b3      	mov	fp, r6
   1df58:	4616      	mov	r6, r2
   1df5a:	e7e8      	b.n	1df2e <bt_gatt_disconnected+0xd6>
		len = 0;
   1df5c:	4607      	mov	r7, r0
   1df5e:	e7ab      	b.n	1deb8 <bt_gatt_disconnected+0x60>
   1df60:	2701      	movs	r7, #1
   1df62:	e7a9      	b.n	1deb8 <bt_gatt_disconnected+0x60>
   1df64:	f10b 0010 	add.w	r0, fp, #16
   1df68:	f00b fb83 	bl	29672 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1df6c:	07c3      	lsls	r3, r0, #31
   1df6e:	d4e3      	bmi.n	1df38 <bt_gatt_disconnected+0xe0>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   1df70:	787b      	ldrb	r3, [r7, #1]
   1df72:	b11b      	cbz	r3, 1df7c <bt_gatt_disconnected+0x124>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1df74:	4629      	mov	r1, r5
   1df76:	4648      	mov	r0, r9
   1df78:	f00b fc08 	bl	2978c <bt_addr_le_copy>
			prev = &params->node;
   1df7c:	f10b 0814 	add.w	r8, fp, #20
   1df80:	e7e2      	b.n	1df48 <bt_gatt_disconnected+0xf0>
	cfg = find_cf_cfg(conn);
   1df82:	4620      	mov	r0, r4
   1df84:	f7fd ff1a 	bl	1bdbc <find_cf_cfg>
	if (!cfg) {
   1df88:	4606      	mov	r6, r0
   1df8a:	b138      	cbz	r0, 1df9c <bt_gatt_disconnected+0x144>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1df8c:	4629      	mov	r1, r5
   1df8e:	7a20      	ldrb	r0, [r4, #8]
   1df90:	f00a fcfe 	bl	28990 <bt_addr_le_is_bonded>
   1df94:	b928      	cbnz	r0, 1dfa2 <bt_gatt_disconnected+0x14a>
		clear_cf_cfg(cfg);
   1df96:	4630      	mov	r0, r6
   1df98:	f00b fc9d 	bl	298d6 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1df9c:	b00d      	add	sp, #52	; 0x34
   1df9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1dfa2:	4629      	mov	r1, r5
   1dfa4:	1c70      	adds	r0, r6, #1
   1dfa6:	f00b fbf1 	bl	2978c <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1dfaa:	f06f 0102 	mvn.w	r1, #2
   1dfae:	f106 000c 	add.w	r0, r6, #12
   1dfb2:	f00b fbfc 	bl	297ae <atomic_and>
}
   1dfb6:	e7f1      	b.n	1df9c <bt_gatt_disconnected+0x144>
   1dfb8:	0001c5a1 	.word	0x0001c5a1
   1dfbc:	00030236 	.word	0x00030236
   1dfc0:	0002c00c 	.word	0x0002c00c
   1dfc4:	0002bfe4 	.word	0x0002bfe4
   1dfc8:	0003020a 	.word	0x0003020a
   1dfcc:	0001c291 	.word	0x0001c291

0001dfd0 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   1dfd0:	4b10      	ldr	r3, [pc, #64]	; (1e014 <get_io_capa+0x44>)
   1dfd2:	681b      	ldr	r3, [r3, #0]
   1dfd4:	b1bb      	cbz	r3, 1e006 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   1dfd6:	681a      	ldr	r2, [r3, #0]
   1dfd8:	b142      	cbz	r2, 1dfec <get_io_capa+0x1c>
   1dfda:	6859      	ldr	r1, [r3, #4]
   1dfdc:	b131      	cbz	r1, 1dfec <get_io_capa+0x1c>
   1dfde:	6899      	ldr	r1, [r3, #8]
   1dfe0:	b911      	cbnz	r1, 1dfe8 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   1dfe2:	490d      	ldr	r1, [pc, #52]	; (1e018 <get_io_capa+0x48>)
   1dfe4:	7809      	ldrb	r1, [r1, #0]
   1dfe6:	b939      	cbnz	r1, 1dff8 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1dfe8:	2004      	movs	r0, #4
   1dfea:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   1dfec:	490a      	ldr	r1, [pc, #40]	; (1e018 <get_io_capa+0x48>)
   1dfee:	7809      	ldrb	r1, [r1, #0]
   1dff0:	b111      	cbz	r1, 1dff8 <get_io_capa+0x28>
   1dff2:	b10a      	cbz	r2, 1dff8 <get_io_capa+0x28>
   1dff4:	6899      	ldr	r1, [r3, #8]
   1dff6:	b941      	cbnz	r1, 1e00a <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   1dff8:	685b      	ldr	r3, [r3, #4]
   1dffa:	b943      	cbnz	r3, 1e00e <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   1dffc:	2a00      	cmp	r2, #0
   1dffe:	bf0c      	ite	eq
   1e000:	2003      	moveq	r0, #3
   1e002:	2000      	movne	r0, #0
   1e004:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1e006:	2003      	movs	r0, #3
   1e008:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   1e00a:	2001      	movs	r0, #1
   1e00c:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   1e00e:	2002      	movs	r0, #2
	}
}
   1e010:	4770      	bx	lr
   1e012:	bf00      	nop
   1e014:	20009814 	.word	0x20009814
   1e018:	2000a51d 	.word	0x2000a51d

0001e01c <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e01c:	4288      	cmp	r0, r1
{
   1e01e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e020:	4604      	mov	r4, r0
   1e022:	460d      	mov	r5, r1
   1e024:	4616      	mov	r6, r2
   1e026:	eb00 0702 	add.w	r7, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e02a:	d91a      	bls.n	1e062 <sys_memcpy_swap+0x46>
   1e02c:	188b      	adds	r3, r1, r2
   1e02e:	4298      	cmp	r0, r3
   1e030:	d20e      	bcs.n	1e050 <sys_memcpy_swap+0x34>
   1e032:	490d      	ldr	r1, [pc, #52]	; (1e068 <sys_memcpy_swap+0x4c>)
   1e034:	f240 2317 	movw	r3, #535	; 0x217
   1e038:	4a0c      	ldr	r2, [pc, #48]	; (1e06c <sys_memcpy_swap+0x50>)
   1e03a:	480d      	ldr	r0, [pc, #52]	; (1e070 <sys_memcpy_swap+0x54>)
   1e03c:	f008 fb6e 	bl	2671c <printk>
   1e040:	480c      	ldr	r0, [pc, #48]	; (1e074 <sys_memcpy_swap+0x58>)
   1e042:	f008 fb6b 	bl	2671c <printk>
   1e046:	f240 2117 	movw	r1, #535	; 0x217
   1e04a:	4808      	ldr	r0, [pc, #32]	; (1e06c <sys_memcpy_swap+0x50>)
   1e04c:	f008 fe0b 	bl	26c66 <assert_post_action>
	psrc += length - 1;
   1e050:	3e01      	subs	r6, #1
   1e052:	4435      	add	r5, r6
		*pdst++ = *psrc--;
   1e054:	f815 3901 	ldrb.w	r3, [r5], #-1
   1e058:	f804 3b01 	strb.w	r3, [r4], #1
	for (; length > 0; length--) {
   1e05c:	42bc      	cmp	r4, r7
   1e05e:	d1f9      	bne.n	1e054 <sys_memcpy_swap+0x38>
}
   1e060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e062:	d0e6      	beq.n	1e032 <sys_memcpy_swap+0x16>
   1e064:	42b9      	cmp	r1, r7
   1e066:	e7e3      	b.n	1e030 <sys_memcpy_swap+0x14>
   1e068:	0002f495 	.word	0x0002f495
   1e06c:	0002f46a 	.word	0x0002f46a
   1e070:	0002cfb2 	.word	0x0002cfb2
   1e074:	0002f4ec 	.word	0x0002f4ec

0001e078 <smp_chan_get>:
		return false;
	}
}

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
   1e078:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1e07a:	2106      	movs	r1, #6
   1e07c:	f00a ff7b 	bl	28f76 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1e080:	4604      	mov	r4, r0
   1e082:	b958      	cbnz	r0, 1e09c <smp_chan_get+0x24>
   1e084:	4907      	ldr	r1, [pc, #28]	; (1e0a4 <smp_chan_get+0x2c>)
   1e086:	4b08      	ldr	r3, [pc, #32]	; (1e0a8 <smp_chan_get+0x30>)
		BT_ERR("Unable to find SMP channel");
   1e088:	4808      	ldr	r0, [pc, #32]	; (1e0ac <smp_chan_get+0x34>)
   1e08a:	1ac9      	subs	r1, r1, r3
   1e08c:	08c9      	lsrs	r1, r1, #3
   1e08e:	0189      	lsls	r1, r1, #6
   1e090:	f041 0101 	orr.w	r1, r1, #1
   1e094:	f008 fe4c 	bl	26d30 <log_0>
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
}
   1e098:	4620      	mov	r0, r4
   1e09a:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   1e09c:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   1e0a0:	e7fa      	b.n	1e098 <smp_chan_get+0x20>
   1e0a2:	bf00      	nop
   1e0a4:	0002c064 	.word	0x0002c064
   1e0a8:	0002bfe4 	.word	0x0002bfe4
   1e0ac:	00030247 	.word	0x00030247

0001e0b0 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   1e0b0:	4b0c      	ldr	r3, [pc, #48]	; (1e0e4 <bt_smp_accept+0x34>)
{
   1e0b2:	b510      	push	{r4, lr}
   1e0b4:	4604      	mov	r4, r0
		if (smp->chan.chan.conn) {
   1e0b6:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
   1e0ba:	b920      	cbnz	r0, 1e0c6 <bt_smp_accept+0x16>
			continue;
		}

		smp->chan.chan.ops = &ops;
   1e0bc:	4a0a      	ldr	r2, [pc, #40]	; (1e0e8 <bt_smp_accept+0x38>)

		*chan = &smp->chan.chan;
   1e0be:	33f0      	adds	r3, #240	; 0xf0
		smp->chan.chan.ops = &ops;
   1e0c0:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
   1e0c2:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1e0c4:	bd10      	pop	{r4, pc}
   1e0c6:	4b09      	ldr	r3, [pc, #36]	; (1e0ec <bt_smp_accept+0x3c>)
   1e0c8:	4a09      	ldr	r2, [pc, #36]	; (1e0f0 <bt_smp_accept+0x40>)
	BT_ERR("No available SMP context for conn %p", conn);
   1e0ca:	480a      	ldr	r0, [pc, #40]	; (1e0f4 <bt_smp_accept+0x44>)
   1e0cc:	1ad2      	subs	r2, r2, r3
   1e0ce:	08d2      	lsrs	r2, r2, #3
   1e0d0:	0192      	lsls	r2, r2, #6
   1e0d2:	4621      	mov	r1, r4
   1e0d4:	f042 0201 	orr.w	r2, r2, #1
   1e0d8:	f008 fe37 	bl	26d4a <log_1>
	return -ENOMEM;
   1e0dc:	f06f 000b 	mvn.w	r0, #11
   1e0e0:	e7f0      	b.n	1e0c4 <bt_smp_accept+0x14>
   1e0e2:	bf00      	nop
   1e0e4:	20008d98 	.word	0x20008d98
   1e0e8:	0002c890 	.word	0x0002c890
   1e0ec:	0002bfe4 	.word	0x0002bfe4
   1e0f0:	0002c064 	.word	0x0002c064
   1e0f4:	00030262 	.word	0x00030262

0001e0f8 <smp_find>:
{
   1e0f8:	4601      	mov	r1, r0
   1e0fa:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1e0fc:	4803      	ldr	r0, [pc, #12]	; (1e10c <smp_find+0x14>)
   1e0fe:	f00b ff64 	bl	29fca <atomic_test_bit>
   1e102:	2800      	cmp	r0, #0
}
   1e104:	4802      	ldr	r0, [pc, #8]	; (1e110 <smp_find+0x18>)
   1e106:	bf08      	it	eq
   1e108:	2000      	moveq	r0, #0
   1e10a:	bd08      	pop	{r3, pc}
   1e10c:	20008d9c 	.word	0x20008d9c
   1e110:	20008d98 	.word	0x20008d98

0001e114 <sc_send_public_key>:
{
   1e114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1e116:	210c      	movs	r1, #12
{
   1e118:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1e11a:	f00b ffa1 	bl	2a060 <smp_create_pdu.isra.0>
	if (!req_buf) {
   1e11e:	4604      	mov	r4, r0
   1e120:	b1b0      	cbz	r0, 1e150 <sc_send_public_key+0x3c>
   1e122:	2140      	movs	r1, #64	; 0x40
   1e124:	3008      	adds	r0, #8
   1e126:	f002 f8ef 	bl	20308 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1e12a:	4f0a      	ldr	r7, [pc, #40]	; (1e154 <sc_send_public_key+0x40>)
   1e12c:	2220      	movs	r2, #32
   1e12e:	6839      	ldr	r1, [r7, #0]
   1e130:	4606      	mov	r6, r0
   1e132:	f00a fa2e 	bl	28592 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1e136:	2220      	movs	r2, #32
   1e138:	6839      	ldr	r1, [r7, #0]
   1e13a:	18b0      	adds	r0, r6, r2
   1e13c:	4411      	add	r1, r2
   1e13e:	f00a fa28 	bl	28592 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1e142:	4628      	mov	r0, r5
   1e144:	2200      	movs	r2, #0
   1e146:	4621      	mov	r1, r4
   1e148:	f00b fea1 	bl	29e8e <smp_send.isra.0>
	return 0;
   1e14c:	2000      	movs	r0, #0
}
   1e14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1e150:	2008      	movs	r0, #8
   1e152:	e7fc      	b.n	1e14e <sc_send_public_key+0x3a>
   1e154:	200098c8 	.word	0x200098c8

0001e158 <bt_smp_distribute_keys>:
{
   1e158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e15c:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1e15e:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
{
   1e162:	b089      	sub	sp, #36	; 0x24
	if (!keys) {
   1e164:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1e168:	b9a3      	cbnz	r3, 1e194 <bt_smp_distribute_keys+0x3c>
   1e16a:	4a4e      	ldr	r2, [pc, #312]	; (1e2a4 <bt_smp_distribute_keys+0x14c>)
   1e16c:	4c4e      	ldr	r4, [pc, #312]	; (1e2a8 <bt_smp_distribute_keys+0x150>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1e16e:	3090      	adds	r0, #144	; 0x90
   1e170:	1aa4      	subs	r4, r4, r2
   1e172:	f7f8 fe03 	bl	16d7c <bt_addr_le_str_real>
   1e176:	f7f4 fbb9 	bl	128ec <z_log_strdup>
   1e17a:	08e4      	lsrs	r4, r4, #3
   1e17c:	01a4      	lsls	r4, r4, #6
   1e17e:	f044 0401 	orr.w	r4, r4, #1
   1e182:	4601      	mov	r1, r0
   1e184:	4622      	mov	r2, r4
   1e186:	4849      	ldr	r0, [pc, #292]	; (1e2ac <bt_smp_distribute_keys+0x154>)
   1e188:	f008 fddf 	bl	26d4a <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1e18c:	2008      	movs	r0, #8
}
   1e18e:	b009      	add	sp, #36	; 0x24
   1e190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1e194:	1d27      	adds	r7, r4, #4
   1e196:	2105      	movs	r1, #5
   1e198:	4638      	mov	r0, r7
   1e19a:	f00b ff16 	bl	29fca <atomic_test_bit>
   1e19e:	b9c0      	cbnz	r0, 1e1d2 <bt_smp_distribute_keys+0x7a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1e1a0:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
   1e1a4:	f010 0001 	ands.w	r0, r0, #1
   1e1a8:	d0f1      	beq.n	1e18e <bt_smp_distribute_keys+0x36>
	struct bt_keys *keys = conn->le.keys;
   1e1aa:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1e1ae:	211a      	movs	r1, #26
   1e1b0:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   1e1b2:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1e1b6:	f7fb f98b 	bl	194d0 <bt_rand>
   1e1ba:	4680      	mov	r8, r0
   1e1bc:	b158      	cbz	r0, 1e1d6 <bt_smp_distribute_keys+0x7e>
   1e1be:	493a      	ldr	r1, [pc, #232]	; (1e2a8 <bt_smp_distribute_keys+0x150>)
   1e1c0:	4b38      	ldr	r3, [pc, #224]	; (1e2a4 <bt_smp_distribute_keys+0x14c>)
			BT_ERR("Unable to get random bytes");
   1e1c2:	483b      	ldr	r0, [pc, #236]	; (1e2b0 <bt_smp_distribute_keys+0x158>)
   1e1c4:	1ac9      	subs	r1, r1, r3
   1e1c6:	08c9      	lsrs	r1, r1, #3
   1e1c8:	0189      	lsls	r1, r1, #6
   1e1ca:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Master Ident buffer");
   1e1ce:	f008 fdaf 	bl	26d30 <log_0>
	return 0;
   1e1d2:	2000      	movs	r0, #0
   1e1d4:	e7db      	b.n	1e18e <bt_smp_distribute_keys+0x36>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1e1d6:	2106      	movs	r1, #6
   1e1d8:	4620      	mov	r0, r4
   1e1da:	f00b ff41 	bl	2a060 <smp_create_pdu.isra.0>
		if (!buf) {
   1e1de:	4606      	mov	r6, r0
   1e1e0:	b940      	cbnz	r0, 1e1f4 <bt_smp_distribute_keys+0x9c>
   1e1e2:	4931      	ldr	r1, [pc, #196]	; (1e2a8 <bt_smp_distribute_keys+0x150>)
   1e1e4:	4b2f      	ldr	r3, [pc, #188]	; (1e2a4 <bt_smp_distribute_keys+0x14c>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1e1e6:	4833      	ldr	r0, [pc, #204]	; (1e2b4 <bt_smp_distribute_keys+0x15c>)
   1e1e8:	1ac9      	subs	r1, r1, r3
   1e1ea:	08c9      	lsrs	r1, r1, #3
   1e1ec:	0189      	lsls	r1, r1, #6
   1e1ee:	f041 0101 	orr.w	r1, r1, #1
   1e1f2:	e7ec      	b.n	1e1ce <bt_smp_distribute_keys+0x76>
   1e1f4:	2110      	movs	r1, #16
   1e1f6:	3008      	adds	r0, #8
   1e1f8:	f002 f886 	bl	20308 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1e1fc:	7b2a      	ldrb	r2, [r5, #12]
   1e1fe:	a901      	add	r1, sp, #4
   1e200:	4681      	mov	r9, r0
   1e202:	f00a f9c6 	bl	28592 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1e206:	7b28      	ldrb	r0, [r5, #12]
   1e208:	280f      	cmp	r0, #15
   1e20a:	d805      	bhi.n	1e218 <bt_smp_distribute_keys+0xc0>
			(void)memset(info->ltk + keys->enc_size, 0,
   1e20c:	f1c0 0210 	rsb	r2, r0, #16
   1e210:	4641      	mov	r1, r8
   1e212:	4448      	add	r0, r9
   1e214:	f00a f9e8 	bl	285e8 <memset>
		smp_send(smp, buf, NULL, NULL);
   1e218:	4631      	mov	r1, r6
   1e21a:	2200      	movs	r2, #0
   1e21c:	4620      	mov	r0, r4
   1e21e:	f00b fe36 	bl	29e8e <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
   1e222:	2107      	movs	r1, #7
   1e224:	4620      	mov	r0, r4
   1e226:	f00b ff1b 	bl	2a060 <smp_create_pdu.isra.0>
		if (!buf) {
   1e22a:	4606      	mov	r6, r0
   1e22c:	b940      	cbnz	r0, 1e240 <bt_smp_distribute_keys+0xe8>
   1e22e:	491e      	ldr	r1, [pc, #120]	; (1e2a8 <bt_smp_distribute_keys+0x150>)
   1e230:	4b1c      	ldr	r3, [pc, #112]	; (1e2a4 <bt_smp_distribute_keys+0x14c>)
			BT_ERR("Unable to allocate Master Ident buffer");
   1e232:	4821      	ldr	r0, [pc, #132]	; (1e2b8 <bt_smp_distribute_keys+0x160>)
   1e234:	1ac9      	subs	r1, r1, r3
   1e236:	08c9      	lsrs	r1, r1, #3
   1e238:	0189      	lsls	r1, r1, #6
   1e23a:	f041 0101 	orr.w	r1, r1, #1
   1e23e:	e7c6      	b.n	1e1ce <bt_smp_distribute_keys+0x76>
   1e240:	210a      	movs	r1, #10
   1e242:	3008      	adds	r0, #8
   1e244:	f002 f860 	bl	20308 <net_buf_simple_add>
   1e248:	4680      	mov	r8, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1e24a:	2208      	movs	r2, #8
   1e24c:	a905      	add	r1, sp, #20
   1e24e:	3002      	adds	r0, #2
   1e250:	f00a f99f 	bl	28592 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1e254:	2202      	movs	r2, #2
   1e256:	a907      	add	r1, sp, #28
   1e258:	4640      	mov	r0, r8
   1e25a:	f00a f99a 	bl	28592 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1e25e:	4631      	mov	r1, r6
   1e260:	4620      	mov	r0, r4
   1e262:	4a16      	ldr	r2, [pc, #88]	; (1e2bc <bt_smp_distribute_keys+0x164>)
   1e264:	f00b fe13 	bl	29e8e <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e268:	210d      	movs	r1, #13
   1e26a:	4638      	mov	r0, r7
   1e26c:	f00b fead 	bl	29fca <atomic_test_bit>
   1e270:	2800      	cmp	r0, #0
   1e272:	d0ae      	beq.n	1e1d2 <bt_smp_distribute_keys+0x7a>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
   1e274:	4628      	mov	r0, r5
   1e276:	2101      	movs	r1, #1
   1e278:	f00c f9c6 	bl	2a608 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
   1e27c:	a901      	add	r1, sp, #4
   1e27e:	2210      	movs	r2, #16
   1e280:	f105 004a 	add.w	r0, r5, #74	; 0x4a
   1e284:	f00a f985 	bl	28592 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
   1e288:	a905      	add	r1, sp, #20
   1e28a:	2208      	movs	r2, #8
   1e28c:	f105 0040 	add.w	r0, r5, #64	; 0x40
   1e290:	f00a f97f 	bl	28592 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
   1e294:	2202      	movs	r2, #2
   1e296:	a907      	add	r1, sp, #28
   1e298:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1e29c:	f00a f979 	bl	28592 <memcpy>
   1e2a0:	e797      	b.n	1e1d2 <bt_smp_distribute_keys+0x7a>
   1e2a2:	bf00      	nop
   1e2a4:	0002bfe4 	.word	0x0002bfe4
   1e2a8:	0002c064 	.word	0x0002c064
   1e2ac:	00030287 	.word	0x00030287
   1e2b0:	0003029c 	.word	0x0003029c
   1e2b4:	000302b7 	.word	0x000302b7
   1e2b8:	000302de 	.word	0x000302de
   1e2bc:	0001f88d 	.word	0x0001f88d

0001e2c0 <compute_and_send_master_dhcheck>:
	(void)memset(r, 0, sizeof(r));
   1e2c0:	2210      	movs	r2, #16
{
   1e2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e2c6:	4604      	mov	r4, r0
   1e2c8:	b0a2      	sub	sp, #136	; 0x88
	(void)memset(r, 0, sizeof(r));
   1e2ca:	2100      	movs	r1, #0
   1e2cc:	eb0d 0002 	add.w	r0, sp, r2
   1e2d0:	f00a f98a 	bl	285e8 <memset>
	switch (smp->method) {
   1e2d4:	7a21      	ldrb	r1, [r4, #8]
   1e2d6:	2905      	cmp	r1, #5
   1e2d8:	f200 8097 	bhi.w	1e40a <compute_and_send_master_dhcheck+0x14a>
   1e2dc:	e8df f001 	tbb	[pc, r1]
   1e2e0:	09030309 	.word	0x09030309
   1e2e4:	8c95      	.short	0x8c95
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1e2e6:	2204      	movs	r2, #4
   1e2e8:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   1e2ec:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1e2ee:	f00a f950 	bl	28592 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   1e2f2:	4b5e      	ldr	r3, [pc, #376]	; (1e46c <compute_and_send_master_dhcheck+0x1ac>)
		   &smp->chan.chan.conn->le.init_addr,
   1e2f4:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	uint8_t m[53] = { 0x00, /* counter */
   1e2f8:	aa14      	add	r2, sp, #80	; 0x50
   1e2fa:	f103 0730 	add.w	r7, r3, #48	; 0x30
   1e2fe:	4616      	mov	r6, r2
   1e300:	6818      	ldr	r0, [r3, #0]
   1e302:	6859      	ldr	r1, [r3, #4]
   1e304:	3308      	adds	r3, #8
   1e306:	c603      	stmia	r6!, {r0, r1}
   1e308:	42bb      	cmp	r3, r7
   1e30a:	4632      	mov	r2, r6
   1e30c:	d1f7      	bne.n	1e2fe <compute_and_send_master_dhcheck+0x3e>
   1e30e:	6818      	ldr	r0, [r3, #0]
   1e310:	791b      	ldrb	r3, [r3, #4]
	sys_memcpy_swap(ws, w, 32);
   1e312:	2220      	movs	r2, #32
	uint8_t m[53] = { 0x00, /* counter */
   1e314:	6030      	str	r0, [r6, #0]
   1e316:	7133      	strb	r3, [r6, #4]
	sys_memcpy_swap(ws, w, 32);
   1e318:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1e31c:	a80c      	add	r0, sp, #48	; 0x30
   1e31e:	f7ff fe7d 	bl	1e01c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1e322:	2220      	movs	r2, #32
   1e324:	4852      	ldr	r0, [pc, #328]	; (1e470 <compute_and_send_master_dhcheck+0x1b0>)
   1e326:	ab08      	add	r3, sp, #32
   1e328:	a90c      	add	r1, sp, #48	; 0x30
   1e32a:	f00b fd94 	bl	29e56 <bt_smp_aes_cmac>
	if (err) {
   1e32e:	2800      	cmp	r0, #0
   1e330:	f040 8092 	bne.w	1e458 <compute_and_send_master_dhcheck+0x198>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   1e334:	f104 0727 	add.w	r7, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   1e338:	2210      	movs	r2, #16
   1e33a:	4639      	mov	r1, r7
   1e33c:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   1e340:	f104 0837 	add.w	r8, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   1e344:	f7ff fe6a 	bl	1e01c <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1e348:	2210      	movs	r2, #16
   1e34a:	4641      	mov	r1, r8
   1e34c:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   1e350:	f7ff fe64 	bl	1e01c <sys_memcpy_swap>
	m[37] = a1->type;
   1e354:	f895 3097 	ldrb.w	r3, [r5, #151]	; 0x97
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1e358:	2206      	movs	r2, #6
   1e35a:	f105 0198 	add.w	r1, r5, #152	; 0x98
   1e35e:	f10d 0076 	add.w	r0, sp, #118	; 0x76
	m[37] = a1->type;
   1e362:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1e366:	f7ff fe59 	bl	1e01c <sys_memcpy_swap>
	m[44] = a2->type;
   1e36a:	f895 309e 	ldrb.w	r3, [r5, #158]	; 0x9e
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1e36e:	2206      	movs	r2, #6
   1e370:	f105 019f 	add.w	r1, r5, #159	; 0x9f
   1e374:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1e378:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   1e37c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1e380:	f7ff fe4c 	bl	1e01c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1e384:	4633      	mov	r3, r6
   1e386:	2235      	movs	r2, #53	; 0x35
   1e388:	a914      	add	r1, sp, #80	; 0x50
   1e38a:	a808      	add	r0, sp, #32
   1e38c:	f00b fd63 	bl	29e56 <bt_smp_aes_cmac>
	if (err) {
   1e390:	2800      	cmp	r0, #0
   1e392:	d161      	bne.n	1e458 <compute_and_send_master_dhcheck+0x198>
	sys_mem_swap(mackey, 16);
   1e394:	4630      	mov	r0, r6
   1e396:	f00b fd97 	bl	29ec8 <sys_mem_swap.constprop.0>
	m[0] = 0x01;
   1e39a:	2301      	movs	r3, #1
		   smp->tk)) {
   1e39c:	f104 0547 	add.w	r5, r4, #71	; 0x47
	m[0] = 0x01;
   1e3a0:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1e3a4:	2235      	movs	r2, #53	; 0x35
   1e3a6:	462b      	mov	r3, r5
   1e3a8:	a914      	add	r1, sp, #80	; 0x50
   1e3aa:	a808      	add	r0, sp, #32
   1e3ac:	f00b fd53 	bl	29e56 <bt_smp_aes_cmac>
	if (err) {
   1e3b0:	2800      	cmp	r0, #0
   1e3b2:	d151      	bne.n	1e458 <compute_and_send_master_dhcheck+0x198>
	sys_mem_swap(ltk, 16);
   1e3b4:	4628      	mov	r0, r5
   1e3b6:	f00b fd87 	bl	29ec8 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.init_addr,
   1e3ba:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   1e3be:	aa14      	add	r2, sp, #80	; 0x50
   1e3c0:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, e)) {
   1e3c2:	f103 029e 	add.w	r2, r3, #158	; 0x9e
		   &smp->chan.chan.conn->le.init_addr,
   1e3c6:	3397      	adds	r3, #151	; 0x97
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   1e3c8:	9301      	str	r3, [sp, #4]
   1e3ca:	f104 030a 	add.w	r3, r4, #10
   1e3ce:	9202      	str	r2, [sp, #8]
   1e3d0:	9300      	str	r3, [sp, #0]
   1e3d2:	4642      	mov	r2, r8
   1e3d4:	4639      	mov	r1, r7
   1e3d6:	4630      	mov	r0, r6
   1e3d8:	ab04      	add	r3, sp, #16
   1e3da:	f00b fd83 	bl	29ee4 <smp_f6>
   1e3de:	4605      	mov	r5, r0
   1e3e0:	b1f8      	cbz	r0, 1e422 <compute_and_send_master_dhcheck+0x162>
   1e3e2:	4924      	ldr	r1, [pc, #144]	; (1e474 <compute_and_send_master_dhcheck+0x1b4>)
   1e3e4:	4b24      	ldr	r3, [pc, #144]	; (1e478 <compute_and_send_master_dhcheck+0x1b8>)
		BT_ERR("Calculate local DHKey check failed");
   1e3e6:	4825      	ldr	r0, [pc, #148]	; (1e47c <compute_and_send_master_dhcheck+0x1bc>)
   1e3e8:	1ac9      	subs	r1, r1, r3
   1e3ea:	08c9      	lsrs	r1, r1, #3
   1e3ec:	0189      	lsls	r1, r1, #6
   1e3ee:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate LTK failed");
   1e3f2:	f008 fc9d 	bl	26d30 <log_0>
   1e3f6:	e012      	b.n	1e41e <compute_and_send_master_dhcheck+0x15e>
		if (smp->oobd_remote) {
   1e3f8:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1e3fc:	2900      	cmp	r1, #0
   1e3fe:	f43f af78 	beq.w	1e2f2 <compute_and_send_master_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1e402:	2210      	movs	r2, #16
   1e404:	eb0d 0002 	add.w	r0, sp, r2
   1e408:	e771      	b.n	1e2ee <compute_and_send_master_dhcheck+0x2e>
   1e40a:	4a1a      	ldr	r2, [pc, #104]	; (1e474 <compute_and_send_master_dhcheck+0x1b4>)
   1e40c:	4b1a      	ldr	r3, [pc, #104]	; (1e478 <compute_and_send_master_dhcheck+0x1b8>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1e40e:	481c      	ldr	r0, [pc, #112]	; (1e480 <compute_and_send_master_dhcheck+0x1c0>)
   1e410:	1ad2      	subs	r2, r2, r3
   1e412:	08d2      	lsrs	r2, r2, #3
   1e414:	0192      	lsls	r2, r2, #6
   1e416:	f042 0201 	orr.w	r2, r2, #1
   1e41a:	f008 fc96 	bl	26d4a <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1e41e:	2008      	movs	r0, #8
   1e420:	e017      	b.n	1e452 <compute_and_send_master_dhcheck+0x192>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1e422:	210d      	movs	r1, #13
   1e424:	4620      	mov	r0, r4
   1e426:	f00b fe0b 	bl	2a040 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1e42a:	210d      	movs	r1, #13
   1e42c:	f00b fe18 	bl	2a060 <smp_create_pdu.isra.0>
	if (!buf) {
   1e430:	4606      	mov	r6, r0
   1e432:	2800      	cmp	r0, #0
   1e434:	d0f3      	beq.n	1e41e <compute_and_send_master_dhcheck+0x15e>
   1e436:	2110      	movs	r1, #16
   1e438:	3008      	adds	r0, #8
   1e43a:	f001 ff65 	bl	20308 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1e43e:	2210      	movs	r2, #16
   1e440:	a914      	add	r1, sp, #80	; 0x50
   1e442:	f00a f8a6 	bl	28592 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1e446:	4620      	mov	r0, r4
   1e448:	462a      	mov	r2, r5
   1e44a:	4631      	mov	r1, r6
   1e44c:	f00b fd1f 	bl	29e8e <smp_send.isra.0>
	return 0;
   1e450:	4628      	mov	r0, r5
}
   1e452:	b022      	add	sp, #136	; 0x88
   1e454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e458:	4906      	ldr	r1, [pc, #24]	; (1e474 <compute_and_send_master_dhcheck+0x1b4>)
   1e45a:	4b07      	ldr	r3, [pc, #28]	; (1e478 <compute_and_send_master_dhcheck+0x1b8>)
		BT_ERR("Calculate LTK failed");
   1e45c:	4809      	ldr	r0, [pc, #36]	; (1e484 <compute_and_send_master_dhcheck+0x1c4>)
   1e45e:	1ac9      	subs	r1, r1, r3
   1e460:	08c9      	lsrs	r1, r1, #3
   1e462:	0189      	lsls	r1, r1, #6
   1e464:	f041 0101 	orr.w	r1, r1, #1
   1e468:	e7c3      	b.n	1e3f2 <compute_and_send_master_dhcheck+0x132>
   1e46a:	bf00      	nop
   1e46c:	0002c21b 	.word	0x0002c21b
   1e470:	00030604 	.word	0x00030604
   1e474:	0002c064 	.word	0x0002c064
   1e478:	0002bfe4 	.word	0x0002bfe4
   1e47c:	00030321 	.word	0x00030321
   1e480:	00030305 	.word	0x00030305
   1e484:	00030344 	.word	0x00030344

0001e488 <smp_dhkey_check>:
{
   1e488:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1e48a:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
{
   1e48e:	4604      	mov	r4, r0
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1e490:	78dd      	ldrb	r5, [r3, #3]
{
   1e492:	b091      	sub	sp, #68	; 0x44
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1e494:	2d00      	cmp	r5, #0
   1e496:	d172      	bne.n	1e57e <smp_dhkey_check+0xf6>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   1e498:	688f      	ldr	r7, [r1, #8]
		(void)memset(r, 0, sizeof(r));
   1e49a:	2210      	movs	r2, #16
   1e49c:	4629      	mov	r1, r5
   1e49e:	a80c      	add	r0, sp, #48	; 0x30
   1e4a0:	f00a f8a2 	bl	285e8 <memset>
		switch (smp->method) {
   1e4a4:	7a21      	ldrb	r1, [r4, #8]
   1e4a6:	2905      	cmp	r1, #5
   1e4a8:	d854      	bhi.n	1e554 <smp_dhkey_check+0xcc>
   1e4aa:	e8df f001 	tbb	[pc, r1]
   1e4ae:	0309      	.short	0x0309
   1e4b0:	4d530903 	.word	0x4d530903
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1e4b4:	2204      	movs	r2, #4
   1e4b6:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
				memcpy(r, smp->oobd_local->r, sizeof(r));
   1e4ba:	a80c      	add	r0, sp, #48	; 0x30
   1e4bc:	f00a f869 	bl	28592 <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
   1e4c0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   1e4c4:	ae08      	add	r6, sp, #32
			   &smp->chan.chan.conn->le.init_addr, e)) {
   1e4c6:	f103 0297 	add.w	r2, r3, #151	; 0x97
			   &smp->chan.chan.conn->le.resp_addr,
   1e4ca:	339e      	adds	r3, #158	; 0x9e
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   1e4cc:	9301      	str	r3, [sp, #4]
   1e4ce:	f104 0311 	add.w	r3, r4, #17
   1e4d2:	9202      	str	r2, [sp, #8]
   1e4d4:	9300      	str	r3, [sp, #0]
   1e4d6:	9603      	str	r6, [sp, #12]
   1e4d8:	ab0c      	add	r3, sp, #48	; 0x30
   1e4da:	f104 0227 	add.w	r2, r4, #39	; 0x27
   1e4de:	f104 0137 	add.w	r1, r4, #55	; 0x37
   1e4e2:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
   1e4e6:	f00b fcfd 	bl	29ee4 <smp_f6>
   1e4ea:	2800      	cmp	r0, #0
   1e4ec:	d13c      	bne.n	1e568 <smp_dhkey_check+0xe0>
		if (memcmp(e, req->e, 16)) {
   1e4ee:	4630      	mov	r0, r6
   1e4f0:	2210      	movs	r2, #16
   1e4f2:	4639      	mov	r1, r7
   1e4f4:	f00a f83d 	bl	28572 <memcmp>
   1e4f8:	4606      	mov	r6, r0
   1e4fa:	2800      	cmp	r0, #0
   1e4fc:	d13d      	bne.n	1e57a <smp_dhkey_check+0xf2>
	return MIN(req->max_key_size, rsp->max_key_size);
   1e4fe:	7b63      	ldrb	r3, [r4, #13]
   1e500:	7d27      	ldrb	r7, [r4, #20]
		(void)memset(ediv, 0, sizeof(ediv));
   1e502:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   1e504:	429f      	cmp	r7, r3
   1e506:	bf28      	it	cs
   1e508:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   1e50a:	2202      	movs	r2, #2
   1e50c:	a805      	add	r0, sp, #20
   1e50e:	f00a f86b 	bl	285e8 <memset>
		(void)memset(rand, 0, sizeof(rand));
   1e512:	2208      	movs	r2, #8
   1e514:	4631      	mov	r1, r6
   1e516:	a806      	add	r0, sp, #24
   1e518:	f00a f866 	bl	285e8 <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   1e51c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1e520:	9700      	str	r7, [sp, #0]
   1e522:	f104 0347 	add.w	r3, r4, #71	; 0x47
   1e526:	aa05      	add	r2, sp, #20
   1e528:	a906      	add	r1, sp, #24
   1e52a:	f00a fb35 	bl	28b98 <bt_conn_le_start_encryption>
   1e52e:	2800      	cmp	r0, #0
   1e530:	da1c      	bge.n	1e56c <smp_dhkey_check+0xe4>
   1e532:	4b14      	ldr	r3, [pc, #80]	; (1e584 <smp_dhkey_check+0xfc>)
   1e534:	4914      	ldr	r1, [pc, #80]	; (1e588 <smp_dhkey_check+0x100>)
			BT_ERR("Failed to start encryption");
   1e536:	4815      	ldr	r0, [pc, #84]	; (1e58c <smp_dhkey_check+0x104>)
   1e538:	1ac9      	subs	r1, r1, r3
   1e53a:	08c9      	lsrs	r1, r1, #3
   1e53c:	0189      	lsls	r1, r1, #6
   1e53e:	f041 0101 	orr.w	r1, r1, #1
   1e542:	f008 fbf5 	bl	26d30 <log_0>
			return BT_SMP_ERR_UNSPECIFIED;
   1e546:	e00f      	b.n	1e568 <smp_dhkey_check+0xe0>
			if (smp->oobd_local) {
   1e548:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   1e54c:	2900      	cmp	r1, #0
   1e54e:	d0b7      	beq.n	1e4c0 <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   1e550:	2210      	movs	r2, #16
   1e552:	e7b2      	b.n	1e4ba <smp_dhkey_check+0x32>
   1e554:	4a0c      	ldr	r2, [pc, #48]	; (1e588 <smp_dhkey_check+0x100>)
   1e556:	4b0b      	ldr	r3, [pc, #44]	; (1e584 <smp_dhkey_check+0xfc>)
			BT_ERR("Unknown pairing method (%u)", smp->method);
   1e558:	480d      	ldr	r0, [pc, #52]	; (1e590 <smp_dhkey_check+0x108>)
   1e55a:	1ad2      	subs	r2, r2, r3
   1e55c:	08d2      	lsrs	r2, r2, #3
   1e55e:	0192      	lsls	r2, r2, #6
   1e560:	f042 0201 	orr.w	r2, r2, #1
   1e564:	f008 fbf1 	bl	26d4a <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1e568:	2508      	movs	r5, #8
   1e56a:	e003      	b.n	1e574 <smp_dhkey_check+0xec>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1e56c:	2101      	movs	r1, #1
   1e56e:	1d20      	adds	r0, r4, #4
   1e570:	f00b fd66 	bl	2a040 <atomic_set_bit>
}
   1e574:	4628      	mov	r0, r5
   1e576:	b011      	add	sp, #68	; 0x44
   1e578:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1e57a:	250b      	movs	r5, #11
   1e57c:	e7fa      	b.n	1e574 <smp_dhkey_check+0xec>
	return 0;
   1e57e:	2500      	movs	r5, #0
   1e580:	e7f8      	b.n	1e574 <smp_dhkey_check+0xec>
   1e582:	bf00      	nop
   1e584:	0002bfe4 	.word	0x0002bfe4
   1e588:	0002c064 	.word	0x0002c064
   1e58c:	00030359 	.word	0x00030359
   1e590:	00030305 	.word	0x00030305

0001e594 <smp_send_pairing_req>:
{
   1e594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e598:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   1e59a:	f7ff fd6d 	bl	1e078 <smp_chan_get>
	if (!smp) {
   1e59e:	4604      	mov	r4, r0
   1e5a0:	2800      	cmp	r0, #0
   1e5a2:	f000 80c0 	beq.w	1e726 <smp_send_pairing_req+0x192>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1e5a6:	1d06      	adds	r6, r0, #4
   1e5a8:	2104      	movs	r1, #4
   1e5aa:	4630      	mov	r0, r6
   1e5ac:	f00b fd0d 	bl	29fca <atomic_test_bit>
   1e5b0:	4603      	mov	r3, r0
   1e5b2:	2800      	cmp	r0, #0
   1e5b4:	f040 80ba 	bne.w	1e72c <smp_send_pairing_req+0x198>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1e5b8:	2102      	movs	r1, #2
   1e5ba:	4630      	mov	r0, r6
   1e5bc:	f00b fd05 	bl	29fca <atomic_test_bit>
   1e5c0:	2800      	cmp	r0, #0
   1e5c2:	f040 80b6 	bne.w	1e732 <smp_send_pairing_req+0x19e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1e5c6:	2103      	movs	r1, #3
   1e5c8:	4630      	mov	r0, r6
   1e5ca:	f00b fcfe 	bl	29fca <atomic_test_bit>
   1e5ce:	b120      	cbz	r0, 1e5da <smp_send_pairing_req+0x46>
		return -EBUSY;
   1e5d0:	f06f 050f 	mvn.w	r5, #15
}
   1e5d4:	4628      	mov	r0, r5
   1e5d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1e5da:	2101      	movs	r1, #1
   1e5dc:	4630      	mov	r0, r6
   1e5de:	f00b fcf4 	bl	29fca <atomic_test_bit>
   1e5e2:	2800      	cmp	r0, #0
   1e5e4:	d1f4      	bne.n	1e5d0 <smp_send_pairing_req+0x3c>
	if (!sec_level_reachable(conn)) {
   1e5e6:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
   1e5e8:	2b03      	cmp	r3, #3
   1e5ea:	d016      	beq.n	1e61a <smp_send_pairing_req+0x86>
   1e5ec:	d805      	bhi.n	1e5fa <smp_send_pairing_req+0x66>
   1e5ee:	3b01      	subs	r3, #1
   1e5f0:	2b01      	cmp	r3, #1
   1e5f2:	d920      	bls.n	1e636 <smp_send_pairing_req+0xa2>
		return -EINVAL;
   1e5f4:	f06f 0515 	mvn.w	r5, #21
   1e5f8:	e7ec      	b.n	1e5d4 <smp_send_pairing_req+0x40>
	switch (conn->required_sec_level) {
   1e5fa:	2b04      	cmp	r3, #4
   1e5fc:	d1fa      	bne.n	1e5f4 <smp_send_pairing_req+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1e5fe:	f7ff fce7 	bl	1dfd0 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1e602:	2803      	cmp	r0, #3
   1e604:	d104      	bne.n	1e610 <smp_send_pairing_req+0x7c>
   1e606:	4b4c      	ldr	r3, [pc, #304]	; (1e738 <smp_send_pairing_req+0x1a4>)
   1e608:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1e60a:	b343      	cbz	r3, 1e65e <smp_send_pairing_req+0xca>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1e60c:	68db      	ldr	r3, [r3, #12]
   1e60e:	b10b      	cbz	r3, 1e614 <smp_send_pairing_req+0x80>
   1e610:	4b4a      	ldr	r3, [pc, #296]	; (1e73c <smp_send_pairing_req+0x1a8>)
   1e612:	781b      	ldrb	r3, [r3, #0]
   1e614:	f003 0301 	and.w	r3, r3, #1
   1e618:	e00b      	b.n	1e632 <smp_send_pairing_req+0x9e>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1e61a:	f7ff fcd9 	bl	1dfd0 <get_io_capa>
   1e61e:	2803      	cmp	r0, #3
   1e620:	d11b      	bne.n	1e65a <smp_send_pairing_req+0xc6>
		       (bt_auth && bt_auth->oob_data_request);
   1e622:	4b45      	ldr	r3, [pc, #276]	; (1e738 <smp_send_pairing_req+0x1a4>)
   1e624:	681b      	ldr	r3, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1e626:	2b00      	cmp	r3, #0
   1e628:	d0e4      	beq.n	1e5f4 <smp_send_pairing_req+0x60>
		       (bt_auth && bt_auth->oob_data_request);
   1e62a:	68db      	ldr	r3, [r3, #12]
   1e62c:	3b00      	subs	r3, #0
   1e62e:	bf18      	it	ne
   1e630:	2301      	movne	r3, #1
	if (!sec_level_reachable(conn)) {
   1e632:	2b00      	cmp	r3, #0
   1e634:	d0de      	beq.n	1e5f4 <smp_send_pairing_req+0x60>
	if (!conn->le.keys) {
   1e636:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1e63a:	b193      	cbz	r3, 1e662 <smp_send_pairing_req+0xce>
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1e63c:	22f0      	movs	r2, #240	; 0xf0
   1e63e:	2100      	movs	r1, #0
   1e640:	4620      	mov	r0, r4
   1e642:	f009 ffd1 	bl	285e8 <memset>
	if (bt_rand(smp->prnd, 16)) {
   1e646:	2110      	movs	r1, #16
   1e648:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1e64c:	f7fa ff40 	bl	194d0 <bt_rand>
   1e650:	4605      	mov	r5, r0
   1e652:	b190      	cbz	r0, 1e67a <smp_send_pairing_req+0xe6>
		return -ENOBUFS;
   1e654:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1e658:	e7bc      	b.n	1e5d4 <smp_send_pairing_req+0x40>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1e65a:	2301      	movs	r3, #1
   1e65c:	e7e9      	b.n	1e632 <smp_send_pairing_req+0x9e>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1e65e:	2300      	movs	r3, #0
   1e660:	e7d8      	b.n	1e614 <smp_send_pairing_req+0x80>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1e662:	7a28      	ldrb	r0, [r5, #8]
   1e664:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1e668:	f001 f9e2 	bl	1fa30 <bt_keys_get_addr>
   1e66c:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   1e670:	2800      	cmp	r0, #0
   1e672:	d1e3      	bne.n	1e63c <smp_send_pairing_req+0xa8>
			return -ENOMEM;
   1e674:	f06f 050b 	mvn.w	r5, #11
   1e678:	e7ac      	b.n	1e5d4 <smp_send_pairing_req+0x40>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1e67a:	2105      	movs	r1, #5
   1e67c:	4620      	mov	r0, r4
   1e67e:	f00b fcdf 	bl	2a040 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1e682:	f7fa ffd7 	bl	19634 <bt_pub_key_get>
   1e686:	4b2e      	ldr	r3, [pc, #184]	; (1e740 <smp_send_pairing_req+0x1ac>)
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   1e688:	2101      	movs	r1, #1
	sc_public_key = bt_pub_key_get();
   1e68a:	6018      	str	r0, [r3, #0]
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   1e68c:	4620      	mov	r0, r4
   1e68e:	f00b fce7 	bl	2a060 <smp_create_pdu.isra.0>
	if (!req_buf) {
   1e692:	4681      	mov	r9, r0
   1e694:	2800      	cmp	r0, #0
   1e696:	d0dd      	beq.n	1e654 <smp_send_pairing_req+0xc0>
   1e698:	2106      	movs	r1, #6
   1e69a:	3008      	adds	r0, #8
   1e69c:	f001 fe34 	bl	20308 <net_buf_simple_add>
	if (sc_supported) {
   1e6a0:	4b26      	ldr	r3, [pc, #152]	; (1e73c <smp_send_pairing_req+0x1a8>)
   1e6a2:	4607      	mov	r7, r0
   1e6a4:	781b      	ldrb	r3, [r3, #0]
		auth &= BT_SMP_AUTH_MASK;
   1e6a6:	2b00      	cmp	r3, #0
   1e6a8:	bf14      	ite	ne
   1e6aa:	f04f 0809 	movne.w	r8, #9
   1e6ae:	f04f 0801 	moveq.w	r8, #1
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1e6b2:	f7ff fc8d 	bl	1dfd0 <get_io_capa>
	if (bondable) {
   1e6b6:	4b23      	ldr	r3, [pc, #140]	; (1e744 <smp_send_pairing_req+0x1b0>)
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1e6b8:	2803      	cmp	r0, #3
	if (bondable) {
   1e6ba:	781b      	ldrb	r3, [r3, #0]
		auth |= BT_SMP_AUTH_MITM;
   1e6bc:	bf18      	it	ne
   1e6be:	f048 0804 	orrne.w	r8, r8, #4
	if (bondable) {
   1e6c2:	b36b      	cbz	r3, 1e720 <smp_send_pairing_req+0x18c>
		auth |= BT_SMP_AUTH_BONDING;
   1e6c4:	f048 0801 	orr.w	r8, r8, #1
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   1e6c8:	f887 8002 	strb.w	r8, [r7, #2]
	req->io_capability = get_io_capa();
   1e6cc:	f7ff fc80 	bl	1dfd0 <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1e6d0:	4b1d      	ldr	r3, [pc, #116]	; (1e748 <smp_send_pairing_req+0x1b4>)
	req->resp_key_dist = RECV_KEYS;
   1e6d2:	f04f 0803 	mov.w	r8, #3
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1e6d6:	781b      	ldrb	r3, [r3, #0]
	smp->local_dist = SEND_KEYS;
   1e6d8:	f240 3201 	movw	r2, #769	; 0x301
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1e6dc:	707b      	strb	r3, [r7, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1e6de:	2310      	movs	r3, #16
   1e6e0:	70fb      	strb	r3, [r7, #3]
	req->init_key_dist = SEND_KEYS;
   1e6e2:	2301      	movs	r3, #1
	req->io_capability = get_io_capa();
   1e6e4:	7038      	strb	r0, [r7, #0]
	req->init_key_dist = SEND_KEYS;
   1e6e6:	713b      	strb	r3, [r7, #4]
	req->resp_key_dist = RECV_KEYS;
   1e6e8:	f887 8005 	strb.w	r8, [r7, #5]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1e6ec:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1e6ee:	7263      	strb	r3, [r4, #9]
	smp->local_dist = SEND_KEYS;
   1e6f0:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
	memcpy(smp->preq + 1, req, sizeof(*req));
   1e6f4:	f104 000a 	add.w	r0, r4, #10
   1e6f8:	2206      	movs	r2, #6
   1e6fa:	f009 ff4a 	bl	28592 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1e6fe:	2200      	movs	r2, #0
   1e700:	4649      	mov	r1, r9
   1e702:	4620      	mov	r0, r4
   1e704:	f00b fbc3 	bl	29e8e <smp_send.isra.0>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
   1e708:	4620      	mov	r0, r4
   1e70a:	2102      	movs	r1, #2
   1e70c:	f00b fc98 	bl	2a040 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   1e710:	210b      	movs	r1, #11
   1e712:	f00b fc95 	bl	2a040 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1e716:	4641      	mov	r1, r8
   1e718:	4630      	mov	r0, r6
   1e71a:	f00b fc91 	bl	2a040 <atomic_set_bit>
	return 0;
   1e71e:	e759      	b.n	1e5d4 <smp_send_pairing_req+0x40>
		auth &= ~BT_SMP_AUTH_BONDING;
   1e720:	f008 080c 	and.w	r8, r8, #12
   1e724:	e7d0      	b.n	1e6c8 <smp_send_pairing_req+0x134>
		return -ENOTCONN;
   1e726:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   1e72a:	e753      	b.n	1e5d4 <smp_send_pairing_req+0x40>
		return -EIO;
   1e72c:	f06f 0504 	mvn.w	r5, #4
   1e730:	e750      	b.n	1e5d4 <smp_send_pairing_req+0x40>
		return 0;
   1e732:	461d      	mov	r5, r3
   1e734:	e74e      	b.n	1e5d4 <smp_send_pairing_req+0x40>
   1e736:	bf00      	nop
   1e738:	20009814 	.word	0x20009814
   1e73c:	2000a51d 	.word	0x2000a51d
   1e740:	200098c8 	.word	0x200098c8
   1e744:	200083c0 	.word	0x200083c0
   1e748:	2000a51c 	.word	0x2000a51c

0001e74c <smp_security_request>:
{
   1e74c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1e74e:	1d04      	adds	r4, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   1e750:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	struct bt_smp_security_request *req = (void *)buf->data;
   1e754:	688b      	ldr	r3, [r1, #8]
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1e756:	4620      	mov	r0, r4
   1e758:	2102      	movs	r1, #2
   1e75a:	f00b fc36 	bl	29fca <atomic_test_bit>
   1e75e:	b110      	cbz	r0, 1e766 <smp_security_request+0x1a>
	return 0;
   1e760:	2000      	movs	r0, #0
}
   1e762:	b003      	add	sp, #12
   1e764:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1e766:	2103      	movs	r1, #3
   1e768:	4620      	mov	r0, r4
   1e76a:	f00b fc2e 	bl	29fca <atomic_test_bit>
   1e76e:	2800      	cmp	r0, #0
   1e770:	d1f6      	bne.n	1e760 <smp_security_request+0x14>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1e772:	2101      	movs	r1, #1
   1e774:	4620      	mov	r0, r4
   1e776:	f00b fc28 	bl	29fca <atomic_test_bit>
   1e77a:	2800      	cmp	r0, #0
   1e77c:	d1f0      	bne.n	1e760 <smp_security_request+0x14>
	if (sc_supported) {
   1e77e:	781e      	ldrb	r6, [r3, #0]
   1e780:	4b37      	ldr	r3, [pc, #220]	; (1e860 <smp_security_request+0x114>)
   1e782:	781b      	ldrb	r3, [r3, #0]
   1e784:	b17b      	cbz	r3, 1e7a6 <smp_security_request+0x5a>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   1e786:	f006 060f 	and.w	r6, r6, #15
	if (conn->le.keys) {
   1e78a:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1e78e:	b16b      	cbz	r3, 1e7ac <smp_security_request+0x60>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   1e790:	89db      	ldrh	r3, [r3, #14]
   1e792:	f003 0324 	and.w	r3, r3, #36	; 0x24
   1e796:	b9d3      	cbnz	r3, 1e7ce <smp_security_request+0x82>
	if (smp_send_pairing_req(conn) < 0) {
   1e798:	4628      	mov	r0, r5
   1e79a:	f7ff fefb 	bl	1e594 <smp_send_pairing_req>
   1e79e:	2800      	cmp	r0, #0
   1e7a0:	db57      	blt.n	1e852 <smp_security_request+0x106>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1e7a2:	210f      	movs	r1, #15
   1e7a4:	e058      	b.n	1e858 <smp_security_request+0x10c>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
   1e7a6:	f006 0607 	and.w	r6, r6, #7
   1e7aa:	e7ee      	b.n	1e78a <smp_security_request+0x3e>
					     &conn->le.dst);
   1e7ac:	f105 0790 	add.w	r7, r5, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   1e7b0:	463a      	mov	r2, r7
   1e7b2:	2020      	movs	r0, #32
   1e7b4:	7a29      	ldrb	r1, [r5, #8]
   1e7b6:	f001 f97b 	bl	1fab0 <bt_keys_find>
   1e7ba:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   1e7be:	b930      	cbnz	r0, 1e7ce <smp_security_request+0x82>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
   1e7c0:	463a      	mov	r2, r7
   1e7c2:	2004      	movs	r0, #4
   1e7c4:	7a29      	ldrb	r1, [r5, #8]
   1e7c6:	f001 f973 	bl	1fab0 <bt_keys_find>
   1e7ca:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
	if (!conn->le.keys) {
   1e7ce:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
   1e7d2:	2900      	cmp	r1, #0
   1e7d4:	d0e0      	beq.n	1e798 <smp_security_request+0x4c>
	if ((auth & BT_SMP_AUTH_MITM) &&
   1e7d6:	0777      	lsls	r7, r6, #29
   1e7d8:	d51a      	bpl.n	1e810 <smp_security_request+0xc4>
   1e7da:	7b4b      	ldrb	r3, [r1, #13]
   1e7dc:	07d8      	lsls	r0, r3, #31
   1e7de:	d417      	bmi.n	1e810 <smp_security_request+0xc4>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
   1e7e0:	f7ff fbf6 	bl	1dfd0 <get_io_capa>
   1e7e4:	4a1f      	ldr	r2, [pc, #124]	; (1e864 <smp_security_request+0x118>)
   1e7e6:	4b20      	ldr	r3, [pc, #128]	; (1e868 <smp_security_request+0x11c>)
   1e7e8:	2803      	cmp	r0, #3
   1e7ea:	eba2 0203 	sub.w	r2, r2, r3
   1e7ee:	ea4f 02d2 	mov.w	r2, r2, lsr #3
   1e7f2:	ea4f 1282 	mov.w	r2, r2, lsl #6
   1e7f6:	d004      	beq.n	1e802 <smp_security_request+0xb6>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   1e7f8:	4631      	mov	r1, r6
   1e7fa:	481c      	ldr	r0, [pc, #112]	; (1e86c <smp_security_request+0x120>)
   1e7fc:	f042 0203 	orr.w	r2, r2, #3
   1e800:	e003      	b.n	1e80a <smp_security_request+0xbe>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
   1e802:	4631      	mov	r1, r6
   1e804:	481a      	ldr	r0, [pc, #104]	; (1e870 <smp_security_request+0x124>)
   1e806:	f042 0202 	orr.w	r2, r2, #2
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   1e80a:	f008 fa9e 	bl	26d4a <log_1>
		goto pair;
   1e80e:	e7c3      	b.n	1e798 <smp_security_request+0x4c>
	if ((auth & BT_SMP_AUTH_SC) &&
   1e810:	0732      	lsls	r2, r6, #28
   1e812:	d508      	bpl.n	1e826 <smp_security_request+0xda>
   1e814:	89cb      	ldrh	r3, [r1, #14]
   1e816:	069b      	lsls	r3, r3, #26
   1e818:	d405      	bmi.n	1e826 <smp_security_request+0xda>
   1e81a:	4a12      	ldr	r2, [pc, #72]	; (1e864 <smp_security_request+0x118>)
   1e81c:	4b12      	ldr	r3, [pc, #72]	; (1e868 <smp_security_request+0x11c>)
   1e81e:	1ad2      	subs	r2, r2, r3
   1e820:	08d2      	lsrs	r2, r2, #3
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
   1e822:	0192      	lsls	r2, r2, #6
   1e824:	e7e8      	b.n	1e7f8 <smp_security_request+0xac>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
   1e826:	7b0b      	ldrb	r3, [r1, #12]
   1e828:	f101 0218 	add.w	r2, r1, #24
   1e82c:	9300      	str	r3, [sp, #0]
   1e82e:	4628      	mov	r0, r5
   1e830:	f101 031a 	add.w	r3, r1, #26
   1e834:	3110      	adds	r1, #16
   1e836:	f00a f9af 	bl	28b98 <bt_conn_le_start_encryption>
   1e83a:	2800      	cmp	r0, #0
   1e83c:	da0b      	bge.n	1e856 <smp_security_request+0x10a>
   1e83e:	4909      	ldr	r1, [pc, #36]	; (1e864 <smp_security_request+0x118>)
   1e840:	4b09      	ldr	r3, [pc, #36]	; (1e868 <smp_security_request+0x11c>)
		BT_ERR("Failed to start encryption");
   1e842:	480c      	ldr	r0, [pc, #48]	; (1e874 <smp_security_request+0x128>)
   1e844:	1ac9      	subs	r1, r1, r3
   1e846:	08c9      	lsrs	r1, r1, #3
   1e848:	0189      	lsls	r1, r1, #6
   1e84a:	f041 0101 	orr.w	r1, r1, #1
   1e84e:	f008 fa6f 	bl	26d30 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1e852:	2008      	movs	r0, #8
   1e854:	e785      	b.n	1e762 <smp_security_request+0x16>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1e856:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1e858:	4620      	mov	r0, r4
   1e85a:	f00b fbf1 	bl	2a040 <atomic_set_bit>
   1e85e:	e77f      	b.n	1e760 <smp_security_request+0x14>
   1e860:	2000a51d 	.word	0x2000a51d
   1e864:	0002c064 	.word	0x0002c064
   1e868:	0002bfe4 	.word	0x0002bfe4
   1e86c:	00030374 	.word	0x00030374
   1e870:	0003039b 	.word	0x0003039b
   1e874:	00030359 	.word	0x00030359

0001e878 <smp_ident_info>:
{
   1e878:	b570      	push	{r4, r5, r6, lr}
   1e87a:	460b      	mov	r3, r1
   1e87c:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e87e:	210d      	movs	r1, #13
   1e880:	3004      	adds	r0, #4
   1e882:	f00b fba2 	bl	29fca <atomic_test_bit>
   1e886:	b310      	cbz	r0, 1e8ce <smp_ident_info+0x56>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1e888:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1e88a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1e88e:	2002      	movs	r0, #2
   1e890:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1e894:	462a      	mov	r2, r5
   1e896:	7a19      	ldrb	r1, [r3, #8]
   1e898:	f00b fea6 	bl	2a5e8 <bt_keys_get_type>
		if (!keys) {
   1e89c:	b990      	cbnz	r0, 1e8c4 <smp_ident_info+0x4c>
   1e89e:	4a0f      	ldr	r2, [pc, #60]	; (1e8dc <smp_ident_info+0x64>)
   1e8a0:	4c0f      	ldr	r4, [pc, #60]	; (1e8e0 <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
   1e8a2:	4628      	mov	r0, r5
   1e8a4:	1aa4      	subs	r4, r4, r2
   1e8a6:	f7f8 fa69 	bl	16d7c <bt_addr_le_str_real>
   1e8aa:	f7f4 f81f 	bl	128ec <z_log_strdup>
   1e8ae:	08e4      	lsrs	r4, r4, #3
   1e8b0:	01a4      	lsls	r4, r4, #6
   1e8b2:	f044 0401 	orr.w	r4, r4, #1
   1e8b6:	4601      	mov	r1, r0
   1e8b8:	4622      	mov	r2, r4
   1e8ba:	480a      	ldr	r0, [pc, #40]	; (1e8e4 <smp_ident_info+0x6c>)
   1e8bc:	f008 fa45 	bl	26d4a <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1e8c0:	2008      	movs	r0, #8
}
   1e8c2:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
   1e8c4:	2210      	movs	r2, #16
   1e8c6:	4631      	mov	r1, r6
   1e8c8:	302a      	adds	r0, #42	; 0x2a
   1e8ca:	f009 fe62 	bl	28592 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1e8ce:	4620      	mov	r0, r4
   1e8d0:	2109      	movs	r1, #9
   1e8d2:	f00b fbb5 	bl	2a040 <atomic_set_bit>
	return 0;
   1e8d6:	2000      	movs	r0, #0
   1e8d8:	e7f3      	b.n	1e8c2 <smp_ident_info+0x4a>
   1e8da:	bf00      	nop
   1e8dc:	0002bfe4 	.word	0x0002bfe4
   1e8e0:	0002c064 	.word	0x0002c064
   1e8e4:	000303ca 	.word	0x000303ca

0001e8e8 <smp_encrypt_info>:
{
   1e8e8:	b570      	push	{r4, r5, r6, lr}
   1e8ea:	460b      	mov	r3, r1
   1e8ec:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e8ee:	210d      	movs	r1, #13
   1e8f0:	3004      	adds	r0, #4
   1e8f2:	f00b fb6a 	bl	29fca <atomic_test_bit>
   1e8f6:	b310      	cbz	r0, 1e93e <smp_encrypt_info+0x56>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1e8f8:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1e8fa:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1e8fe:	2004      	movs	r0, #4
   1e900:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1e904:	462a      	mov	r2, r5
   1e906:	7a19      	ldrb	r1, [r3, #8]
   1e908:	f00b fe6e 	bl	2a5e8 <bt_keys_get_type>
		if (!keys) {
   1e90c:	b990      	cbnz	r0, 1e934 <smp_encrypt_info+0x4c>
   1e90e:	4a0f      	ldr	r2, [pc, #60]	; (1e94c <smp_encrypt_info+0x64>)
   1e910:	4c0f      	ldr	r4, [pc, #60]	; (1e950 <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
   1e912:	4628      	mov	r0, r5
   1e914:	1aa4      	subs	r4, r4, r2
   1e916:	f7f8 fa31 	bl	16d7c <bt_addr_le_str_real>
   1e91a:	f7f3 ffe7 	bl	128ec <z_log_strdup>
   1e91e:	08e4      	lsrs	r4, r4, #3
   1e920:	01a4      	lsls	r4, r4, #6
   1e922:	f044 0401 	orr.w	r4, r4, #1
   1e926:	4601      	mov	r1, r0
   1e928:	4622      	mov	r2, r4
   1e92a:	480a      	ldr	r0, [pc, #40]	; (1e954 <smp_encrypt_info+0x6c>)
   1e92c:	f008 fa0d 	bl	26d4a <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1e930:	2008      	movs	r0, #8
}
   1e932:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   1e934:	2210      	movs	r2, #16
   1e936:	4631      	mov	r1, r6
   1e938:	301a      	adds	r0, #26
   1e93a:	f009 fe2a 	bl	28592 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
   1e93e:	4620      	mov	r0, r4
   1e940:	2107      	movs	r1, #7
   1e942:	f00b fb7d 	bl	2a040 <atomic_set_bit>
	return 0;
   1e946:	2000      	movs	r0, #0
   1e948:	e7f3      	b.n	1e932 <smp_encrypt_info+0x4a>
   1e94a:	bf00      	nop
   1e94c:	0002bfe4 	.word	0x0002bfe4
   1e950:	0002c064 	.word	0x0002c064
   1e954:	000303ca 	.word	0x000303ca

0001e958 <smp_send_pairing_confirm>:
{
   1e958:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   1e95a:	7a04      	ldrb	r4, [r0, #8]
{
   1e95c:	4605      	mov	r5, r0
	switch (smp->method) {
   1e95e:	2c02      	cmp	r4, #2
   1e960:	d824      	bhi.n	1e9ac <smp_send_pairing_confirm+0x54>
   1e962:	b14c      	cbz	r4, 1e978 <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1e964:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1e968:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1e96c:	40dc      	lsrs	r4, r3
   1e96e:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1e972:	f064 047f 	orn	r4, r4, #127	; 0x7f
   1e976:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1e978:	2103      	movs	r1, #3
   1e97a:	4628      	mov	r0, r5
   1e97c:	f00b fb70 	bl	2a060 <smp_create_pdu.isra.0>
	if (!buf) {
   1e980:	4606      	mov	r6, r0
   1e982:	b300      	cbz	r0, 1e9c6 <smp_send_pairing_confirm+0x6e>
   1e984:	2110      	movs	r1, #16
   1e986:	3008      	adds	r0, #8
   1e988:	f001 fcbe 	bl	20308 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1e98c:	9000      	str	r0, [sp, #0]
   1e98e:	4816      	ldr	r0, [pc, #88]	; (1e9e8 <smp_send_pairing_confirm+0x90>)
   1e990:	4623      	mov	r3, r4
   1e992:	6800      	ldr	r0, [r0, #0]
   1e994:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1e998:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1e99c:	f00b faee 	bl	29f7c <smp_f4>
   1e9a0:	4604      	mov	r4, r0
   1e9a2:	b1a0      	cbz	r0, 1e9ce <smp_send_pairing_confirm+0x76>
		net_buf_unref(buf);
   1e9a4:	4630      	mov	r0, r6
   1e9a6:	f001 fb7f 	bl	200a8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1e9aa:	e00c      	b.n	1e9c6 <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
   1e9ac:	2c03      	cmp	r4, #3
   1e9ae:	d00c      	beq.n	1e9ca <smp_send_pairing_confirm+0x72>
   1e9b0:	4a0e      	ldr	r2, [pc, #56]	; (1e9ec <smp_send_pairing_confirm+0x94>)
   1e9b2:	4b0f      	ldr	r3, [pc, #60]	; (1e9f0 <smp_send_pairing_confirm+0x98>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1e9b4:	4621      	mov	r1, r4
   1e9b6:	1ad2      	subs	r2, r2, r3
   1e9b8:	08d2      	lsrs	r2, r2, #3
   1e9ba:	0192      	lsls	r2, r2, #6
   1e9bc:	480d      	ldr	r0, [pc, #52]	; (1e9f4 <smp_send_pairing_confirm+0x9c>)
   1e9be:	f042 0201 	orr.w	r2, r2, #1
   1e9c2:	f008 f9c2 	bl	26d4a <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1e9c6:	2008      	movs	r0, #8
   1e9c8:	e00b      	b.n	1e9e2 <smp_send_pairing_confirm+0x8a>
	switch (smp->method) {
   1e9ca:	2400      	movs	r4, #0
   1e9cc:	e7d4      	b.n	1e978 <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
   1e9ce:	4602      	mov	r2, r0
   1e9d0:	4631      	mov	r1, r6
   1e9d2:	4628      	mov	r0, r5
   1e9d4:	f00b fa5b 	bl	29e8e <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1e9d8:	1d28      	adds	r0, r5, #4
   1e9da:	4621      	mov	r1, r4
   1e9dc:	f00b fb97 	bl	2a10e <atomic_clear_bit>
	return 0;
   1e9e0:	4620      	mov	r0, r4
}
   1e9e2:	b002      	add	sp, #8
   1e9e4:	bd70      	pop	{r4, r5, r6, pc}
   1e9e6:	bf00      	nop
   1e9e8:	200098c8 	.word	0x200098c8
   1e9ec:	0002c064 	.word	0x0002c064
   1e9f0:	0002bfe4 	.word	0x0002bfe4
   1e9f4:	00030305 	.word	0x00030305

0001e9f8 <smp_dhkey_generate>:
{
   1e9f8:	b538      	push	{r3, r4, r5, lr}
   1e9fa:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1e9fc:	1d05      	adds	r5, r0, #4
   1e9fe:	2108      	movs	r1, #8
   1ea00:	4628      	mov	r0, r5
   1ea02:	f00b fb1d 	bl	2a040 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1ea06:	490b      	ldr	r1, [pc, #44]	; (1ea34 <smp_dhkey_generate+0x3c>)
   1ea08:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1ea0c:	f7fa fe20 	bl	19650 <bt_dh_key_gen>
	if (err) {
   1ea10:	b170      	cbz	r0, 1ea30 <smp_dhkey_generate+0x38>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1ea12:	2108      	movs	r1, #8
   1ea14:	4628      	mov	r0, r5
   1ea16:	f00b fb7a 	bl	2a10e <atomic_clear_bit>
   1ea1a:	4b07      	ldr	r3, [pc, #28]	; (1ea38 <smp_dhkey_generate+0x40>)
   1ea1c:	4907      	ldr	r1, [pc, #28]	; (1ea3c <smp_dhkey_generate+0x44>)
		BT_ERR("Failed to generate DHKey");
   1ea1e:	4808      	ldr	r0, [pc, #32]	; (1ea40 <smp_dhkey_generate+0x48>)
   1ea20:	1ac9      	subs	r1, r1, r3
   1ea22:	08c9      	lsrs	r1, r1, #3
   1ea24:	0189      	lsls	r1, r1, #6
   1ea26:	f041 0101 	orr.w	r1, r1, #1
   1ea2a:	f008 f981 	bl	26d30 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1ea2e:	2008      	movs	r0, #8
}
   1ea30:	bd38      	pop	{r3, r4, r5, pc}
   1ea32:	bf00      	nop
   1ea34:	0002a4f5 	.word	0x0002a4f5
   1ea38:	0002bfe4 	.word	0x0002bfe4
   1ea3c:	0002c064 	.word	0x0002c064
   1ea40:	000303e4 	.word	0x000303e4

0001ea44 <smp_public_key>:
{
   1ea44:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   1ea46:	688d      	ldr	r5, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
   1ea48:	f100 0657 	add.w	r6, r0, #87	; 0x57
{
   1ea4c:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
   1ea4e:	2220      	movs	r2, #32
   1ea50:	4629      	mov	r1, r5
   1ea52:	4630      	mov	r0, r6
   1ea54:	f009 fd9d 	bl	28592 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
   1ea58:	2220      	movs	r2, #32
   1ea5a:	f104 0077 	add.w	r0, r4, #119	; 0x77
   1ea5e:	18a9      	adds	r1, r5, r2
   1ea60:	f009 fd97 	bl	28592 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1ea64:	4630      	mov	r0, r6
   1ea66:	f7fa fd4b 	bl	19500 <bt_pub_key_is_debug>
   1ea6a:	b9f8      	cbnz	r0, 1eaac <smp_public_key+0x68>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1ea6c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1ea70:	78db      	ldrb	r3, [r3, #3]
   1ea72:	2b00      	cmp	r3, #0
   1ea74:	d143      	bne.n	1eafe <smp_public_key+0xba>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ea76:	1d25      	adds	r5, r4, #4
   1ea78:	210e      	movs	r1, #14
   1ea7a:	4628      	mov	r0, r5
   1ea7c:	f00b faa5 	bl	29fca <atomic_test_bit>
   1ea80:	2800      	cmp	r0, #0
   1ea82:	d13e      	bne.n	1eb02 <smp_public_key+0xbe>
		    memcmp(smp->pkey, sc_public_key, 32) == 0) {
   1ea84:	4b69      	ldr	r3, [pc, #420]	; (1ec2c <smp_public_key+0x1e8>)
   1ea86:	2220      	movs	r2, #32
   1ea88:	4630      	mov	r0, r6
   1ea8a:	6819      	ldr	r1, [r3, #0]
   1ea8c:	f009 fd71 	bl	28572 <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ea90:	2800      	cmp	r0, #0
   1ea92:	d136      	bne.n	1eb02 <smp_public_key+0xbe>
   1ea94:	4966      	ldr	r1, [pc, #408]	; (1ec30 <smp_public_key+0x1ec>)
   1ea96:	4b67      	ldr	r3, [pc, #412]	; (1ec34 <smp_public_key+0x1f0>)
			BT_WARN("Remote public key rejected");
   1ea98:	4867      	ldr	r0, [pc, #412]	; (1ec38 <smp_public_key+0x1f4>)
   1ea9a:	1ac9      	subs	r1, r1, r3
   1ea9c:	08c9      	lsrs	r1, r1, #3
   1ea9e:	0189      	lsls	r1, r1, #6
   1eaa0:	f041 0102 	orr.w	r1, r1, #2
   1eaa4:	f008 f944 	bl	26d30 <log_0>
			return BT_SMP_ERR_UNSPECIFIED;
   1eaa8:	2008      	movs	r0, #8
   1eaaa:	e026      	b.n	1eafa <smp_public_key+0xb6>
   1eaac:	4b61      	ldr	r3, [pc, #388]	; (1ec34 <smp_public_key+0x1f0>)
   1eaae:	4960      	ldr	r1, [pc, #384]	; (1ec30 <smp_public_key+0x1ec>)
		BT_INFO("Remote is using Debug Public key");
   1eab0:	4862      	ldr	r0, [pc, #392]	; (1ec3c <smp_public_key+0x1f8>)
   1eab2:	1ac9      	subs	r1, r1, r3
   1eab4:	08c9      	lsrs	r1, r1, #3
   1eab6:	0189      	lsls	r1, r1, #6
   1eab8:	f041 0103 	orr.w	r1, r1, #3
   1eabc:	f008 f938 	bl	26d30 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1eac0:	210e      	movs	r1, #14
   1eac2:	1d20      	adds	r0, r4, #4
   1eac4:	f00b fabc 	bl	2a040 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1eac8:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   1eacc:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1ead0:	b933      	cbnz	r3, 1eae0 <smp_public_key+0x9c>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1ead2:	7a28      	ldrb	r0, [r5, #8]
   1ead4:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1ead8:	f000 ffaa 	bl	1fa30 <bt_keys_get_addr>
   1eadc:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
	if (!conn->le.keys ||
   1eae0:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1eae4:	2b00      	cmp	r3, #0
   1eae6:	d0c1      	beq.n	1ea6c <smp_public_key+0x28>
   1eae8:	89da      	ldrh	r2, [r3, #14]
   1eaea:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1eaee:	2a00      	cmp	r2, #0
   1eaf0:	d0bc      	beq.n	1ea6c <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1eaf2:	7b5b      	ldrb	r3, [r3, #13]
   1eaf4:	0799      	lsls	r1, r3, #30
   1eaf6:	d4b9      	bmi.n	1ea6c <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1eaf8:	2003      	movs	r0, #3
}
   1eafa:	b002      	add	sp, #8
   1eafc:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1eafe:	2000      	movs	r0, #0
   1eb00:	e7fb      	b.n	1eafa <smp_public_key+0xb6>
		switch (smp->method) {
   1eb02:	7a21      	ldrb	r1, [r4, #8]
   1eb04:	2905      	cmp	r1, #5
   1eb06:	d87f      	bhi.n	1ec08 <smp_public_key+0x1c4>
   1eb08:	e8df f001 	tbb	[pc, r1]
   1eb0c:	03084203 	.word	0x03084203
   1eb10:	4e7e      	.short	0x4e7e
			atomic_set_bit(smp->allowed_cmds,
   1eb12:	2103      	movs	r1, #3
			atomic_set_bit(smp->allowed_cmds,
   1eb14:	4620      	mov	r0, r4
   1eb16:	f00b fa93 	bl	2a040 <atomic_set_bit>
			break;
   1eb1a:	e02c      	b.n	1eb76 <smp_public_key+0x132>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1eb1c:	2104      	movs	r1, #4
   1eb1e:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1eb22:	f7fa fcd5 	bl	194d0 <bt_rand>
   1eb26:	2800      	cmp	r0, #0
   1eb28:	d1be      	bne.n	1eaa8 <smp_public_key+0x64>
		smp->passkey %= 1000000;
   1eb2a:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1eb2e:	4a44      	ldr	r2, [pc, #272]	; (1ec40 <smp_public_key+0x1fc>)
	if (bt_auth && bt_auth->passkey_display) {
   1eb30:	4e44      	ldr	r6, [pc, #272]	; (1ec44 <smp_public_key+0x200>)
		smp->passkey %= 1000000;
   1eb32:	fbb1 f3f2 	udiv	r3, r1, r2
   1eb36:	fb02 1313 	mls	r3, r2, r3, r1
   1eb3a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   1eb3e:	6833      	ldr	r3, [r6, #0]
	smp->passkey_round = 0U;
   1eb40:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   1eb44:	b163      	cbz	r3, 1eb60 <smp_public_key+0x11c>
   1eb46:	681b      	ldr	r3, [r3, #0]
   1eb48:	b153      	cbz	r3, 1eb60 <smp_public_key+0x11c>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1eb4a:	210b      	movs	r1, #11
   1eb4c:	4628      	mov	r0, r5
   1eb4e:	f00b fa77 	bl	2a040 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   1eb52:	6833      	ldr	r3, [r6, #0]
   1eb54:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1eb58:	681b      	ldr	r3, [r3, #0]
   1eb5a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1eb5e:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   1eb60:	2103      	movs	r1, #3
   1eb62:	4620      	mov	r0, r4
   1eb64:	f00b fa6c 	bl	2a040 <atomic_set_bit>
			atomic_set_bit(smp->allowed_cmds,
   1eb68:	210e      	movs	r1, #14
   1eb6a:	f00b fa69 	bl	2a040 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
   1eb6e:	f7ff fef3 	bl	1e958 <smp_send_pairing_confirm>
			if (err) {
   1eb72:	2800      	cmp	r0, #0
   1eb74:	d1c1      	bne.n	1eafa <smp_public_key+0xb6>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1eb76:	4628      	mov	r0, r5
   1eb78:	2107      	movs	r1, #7
   1eb7a:	f00b fa61 	bl	2a040 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1eb7e:	2008      	movs	r0, #8
   1eb80:	f7ff faba 	bl	1e0f8 <smp_find>
   1eb84:	2800      	cmp	r0, #0
   1eb86:	d1ba      	bne.n	1eafe <smp_public_key+0xba>
		return smp_dhkey_generate(smp);
   1eb88:	4620      	mov	r0, r4
   1eb8a:	f7ff ff35 	bl	1e9f8 <smp_dhkey_generate>
   1eb8e:	e7b4      	b.n	1eafa <smp_public_key+0xb6>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1eb90:	210a      	movs	r1, #10
   1eb92:	4628      	mov	r0, r5
   1eb94:	f00b fa54 	bl	2a040 <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
   1eb98:	4b2a      	ldr	r3, [pc, #168]	; (1ec44 <smp_public_key+0x200>)
   1eb9a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1eb9e:	681b      	ldr	r3, [r3, #0]
   1eba0:	685b      	ldr	r3, [r3, #4]
   1eba2:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   1eba4:	210e      	movs	r1, #14
   1eba6:	e7b5      	b.n	1eb14 <smp_public_key+0xd0>
			if (bt_rand(smp->prnd, 16)) {
   1eba8:	2110      	movs	r1, #16
   1ebaa:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1ebae:	f7fa fc8f 	bl	194d0 <bt_rand>
   1ebb2:	2800      	cmp	r0, #0
   1ebb4:	f47f af78 	bne.w	1eaa8 <smp_public_key+0x64>
			if (bt_auth && bt_auth->oob_data_request) {
   1ebb8:	4e22      	ldr	r6, [pc, #136]	; (1ec44 <smp_public_key+0x200>)
   1ebba:	6833      	ldr	r3, [r6, #0]
   1ebbc:	b37b      	cbz	r3, 1ec1e <smp_public_key+0x1da>
   1ebbe:	68db      	ldr	r3, [r3, #12]
   1ebc0:	b36b      	cbz	r3, 1ec1e <smp_public_key+0x1da>
				struct bt_conn_oob_info info = {
   1ebc2:	4b21      	ldr	r3, [pc, #132]	; (1ec48 <smp_public_key+0x204>)
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1ebc4:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
				struct bt_conn_oob_info info = {
   1ebc8:	881b      	ldrh	r3, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1ebca:	78c9      	ldrb	r1, [r1, #3]
				struct bt_conn_oob_info info = {
   1ebcc:	f8ad 3004 	strh.w	r3, [sp, #4]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1ebd0:	7ae2      	ldrb	r2, [r4, #11]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1ebd2:	7ca3      	ldrb	r3, [r4, #18]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1ebd4:	b939      	cbnz	r1, 1ebe6 <smp_public_key+0x1a2>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   1ebd6:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1ebd8:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   1ebdc:	d421      	bmi.n	1ec22 <smp_public_key+0x1de>
	int oob_config = BT_CONN_OOB_NO_DATA;
   1ebde:	2b00      	cmp	r3, #0
   1ebe0:	bf08      	it	eq
   1ebe2:	2003      	moveq	r0, #3
   1ebe4:	e000      	b.n	1ebe8 <smp_public_key+0x1a4>
   1ebe6:	2003      	movs	r0, #3
				smp->oobd_local = NULL;
   1ebe8:	2300      	movs	r3, #0
	info->lesc.oob_config = oob_config;
   1ebea:	f88d 0005 	strb.w	r0, [sp, #5]
				smp->oobd_remote = NULL;
   1ebee:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
				atomic_set_bit(smp->flags,
   1ebf2:	4628      	mov	r0, r5
   1ebf4:	210c      	movs	r1, #12
   1ebf6:	f00b fa23 	bl	2a040 <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
   1ebfa:	6833      	ldr	r3, [r6, #0]
   1ebfc:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1ec00:	68db      	ldr	r3, [r3, #12]
   1ec02:	a901      	add	r1, sp, #4
   1ec04:	4798      	blx	r3
			break;
   1ec06:	e7b6      	b.n	1eb76 <smp_public_key+0x132>
   1ec08:	4b0a      	ldr	r3, [pc, #40]	; (1ec34 <smp_public_key+0x1f0>)
   1ec0a:	4a09      	ldr	r2, [pc, #36]	; (1ec30 <smp_public_key+0x1ec>)
			BT_ERR("Unknown pairing method (%u)", smp->method);
   1ec0c:	480f      	ldr	r0, [pc, #60]	; (1ec4c <smp_public_key+0x208>)
   1ec0e:	1ad2      	subs	r2, r2, r3
   1ec10:	08d2      	lsrs	r2, r2, #3
   1ec12:	0192      	lsls	r2, r2, #6
   1ec14:	f042 0201 	orr.w	r2, r2, #1
   1ec18:	f008 f897 	bl	26d4a <log_1>
   1ec1c:	e744      	b.n	1eaa8 <smp_public_key+0x64>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
   1ec1e:	2002      	movs	r0, #2
   1ec20:	e76b      	b.n	1eafa <smp_public_key+0xb6>
				     BT_CONN_OOB_BOTH_PEERS :
   1ec22:	2b00      	cmp	r3, #0
   1ec24:	bf0c      	ite	eq
   1ec26:	2001      	moveq	r0, #1
   1ec28:	2002      	movne	r0, #2
   1ec2a:	e7dd      	b.n	1ebe8 <smp_public_key+0x1a4>
   1ec2c:	200098c8 	.word	0x200098c8
   1ec30:	0002c064 	.word	0x0002c064
   1ec34:	0002bfe4 	.word	0x0002bfe4
   1ec38:	0003041e 	.word	0x0003041e
   1ec3c:	000303fd 	.word	0x000303fd
   1ec40:	000f4240 	.word	0x000f4240
   1ec44:	20009814 	.word	0x20009814
   1ec48:	0002c250 	.word	0x0002c250
   1ec4c:	00030305 	.word	0x00030305

0001ec50 <bt_smp_connected>:
{
   1ec50:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1ec52:	4905      	ldr	r1, [pc, #20]	; (1ec68 <bt_smp_connected+0x18>)
   1ec54:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   1ec58:	30f0      	adds	r0, #240	; 0xf0
   1ec5a:	f004 fff7 	bl	23c4c <k_work_init_delayable>
	smp_reset(smp);
   1ec5e:	4620      	mov	r0, r4
}
   1ec60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   1ec64:	f00b ba5e 	b.w	2a124 <smp_reset>
   1ec68:	0001f851 	.word	0x0001f851

0001ec6c <smp_pairing_rsp>:
{
   1ec6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
   1ec70:	688f      	ldr	r7, [r1, #8]
{
   1ec72:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1ec74:	78fb      	ldrb	r3, [r7, #3]
   1ec76:	3b07      	subs	r3, #7
   1ec78:	2b09      	cmp	r3, #9
   1ec7a:	d904      	bls.n	1ec86 <smp_pairing_rsp+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1ec7c:	2706      	movs	r7, #6
}
   1ec7e:	4638      	mov	r0, r7
   1ec80:	b002      	add	sp, #8
   1ec82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	smp->local_dist &= rsp->init_key_dist;
   1ec86:	793a      	ldrb	r2, [r7, #4]
   1ec88:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
	struct bt_conn *conn = smp->chan.chan.conn;
   1ec8c:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	smp->local_dist &= rsp->init_key_dist;
   1ec90:	4013      	ands	r3, r2
   1ec92:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	smp->remote_dist &= rsp->resp_key_dist;
   1ec96:	797a      	ldrb	r2, [r7, #5]
   1ec98:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   1ec9c:	4639      	mov	r1, r7
	smp->remote_dist &= rsp->resp_key_dist;
   1ec9e:	4013      	ands	r3, r2
   1eca0:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1eca4:	2302      	movs	r3, #2
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   1eca6:	2206      	movs	r2, #6
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1eca8:	7403      	strb	r3, [r0, #16]
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   1ecaa:	3011      	adds	r0, #17
   1ecac:	f009 fc71 	bl	28592 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1ecb0:	78bb      	ldrb	r3, [r7, #2]
   1ecb2:	1d25      	adds	r5, r4, #4
   1ecb4:	0718      	lsls	r0, r3, #28
   1ecb6:	d506      	bpl.n	1ecc6 <smp_pairing_rsp+0x5a>
   1ecb8:	7b23      	ldrb	r3, [r4, #12]
   1ecba:	0719      	lsls	r1, r3, #28
   1ecbc:	d503      	bpl.n	1ecc6 <smp_pairing_rsp+0x5a>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1ecbe:	2105      	movs	r1, #5
   1ecc0:	4628      	mov	r0, r5
   1ecc2:	f00b f9bd 	bl	2a040 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1ecc6:	78bb      	ldrb	r3, [r7, #2]
   1ecc8:	069a      	lsls	r2, r3, #26
   1ecca:	d506      	bpl.n	1ecda <smp_pairing_rsp+0x6e>
   1eccc:	7b23      	ldrb	r3, [r4, #12]
   1ecce:	069b      	lsls	r3, r3, #26
   1ecd0:	d503      	bpl.n	1ecda <smp_pairing_rsp+0x6e>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1ecd2:	2114      	movs	r1, #20
   1ecd4:	4628      	mov	r0, r5
   1ecd6:	f00b f9b3 	bl	2a040 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1ecda:	78bb      	ldrb	r3, [r7, #2]
   1ecdc:	07d8      	lsls	r0, r3, #31
   1ecde:	d506      	bpl.n	1ecee <smp_pairing_rsp+0x82>
   1ece0:	7b23      	ldrb	r3, [r4, #12]
   1ece2:	07d9      	lsls	r1, r3, #31
   1ece4:	d503      	bpl.n	1ecee <smp_pairing_rsp+0x82>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1ece6:	210d      	movs	r1, #13
   1ece8:	4628      	mov	r0, r5
   1ecea:	f00b f9a9 	bl	2a040 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ecee:	2105      	movs	r1, #5
   1ecf0:	4628      	mov	r0, r5
	smp->method = get_pair_method(smp, rsp->io_capability);
   1ecf2:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ecf4:	f00b f969 	bl	29fca <atomic_test_bit>
   1ecf8:	bb28      	cbnz	r0, 1ed46 <smp_pairing_rsp+0xda>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1ecfa:	2f04      	cmp	r7, #4
   1ecfc:	d81a      	bhi.n	1ed34 <smp_pairing_rsp+0xc8>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1ecfe:	7ca2      	ldrb	r2, [r4, #18]
   1ed00:	7ae3      	ldrb	r3, [r4, #11]
   1ed02:	4013      	ands	r3, r2
   1ed04:	07da      	lsls	r2, r3, #31
   1ed06:	d437      	bmi.n	1ed78 <smp_pairing_rsp+0x10c>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1ed08:	7b20      	ldrb	r0, [r4, #12]
   1ed0a:	7ce3      	ldrb	r3, [r4, #19]
   1ed0c:	4318      	orrs	r0, r3
   1ed0e:	f010 0004 	ands.w	r0, r0, #4
   1ed12:	d00f      	beq.n	1ed34 <smp_pairing_rsp+0xc8>
	method = gen_method_legacy[remote_io][get_io_capa()];
   1ed14:	f7ff f95c 	bl	1dfd0 <get_io_capa>
   1ed18:	4b99      	ldr	r3, [pc, #612]	; (1ef80 <smp_pairing_rsp+0x314>)
   1ed1a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   1ed1e:	441f      	add	r7, r3
   1ed20:	5c38      	ldrb	r0, [r7, r0]
	if (method == PASSKEY_ROLE) {
   1ed22:	2804      	cmp	r0, #4
   1ed24:	d106      	bne.n	1ed34 <smp_pairing_rsp+0xc8>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1ed26:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1ed2a:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   1ed2c:	2b00      	cmp	r3, #0
   1ed2e:	bf0c      	ite	eq
   1ed30:	2002      	moveq	r0, #2
   1ed32:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, rsp->io_capability);
   1ed34:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1ed36:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
   1ed3a:	4620      	mov	r0, r4
   1ed3c:	f00b f94b 	bl	29fd6 <update_keys_check>
   1ed40:	bb00      	cbnz	r0, 1ed84 <smp_pairing_rsp+0x118>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1ed42:	2703      	movs	r7, #3
   1ed44:	e79b      	b.n	1ec7e <smp_pairing_rsp+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1ed46:	7b20      	ldrb	r0, [r4, #12]
   1ed48:	7ce2      	ldrb	r2, [r4, #19]
   1ed4a:	ea00 0302 	and.w	r3, r0, r2
   1ed4e:	071b      	lsls	r3, r3, #28
   1ed50:	d504      	bpl.n	1ed5c <smp_pairing_rsp+0xf0>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1ed52:	7ca1      	ldrb	r1, [r4, #18]
   1ed54:	7ae3      	ldrb	r3, [r4, #11]
   1ed56:	430b      	orrs	r3, r1
   1ed58:	07d9      	lsls	r1, r3, #31
   1ed5a:	d40f      	bmi.n	1ed7c <smp_pairing_rsp+0x110>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1ed5c:	2f04      	cmp	r7, #4
   1ed5e:	d80f      	bhi.n	1ed80 <smp_pairing_rsp+0x114>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1ed60:	4310      	orrs	r0, r2
   1ed62:	f010 0004 	ands.w	r0, r0, #4
   1ed66:	d0e5      	beq.n	1ed34 <smp_pairing_rsp+0xc8>
	return gen_method_sc[remote_io][get_io_capa()];
   1ed68:	f7ff f932 	bl	1dfd0 <get_io_capa>
   1ed6c:	4b85      	ldr	r3, [pc, #532]	; (1ef84 <smp_pairing_rsp+0x318>)
   1ed6e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   1ed72:	441f      	add	r7, r3
   1ed74:	5c38      	ldrb	r0, [r7, r0]
   1ed76:	e7dd      	b.n	1ed34 <smp_pairing_rsp+0xc8>
		return LEGACY_OOB;
   1ed78:	2006      	movs	r0, #6
   1ed7a:	e7db      	b.n	1ed34 <smp_pairing_rsp+0xc8>
			return LE_SC_OOB;
   1ed7c:	2005      	movs	r0, #5
   1ed7e:	e7d9      	b.n	1ed34 <smp_pairing_rsp+0xc8>
		return JUST_WORKS;
   1ed80:	2000      	movs	r0, #0
   1ed82:	e7d7      	b.n	1ed34 <smp_pairing_rsp+0xc8>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1ed84:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1ed88:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1ed8a:	2b03      	cmp	r3, #3
   1ed8c:	d015      	beq.n	1edba <smp_pairing_rsp+0x14e>
   1ed8e:	d804      	bhi.n	1ed9a <smp_pairing_rsp+0x12e>
   1ed90:	3b01      	subs	r3, #1
   1ed92:	2b01      	cmp	r3, #1
   1ed94:	d914      	bls.n	1edc0 <smp_pairing_rsp+0x154>
   1ed96:	2708      	movs	r7, #8
   1ed98:	e771      	b.n	1ec7e <smp_pairing_rsp+0x12>
   1ed9a:	2b04      	cmp	r3, #4
   1ed9c:	d1fb      	bne.n	1ed96 <smp_pairing_rsp+0x12a>
	return MIN(req->max_key_size, rsp->max_key_size);
   1ed9e:	7d23      	ldrb	r3, [r4, #20]
   1eda0:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1eda2:	4293      	cmp	r3, r2
   1eda4:	bf28      	it	cs
   1eda6:	4613      	movcs	r3, r2
   1eda8:	2b10      	cmp	r3, #16
   1edaa:	f47f af67 	bne.w	1ec7c <smp_pairing_rsp+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1edae:	2105      	movs	r1, #5
   1edb0:	4628      	mov	r0, r5
   1edb2:	f00b f90a 	bl	29fca <atomic_test_bit>
   1edb6:	2800      	cmp	r0, #0
   1edb8:	d0c3      	beq.n	1ed42 <smp_pairing_rsp+0xd6>
		if (smp->method == JUST_WORKS) {
   1edba:	7a23      	ldrb	r3, [r4, #8]
   1edbc:	2b00      	cmp	r3, #0
   1edbe:	d0c0      	beq.n	1ed42 <smp_pairing_rsp+0xd6>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1edc0:	2105      	movs	r1, #5
   1edc2:	4628      	mov	r0, r5
   1edc4:	f00b f901 	bl	29fca <atomic_test_bit>
   1edc8:	2800      	cmp	r0, #0
   1edca:	f040 80a5 	bne.w	1ef18 <smp_pairing_rsp+0x2ac>
	struct bt_conn *conn = smp->chan.chan.conn;
   1edce:	f8d4 60f0 	ldr.w	r6, [r4, #240]	; 0xf0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1edd2:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1edd6:	7a30      	ldrb	r0, [r6, #8]
   1edd8:	f000 feba 	bl	1fb50 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1eddc:	7a21      	ldrb	r1, [r4, #8]
   1edde:	b170      	cbz	r0, 1edfe <smp_pairing_rsp+0x192>
   1ede0:	7b43      	ldrb	r3, [r0, #13]
   1ede2:	07db      	lsls	r3, r3, #31
   1ede4:	d50b      	bpl.n	1edfe <smp_pairing_rsp+0x192>
   1ede6:	b951      	cbnz	r1, 1edfe <smp_pairing_rsp+0x192>
   1ede8:	4b67      	ldr	r3, [pc, #412]	; (1ef88 <smp_pairing_rsp+0x31c>)
   1edea:	4968      	ldr	r1, [pc, #416]	; (1ef8c <smp_pairing_rsp+0x320>)
		BT_ERR("JustWorks failed, authenticated keys present");
   1edec:	4868      	ldr	r0, [pc, #416]	; (1ef90 <smp_pairing_rsp+0x324>)
   1edee:	1ac9      	subs	r1, r1, r3
   1edf0:	08c9      	lsrs	r1, r1, #3
   1edf2:	0189      	lsls	r1, r1, #6
   1edf4:	f041 0101 	orr.w	r1, r1, #1
   1edf8:	f007 ff9a 	bl	26d30 <log_0>
	if (ret) {
   1edfc:	e7cb      	b.n	1ed96 <smp_pairing_rsp+0x12a>
	switch (smp->method) {
   1edfe:	2906      	cmp	r1, #6
   1ee00:	d868      	bhi.n	1eed4 <smp_pairing_rsp+0x268>
   1ee02:	e8df f001 	tbb	[pc, r1]
   1ee06:	5d1b      	.short	0x5d1b
   1ee08:	67676733 	.word	0x67676733
   1ee0c:	04          	.byte	0x04
   1ee0d:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
   1ee0e:	4e61      	ldr	r6, [pc, #388]	; (1ef94 <smp_pairing_rsp+0x328>)
   1ee10:	6833      	ldr	r3, [r6, #0]
   1ee12:	2b00      	cmp	r3, #0
   1ee14:	d069      	beq.n	1eeea <smp_pairing_rsp+0x27e>
   1ee16:	68db      	ldr	r3, [r3, #12]
   1ee18:	2b00      	cmp	r3, #0
   1ee1a:	d066      	beq.n	1eeea <smp_pairing_rsp+0x27e>
			struct bt_conn_oob_info info = {
   1ee1c:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1ee1e:	210a      	movs	r1, #10
   1ee20:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   1ee22:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1ee26:	f00b f90b 	bl	2a040 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1ee2a:	6833      	ldr	r3, [r6, #0]
   1ee2c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1ee30:	68db      	ldr	r3, [r3, #12]
   1ee32:	a901      	add	r1, sp, #4
   1ee34:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1ee36:	7a23      	ldrb	r3, [r4, #8]
   1ee38:	2b00      	cmp	r3, #0
   1ee3a:	d158      	bne.n	1eeee <smp_pairing_rsp+0x282>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1ee3c:	210f      	movs	r1, #15
   1ee3e:	4628      	mov	r0, r5
   1ee40:	f00b f8c3 	bl	29fca <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1ee44:	2800      	cmp	r0, #0
   1ee46:	d052      	beq.n	1eeee <smp_pairing_rsp+0x282>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1ee48:	4e52      	ldr	r6, [pc, #328]	; (1ef94 <smp_pairing_rsp+0x328>)
   1ee4a:	6833      	ldr	r3, [r6, #0]
   1ee4c:	2b00      	cmp	r3, #0
   1ee4e:	d04e      	beq.n	1eeee <smp_pairing_rsp+0x282>
	    bt_auth && bt_auth->pairing_confirm) {
   1ee50:	695b      	ldr	r3, [r3, #20]
   1ee52:	2b00      	cmp	r3, #0
   1ee54:	d04b      	beq.n	1eeee <smp_pairing_rsp+0x282>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1ee56:	4628      	mov	r0, r5
   1ee58:	210a      	movs	r1, #10
   1ee5a:	f00b f8f1 	bl	2a040 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   1ee5e:	6833      	ldr	r3, [r6, #0]
   1ee60:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1ee64:	695b      	ldr	r3, [r3, #20]
   1ee66:	4798      	blx	r3
	return 0;
   1ee68:	2700      	movs	r7, #0
   1ee6a:	e708      	b.n	1ec7e <smp_pairing_rsp+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1ee6c:	2104      	movs	r1, #4
   1ee6e:	eb0d 0001 	add.w	r0, sp, r1
   1ee72:	f7fa fb2d 	bl	194d0 <bt_rand>
   1ee76:	2800      	cmp	r0, #0
   1ee78:	d18d      	bne.n	1ed96 <smp_pairing_rsp+0x12a>
			passkey %= 1000000;
   1ee7a:	9901      	ldr	r1, [sp, #4]
   1ee7c:	4a46      	ldr	r2, [pc, #280]	; (1ef98 <smp_pairing_rsp+0x32c>)
		if (bt_auth && bt_auth->passkey_display) {
   1ee7e:	4f45      	ldr	r7, [pc, #276]	; (1ef94 <smp_pairing_rsp+0x328>)
			passkey %= 1000000;
   1ee80:	fbb1 f3f2 	udiv	r3, r1, r2
   1ee84:	fb02 1313 	mls	r3, r2, r3, r1
   1ee88:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
   1ee8a:	683b      	ldr	r3, [r7, #0]
   1ee8c:	b153      	cbz	r3, 1eea4 <smp_pairing_rsp+0x238>
   1ee8e:	681b      	ldr	r3, [r3, #0]
   1ee90:	b143      	cbz	r3, 1eea4 <smp_pairing_rsp+0x238>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1ee92:	210b      	movs	r1, #11
   1ee94:	4628      	mov	r0, r5
   1ee96:	f00b f8d3 	bl	2a040 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   1ee9a:	683b      	ldr	r3, [r7, #0]
   1ee9c:	4630      	mov	r0, r6
   1ee9e:	681b      	ldr	r3, [r3, #0]
   1eea0:	9901      	ldr	r1, [sp, #4]
   1eea2:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1eea4:	9b01      	ldr	r3, [sp, #4]
	dst[1] = val >> 8;
   1eea6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   1eeaa:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	sys_put_le16(val >> 16, &dst[2]);
   1eeae:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1eeb0:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1eeb4:	0a1b      	lsrs	r3, r3, #8
   1eeb6:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1eeba:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1eebe:	e7ba      	b.n	1ee36 <smp_pairing_rsp+0x1ca>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1eec0:	4628      	mov	r0, r5
   1eec2:	210a      	movs	r1, #10
   1eec4:	f00b f8bc 	bl	2a040 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   1eec8:	4b32      	ldr	r3, [pc, #200]	; (1ef94 <smp_pairing_rsp+0x328>)
   1eeca:	4630      	mov	r0, r6
   1eecc:	681b      	ldr	r3, [r3, #0]
   1eece:	685b      	ldr	r3, [r3, #4]
   1eed0:	4798      	blx	r3
	if (ret) {
   1eed2:	e7b0      	b.n	1ee36 <smp_pairing_rsp+0x1ca>
   1eed4:	4b2c      	ldr	r3, [pc, #176]	; (1ef88 <smp_pairing_rsp+0x31c>)
   1eed6:	4a2d      	ldr	r2, [pc, #180]	; (1ef8c <smp_pairing_rsp+0x320>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1eed8:	4830      	ldr	r0, [pc, #192]	; (1ef9c <smp_pairing_rsp+0x330>)
   1eeda:	1ad2      	subs	r2, r2, r3
   1eedc:	08d2      	lsrs	r2, r2, #3
   1eede:	0192      	lsls	r2, r2, #6
   1eee0:	f042 0201 	orr.w	r2, r2, #1
   1eee4:	f007 ff31 	bl	26d4a <log_1>
	if (ret) {
   1eee8:	e755      	b.n	1ed96 <smp_pairing_rsp+0x12a>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1eeea:	2702      	movs	r7, #2
   1eeec:	e6c7      	b.n	1ec7e <smp_pairing_rsp+0x12>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1eeee:	210a      	movs	r1, #10
   1eef0:	4628      	mov	r0, r5
   1eef2:	f00b f86a 	bl	29fca <atomic_test_bit>
   1eef6:	b950      	cbnz	r0, 1ef0e <smp_pairing_rsp+0x2a2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1eef8:	2103      	movs	r1, #3
   1eefa:	4620      	mov	r0, r4
   1eefc:	f00b f8a0 	bl	2a040 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1ef00:	210e      	movs	r1, #14
   1ef02:	f00b f89d 	bl	2a040 <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
   1ef06:	f00b f988 	bl	2a21a <legacy_send_pairing_confirm>
	return sc_send_public_key(smp);
   1ef0a:	4607      	mov	r7, r0
   1ef0c:	e6b7      	b.n	1ec7e <smp_pairing_rsp+0x12>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1ef0e:	2100      	movs	r1, #0
   1ef10:	4628      	mov	r0, r5
   1ef12:	f00b f895 	bl	2a040 <atomic_set_bit>
   1ef16:	e7a7      	b.n	1ee68 <smp_pairing_rsp+0x1fc>
	smp->local_dist &= SEND_KEYS_SC;
   1ef18:	2300      	movs	r3, #0
   1ef1a:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist &= RECV_KEYS_SC;
   1ef1e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1ef22:	7a27      	ldrb	r7, [r4, #8]
	smp->remote_dist &= RECV_KEYS_SC;
   1ef24:	f003 0302 	and.w	r3, r3, #2
   1ef28:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1ef2c:	b9af      	cbnz	r7, 1ef5a <smp_pairing_rsp+0x2ee>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1ef2e:	210f      	movs	r1, #15
   1ef30:	4628      	mov	r0, r5
   1ef32:	f00b f84a 	bl	29fca <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1ef36:	b180      	cbz	r0, 1ef5a <smp_pairing_rsp+0x2ee>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1ef38:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1ef94 <smp_pairing_rsp+0x328>
   1ef3c:	f8d8 3000 	ldr.w	r3, [r8]
   1ef40:	b15b      	cbz	r3, 1ef5a <smp_pairing_rsp+0x2ee>
	    bt_auth && bt_auth->pairing_confirm) {
   1ef42:	695b      	ldr	r3, [r3, #20]
   1ef44:	b14b      	cbz	r3, 1ef5a <smp_pairing_rsp+0x2ee>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1ef46:	4628      	mov	r0, r5
   1ef48:	210a      	movs	r1, #10
   1ef4a:	f00b f879 	bl	2a040 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   1ef4e:	f8d8 3000 	ldr.w	r3, [r8]
   1ef52:	4630      	mov	r0, r6
   1ef54:	695b      	ldr	r3, [r3, #20]
   1ef56:	4798      	blx	r3
		return 0;
   1ef58:	e691      	b.n	1ec7e <smp_pairing_rsp+0x12>
	if (!sc_public_key) {
   1ef5a:	4b11      	ldr	r3, [pc, #68]	; (1efa0 <smp_pairing_rsp+0x334>)
   1ef5c:	681f      	ldr	r7, [r3, #0]
   1ef5e:	b927      	cbnz	r7, 1ef6a <smp_pairing_rsp+0x2fe>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1ef60:	2106      	movs	r1, #6
   1ef62:	4628      	mov	r0, r5
   1ef64:	f00b f86c 	bl	2a040 <atomic_set_bit>
		return 0;
   1ef68:	e689      	b.n	1ec7e <smp_pairing_rsp+0x12>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1ef6a:	4620      	mov	r0, r4
   1ef6c:	210c      	movs	r1, #12
   1ef6e:	f00b f867 	bl	2a040 <atomic_set_bit>
	atomic_clear_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   1ef72:	210b      	movs	r1, #11
   1ef74:	f00b f8cb 	bl	2a10e <atomic_clear_bit>
	return sc_send_public_key(smp);
   1ef78:	f7ff f8cc 	bl	1e114 <sc_send_public_key>
   1ef7c:	e7c5      	b.n	1ef0a <smp_pairing_rsp+0x29e>
   1ef7e:	bf00      	nop
   1ef80:	000305d2 	.word	0x000305d2
   1ef84:	000305eb 	.word	0x000305eb
   1ef88:	0002bfe4 	.word	0x0002bfe4
   1ef8c:	0002c064 	.word	0x0002c064
   1ef90:	00030439 	.word	0x00030439
   1ef94:	20009814 	.word	0x20009814
   1ef98:	000f4240 	.word	0x000f4240
   1ef9c:	00030305 	.word	0x00030305
   1efa0:	200098c8 	.word	0x200098c8

0001efa4 <smp_pairing_random>:
{
   1efa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1efa8:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1efaa:	f100 0737 	add.w	r7, r0, #55	; 0x37
   1efae:	2210      	movs	r2, #16
   1efb0:	6889      	ldr	r1, [r1, #8]
{
   1efb2:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1efb4:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1efb6:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1efb8:	f009 faeb 	bl	28592 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1efbc:	2105      	movs	r1, #5
   1efbe:	4630      	mov	r0, r6
   1efc0:	f00b f803 	bl	29fca <atomic_test_bit>
   1efc4:	f8d4 90f0 	ldr.w	r9, [r4, #240]	; 0xf0
   1efc8:	2800      	cmp	r0, #0
   1efca:	d15b      	bne.n	1f084 <smp_pairing_random+0xe0>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1efcc:	f109 039e 	add.w	r3, r9, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1efd0:	f104 0a47 	add.w	sl, r4, #71	; 0x47
   1efd4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   1efd8:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1efda:	f109 0397 	add.w	r3, r9, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1efde:	9300      	str	r3, [sp, #0]
   1efe0:	4639      	mov	r1, r7
   1efe2:	4650      	mov	r0, sl
   1efe4:	f8cd 8008 	str.w	r8, [sp, #8]
   1efe8:	f104 0310 	add.w	r3, r4, #16
   1efec:	f104 0209 	add.w	r2, r4, #9
   1eff0:	f00b f8b8 	bl	2a164 <smp_c1>
	if (err) {
   1eff4:	2800      	cmp	r0, #0
   1eff6:	d13e      	bne.n	1f076 <smp_pairing_random+0xd2>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1eff8:	2210      	movs	r2, #16
   1effa:	4641      	mov	r1, r8
   1effc:	f104 0017 	add.w	r0, r4, #23
   1f000:	f009 fab7 	bl	28572 <memcmp>
   1f004:	2800      	cmp	r0, #0
   1f006:	d173      	bne.n	1f0f0 <smp_pairing_random+0x14c>
	    conn->role == BT_HCI_ROLE_MASTER) {
   1f008:	f899 5003 	ldrb.w	r5, [r9, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1f00c:	2d00      	cmp	r5, #0
   1f00e:	f040 80cd 	bne.w	1f1ac <smp_pairing_random+0x208>
	memcpy(out, r2, 8);
   1f012:	2208      	movs	r2, #8
   1f014:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1f018:	4640      	mov	r0, r8
   1f01a:	f009 faba 	bl	28592 <memcpy>
	memcpy(out + 8, r1, 8);
   1f01e:	2208      	movs	r2, #8
   1f020:	4639      	mov	r1, r7
   1f022:	a80c      	add	r0, sp, #48	; 0x30
   1f024:	f009 fab5 	bl	28592 <memcpy>
	return bt_encrypt_le(k, out, out);
   1f028:	4642      	mov	r2, r8
   1f02a:	4641      	mov	r1, r8
   1f02c:	4650      	mov	r0, sl
   1f02e:	f009 fd3f 	bl	28ab0 <bt_encrypt_le>
		if (err) {
   1f032:	bb00      	cbnz	r0, 1f076 <smp_pairing_random+0xd2>
		(void)memset(ediv, 0, sizeof(ediv));
   1f034:	2202      	movs	r2, #2
   1f036:	4629      	mov	r1, r5
   1f038:	a805      	add	r0, sp, #20
   1f03a:	f009 fad5 	bl	285e8 <memset>
		(void)memset(rand, 0, sizeof(rand));
   1f03e:	2208      	movs	r2, #8
   1f040:	4629      	mov	r1, r5
   1f042:	a806      	add	r0, sp, #24
   1f044:	f009 fad0 	bl	285e8 <memset>
	return MIN(req->max_key_size, rsp->max_key_size);
   1f048:	7d22      	ldrb	r2, [r4, #20]
   1f04a:	7b63      	ldrb	r3, [r4, #13]
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
   1f04c:	4648      	mov	r0, r9
   1f04e:	429a      	cmp	r2, r3
   1f050:	bf94      	ite	ls
   1f052:	9200      	strls	r2, [sp, #0]
   1f054:	9300      	strhi	r3, [sp, #0]
   1f056:	a906      	add	r1, sp, #24
   1f058:	4643      	mov	r3, r8
   1f05a:	aa05      	add	r2, sp, #20
   1f05c:	f009 fd9c 	bl	28b98 <bt_conn_le_start_encryption>
   1f060:	b158      	cbz	r0, 1f07a <smp_pairing_random+0xd6>
   1f062:	495f      	ldr	r1, [pc, #380]	; (1f1e0 <smp_pairing_random+0x23c>)
   1f064:	4b5f      	ldr	r3, [pc, #380]	; (1f1e4 <smp_pairing_random+0x240>)
			BT_ERR("Failed to start encryption");
   1f066:	4860      	ldr	r0, [pc, #384]	; (1f1e8 <smp_pairing_random+0x244>)
   1f068:	1ac9      	subs	r1, r1, r3
   1f06a:	08c9      	lsrs	r1, r1, #3
   1f06c:	0189      	lsls	r1, r1, #6
   1f06e:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate confirm failed");
   1f072:	f007 fe5d 	bl	26d30 <log_0>
				return BT_SMP_ERR_UNSPECIFIED;
   1f076:	2508      	movs	r5, #8
   1f078:	e03b      	b.n	1f0f2 <smp_pairing_random+0x14e>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1f07a:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1f07c:	4630      	mov	r0, r6
   1f07e:	f00a ffdf 	bl	2a040 <atomic_set_bit>
			return 0;
   1f082:	e036      	b.n	1f0f2 <smp_pairing_random+0x14e>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1f084:	f899 5003 	ldrb.w	r5, [r9, #3]
   1f088:	2d00      	cmp	r5, #0
   1f08a:	f040 80a7 	bne.w	1f1dc <smp_pairing_random+0x238>
	switch (smp->method) {
   1f08e:	7a21      	ldrb	r1, [r4, #8]
   1f090:	2905      	cmp	r1, #5
   1f092:	f200 808d 	bhi.w	1f1b0 <smp_pairing_random+0x20c>
   1f096:	e8df f001 	tbb	[pc, r1]
   1f09a:	0322      	.short	0x0322
   1f09c:	308b2203 	.word	0x308b2203
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1f0a0:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1f0a4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1f0a8:	40d3      	lsrs	r3, r2
   1f0aa:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   1f0ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1f0b2:	b2db      	uxtb	r3, r3
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1f0b4:	494d      	ldr	r1, [pc, #308]	; (1f1ec <smp_pairing_random+0x248>)
   1f0b6:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   1f0ba:	f8cd 8000 	str.w	r8, [sp]
   1f0be:	463a      	mov	r2, r7
   1f0c0:	6809      	ldr	r1, [r1, #0]
   1f0c2:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1f0c6:	f00a ff59 	bl	29f7c <smp_f4>
   1f0ca:	b150      	cbz	r0, 1f0e2 <smp_pairing_random+0x13e>
   1f0cc:	4944      	ldr	r1, [pc, #272]	; (1f1e0 <smp_pairing_random+0x23c>)
   1f0ce:	4b45      	ldr	r3, [pc, #276]	; (1f1e4 <smp_pairing_random+0x240>)
		BT_ERR("Calculate confirm failed");
   1f0d0:	4847      	ldr	r0, [pc, #284]	; (1f1f0 <smp_pairing_random+0x24c>)
   1f0d2:	1ac9      	subs	r1, r1, r3
   1f0d4:	08c9      	lsrs	r1, r1, #3
   1f0d6:	0189      	lsls	r1, r1, #6
   1f0d8:	f041 0101 	orr.w	r1, r1, #1
   1f0dc:	e7c9      	b.n	1f072 <smp_pairing_random+0xce>
	switch (smp->method) {
   1f0de:	2300      	movs	r3, #0
   1f0e0:	e7e8      	b.n	1f0b4 <smp_pairing_random+0x110>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1f0e2:	2210      	movs	r2, #16
   1f0e4:	4641      	mov	r1, r8
   1f0e6:	f104 0017 	add.w	r0, r4, #23
   1f0ea:	f009 fa42 	bl	28572 <memcmp>
   1f0ee:	b120      	cbz	r0, 1f0fa <smp_pairing_random+0x156>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1f0f0:	2504      	movs	r5, #4
}
   1f0f2:	4628      	mov	r0, r5
   1f0f4:	b01e      	add	sp, #120	; 0x78
   1f0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (smp->method) {
   1f0fa:	7a21      	ldrb	r1, [r4, #8]
   1f0fc:	2905      	cmp	r1, #5
   1f0fe:	d857      	bhi.n	1f1b0 <smp_pairing_random+0x20c>
   1f100:	e8df f001 	tbb	[pc, r1]
   1f104:	033e3e61 	.word	0x033e3e61
   1f108:	6156      	.short	0x6156
	sys_memcpy_swap(m, u, 32);
   1f10a:	4b38      	ldr	r3, [pc, #224]	; (1f1ec <smp_pairing_random+0x248>)
   1f10c:	2220      	movs	r2, #32
   1f10e:	6819      	ldr	r1, [r3, #0]
   1f110:	a80a      	add	r0, sp, #40	; 0x28
   1f112:	f7fe ff83 	bl	1e01c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1f116:	2220      	movs	r2, #32
   1f118:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1f11c:	a812      	add	r0, sp, #72	; 0x48
   1f11e:	f7fe ff7d 	bl	1e01c <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1f122:	2210      	movs	r2, #16
   1f124:	4639      	mov	r1, r7
   1f126:	a81a      	add	r0, sp, #104	; 0x68
   1f128:	f7fe ff78 	bl	1e01c <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1f12c:	2210      	movs	r2, #16
   1f12e:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1f132:	a806      	add	r0, sp, #24
   1f134:	f7fe ff72 	bl	1e01c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1f138:	ab06      	add	r3, sp, #24
   1f13a:	2250      	movs	r2, #80	; 0x50
   1f13c:	4618      	mov	r0, r3
   1f13e:	a90a      	add	r1, sp, #40	; 0x28
   1f140:	f00a fe89 	bl	29e56 <bt_smp_aes_cmac>
	if (err) {
   1f144:	2800      	cmp	r0, #0
   1f146:	d196      	bne.n	1f076 <smp_pairing_random+0xd2>
	memcpy(passkey, xs + 12, 4);
   1f148:	a909      	add	r1, sp, #36	; 0x24
   1f14a:	2204      	movs	r2, #4
   1f14c:	a805      	add	r0, sp, #20
   1f14e:	f009 fa20 	bl	28592 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1f152:	9b05      	ldr	r3, [sp, #20]
   1f154:	4927      	ldr	r1, [pc, #156]	; (1f1f4 <smp_pairing_random+0x250>)
   1f156:	ba1b      	rev	r3, r3
   1f158:	fbb3 f2f1 	udiv	r2, r3, r1
   1f15c:	fb01 3312 	mls	r3, r1, r2, r3
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f160:	4630      	mov	r0, r6
   1f162:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1f164:	9305      	str	r3, [sp, #20]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f166:	f00a ff6b 	bl	2a040 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1f16a:	2109      	movs	r1, #9
   1f16c:	f00a ff68 	bl	2a040 <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   1f170:	4b21      	ldr	r3, [pc, #132]	; (1f1f8 <smp_pairing_random+0x254>)
   1f172:	9905      	ldr	r1, [sp, #20]
   1f174:	681b      	ldr	r3, [r3, #0]
   1f176:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1f17a:	689b      	ldr	r3, [r3, #8]
   1f17c:	4798      	blx	r3
			return 0;
   1f17e:	e7b8      	b.n	1f0f2 <smp_pairing_random+0x14e>
			smp->passkey_round++;
   1f180:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1f184:	3301      	adds	r3, #1
   1f186:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
   1f188:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   1f18a:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
			if (smp->passkey_round == 20U) {
   1f18e:	d01a      	beq.n	1f1c6 <smp_pairing_random+0x222>
			if (bt_rand(smp->prnd, 16)) {
   1f190:	2110      	movs	r1, #16
   1f192:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1f196:	f7fa f99b 	bl	194d0 <bt_rand>
   1f19a:	2800      	cmp	r0, #0
   1f19c:	f47f af6b 	bne.w	1f076 <smp_pairing_random+0xd2>
			atomic_set_bit(smp->allowed_cmds,
   1f1a0:	2103      	movs	r1, #3
   1f1a2:	4620      	mov	r0, r4
   1f1a4:	f00a ff4c 	bl	2a040 <atomic_set_bit>
			return smp_send_pairing_confirm(smp);
   1f1a8:	f7ff fbd6 	bl	1e958 <smp_send_pairing_confirm>
   1f1ac:	4605      	mov	r5, r0
   1f1ae:	e7a0      	b.n	1f0f2 <smp_pairing_random+0x14e>
   1f1b0:	4b0c      	ldr	r3, [pc, #48]	; (1f1e4 <smp_pairing_random+0x240>)
   1f1b2:	4a0b      	ldr	r2, [pc, #44]	; (1f1e0 <smp_pairing_random+0x23c>)
			BT_ERR("Unknown pairing method (%u)", smp->method);
   1f1b4:	4811      	ldr	r0, [pc, #68]	; (1f1fc <smp_pairing_random+0x258>)
   1f1b6:	1ad2      	subs	r2, r2, r3
   1f1b8:	08d2      	lsrs	r2, r2, #3
   1f1ba:	0192      	lsls	r2, r2, #6
   1f1bc:	f042 0201 	orr.w	r2, r2, #1
   1f1c0:	f007 fdc3 	bl	26d4a <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1f1c4:	e757      	b.n	1f076 <smp_pairing_random+0xd2>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1f1c6:	2107      	movs	r1, #7
   1f1c8:	4630      	mov	r0, r6
   1f1ca:	f00a fefe 	bl	29fca <atomic_test_bit>
   1f1ce:	b108      	cbz	r0, 1f1d4 <smp_pairing_random+0x230>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1f1d0:	2109      	movs	r1, #9
   1f1d2:	e753      	b.n	1f07c <smp_pairing_random+0xd8>
		return compute_and_send_master_dhcheck(smp);
   1f1d4:	4620      	mov	r0, r4
   1f1d6:	f7ff f873 	bl	1e2c0 <compute_and_send_master_dhcheck>
   1f1da:	e7e7      	b.n	1f1ac <smp_pairing_random+0x208>
	return BT_SMP_ERR_PAIRING_NOTSUPP;
   1f1dc:	2505      	movs	r5, #5
   1f1de:	e788      	b.n	1f0f2 <smp_pairing_random+0x14e>
   1f1e0:	0002c064 	.word	0x0002c064
   1f1e4:	0002bfe4 	.word	0x0002bfe4
   1f1e8:	00030359 	.word	0x00030359
   1f1ec:	200098c8 	.word	0x200098c8
   1f1f0:	00030466 	.word	0x00030466
   1f1f4:	000f4240 	.word	0x000f4240
   1f1f8:	20009814 	.word	0x20009814
   1f1fc:	00030305 	.word	0x00030305

0001f200 <bt_smp_auth_pairing_confirm>:
{
   1f200:	b570      	push	{r4, r5, r6, lr}
   1f202:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1f204:	f7fe ff38 	bl	1e078 <smp_chan_get>
	if (!smp) {
   1f208:	4605      	mov	r5, r0
   1f20a:	b910      	cbnz	r0, 1f212 <bt_smp_auth_pairing_confirm+0x12>
		return -EINVAL;
   1f20c:	f06f 0015 	mvn.w	r0, #21
}
   1f210:	bd70      	pop	{r4, r5, r6, pc}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER)) {
   1f212:	1d06      	adds	r6, r0, #4
   1f214:	210a      	movs	r1, #10
   1f216:	4630      	mov	r0, r6
   1f218:	f00a fefe 	bl	2a018 <atomic_test_and_clear_bit>
   1f21c:	2800      	cmp	r0, #0
   1f21e:	d0f5      	beq.n	1f20c <bt_smp_auth_pairing_confirm+0xc>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1f220:	78e3      	ldrb	r3, [r4, #3]
   1f222:	b993      	cbnz	r3, 1f24a <bt_smp_auth_pairing_confirm+0x4a>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f224:	2105      	movs	r1, #5
   1f226:	4630      	mov	r0, r6
   1f228:	f00a fecf 	bl	29fca <atomic_test_bit>
   1f22c:	b930      	cbnz	r0, 1f23c <bt_smp_auth_pairing_confirm+0x3c>
			atomic_set_bit(smp->allowed_cmds,
   1f22e:	2103      	movs	r1, #3
   1f230:	4628      	mov	r0, r5
   1f232:	f00a ff05 	bl	2a040 <atomic_set_bit>
			return legacy_send_pairing_confirm(smp);
   1f236:	f00a fff0 	bl	2a21a <legacy_send_pairing_confirm>
   1f23a:	e7e9      	b.n	1f210 <bt_smp_auth_pairing_confirm+0x10>
		if (!sc_public_key) {
   1f23c:	4b07      	ldr	r3, [pc, #28]	; (1f25c <bt_smp_auth_pairing_confirm+0x5c>)
   1f23e:	681c      	ldr	r4, [r3, #0]
   1f240:	b92c      	cbnz	r4, 1f24e <bt_smp_auth_pairing_confirm+0x4e>
			atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1f242:	2106      	movs	r1, #6
   1f244:	4630      	mov	r0, r6
   1f246:	f00a fefb 	bl	2a040 <atomic_set_bit>
	return 0;
   1f24a:	2000      	movs	r0, #0
   1f24c:	e7e0      	b.n	1f210 <bt_smp_auth_pairing_confirm+0x10>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1f24e:	210c      	movs	r1, #12
   1f250:	4628      	mov	r0, r5
   1f252:	f00a fef5 	bl	2a040 <atomic_set_bit>
		return sc_send_public_key(smp);
   1f256:	f7fe ff5d 	bl	1e114 <sc_send_public_key>
   1f25a:	e7d9      	b.n	1f210 <bt_smp_auth_pairing_confirm+0x10>
   1f25c:	200098c8 	.word	0x200098c8

0001f260 <smp_pairing_complete>:
{
   1f260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f264:	4605      	mov	r5, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1f266:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
	if (!status) {
   1f26a:	4f28      	ldr	r7, [pc, #160]	; (1f30c <smp_pairing_complete+0xac>)
   1f26c:	f100 0804 	add.w	r8, r0, #4
   1f270:	b9e1      	cbnz	r1, 1f2ac <smp_pairing_complete+0x4c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1f272:	210d      	movs	r1, #13
   1f274:	4640      	mov	r0, r8
   1f276:	f00a fea8 	bl	29fca <atomic_test_bit>
		if (bond_flag) {
   1f27a:	4606      	mov	r6, r0
   1f27c:	b118      	cbz	r0, 1f286 <smp_pairing_complete+0x26>
			bt_keys_store(conn->le.keys);
   1f27e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1f282:	f000 fd3d 	bl	1fd00 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
   1f286:	683b      	ldr	r3, [r7, #0]
   1f288:	b123      	cbz	r3, 1f294 <smp_pairing_complete+0x34>
   1f28a:	699b      	ldr	r3, [r3, #24]
		if (bt_auth && bt_auth->pairing_failed) {
   1f28c:	b113      	cbz	r3, 1f294 <smp_pairing_complete+0x34>
			bt_auth->pairing_failed(conn, security_err);
   1f28e:	4631      	mov	r1, r6
   1f290:	4620      	mov	r0, r4
   1f292:	4798      	blx	r3
	smp_reset(smp);
   1f294:	4628      	mov	r0, r5
   1f296:	f00a ff45 	bl	2a124 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1f29a:	7a62      	ldrb	r2, [r4, #9]
   1f29c:	7aa3      	ldrb	r3, [r4, #10]
   1f29e:	429a      	cmp	r2, r3
   1f2a0:	d032      	beq.n	1f308 <smp_pairing_complete+0xa8>
		bt_smp_start_security(conn);
   1f2a2:	4620      	mov	r0, r4
}
   1f2a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_smp_start_security(conn);
   1f2a8:	f00b b889 	b.w	2a3be <bt_smp_start_security>
	switch (smp_err) {
   1f2ac:	3901      	subs	r1, #1
   1f2ae:	b2c9      	uxtb	r1, r1
   1f2b0:	290d      	cmp	r1, #13
   1f2b2:	bf96      	itet	ls
   1f2b4:	4b16      	ldrls	r3, [pc, #88]	; (1f310 <smp_pairing_complete+0xb0>)
	if (!status) {
   1f2b6:	2608      	movhi	r6, #8
   1f2b8:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
   1f2ba:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1f2be:	b143      	cbz	r3, 1f2d2 <smp_pairing_complete+0x72>
   1f2c0:	7b1b      	ldrb	r3, [r3, #12]
   1f2c2:	b9d3      	cbnz	r3, 1f2fa <smp_pairing_complete+0x9a>
			bt_keys_clear(conn->le.keys);
   1f2c4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1f2c8:	f000 fc52 	bl	1fb70 <bt_keys_clear>
			conn->le.keys = NULL;
   1f2cc:	2300      	movs	r3, #0
   1f2ce:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1f2d2:	2102      	movs	r1, #2
   1f2d4:	4640      	mov	r0, r8
   1f2d6:	f00a fe78 	bl	29fca <atomic_test_bit>
   1f2da:	b948      	cbnz	r0, 1f2f0 <smp_pairing_complete+0x90>
	switch (err) {
   1f2dc:	2e08      	cmp	r6, #8
   1f2de:	bf14      	ite	ne
   1f2e0:	4b0c      	ldrne	r3, [pc, #48]	; (1f314 <smp_pairing_complete+0xb4>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1f2e2:	211f      	moveq	r1, #31
			bt_conn_security_changed(conn,
   1f2e4:	4632      	mov	r2, r6
   1f2e6:	4620      	mov	r0, r4
   1f2e8:	bf18      	it	ne
   1f2ea:	5d99      	ldrbne	r1, [r3, r6]
   1f2ec:	f7fa fb86 	bl	199fc <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
   1f2f0:	683b      	ldr	r3, [r7, #0]
   1f2f2:	2b00      	cmp	r3, #0
   1f2f4:	d0ce      	beq.n	1f294 <smp_pairing_complete+0x34>
   1f2f6:	69db      	ldr	r3, [r3, #28]
   1f2f8:	e7c8      	b.n	1f28c <smp_pairing_complete+0x2c>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1f2fa:	2102      	movs	r1, #2
   1f2fc:	4640      	mov	r0, r8
   1f2fe:	f00a fe64 	bl	29fca <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1f302:	2800      	cmp	r0, #0
   1f304:	d1de      	bne.n	1f2c4 <smp_pairing_complete+0x64>
   1f306:	e7e4      	b.n	1f2d2 <smp_pairing_complete+0x72>
}
   1f308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f30c:	20009814 	.word	0x20009814
   1f310:	000305b4 	.word	0x000305b4
   1f314:	000305ca 	.word	0x000305ca

0001f318 <bt_smp_recv>:
{
   1f318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1f31a:	898b      	ldrh	r3, [r1, #12]
{
   1f31c:	4607      	mov	r7, r0
   1f31e:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1f320:	b95b      	cbnz	r3, 1f33a <bt_smp_recv+0x22>
   1f322:	493a      	ldr	r1, [pc, #232]	; (1f40c <bt_smp_recv+0xf4>)
   1f324:	4b3a      	ldr	r3, [pc, #232]	; (1f410 <bt_smp_recv+0xf8>)
		BT_ERR("Too small SMP PDU received");
   1f326:	483b      	ldr	r0, [pc, #236]	; (1f414 <bt_smp_recv+0xfc>)
   1f328:	1ac9      	subs	r1, r1, r3
   1f32a:	08c9      	lsrs	r1, r1, #3
   1f32c:	0189      	lsls	r1, r1, #6
   1f32e:	f041 0101 	orr.w	r1, r1, #1
   1f332:	f007 fcfd 	bl	26d30 <log_0>
}
   1f336:	2000      	movs	r0, #0
   1f338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1f33a:	2101      	movs	r1, #1
   1f33c:	f105 0008 	add.w	r0, r5, #8
   1f340:	f000 ffc0 	bl	202c4 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1f344:	2104      	movs	r1, #4
   1f346:	4606      	mov	r6, r0
   1f348:	f1a7 00ec 	sub.w	r0, r7, #236	; 0xec
   1f34c:	f00a fe3d 	bl	29fca <atomic_test_bit>
   1f350:	f1a7 04f0 	sub.w	r4, r7, #240	; 0xf0
   1f354:	7831      	ldrb	r1, [r6, #0]
   1f356:	b150      	cbz	r0, 1f36e <bt_smp_recv+0x56>
   1f358:	4a2c      	ldr	r2, [pc, #176]	; (1f40c <bt_smp_recv+0xf4>)
   1f35a:	4b2d      	ldr	r3, [pc, #180]	; (1f410 <bt_smp_recv+0xf8>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1f35c:	482e      	ldr	r0, [pc, #184]	; (1f418 <bt_smp_recv+0x100>)
   1f35e:	1ad2      	subs	r2, r2, r3
   1f360:	08d2      	lsrs	r2, r2, #3
   1f362:	0192      	lsls	r2, r2, #6
   1f364:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1f368:	f007 fcef 	bl	26d4a <log_1>
		return 0;
   1f36c:	e7e3      	b.n	1f336 <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1f36e:	290e      	cmp	r1, #14
   1f370:	d908      	bls.n	1f384 <bt_smp_recv+0x6c>
   1f372:	4a26      	ldr	r2, [pc, #152]	; (1f40c <bt_smp_recv+0xf4>)
   1f374:	4b26      	ldr	r3, [pc, #152]	; (1f410 <bt_smp_recv+0xf8>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1f376:	4829      	ldr	r0, [pc, #164]	; (1f41c <bt_smp_recv+0x104>)
   1f378:	1ad2      	subs	r2, r2, r3
   1f37a:	08d2      	lsrs	r2, r2, #3
   1f37c:	0192      	lsls	r2, r2, #6
   1f37e:	f042 0202 	orr.w	r2, r2, #2
   1f382:	e7f1      	b.n	1f368 <bt_smp_recv+0x50>
	if (!handlers[hdr->code].func) {
   1f384:	4f26      	ldr	r7, [pc, #152]	; (1f420 <bt_smp_recv+0x108>)
   1f386:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   1f38a:	b973      	cbnz	r3, 1f3aa <bt_smp_recv+0x92>
   1f38c:	4b20      	ldr	r3, [pc, #128]	; (1f410 <bt_smp_recv+0xf8>)
   1f38e:	4a1f      	ldr	r2, [pc, #124]	; (1f40c <bt_smp_recv+0xf4>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1f390:	4824      	ldr	r0, [pc, #144]	; (1f424 <bt_smp_recv+0x10c>)
   1f392:	1ad2      	subs	r2, r2, r3
   1f394:	08d2      	lsrs	r2, r2, #3
   1f396:	0192      	lsls	r2, r2, #6
   1f398:	f042 0202 	orr.w	r2, r2, #2
   1f39c:	f007 fcd5 	bl	26d4a <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1f3a0:	2107      	movs	r1, #7
		smp_error(smp, err);
   1f3a2:	4620      	mov	r0, r4
   1f3a4:	f00b f86e 	bl	2a484 <smp_error>
   1f3a8:	e7c5      	b.n	1f336 <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1f3aa:	4620      	mov	r0, r4
   1f3ac:	f00a fe34 	bl	2a018 <atomic_test_and_clear_bit>
   1f3b0:	7831      	ldrb	r1, [r6, #0]
   1f3b2:	b970      	cbnz	r0, 1f3d2 <bt_smp_recv+0xba>
   1f3b4:	4b16      	ldr	r3, [pc, #88]	; (1f410 <bt_smp_recv+0xf8>)
   1f3b6:	4a15      	ldr	r2, [pc, #84]	; (1f40c <bt_smp_recv+0xf4>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1f3b8:	481b      	ldr	r0, [pc, #108]	; (1f428 <bt_smp_recv+0x110>)
   1f3ba:	1ad2      	subs	r2, r2, r3
   1f3bc:	08d2      	lsrs	r2, r2, #3
   1f3be:	0192      	lsls	r2, r2, #6
   1f3c0:	f042 0202 	orr.w	r2, r2, #2
   1f3c4:	f007 fcc1 	bl	26d4a <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1f3c8:	7833      	ldrb	r3, [r6, #0]
   1f3ca:	2b05      	cmp	r3, #5
   1f3cc:	d0b3      	beq.n	1f336 <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1f3ce:	2108      	movs	r1, #8
   1f3d0:	e7e7      	b.n	1f3a2 <bt_smp_recv+0x8a>
	if (buf->len != handlers[hdr->code].expect_len) {
   1f3d2:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
   1f3d6:	89a8      	ldrh	r0, [r5, #12]
   1f3d8:	791b      	ldrb	r3, [r3, #4]
   1f3da:	4283      	cmp	r3, r0
   1f3dc:	d00d      	beq.n	1f3fa <bt_smp_recv+0xe2>
   1f3de:	4a0c      	ldr	r2, [pc, #48]	; (1f410 <bt_smp_recv+0xf8>)
   1f3e0:	4b0a      	ldr	r3, [pc, #40]	; (1f40c <bt_smp_recv+0xf4>)
   1f3e2:	1a9b      	subs	r3, r3, r2
   1f3e4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1f3e6:	019b      	lsls	r3, r3, #6
   1f3e8:	460a      	mov	r2, r1
   1f3ea:	f043 0301 	orr.w	r3, r3, #1
   1f3ee:	4601      	mov	r1, r0
   1f3f0:	480e      	ldr	r0, [pc, #56]	; (1f42c <bt_smp_recv+0x114>)
   1f3f2:	f007 fcbe 	bl	26d72 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1f3f6:	210a      	movs	r1, #10
   1f3f8:	e7d3      	b.n	1f3a2 <bt_smp_recv+0x8a>
	err = handlers[hdr->code].func(smp, buf);
   1f3fa:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   1f3fe:	4620      	mov	r0, r4
   1f400:	4629      	mov	r1, r5
   1f402:	4798      	blx	r3
	if (err) {
   1f404:	4601      	mov	r1, r0
   1f406:	2800      	cmp	r0, #0
   1f408:	d095      	beq.n	1f336 <bt_smp_recv+0x1e>
   1f40a:	e7ca      	b.n	1f3a2 <bt_smp_recv+0x8a>
   1f40c:	0002c064 	.word	0x0002c064
   1f410:	0002bfe4 	.word	0x0002bfe4
   1f414:	0003047f 	.word	0x0003047f
   1f418:	0003049a 	.word	0x0003049a
   1f41c:	000304cb 	.word	0x000304cb
   1f420:	0002c818 	.word	0x0002c818
   1f424:	000304ed 	.word	0x000304ed
   1f428:	00030507 	.word	0x00030507
   1f42c:	0002fd2b 	.word	0x0002fd2b

0001f430 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1f430:	4b16      	ldr	r3, [pc, #88]	; (1f48c <bt_smp_pkey_ready+0x5c>)
{
   1f432:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1f434:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1f436:	b958      	cbnz	r0, 1f450 <bt_smp_pkey_ready+0x20>
}
   1f438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f43c:	4914      	ldr	r1, [pc, #80]	; (1f490 <bt_smp_pkey_ready+0x60>)
   1f43e:	4b15      	ldr	r3, [pc, #84]	; (1f494 <bt_smp_pkey_ready+0x64>)
		BT_WARN("Public key not available");
   1f440:	4815      	ldr	r0, [pc, #84]	; (1f498 <bt_smp_pkey_ready+0x68>)
   1f442:	1ac9      	subs	r1, r1, r3
   1f444:	08c9      	lsrs	r1, r1, #3
   1f446:	0189      	lsls	r1, r1, #6
   1f448:	f041 0102 	orr.w	r1, r1, #2
   1f44c:	f007 bc70 	b.w	26d30 <log_0>
	z_impl_k_sem_give(sem);
   1f450:	4812      	ldr	r0, [pc, #72]	; (1f49c <bt_smp_pkey_ready+0x6c>)
   1f452:	f004 f823 	bl	2349c <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f456:	4c12      	ldr	r4, [pc, #72]	; (1f4a0 <bt_smp_pkey_ready+0x70>)
   1f458:	1d23      	adds	r3, r4, #4
   1f45a:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1f45e:	065b      	lsls	r3, r3, #25
   1f460:	d513      	bpl.n	1f48a <bt_smp_pkey_ready+0x5a>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   1f462:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1f466:	78db      	ldrb	r3, [r3, #3]
   1f468:	b97b      	cbnz	r3, 1f48a <bt_smp_pkey_ready+0x5a>
			err = sc_send_public_key(smp);
   1f46a:	4620      	mov	r0, r4
   1f46c:	f7fe fe52 	bl	1e114 <sc_send_public_key>
			if (err) {
   1f470:	4601      	mov	r1, r0
   1f472:	b110      	cbz	r0, 1f47a <bt_smp_pkey_ready+0x4a>
				smp_error(smp, err);
   1f474:	4620      	mov	r0, r4
   1f476:	f00b f805 	bl	2a484 <smp_error>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f47a:	e8d4 3fef 	ldaex	r3, [r4]
   1f47e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1f482:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1f486:	2a00      	cmp	r2, #0
   1f488:	d1f7      	bne.n	1f47a <bt_smp_pkey_ready+0x4a>
}
   1f48a:	bd10      	pop	{r4, pc}
   1f48c:	200098c8 	.word	0x200098c8
   1f490:	0002c064 	.word	0x0002c064
   1f494:	0002bfe4 	.word	0x0002bfe4
   1f498:	00030522 	.word	0x00030522
   1f49c:	20008580 	.word	0x20008580
   1f4a0:	20008d98 	.word	0x20008d98

0001f4a4 <smp_ident_addr_info>:
{
   1f4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1f4a8:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1f4aa:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1f4ae:	7833      	ldrb	r3, [r6, #0]
{
   1f4b0:	4605      	mov	r5, r0
   1f4b2:	f104 0790 	add.w	r7, r4, #144	; 0x90
   1f4b6:	b313      	cbz	r3, 1f4fe <smp_ident_addr_info+0x5a>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1f4b8:	79b3      	ldrb	r3, [r6, #6]
   1f4ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f4be:	2bc0      	cmp	r3, #192	; 0xc0
   1f4c0:	d01d      	beq.n	1f4fe <smp_ident_addr_info+0x5a>
   1f4c2:	4b52      	ldr	r3, [pc, #328]	; (1f60c <smp_ident_addr_info+0x168>)
   1f4c4:	4c52      	ldr	r4, [pc, #328]	; (1f610 <smp_ident_addr_info+0x16c>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1f4c6:	4630      	mov	r0, r6
   1f4c8:	1ae4      	subs	r4, r4, r3
   1f4ca:	f7f7 fc57 	bl	16d7c <bt_addr_le_str_real>
   1f4ce:	f7f3 fa0d 	bl	128ec <z_log_strdup>
   1f4d2:	08e4      	lsrs	r4, r4, #3
   1f4d4:	01a4      	lsls	r4, r4, #6
   1f4d6:	f044 0401 	orr.w	r4, r4, #1
   1f4da:	4601      	mov	r1, r0
   1f4dc:	4622      	mov	r2, r4
   1f4de:	484d      	ldr	r0, [pc, #308]	; (1f614 <smp_ident_addr_info+0x170>)
   1f4e0:	f007 fc33 	bl	26d4a <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1f4e4:	4638      	mov	r0, r7
   1f4e6:	f7f7 fc49 	bl	16d7c <bt_addr_le_str_real>
   1f4ea:	f7f3 f9ff 	bl	128ec <z_log_strdup>
   1f4ee:	4622      	mov	r2, r4
   1f4f0:	4601      	mov	r1, r0
   1f4f2:	4849      	ldr	r0, [pc, #292]	; (1f618 <smp_ident_addr_info+0x174>)
   1f4f4:	f007 fc29 	bl	26d4a <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
   1f4f8:	200a      	movs	r0, #10
}
   1f4fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   1f4fe:	2207      	movs	r2, #7
   1f500:	4631      	mov	r1, r6
   1f502:	4638      	mov	r0, r7
   1f504:	f009 f835 	bl	28572 <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   1f508:	b168      	cbz	r0, 1f526 <smp_ident_addr_info+0x82>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1f50a:	4631      	mov	r1, r6
   1f50c:	7a20      	ldrb	r0, [r4, #8]
   1f50e:	f000 fb1f 	bl	1fb50 <bt_keys_find_addr>
		if (keys) {
   1f512:	4680      	mov	r8, r0
   1f514:	b138      	cbz	r0, 1f526 <smp_ident_addr_info+0x82>
			if (!update_keys_check(smp, keys)) {
   1f516:	4601      	mov	r1, r0
   1f518:	4628      	mov	r0, r5
   1f51a:	f00a fd5c 	bl	29fd6 <update_keys_check>
   1f51e:	b300      	cbz	r0, 1f562 <smp_ident_addr_info+0xbe>
			bt_keys_clear(keys);
   1f520:	4640      	mov	r0, r8
   1f522:	f000 fb25 	bl	1fb70 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1f526:	210d      	movs	r1, #13
   1f528:	1d28      	adds	r0, r5, #4
   1f52a:	f00a fd4e 	bl	29fca <atomic_test_bit>
   1f52e:	2800      	cmp	r0, #0
   1f530:	d046      	beq.n	1f5c0 <smp_ident_addr_info+0x11c>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1f532:	463a      	mov	r2, r7
   1f534:	2002      	movs	r0, #2
   1f536:	7a21      	ldrb	r1, [r4, #8]
   1f538:	f00b f856 	bl	2a5e8 <bt_keys_get_type>
		if (!keys) {
   1f53c:	4680      	mov	r8, r0
   1f53e:	b990      	cbnz	r0, 1f566 <smp_ident_addr_info+0xc2>
   1f540:	4a32      	ldr	r2, [pc, #200]	; (1f60c <smp_ident_addr_info+0x168>)
   1f542:	4c33      	ldr	r4, [pc, #204]	; (1f610 <smp_ident_addr_info+0x16c>)
			BT_ERR("Unable to get keys for %s",
   1f544:	4638      	mov	r0, r7
   1f546:	1aa4      	subs	r4, r4, r2
   1f548:	f7f7 fc18 	bl	16d7c <bt_addr_le_str_real>
   1f54c:	f7f3 f9ce 	bl	128ec <z_log_strdup>
   1f550:	08e4      	lsrs	r4, r4, #3
   1f552:	01a4      	lsls	r4, r4, #6
   1f554:	f044 0401 	orr.w	r4, r4, #1
   1f558:	4601      	mov	r1, r0
   1f55a:	4622      	mov	r2, r4
   1f55c:	482f      	ldr	r0, [pc, #188]	; (1f61c <smp_ident_addr_info+0x178>)
   1f55e:	f007 fbf4 	bl	26d4a <log_1>
				return BT_SMP_ERR_UNSPECIFIED;
   1f562:	2008      	movs	r0, #8
   1f564:	e7c9      	b.n	1f4fa <smp_ident_addr_info+0x56>
		if (conn->role == BT_HCI_ROLE_MASTER) {
   1f566:	78e3      	ldrb	r3, [r4, #3]
   1f568:	2b00      	cmp	r3, #0
   1f56a:	d13c      	bne.n	1f5e6 <smp_ident_addr_info+0x142>
			dst = &conn->le.resp_addr;
   1f56c:	f104 019e 	add.w	r1, r4, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1f570:	780b      	ldrb	r3, [r1, #0]
   1f572:	2b01      	cmp	r3, #1
   1f574:	d121      	bne.n	1f5ba <smp_ident_addr_info+0x116>
		if (bt_addr_le_is_rpa(dst)) {
   1f576:	798b      	ldrb	r3, [r1, #6]
   1f578:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f57c:	2b40      	cmp	r3, #64	; 0x40
   1f57e:	d11c      	bne.n	1f5ba <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   1f580:	2206      	movs	r2, #6
   1f582:	3101      	adds	r1, #1
   1f584:	f108 003a 	add.w	r0, r8, #58	; 0x3a
   1f588:	f009 f803 	bl	28592 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1f58c:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   1f590:	b19b      	cbz	r3, 1f5ba <smp_ident_addr_info+0x116>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1f592:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
   1f596:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f59a:	2bc0      	cmp	r3, #192	; 0xc0
   1f59c:	d00d      	beq.n	1f5ba <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   1f59e:	2207      	movs	r2, #7
   1f5a0:	4631      	mov	r1, r6
   1f5a2:	f108 0001 	add.w	r0, r8, #1
   1f5a6:	f008 fff4 	bl	28592 <memcpy>
   1f5aa:	2207      	movs	r2, #7
   1f5ac:	4631      	mov	r1, r6
   1f5ae:	4638      	mov	r0, r7
   1f5b0:	f008 ffef 	bl	28592 <memcpy>
				bt_conn_identity_resolved(conn);
   1f5b4:	4620      	mov	r0, r4
   1f5b6:	f7fa fa07 	bl	199c8 <bt_conn_identity_resolved>
		bt_id_add(keys);
   1f5ba:	4640      	mov	r0, r8
   1f5bc:	f7f9 f970 	bl	188a0 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1f5c0:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   1f5c4:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1f5c8:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1f5ca:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1f5ce:	d503      	bpl.n	1f5d8 <smp_ident_addr_info+0x134>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1f5d0:	210a      	movs	r1, #10
   1f5d2:	4628      	mov	r0, r5
   1f5d4:	f00a fd34 	bl	2a040 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1f5d8:	78e3      	ldrb	r3, [r4, #3]
   1f5da:	b13b      	cbz	r3, 1f5ec <smp_ident_addr_info+0x148>
	if (!smp->local_dist && !smp->remote_dist) {
   1f5dc:	f8b5 40e8 	ldrh.w	r4, [r5, #232]	; 0xe8
   1f5e0:	b174      	cbz	r4, 1f600 <smp_ident_addr_info+0x15c>
	return 0;
   1f5e2:	2000      	movs	r0, #0
   1f5e4:	e789      	b.n	1f4fa <smp_ident_addr_info+0x56>
			dst = &conn->le.init_addr;
   1f5e6:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1f5ea:	e7c1      	b.n	1f570 <smp_ident_addr_info+0xcc>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
   1f5ec:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   1f5f0:	2b00      	cmp	r3, #0
   1f5f2:	d1f3      	bne.n	1f5dc <smp_ident_addr_info+0x138>
		err = bt_smp_distribute_keys(smp);
   1f5f4:	4628      	mov	r0, r5
   1f5f6:	f7fe fdaf 	bl	1e158 <bt_smp_distribute_keys>
		if (err) {
   1f5fa:	2800      	cmp	r0, #0
   1f5fc:	d0ee      	beq.n	1f5dc <smp_ident_addr_info+0x138>
   1f5fe:	e77c      	b.n	1f4fa <smp_ident_addr_info+0x56>
		smp_pairing_complete(smp, 0);
   1f600:	4621      	mov	r1, r4
   1f602:	4628      	mov	r0, r5
   1f604:	f7ff fe2c 	bl	1f260 <smp_pairing_complete>
   1f608:	e7eb      	b.n	1f5e2 <smp_ident_addr_info+0x13e>
   1f60a:	bf00      	nop
   1f60c:	0002bfe4 	.word	0x0002bfe4
   1f610:	0002c064 	.word	0x0002c064
   1f614:	0003053b 	.word	0x0003053b
   1f618:	00030294 	.word	0x00030294
   1f61c:	000303ca 	.word	0x000303ca

0001f620 <smp_master_ident>:
{
   1f620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f624:	460b      	mov	r3, r1
   1f626:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1f628:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1f62c:	210d      	movs	r1, #13
   1f62e:	3004      	adds	r0, #4
   1f630:	f00a fccb 	bl	29fca <atomic_test_bit>
   1f634:	b380      	cbz	r0, 1f698 <smp_master_ident+0x78>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1f636:	f106 0790 	add.w	r7, r6, #144	; 0x90
   1f63a:	463a      	mov	r2, r7
   1f63c:	2004      	movs	r0, #4
   1f63e:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
   1f640:	f8d3 8008 	ldr.w	r8, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1f644:	f00a ffd0 	bl	2a5e8 <bt_keys_get_type>
		if (!keys) {
   1f648:	4605      	mov	r5, r0
   1f64a:	b998      	cbnz	r0, 1f674 <smp_master_ident+0x54>
   1f64c:	4a24      	ldr	r2, [pc, #144]	; (1f6e0 <smp_master_ident+0xc0>)
   1f64e:	4c25      	ldr	r4, [pc, #148]	; (1f6e4 <smp_master_ident+0xc4>)
			BT_ERR("Unable to get keys for %s",
   1f650:	4638      	mov	r0, r7
   1f652:	1aa4      	subs	r4, r4, r2
   1f654:	f7f7 fb92 	bl	16d7c <bt_addr_le_str_real>
   1f658:	f7f3 f948 	bl	128ec <z_log_strdup>
   1f65c:	08e4      	lsrs	r4, r4, #3
   1f65e:	01a4      	lsls	r4, r4, #6
   1f660:	f044 0401 	orr.w	r4, r4, #1
   1f664:	4601      	mov	r1, r0
   1f666:	4622      	mov	r2, r4
   1f668:	481f      	ldr	r0, [pc, #124]	; (1f6e8 <smp_master_ident+0xc8>)
   1f66a:	f007 fb6e 	bl	26d4a <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1f66e:	2008      	movs	r0, #8
}
   1f670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1f674:	2202      	movs	r2, #2
   1f676:	4641      	mov	r1, r8
   1f678:	3018      	adds	r0, #24
   1f67a:	f008 ff8a 	bl	28592 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1f67e:	2208      	movs	r2, #8
   1f680:	f108 0102 	add.w	r1, r8, #2
   1f684:	f105 0010 	add.w	r0, r5, #16
   1f688:	f008 ff83 	bl	28592 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1f68c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1f690:	f023 0301 	bic.w	r3, r3, #1
   1f694:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1f698:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1f69c:	079a      	lsls	r2, r3, #30
   1f69e:	d50a      	bpl.n	1f6b6 <smp_master_ident+0x96>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1f6a0:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1f6a2:	4620      	mov	r0, r4
   1f6a4:	f00a fccc 	bl	2a040 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1f6a8:	78f3      	ldrb	r3, [r6, #3]
   1f6aa:	b143      	cbz	r3, 1f6be <smp_master_ident+0x9e>
	if (!smp->local_dist && !smp->remote_dist) {
   1f6ac:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1f6b0:	b17d      	cbz	r5, 1f6d2 <smp_master_ident+0xb2>
	return 0;
   1f6b2:	2000      	movs	r0, #0
   1f6b4:	e7dc      	b.n	1f670 <smp_master_ident+0x50>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1f6b6:	075b      	lsls	r3, r3, #29
   1f6b8:	d5f6      	bpl.n	1f6a8 <smp_master_ident+0x88>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1f6ba:	210a      	movs	r1, #10
   1f6bc:	e7f1      	b.n	1f6a2 <smp_master_ident+0x82>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
   1f6be:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1f6c2:	2b00      	cmp	r3, #0
   1f6c4:	d1f2      	bne.n	1f6ac <smp_master_ident+0x8c>
		err = bt_smp_distribute_keys(smp);
   1f6c6:	4620      	mov	r0, r4
   1f6c8:	f7fe fd46 	bl	1e158 <bt_smp_distribute_keys>
		if (err) {
   1f6cc:	2800      	cmp	r0, #0
   1f6ce:	d0ed      	beq.n	1f6ac <smp_master_ident+0x8c>
   1f6d0:	e7ce      	b.n	1f670 <smp_master_ident+0x50>
		smp_pairing_complete(smp, 0);
   1f6d2:	4620      	mov	r0, r4
   1f6d4:	4629      	mov	r1, r5
   1f6d6:	f7ff fdc3 	bl	1f260 <smp_pairing_complete>
	return 0;
   1f6da:	4628      	mov	r0, r5
   1f6dc:	e7c8      	b.n	1f670 <smp_master_ident+0x50>
   1f6de:	bf00      	nop
   1f6e0:	0002bfe4 	.word	0x0002bfe4
   1f6e4:	0002c064 	.word	0x0002c064
   1f6e8:	000303ca 	.word	0x000303ca

0001f6ec <smp_pairing_failed>:
{
   1f6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f6ee:	4604      	mov	r4, r0
   1f6f0:	4b14      	ldr	r3, [pc, #80]	; (1f744 <smp_pairing_failed+0x58>)
   1f6f2:	4a15      	ldr	r2, [pc, #84]	; (1f748 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1f6f4:	688d      	ldr	r5, [r1, #8]
   1f6f6:	1ad2      	subs	r2, r2, r3
   1f6f8:	08d2      	lsrs	r2, r2, #3
	BT_ERR("reason 0x%x", req->reason);
   1f6fa:	0192      	lsls	r2, r2, #6
	struct bt_conn *conn = smp->chan.chan.conn;
   1f6fc:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	BT_ERR("reason 0x%x", req->reason);
   1f700:	7829      	ldrb	r1, [r5, #0]
   1f702:	4812      	ldr	r0, [pc, #72]	; (1f74c <smp_pairing_failed+0x60>)
   1f704:	f042 0201 	orr.w	r2, r2, #1
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1f708:	1d27      	adds	r7, r4, #4
	BT_ERR("reason 0x%x", req->reason);
   1f70a:	f007 fb1e 	bl	26d4a <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1f70e:	210a      	movs	r1, #10
   1f710:	4638      	mov	r0, r7
   1f712:	f00a fc81 	bl	2a018 <atomic_test_and_clear_bit>
   1f716:	b140      	cbz	r0, 1f72a <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
   1f718:	4b0d      	ldr	r3, [pc, #52]	; (1f750 <smp_pairing_failed+0x64>)
   1f71a:	681b      	ldr	r3, [r3, #0]
   1f71c:	b963      	cbnz	r3, 1f738 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
   1f71e:	4620      	mov	r0, r4
   1f720:	7829      	ldrb	r1, [r5, #0]
   1f722:	f7ff fd9d 	bl	1f260 <smp_pairing_complete>
}
   1f726:	2000      	movs	r0, #0
   1f728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1f72a:	210b      	movs	r1, #11
   1f72c:	4638      	mov	r0, r7
   1f72e:	f00a fc73 	bl	2a018 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1f732:	2800      	cmp	r0, #0
   1f734:	d1f0      	bne.n	1f718 <smp_pairing_failed+0x2c>
   1f736:	e7f2      	b.n	1f71e <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
   1f738:	691b      	ldr	r3, [r3, #16]
   1f73a:	2b00      	cmp	r3, #0
   1f73c:	d0ef      	beq.n	1f71e <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
   1f73e:	4630      	mov	r0, r6
   1f740:	4798      	blx	r3
   1f742:	e7ec      	b.n	1f71e <smp_pairing_failed+0x32>
   1f744:	0002bfe4 	.word	0x0002bfe4
   1f748:	0002c064 	.word	0x0002c064
   1f74c:	0003054f 	.word	0x0003054f
   1f750:	20009814 	.word	0x20009814

0001f754 <bt_smp_encrypt_change>:
{
   1f754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   1f758:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1f75a:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   1f75e:	4604      	mov	r4, r0
   1f760:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1f762:	4630      	mov	r0, r6
   1f764:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1f766:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1f76a:	f00a fc55 	bl	2a018 <atomic_test_and_clear_bit>
   1f76e:	2800      	cmp	r0, #0
   1f770:	d061      	beq.n	1f836 <bt_smp_encrypt_change+0xe2>
	if (hci_status) {
   1f772:	b1df      	cbz	r7, 1f7ac <bt_smp_encrypt_change+0x58>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1f774:	2103      	movs	r1, #3
   1f776:	4630      	mov	r0, r6
   1f778:	f00a fc27 	bl	29fca <atomic_test_bit>
   1f77c:	2800      	cmp	r0, #0
   1f77e:	d05a      	beq.n	1f836 <bt_smp_encrypt_change+0xe2>
			uint8_t smp_err = smp_err_get(
   1f780:	4638      	mov	r0, r7
   1f782:	f7f8 fa75 	bl	17c70 <bt_security_err_get>
	switch (auth_err) {
   1f786:	3801      	subs	r0, #1
   1f788:	b2c0      	uxtb	r0, r0
   1f78a:	2807      	cmp	r0, #7
			uint8_t smp_err = smp_err_get(
   1f78c:	bf8c      	ite	hi
   1f78e:	2400      	movhi	r4, #0
   1f790:	4b2e      	ldrls	r3, [pc, #184]	; (1f84c <bt_smp_encrypt_change+0xf8>)
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1f792:	f04f 0102 	mov.w	r1, #2
   1f796:	bf98      	it	ls
   1f798:	5c1c      	ldrbls	r4, [r3, r0]
   1f79a:	4630      	mov	r0, r6
   1f79c:	f00a fc50 	bl	2a040 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1f7a0:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   1f7a2:	4628      	mov	r0, r5
}
   1f7a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   1f7a8:	f7ff bd5a 	b.w	1f260 <smp_pairing_complete>
	if (!conn->encrypt) {
   1f7ac:	f898 300b 	ldrb.w	r3, [r8, #11]
   1f7b0:	2b00      	cmp	r3, #0
   1f7b2:	d040      	beq.n	1f836 <bt_smp_encrypt_change+0xe2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1f7b4:	2103      	movs	r1, #3
   1f7b6:	4630      	mov	r0, r6
   1f7b8:	f00a fc07 	bl	29fca <atomic_test_bit>
   1f7bc:	b920      	cbnz	r0, 1f7c8 <bt_smp_encrypt_change+0x74>
		smp_reset(smp);
   1f7be:	4628      	mov	r0, r5
}
   1f7c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   1f7c4:	f00a bcae 	b.w	2a124 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f7c8:	2105      	movs	r1, #5
   1f7ca:	4630      	mov	r0, r6
   1f7cc:	f00a fbfd 	bl	29fca <atomic_test_bit>
   1f7d0:	b1b8      	cbz	r0, 1f802 <bt_smp_encrypt_change+0xae>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1f7d2:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   1f7d6:	071f      	lsls	r7, r3, #28
   1f7d8:	d507      	bpl.n	1f7ea <bt_smp_encrypt_change+0x96>
   1f7da:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1f7de:	0718      	lsls	r0, r3, #28
   1f7e0:	d503      	bpl.n	1f7ea <bt_smp_encrypt_change+0x96>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1f7e2:	2111      	movs	r1, #17
   1f7e4:	4630      	mov	r0, r6
   1f7e6:	f00a fc2b 	bl	2a040 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1f7ea:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   1f7ee:	f023 0308 	bic.w	r3, r3, #8
   1f7f2:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1f7f6:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1f7fa:	f023 0308 	bic.w	r3, r3, #8
   1f7fe:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1f802:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1f806:	07d9      	lsls	r1, r3, #31
   1f808:	d517      	bpl.n	1f83a <bt_smp_encrypt_change+0xe6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1f80a:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1f80c:	4628      	mov	r0, r5
   1f80e:	f00a fc17 	bl	2a040 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1f812:	2102      	movs	r1, #2
   1f814:	4630      	mov	r0, r6
   1f816:	f00a fc13 	bl	2a040 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1f81a:	f898 3003 	ldrb.w	r3, [r8, #3]
   1f81e:	b913      	cbnz	r3, 1f826 <bt_smp_encrypt_change+0xd2>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
   1f820:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1f824:	b93b      	cbnz	r3, 1f836 <bt_smp_encrypt_change+0xe2>
	if (bt_smp_distribute_keys(smp)) {
   1f826:	4628      	mov	r0, r5
   1f828:	f7fe fc96 	bl	1e158 <bt_smp_distribute_keys>
   1f82c:	b918      	cbnz	r0, 1f836 <bt_smp_encrypt_change+0xe2>
	if (!smp->local_dist && !smp->remote_dist) {
   1f82e:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   1f832:	2900      	cmp	r1, #0
   1f834:	d0b5      	beq.n	1f7a2 <bt_smp_encrypt_change+0x4e>
}
   1f836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1f83a:	079a      	lsls	r2, r3, #30
   1f83c:	d501      	bpl.n	1f842 <bt_smp_encrypt_change+0xee>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1f83e:	2108      	movs	r1, #8
   1f840:	e7e4      	b.n	1f80c <bt_smp_encrypt_change+0xb8>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1f842:	075b      	lsls	r3, r3, #29
   1f844:	d5e5      	bpl.n	1f812 <bt_smp_encrypt_change+0xbe>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1f846:	210a      	movs	r1, #10
   1f848:	e7e0      	b.n	1f80c <bt_smp_encrypt_change+0xb8>
   1f84a:	bf00      	nop
   1f84c:	000305c2 	.word	0x000305c2

0001f850 <smp_timeout>:
{
   1f850:	b510      	push	{r4, lr}
   1f852:	4604      	mov	r4, r0
   1f854:	4b0a      	ldr	r3, [pc, #40]	; (1f880 <smp_timeout+0x30>)
   1f856:	490b      	ldr	r1, [pc, #44]	; (1f884 <smp_timeout+0x34>)
	BT_ERR("SMP Timeout");
   1f858:	480b      	ldr	r0, [pc, #44]	; (1f888 <smp_timeout+0x38>)
   1f85a:	1ac9      	subs	r1, r1, r3
   1f85c:	08c9      	lsrs	r1, r1, #3
   1f85e:	0189      	lsls	r1, r1, #6
   1f860:	f041 0101 	orr.w	r1, r1, #1
   1f864:	f007 fa64 	bl	26d30 <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1f868:	f5a4 70f0 	sub.w	r0, r4, #480	; 0x1e0
   1f86c:	2108      	movs	r1, #8
   1f86e:	f7ff fcf7 	bl	1f260 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1f872:	f5a4 70ee 	sub.w	r0, r4, #476	; 0x1dc
   1f876:	2104      	movs	r1, #4
}
   1f878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1f87c:	f00a bbe0 	b.w	2a040 <atomic_set_bit>
   1f880:	0002bfe4 	.word	0x0002bfe4
   1f884:	0002c064 	.word	0x0002c064
   1f888:	0003055b 	.word	0x0003055b

0001f88c <smp_ident_sent>:
{
   1f88c:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   1f88e:	7883      	ldrb	r3, [r0, #2]
   1f890:	2b01      	cmp	r3, #1
   1f892:	d122      	bne.n	1f8da <smp_ident_sent+0x4e>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1f894:	2106      	movs	r1, #6
   1f896:	f009 fb5e 	bl	28f56 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1f89a:	4604      	mov	r4, r0
   1f89c:	b970      	cbnz	r0, 1f8bc <smp_ident_sent+0x30>
   1f89e:	490f      	ldr	r1, [pc, #60]	; (1f8dc <smp_ident_sent+0x50>)
   1f8a0:	f240 332d 	movw	r3, #813	; 0x32d
   1f8a4:	4a0e      	ldr	r2, [pc, #56]	; (1f8e0 <smp_ident_sent+0x54>)
   1f8a6:	480f      	ldr	r0, [pc, #60]	; (1f8e4 <smp_ident_sent+0x58>)
   1f8a8:	f006 ff38 	bl	2671c <printk>
   1f8ac:	480e      	ldr	r0, [pc, #56]	; (1f8e8 <smp_ident_sent+0x5c>)
   1f8ae:	f006 ff35 	bl	2671c <printk>
   1f8b2:	f240 312d 	movw	r1, #813	; 0x32d
   1f8b6:	480a      	ldr	r0, [pc, #40]	; (1f8e0 <smp_ident_sent+0x54>)
   1f8b8:	f007 f9d5 	bl	26c66 <assert_post_action>
		smp->local_dist &= ~dist_complete;
   1f8bc:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   1f8c0:	f023 0301 	bic.w	r3, r3, #1
   1f8c4:	f804 3c08 	strb.w	r3, [r4, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
   1f8c8:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   1f8cc:	b929      	cbnz	r1, 1f8da <smp_ident_sent+0x4e>
			smp_pairing_complete(smp, 0);
   1f8ce:	f1a4 00f0 	sub.w	r0, r4, #240	; 0xf0
}
   1f8d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   1f8d6:	f7ff bcc3 	b.w	1f260 <smp_pairing_complete>
}
   1f8da:	bd10      	pop	{r4, pc}
   1f8dc:	0002fbe8 	.word	0x0002fbe8
   1f8e0:	00030567 	.word	0x00030567
   1f8e4:	0002cfb2 	.word	0x0002cfb2
   1f8e8:	00030596 	.word	0x00030596

0001f8ec <bt_smp_update_keys>:
{
   1f8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f8ee:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1f8f0:	f7fe fbc2 	bl	1e078 <smp_chan_get>
	if (!smp) {
   1f8f4:	4605      	mov	r5, r0
   1f8f6:	2800      	cmp	r0, #0
   1f8f8:	d07c      	beq.n	1f9f4 <bt_smp_update_keys+0x108>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1f8fa:	1d06      	adds	r6, r0, #4
   1f8fc:	2103      	movs	r1, #3
   1f8fe:	4630      	mov	r0, r6
   1f900:	f00a fb63 	bl	29fca <atomic_test_bit>
   1f904:	2800      	cmp	r0, #0
   1f906:	d075      	beq.n	1f9f4 <bt_smp_update_keys+0x108>
	if (conn->le.keys) {
   1f908:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1f90c:	b108      	cbz	r0, 1f912 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1f90e:	f000 f92f 	bl	1fb70 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1f912:	f104 0790 	add.w	r7, r4, #144	; 0x90
   1f916:	4639      	mov	r1, r7
   1f918:	7a20      	ldrb	r0, [r4, #8]
   1f91a:	f000 f889 	bl	1fa30 <bt_keys_get_addr>
   1f91e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys) {
   1f922:	b9b0      	cbnz	r0, 1f952 <bt_smp_update_keys+0x66>
   1f924:	4a34      	ldr	r2, [pc, #208]	; (1f9f8 <bt_smp_update_keys+0x10c>)
   1f926:	4c35      	ldr	r4, [pc, #212]	; (1f9fc <bt_smp_update_keys+0x110>)
		BT_ERR("Unable to get keys for %s",
   1f928:	4638      	mov	r0, r7
   1f92a:	1aa4      	subs	r4, r4, r2
   1f92c:	f7f7 fa26 	bl	16d7c <bt_addr_le_str_real>
   1f930:	f7f2 ffdc 	bl	128ec <z_log_strdup>
   1f934:	08e4      	lsrs	r4, r4, #3
   1f936:	01a4      	lsls	r4, r4, #6
   1f938:	f044 0401 	orr.w	r4, r4, #1
   1f93c:	4601      	mov	r1, r0
   1f93e:	4622      	mov	r2, r4
   1f940:	482f      	ldr	r0, [pc, #188]	; (1fa00 <bt_smp_update_keys+0x114>)
   1f942:	f007 fa02 	bl	26d4a <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1f946:	4628      	mov	r0, r5
}
   1f948:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1f94c:	2108      	movs	r1, #8
   1f94e:	f00a bd99 	b.w	2a484 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1f952:	210e      	movs	r1, #14
   1f954:	4630      	mov	r0, r6
   1f956:	f00a fb38 	bl	29fca <atomic_test_bit>
   1f95a:	b128      	cbz	r0, 1f968 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1f95c:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1f960:	7b53      	ldrb	r3, [r2, #13]
   1f962:	f043 0302 	orr.w	r3, r3, #2
   1f966:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1f968:	7a2a      	ldrb	r2, [r5, #8]
   1f96a:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   1f96e:	2a03      	cmp	r2, #3
   1f970:	7b4b      	ldrb	r3, [r1, #13]
   1f972:	d836      	bhi.n	1f9e2 <bt_smp_update_keys+0xf6>
   1f974:	b3c2      	cbz	r2, 1f9e8 <bt_smp_update_keys+0xfc>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1f976:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1f97a:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1f97c:	7b6b      	ldrb	r3, [r5, #13]
   1f97e:	7d2a      	ldrb	r2, [r5, #20]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f980:	4630      	mov	r0, r6
	return MIN(req->max_key_size, rsp->max_key_size);
   1f982:	4293      	cmp	r3, r2
   1f984:	bf28      	it	cs
   1f986:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1f988:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f98a:	2105      	movs	r1, #5
   1f98c:	f00a fb1d 	bl	29fca <atomic_test_bit>
   1f990:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
		conn->le.keys->flags |= BT_KEYS_SC;
   1f994:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f996:	b350      	cbz	r0, 1f9ee <bt_smp_update_keys+0x102>
		conn->le.keys->flags |= BT_KEYS_SC;
   1f998:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1f99c:	210d      	movs	r1, #13
   1f99e:	4630      	mov	r0, r6
		conn->le.keys->flags |= BT_KEYS_SC;
   1f9a0:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1f9a2:	f00a fb12 	bl	29fca <atomic_test_bit>
   1f9a6:	b328      	cbz	r0, 1f9f4 <bt_smp_update_keys+0x108>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1f9a8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1f9ac:	2120      	movs	r1, #32
   1f9ae:	f00a fe2b 	bl	2a608 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1f9b2:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1f9b6:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1f9ba:	2210      	movs	r2, #16
   1f9bc:	301a      	adds	r0, #26
   1f9be:	f008 fde8 	bl	28592 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1f9c2:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1f9c6:	2208      	movs	r2, #8
   1f9c8:	2100      	movs	r1, #0
   1f9ca:	3010      	adds	r0, #16
   1f9cc:	f008 fe0c 	bl	285e8 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1f9d0:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1f9d4:	2202      	movs	r2, #2
}
   1f9d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1f9da:	2100      	movs	r1, #0
   1f9dc:	3018      	adds	r0, #24
   1f9de:	f008 be03 	b.w	285e8 <memset>
	switch (smp->method) {
   1f9e2:	3a05      	subs	r2, #5
   1f9e4:	2a01      	cmp	r2, #1
   1f9e6:	d9c6      	bls.n	1f976 <bt_smp_update_keys+0x8a>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1f9e8:	f023 0301 	bic.w	r3, r3, #1
   1f9ec:	e7c5      	b.n	1f97a <bt_smp_update_keys+0x8e>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1f9ee:	f022 0210 	bic.w	r2, r2, #16
   1f9f2:	735a      	strb	r2, [r3, #13]
}
   1f9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f9f6:	bf00      	nop
   1f9f8:	0002bfe4 	.word	0x0002bfe4
   1f9fc:	0002c064 	.word	0x0002c064
   1fa00:	000303ca 	.word	0x000303ca

0001fa04 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1fa04:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1fa06:	4b07      	ldr	r3, [pc, #28]	; (1fa24 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1fa08:	4807      	ldr	r0, [pc, #28]	; (1fa28 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1fa0a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
   1fa0e:	f003 0306 	and.w	r3, r3, #6
   1fa12:	1f9a      	subs	r2, r3, #6
   1fa14:	4253      	negs	r3, r2
   1fa16:	4153      	adcs	r3, r2
   1fa18:	4a04      	ldr	r2, [pc, #16]	; (1fa2c <bt_smp_init+0x28>)
   1fa1a:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1fa1c:	f7f9 fd7c 	bl	19518 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1fa20:	2000      	movs	r0, #0
   1fa22:	bd08      	pop	{r3, pc}
   1fa24:	20008000 	.word	0x20008000
   1fa28:	20008310 	.word	0x20008310
   1fa2c:	2000a51d 	.word	0x2000a51d

0001fa30 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1fa30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1fa32:	4c11      	ldr	r4, [pc, #68]	; (1fa78 <bt_keys_get_addr+0x48>)
{
   1fa34:	4605      	mov	r5, r0
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1fa36:	7823      	ldrb	r3, [r4, #0]
{
   1fa38:	460e      	mov	r6, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1fa3a:	4283      	cmp	r3, r0
   1fa3c:	4627      	mov	r7, r4
   1fa3e:	d00b      	beq.n	1fa58 <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1fa40:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   1fa42:	2207      	movs	r2, #7
   1fa44:	4669      	mov	r1, sp
   1fa46:	480d      	ldr	r0, [pc, #52]	; (1fa7c <bt_keys_get_addr+0x4c>)
   1fa48:	9400      	str	r4, [sp, #0]
   1fa4a:	f8cd 4003 	str.w	r4, [sp, #3]
   1fa4e:	f008 fd90 	bl	28572 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1fa52:	b140      	cbz	r0, 1fa66 <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1fa54:	4620      	mov	r0, r4
   1fa56:	e00d      	b.n	1fa74 <bt_keys_get_addr+0x44>
   1fa58:	2207      	movs	r2, #7
   1fa5a:	1c60      	adds	r0, r4, #1
   1fa5c:	f008 fd89 	bl	28572 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1fa60:	2800      	cmp	r0, #0
   1fa62:	d1ed      	bne.n	1fa40 <bt_keys_get_addr+0x10>
   1fa64:	e7f6      	b.n	1fa54 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
   1fa66:	2207      	movs	r2, #7
   1fa68:	4631      	mov	r1, r6
   1fa6a:	4804      	ldr	r0, [pc, #16]	; (1fa7c <bt_keys_get_addr+0x4c>)
		keys->id = id;
   1fa6c:	703d      	strb	r5, [r7, #0]
   1fa6e:	f008 fd90 	bl	28592 <memcpy>
		return keys;
   1fa72:	4801      	ldr	r0, [pc, #4]	; (1fa78 <bt_keys_get_addr+0x48>)
}
   1fa74:	b003      	add	sp, #12
   1fa76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fa78:	200098cc 	.word	0x200098cc
   1fa7c:	200098cd 	.word	0x200098cd

0001fa80 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1fa80:	460b      	mov	r3, r1
   1fa82:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1fa84:	4a04      	ldr	r2, [pc, #16]	; (1fa98 <bt_keys_foreach+0x18>)
{
   1fa86:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   1fa88:	89d4      	ldrh	r4, [r2, #14]
   1fa8a:	4204      	tst	r4, r0
   1fa8c:	d002      	beq.n	1fa94 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
   1fa8e:	4610      	mov	r0, r2
		}
	}
}
   1fa90:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1fa92:	4718      	bx	r3
}
   1fa94:	bc10      	pop	{r4}
   1fa96:	4770      	bx	lr
   1fa98:	200098cc 	.word	0x200098cc

0001fa9c <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   1fa9c:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1fa9e:	2200      	movs	r2, #0
   1faa0:	2002      	movs	r0, #2
   1faa2:	4902      	ldr	r1, [pc, #8]	; (1faac <keys_commit+0x10>)
   1faa4:	f7ff ffec 	bl	1fa80 <bt_keys_foreach>
	}

	return 0;
}
   1faa8:	2000      	movs	r0, #0
   1faaa:	bd08      	pop	{r3, pc}
   1faac:	0002a5e5 	.word	0x0002a5e5

0001fab0 <bt_keys_find>:
{
   1fab0:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1fab2:	4c09      	ldr	r4, [pc, #36]	; (1fad8 <bt_keys_find+0x28>)
{
   1fab4:	460b      	mov	r3, r1
   1fab6:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1fab8:	89e2      	ldrh	r2, [r4, #14]
   1faba:	4202      	tst	r2, r0
   1fabc:	d007      	beq.n	1face <bt_keys_find+0x1e>
   1fabe:	7822      	ldrb	r2, [r4, #0]
   1fac0:	429a      	cmp	r2, r3
   1fac2:	d104      	bne.n	1face <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   1fac4:	2207      	movs	r2, #7
   1fac6:	1c60      	adds	r0, r4, #1
   1fac8:	f008 fd53 	bl	28572 <memcmp>
   1facc:	b108      	cbz	r0, 1fad2 <bt_keys_find+0x22>
	return NULL;
   1face:	2000      	movs	r0, #0
}
   1fad0:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1fad2:	4620      	mov	r0, r4
   1fad4:	e7fc      	b.n	1fad0 <bt_keys_find+0x20>
   1fad6:	bf00      	nop
   1fad8:	200098cc 	.word	0x200098cc

0001fadc <bt_keys_find_irk>:
{
   1fadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1fade:	780b      	ldrb	r3, [r1, #0]
   1fae0:	4607      	mov	r7, r0
   1fae2:	2b01      	cmp	r3, #1
   1fae4:	460c      	mov	r4, r1
   1fae6:	d001      	beq.n	1faec <bt_keys_find_irk+0x10>
		return NULL;
   1fae8:	2000      	movs	r0, #0
}
   1faea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1faec:	798b      	ldrb	r3, [r1, #6]
   1faee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1faf2:	2b40      	cmp	r3, #64	; 0x40
   1faf4:	d1f8      	bne.n	1fae8 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1faf6:	4d13      	ldr	r5, [pc, #76]	; (1fb44 <bt_keys_find_irk+0x68>)
   1faf8:	89eb      	ldrh	r3, [r5, #14]
   1fafa:	462e      	mov	r6, r5
   1fafc:	f013 0f02 	tst.w	r3, #2
   1fb00:	d0f2      	beq.n	1fae8 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   1fb02:	7833      	ldrb	r3, [r6, #0]
   1fb04:	42bb      	cmp	r3, r7
   1fb06:	d10b      	bne.n	1fb20 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   1fb08:	2206      	movs	r2, #6
   1fb0a:	f106 013a 	add.w	r1, r6, #58	; 0x3a
   1fb0e:	1c60      	adds	r0, r4, #1
   1fb10:	f008 fd2f 	bl	28572 <memcmp>
   1fb14:	b908      	cbnz	r0, 1fb1a <bt_keys_find_irk+0x3e>
			return &key_pool[i];
   1fb16:	4628      	mov	r0, r5
   1fb18:	e7e7      	b.n	1faea <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1fb1a:	89f3      	ldrh	r3, [r6, #14]
   1fb1c:	079b      	lsls	r3, r3, #30
   1fb1e:	d5e3      	bpl.n	1fae8 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1fb20:	7833      	ldrb	r3, [r6, #0]
   1fb22:	42bb      	cmp	r3, r7
   1fb24:	d1e0      	bne.n	1fae8 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1fb26:	3401      	adds	r4, #1
   1fb28:	4621      	mov	r1, r4
   1fb2a:	4807      	ldr	r0, [pc, #28]	; (1fb48 <bt_keys_find_irk+0x6c>)
   1fb2c:	f008 fd82 	bl	28634 <bt_rpa_irk_matches>
   1fb30:	2800      	cmp	r0, #0
   1fb32:	d0d9      	beq.n	1fae8 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   1fb34:	2206      	movs	r2, #6
   1fb36:	4621      	mov	r1, r4
   1fb38:	4804      	ldr	r0, [pc, #16]	; (1fb4c <bt_keys_find_irk+0x70>)
   1fb3a:	f008 fd2a 	bl	28592 <memcpy>
			return &key_pool[i];
   1fb3e:	4801      	ldr	r0, [pc, #4]	; (1fb44 <bt_keys_find_irk+0x68>)
}
   1fb40:	e7d3      	b.n	1faea <bt_keys_find_irk+0xe>
   1fb42:	bf00      	nop
   1fb44:	200098cc 	.word	0x200098cc
   1fb48:	200098f6 	.word	0x200098f6
   1fb4c:	20009906 	.word	0x20009906

0001fb50 <bt_keys_find_addr>:
{
   1fb50:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1fb52:	4c06      	ldr	r4, [pc, #24]	; (1fb6c <bt_keys_find_addr+0x1c>)
   1fb54:	7823      	ldrb	r3, [r4, #0]
   1fb56:	4283      	cmp	r3, r0
   1fb58:	d104      	bne.n	1fb64 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   1fb5a:	2207      	movs	r2, #7
   1fb5c:	1c60      	adds	r0, r4, #1
   1fb5e:	f008 fd08 	bl	28572 <memcmp>
   1fb62:	b108      	cbz	r0, 1fb68 <bt_keys_find_addr+0x18>
	return NULL;
   1fb64:	2000      	movs	r0, #0
}
   1fb66:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1fb68:	4620      	mov	r0, r4
   1fb6a:	e7fc      	b.n	1fb66 <bt_keys_find_addr+0x16>
   1fb6c:	200098cc 	.word	0x200098cc

0001fb70 <bt_keys_clear>:
{
   1fb70:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1fb72:	7a03      	ldrb	r3, [r0, #8]
{
   1fb74:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1fb76:	075b      	lsls	r3, r3, #29
{
   1fb78:	b08c      	sub	sp, #48	; 0x30
	if (keys->state & BT_KEYS_ID_ADDED) {
   1fb7a:	d501      	bpl.n	1fb80 <bt_keys_clear+0x10>
		bt_id_del(keys);
   1fb7c:	f7f8 ff64 	bl	18a48 <bt_id_del>
		if (keys->id) {
   1fb80:	4625      	mov	r5, r4
   1fb82:	f815 2b01 	ldrb.w	r2, [r5], #1
   1fb86:	b1aa      	cbz	r2, 1fbb4 <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
   1fb88:	ae02      	add	r6, sp, #8
   1fb8a:	2104      	movs	r1, #4
   1fb8c:	4630      	mov	r0, r6
   1fb8e:	f006 fd29 	bl	265e4 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1fb92:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1fb94:	462b      	mov	r3, r5
   1fb96:	2124      	movs	r1, #36	; 0x24
   1fb98:	4a07      	ldr	r2, [pc, #28]	; (1fbb8 <bt_keys_clear+0x48>)
   1fb9a:	a803      	add	r0, sp, #12
   1fb9c:	f7f7 f9ae 	bl	16efc <bt_settings_encode_key>
		settings_delete(key);
   1fba0:	a803      	add	r0, sp, #12
   1fba2:	f007 fd06 	bl	275b2 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1fba6:	225c      	movs	r2, #92	; 0x5c
   1fba8:	2100      	movs	r1, #0
   1fbaa:	4620      	mov	r0, r4
   1fbac:	f008 fd1c 	bl	285e8 <memset>
}
   1fbb0:	b00c      	add	sp, #48	; 0x30
   1fbb2:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "keys",
   1fbb4:	9200      	str	r2, [sp, #0]
   1fbb6:	e7ed      	b.n	1fb94 <bt_keys_clear+0x24>
   1fbb8:	000306b3 	.word	0x000306b3

0001fbbc <keys_set>:
{
   1fbbc:	b570      	push	{r4, r5, r6, lr}
   1fbbe:	4614      	mov	r4, r2
	if (!name) {
   1fbc0:	4605      	mov	r5, r0
{
   1fbc2:	b098      	sub	sp, #96	; 0x60
	if (!name) {
   1fbc4:	b970      	cbnz	r0, 1fbe4 <keys_set+0x28>
   1fbc6:	4946      	ldr	r1, [pc, #280]	; (1fce0 <keys_set+0x124>)
   1fbc8:	4b46      	ldr	r3, [pc, #280]	; (1fce4 <keys_set+0x128>)
		BT_ERR("Insufficient number of arguments");
   1fbca:	4847      	ldr	r0, [pc, #284]	; (1fce8 <keys_set+0x12c>)
   1fbcc:	1ac9      	subs	r1, r1, r3
   1fbce:	08c9      	lsrs	r1, r1, #3
   1fbd0:	0189      	lsls	r1, r1, #6
   1fbd2:	f041 0101 	orr.w	r1, r1, #1
   1fbd6:	f007 f8ab 	bl	26d30 <log_0>
		return -EINVAL;
   1fbda:	f06f 0415 	mvn.w	r4, #21
}
   1fbde:	4620      	mov	r0, r4
   1fbe0:	b018      	add	sp, #96	; 0x60
   1fbe2:	bd70      	pop	{r4, r5, r6, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1fbe4:	2250      	movs	r2, #80	; 0x50
   1fbe6:	4618      	mov	r0, r3
   1fbe8:	a904      	add	r1, sp, #16
   1fbea:	47a0      	blx	r4
	if (len < 0) {
   1fbec:	1e04      	subs	r4, r0, #0
   1fbee:	da0b      	bge.n	1fc08 <keys_set+0x4c>
		BT_ERR("Failed to read value (err %zd)", len);
   1fbf0:	4621      	mov	r1, r4
   1fbf2:	4a3b      	ldr	r2, [pc, #236]	; (1fce0 <keys_set+0x124>)
   1fbf4:	4b3b      	ldr	r3, [pc, #236]	; (1fce4 <keys_set+0x128>)
   1fbf6:	483d      	ldr	r0, [pc, #244]	; (1fcec <keys_set+0x130>)
   1fbf8:	1ad2      	subs	r2, r2, r3
   1fbfa:	08d2      	lsrs	r2, r2, #3
   1fbfc:	0192      	lsls	r2, r2, #6
   1fbfe:	f042 0201 	orr.w	r2, r2, #1
   1fc02:	f007 f8a2 	bl	26d4a <log_1>
   1fc06:	e7e8      	b.n	1fbda <keys_set+0x1e>
	err = bt_settings_decode_key(name, &addr);
   1fc08:	4628      	mov	r0, r5
   1fc0a:	a902      	add	r1, sp, #8
   1fc0c:	f008 fd38 	bl	28680 <bt_settings_decode_key>
	if (err) {
   1fc10:	4606      	mov	r6, r0
   1fc12:	b148      	cbz	r0, 1fc28 <keys_set+0x6c>
   1fc14:	4a32      	ldr	r2, [pc, #200]	; (1fce0 <keys_set+0x124>)
   1fc16:	4b33      	ldr	r3, [pc, #204]	; (1fce4 <keys_set+0x128>)
		BT_ERR("Unable to decode address %s", name);
   1fc18:	4629      	mov	r1, r5
   1fc1a:	1ad2      	subs	r2, r2, r3
   1fc1c:	08d2      	lsrs	r2, r2, #3
   1fc1e:	0192      	lsls	r2, r2, #6
   1fc20:	4833      	ldr	r0, [pc, #204]	; (1fcf0 <keys_set+0x134>)
   1fc22:	f042 0201 	orr.w	r2, r2, #1
   1fc26:	e7ec      	b.n	1fc02 <keys_set+0x46>
	settings_name_next(name, &next);
   1fc28:	4628      	mov	r0, r5
   1fc2a:	a901      	add	r1, sp, #4
   1fc2c:	f007 fce8 	bl	27600 <settings_name_next>
	if (!next) {
   1fc30:	9801      	ldr	r0, [sp, #4]
   1fc32:	b120      	cbz	r0, 1fc3e <keys_set+0x82>
		id = strtol(next, NULL, 10);
   1fc34:	220a      	movs	r2, #10
   1fc36:	4631      	mov	r1, r6
   1fc38:	f008 fbdd 	bl	283f6 <strtol>
   1fc3c:	b2c0      	uxtb	r0, r0
	if (!len) {
   1fc3e:	b9e4      	cbnz	r4, 1fc7a <keys_set+0xbe>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1fc40:	4601      	mov	r1, r0
   1fc42:	aa02      	add	r2, sp, #8
   1fc44:	203f      	movs	r0, #63	; 0x3f
   1fc46:	f7ff ff33 	bl	1fab0 <bt_keys_find>
		if (keys) {
   1fc4a:	b120      	cbz	r0, 1fc56 <keys_set+0x9a>
			(void)memset(keys, 0, sizeof(*keys));
   1fc4c:	225c      	movs	r2, #92	; 0x5c
   1fc4e:	4621      	mov	r1, r4
   1fc50:	f008 fcca 	bl	285e8 <memset>
			BT_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
   1fc54:	e7c3      	b.n	1fbde <keys_set+0x22>
   1fc56:	4a23      	ldr	r2, [pc, #140]	; (1fce4 <keys_set+0x128>)
   1fc58:	4d21      	ldr	r5, [pc, #132]	; (1fce0 <keys_set+0x124>)
			BT_WARN("Unable to find deleted keys for %s",
   1fc5a:	a802      	add	r0, sp, #8
   1fc5c:	1aad      	subs	r5, r5, r2
   1fc5e:	f7f7 f88d 	bl	16d7c <bt_addr_le_str_real>
   1fc62:	f7f2 fe43 	bl	128ec <z_log_strdup>
   1fc66:	08ed      	lsrs	r5, r5, #3
   1fc68:	01ad      	lsls	r5, r5, #6
   1fc6a:	f045 0502 	orr.w	r5, r5, #2
   1fc6e:	4601      	mov	r1, r0
   1fc70:	462a      	mov	r2, r5
   1fc72:	4820      	ldr	r0, [pc, #128]	; (1fcf4 <keys_set+0x138>)
   1fc74:	f007 f869 	bl	26d4a <log_1>
   1fc78:	e7b1      	b.n	1fbde <keys_set+0x22>
	keys = bt_keys_get_addr(id, &addr);
   1fc7a:	a902      	add	r1, sp, #8
   1fc7c:	f7ff fed8 	bl	1fa30 <bt_keys_get_addr>
	if (!keys) {
   1fc80:	4605      	mov	r5, r0
   1fc82:	b998      	cbnz	r0, 1fcac <keys_set+0xf0>
   1fc84:	4a17      	ldr	r2, [pc, #92]	; (1fce4 <keys_set+0x128>)
   1fc86:	4c16      	ldr	r4, [pc, #88]	; (1fce0 <keys_set+0x124>)
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1fc88:	a802      	add	r0, sp, #8
   1fc8a:	1aa4      	subs	r4, r4, r2
   1fc8c:	f7f7 f876 	bl	16d7c <bt_addr_le_str_real>
   1fc90:	f7f2 fe2c 	bl	128ec <z_log_strdup>
   1fc94:	08e4      	lsrs	r4, r4, #3
   1fc96:	01a4      	lsls	r4, r4, #6
   1fc98:	f044 0401 	orr.w	r4, r4, #1
   1fc9c:	4601      	mov	r1, r0
   1fc9e:	4622      	mov	r2, r4
   1fca0:	4815      	ldr	r0, [pc, #84]	; (1fcf8 <keys_set+0x13c>)
   1fca2:	f007 f852 	bl	26d4a <log_1>
		return -ENOMEM;
   1fca6:	f06f 040b 	mvn.w	r4, #11
   1fcaa:	e798      	b.n	1fbde <keys_set+0x22>
	if (len != BT_KEYS_STORAGE_LEN) {
   1fcac:	2c50      	cmp	r4, #80	; 0x50
   1fcae:	d00f      	beq.n	1fcd0 <keys_set+0x114>
   1fcb0:	4a0c      	ldr	r2, [pc, #48]	; (1fce4 <keys_set+0x128>)
   1fcb2:	4b0b      	ldr	r3, [pc, #44]	; (1fce0 <keys_set+0x124>)
			BT_ERR("Invalid key length %zd != %zu", len,
   1fcb4:	4621      	mov	r1, r4
   1fcb6:	1a9b      	subs	r3, r3, r2
   1fcb8:	08db      	lsrs	r3, r3, #3
   1fcba:	019b      	lsls	r3, r3, #6
   1fcbc:	2250      	movs	r2, #80	; 0x50
   1fcbe:	480f      	ldr	r0, [pc, #60]	; (1fcfc <keys_set+0x140>)
   1fcc0:	f043 0301 	orr.w	r3, r3, #1
   1fcc4:	f007 f855 	bl	26d72 <log_2>
			bt_keys_clear(keys);
   1fcc8:	4628      	mov	r0, r5
   1fcca:	f7ff ff51 	bl	1fb70 <bt_keys_clear>
			return -EINVAL;
   1fcce:	e784      	b.n	1fbda <keys_set+0x1e>
		memcpy(keys->storage_start, val, len);
   1fcd0:	4622      	mov	r2, r4
   1fcd2:	a904      	add	r1, sp, #16
   1fcd4:	300c      	adds	r0, #12
   1fcd6:	f008 fc5c 	bl	28592 <memcpy>
	return 0;
   1fcda:	2400      	movs	r4, #0
   1fcdc:	e77f      	b.n	1fbde <keys_set+0x22>
   1fcde:	bf00      	nop
   1fce0:	0002c03c 	.word	0x0002c03c
   1fce4:	0002bfe4 	.word	0x0002bfe4
   1fce8:	0002ea59 	.word	0x0002ea59
   1fcec:	00030614 	.word	0x00030614
   1fcf0:	0002fe4d 	.word	0x0002fe4d
   1fcf4:	00030633 	.word	0x00030633
   1fcf8:	00030656 	.word	0x00030656
   1fcfc:	00030675 	.word	0x00030675

0001fd00 <bt_keys_store>:
{
   1fd00:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   1fd02:	4605      	mov	r5, r0
   1fd04:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1fd08:	4604      	mov	r4, r0
   1fd0a:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1fd0c:	b30a      	cbz	r2, 1fd52 <bt_keys_store+0x52>
		u8_to_dec(id, sizeof(id), keys->id);
   1fd0e:	ae02      	add	r6, sp, #8
   1fd10:	2104      	movs	r1, #4
   1fd12:	4630      	mov	r0, r6
   1fd14:	f006 fc66 	bl	265e4 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1fd18:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1fd1a:	462b      	mov	r3, r5
   1fd1c:	2124      	movs	r1, #36	; 0x24
   1fd1e:	4a0e      	ldr	r2, [pc, #56]	; (1fd58 <bt_keys_store+0x58>)
   1fd20:	a803      	add	r0, sp, #12
   1fd22:	f7f7 f8eb 	bl	16efc <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1fd26:	f104 010c 	add.w	r1, r4, #12
   1fd2a:	2250      	movs	r2, #80	; 0x50
   1fd2c:	a803      	add	r0, sp, #12
   1fd2e:	f7f4 f98d 	bl	1404c <settings_save_one>
	if (err) {
   1fd32:	4604      	mov	r4, r0
   1fd34:	b150      	cbz	r0, 1fd4c <bt_keys_store+0x4c>
   1fd36:	4a09      	ldr	r2, [pc, #36]	; (1fd5c <bt_keys_store+0x5c>)
   1fd38:	4b09      	ldr	r3, [pc, #36]	; (1fd60 <bt_keys_store+0x60>)
		BT_ERR("Failed to save keys (err %d)", err);
   1fd3a:	4601      	mov	r1, r0
   1fd3c:	1ad2      	subs	r2, r2, r3
   1fd3e:	08d2      	lsrs	r2, r2, #3
   1fd40:	0192      	lsls	r2, r2, #6
   1fd42:	4808      	ldr	r0, [pc, #32]	; (1fd64 <bt_keys_store+0x64>)
   1fd44:	f042 0201 	orr.w	r2, r2, #1
   1fd48:	f006 ffff 	bl	26d4a <log_1>
}
   1fd4c:	4620      	mov	r0, r4
   1fd4e:	b00c      	add	sp, #48	; 0x30
   1fd50:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1fd52:	9200      	str	r2, [sp, #0]
   1fd54:	e7e1      	b.n	1fd1a <bt_keys_store+0x1a>
   1fd56:	bf00      	nop
   1fd58:	000306b3 	.word	0x000306b3
   1fd5c:	0002c03c 	.word	0x0002c03c
   1fd60:	0002bfe4 	.word	0x0002bfe4
   1fd64:	00030693 	.word	0x00030693

0001fd68 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1fd68:	222c      	movs	r2, #44	; 0x2c
   1fd6a:	4b02      	ldr	r3, [pc, #8]	; (1fd74 <net_buf_pool_get+0xc>)
   1fd6c:	fb02 3000 	mla	r0, r2, r0, r3
   1fd70:	4770      	bx	lr
   1fd72:	bf00      	nop
   1fd74:	200085ec 	.word	0x200085ec

0001fd78 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   1fd78:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1fd7a:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
   1fd7c:	4a04      	ldr	r2, [pc, #16]	; (1fd90 <net_buf_id+0x18>)
   1fd7e:	fb01 2303 	mla	r3, r1, r3, r2
   1fd82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1fd84:	1ac0      	subs	r0, r0, r3
}
   1fd86:	4b03      	ldr	r3, [pc, #12]	; (1fd94 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1fd88:	10c0      	asrs	r0, r0, #3
}
   1fd8a:	4358      	muls	r0, r3
   1fd8c:	4770      	bx	lr
   1fd8e:	bf00      	nop
   1fd90:	200085ec 	.word	0x200085ec
   1fd94:	aaaaaaab 	.word	0xaaaaaaab

0001fd98 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1fd98:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fd9a:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1fd9c:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fd9e:	4a09      	ldr	r2, [pc, #36]	; (1fdc4 <fixed_data_alloc+0x2c>)
   1fda0:	fb04 2303 	mla	r3, r4, r3, r2
   1fda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   1fda6:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fda8:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1fdaa:	6823      	ldr	r3, [r4, #0]
   1fdac:	429a      	cmp	r2, r3
   1fdae:	bf94      	ite	ls
   1fdb0:	600a      	strls	r2, [r1, #0]
   1fdb2:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1fdb4:	f7ff ffe0 	bl	1fd78 <net_buf_id>
   1fdb8:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1fdbc:	fb02 3000 	mla	r0, r2, r0, r3
   1fdc0:	bd10      	pop	{r4, pc}
   1fdc2:	bf00      	nop
   1fdc4:	200085ec 	.word	0x200085ec

0001fdc8 <net_buf_reset>:
{
   1fdc8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1fdca:	7943      	ldrb	r3, [r0, #5]
{
   1fdcc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1fdce:	b14b      	cbz	r3, 1fde4 <net_buf_reset+0x1c>
   1fdd0:	490d      	ldr	r1, [pc, #52]	; (1fe08 <net_buf_reset+0x40>)
   1fdd2:	480e      	ldr	r0, [pc, #56]	; (1fe0c <net_buf_reset+0x44>)
   1fdd4:	234f      	movs	r3, #79	; 0x4f
   1fdd6:	4a0e      	ldr	r2, [pc, #56]	; (1fe10 <net_buf_reset+0x48>)
   1fdd8:	f006 fca0 	bl	2671c <printk>
   1fddc:	214f      	movs	r1, #79	; 0x4f
   1fdde:	480c      	ldr	r0, [pc, #48]	; (1fe10 <net_buf_reset+0x48>)
   1fde0:	f006 ff41 	bl	26c66 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1fde4:	6823      	ldr	r3, [r4, #0]
   1fde6:	b14b      	cbz	r3, 1fdfc <net_buf_reset+0x34>
   1fde8:	490a      	ldr	r1, [pc, #40]	; (1fe14 <net_buf_reset+0x4c>)
   1fdea:	4808      	ldr	r0, [pc, #32]	; (1fe0c <net_buf_reset+0x44>)
   1fdec:	2350      	movs	r3, #80	; 0x50
   1fdee:	4a08      	ldr	r2, [pc, #32]	; (1fe10 <net_buf_reset+0x48>)
   1fdf0:	f006 fc94 	bl	2671c <printk>
   1fdf4:	2150      	movs	r1, #80	; 0x50
   1fdf6:	4806      	ldr	r0, [pc, #24]	; (1fe10 <net_buf_reset+0x48>)
   1fdf8:	f006 ff35 	bl	26c66 <assert_post_action>
	buf->len  = 0U;
   1fdfc:	2300      	movs	r3, #0
   1fdfe:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1fe00:	6923      	ldr	r3, [r4, #16]
   1fe02:	60a3      	str	r3, [r4, #8]
}
   1fe04:	bd10      	pop	{r4, pc}
   1fe06:	bf00      	nop
   1fe08:	000306e4 	.word	0x000306e4
   1fe0c:	0002cfb2 	.word	0x0002cfb2
   1fe10:	000306c0 	.word	0x000306c0
   1fe14:	000306f5 	.word	0x000306f5

0001fe18 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1fe18:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1fe1c:	4605      	mov	r5, r0
   1fe1e:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1fe20:	4610      	mov	r0, r2
   1fe22:	4619      	mov	r1, r3
{
   1fe24:	4616      	mov	r6, r2
   1fe26:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1fe28:	f00b fe78 	bl	2bb1c <sys_clock_timeout_end_calc>
   1fe2c:	4680      	mov	r8, r0
   1fe2e:	4689      	mov	r9, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   1fe30:	b94d      	cbnz	r5, 1fe46 <net_buf_alloc_len+0x2e>
   1fe32:	494d      	ldr	r1, [pc, #308]	; (1ff68 <net_buf_alloc_len+0x150>)
   1fe34:	484d      	ldr	r0, [pc, #308]	; (1ff6c <net_buf_alloc_len+0x154>)
   1fe36:	23ed      	movs	r3, #237	; 0xed
   1fe38:	4a4d      	ldr	r2, [pc, #308]	; (1ff70 <net_buf_alloc_len+0x158>)
   1fe3a:	f006 fc6f 	bl	2671c <printk>
   1fe3e:	21ed      	movs	r1, #237	; 0xed
   1fe40:	484b      	ldr	r0, [pc, #300]	; (1ff70 <net_buf_alloc_len+0x158>)
   1fe42:	f006 ff10 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   1fe46:	f04f 0320 	mov.w	r3, #32
   1fe4a:	f3ef 8a11 	mrs	sl, BASEPRI
   1fe4e:	f383 8811 	msr	BASEPRI, r3
   1fe52:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1fe56:	8beb      	ldrh	r3, [r5, #30]
   1fe58:	2b00      	cmp	r3, #0
   1fe5a:	d055      	beq.n	1ff08 <net_buf_alloc_len+0xf0>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1fe5c:	8baa      	ldrh	r2, [r5, #28]
   1fe5e:	429a      	cmp	r2, r3
   1fe60:	d93e      	bls.n	1fee0 <net_buf_alloc_len+0xc8>
	return z_impl_k_queue_get(queue, timeout);
   1fe62:	2200      	movs	r2, #0
   1fe64:	2300      	movs	r3, #0
   1fe66:	4628      	mov	r0, r5
   1fe68:	f003 faaa 	bl	233c0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1fe6c:	4604      	mov	r4, r0
   1fe6e:	2800      	cmp	r0, #0
   1fe70:	d036      	beq.n	1fee0 <net_buf_alloc_len+0xc8>
	__asm__ volatile(
   1fe72:	f38a 8811 	msr	BASEPRI, sl
   1fe76:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1fe7a:	f8dd a004 	ldr.w	sl, [sp, #4]
   1fe7e:	f1ba 0f00 	cmp.w	sl, #0
   1fe82:	d06d      	beq.n	1ff60 <net_buf_alloc_len+0x148>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1fe84:	ea56 0307 	orrs.w	r3, r6, r7
   1fe88:	d010      	beq.n	1feac <net_buf_alloc_len+0x94>
   1fe8a:	1c7b      	adds	r3, r7, #1
   1fe8c:	bf08      	it	eq
   1fe8e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1fe92:	d00b      	beq.n	1feac <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1fe94:	f005 fe1c 	bl	25ad0 <sys_clock_tick_get>
   1fe98:	ebb8 0600 	subs.w	r6, r8, r0
   1fe9c:	eb69 0701 	sbc.w	r7, r9, r1
   1fea0:	2e00      	cmp	r6, #0
   1fea2:	f177 0300 	sbcs.w	r3, r7, #0
   1fea6:	bfbc      	itt	lt
   1fea8:	2600      	movlt	r6, #0
   1feaa:	2700      	movlt	r7, #0
	return pool->alloc->cb->alloc(buf, size, timeout);
   1feac:	f04f 092c 	mov.w	r9, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1feb0:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1feb2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1ff74 <net_buf_alloc_len+0x15c>
   1feb6:	4632      	mov	r2, r6
   1feb8:	fb09 8303 	mla	r3, r9, r3, r8
   1febc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1febe:	4620      	mov	r0, r4
   1fec0:	681b      	ldr	r3, [r3, #0]
   1fec2:	a901      	add	r1, sp, #4
   1fec4:	681d      	ldr	r5, [r3, #0]
   1fec6:	463b      	mov	r3, r7
   1fec8:	47a8      	blx	r5
   1feca:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1fecc:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1fece:	bb58      	cbnz	r0, 1ff28 <net_buf_alloc_len+0x110>
	k_lifo_put(&pool->free, buf);
   1fed0:	79a0      	ldrb	r0, [r4, #6]
   1fed2:	4621      	mov	r1, r4
   1fed4:	fb00 8009 	mla	r0, r0, r9, r8
   1fed8:	f00b fd7b 	bl	2b9d2 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1fedc:	462c      	mov	r4, r5
}
   1fede:	e01f      	b.n	1ff20 <net_buf_alloc_len+0x108>
		uninit_count = pool->uninit_count--;
   1fee0:	8be8      	ldrh	r0, [r5, #30]
   1fee2:	1e43      	subs	r3, r0, #1
   1fee4:	83eb      	strh	r3, [r5, #30]
   1fee6:	f38a 8811 	msr	BASEPRI, sl
   1feea:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1feee:	2318      	movs	r3, #24
   1fef0:	8bac      	ldrh	r4, [r5, #28]
   1fef2:	1a24      	subs	r4, r4, r0
   1fef4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1fef6:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1fefa:	481e      	ldr	r0, [pc, #120]	; (1ff74 <net_buf_alloc_len+0x15c>)
   1fefc:	4b1e      	ldr	r3, [pc, #120]	; (1ff78 <net_buf_alloc_len+0x160>)
   1fefe:	1a2d      	subs	r5, r5, r0
   1ff00:	10ad      	asrs	r5, r5, #2
   1ff02:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1ff04:	71a5      	strb	r5, [r4, #6]
		goto success;
   1ff06:	e7b8      	b.n	1fe7a <net_buf_alloc_len+0x62>
   1ff08:	f38a 8811 	msr	BASEPRI, sl
   1ff0c:	f3bf 8f6f 	isb	sy
   1ff10:	4632      	mov	r2, r6
   1ff12:	463b      	mov	r3, r7
   1ff14:	4628      	mov	r0, r5
   1ff16:	f003 fa53 	bl	233c0 <z_impl_k_queue_get>
	if (!buf) {
   1ff1a:	4604      	mov	r4, r0
   1ff1c:	2800      	cmp	r0, #0
   1ff1e:	d1ac      	bne.n	1fe7a <net_buf_alloc_len+0x62>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1ff20:	4620      	mov	r0, r4
   1ff22:	b002      	add	sp, #8
   1ff24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		NET_BUF_ASSERT(req_size <= size);
   1ff28:	9b01      	ldr	r3, [sp, #4]
   1ff2a:	459a      	cmp	sl, r3
   1ff2c:	d90e      	bls.n	1ff4c <net_buf_alloc_len+0x134>
   1ff2e:	4913      	ldr	r1, [pc, #76]	; (1ff7c <net_buf_alloc_len+0x164>)
   1ff30:	f240 134d 	movw	r3, #333	; 0x14d
   1ff34:	4a0e      	ldr	r2, [pc, #56]	; (1ff70 <net_buf_alloc_len+0x158>)
   1ff36:	480d      	ldr	r0, [pc, #52]	; (1ff6c <net_buf_alloc_len+0x154>)
   1ff38:	f006 fbf0 	bl	2671c <printk>
   1ff3c:	4810      	ldr	r0, [pc, #64]	; (1ff80 <net_buf_alloc_len+0x168>)
   1ff3e:	f006 fbed 	bl	2671c <printk>
   1ff42:	f240 114d 	movw	r1, #333	; 0x14d
   1ff46:	480a      	ldr	r0, [pc, #40]	; (1ff70 <net_buf_alloc_len+0x158>)
   1ff48:	f006 fe8d 	bl	26c66 <assert_post_action>
	buf->frags = NULL;
   1ff4c:	2300      	movs	r3, #0
   1ff4e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1ff50:	2301      	movs	r3, #1
   1ff52:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1ff54:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
   1ff56:	4620      	mov	r0, r4
	buf->size  = size;
   1ff58:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1ff5a:	f7ff ff35 	bl	1fdc8 <net_buf_reset>
	return buf;
   1ff5e:	e7df      	b.n	1ff20 <net_buf_alloc_len+0x108>
		buf->__buf = NULL;
   1ff60:	f8c4 a010 	str.w	sl, [r4, #16]
   1ff64:	e7f2      	b.n	1ff4c <net_buf_alloc_len+0x134>
   1ff66:	bf00      	nop
   1ff68:	0003070f 	.word	0x0003070f
   1ff6c:	0002cfb2 	.word	0x0002cfb2
   1ff70:	000306c0 	.word	0x000306c0
   1ff74:	200085ec 	.word	0x200085ec
   1ff78:	ba2e8ba3 	.word	0xba2e8ba3
   1ff7c:	00030714 	.word	0x00030714
   1ff80:	00030725 	.word	0x00030725

0001ff84 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1ff84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ff88:	4606      	mov	r6, r0
   1ff8a:	f003 fa19 	bl	233c0 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1ff8e:	4605      	mov	r5, r0
   1ff90:	b150      	cbz	r0, 1ffa8 <net_buf_get+0x24>
   1ff92:	4604      	mov	r4, r0
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   1ff94:	4f12      	ldr	r7, [pc, #72]	; (1ffe0 <net_buf_get+0x5c>)
   1ff96:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1ffe4 <net_buf_get+0x60>
   1ff9a:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1ffe8 <net_buf_get+0x64>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1ff9e:	7963      	ldrb	r3, [r4, #5]
   1ffa0:	f013 0301 	ands.w	r3, r3, #1
   1ffa4:	d103      	bne.n	1ffae <net_buf_get+0x2a>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1ffa6:	6023      	str	r3, [r4, #0]

	return buf;
}
   1ffa8:	4628      	mov	r0, r5
   1ffaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ffae:	2200      	movs	r2, #0
   1ffb0:	2300      	movs	r3, #0
   1ffb2:	4630      	mov	r0, r6
   1ffb4:	f003 fa04 	bl	233c0 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1ffb8:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1ffba:	b958      	cbnz	r0, 1ffd4 <net_buf_get+0x50>
   1ffbc:	4641      	mov	r1, r8
   1ffbe:	4648      	mov	r0, r9
   1ffc0:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
   1ffc4:	463a      	mov	r2, r7
   1ffc6:	f006 fba9 	bl	2671c <printk>
   1ffca:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   1ffce:	4638      	mov	r0, r7
   1ffd0:	f006 fe49 	bl	26c66 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1ffd4:	7963      	ldrb	r3, [r4, #5]
   1ffd6:	f023 0301 	bic.w	r3, r3, #1
   1ffda:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1ffdc:	6824      	ldr	r4, [r4, #0]
   1ffde:	e7de      	b.n	1ff9e <net_buf_get+0x1a>
   1ffe0:	000306c0 	.word	0x000306c0
   1ffe4:	00030728 	.word	0x00030728
   1ffe8:	0002cfb2 	.word	0x0002cfb2

0001ffec <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1ffec:	b538      	push	{r3, r4, r5, lr}
   1ffee:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   1fff0:	4604      	mov	r4, r0
   1fff2:	b958      	cbnz	r0, 2000c <net_buf_simple_reserve+0x20>
   1fff4:	490e      	ldr	r1, [pc, #56]	; (20030 <net_buf_simple_reserve+0x44>)
   1fff6:	480f      	ldr	r0, [pc, #60]	; (20034 <net_buf_simple_reserve+0x48>)
   1fff8:	f240 13bb 	movw	r3, #443	; 0x1bb
   1fffc:	4a0e      	ldr	r2, [pc, #56]	; (20038 <net_buf_simple_reserve+0x4c>)
   1fffe:	f006 fb8d 	bl	2671c <printk>
   20002:	f240 11bb 	movw	r1, #443	; 0x1bb
   20006:	480c      	ldr	r0, [pc, #48]	; (20038 <net_buf_simple_reserve+0x4c>)
   20008:	f006 fe2d 	bl	26c66 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   2000c:	88a3      	ldrh	r3, [r4, #4]
   2000e:	b15b      	cbz	r3, 20028 <net_buf_simple_reserve+0x3c>
   20010:	490a      	ldr	r1, [pc, #40]	; (2003c <net_buf_simple_reserve+0x50>)
   20012:	4808      	ldr	r0, [pc, #32]	; (20034 <net_buf_simple_reserve+0x48>)
   20014:	f44f 73de 	mov.w	r3, #444	; 0x1bc
   20018:	4a07      	ldr	r2, [pc, #28]	; (20038 <net_buf_simple_reserve+0x4c>)
   2001a:	f006 fb7f 	bl	2671c <printk>
   2001e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   20022:	4805      	ldr	r0, [pc, #20]	; (20038 <net_buf_simple_reserve+0x4c>)
   20024:	f006 fe1f 	bl	26c66 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   20028:	68a3      	ldr	r3, [r4, #8]
   2002a:	442b      	add	r3, r5
   2002c:	6023      	str	r3, [r4, #0]
}
   2002e:	bd38      	pop	{r3, r4, r5, pc}
   20030:	0002ec08 	.word	0x0002ec08
   20034:	0002cfb2 	.word	0x0002cfb2
   20038:	000306c0 	.word	0x000306c0
   2003c:	00030734 	.word	0x00030734

00020040 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   20040:	b538      	push	{r3, r4, r5, lr}
   20042:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   20044:	4605      	mov	r5, r0
   20046:	b958      	cbnz	r0, 20060 <net_buf_put+0x20>
   20048:	4913      	ldr	r1, [pc, #76]	; (20098 <net_buf_put+0x58>)
   2004a:	4814      	ldr	r0, [pc, #80]	; (2009c <net_buf_put+0x5c>)
   2004c:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
   20050:	4a13      	ldr	r2, [pc, #76]	; (200a0 <net_buf_put+0x60>)
   20052:	f006 fb63 	bl	2671c <printk>
   20056:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   2005a:	4811      	ldr	r0, [pc, #68]	; (200a0 <net_buf_put+0x60>)
   2005c:	f006 fe03 	bl	26c66 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   20060:	b95c      	cbnz	r4, 2007a <net_buf_put+0x3a>
   20062:	4910      	ldr	r1, [pc, #64]	; (200a4 <net_buf_put+0x64>)
   20064:	480d      	ldr	r0, [pc, #52]	; (2009c <net_buf_put+0x5c>)
   20066:	f240 13f9 	movw	r3, #505	; 0x1f9
   2006a:	4a0d      	ldr	r2, [pc, #52]	; (200a0 <net_buf_put+0x60>)
   2006c:	f006 fb56 	bl	2671c <printk>
   20070:	f240 11f9 	movw	r1, #505	; 0x1f9
   20074:	480a      	ldr	r0, [pc, #40]	; (200a0 <net_buf_put+0x60>)
   20076:	f006 fdf6 	bl	26c66 <assert_post_action>
{
   2007a:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   2007c:	6811      	ldr	r1, [r2, #0]
   2007e:	b929      	cbnz	r1, 2008c <net_buf_put+0x4c>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   20080:	4621      	mov	r1, r4
   20082:	4628      	mov	r0, r5
}
   20084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   20088:	f003 b93c 	b.w	23304 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   2008c:	7953      	ldrb	r3, [r2, #5]
   2008e:	f043 0301 	orr.w	r3, r3, #1
   20092:	7153      	strb	r3, [r2, #5]
   20094:	460a      	mov	r2, r1
   20096:	e7f1      	b.n	2007c <net_buf_put+0x3c>
   20098:	00030743 	.word	0x00030743
   2009c:	0002cfb2 	.word	0x0002cfb2
   200a0:	000306c0 	.word	0x000306c0
   200a4:	0002ec08 	.word	0x0002ec08

000200a8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   200a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   200ac:	4605      	mov	r5, r0
   200ae:	b328      	cbz	r0, 200fc <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   200b0:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   200b2:	f04f 082c 	mov.w	r8, #44	; 0x2c
   200b6:	4e1b      	ldr	r6, [pc, #108]	; (20124 <net_buf_unref+0x7c>)
		struct net_buf *frags = buf->frags;
   200b8:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   200ba:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   200bc:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   200be:	3b01      	subs	r3, #1
   200c0:	b2db      	uxtb	r3, r3
   200c2:	7123      	strb	r3, [r4, #4]
   200c4:	b9c3      	cbnz	r3, 200f8 <net_buf_unref+0x50>
		if (buf->__buf) {
   200c6:	6921      	ldr	r1, [r4, #16]
   200c8:	b159      	cbz	r1, 200e2 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   200ca:	7963      	ldrb	r3, [r4, #5]
   200cc:	079b      	lsls	r3, r3, #30
   200ce:	d407      	bmi.n	200e0 <net_buf_unref+0x38>
	pool->alloc->cb->unref(buf, data);
   200d0:	79a3      	ldrb	r3, [r4, #6]
   200d2:	4620      	mov	r0, r4
   200d4:	fb08 6303 	mla	r3, r8, r3, r6
   200d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   200da:	681b      	ldr	r3, [r3, #0]
   200dc:	689b      	ldr	r3, [r3, #8]
   200de:	4798      	blx	r3
			buf->__buf = NULL;
   200e0:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   200e2:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   200e4:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   200e6:	fb08 6300 	mla	r3, r8, r0, r6
   200ea:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
   200ec:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   200ee:	b19b      	cbz	r3, 20118 <net_buf_unref+0x70>
			pool->destroy(buf);
   200f0:	4620      	mov	r0, r4
   200f2:	4798      	blx	r3
	while (buf) {
   200f4:	2d00      	cmp	r5, #0
   200f6:	d1df      	bne.n	200b8 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   200f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   200fc:	490a      	ldr	r1, [pc, #40]	; (20128 <net_buf_unref+0x80>)
   200fe:	480b      	ldr	r0, [pc, #44]	; (2012c <net_buf_unref+0x84>)
   20100:	f44f 7302 	mov.w	r3, #520	; 0x208
   20104:	4a0a      	ldr	r2, [pc, #40]	; (20130 <net_buf_unref+0x88>)
   20106:	f006 fb09 	bl	2671c <printk>
}
   2010a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   2010e:	f44f 7102 	mov.w	r1, #520	; 0x208
   20112:	4807      	ldr	r0, [pc, #28]	; (20130 <net_buf_unref+0x88>)
   20114:	f006 bda7 	b.w	26c66 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   20118:	4621      	mov	r1, r4
   2011a:	fb00 6008 	mla	r0, r0, r8, r6
   2011e:	f00b fc58 	bl	2b9d2 <k_queue_prepend>
}
   20122:	e7e7      	b.n	200f4 <net_buf_unref+0x4c>
   20124:	200085ec 	.word	0x200085ec
   20128:	0002ec08 	.word	0x0002ec08
   2012c:	0002cfb2 	.word	0x0002cfb2
   20130:	000306c0 	.word	0x000306c0

00020134 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   20134:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   20136:	4604      	mov	r4, r0
   20138:	b958      	cbnz	r0, 20152 <net_buf_ref+0x1e>
   2013a:	4908      	ldr	r1, [pc, #32]	; (2015c <net_buf_ref+0x28>)
   2013c:	4808      	ldr	r0, [pc, #32]	; (20160 <net_buf_ref+0x2c>)
   2013e:	f240 2337 	movw	r3, #567	; 0x237
   20142:	4a08      	ldr	r2, [pc, #32]	; (20164 <net_buf_ref+0x30>)
   20144:	f006 faea 	bl	2671c <printk>
   20148:	f240 2137 	movw	r1, #567	; 0x237
   2014c:	4805      	ldr	r0, [pc, #20]	; (20164 <net_buf_ref+0x30>)
   2014e:	f006 fd8a 	bl	26c66 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   20152:	7923      	ldrb	r3, [r4, #4]
	return buf;
}
   20154:	4620      	mov	r0, r4
	buf->ref++;
   20156:	3301      	adds	r3, #1
   20158:	7123      	strb	r3, [r4, #4]
}
   2015a:	bd10      	pop	{r4, pc}
   2015c:	0002ec08 	.word	0x0002ec08
   20160:	0002cfb2 	.word	0x0002cfb2
   20164:	000306c0 	.word	0x000306c0

00020168 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   20168:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   2016a:	4604      	mov	r4, r0
   2016c:	b958      	cbnz	r0, 20186 <net_buf_frag_last+0x1e>
   2016e:	4908      	ldr	r1, [pc, #32]	; (20190 <net_buf_frag_last+0x28>)
   20170:	4808      	ldr	r0, [pc, #32]	; (20194 <net_buf_frag_last+0x2c>)
   20172:	f44f 731d 	mov.w	r3, #628	; 0x274
   20176:	4a08      	ldr	r2, [pc, #32]	; (20198 <net_buf_frag_last+0x30>)
   20178:	f006 fad0 	bl	2671c <printk>
   2017c:	f44f 711d 	mov.w	r1, #628	; 0x274
   20180:	4805      	ldr	r0, [pc, #20]	; (20198 <net_buf_frag_last+0x30>)
   20182:	f006 fd70 	bl	26c66 <assert_post_action>

	while (buf->frags) {
   20186:	4620      	mov	r0, r4
   20188:	6824      	ldr	r4, [r4, #0]
   2018a:	2c00      	cmp	r4, #0
   2018c:	d1fb      	bne.n	20186 <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   2018e:	bd10      	pop	{r4, pc}
   20190:	0002ec08 	.word	0x0002ec08
   20194:	0002cfb2 	.word	0x0002cfb2
   20198:	000306c0 	.word	0x000306c0

0002019c <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   2019c:	b538      	push	{r3, r4, r5, lr}
   2019e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   201a0:	4604      	mov	r4, r0
   201a2:	b958      	cbnz	r0, 201bc <net_buf_frag_insert+0x20>
   201a4:	4910      	ldr	r1, [pc, #64]	; (201e8 <net_buf_frag_insert+0x4c>)
   201a6:	4811      	ldr	r0, [pc, #68]	; (201ec <net_buf_frag_insert+0x50>)
   201a8:	f240 237f 	movw	r3, #639	; 0x27f
   201ac:	4a10      	ldr	r2, [pc, #64]	; (201f0 <net_buf_frag_insert+0x54>)
   201ae:	f006 fab5 	bl	2671c <printk>
   201b2:	f240 217f 	movw	r1, #639	; 0x27f
   201b6:	480e      	ldr	r0, [pc, #56]	; (201f0 <net_buf_frag_insert+0x54>)
   201b8:	f006 fd55 	bl	26c66 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   201bc:	b95d      	cbnz	r5, 201d6 <net_buf_frag_insert+0x3a>
   201be:	490d      	ldr	r1, [pc, #52]	; (201f4 <net_buf_frag_insert+0x58>)
   201c0:	480a      	ldr	r0, [pc, #40]	; (201ec <net_buf_frag_insert+0x50>)
   201c2:	f44f 7320 	mov.w	r3, #640	; 0x280
   201c6:	4a0a      	ldr	r2, [pc, #40]	; (201f0 <net_buf_frag_insert+0x54>)
   201c8:	f006 faa8 	bl	2671c <printk>
   201cc:	f44f 7120 	mov.w	r1, #640	; 0x280
   201d0:	4807      	ldr	r0, [pc, #28]	; (201f0 <net_buf_frag_insert+0x54>)
   201d2:	f006 fd48 	bl	26c66 <assert_post_action>

	if (parent->frags) {
   201d6:	6823      	ldr	r3, [r4, #0]
   201d8:	b123      	cbz	r3, 201e4 <net_buf_frag_insert+0x48>
		net_buf_frag_last(frag)->frags = parent->frags;
   201da:	4628      	mov	r0, r5
   201dc:	f7ff ffc4 	bl	20168 <net_buf_frag_last>
   201e0:	6823      	ldr	r3, [r4, #0]
   201e2:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   201e4:	6025      	str	r5, [r4, #0]
}
   201e6:	bd38      	pop	{r3, r4, r5, pc}
   201e8:	00030748 	.word	0x00030748
   201ec:	0002cfb2 	.word	0x0002cfb2
   201f0:	000306c0 	.word	0x000306c0
   201f4:	0003074f 	.word	0x0003074f

000201f8 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   201f8:	b538      	push	{r3, r4, r5, lr}
   201fa:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   201fc:	460d      	mov	r5, r1
   201fe:	b959      	cbnz	r1, 20218 <net_buf_frag_add+0x20>
   20200:	490c      	ldr	r1, [pc, #48]	; (20234 <net_buf_frag_add+0x3c>)
   20202:	480d      	ldr	r0, [pc, #52]	; (20238 <net_buf_frag_add+0x40>)
   20204:	f240 238b 	movw	r3, #651	; 0x28b
   20208:	4a0c      	ldr	r2, [pc, #48]	; (2023c <net_buf_frag_add+0x44>)
   2020a:	f006 fa87 	bl	2671c <printk>
   2020e:	f240 218b 	movw	r1, #651	; 0x28b
   20212:	480a      	ldr	r0, [pc, #40]	; (2023c <net_buf_frag_add+0x44>)
   20214:	f006 fd27 	bl	26c66 <assert_post_action>

	if (!head) {
   20218:	b924      	cbnz	r4, 20224 <net_buf_frag_add+0x2c>
		return net_buf_ref(frag);
   2021a:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2021c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   20220:	f7ff bf88 	b.w	20134 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   20224:	4620      	mov	r0, r4
   20226:	f7ff ff9f 	bl	20168 <net_buf_frag_last>
   2022a:	4629      	mov	r1, r5
   2022c:	f7ff ffb6 	bl	2019c <net_buf_frag_insert>
}
   20230:	4620      	mov	r0, r4
   20232:	bd38      	pop	{r3, r4, r5, pc}
   20234:	0003074f 	.word	0x0003074f
   20238:	0002cfb2 	.word	0x0002cfb2
   2023c:	000306c0 	.word	0x000306c0

00020240 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   20240:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   20242:	6882      	ldr	r2, [r0, #8]
   20244:	6803      	ldr	r3, [r0, #0]
{
   20246:	4604      	mov	r4, r0
	return buf->data - buf->__buf;
   20248:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   2024a:	4299      	cmp	r1, r3
{
   2024c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   2024e:	d90b      	bls.n	20268 <net_buf_simple_push+0x28>
   20250:	4909      	ldr	r1, [pc, #36]	; (20278 <net_buf_simple_push+0x38>)
   20252:	480a      	ldr	r0, [pc, #40]	; (2027c <net_buf_simple_push+0x3c>)
   20254:	f240 430f 	movw	r3, #1039	; 0x40f
   20258:	4a09      	ldr	r2, [pc, #36]	; (20280 <net_buf_simple_push+0x40>)
   2025a:	f006 fa5f 	bl	2671c <printk>
   2025e:	f240 410f 	movw	r1, #1039	; 0x40f
   20262:	4807      	ldr	r0, [pc, #28]	; (20280 <net_buf_simple_push+0x40>)
   20264:	f006 fcff 	bl	26c66 <assert_post_action>
	buf->data -= len;
   20268:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   2026a:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   2026c:	1b40      	subs	r0, r0, r5
	buf->len += len;
   2026e:	440d      	add	r5, r1
	buf->data -= len;
   20270:	6020      	str	r0, [r4, #0]
	buf->len += len;
   20272:	80a5      	strh	r5, [r4, #4]
}
   20274:	bd38      	pop	{r3, r4, r5, pc}
   20276:	bf00      	nop
   20278:	00030764 	.word	0x00030764
   2027c:	0002cfb2 	.word	0x0002cfb2
   20280:	000306c0 	.word	0x000306c0

00020284 <net_buf_simple_pull>:
{
   20284:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   20286:	8883      	ldrh	r3, [r0, #4]
{
   20288:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->len >= len);
   2028a:	428b      	cmp	r3, r1
{
   2028c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   2028e:	d20b      	bcs.n	202a8 <net_buf_simple_pull+0x24>
   20290:	4909      	ldr	r1, [pc, #36]	; (202b8 <net_buf_simple_pull+0x34>)
   20292:	480a      	ldr	r0, [pc, #40]	; (202bc <net_buf_simple_pull+0x38>)
   20294:	f240 436f 	movw	r3, #1135	; 0x46f
   20298:	4a09      	ldr	r2, [pc, #36]	; (202c0 <net_buf_simple_pull+0x3c>)
   2029a:	f006 fa3f 	bl	2671c <printk>
   2029e:	f240 416f 	movw	r1, #1135	; 0x46f
   202a2:	4807      	ldr	r0, [pc, #28]	; (202c0 <net_buf_simple_pull+0x3c>)
   202a4:	f006 fcdf 	bl	26c66 <assert_post_action>
	buf->len -= len;
   202a8:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   202aa:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   202ac:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   202ae:	4428      	add	r0, r5
	buf->len -= len;
   202b0:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   202b2:	6020      	str	r0, [r4, #0]
}
   202b4:	bd38      	pop	{r3, r4, r5, pc}
   202b6:	bf00      	nop
   202b8:	00030754 	.word	0x00030754
   202bc:	0002cfb2 	.word	0x0002cfb2
   202c0:	000306c0 	.word	0x000306c0

000202c4 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   202c4:	8883      	ldrh	r3, [r0, #4]
{
   202c6:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   202c8:	428b      	cmp	r3, r1
{
   202ca:	4604      	mov	r4, r0
   202cc:	460d      	mov	r5, r1
	void *data = buf->data;
   202ce:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   202d0:	d20b      	bcs.n	202ea <net_buf_simple_pull_mem+0x26>
   202d2:	490a      	ldr	r1, [pc, #40]	; (202fc <net_buf_simple_pull_mem+0x38>)
   202d4:	480a      	ldr	r0, [pc, #40]	; (20300 <net_buf_simple_pull_mem+0x3c>)
   202d6:	f240 437b 	movw	r3, #1147	; 0x47b
   202da:	4a0a      	ldr	r2, [pc, #40]	; (20304 <net_buf_simple_pull_mem+0x40>)
   202dc:	f006 fa1e 	bl	2671c <printk>
   202e0:	f240 417b 	movw	r1, #1147	; 0x47b
   202e4:	4807      	ldr	r0, [pc, #28]	; (20304 <net_buf_simple_pull_mem+0x40>)
   202e6:	f006 fcbe 	bl	26c66 <assert_post_action>
	buf->len -= len;
   202ea:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   202ec:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   202ee:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   202f0:	4429      	add	r1, r5
}
   202f2:	4630      	mov	r0, r6
	buf->len -= len;
   202f4:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   202f6:	6021      	str	r1, [r4, #0]
}
   202f8:	bd70      	pop	{r4, r5, r6, pc}
   202fa:	bf00      	nop
   202fc:	00030754 	.word	0x00030754
   20300:	0002cfb2 	.word	0x0002cfb2
   20304:	000306c0 	.word	0x000306c0

00020308 <net_buf_simple_add>:
{
   20308:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   2030a:	6803      	ldr	r3, [r0, #0]
   2030c:	8886      	ldrh	r6, [r0, #4]
   2030e:	4604      	mov	r4, r0
   20310:	460d      	mov	r5, r1
   20312:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   20314:	f00a f9a3 	bl	2a65e <net_buf_simple_tailroom>
   20318:	4288      	cmp	r0, r1
   2031a:	d20b      	bcs.n	20334 <net_buf_simple_add+0x2c>
   2031c:	4908      	ldr	r1, [pc, #32]	; (20340 <net_buf_simple_add+0x38>)
   2031e:	4809      	ldr	r0, [pc, #36]	; (20344 <net_buf_simple_add+0x3c>)
   20320:	f44f 7348 	mov.w	r3, #800	; 0x320
   20324:	4a08      	ldr	r2, [pc, #32]	; (20348 <net_buf_simple_add+0x40>)
   20326:	f006 f9f9 	bl	2671c <printk>
   2032a:	f44f 7148 	mov.w	r1, #800	; 0x320
   2032e:	4806      	ldr	r0, [pc, #24]	; (20348 <net_buf_simple_add+0x40>)
   20330:	f006 fc99 	bl	26c66 <assert_post_action>
	buf->len += len;
   20334:	88a1      	ldrh	r1, [r4, #4]
}
   20336:	4630      	mov	r0, r6
	buf->len += len;
   20338:	440d      	add	r5, r1
   2033a:	80a5      	strh	r5, [r4, #4]
}
   2033c:	bd70      	pop	{r4, r5, r6, pc}
   2033e:	bf00      	nop
   20340:	00030788 	.word	0x00030788
   20344:	0002cfb2 	.word	0x0002cfb2
   20348:	000306c0 	.word	0x000306c0

0002034c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   2034c:	b570      	push	{r4, r5, r6, lr}
   2034e:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   20350:	460c      	mov	r4, r1
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   20352:	6905      	ldr	r5, [r0, #16]
   20354:	b961      	cbnz	r1, 20370 <gpio_nrfx_manage_callback+0x24>
   20356:	4922      	ldr	r1, [pc, #136]	; (203e0 <gpio_nrfx_manage_callback+0x94>)
   20358:	2324      	movs	r3, #36	; 0x24
   2035a:	4a22      	ldr	r2, [pc, #136]	; (203e4 <gpio_nrfx_manage_callback+0x98>)
   2035c:	4822      	ldr	r0, [pc, #136]	; (203e8 <gpio_nrfx_manage_callback+0x9c>)
   2035e:	f006 f9dd 	bl	2671c <printk>
   20362:	4822      	ldr	r0, [pc, #136]	; (203ec <gpio_nrfx_manage_callback+0xa0>)
   20364:	f006 f9da 	bl	2671c <printk>
   20368:	2124      	movs	r1, #36	; 0x24
   2036a:	481e      	ldr	r0, [pc, #120]	; (203e4 <gpio_nrfx_manage_callback+0x98>)
   2036c:	f006 fc7b 	bl	26c66 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   20370:	6863      	ldr	r3, [r4, #4]
   20372:	b963      	cbnz	r3, 2038e <gpio_nrfx_manage_callback+0x42>
   20374:	491e      	ldr	r1, [pc, #120]	; (203f0 <gpio_nrfx_manage_callback+0xa4>)
   20376:	2325      	movs	r3, #37	; 0x25
   20378:	4a1a      	ldr	r2, [pc, #104]	; (203e4 <gpio_nrfx_manage_callback+0x98>)
   2037a:	481b      	ldr	r0, [pc, #108]	; (203e8 <gpio_nrfx_manage_callback+0x9c>)
   2037c:	f006 f9ce 	bl	2671c <printk>
   20380:	481c      	ldr	r0, [pc, #112]	; (203f4 <gpio_nrfx_manage_callback+0xa8>)
   20382:	f006 f9cb 	bl	2671c <printk>
   20386:	2125      	movs	r1, #37	; 0x25
   20388:	4816      	ldr	r0, [pc, #88]	; (203e4 <gpio_nrfx_manage_callback+0x98>)
   2038a:	f006 fc6c 	bl	26c66 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   2038e:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   20390:	b15b      	cbz	r3, 203aa <gpio_nrfx_manage_callback+0x5e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20392:	2200      	movs	r2, #0
   20394:	429c      	cmp	r4, r3
   20396:	d113      	bne.n	203c0 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   20398:	6823      	ldr	r3, [r4, #0]
   2039a:	b95a      	cbnz	r2, 203b4 <gpio_nrfx_manage_callback+0x68>
   2039c:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   2039e:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   203a0:	4294      	cmp	r4, r2
   203a2:	d100      	bne.n	203a6 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   203a4:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   203a6:	2300      	movs	r3, #0
   203a8:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   203aa:	b976      	cbnz	r6, 203ca <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   203ac:	2000      	movs	r0, #0
				     callback, set);
}
   203ae:	bd70      	pop	{r4, r5, r6, pc}
   203b0:	460b      	mov	r3, r1
   203b2:	e7ef      	b.n	20394 <gpio_nrfx_manage_callback+0x48>
   203b4:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   203b6:	68ab      	ldr	r3, [r5, #8]
   203b8:	429c      	cmp	r4, r3
	list->tail = node;
   203ba:	bf08      	it	eq
   203bc:	60aa      	streq	r2, [r5, #8]
}
   203be:	e7f2      	b.n	203a6 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   203c0:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   203c2:	461a      	mov	r2, r3
   203c4:	2900      	cmp	r1, #0
   203c6:	d1f3      	bne.n	203b0 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   203c8:	b13e      	cbz	r6, 203da <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   203ca:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   203cc:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   203ce:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   203d0:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   203d2:	2800      	cmp	r0, #0
   203d4:	d1ea      	bne.n	203ac <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   203d6:	60ac      	str	r4, [r5, #8]
}
   203d8:	e7e9      	b.n	203ae <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   203da:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   203de:	e7e6      	b.n	203ae <gpio_nrfx_manage_callback+0x62>
   203e0:	000307e1 	.word	0x000307e1
   203e4:	000307b4 	.word	0x000307b4
   203e8:	0002cfb2 	.word	0x0002cfb2
   203ec:	000307ea 	.word	0x000307ea
   203f0:	000307f9 	.word	0x000307f9
   203f4:	0003080b 	.word	0x0003080b

000203f8 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   203f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   203fc:	6804      	ldr	r4, [r0, #0]
{
   203fe:	460f      	mov	r7, r1
   20400:	4616      	mov	r6, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   20402:	b34c      	cbz	r4, 20458 <gpio_fire_callbacks+0x60>
	return node->next;
   20404:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   20406:	f8df 8058 	ldr.w	r8, [pc, #88]	; 20460 <gpio_fire_callbacks+0x68>
   2040a:	2d00      	cmp	r5, #0
   2040c:	bf38      	it	cc
   2040e:	2500      	movcc	r5, #0
   20410:	f8df 9050 	ldr.w	r9, [pc, #80]	; 20464 <gpio_fire_callbacks+0x6c>
   20414:	f8df a050 	ldr.w	sl, [pc, #80]	; 20468 <gpio_fire_callbacks+0x70>
		if (cb->pin_mask & pins) {
   20418:	68a3      	ldr	r3, [r4, #8]
   2041a:	421e      	tst	r6, r3
   2041c:	d014      	beq.n	20448 <gpio_fire_callbacks+0x50>
			__ASSERT(cb->handler, "No callback handler!");
   2041e:	6863      	ldr	r3, [r4, #4]
   20420:	b963      	cbnz	r3, 2043c <gpio_fire_callbacks+0x44>
   20422:	4649      	mov	r1, r9
   20424:	2345      	movs	r3, #69	; 0x45
   20426:	4642      	mov	r2, r8
   20428:	4650      	mov	r0, sl
   2042a:	f006 f977 	bl	2671c <printk>
   2042e:	480b      	ldr	r0, [pc, #44]	; (2045c <gpio_fire_callbacks+0x64>)
   20430:	f006 f974 	bl	2671c <printk>
   20434:	2145      	movs	r1, #69	; 0x45
   20436:	4640      	mov	r0, r8
   20438:	f006 fc15 	bl	26c66 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   2043c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   20440:	4621      	mov	r1, r4
   20442:	4638      	mov	r0, r7
   20444:	4032      	ands	r2, r6
   20446:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   20448:	b135      	cbz	r5, 20458 <gpio_fire_callbacks+0x60>
   2044a:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2044c:	462c      	mov	r4, r5
   2044e:	2b00      	cmp	r3, #0
   20450:	bf38      	it	cc
   20452:	2300      	movcc	r3, #0
   20454:	461d      	mov	r5, r3
   20456:	e7df      	b.n	20418 <gpio_fire_callbacks+0x20>
		}
	}
}
   20458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2045c:	0003080b 	.word	0x0003080b
   20460:	000307b4 	.word	0x000307b4
   20464:	00030822 	.word	0x00030822
   20468:	0002cfb2 	.word	0x0002cfb2

0002046c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2046c:	6802      	ldr	r2, [r0, #0]
{
   2046e:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   20470:	0953      	lsrs	r3, r2, #5
{
   20472:	4604      	mov	r4, r0
    switch (port)
   20474:	d02b      	beq.n	204ce <nrf_gpio_pin_port_decode+0x62>
   20476:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   20478:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2047c:	bf18      	it	ne
   2047e:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   20480:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   20484:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20486:	07db      	lsls	r3, r3, #31
   20488:	d40b      	bmi.n	204a2 <nrf_gpio_pin_port_decode+0x36>
   2048a:	4913      	ldr	r1, [pc, #76]	; (204d8 <nrf_gpio_pin_port_decode+0x6c>)
   2048c:	4813      	ldr	r0, [pc, #76]	; (204dc <nrf_gpio_pin_port_decode+0x70>)
   2048e:	f44f 7305 	mov.w	r3, #532	; 0x214
   20492:	4a13      	ldr	r2, [pc, #76]	; (204e0 <nrf_gpio_pin_port_decode+0x74>)
   20494:	f006 f942 	bl	2671c <printk>
   20498:	f44f 7105 	mov.w	r1, #532	; 0x214
   2049c:	4810      	ldr	r0, [pc, #64]	; (204e0 <nrf_gpio_pin_port_decode+0x74>)
   2049e:	f006 fbe2 	bl	26c66 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   204a2:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   204a4:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   204a8:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   204aa:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   204ac:	d00d      	beq.n	204ca <nrf_gpio_pin_port_decode+0x5e>
   204ae:	2b01      	cmp	r3, #1
   204b0:	d010      	beq.n	204d4 <nrf_gpio_pin_port_decode+0x68>
            NRFX_ASSERT(0);
   204b2:	490c      	ldr	r1, [pc, #48]	; (204e4 <nrf_gpio_pin_port_decode+0x78>)
   204b4:	4809      	ldr	r0, [pc, #36]	; (204dc <nrf_gpio_pin_port_decode+0x70>)
   204b6:	f240 2319 	movw	r3, #537	; 0x219
   204ba:	4a09      	ldr	r2, [pc, #36]	; (204e0 <nrf_gpio_pin_port_decode+0x74>)
   204bc:	f006 f92e 	bl	2671c <printk>
   204c0:	f240 2119 	movw	r1, #537	; 0x219
   204c4:	4806      	ldr	r0, [pc, #24]	; (204e0 <nrf_gpio_pin_port_decode+0x74>)
   204c6:	f006 fbce 	bl	26c66 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   204ca:	4807      	ldr	r0, [pc, #28]	; (204e8 <nrf_gpio_pin_port_decode+0x7c>)
}
   204cc:	bd10      	pop	{r4, pc}
    switch (port)
   204ce:	f04f 33ff 	mov.w	r3, #4294967295
   204d2:	e7d5      	b.n	20480 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   204d4:	4805      	ldr	r0, [pc, #20]	; (204ec <nrf_gpio_pin_port_decode+0x80>)
   204d6:	e7f9      	b.n	204cc <nrf_gpio_pin_port_decode+0x60>
   204d8:	00030861 	.word	0x00030861
   204dc:	0002cfb2 	.word	0x0002cfb2
   204e0:	0003082e 	.word	0x0003082e
   204e4:	0002dee4 	.word	0x0002dee4
   204e8:	40842500 	.word	0x40842500
   204ec:	40842800 	.word	0x40842800

000204f0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   204f0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   204f2:	4b09      	ldr	r3, [pc, #36]	; (20518 <gpio_nrfx_init+0x28>)
   204f4:	781a      	ldrb	r2, [r3, #0]
   204f6:	b96a      	cbnz	r2, 20514 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   204f8:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   204fa:	202f      	movs	r0, #47	; 0x2f
		gpio_initialized = true;
   204fc:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   204fe:	2105      	movs	r1, #5
   20500:	f7f5 fe54 	bl	161ac <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   20504:	202f      	movs	r0, #47	; 0x2f
   20506:	f7f5 fe33 	bl	16170 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   2050a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   2050e:	4b03      	ldr	r3, [pc, #12]	; (2051c <gpio_nrfx_init+0x2c>)
   20510:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   20514:	2000      	movs	r0, #0
   20516:	bd08      	pop	{r3, pc}
   20518:	2000a51e 	.word	0x2000a51e
   2051c:	4002f000 	.word	0x4002f000

00020520 <gpio_nrfx_pin_interrupt_configure>:
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   20520:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   20524:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20528:	4607      	mov	r7, r0
   2052a:	460e      	mov	r6, r1
   2052c:	4690      	mov	r8, r2
   2052e:	4699      	mov	r9, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   20530:	6904      	ldr	r4, [r0, #16]
	return port->config;
   20532:	f001 051f 	and.w	r5, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   20536:	f040 80a8 	bne.w	2068a <gpio_nrfx_pin_interrupt_configure+0x16a>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2053a:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2053c:	a801      	add	r0, sp, #4
   2053e:	7a1b      	ldrb	r3, [r3, #8]
   20540:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   20544:	9301      	str	r3, [sp, #4]
   20546:	f7ff ff91 	bl	2046c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   2054a:	9b01      	ldr	r3, [sp, #4]
   2054c:	3380      	adds	r3, #128	; 0x80
   2054e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   20552:	07d8      	lsls	r0, r3, #31
   20554:	f100 80b8 	bmi.w	206c8 <gpio_nrfx_pin_interrupt_configure+0x1a8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   20558:	2101      	movs	r1, #1
   2055a:	68e3      	ldr	r3, [r4, #12]
   2055c:	40b1      	lsls	r1, r6
   2055e:	4319      	orrs	r1, r3
   20560:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   20562:	2101      	movs	r1, #1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   20564:	2000      	movs	r0, #0
   20566:	6963      	ldr	r3, [r4, #20]
   20568:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   2056a:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   2056e:	bf0c      	ite	eq
   20570:	430b      	orreq	r3, r1
   20572:	438b      	bicne	r3, r1
   20574:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   20576:	69a3      	ldr	r3, [r4, #24]
   20578:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   2057c:	bf0c      	ite	eq
   2057e:	430b      	orreq	r3, r1
   20580:	438b      	bicne	r3, r1
   20582:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   20584:	6923      	ldr	r3, [r4, #16]
   20586:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   2058a:	bf0c      	ite	eq
   2058c:	4319      	orreq	r1, r3
   2058e:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20592:	687b      	ldr	r3, [r7, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   20594:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20596:	7a1b      	ldrb	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   20598:	4a4d      	ldr	r2, [pc, #308]	; (206d0 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
   2059a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   2059e:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	struct gpio_nrfx_data *data = get_port_data(port);
   205a2:	f8d7 8010 	ldr.w	r8, [r7, #16]
   205a6:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   205a8:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   205ac:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   205b0:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   205b4:	428d      	cmp	r5, r1
   205b6:	d173      	bne.n	206a0 <gpio_nrfx_pin_interrupt_configure+0x180>
		    && (intenset & BIT(i))) {
   205b8:	fa23 f100 	lsr.w	r1, r3, r0
   205bc:	07c9      	lsls	r1, r1, #31
   205be:	d56f      	bpl.n	206a0 <gpio_nrfx_pin_interrupt_configure+0x180>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   205c0:	0083      	lsls	r3, r0, #2
   205c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   205c6:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   205ca:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   205ce:	f021 0101 	bic.w	r1, r1, #1
   205d2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   205d6:	2301      	movs	r3, #1
   205d8:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   205da:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   205de:	b2c0      	uxtb	r0, r0
   205e0:	f001 f8de 	bl	217a0 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   205e4:	4628      	mov	r0, r5
   205e6:	2100      	movs	r1, #0
   205e8:	f00a f87d 	bl	2a6e6 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   205ec:	f8d8 000c 	ldr.w	r0, [r8, #12]
   205f0:	40f0      	lsrs	r0, r6
   205f2:	f010 0001 	ands.w	r0, r0, #1
   205f6:	d045      	beq.n	20684 <gpio_nrfx_pin_interrupt_configure+0x164>
		if (data->trig_edge & BIT(pin)) {
   205f8:	f8d8 0014 	ldr.w	r0, [r8, #20]
   205fc:	40f0      	lsrs	r0, r6
   205fe:	f010 0401 	ands.w	r4, r0, #1
   20602:	d054      	beq.n	206ae <gpio_nrfx_pin_interrupt_configure+0x18e>
				if (data->double_edge & BIT(pin)) {
   20604:	f8d8 3018 	ldr.w	r3, [r8, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   20608:	a801      	add	r0, sp, #4
				if (data->double_edge & BIT(pin)) {
   2060a:	40f3      	lsrs	r3, r6
   2060c:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   2060e:	bf57      	itett	pl
   20610:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   20614:	2603      	movmi	r6, #3
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   20616:	fa21 f606 	lsrpl.w	r6, r1, r6
   2061a:	f006 0601 	andpl.w	r6, r6, #1
   2061e:	bf5c      	itt	pl
   20620:	f1c6 0602 	rsbpl	r6, r6, #2
   20624:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   20626:	f001 f8dd 	bl	217e4 <nrfx_gpiote_channel_alloc>
   2062a:	4b2a      	ldr	r3, [pc, #168]	; (206d4 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   2062c:	4298      	cmp	r0, r3
   2062e:	d13b      	bne.n	206a8 <gpio_nrfx_pin_interrupt_configure+0x188>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   20630:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20634:	022d      	lsls	r5, r5, #8
   20636:	008b      	lsls	r3, r1, #2
   20638:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2063c:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   20640:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20644:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   20648:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   2064c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   20650:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20654:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   20658:	0088      	lsls	r0, r1, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2065a:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
   2065c:	4a1e      	ldr	r2, [pc, #120]	; (206d8 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2065e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    return ((uint32_t)p_reg + event);
   20662:	4402      	add	r2, r0
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20664:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20666:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2066a:	6010      	str	r0, [r2, #0]
   2066c:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   2066e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   20672:	f042 0201 	orr.w	r2, r2, #1
   20676:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   2067a:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   2067c:	4a14      	ldr	r2, [pc, #80]	; (206d0 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
   2067e:	408b      	lsls	r3, r1
   20680:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   20684:	b003      	add	sp, #12
   20686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   2068a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   2068e:	f47f af63 	bne.w	20558 <gpio_nrfx_pin_interrupt_configure+0x38>
   20692:	2101      	movs	r1, #1
   20694:	fa01 f306 	lsl.w	r3, r1, r6
   20698:	68e1      	ldr	r1, [r4, #12]
   2069a:	ea21 0103 	bic.w	r1, r1, r3
   2069e:	e75f      	b.n	20560 <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   206a0:	3001      	adds	r0, #1
   206a2:	2808      	cmp	r0, #8
   206a4:	d180      	bne.n	205a8 <gpio_nrfx_pin_interrupt_configure+0x88>
   206a6:	e79d      	b.n	205e4 <gpio_nrfx_pin_interrupt_configure+0xc4>
		return -ENODEV;
   206a8:	f06f 0012 	mvn.w	r0, #18
   206ac:	e7ea      	b.n	20684 <gpio_nrfx_pin_interrupt_configure+0x164>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   206ae:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   206b2:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   206b4:	40f1      	lsrs	r1, r6
   206b6:	f001 0101 	and.w	r1, r1, #1
   206ba:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   206be:	b2c9      	uxtb	r1, r1
   206c0:	f00a f811 	bl	2a6e6 <nrf_gpio_cfg_sense_set>
	int res = 0;
   206c4:	4620      	mov	r0, r4
   206c6:	e7dd      	b.n	20684 <gpio_nrfx_pin_interrupt_configure+0x164>
		return -ENOTSUP;
   206c8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   206cc:	e7da      	b.n	20684 <gpio_nrfx_pin_interrupt_configure+0x164>
   206ce:	bf00      	nop
   206d0:	4002f000 	.word	0x4002f000
   206d4:	0bad0000 	.word	0x0bad0000
   206d8:	4002f100 	.word	0x4002f100

000206dc <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   206dc:	4b31      	ldr	r3, [pc, #196]	; (207a4 <gpio_nrfx_config+0xc8>)
{
   206de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   206e0:	4c31      	ldr	r4, [pc, #196]	; (207a8 <gpio_nrfx_config+0xcc>)
   206e2:	4013      	ands	r3, r2
   206e4:	42a3      	cmp	r3, r4
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   206e6:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   206e8:	d04a      	beq.n	20780 <gpio_nrfx_config+0xa4>
   206ea:	d80e      	bhi.n	2070a <gpio_nrfx_config+0x2e>
   206ec:	2b06      	cmp	r3, #6
   206ee:	d049      	beq.n	20784 <gpio_nrfx_config+0xa8>
   206f0:	d806      	bhi.n	20700 <gpio_nrfx_config+0x24>
   206f2:	2b00      	cmp	r3, #0
   206f4:	d046      	beq.n	20784 <gpio_nrfx_config+0xa8>
   206f6:	2b02      	cmp	r3, #2
   206f8:	d046      	beq.n	20788 <gpio_nrfx_config+0xac>
   206fa:	f06f 0015 	mvn.w	r0, #21
   206fe:	e03d      	b.n	2077c <gpio_nrfx_config+0xa0>
   20700:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   20704:	d1f9      	bne.n	206fa <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   20706:	2401      	movs	r4, #1
   20708:	e009      	b.n	2071e <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2070a:	4c28      	ldr	r4, [pc, #160]	; (207ac <gpio_nrfx_config+0xd0>)
   2070c:	42a3      	cmp	r3, r4
   2070e:	d03d      	beq.n	2078c <gpio_nrfx_config+0xb0>
   20710:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   20714:	d03c      	beq.n	20790 <gpio_nrfx_config+0xb4>
   20716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   2071a:	d1ee      	bne.n	206fa <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   2071c:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   2071e:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   20720:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   20724:	bf4c      	ite	mi
   20726:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   20728:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   2072c:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   20730:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   20732:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   20736:	d507      	bpl.n	20748 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   20738:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2073a:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   2073e:	d529      	bpl.n	20794 <gpio_nrfx_config+0xb8>
			nrf_gpio_port_out_set(reg, BIT(pin));
   20740:	2301      	movs	r3, #1
   20742:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   20744:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   20748:	7a03      	ldrb	r3, [r0, #8]
   2074a:	f001 011f 	and.w	r1, r1, #31
   2074e:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20752:	a801      	add	r0, sp, #4
   20754:	9101      	str	r1, [sp, #4]
   20756:	f7ff fe89 	bl	2046c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2075a:	9b01      	ldr	r3, [sp, #4]
   2075c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   20760:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   20764:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   20768:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2076c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   20770:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   20774:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
   20776:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	return 0;
   2077a:	2000      	movs	r0, #0
}
   2077c:	b003      	add	sp, #12
   2077e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   20780:	2407      	movs	r4, #7
   20782:	e7cc      	b.n	2071e <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   20784:	461c      	mov	r4, r3
   20786:	e7ca      	b.n	2071e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   20788:	2404      	movs	r4, #4
   2078a:	e7c8      	b.n	2071e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   2078c:	2405      	movs	r4, #5
   2078e:	e7c6      	b.n	2071e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   20790:	2403      	movs	r4, #3
   20792:	e7c4      	b.n	2071e <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   20794:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   20796:	bf42      	ittt	mi
   20798:	2301      	movmi	r3, #1
   2079a:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   2079c:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   207a0:	e7d2      	b.n	20748 <gpio_nrfx_config+0x6c>
   207a2:	bf00      	nop
   207a4:	00f00006 	.word	0x00f00006
   207a8:	00100006 	.word	0x00100006
   207ac:	00400002 	.word	0x00400002

000207b0 <gpiote_event_handler>:
{
   207b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   207b2:	2400      	movs	r4, #0
{
   207b4:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   207b6:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   207ba:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   207be:	4e25      	ldr	r6, [pc, #148]	; (20854 <gpiote_event_handler+0xa4>)
   207c0:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
   207c2:	b15d      	cbz	r5, 207dc <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   207c4:	a902      	add	r1, sp, #8
   207c6:	4824      	ldr	r0, [pc, #144]	; (20858 <gpiote_event_handler+0xa8>)
   207c8:	f009 ffa0 	bl	2a70c <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   207cc:	a903      	add	r1, sp, #12
		fired_triggers[0] =
   207ce:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   207d0:	4822      	ldr	r0, [pc, #136]	; (2085c <gpiote_event_handler+0xac>)
   207d2:	f009 ff9b 	bl	2a70c <check_level_trigger_pins>
		fired_triggers[1] =
   207d6:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   207d8:	6034      	str	r4, [r6, #0]
   207da:	6833      	ldr	r3, [r6, #0]
{
   207dc:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   207de:	2601      	movs	r6, #1
   207e0:	469c      	mov	ip, r3
    return p_reg->INTENSET & mask;
   207e2:	4c1f      	ldr	r4, [pc, #124]	; (20860 <gpiote_event_handler+0xb0>)
   207e4:	481f      	ldr	r0, [pc, #124]	; (20864 <gpiote_event_handler+0xb4>)
   207e6:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
   207ea:	fa06 f103 	lsl.w	r1, r6, r3
   207ee:	4211      	tst	r1, r2
   207f0:	d018      	beq.n	20824 <gpiote_event_handler+0x74>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   207f2:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
   207f6:	b1aa      	cbz	r2, 20824 <gpiote_event_handler+0x74>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   207f8:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   207fc:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   20800:	af04      	add	r7, sp, #16
   20802:	f3c2 3140 	ubfx	r1, r2, #13, #1
   20806:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   2080a:	f851 7c10 	ldr.w	r7, [r1, #-16]
   2080e:	f3c2 2204 	ubfx	r2, r2, #8, #5
   20812:	fa06 f202 	lsl.w	r2, r6, r2
   20816:	433a      	orrs	r2, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20818:	f840 c023 	str.w	ip, [r0, r3, lsl #2]
   2081c:	f841 2c10 	str.w	r2, [r1, #-16]
   20820:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   20824:	3301      	adds	r3, #1
   20826:	2b08      	cmp	r3, #8
   20828:	d1dd      	bne.n	207e6 <gpiote_event_handler+0x36>
	if (fired_triggers[0]) {
   2082a:	9a00      	ldr	r2, [sp, #0]
   2082c:	b11a      	cbz	r2, 20836 <gpiote_event_handler+0x86>
	gpio_fire_callbacks(list, port, pins);
   2082e:	490a      	ldr	r1, [pc, #40]	; (20858 <gpiote_event_handler+0xa8>)
   20830:	480d      	ldr	r0, [pc, #52]	; (20868 <gpiote_event_handler+0xb8>)
   20832:	f7ff fde1 	bl	203f8 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   20836:	9a01      	ldr	r2, [sp, #4]
   20838:	b11a      	cbz	r2, 20842 <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
   2083a:	4908      	ldr	r1, [pc, #32]	; (2085c <gpiote_event_handler+0xac>)
   2083c:	480b      	ldr	r0, [pc, #44]	; (2086c <gpiote_event_handler+0xbc>)
   2083e:	f7ff fddb 	bl	203f8 <gpio_fire_callbacks>
	if (port_event) {
   20842:	b12d      	cbz	r5, 20850 <gpiote_event_handler+0xa0>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   20844:	4804      	ldr	r0, [pc, #16]	; (20858 <gpiote_event_handler+0xa8>)
   20846:	f009 ffa3 	bl	2a790 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   2084a:	4804      	ldr	r0, [pc, #16]	; (2085c <gpiote_event_handler+0xac>)
   2084c:	f009 ffa0 	bl	2a790 <cfg_level_pins>
}
   20850:	b005      	add	sp, #20
   20852:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20854:	4002f17c 	.word	0x4002f17c
   20858:	20008454 	.word	0x20008454
   2085c:	2000846c 	.word	0x2000846c
   20860:	4002f000 	.word	0x4002f000
   20864:	4002f100 	.word	0x4002f100
   20868:	20009934 	.word	0x20009934
   2086c:	20009950 	.word	0x20009950

00020870 <vipm_nrf_1_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   20870:	4b02      	ldr	r3, [pc, #8]	; (2087c <vipm_nrf_1_register_callback+0xc>)
   20872:	6059      	str	r1, [r3, #4]
   20874:	645a      	str	r2, [r3, #68]	; 0x44
   20876:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
   2087a:	4770      	bx	lr
   2087c:	20009978 	.word	0x20009978

00020880 <vipm_nrf_0_set_enabled>:
   20880:	b508      	push	{r3, lr}
   20882:	4906      	ldr	r1, [pc, #24]	; (2089c <vipm_nrf_0_set_enabled+0x1c>)
   20884:	4b06      	ldr	r3, [pc, #24]	; (208a0 <vipm_nrf_0_set_enabled+0x20>)
   20886:	4807      	ldr	r0, [pc, #28]	; (208a4 <vipm_nrf_0_set_enabled+0x24>)
   20888:	1ac9      	subs	r1, r1, r3
   2088a:	08c9      	lsrs	r1, r1, #3
   2088c:	0189      	lsls	r1, r1, #6
   2088e:	f041 0101 	orr.w	r1, r1, #1
   20892:	f006 fa4d 	bl	26d30 <log_0>
   20896:	f06f 0015 	mvn.w	r0, #21
   2089a:	bd08      	pop	{r3, pc}
   2089c:	0002c094 	.word	0x0002c094
   208a0:	0002bfe4 	.word	0x0002bfe4
   208a4:	00030892 	.word	0x00030892

000208a8 <vipm_nrf_0_register_callback>:
   208a8:	4904      	ldr	r1, [pc, #16]	; (208bc <vipm_nrf_0_register_callback+0x14>)
   208aa:	4b05      	ldr	r3, [pc, #20]	; (208c0 <vipm_nrf_0_register_callback+0x18>)
   208ac:	4805      	ldr	r0, [pc, #20]	; (208c4 <vipm_nrf_0_register_callback+0x1c>)
   208ae:	1ac9      	subs	r1, r1, r3
   208b0:	08c9      	lsrs	r1, r1, #3
   208b2:	0189      	lsls	r1, r1, #6
   208b4:	f041 0102 	orr.w	r1, r1, #2
   208b8:	f006 ba3a 	b.w	26d30 <log_0>
   208bc:	0002c094 	.word	0x0002c094
   208c0:	0002bfe4 	.word	0x0002bfe4
   208c4:	000308ae 	.word	0x000308ae

000208c8 <vipm_nrf_1_send>:
   208c8:	b508      	push	{r3, lr}
   208ca:	4906      	ldr	r1, [pc, #24]	; (208e4 <vipm_nrf_1_send+0x1c>)
   208cc:	4b06      	ldr	r3, [pc, #24]	; (208e8 <vipm_nrf_1_send+0x20>)
   208ce:	4807      	ldr	r0, [pc, #28]	; (208ec <vipm_nrf_1_send+0x24>)
   208d0:	1ac9      	subs	r1, r1, r3
   208d2:	08c9      	lsrs	r1, r1, #3
   208d4:	0189      	lsls	r1, r1, #6
   208d6:	f041 0101 	orr.w	r1, r1, #1
   208da:	f006 fa29 	bl	26d30 <log_0>
   208de:	f06f 0015 	mvn.w	r0, #21
   208e2:	bd08      	pop	{r3, pc}
   208e4:	0002c094 	.word	0x0002c094
   208e8:	0002bfe4 	.word	0x0002bfe4
   208ec:	000308e0 	.word	0x000308e0

000208f0 <vipm_nrf_init>:
{
   208f0:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
   208f2:	4d0b      	ldr	r5, [pc, #44]	; (20920 <vipm_nrf_init+0x30>)
   208f4:	f895 40c0 	ldrb.w	r4, [r5, #192]	; 0xc0
   208f8:	b97c      	cbnz	r4, 2091a <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
   208fa:	4a0a      	ldr	r2, [pc, #40]	; (20924 <vipm_nrf_init+0x34>)
   208fc:	490a      	ldr	r1, [pc, #40]	; (20928 <vipm_nrf_init+0x38>)
   208fe:	4620      	mov	r0, r4
   20900:	f000 ffa8 	bl	21854 <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_IRQN(0),
   20904:	4622      	mov	r2, r4
   20906:	2101      	movs	r1, #1
   20908:	202a      	movs	r0, #42	; 0x2a
   2090a:	f7f5 fc4f 	bl	161ac <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
   2090e:	4807      	ldr	r0, [pc, #28]	; (2092c <vipm_nrf_init+0x3c>)
   20910:	f000 ffc8 	bl	218a4 <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
   20914:	2301      	movs	r3, #1
   20916:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
}
   2091a:	2000      	movs	r0, #0
   2091c:	bd38      	pop	{r3, r4, r5, pc}
   2091e:	bf00      	nop
   20920:	20009978 	.word	0x20009978
   20924:	20009970 	.word	0x20009970
   20928:	00020931 	.word	0x00020931
   2092c:	0002c8f8 	.word	0x0002c8f8

00020930 <vipm_dispatcher>:
{
   20930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20934:	4605      	mov	r5, r0
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   20936:	4e1a      	ldr	r6, [pc, #104]	; (209a0 <vipm_dispatcher+0x70>)
   20938:	4f1a      	ldr	r7, [pc, #104]	; (209a4 <vipm_dispatcher+0x74>)
   2093a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 209b0 <vipm_dispatcher+0x80>
	while (event_mask) {
   2093e:	b90d      	cbnz	r5, 20944 <vipm_dispatcher+0x14>
}
   20940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   20944:	fa95 f4a5 	rbit	r4, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
   20948:	b33c      	cbz	r4, 2099a <vipm_dispatcher+0x6a>
  {
    return 32U;
  }
  return __builtin_clz(value);
   2094a:	fab4 f384 	clz	r3, r4
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   2094e:	2b0f      	cmp	r3, #15
   20950:	461c      	mov	r4, r3
   20952:	dd0d      	ble.n	20970 <vipm_dispatcher+0x40>
   20954:	2383      	movs	r3, #131	; 0x83
   20956:	4632      	mov	r2, r6
   20958:	4639      	mov	r1, r7
   2095a:	4640      	mov	r0, r8
   2095c:	f005 fede 	bl	2671c <printk>
   20960:	4621      	mov	r1, r4
   20962:	4811      	ldr	r0, [pc, #68]	; (209a8 <vipm_dispatcher+0x78>)
   20964:	f005 feda 	bl	2671c <printk>
   20968:	2183      	movs	r1, #131	; 0x83
   2096a:	4630      	mov	r0, r6
   2096c:	f006 f97b 	bl	26c66 <assert_post_action>
		event_mask &= ~BIT(event_idx);
   20970:	2301      	movs	r3, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   20972:	480e      	ldr	r0, [pc, #56]	; (209ac <vipm_dispatcher+0x7c>)
		event_mask &= ~BIT(event_idx);
   20974:	40a3      	lsls	r3, r4
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   20976:	f850 9024 	ldr.w	r9, [r0, r4, lsl #2]
		event_mask &= ~BIT(event_idx);
   2097a:	ea25 0503 	bic.w	r5, r5, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   2097e:	f1b9 0f00 	cmp.w	r9, #0
   20982:	d0dc      	beq.n	2093e <vipm_dispatcher+0xe>
			nrfx_vipm_data.callback[event_idx]
   20984:	2300      	movs	r3, #0
   20986:	f104 0110 	add.w	r1, r4, #16
   2098a:	3420      	adds	r4, #32
   2098c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   20990:	461a      	mov	r2, r3
   20992:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   20996:	47c8      	blx	r9
   20998:	e7d1      	b.n	2093e <vipm_dispatcher+0xe>
    return 32U;
   2099a:	2420      	movs	r4, #32
   2099c:	e7da      	b.n	20954 <vipm_dispatcher+0x24>
   2099e:	bf00      	nop
   209a0:	000308fc 	.word	0x000308fc
   209a4:	0003092a 	.word	0x0003092a
   209a8:	00030939 	.word	0x00030939
   209ac:	20009978 	.word	0x20009978
   209b0:	0002cfb2 	.word	0x0002cfb2

000209b4 <vipm_nrf_0_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   209b4:	2a10      	cmp	r2, #16
   209b6:	b508      	push	{r3, lr}
   209b8:	d81c      	bhi.n	209f4 <vipm_nrf_0_send+0x40>
   209ba:	b14a      	cbz	r2, 209d0 <vipm_nrf_0_send+0x1c>
   209bc:	490f      	ldr	r1, [pc, #60]	; (209fc <vipm_nrf_0_send+0x48>)
   209be:	4b10      	ldr	r3, [pc, #64]	; (20a00 <vipm_nrf_0_send+0x4c>)
   209c0:	4810      	ldr	r0, [pc, #64]	; (20a04 <vipm_nrf_0_send+0x50>)
   209c2:	1ac9      	subs	r1, r1, r3
   209c4:	08c9      	lsrs	r1, r1, #3
   209c6:	0189      	lsls	r1, r1, #6
   209c8:	f041 0102 	orr.w	r1, r1, #2
   209cc:	f006 f9b0 	bl	26d30 <log_0>
   209d0:	9b02      	ldr	r3, [sp, #8]
   209d2:	2b00      	cmp	r3, #0
   209d4:	dd09      	ble.n	209ea <vipm_nrf_0_send+0x36>
   209d6:	4909      	ldr	r1, [pc, #36]	; (209fc <vipm_nrf_0_send+0x48>)
   209d8:	4b09      	ldr	r3, [pc, #36]	; (20a00 <vipm_nrf_0_send+0x4c>)
   209da:	480b      	ldr	r0, [pc, #44]	; (20a08 <vipm_nrf_0_send+0x54>)
   209dc:	1ac9      	subs	r1, r1, r3
   209de:	08c9      	lsrs	r1, r1, #3
   209e0:	0189      	lsls	r1, r1, #6
   209e2:	f041 0102 	orr.w	r1, r1, #2
   209e6:	f006 f9a3 	bl	26d30 <log_0>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   209ea:	2201      	movs	r2, #1
   209ec:	2000      	movs	r0, #0
   209ee:	4b07      	ldr	r3, [pc, #28]	; (20a0c <vipm_nrf_0_send+0x58>)
   209f0:	601a      	str	r2, [r3, #0]
   209f2:	bd08      	pop	{r3, pc}
   209f4:	f06f 0015 	mvn.w	r0, #21
   209f8:	e7fb      	b.n	209f2 <vipm_nrf_0_send+0x3e>
   209fa:	bf00      	nop
   209fc:	0002c094 	.word	0x0002c094
   20a00:	0002bfe4 	.word	0x0002bfe4
   20a04:	00030951 	.word	0x00030951
   20a08:	00030985 	.word	0x00030985
   20a0c:	4002a000 	.word	0x4002a000

00020a10 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   20a10:	4b02      	ldr	r3, [pc, #8]	; (20a1c <flash_nrf_pages_layout+0xc>)
   20a12:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   20a14:	2301      	movs	r3, #1
   20a16:	6013      	str	r3, [r2, #0]
}
   20a18:	4770      	bx	lr
   20a1a:	bf00      	nop
   20a1c:	20009a40 	.word	0x20009a40

00020a20 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   20a20:	4800      	ldr	r0, [pc, #0]	; (20a24 <flash_nrf_get_parameters+0x4>)
   20a22:	4770      	bx	lr
   20a24:	0002c9bc 	.word	0x0002c9bc

00020a28 <flash_nrf_read>:
{
   20a28:	b570      	push	{r4, r5, r6, lr}
   20a2a:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   20a2c:	4619      	mov	r1, r3
   20a2e:	4628      	mov	r0, r5
{
   20a30:	4616      	mov	r6, r2
   20a32:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   20a34:	f009 fee5 	bl	2a802 <is_regular_addr_valid>
   20a38:	b970      	cbnz	r0, 20a58 <flash_nrf_read+0x30>
   20a3a:	4a10      	ldr	r2, [pc, #64]	; (20a7c <flash_nrf_read+0x54>)
   20a3c:	4b10      	ldr	r3, [pc, #64]	; (20a80 <flash_nrf_read+0x58>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   20a3e:	4811      	ldr	r0, [pc, #68]	; (20a84 <flash_nrf_read+0x5c>)
   20a40:	1a9b      	subs	r3, r3, r2
   20a42:	08db      	lsrs	r3, r3, #3
   20a44:	019b      	lsls	r3, r3, #6
   20a46:	4622      	mov	r2, r4
   20a48:	4629      	mov	r1, r5
   20a4a:	f043 0301 	orr.w	r3, r3, #1
   20a4e:	f006 f990 	bl	26d72 <log_2>
		return -EINVAL;
   20a52:	f06f 0015 	mvn.w	r0, #21
}
   20a56:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   20a58:	b16c      	cbz	r4, 20a76 <flash_nrf_read+0x4e>
	if (addr < PM_APP_ADDRESS) {
   20a5a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
		return spm_request_read(data, addr, len);
   20a5e:	4622      	mov	r2, r4
   20a60:	4629      	mov	r1, r5
   20a62:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   20a64:	da03      	bge.n	20a6e <flash_nrf_read+0x46>
}
   20a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return spm_request_read(data, addr, len);
   20a6a:	f007 b88b 	b.w	27b84 <spm_request_read>
	memcpy(data, (void *)addr, len);
   20a6e:	f007 fd90 	bl	28592 <memcpy>
	return 0;
   20a72:	2000      	movs	r0, #0
   20a74:	e7ef      	b.n	20a56 <flash_nrf_read+0x2e>
		return 0;
   20a76:	4620      	mov	r0, r4
   20a78:	e7ed      	b.n	20a56 <flash_nrf_read+0x2e>
   20a7a:	bf00      	nop
   20a7c:	0002bfe4 	.word	0x0002bfe4
   20a80:	0002c084 	.word	0x0002c084
   20a84:	000309c3 	.word	0x000309c3

00020a88 <flash_nrf_erase>:
{
   20a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20a8a:	460d      	mov	r5, r1
   20a8c:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   20a8e:	f00a fafb 	bl	2b088 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   20a92:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   20a94:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
   20a96:	4628      	mov	r0, r5
   20a98:	f009 feb3 	bl	2a802 <is_regular_addr_valid>
   20a9c:	462f      	mov	r7, r5
   20a9e:	b378      	cbz	r0, 20b00 <flash_nrf_erase+0x78>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   20aa0:	fbb5 f3f6 	udiv	r3, r5, r6
   20aa4:	fb06 5313 	mls	r3, r6, r3, r5
   20aa8:	b923      	cbnz	r3, 20ab4 <flash_nrf_erase+0x2c>
   20aaa:	fbb4 f0f6 	udiv	r0, r4, r6
   20aae:	fb06 4010 	mls	r0, r6, r0, r4
   20ab2:	b170      	cbz	r0, 20ad2 <flash_nrf_erase+0x4a>
   20ab4:	4a18      	ldr	r2, [pc, #96]	; (20b18 <flash_nrf_erase+0x90>)
   20ab6:	4b19      	ldr	r3, [pc, #100]	; (20b1c <flash_nrf_erase+0x94>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   20ab8:	4629      	mov	r1, r5
   20aba:	1a9b      	subs	r3, r3, r2
   20abc:	4622      	mov	r2, r4
   20abe:	08db      	lsrs	r3, r3, #3
   20ac0:	019b      	lsls	r3, r3, #6
   20ac2:	4817      	ldr	r0, [pc, #92]	; (20b20 <flash_nrf_erase+0x98>)
   20ac4:	f043 0301 	orr.w	r3, r3, #1
		LOG_ERR("invalid address: 0x%08lx:%zu",
   20ac8:	f006 f953 	bl	26d72 <log_2>
		return -EINVAL;
   20acc:	f06f 0015 	mvn.w	r0, #21
   20ad0:	e015      	b.n	20afe <flash_nrf_erase+0x76>
		if (!n_pages) {
   20ad2:	42b4      	cmp	r4, r6
   20ad4:	d313      	bcc.n	20afe <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
   20ad6:	f04f 32ff 	mov.w	r2, #4294967295
   20ada:	f04f 33ff 	mov.w	r3, #4294967295
   20ade:	4811      	ldr	r0, [pc, #68]	; (20b24 <flash_nrf_erase+0x9c>)
   20ae0:	f002 fd20 	bl	23524 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   20ae4:	f00a fad0 	bl	2b088 <nrfx_nvmc_flash_page_size_get>
   20ae8:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   20aea:	4638      	mov	r0, r7
   20aec:	f000 ff9c 	bl	21a28 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   20af0:	1b64      	subs	r4, r4, r5
   20af2:	442f      	add	r7, r5
   20af4:	d1f9      	bne.n	20aea <flash_nrf_erase+0x62>
	z_impl_k_sem_give(sem);
   20af6:	480b      	ldr	r0, [pc, #44]	; (20b24 <flash_nrf_erase+0x9c>)
   20af8:	f002 fcd0 	bl	2349c <z_impl_k_sem_give>
	return ret;
   20afc:	4620      	mov	r0, r4
}
   20afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20b00:	4a05      	ldr	r2, [pc, #20]	; (20b18 <flash_nrf_erase+0x90>)
   20b02:	4b06      	ldr	r3, [pc, #24]	; (20b1c <flash_nrf_erase+0x94>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   20b04:	4629      	mov	r1, r5
   20b06:	1a9b      	subs	r3, r3, r2
   20b08:	08db      	lsrs	r3, r3, #3
   20b0a:	019b      	lsls	r3, r3, #6
   20b0c:	4622      	mov	r2, r4
   20b0e:	4806      	ldr	r0, [pc, #24]	; (20b28 <flash_nrf_erase+0xa0>)
   20b10:	f043 0301 	orr.w	r3, r3, #1
   20b14:	e7d8      	b.n	20ac8 <flash_nrf_erase+0x40>
   20b16:	bf00      	nop
   20b18:	0002bfe4 	.word	0x0002bfe4
   20b1c:	0002c084 	.word	0x0002c084
   20b20:	000309e0 	.word	0x000309e0
   20b24:	20009a48 	.word	0x20009a48
   20b28:	000309c3 	.word	0x000309c3

00020b2c <nrf_flash_init>:
{
   20b2c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   20b2e:	2201      	movs	r2, #1
   20b30:	4806      	ldr	r0, [pc, #24]	; (20b4c <nrf_flash_init+0x20>)
   20b32:	4611      	mov	r1, r2
   20b34:	f00a ff57 	bl	2b9e6 <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   20b38:	f00a faa9 	bl	2b08e <nrfx_nvmc_flash_page_count_get>
   20b3c:	4c04      	ldr	r4, [pc, #16]	; (20b50 <nrf_flash_init+0x24>)
   20b3e:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   20b40:	f00a faa2 	bl	2b088 <nrfx_nvmc_flash_page_size_get>
   20b44:	6060      	str	r0, [r4, #4]
}
   20b46:	2000      	movs	r0, #0
   20b48:	bd10      	pop	{r4, pc}
   20b4a:	bf00      	nop
   20b4c:	20009a48 	.word	0x20009a48
   20b50:	20009a40 	.word	0x20009a40

00020b54 <flash_nrf_write>:
{
   20b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20b56:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   20b58:	4619      	mov	r1, r3
   20b5a:	4630      	mov	r0, r6
{
   20b5c:	4617      	mov	r7, r2
   20b5e:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   20b60:	f009 fe4f 	bl	2a802 <is_regular_addr_valid>
   20b64:	b970      	cbnz	r0, 20b84 <flash_nrf_write+0x30>
   20b66:	4a1f      	ldr	r2, [pc, #124]	; (20be4 <flash_nrf_write+0x90>)
   20b68:	4b1f      	ldr	r3, [pc, #124]	; (20be8 <flash_nrf_write+0x94>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   20b6a:	4631      	mov	r1, r6
   20b6c:	1a9b      	subs	r3, r3, r2
   20b6e:	4622      	mov	r2, r4
   20b70:	08db      	lsrs	r3, r3, #3
   20b72:	019b      	lsls	r3, r3, #6
   20b74:	481d      	ldr	r0, [pc, #116]	; (20bec <flash_nrf_write+0x98>)
   20b76:	f043 0301 	orr.w	r3, r3, #1
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   20b7a:	f006 f8fa 	bl	26d72 <log_2>
		return -EINVAL;
   20b7e:	f06f 0015 	mvn.w	r0, #21
}
   20b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
   20b84:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   20b88:	f015 0503 	ands.w	r5, r5, #3
   20b8c:	d00a      	beq.n	20ba4 <flash_nrf_write+0x50>
   20b8e:	4a15      	ldr	r2, [pc, #84]	; (20be4 <flash_nrf_write+0x90>)
   20b90:	4b15      	ldr	r3, [pc, #84]	; (20be8 <flash_nrf_write+0x94>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   20b92:	4631      	mov	r1, r6
   20b94:	1a9b      	subs	r3, r3, r2
   20b96:	08db      	lsrs	r3, r3, #3
   20b98:	019b      	lsls	r3, r3, #6
   20b9a:	4622      	mov	r2, r4
   20b9c:	4814      	ldr	r0, [pc, #80]	; (20bf0 <flash_nrf_write+0x9c>)
   20b9e:	f043 0301 	orr.w	r3, r3, #1
   20ba2:	e7ea      	b.n	20b7a <flash_nrf_write+0x26>
	if (!len) {
   20ba4:	b1dc      	cbz	r4, 20bde <flash_nrf_write+0x8a>
	return z_impl_k_sem_take(sem, timeout);
   20ba6:	f04f 32ff 	mov.w	r2, #4294967295
   20baa:	f04f 33ff 	mov.w	r3, #4294967295
   20bae:	4811      	ldr	r0, [pc, #68]	; (20bf4 <flash_nrf_write+0xa0>)
   20bb0:	f002 fcb8 	bl	23524 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   20bb4:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   20bb8:	42ac      	cmp	r4, r5
   20bba:	eb06 0005 	add.w	r0, r6, r5
   20bbe:	d109      	bne.n	20bd4 <flash_nrf_write+0x80>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   20bc0:	4a0d      	ldr	r2, [pc, #52]	; (20bf8 <flash_nrf_write+0xa4>)
   20bc2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   20bc6:	07db      	lsls	r3, r3, #31
   20bc8:	d5fb      	bpl.n	20bc2 <flash_nrf_write+0x6e>
	z_impl_k_sem_give(sem);
   20bca:	480a      	ldr	r0, [pc, #40]	; (20bf4 <flash_nrf_write+0xa0>)
   20bcc:	f002 fc66 	bl	2349c <z_impl_k_sem_give>
	return ret;
   20bd0:	2000      	movs	r0, #0
}
   20bd2:	e7d6      	b.n	20b82 <flash_nrf_write+0x2e>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   20bd4:	5979      	ldr	r1, [r7, r5]
   20bd6:	f000 ff59 	bl	21a8c <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   20bda:	3504      	adds	r5, #4
}
   20bdc:	e7ec      	b.n	20bb8 <flash_nrf_write+0x64>
		return 0;
   20bde:	4620      	mov	r0, r4
   20be0:	e7cf      	b.n	20b82 <flash_nrf_write+0x2e>
   20be2:	bf00      	nop
   20be4:	0002bfe4 	.word	0x0002bfe4
   20be8:	0002c084 	.word	0x0002c084
   20bec:	000309c3 	.word	0x000309c3
   20bf0:	000309ff 	.word	0x000309ff
   20bf4:	20009a48 	.word	0x20009a48
   20bf8:	40039000 	.word	0x40039000

00020bfc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   20bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   20bfe:	794b      	ldrb	r3, [r1, #5]
   20c00:	2b01      	cmp	r3, #1
   20c02:	d02c      	beq.n	20c5e <uarte_nrfx_configure+0x62>
   20c04:	2b03      	cmp	r3, #3
   20c06:	d127      	bne.n	20c58 <uarte_nrfx_configure+0x5c>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   20c08:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   20c0a:	798b      	ldrb	r3, [r1, #6]
   20c0c:	2b03      	cmp	r3, #3
   20c0e:	d123      	bne.n	20c58 <uarte_nrfx_configure+0x5c>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   20c10:	79cd      	ldrb	r5, [r1, #7]
   20c12:	b12d      	cbz	r5, 20c20 <uarte_nrfx_configure+0x24>
   20c14:	2d01      	cmp	r5, #1
   20c16:	d11f      	bne.n	20c58 <uarte_nrfx_configure+0x5c>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   20c18:	6843      	ldr	r3, [r0, #4]
   20c1a:	685b      	ldr	r3, [r3, #4]
   20c1c:	079b      	lsls	r3, r3, #30
   20c1e:	d01b      	beq.n	20c58 <uarte_nrfx_configure+0x5c>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   20c20:	790a      	ldrb	r2, [r1, #4]
   20c22:	2a01      	cmp	r2, #1
   20c24:	d01d      	beq.n	20c62 <uarte_nrfx_configure+0x66>
   20c26:	2a02      	cmp	r2, #2
   20c28:	d01f      	beq.n	20c6a <uarte_nrfx_configure+0x6e>
   20c2a:	b9aa      	cbnz	r2, 20c58 <uarte_nrfx_configure+0x5c>
   20c2c:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   20c2e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   20c30:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
   20c32:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   20c36:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
   20c38:	d06e      	beq.n	20d18 <uarte_nrfx_configure+0x11c>
   20c3a:	d833      	bhi.n	20ca4 <uarte_nrfx_configure+0xa8>
   20c3c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   20c40:	d06d      	beq.n	20d1e <uarte_nrfx_configure+0x122>
   20c42:	d81c      	bhi.n	20c7e <uarte_nrfx_configure+0x82>
   20c44:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   20c48:	d06b      	beq.n	20d22 <uarte_nrfx_configure+0x126>
   20c4a:	d810      	bhi.n	20c6e <uarte_nrfx_configure+0x72>
   20c4c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   20c50:	d06a      	beq.n	20d28 <uarte_nrfx_configure+0x12c>
   20c52:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   20c56:	d06a      	beq.n	20d2e <uarte_nrfx_configure+0x132>
   20c58:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20c5c:	e05b      	b.n	20d16 <uarte_nrfx_configure+0x11a>
	switch (cfg->stop_bits) {
   20c5e:	2700      	movs	r7, #0
   20c60:	e7d3      	b.n	20c0a <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   20c62:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   20c66:	220e      	movs	r2, #14
   20c68:	e7e1      	b.n	20c2e <uarte_nrfx_configure+0x32>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   20c6a:	2400      	movs	r4, #0
   20c6c:	e7fb      	b.n	20c66 <uarte_nrfx_configure+0x6a>
	switch (baudrate) {
   20c6e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   20c72:	d05f      	beq.n	20d34 <uarte_nrfx_configure+0x138>
   20c74:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   20c78:	d1ee      	bne.n	20c58 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   20c7a:	4b39      	ldr	r3, [pc, #228]	; (20d60 <uarte_nrfx_configure+0x164>)
   20c7c:	e03e      	b.n	20cfc <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   20c7e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   20c82:	d05a      	beq.n	20d3a <uarte_nrfx_configure+0x13e>
   20c84:	d807      	bhi.n	20c96 <uarte_nrfx_configure+0x9a>
   20c86:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   20c8a:	d058      	beq.n	20d3e <uarte_nrfx_configure+0x142>
   20c8c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   20c90:	d1e2      	bne.n	20c58 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   20c92:	4b34      	ldr	r3, [pc, #208]	; (20d64 <uarte_nrfx_configure+0x168>)
   20c94:	e032      	b.n	20cfc <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   20c96:	f647 2c12 	movw	ip, #31250	; 0x7a12
   20c9a:	4563      	cmp	r3, ip
   20c9c:	d1dc      	bne.n	20c58 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   20c9e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   20ca2:	e02b      	b.n	20cfc <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   20ca4:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   20ca8:	d04b      	beq.n	20d42 <uarte_nrfx_configure+0x146>
   20caa:	d813      	bhi.n	20cd4 <uarte_nrfx_configure+0xd8>
   20cac:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   20cb0:	d04a      	beq.n	20d48 <uarte_nrfx_configure+0x14c>
   20cb2:	d809      	bhi.n	20cc8 <uarte_nrfx_configure+0xcc>
   20cb4:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   20cb8:	4563      	cmp	r3, ip
   20cba:	d047      	beq.n	20d4c <uarte_nrfx_configure+0x150>
   20cbc:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   20cc0:	d1ca      	bne.n	20c58 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   20cc2:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   20cc6:	e019      	b.n	20cfc <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   20cc8:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   20ccc:	d1c4      	bne.n	20c58 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   20cce:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   20cd2:	e013      	b.n	20cfc <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   20cd4:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   20cd8:	d03b      	beq.n	20d52 <uarte_nrfx_configure+0x156>
   20cda:	d809      	bhi.n	20cf0 <uarte_nrfx_configure+0xf4>
   20cdc:	f8df c098 	ldr.w	ip, [pc, #152]	; 20d78 <uarte_nrfx_configure+0x17c>
   20ce0:	4563      	cmp	r3, ip
   20ce2:	d039      	beq.n	20d58 <uarte_nrfx_configure+0x15c>
   20ce4:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   20ce8:	d1b6      	bne.n	20c58 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   20cea:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   20cee:	e005      	b.n	20cfc <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   20cf0:	f8df c088 	ldr.w	ip, [pc, #136]	; 20d7c <uarte_nrfx_configure+0x180>
   20cf4:	4563      	cmp	r3, ip
   20cf6:	d1af      	bne.n	20c58 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   20cf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   20cfc:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   20d00:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
   20d02:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
   20d04:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
   20d06:	4322      	orrs	r2, r4
   20d08:	3304      	adds	r3, #4
   20d0a:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   20d0c:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
   20d10:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   20d14:	2000      	movs	r0, #0
}
   20d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   20d18:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   20d1c:	e7ee      	b.n	20cfc <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   20d1e:	4b12      	ldr	r3, [pc, #72]	; (20d68 <uarte_nrfx_configure+0x16c>)
   20d20:	e7ec      	b.n	20cfc <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   20d22:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   20d26:	e7e9      	b.n	20cfc <uarte_nrfx_configure+0x100>
		nrf_baudrate = 0x00014000;
   20d28:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   20d2c:	e7e6      	b.n	20cfc <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   20d2e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   20d32:	e7e3      	b.n	20cfc <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   20d34:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   20d38:	e7e0      	b.n	20cfc <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   20d3a:	4b0c      	ldr	r3, [pc, #48]	; (20d6c <uarte_nrfx_configure+0x170>)
   20d3c:	e7de      	b.n	20cfc <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   20d3e:	4b0c      	ldr	r3, [pc, #48]	; (20d70 <uarte_nrfx_configure+0x174>)
   20d40:	e7dc      	b.n	20cfc <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   20d42:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   20d46:	e7d9      	b.n	20cfc <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   20d48:	4b0a      	ldr	r3, [pc, #40]	; (20d74 <uarte_nrfx_configure+0x178>)
   20d4a:	e7d7      	b.n	20cfc <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   20d4c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   20d50:	e7d4      	b.n	20cfc <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   20d52:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   20d56:	e7d1      	b.n	20cfc <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   20d58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   20d5c:	e7ce      	b.n	20cfc <uarte_nrfx_configure+0x100>
   20d5e:	bf00      	nop
   20d60:	0013b000 	.word	0x0013b000
   20d64:	004ea000 	.word	0x004ea000
   20d68:	00275000 	.word	0x00275000
   20d6c:	0075c000 	.word	0x0075c000
   20d70:	003af000 	.word	0x003af000
   20d74:	013a9000 	.word	0x013a9000
   20d78:	0003d090 	.word	0x0003d090
   20d7c:	000f4240 	.word	0x000f4240

00020d80 <uarte_nrfx_rx_enable>:
}

static int uarte_nrfx_rx_enable(const struct device *dev, uint8_t *buf,
				size_t len,
				int32_t timeout)
{
   20d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20d84:	4614      	mov	r4, r2
	return config->uarte_regs;
   20d86:	6842      	ldr	r2, [r0, #4]
{
   20d88:	4605      	mov	r5, r0
	return config->uarte_regs;
   20d8a:	6817      	ldr	r7, [r2, #0]
{
   20d8c:	4688      	mov	r8, r1
    return p_reg->PSEL.RXD;
   20d8e:	f8d7 2514 	ldr.w	r2, [r7, #1300]	; 0x514
	struct uarte_nrfx_data *data = get_dev_data(dev);
   20d92:	f8d0 9010 	ldr.w	r9, [r0, #16]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	if (nrf_uarte_rx_pin_get(uarte) == NRF_UARTE_PSEL_DISCONNECTED) {
   20d96:	3201      	adds	r2, #1
   20d98:	d112      	bne.n	20dc0 <uarte_nrfx_rx_enable+0x40>
		__ASSERT(false, "TX only UARTE instance");
   20d9a:	f240 3323 	movw	r3, #803	; 0x323
   20d9e:	4a3f      	ldr	r2, [pc, #252]	; (20e9c <uarte_nrfx_rx_enable+0x11c>)
   20da0:	493f      	ldr	r1, [pc, #252]	; (20ea0 <uarte_nrfx_rx_enable+0x120>)
   20da2:	4840      	ldr	r0, [pc, #256]	; (20ea4 <uarte_nrfx_rx_enable+0x124>)
   20da4:	f005 fcba 	bl	2671c <printk>
   20da8:	483f      	ldr	r0, [pc, #252]	; (20ea8 <uarte_nrfx_rx_enable+0x128>)
   20daa:	f005 fcb7 	bl	2671c <printk>
   20dae:	483b      	ldr	r0, [pc, #236]	; (20e9c <uarte_nrfx_rx_enable+0x11c>)
   20db0:	f240 3123 	movw	r1, #803	; 0x323
   20db4:	f005 ff57 	bl	26c66 <assert_post_action>
		return -ENOTSUP;
   20db8:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
}
   20dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		MAX(timeout / RX_TIMEOUT_DIV,
   20dc0:	2b09      	cmp	r3, #9
   20dc2:	bfc8      	it	gt
   20dc4:	2205      	movgt	r2, #5
	data->async->rx_timeout = timeout;
   20dc6:	f8d9 100c 	ldr.w	r1, [r9, #12]
   20dca:	66cb      	str	r3, [r1, #108]	; 0x6c
		MAX(timeout / RX_TIMEOUT_DIV,
   20dcc:	bfcc      	ite	gt
   20dce:	fb93 f3f2 	sdivgt	r3, r3, r2
   20dd2:	2301      	movle	r3, #1
	data->async->rx_timeout_slab =
   20dd4:	670b      	str	r3, [r1, #112]	; 0x70
	data->async->rx_offset = 0;
   20dd6:	2300      	movs	r3, #0
	data->async->rx_buf_len = len;
   20dd8:	e9c1 8414 	strd	r8, r4, [r1, #80]	; 0x50
	data->async->rx_next_buf = NULL;
   20ddc:	e9c1 3316 	strd	r3, r3, [r1, #88]	; 0x58
	data->async->rx_next_buf_len = 0;
   20de0:	660b      	str	r3, [r1, #96]	; 0x60
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   20de2:	6843      	ldr	r3, [r0, #4]
   20de4:	685b      	ldr	r3, [r3, #4]
   20de6:	06da      	lsls	r2, r3, #27
   20de8:	d524      	bpl.n	20e34 <uarte_nrfx_rx_enable+0xb4>
		if (data->async->rx_flush_cnt) {
   20dea:	f891 60c1 	ldrb.w	r6, [r1, #193]	; 0xc1
   20dee:	b30e      	cbz	r6, 20e34 <uarte_nrfx_rx_enable+0xb4>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   20df0:	42a6      	cmp	r6, r4
   20df2:	bf28      	it	cs
   20df4:	4626      	movcs	r6, r4
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
   20df6:	4640      	mov	r0, r8
   20df8:	4632      	mov	r2, r6
   20dfa:	31bc      	adds	r1, #188	; 0xbc
   20dfc:	f007 fbc9 	bl	28592 <memcpy>
			if (!len) {
   20e00:	1ba4      	subs	r4, r4, r6
			buf += cpy_len;
   20e02:	44b0      	add	r8, r6
			if (!len) {
   20e04:	d116      	bne.n	20e34 <uarte_nrfx_rx_enable+0xb4>
				data->async->rx_flush_cnt -= cpy_len;
   20e06:	f8d9 200c 	ldr.w	r2, [r9, #12]
				notify_uart_rx_rdy(dev, cpy_len);
   20e0a:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
   20e0c:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
				notify_uart_rx_rdy(dev, cpy_len);
   20e10:	4628      	mov	r0, r5
				data->async->rx_flush_cnt -= cpy_len;
   20e12:	1b9b      	subs	r3, r3, r6
   20e14:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
				notify_uart_rx_rdy(dev, cpy_len);
   20e18:	f009 fd9c 	bl	2a954 <notify_uart_rx_rdy>
				notify_rx_buf_release(dev, &data->async->rx_buf,
   20e1c:	f8d9 100c 	ldr.w	r1, [r9, #12]
   20e20:	4628      	mov	r0, r5
   20e22:	2201      	movs	r2, #1
   20e24:	3150      	adds	r1, #80	; 0x50
   20e26:	f009 fdae 	bl	2a986 <notify_rx_buf_release>
				notify_rx_disable(dev);
   20e2a:	4628      	mov	r0, r5
   20e2c:	f009 fdc5 	bl	2a9ba <notify_rx_disable>
	return 0;
   20e30:	2000      	movs	r0, #0
   20e32:	e7c3      	b.n	20dbc <uarte_nrfx_rx_enable+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20e34:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   20e36:	f8c7 8534 	str.w	r8, [r7, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   20e3a:	f8c7 4538 	str.w	r4, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20e3e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   20e42:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
	data->async->rx_enabled = true;
   20e46:	2201      	movs	r2, #1
   20e48:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
   20e4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   20e50:	f8d9 300c 	ldr.w	r3, [r9, #12]
   20e54:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   20e58:	686b      	ldr	r3, [r5, #4]
   20e5a:	685b      	ldr	r3, [r3, #4]
   20e5c:	06db      	lsls	r3, r3, #27
   20e5e:	d519      	bpl.n	20e94 <uarte_nrfx_rx_enable+0x114>
	__asm__ volatile(
   20e60:	f04f 0320 	mov.w	r3, #32
   20e64:	f3ef 8111 	mrs	r1, BASEPRI
   20e68:	f383 8811 	msr	BASEPRI, r3
   20e6c:	f3bf 8f6f 	isb	sy
	if (data->async) {
   20e70:	692b      	ldr	r3, [r5, #16]
   20e72:	68db      	ldr	r3, [r3, #12]
   20e74:	b12b      	cbz	r3, 20e82 <uarte_nrfx_rx_enable+0x102>
		data->async->low_power_mask |= mask;
   20e76:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   20e7a:	f042 0202 	orr.w	r2, r2, #2
   20e7e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   20e82:	2208      	movs	r2, #8
	return config->uarte_regs;
   20e84:	686b      	ldr	r3, [r5, #4]
   20e86:	681b      	ldr	r3, [r3, #0]
   20e88:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   20e8c:	f381 8811 	msr	BASEPRI, r1
   20e90:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20e94:	2301      	movs	r3, #1
   20e96:	603b      	str	r3, [r7, #0]
   20e98:	e7ca      	b.n	20e30 <uarte_nrfx_rx_enable+0xb0>
   20e9a:	bf00      	nop
   20e9c:	00030a27 	.word	0x00030a27
   20ea0:	0002dee4 	.word	0x0002dee4
   20ea4:	0002cfb2 	.word	0x0002cfb2
   20ea8:	00030a5b 	.word	0x00030a5b

00020eac <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20eac:	6802      	ldr	r2, [r0, #0]
{
   20eae:	b510      	push	{r4, lr}
    switch (port)
   20eb0:	0953      	lsrs	r3, r2, #5
{
   20eb2:	4604      	mov	r4, r0
    switch (port)
   20eb4:	d02b      	beq.n	20f0e <nrf_gpio_pin_port_decode+0x62>
   20eb6:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   20eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20ebc:	bf18      	it	ne
   20ebe:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   20ec0:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   20ec4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20ec6:	07db      	lsls	r3, r3, #31
   20ec8:	d40b      	bmi.n	20ee2 <nrf_gpio_pin_port_decode+0x36>
   20eca:	4913      	ldr	r1, [pc, #76]	; (20f18 <nrf_gpio_pin_port_decode+0x6c>)
   20ecc:	4813      	ldr	r0, [pc, #76]	; (20f1c <nrf_gpio_pin_port_decode+0x70>)
   20ece:	f44f 7305 	mov.w	r3, #532	; 0x214
   20ed2:	4a13      	ldr	r2, [pc, #76]	; (20f20 <nrf_gpio_pin_port_decode+0x74>)
   20ed4:	f005 fc22 	bl	2671c <printk>
   20ed8:	f44f 7105 	mov.w	r1, #532	; 0x214
   20edc:	4810      	ldr	r0, [pc, #64]	; (20f20 <nrf_gpio_pin_port_decode+0x74>)
   20ede:	f005 fec2 	bl	26c66 <assert_post_action>
    uint32_t pin_number = *p_pin;
   20ee2:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   20ee4:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20ee8:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   20eea:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20eec:	d00d      	beq.n	20f0a <nrf_gpio_pin_port_decode+0x5e>
   20eee:	2b01      	cmp	r3, #1
   20ef0:	d010      	beq.n	20f14 <nrf_gpio_pin_port_decode+0x68>
            NRFX_ASSERT(0);
   20ef2:	490c      	ldr	r1, [pc, #48]	; (20f24 <nrf_gpio_pin_port_decode+0x78>)
   20ef4:	4809      	ldr	r0, [pc, #36]	; (20f1c <nrf_gpio_pin_port_decode+0x70>)
   20ef6:	f240 2319 	movw	r3, #537	; 0x219
   20efa:	4a09      	ldr	r2, [pc, #36]	; (20f20 <nrf_gpio_pin_port_decode+0x74>)
   20efc:	f005 fc0e 	bl	2671c <printk>
   20f00:	f240 2119 	movw	r1, #537	; 0x219
   20f04:	4806      	ldr	r0, [pc, #24]	; (20f20 <nrf_gpio_pin_port_decode+0x74>)
   20f06:	f005 feae 	bl	26c66 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20f0a:	4807      	ldr	r0, [pc, #28]	; (20f28 <nrf_gpio_pin_port_decode+0x7c>)
}
   20f0c:	bd10      	pop	{r4, pc}
    switch (port)
   20f0e:	f04f 33ff 	mov.w	r3, #4294967295
   20f12:	e7d5      	b.n	20ec0 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   20f14:	4805      	ldr	r0, [pc, #20]	; (20f2c <nrf_gpio_pin_port_decode+0x80>)
   20f16:	e7f9      	b.n	20f0c <nrf_gpio_pin_port_decode+0x60>
   20f18:	00030861 	.word	0x00030861
   20f1c:	0002cfb2 	.word	0x0002cfb2
   20f20:	0003082e 	.word	0x0003082e
   20f24:	0002dee4 	.word	0x0002dee4
   20f28:	40842500 	.word	0x40842500
   20f2c:	40842800 	.word	0x40842800

00020f30 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   20f30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20f34:	4605      	mov	r5, r0
   20f36:	2200      	movs	r2, #0
   20f38:	2101      	movs	r1, #1
   20f3a:	2008      	movs	r0, #8
   20f3c:	f7f5 f936 	bl	161ac <z_arm_irq_priority_set>
   20f40:	2008      	movs	r0, #8
   20f42:	f7f5 f915 	bl	16170 <arch_irq_enable>
	return config->uarte_regs;
   20f46:	686b      	ldr	r3, [r5, #4]
   20f48:	f04f 0814 	mov.w	r8, #20
   20f4c:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   20f4e:	2300      	movs	r3, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
   20f50:	692e      	ldr	r6, [r5, #16]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   20f52:	2701      	movs	r7, #1
   20f54:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20f58:	a801      	add	r0, sp, #4
	data->dev = dev;
   20f5a:	6035      	str	r5, [r6, #0]
        nrf_gpio_pin_set(pin_number);
   20f5c:	f8cd 8004 	str.w	r8, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20f60:	f7ff ffa4 	bl	20eac <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   20f64:	f04f 0916 	mov.w	r9, #22
   20f68:	9b01      	ldr	r3, [sp, #4]
   20f6a:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
   20f6e:	6083      	str	r3, [r0, #8]
	nrf_gpio_cfg_output(config->pseltxd);
   20f70:	4640      	mov	r0, r8
   20f72:	f009 fe1e 	bl	2abb2 <nrf_gpio_cfg_output>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20f76:	a801      	add	r0, sp, #4
   20f78:	f8cd 9004 	str.w	r9, [sp, #4]
   20f7c:	f7ff ff96 	bl	20eac <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   20f80:	9b01      	ldr	r3, [sp, #4]
   20f82:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   20f86:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   20f8a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   20f8e:	f043 030c 	orr.w	r3, r3, #12
    reg->PIN_CNF[pin_number] = cnf;
   20f92:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->PSEL.TXD = pseltxd;
   20f96:	f8c4 850c 	str.w	r8, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   20f9a:	f04f 0815 	mov.w	r8, #21
   20f9e:	f8c4 9514 	str.w	r9, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20fa2:	a801      	add	r0, sp, #4
   20fa4:	f8cd 8004 	str.w	r8, [sp, #4]
   20fa8:	f7ff ff80 	bl	20eac <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   20fac:	f04f 0913 	mov.w	r9, #19
   20fb0:	9b01      	ldr	r3, [sp, #4]
   20fb2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   20fb6:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   20fba:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   20fbe:	f043 030c 	orr.w	r3, r3, #12
    reg->PIN_CNF[pin_number] = cnf;
   20fc2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20fc6:	a801      	add	r0, sp, #4
   20fc8:	f8cd 9004 	str.w	r9, [sp, #4]
   20fcc:	f7ff ff6e 	bl	20eac <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   20fd0:	9b01      	ldr	r3, [sp, #4]
   20fd2:	409f      	lsls	r7, r3
    p_reg->OUTSET = set_mask;
   20fd4:	6087      	str	r7, [r0, #8]
		nrf_gpio_cfg_output(config->pselrts);
   20fd6:	4648      	mov	r0, r9
   20fd8:	f009 fdeb 	bl	2abb2 <nrf_gpio_cfg_output>
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   20fdc:	6929      	ldr	r1, [r5, #16]
    p_reg->PSEL.RTS = pselrts;
   20fde:	f8c4 9508 	str.w	r9, [r4, #1288]	; 0x508
   20fe2:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
   20fe4:	f8c4 8510 	str.w	r8, [r4, #1296]	; 0x510
   20fe8:	3104      	adds	r1, #4
   20fea:	f7ff fe07 	bl	20bfc <uarte_nrfx_configure>
	if (err) {
   20fee:	4680      	mov	r8, r0
   20ff0:	b9b0      	cbnz	r0, 21020 <uarte_0_init+0xf0>
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   20ff2:	686b      	ldr	r3, [r5, #4]
   20ff4:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   20ff6:	0719      	lsls	r1, r3, #28
   20ff8:	d541      	bpl.n	2107e <uarte_0_init+0x14e>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   20ffa:	f106 0016 	add.w	r0, r6, #22
   20ffe:	f000 fba7 	bl	21750 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   21002:	4b50      	ldr	r3, [pc, #320]	; (21144 <uarte_0_init+0x214>)
   21004:	4298      	cmp	r0, r3
   21006:	d00f      	beq.n	21028 <uarte_0_init+0xf8>
   21008:	4b4f      	ldr	r3, [pc, #316]	; (21148 <uarte_0_init+0x218>)
   2100a:	4950      	ldr	r1, [pc, #320]	; (2114c <uarte_0_init+0x21c>)
		LOG_ERR("Failed to allocate PPI Channel");
   2100c:	4850      	ldr	r0, [pc, #320]	; (21150 <uarte_0_init+0x220>)
   2100e:	1ac9      	subs	r1, r1, r3
   21010:	08c9      	lsrs	r1, r1, #3
   21012:	0189      	lsls	r1, r1, #6
   21014:	f041 0101 	orr.w	r1, r1, #1
   21018:	f005 fe8a 	bl	26d30 <log_0>
		return -EIO;
   2101c:	f06f 0804 	mvn.w	r8, #4
UART_NRF_UARTE_DEVICE(0);
   21020:	4640      	mov	r0, r8
   21022:	b003      	add	sp, #12
   21024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   21028:	f514 7990 	adds.w	r9, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   2102c:	7db7      	ldrb	r7, [r6, #22]
   2102e:	d10b      	bne.n	21048 <uarte_0_init+0x118>
   21030:	4948      	ldr	r1, [pc, #288]	; (21154 <uarte_0_init+0x224>)
   21032:	4849      	ldr	r0, [pc, #292]	; (21158 <uarte_0_init+0x228>)
   21034:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
   21038:	4a48      	ldr	r2, [pc, #288]	; (2115c <uarte_0_init+0x22c>)
   2103a:	f005 fb6f 	bl	2671c <printk>
   2103e:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
   21042:	4846      	ldr	r0, [pc, #280]	; (2115c <uarte_0_init+0x22c>)
   21044:	f005 fe0f 	bl	26c66 <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   21048:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   2104c:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   21050:	f8c9 7080 	str.w	r7, [r9, #128]	; 0x80
    NRFX_ASSERT(tep);
   21054:	d10b      	bne.n	2106e <uarte_0_init+0x13e>
   21056:	4942      	ldr	r1, [pc, #264]	; (21160 <uarte_0_init+0x230>)
   21058:	483f      	ldr	r0, [pc, #252]	; (21158 <uarte_0_init+0x228>)
   2105a:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
   2105e:	4a3f      	ldr	r2, [pc, #252]	; (2115c <uarte_0_init+0x22c>)
   21060:	f005 fb5c 	bl	2671c <printk>
   21064:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   21068:	483c      	ldr	r0, [pc, #240]	; (2115c <uarte_0_init+0x22c>)
   2106a:	f005 fdfc 	bl	26c66 <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   2106e:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   21070:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
   21074:	7db2      	ldrb	r2, [r6, #22]
   21076:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   21078:	4a3a      	ldr	r2, [pc, #232]	; (21164 <uarte_0_init+0x234>)
   2107a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   2107e:	68f3      	ldr	r3, [r6, #12]
   21080:	2b00      	cmp	r3, #0
   21082:	d04f      	beq.n	21124 <uarte_0_init+0x1f4>
    p_reg->INTENSET = mask;
   21084:	2204      	movs	r2, #4
	return config->uarte_regs;
   21086:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   21088:	692f      	ldr	r7, [r5, #16]
	return config->uarte_regs;
   2108a:	681b      	ldr	r3, [r3, #0]
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   2108c:	68f8      	ldr	r0, [r7, #12]
   2108e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   21092:	2201      	movs	r2, #1
   21094:	4934      	ldr	r1, [pc, #208]	; (21168 <uarte_0_init+0x238>)
   21096:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
   2109a:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2109e:	2108      	movs	r1, #8
   210a0:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   210a4:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   210a8:	b1a1      	cbz	r1, 210d4 <uarte_0_init+0x1a4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   210aa:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   210ac:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   210b0:	b91a      	cbnz	r2, 210ba <uarte_0_init+0x18a>
   210b2:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   210b6:	2a00      	cmp	r2, #0
   210b8:	d0f8      	beq.n	210ac <uarte_0_init+0x17c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   210ba:	2200      	movs	r2, #0
   210bc:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   210c0:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   210c4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   210c8:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   210cc:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   210d0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   210d4:	2200      	movs	r2, #0
   210d6:	4925      	ldr	r1, [pc, #148]	; (2116c <uarte_0_init+0x23c>)
   210d8:	3078      	adds	r0, #120	; 0x78
   210da:	f00a fd48 	bl	2bb6e <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   210de:	68fb      	ldr	r3, [r7, #12]
	timer->user_data = user_data;
   210e0:	f8c3 70ac 	str.w	r7, [r3, #172]	; 0xac
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   210e4:	68f8      	ldr	r0, [r7, #12]
   210e6:	2200      	movs	r2, #0
   210e8:	4921      	ldr	r1, [pc, #132]	; (21170 <uarte_0_init+0x240>)
   210ea:	3018      	adds	r0, #24
   210ec:	f00a fd3f 	bl	2bb6e <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   210f0:	68fb      	ldr	r3, [r7, #12]
   210f2:	64df      	str	r7, [r3, #76]	; 0x4c
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   210f4:	686b      	ldr	r3, [r5, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   210f6:	3614      	adds	r6, #20
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   210f8:	685b      	ldr	r3, [r3, #4]
   210fa:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   210fc:	bf5c      	itt	pl
   210fe:	f44f 7280 	movpl.w	r2, #256	; 0x100
   21102:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   21106:	06db      	lsls	r3, r3, #27
   21108:	bf44      	itt	mi
   2110a:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   2110e:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   21112:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   21114:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   21118:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2111c:	2301      	movs	r3, #1
   2111e:	60a3      	str	r3, [r4, #8]
   21120:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   21122:	e77d      	b.n	21020 <uarte_0_init+0xf0>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   21124:	2208      	movs	r2, #8
   21126:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2112a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   2112e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   21132:	f106 0315 	add.w	r3, r6, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   21136:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2113a:	2301      	movs	r3, #1
   2113c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21140:	6023      	str	r3, [r4, #0]
}
   21142:	e7d7      	b.n	210f4 <uarte_0_init+0x1c4>
   21144:	0bad0000 	.word	0x0bad0000
   21148:	0002bfe4 	.word	0x0002bfe4
   2114c:	0002c0fc 	.word	0x0002c0fc
   21150:	00030a74 	.word	0x00030a74
   21154:	00030acb 	.word	0x00030acb
   21158:	0002cfb2 	.word	0x0002cfb2
   2115c:	00030a93 	.word	0x00030a93
   21160:	00030acf 	.word	0x00030acf
   21164:	40017000 	.word	0x40017000
   21168:	000a0210 	.word	0x000a0210
   2116c:	0002aa71 	.word	0x0002aa71
   21170:	0002abfb 	.word	0x0002abfb

00021174 <uarte_nrfx_poll_out>:
{
   21174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21176:	4604      	mov	r4, r0
   21178:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2117a:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2117c:	f00a fbea 	bl	2b954 <k_is_in_isr>
   21180:	b910      	cbnz	r0, 21188 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   21182:	4b28      	ldr	r3, [pc, #160]	; (21224 <uarte_nrfx_poll_out+0xb0>)
	if (isr_mode) {
   21184:	781b      	ldrb	r3, [r3, #0]
   21186:	bb5b      	cbnz	r3, 211e0 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   21188:	f04f 0320 	mov.w	r3, #32
   2118c:	f3ef 8111 	mrs	r1, BASEPRI
   21190:	f383 8811 	msr	BASEPRI, r3
   21194:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   21198:	4620      	mov	r0, r4
			key = irq_lock();
   2119a:	460d      	mov	r5, r1
			if (is_tx_ready(dev)) {
   2119c:	f009 fbc3 	bl	2a926 <is_tx_ready>
   211a0:	b1c8      	cbz	r0, 211d6 <uarte_nrfx_poll_out+0x62>
				if (data->async && data->async->tx_size &&
   211a2:	68f3      	ldr	r3, [r6, #12]
   211a4:	b15b      	cbz	r3, 211be <uarte_nrfx_poll_out+0x4a>
   211a6:	68da      	ldr	r2, [r3, #12]
   211a8:	b14a      	cbz	r2, 211be <uarte_nrfx_poll_out+0x4a>
					data->async->tx_amount < 0) {
   211aa:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
				if (data->async && data->async->tx_size &&
   211ae:	2a00      	cmp	r2, #0
   211b0:	da05      	bge.n	211be <uarte_nrfx_poll_out+0x4a>
	return config->uarte_regs;
   211b2:	6862      	ldr	r2, [r4, #4]
   211b4:	6812      	ldr	r2, [r2, #0]
    return p_reg->TXD.AMOUNT;
   211b6:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   211ba:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	data->char_out = c;
   211be:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   211c0:	2201      	movs	r2, #1
   211c2:	4620      	mov	r0, r4
	data->char_out = c;
   211c4:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   211c8:	f009 fd3c 	bl	2ac44 <tx_start>
	__asm__ volatile(
   211cc:	f385 8811 	msr	BASEPRI, r5
   211d0:	f3bf 8f6f 	isb	sy
}
   211d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   211d6:	f381 8811 	msr	BASEPRI, r1
   211da:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   211de:	e7d3      	b.n	21188 <uarte_nrfx_poll_out+0x14>
{
   211e0:	2564      	movs	r5, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   211e2:	4620      	mov	r0, r4
   211e4:	f009 fb9f 	bl	2a926 <is_tx_ready>
   211e8:	b948      	cbnz	r0, 211fe <uarte_nrfx_poll_out+0x8a>
   211ea:	2001      	movs	r0, #1
   211ec:	f009 ff47 	bl	2b07e <nrfx_busy_wait>
   211f0:	3d01      	subs	r5, #1
   211f2:	d1f6      	bne.n	211e2 <uarte_nrfx_poll_out+0x6e>
	return z_impl_k_sleep(timeout);
   211f4:	2100      	movs	r1, #0
   211f6:	2021      	movs	r0, #33	; 0x21
   211f8:	f004 f810 	bl	2521c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   211fc:	e7f0      	b.n	211e0 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   211fe:	f04f 0320 	mov.w	r3, #32
   21202:	f3ef 8511 	mrs	r5, BASEPRI
   21206:	f383 8811 	msr	BASEPRI, r3
   2120a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2120e:	4620      	mov	r0, r4
   21210:	f009 fb89 	bl	2a926 <is_tx_ready>
   21214:	2800      	cmp	r0, #0
   21216:	d1d2      	bne.n	211be <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   21218:	f385 8811 	msr	BASEPRI, r5
   2121c:	f3bf 8f6f 	isb	sy
}
   21220:	e7e8      	b.n	211f4 <uarte_nrfx_poll_out+0x80>
   21222:	bf00      	nop
   21224:	2000a92f 	.word	0x2000a92f

00021228 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   21228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2122a:	460f      	mov	r7, r1
   2122c:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
   2122e:	b948      	cbnz	r0, 21244 <entropy_cc3xx_rng_get_entropy+0x1c>
   21230:	4918      	ldr	r1, [pc, #96]	; (21294 <entropy_cc3xx_rng_get_entropy+0x6c>)
   21232:	4819      	ldr	r0, [pc, #100]	; (21298 <entropy_cc3xx_rng_get_entropy+0x70>)
   21234:	2326      	movs	r3, #38	; 0x26
   21236:	4a19      	ldr	r2, [pc, #100]	; (2129c <entropy_cc3xx_rng_get_entropy+0x74>)
   21238:	f005 fa70 	bl	2671c <printk>
   2123c:	2126      	movs	r1, #38	; 0x26
   2123e:	4817      	ldr	r0, [pc, #92]	; (2129c <entropy_cc3xx_rng_get_entropy+0x74>)
   21240:	f005 fd11 	bl	26c66 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   21244:	b94f      	cbnz	r7, 2125a <entropy_cc3xx_rng_get_entropy+0x32>
   21246:	4916      	ldr	r1, [pc, #88]	; (212a0 <entropy_cc3xx_rng_get_entropy+0x78>)
   21248:	4813      	ldr	r0, [pc, #76]	; (21298 <entropy_cc3xx_rng_get_entropy+0x70>)
   2124a:	2327      	movs	r3, #39	; 0x27
   2124c:	4a13      	ldr	r2, [pc, #76]	; (2129c <entropy_cc3xx_rng_get_entropy+0x74>)
   2124e:	f005 fa65 	bl	2671c <printk>
   21252:	2127      	movs	r1, #39	; 0x27
   21254:	4811      	ldr	r0, [pc, #68]	; (2129c <entropy_cc3xx_rng_get_entropy+0x74>)
   21256:	f005 fd06 	bl	26c66 <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2125a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   2125e:	2400      	movs	r4, #0
   21260:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   21264:	42a6      	cmp	r6, r4
   21266:	d801      	bhi.n	2126c <entropy_cc3xx_rng_get_entropy+0x44>
		offset += chunk_size;
	}
#endif

	return res;
}
   21268:	b003      	add	sp, #12
   2126a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2126c:	1b33      	subs	r3, r6, r4
   2126e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   21272:	bf38      	it	cc
   21274:	461d      	movcc	r5, r3
			res = spm_request_random_number(buffer + offset,
   21276:	aa01      	add	r2, sp, #4
   21278:	4629      	mov	r1, r5
   2127a:	1938      	adds	r0, r7, r4
   2127c:	f006 fc76 	bl	27b6c <spm_request_random_number>
		if (olen != chunk_size) {
   21280:	9b01      	ldr	r3, [sp, #4]
   21282:	42ab      	cmp	r3, r5
   21284:	d103      	bne.n	2128e <entropy_cc3xx_rng_get_entropy+0x66>
		if (res != 0) {
   21286:	2800      	cmp	r0, #0
   21288:	d1ee      	bne.n	21268 <entropy_cc3xx_rng_get_entropy+0x40>
		offset += chunk_size;
   2128a:	442c      	add	r4, r5
   2128c:	e7ea      	b.n	21264 <entropy_cc3xx_rng_get_entropy+0x3c>
			return -EINVAL;
   2128e:	f06f 0015 	mvn.w	r0, #21
   21292:	e7e9      	b.n	21268 <entropy_cc3xx_rng_get_entropy+0x40>
   21294:	00030b13 	.word	0x00030b13
   21298:	0002cfb2 	.word	0x0002cfb2
   2129c:	00030ae3 	.word	0x00030ae3
   212a0:	00030b26 	.word	0x00030b26

000212a4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   212a4:	b508      	push	{r3, lr}
	z_impl_log_panic();
   212a6:	f7f1 fcad 	bl	12c04 <z_impl_log_panic>
   212aa:	4b06      	ldr	r3, [pc, #24]	; (212c4 <k_sys_fatal_error_handler+0x20>)
   212ac:	4906      	ldr	r1, [pc, #24]	; (212c8 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   212ae:	4807      	ldr	r0, [pc, #28]	; (212cc <k_sys_fatal_error_handler+0x28>)
   212b0:	1ac9      	subs	r1, r1, r3
   212b2:	08c9      	lsrs	r1, r1, #3
   212b4:	0189      	lsls	r1, r1, #6
   212b6:	f041 0101 	orr.w	r1, r1, #1
   212ba:	f005 fd39 	bl	26d30 <log_0>
		sys_arch_reboot(0);
   212be:	2000      	movs	r0, #0
   212c0:	f7f5 faf6 	bl	168b0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   212c4:	0002bfe4 	.word	0x0002bfe4
   212c8:	0002c07c 	.word	0x0002c07c
   212cc:	00030b4a 	.word	0x00030b4a

000212d0 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   212d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   212d4:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   212d6:	4c21      	ldr	r4, [pc, #132]	; (2135c <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   212d8:	4e21      	ldr	r6, [pc, #132]	; (21360 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   212da:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   212de:	f8df 9088 	ldr.w	r9, [pc, #136]	; 21368 <check_ext_api_requests+0x98>
{
   212e2:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   212e4:	45a8      	cmp	r8, r5
   212e6:	d803      	bhi.n	212f0 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   212e8:	2000      	movs	r0, #0
   212ea:	b005      	add	sp, #20
   212ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   212f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   212f2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   212f6:	681f      	ldr	r7, [r3, #0]
   212f8:	ab01      	add	r3, sp, #4
   212fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   212fe:	220c      	movs	r2, #12
   21300:	4619      	mov	r1, r3
   21302:	4638      	mov	r0, r7
   21304:	f007 f935 	bl	28572 <memcmp>
   21308:	b990      	cbnz	r0, 21330 <check_ext_api_requests+0x60>
   2130a:	b18f      	cbz	r7, 21330 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   2130c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   2130e:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   21310:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   21312:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   21314:	4291      	cmp	r1, r2
   21316:	d10b      	bne.n	21330 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   21318:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   2131a:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   2131c:	4291      	cmp	r1, r2
   2131e:	d807      	bhi.n	21330 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   21320:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   21322:	4291      	cmp	r1, r2
   21324:	d904      	bls.n	21330 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   21326:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   21328:	695b      	ldr	r3, [r3, #20]
   2132a:	ea32 0303 	bics.w	r3, r2, r3
   2132e:	d00a      	beq.n	21346 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   21330:	6a27      	ldr	r7, [r4, #32]
   21332:	b167      	cbz	r7, 2134e <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   21334:	480b      	ldr	r0, [pc, #44]	; (21364 <check_ext_api_requests+0x94>)
   21336:	f005 f9f1 	bl	2671c <printk>
			k_panic();
   2133a:	4040      	eors	r0, r0
   2133c:	f380 8811 	msr	BASEPRI, r0
   21340:	f04f 0004 	mov.w	r0, #4
   21344:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   21346:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   21348:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   2134a:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2134c:	e7ca      	b.n	212e4 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   2134e:	4648      	mov	r0, r9
   21350:	f005 f9e4 	bl	2671c <printk>
			*ext_api_req->ext_api = NULL;
   21354:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21356:	601f      	str	r7, [r3, #0]
   21358:	e7f5      	b.n	21346 <check_ext_api_requests+0x76>
   2135a:	bf00      	nop
   2135c:	0001023c 	.word	0x0001023c
   21360:	0002c1d0 	.word	0x0002c1d0
   21364:	00030b67 	.word	0x00030b67
   21368:	00030b90 	.word	0x00030b90

0002136c <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   2136c:	4b04      	ldr	r3, [pc, #16]	; (21380 <SystemCoreClockUpdate+0x14>)
   2136e:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   21372:	4b04      	ldr	r3, [pc, #16]	; (21384 <SystemCoreClockUpdate+0x18>)
   21374:	f002 0203 	and.w	r2, r2, #3
   21378:	40d3      	lsrs	r3, r2
   2137a:	4a03      	ldr	r2, [pc, #12]	; (21388 <SystemCoreClockUpdate+0x1c>)
   2137c:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   2137e:	4770      	bx	lr
   21380:	40005000 	.word	0x40005000
   21384:	07a12000 	.word	0x07a12000
   21388:	20008330 	.word	0x20008330

0002138c <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
   2138c:	b508      	push	{r3, lr}
   2138e:	2803      	cmp	r0, #3
   21390:	d827      	bhi.n	213e2 <nrf_clock_is_running.constprop.0+0x56>
   21392:	e8df f000 	tbb	[pc, r0]
   21396:	0e02      	.short	0x0e02
   21398:	2218      	.short	0x2218
            if (p_clk_src != NULL)
   2139a:	4a19      	ldr	r2, [pc, #100]	; (21400 <nrf_clock_is_running.constprop.0+0x74>)
   2139c:	b121      	cbz	r1, 213a8 <nrf_clock_is_running.constprop.0+0x1c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2139e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   213a2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   213a6:	700b      	strb	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   213a8:	f8d2 0418 	ldr.w	r0, [r2, #1048]	; 0x418
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   213ac:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
   213b0:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
   213b2:	4a13      	ldr	r2, [pc, #76]	; (21400 <nrf_clock_is_running.constprop.0+0x74>)
   213b4:	b121      	cbz	r1, 213c0 <nrf_clock_is_running.constprop.0+0x34>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   213b6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
   213ba:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   213be:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   213c0:	f8d2 040c 	ldr.w	r0, [r2, #1036]	; 0x40c
   213c4:	e7f2      	b.n	213ac <nrf_clock_is_running.constprop.0+0x20>
            if (p_clk_src != NULL)
   213c6:	4a0e      	ldr	r2, [pc, #56]	; (21400 <nrf_clock_is_running.constprop.0+0x74>)
   213c8:	b121      	cbz	r1, 213d4 <nrf_clock_is_running.constprop.0+0x48>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   213ca:	f8d2 345c 	ldr.w	r3, [r2, #1116]	; 0x45c
   213ce:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   213d2:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   213d4:	f8d2 045c 	ldr.w	r0, [r2, #1116]	; 0x45c
   213d8:	e7e8      	b.n	213ac <nrf_clock_is_running.constprop.0+0x20>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   213da:	4b09      	ldr	r3, [pc, #36]	; (21400 <nrf_clock_is_running.constprop.0+0x74>)
   213dc:	f8d3 0454 	ldr.w	r0, [r3, #1108]	; 0x454
   213e0:	e7e4      	b.n	213ac <nrf_clock_is_running.constprop.0+0x20>
            NRFX_ASSERT(0);
   213e2:	f44f 734f 	mov.w	r3, #828	; 0x33c
   213e6:	4a07      	ldr	r2, [pc, #28]	; (21404 <nrf_clock_is_running.constprop.0+0x78>)
   213e8:	4907      	ldr	r1, [pc, #28]	; (21408 <nrf_clock_is_running.constprop.0+0x7c>)
   213ea:	4808      	ldr	r0, [pc, #32]	; (2140c <nrf_clock_is_running.constprop.0+0x80>)
   213ec:	f005 f996 	bl	2671c <printk>
   213f0:	4804      	ldr	r0, [pc, #16]	; (21404 <nrf_clock_is_running.constprop.0+0x78>)
   213f2:	f44f 714f 	mov.w	r1, #828	; 0x33c
   213f6:	f005 fc36 	bl	26c66 <assert_post_action>
            return false;
   213fa:	2000      	movs	r0, #0
   213fc:	e7d8      	b.n	213b0 <nrf_clock_is_running.constprop.0+0x24>
   213fe:	bf00      	nop
   21400:	40005000 	.word	0x40005000
   21404:	00030bc3 	.word	0x00030bc3
   21408:	0002dee4 	.word	0x0002dee4
   2140c:	0002cfb2 	.word	0x0002cfb2

00021410 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   21410:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   21412:	4604      	mov	r4, r0
   21414:	b948      	cbnz	r0, 2142a <nrfx_clock_init+0x1a>
   21416:	490a      	ldr	r1, [pc, #40]	; (21440 <nrfx_clock_init+0x30>)
   21418:	480a      	ldr	r0, [pc, #40]	; (21444 <nrfx_clock_init+0x34>)
   2141a:	23b5      	movs	r3, #181	; 0xb5
   2141c:	4a0a      	ldr	r2, [pc, #40]	; (21448 <nrfx_clock_init+0x38>)
   2141e:	f005 f97d 	bl	2671c <printk>
   21422:	21b5      	movs	r1, #181	; 0xb5
   21424:	4808      	ldr	r0, [pc, #32]	; (21448 <nrfx_clock_init+0x38>)
   21426:	f005 fc1e 	bl	26c66 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   2142a:	4b08      	ldr	r3, [pc, #32]	; (2144c <nrfx_clock_init+0x3c>)
   2142c:	791a      	ldrb	r2, [r3, #4]
   2142e:	b922      	cbnz	r2, 2143a <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   21430:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   21432:	4807      	ldr	r0, [pc, #28]	; (21450 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
   21434:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   21436:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   21438:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   2143a:	4806      	ldr	r0, [pc, #24]	; (21454 <nrfx_clock_init+0x44>)
    return err_code;
   2143c:	e7fc      	b.n	21438 <nrfx_clock_init+0x28>
   2143e:	bf00      	nop
   21440:	00030c34 	.word	0x00030c34
   21444:	0002cfb2 	.word	0x0002cfb2
   21448:	00030bf7 	.word	0x00030bf7
   2144c:	20009a68 	.word	0x20009a68
   21450:	0bad0000 	.word	0x0bad0000
   21454:	0bad000c 	.word	0x0bad000c

00021458 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   21458:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2145a:	4b0d      	ldr	r3, [pc, #52]	; (21490 <nrfx_clock_enable+0x38>)
   2145c:	791b      	ldrb	r3, [r3, #4]
   2145e:	b94b      	cbnz	r3, 21474 <nrfx_clock_enable+0x1c>
   21460:	490c      	ldr	r1, [pc, #48]	; (21494 <nrfx_clock_enable+0x3c>)
   21462:	480d      	ldr	r0, [pc, #52]	; (21498 <nrfx_clock_enable+0x40>)
   21464:	23ce      	movs	r3, #206	; 0xce
   21466:	4a0d      	ldr	r2, [pc, #52]	; (2149c <nrfx_clock_enable+0x44>)
   21468:	f005 f958 	bl	2671c <printk>
   2146c:	21ce      	movs	r1, #206	; 0xce
   2146e:	480b      	ldr	r0, [pc, #44]	; (2149c <nrfx_clock_enable+0x44>)
   21470:	f005 fbf9 	bl	26c66 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   21474:	2005      	movs	r0, #5
   21476:	f7f4 fe8b 	bl	16190 <arch_irq_is_enabled>
   2147a:	b910      	cbnz	r0, 21482 <nrfx_clock_enable+0x2a>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2147c:	2005      	movs	r0, #5
   2147e:	f7f4 fe77 	bl	16170 <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   21482:	2201      	movs	r2, #1
   21484:	4b06      	ldr	r3, [pc, #24]	; (214a0 <nrfx_clock_enable+0x48>)
   21486:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   2148a:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   2148e:	bd08      	pop	{r3, pc}
   21490:	20009a68 	.word	0x20009a68
   21494:	00030c42 	.word	0x00030c42
   21498:	0002cfb2 	.word	0x0002cfb2
   2149c:	00030bf7 	.word	0x00030bf7
   214a0:	40005000 	.word	0x40005000

000214a4 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   214a4:	4b30      	ldr	r3, [pc, #192]	; (21568 <nrfx_clock_start+0xc4>)
{
   214a6:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   214a8:	791b      	ldrb	r3, [r3, #4]
{
   214aa:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   214ac:	b95b      	cbnz	r3, 214c6 <nrfx_clock_start+0x22>
   214ae:	492f      	ldr	r1, [pc, #188]	; (2156c <nrfx_clock_start+0xc8>)
   214b0:	482f      	ldr	r0, [pc, #188]	; (21570 <nrfx_clock_start+0xcc>)
   214b2:	f44f 7385 	mov.w	r3, #266	; 0x10a
   214b6:	4a2f      	ldr	r2, [pc, #188]	; (21574 <nrfx_clock_start+0xd0>)
   214b8:	f005 f930 	bl	2671c <printk>
   214bc:	f44f 7185 	mov.w	r1, #266	; 0x10a
   214c0:	482c      	ldr	r0, [pc, #176]	; (21574 <nrfx_clock_start+0xd0>)
   214c2:	f005 fbd0 	bl	26c66 <assert_post_action>
    switch (domain)
   214c6:	2c03      	cmp	r4, #3
   214c8:	d840      	bhi.n	2154c <nrfx_clock_start+0xa8>
   214ca:	e8df f004 	tbb	[pc, r4]
   214ce:	1d02      	.short	0x1d02
   214d0:	3327      	.short	0x3327
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   214d2:	2000      	movs	r0, #0
   214d4:	f10d 0107 	add.w	r1, sp, #7
   214d8:	f7ff ff58 	bl	2138c <nrf_clock_is_running.constprop.0>
   214dc:	4b26      	ldr	r3, [pc, #152]	; (21578 <nrfx_clock_start+0xd4>)
   214de:	b188      	cbz	r0, 21504 <nrfx_clock_start+0x60>
   214e0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   214e4:	2a02      	cmp	r2, #2
   214e6:	d10d      	bne.n	21504 <nrfx_clock_start+0x60>
    p_reg->LFCLKSRC = (uint32_t)(source);
   214e8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   214ec:	2200      	movs	r2, #0
   214ee:	4b23      	ldr	r3, [pc, #140]	; (2157c <nrfx_clock_start+0xd8>)
   214f0:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   214f2:	2202      	movs	r2, #2
   214f4:	681b      	ldr	r3, [r3, #0]
   214f6:	4b20      	ldr	r3, [pc, #128]	; (21578 <nrfx_clock_start+0xd4>)
   214f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   214fc:	2201      	movs	r2, #1
   214fe:	609a      	str	r2, [r3, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   21500:	b002      	add	sp, #8
   21502:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   21504:	2201      	movs	r2, #1
   21506:	e7ef      	b.n	214e8 <nrfx_clock_start+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21508:	2200      	movs	r2, #0
   2150a:	4b1d      	ldr	r3, [pc, #116]	; (21580 <nrfx_clock_start+0xdc>)
   2150c:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   2150e:	2201      	movs	r2, #1
   21510:	681b      	ldr	r3, [r3, #0]
   21512:	4b19      	ldr	r3, [pc, #100]	; (21578 <nrfx_clock_start+0xd4>)
   21514:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21518:	601a      	str	r2, [r3, #0]
}
   2151a:	e7f1      	b.n	21500 <nrfx_clock_start+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2151c:	2200      	movs	r2, #0
   2151e:	4b19      	ldr	r3, [pc, #100]	; (21584 <nrfx_clock_start+0xe0>)
   21520:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   21522:	f44f 7200 	mov.w	r2, #512	; 0x200
   21526:	681b      	ldr	r3, [r3, #0]
   21528:	4b13      	ldr	r3, [pc, #76]	; (21578 <nrfx_clock_start+0xd4>)
   2152a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2152e:	2201      	movs	r2, #1
   21530:	621a      	str	r2, [r3, #32]
}
   21532:	e7e5      	b.n	21500 <nrfx_clock_start+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21534:	2200      	movs	r2, #0
   21536:	4b14      	ldr	r3, [pc, #80]	; (21588 <nrfx_clock_start+0xe4>)
   21538:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   2153a:	f44f 7280 	mov.w	r2, #256	; 0x100
   2153e:	681b      	ldr	r3, [r3, #0]
   21540:	4b0d      	ldr	r3, [pc, #52]	; (21578 <nrfx_clock_start+0xd4>)
   21542:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21546:	2201      	movs	r2, #1
   21548:	619a      	str	r2, [r3, #24]
}
   2154a:	e7d9      	b.n	21500 <nrfx_clock_start+0x5c>
            NRFX_ASSERT(0);
   2154c:	f44f 739e 	mov.w	r3, #316	; 0x13c
   21550:	4a08      	ldr	r2, [pc, #32]	; (21574 <nrfx_clock_start+0xd0>)
   21552:	490e      	ldr	r1, [pc, #56]	; (2158c <nrfx_clock_start+0xe8>)
   21554:	4806      	ldr	r0, [pc, #24]	; (21570 <nrfx_clock_start+0xcc>)
   21556:	f005 f8e1 	bl	2671c <printk>
   2155a:	f44f 719e 	mov.w	r1, #316	; 0x13c
   2155e:	4805      	ldr	r0, [pc, #20]	; (21574 <nrfx_clock_start+0xd0>)
   21560:	f005 fb81 	bl	26c66 <assert_post_action>
}
   21564:	e7cc      	b.n	21500 <nrfx_clock_start+0x5c>
   21566:	bf00      	nop
   21568:	20009a68 	.word	0x20009a68
   2156c:	00030c42 	.word	0x00030c42
   21570:	0002cfb2 	.word	0x0002cfb2
   21574:	00030bf7 	.word	0x00030bf7
   21578:	40005000 	.word	0x40005000
   2157c:	40005104 	.word	0x40005104
   21580:	40005100 	.word	0x40005100
   21584:	40005124 	.word	0x40005124
   21588:	40005120 	.word	0x40005120
   2158c:	0002dee4 	.word	0x0002dee4

00021590 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21590:	4b3a      	ldr	r3, [pc, #232]	; (2167c <nrfx_clock_stop+0xec>)
{
   21592:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21594:	791b      	ldrb	r3, [r3, #4]
{
   21596:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   21598:	b95b      	cbnz	r3, 215b2 <nrfx_clock_stop+0x22>
   2159a:	4939      	ldr	r1, [pc, #228]	; (21680 <nrfx_clock_stop+0xf0>)
   2159c:	4839      	ldr	r0, [pc, #228]	; (21684 <nrfx_clock_stop+0xf4>)
   2159e:	f240 1343 	movw	r3, #323	; 0x143
   215a2:	4a39      	ldr	r2, [pc, #228]	; (21688 <nrfx_clock_stop+0xf8>)
   215a4:	f005 f8ba 	bl	2671c <printk>
   215a8:	f240 1143 	movw	r1, #323	; 0x143
   215ac:	4836      	ldr	r0, [pc, #216]	; (21688 <nrfx_clock_stop+0xf8>)
   215ae:	f005 fb5a 	bl	26c66 <assert_post_action>
    switch (domain)
   215b2:	2c03      	cmp	r4, #3
   215b4:	d854      	bhi.n	21660 <nrfx_clock_stop+0xd0>
   215b6:	e8df f004 	tbb	[pc, r4]
   215ba:	1c02      	.short	0x1c02
   215bc:	473b      	.short	0x473b
    p_reg->INTENCLR = mask;
   215be:	2202      	movs	r2, #2
   215c0:	4b32      	ldr	r3, [pc, #200]	; (2168c <nrfx_clock_stop+0xfc>)
   215c2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   215c6:	2200      	movs	r2, #0
   215c8:	f503 7382 	add.w	r3, r3, #260	; 0x104
   215cc:	601a      	str	r2, [r3, #0]
   215ce:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   215d0:	4b2f      	ldr	r3, [pc, #188]	; (21690 <nrfx_clock_stop+0x100>)
   215d2:	2201      	movs	r2, #1
    }

    bool stopped;
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   215d4:	f242 7510 	movw	r5, #10000	; 0x2710
   215d8:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   215da:	2100      	movs	r1, #0
   215dc:	4620      	mov	r0, r4
   215de:	f7ff fed5 	bl	2138c <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   215e2:	2800      	cmp	r0, #0
   215e4:	d048      	beq.n	21678 <nrfx_clock_stop+0xe8>
   215e6:	2001      	movs	r0, #1
   215e8:	f009 fd49 	bl	2b07e <nrfx_busy_wait>
   215ec:	3d01      	subs	r5, #1
   215ee:	d1f4      	bne.n	215da <nrfx_clock_stop+0x4a>
   215f0:	e042      	b.n	21678 <nrfx_clock_stop+0xe8>
    p_reg->INTENCLR = mask;
   215f2:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   215f4:	2100      	movs	r1, #0
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   215f6:	f242 7410 	movw	r4, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   215fa:	4a24      	ldr	r2, [pc, #144]	; (2168c <nrfx_clock_stop+0xfc>)
   215fc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21600:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   21604:	f502 7280 	add.w	r2, r2, #256	; 0x100
   21608:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2160a:	4a22      	ldr	r2, [pc, #136]	; (21694 <nrfx_clock_stop+0x104>)
   2160c:	6013      	str	r3, [r2, #0]
   2160e:	f88d 3007 	strb.w	r3, [sp, #7]
   21612:	2001      	movs	r0, #1
   21614:	f10d 0107 	add.w	r1, sp, #7
   21618:	f7ff feb8 	bl	2138c <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   2161c:	b360      	cbz	r0, 21678 <nrfx_clock_stop+0xe8>
   2161e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   21622:	2801      	cmp	r0, #1
   21624:	d128      	bne.n	21678 <nrfx_clock_stop+0xe8>
   21626:	f009 fd2a 	bl	2b07e <nrfx_busy_wait>
   2162a:	3c01      	subs	r4, #1
   2162c:	d1f1      	bne.n	21612 <nrfx_clock_stop+0x82>
   2162e:	e023      	b.n	21678 <nrfx_clock_stop+0xe8>
    p_reg->INTENCLR = mask;
   21630:	f44f 7200 	mov.w	r2, #512	; 0x200
   21634:	4b15      	ldr	r3, [pc, #84]	; (2168c <nrfx_clock_stop+0xfc>)
   21636:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2163a:	2200      	movs	r2, #0
   2163c:	f503 7392 	add.w	r3, r3, #292	; 0x124
   21640:	601a      	str	r2, [r3, #0]
   21642:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21644:	4b14      	ldr	r3, [pc, #80]	; (21698 <nrfx_clock_stop+0x108>)
   21646:	e7c4      	b.n	215d2 <nrfx_clock_stop+0x42>
    p_reg->INTENCLR = mask;
   21648:	f44f 7280 	mov.w	r2, #256	; 0x100
   2164c:	4b0f      	ldr	r3, [pc, #60]	; (2168c <nrfx_clock_stop+0xfc>)
   2164e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21652:	2200      	movs	r2, #0
   21654:	f503 7390 	add.w	r3, r3, #288	; 0x120
   21658:	601a      	str	r2, [r3, #0]
   2165a:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2165c:	4b0f      	ldr	r3, [pc, #60]	; (2169c <nrfx_clock_stop+0x10c>)
   2165e:	e7b8      	b.n	215d2 <nrfx_clock_stop+0x42>
            NRFX_ASSERT(0);
   21660:	490f      	ldr	r1, [pc, #60]	; (216a0 <nrfx_clock_stop+0x110>)
   21662:	4808      	ldr	r0, [pc, #32]	; (21684 <nrfx_clock_stop+0xf4>)
   21664:	f240 135f 	movw	r3, #351	; 0x15f
   21668:	4a07      	ldr	r2, [pc, #28]	; (21688 <nrfx_clock_stop+0xf8>)
   2166a:	f005 f857 	bl	2671c <printk>
   2166e:	f240 115f 	movw	r1, #351	; 0x15f
   21672:	4805      	ldr	r0, [pc, #20]	; (21688 <nrfx_clock_stop+0xf8>)
   21674:	f005 faf7 	bl	26c66 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   21678:	b003      	add	sp, #12
   2167a:	bd30      	pop	{r4, r5, pc}
   2167c:	20009a68 	.word	0x20009a68
   21680:	00030c42 	.word	0x00030c42
   21684:	0002cfb2 	.word	0x0002cfb2
   21688:	00030bf7 	.word	0x00030bf7
   2168c:	40005000 	.word	0x40005000
   21690:	4000500c 	.word	0x4000500c
   21694:	40005004 	.word	0x40005004
   21698:	40005024 	.word	0x40005024
   2169c:	4000501c 	.word	0x4000501c
   216a0:	0002dee4 	.word	0x0002dee4

000216a4 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   216a4:	4b24      	ldr	r3, [pc, #144]	; (21738 <nrfx_power_clock_irq_handler+0x94>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   216a6:	b507      	push	{r0, r1, r2, lr}
   216a8:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   216aa:	b14a      	cbz	r2, 216c0 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   216ac:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   216ae:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   216b0:	6018      	str	r0, [r3, #0]
   216b2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   216b4:	4b21      	ldr	r3, [pc, #132]	; (2173c <nrfx_power_clock_irq_handler+0x98>)
   216b6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   216ba:	4b21      	ldr	r3, [pc, #132]	; (21740 <nrfx_power_clock_irq_handler+0x9c>)
   216bc:	681b      	ldr	r3, [r3, #0]
   216be:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   216c0:	4b20      	ldr	r3, [pc, #128]	; (21744 <nrfx_power_clock_irq_handler+0xa0>)
   216c2:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   216c4:	b17a      	cbz	r2, 216e6 <nrfx_power_clock_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   216c6:	2000      	movs	r0, #0
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
   216c8:	f10d 0107 	add.w	r1, sp, #7
   216cc:	6018      	str	r0, [r3, #0]
   216ce:	681b      	ldr	r3, [r3, #0]
   216d0:	f7ff fe5c 	bl	2138c <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   216d4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   216d8:	2202      	movs	r2, #2
   216da:	2901      	cmp	r1, #1
   216dc:	4b17      	ldr	r3, [pc, #92]	; (2173c <nrfx_power_clock_irq_handler+0x98>)
   216de:	d123      	bne.n	21728 <nrfx_power_clock_irq_handler+0x84>
    p_reg->LFCLKSRC = (uint32_t)(source);
   216e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   216e4:	6099      	str	r1, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   216e6:	4b18      	ldr	r3, [pc, #96]	; (21748 <nrfx_power_clock_irq_handler+0xa4>)
   216e8:	681a      	ldr	r2, [r3, #0]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   216ea:	b15a      	cbz	r2, 21704 <nrfx_power_clock_irq_handler+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   216ec:	2200      	movs	r2, #0
   216ee:	601a      	str	r2, [r3, #0]
    p_reg->INTENCLR = mask;
   216f0:	f44f 7280 	mov.w	r2, #256	; 0x100
   216f4:	681b      	ldr	r3, [r3, #0]
   216f6:	4b11      	ldr	r3, [pc, #68]	; (2173c <nrfx_power_clock_irq_handler+0x98>)
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   216f8:	2004      	movs	r0, #4
   216fa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   216fe:	4b10      	ldr	r3, [pc, #64]	; (21740 <nrfx_power_clock_irq_handler+0x9c>)
   21700:	681b      	ldr	r3, [r3, #0]
   21702:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   21704:	4b11      	ldr	r3, [pc, #68]	; (2174c <nrfx_power_clock_irq_handler+0xa8>)
   21706:	681a      	ldr	r2, [r3, #0]
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   21708:	b15a      	cbz	r2, 21722 <nrfx_power_clock_irq_handler+0x7e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2170a:	2200      	movs	r2, #0
   2170c:	601a      	str	r2, [r3, #0]
    p_reg->INTENCLR = mask;
   2170e:	f44f 7200 	mov.w	r2, #512	; 0x200
   21712:	681b      	ldr	r3, [r3, #0]
   21714:	4b09      	ldr	r3, [pc, #36]	; (2173c <nrfx_power_clock_irq_handler+0x98>)
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   21716:	2005      	movs	r0, #5
   21718:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   2171c:	4b08      	ldr	r3, [pc, #32]	; (21740 <nrfx_power_clock_irq_handler+0x9c>)
   2171e:	681b      	ldr	r3, [r3, #0]
   21720:	4798      	blx	r3
    }
#endif
}
   21722:	b003      	add	sp, #12
   21724:	f85d fb04 	ldr.w	pc, [sp], #4
   21728:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2172c:	4b04      	ldr	r3, [pc, #16]	; (21740 <nrfx_power_clock_irq_handler+0x9c>)
   2172e:	2001      	movs	r0, #1
   21730:	681b      	ldr	r3, [r3, #0]
   21732:	4798      	blx	r3
   21734:	e7d7      	b.n	216e6 <nrfx_power_clock_irq_handler+0x42>
   21736:	bf00      	nop
   21738:	40005100 	.word	0x40005100
   2173c:	40005000 	.word	0x40005000
   21740:	20009a68 	.word	0x20009a68
   21744:	40005104 	.word	0x40005104
   21748:	40005120 	.word	0x40005120
   2174c:	40005124 	.word	0x40005124

00021750 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   21750:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   21752:	f04f 0320 	mov.w	r3, #32
   21756:	f3ef 8511 	mrs	r5, BASEPRI
   2175a:	f383 8811 	msr	BASEPRI, r3
   2175e:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code;

    NRFX_CRITICAL_SECTION_ENTER();
    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   21762:	4a0c      	ldr	r2, [pc, #48]	; (21794 <nrfx_dppi_channel_alloc+0x44>)
   21764:	6814      	ldr	r4, [r2, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
   21766:	43e7      	mvns	r7, r4
   21768:	d012      	beq.n	21790 <nrfx_dppi_channel_alloc+0x40>
   2176a:	2300      	movs	r3, #0
   2176c:	b2d9      	uxtb	r1, r3
        err_code = NRFX_ERROR_NO_MEM;
    }
    else
    {
        // Find first free channel
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
   2176e:	fa27 f601 	lsr.w	r6, r7, r1
   21772:	07f6      	lsls	r6, r6, #31
   21774:	f103 0301 	add.w	r3, r3, #1
   21778:	d5f8      	bpl.n	2176c <nrfx_dppi_channel_alloc+0x1c>
        {
            channel++;
        }

        m_allocated_channels |= DPPI_BIT_SET(channel);
   2177a:	2301      	movs	r3, #1
   2177c:	408b      	lsls	r3, r1
   2177e:	4323      	orrs	r3, r4
        *p_channel = channel;
   21780:	7001      	strb	r1, [r0, #0]

        err_code = NRFX_SUCCESS;
   21782:	4805      	ldr	r0, [pc, #20]	; (21798 <nrfx_dppi_channel_alloc+0x48>)
        m_allocated_channels |= DPPI_BIT_SET(channel);
   21784:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   21786:	f385 8811 	msr	BASEPRI, r5
   2178a:	f3bf 8f6f 	isb	sy
        NRFX_LOG_INFO("Function: %s, error code: %s.",
                      __func__,
                      NRFX_LOG_ERROR_STRING_GET(err_code));
    }
    return err_code;
}
   2178e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        err_code = NRFX_ERROR_NO_MEM;
   21790:	4802      	ldr	r0, [pc, #8]	; (2179c <nrfx_dppi_channel_alloc+0x4c>)
   21792:	e7f8      	b.n	21786 <nrfx_dppi_channel_alloc+0x36>
   21794:	20009a70 	.word	0x20009a70
   21798:	0bad0000 	.word	0x0bad0000
   2179c:	0bad0002 	.word	0x0bad0002

000217a0 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   217a0:	2301      	movs	r3, #1
   217a2:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   217a6:	f010 0fff 	tst.w	r0, #255	; 0xff
   217aa:	d012      	beq.n	217d2 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   217ac:	f04f 0320 	mov.w	r3, #32
   217b0:	f3ef 8111 	mrs	r1, BASEPRI
   217b4:	f383 8811 	msr	BASEPRI, r3
   217b8:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   217bc:	4a06      	ldr	r2, [pc, #24]	; (217d8 <nrfx_gpiote_channel_free+0x38>)
   217be:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   217c0:	ea23 0000 	bic.w	r0, r3, r0
   217c4:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   217c6:	f381 8811 	msr	BASEPRI, r1
   217ca:	f3bf 8f6f 	isb	sy
   217ce:	4803      	ldr	r0, [pc, #12]	; (217dc <nrfx_gpiote_channel_free+0x3c>)
   217d0:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   217d2:	4803      	ldr	r0, [pc, #12]	; (217e0 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   217d4:	4770      	bx	lr
   217d6:	bf00      	nop
   217d8:	20009a74 	.word	0x20009a74
   217dc:	0bad0000 	.word	0x0bad0000
   217e0:	0bad0004 	.word	0x0bad0004

000217e4 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   217e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   217e8:	22ff      	movs	r2, #255	; 0xff
{
   217ea:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   217ec:	2601      	movs	r6, #1
{
   217ee:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   217f0:	f8df e058 	ldr.w	lr, [pc, #88]	; 2184c <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   217f4:	4814      	ldr	r0, [pc, #80]	; (21848 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   217f6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 21850 <nrfx_gpiote_channel_alloc+0x6c>
   217fa:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   217fc:	f04f 0120 	mov.w	r1, #32
   21800:	f3ef 8c11 	mrs	ip, BASEPRI
   21804:	f381 8811 	msr	BASEPRI, r1
   21808:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   2180c:	fa22 f103 	lsr.w	r1, r2, r3
   21810:	07c9      	lsls	r1, r1, #31
   21812:	d50a      	bpl.n	2182a <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   21814:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   21818:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   2181c:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   2181e:	bf01      	itttt	eq
   21820:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   21822:	4339      	orreq	r1, r7
   21824:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
   21828:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   2182a:	f38c 8811 	msr	BASEPRI, ip
   2182e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   21832:	4540      	cmp	r0, r8
   21834:	d005      	beq.n	21842 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   21836:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   2183a:	439a      	bics	r2, r3
   2183c:	f104 0401 	add.w	r4, r4, #1
   21840:	d1db      	bne.n	217fa <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   21842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21846:	bf00      	nop
   21848:	0bad0002 	.word	0x0bad0002
   2184c:	20009a74 	.word	0x20009a74
   21850:	0bad0000 	.word	0x0bad0000

00021854 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   21854:	b570      	push	{r4, r5, r6, lr}
   21856:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   21858:	460d      	mov	r5, r1
   2185a:	b949      	cbnz	r1, 21870 <nrfx_ipc_init+0x1c>
   2185c:	490b      	ldr	r1, [pc, #44]	; (2188c <nrfx_ipc_init+0x38>)
   2185e:	480c      	ldr	r0, [pc, #48]	; (21890 <nrfx_ipc_init+0x3c>)
   21860:	2334      	movs	r3, #52	; 0x34
   21862:	4a0c      	ldr	r2, [pc, #48]	; (21894 <nrfx_ipc_init+0x40>)
   21864:	f004 ff5a 	bl	2671c <printk>
   21868:	2134      	movs	r1, #52	; 0x34
   2186a:	480a      	ldr	r0, [pc, #40]	; (21894 <nrfx_ipc_init+0x40>)
   2186c:	f005 f9fb 	bl	26c66 <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   21870:	4c09      	ldr	r4, [pc, #36]	; (21898 <nrfx_ipc_init+0x44>)
   21872:	7923      	ldrb	r3, [r4, #4]
   21874:	b943      	cbnz	r3, 21888 <nrfx_ipc_init+0x34>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   21876:	202a      	movs	r0, #42	; 0x2a
   21878:	f7f4 fc7a 	bl	16170 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   2187c:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   2187e:	4807      	ldr	r0, [pc, #28]	; (2189c <nrfx_ipc_init+0x48>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   21880:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   21882:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   21884:	60a6      	str	r6, [r4, #8]
}
   21886:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   21888:	4805      	ldr	r0, [pc, #20]	; (218a0 <nrfx_ipc_init+0x4c>)
   2188a:	e7fc      	b.n	21886 <nrfx_ipc_init+0x32>
   2188c:	00030826 	.word	0x00030826
   21890:	0002cfb2 	.word	0x0002cfb2
   21894:	00030c60 	.word	0x00030c60
   21898:	20009ad4 	.word	0x20009ad4
   2189c:	0bad0000 	.word	0x0bad0000
   218a0:	0bad000c 	.word	0x0bad000c

000218a4 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   218a4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   218a6:	4604      	mov	r4, r0
   218a8:	b948      	cbnz	r0, 218be <nrfx_ipc_config_load+0x1a>
   218aa:	491a      	ldr	r1, [pc, #104]	; (21914 <nrfx_ipc_config_load+0x70>)
   218ac:	481a      	ldr	r0, [pc, #104]	; (21918 <nrfx_ipc_config_load+0x74>)
   218ae:	2346      	movs	r3, #70	; 0x46
   218b0:	4a1a      	ldr	r2, [pc, #104]	; (2191c <nrfx_ipc_config_load+0x78>)
   218b2:	f004 ff33 	bl	2671c <printk>
   218b6:	2146      	movs	r1, #70	; 0x46
   218b8:	4818      	ldr	r0, [pc, #96]	; (2191c <nrfx_ipc_config_load+0x78>)
   218ba:	f005 f9d4 	bl	26c66 <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   218be:	4b18      	ldr	r3, [pc, #96]	; (21920 <nrfx_ipc_config_load+0x7c>)
   218c0:	791b      	ldrb	r3, [r3, #4]
   218c2:	2b01      	cmp	r3, #1
   218c4:	d009      	beq.n	218da <nrfx_ipc_config_load+0x36>
   218c6:	4917      	ldr	r1, [pc, #92]	; (21924 <nrfx_ipc_config_load+0x80>)
   218c8:	4813      	ldr	r0, [pc, #76]	; (21918 <nrfx_ipc_config_load+0x74>)
   218ca:	2347      	movs	r3, #71	; 0x47
   218cc:	4a13      	ldr	r2, [pc, #76]	; (2191c <nrfx_ipc_config_load+0x78>)
   218ce:	f004 ff25 	bl	2671c <printk>
   218d2:	2147      	movs	r1, #71	; 0x47
   218d4:	4811      	ldr	r0, [pc, #68]	; (2191c <nrfx_ipc_config_load+0x78>)
   218d6:	f005 f9c6 	bl	26c66 <assert_post_action>
{
   218da:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   218dc:	4a12      	ldr	r2, [pc, #72]	; (21928 <nrfx_ipc_config_load+0x84>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   218de:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   218e2:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   218e6:	3301      	adds	r3, #1
   218e8:	2b10      	cmp	r3, #16
   218ea:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   218ee:	d1f6      	bne.n	218de <nrfx_ipc_config_load+0x3a>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   218f0:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   218f2:	4a0d      	ldr	r2, [pc, #52]	; (21928 <nrfx_ipc_config_load+0x84>)
   218f4:	f104 0140 	add.w	r1, r4, #64	; 0x40
   218f8:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   218fc:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   21900:	3301      	adds	r3, #1
   21902:	2b10      	cmp	r3, #16
   21904:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   21908:	d1f6      	bne.n	218f8 <nrfx_ipc_config_load+0x54>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   2190a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    p_reg->INTENSET = mask;
   2190e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   21912:	bd38      	pop	{r3, r4, r5, pc}
   21914:	00030c9b 	.word	0x00030c9b
   21918:	0002cfb2 	.word	0x0002cfb2
   2191c:	00030c60 	.word	0x00030c60
   21920:	20009ad4 	.word	0x20009ad4
   21924:	00030ca4 	.word	0x00030ca4
   21928:	4002a000 	.word	0x4002a000

0002192c <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   2192c:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   2192e:	4b0b      	ldr	r3, [pc, #44]	; (2195c <nrfx_ipc_receive_event_enable+0x30>)
{
   21930:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   21932:	791b      	ldrb	r3, [r3, #4]
   21934:	2b01      	cmp	r3, #1
   21936:	d009      	beq.n	2194c <nrfx_ipc_receive_event_enable+0x20>
   21938:	4909      	ldr	r1, [pc, #36]	; (21960 <nrfx_ipc_receive_event_enable+0x34>)
   2193a:	480a      	ldr	r0, [pc, #40]	; (21964 <nrfx_ipc_receive_event_enable+0x38>)
   2193c:	236c      	movs	r3, #108	; 0x6c
   2193e:	4a0a      	ldr	r2, [pc, #40]	; (21968 <nrfx_ipc_receive_event_enable+0x3c>)
   21940:	f004 feec 	bl	2671c <printk>
   21944:	216c      	movs	r1, #108	; 0x6c
   21946:	4808      	ldr	r0, [pc, #32]	; (21968 <nrfx_ipc_receive_event_enable+0x3c>)
   21948:	f005 f98d 	bl	26c66 <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   2194c:	2301      	movs	r3, #1
   2194e:	fa03 f404 	lsl.w	r4, r3, r4
   21952:	4b06      	ldr	r3, [pc, #24]	; (2196c <nrfx_ipc_receive_event_enable+0x40>)
   21954:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
   21958:	bd10      	pop	{r4, pc}
   2195a:	bf00      	nop
   2195c:	20009ad4 	.word	0x20009ad4
   21960:	00030ca4 	.word	0x00030ca4
   21964:	0002cfb2 	.word	0x0002cfb2
   21968:	00030c60 	.word	0x00030c60
   2196c:	4002a000 	.word	0x4002a000

00021970 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   21970:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   21972:	4b0b      	ldr	r3, [pc, #44]	; (219a0 <nrfx_ipc_receive_event_disable+0x30>)
{
   21974:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   21976:	791b      	ldrb	r3, [r3, #4]
   21978:	2b01      	cmp	r3, #1
   2197a:	d009      	beq.n	21990 <nrfx_ipc_receive_event_disable+0x20>
   2197c:	4909      	ldr	r1, [pc, #36]	; (219a4 <nrfx_ipc_receive_event_disable+0x34>)
   2197e:	480a      	ldr	r0, [pc, #40]	; (219a8 <nrfx_ipc_receive_event_disable+0x38>)
   21980:	2372      	movs	r3, #114	; 0x72
   21982:	4a0a      	ldr	r2, [pc, #40]	; (219ac <nrfx_ipc_receive_event_disable+0x3c>)
   21984:	f004 feca 	bl	2671c <printk>
   21988:	2172      	movs	r1, #114	; 0x72
   2198a:	4808      	ldr	r0, [pc, #32]	; (219ac <nrfx_ipc_receive_event_disable+0x3c>)
   2198c:	f005 f96b 	bl	26c66 <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   21990:	2301      	movs	r3, #1
   21992:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
   21996:	4b06      	ldr	r3, [pc, #24]	; (219b0 <nrfx_ipc_receive_event_disable+0x40>)
   21998:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
   2199c:	bd10      	pop	{r4, pc}
   2199e:	bf00      	nop
   219a0:	20009ad4 	.word	0x20009ad4
   219a4:	00030ca4 	.word	0x00030ca4
   219a8:	0002cfb2 	.word	0x0002cfb2
   219ac:	00030c60 	.word	0x00030c60
   219b0:	4002a000 	.word	0x4002a000

000219b4 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   219b4:	4b16      	ldr	r3, [pc, #88]	; (21a10 <nrfx_ipc_irq_handler+0x5c>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   219b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   219ba:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   219be:	f8df 9060 	ldr.w	r9, [pc, #96]	; 21a20 <nrfx_ipc_irq_handler+0x6c>
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   219c2:	4635      	mov	r5, r6
   219c4:	4f13      	ldr	r7, [pc, #76]	; (21a14 <nrfx_ipc_irq_handler+0x60>)
   219c6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 21a24 <nrfx_ipc_irq_handler+0x70>
    while (bitmask)
   219ca:	b935      	cbnz	r5, 219da <nrfx_ipc_irq_handler+0x26>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   219cc:	4b12      	ldr	r3, [pc, #72]	; (21a18 <nrfx_ipc_irq_handler+0x64>)
   219ce:	4630      	mov	r0, r6
}
   219d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   219d4:	681a      	ldr	r2, [r3, #0]
   219d6:	6899      	ldr	r1, [r3, #8]
   219d8:	4710      	bx	r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   219da:	fa95 f4a5 	rbit	r4, r5
        bitmask &= ~(1UL << event_idx);
   219de:	2301      	movs	r3, #1
  return __builtin_clz(value);
   219e0:	fab4 f484 	clz	r4, r4
   219e4:	40a3      	lsls	r3, r4
   219e6:	2c0f      	cmp	r4, #15
   219e8:	ea25 0503 	bic.w	r5, r5, r3
   219ec:	d90b      	bls.n	21a06 <nrfx_ipc_irq_handler+0x52>
   219ee:	4639      	mov	r1, r7
   219f0:	4640      	mov	r0, r8
   219f2:	f240 13e7 	movw	r3, #487	; 0x1e7
   219f6:	464a      	mov	r2, r9
   219f8:	f004 fe90 	bl	2671c <printk>
   219fc:	f240 11e7 	movw	r1, #487	; 0x1e7
   21a00:	4648      	mov	r0, r9
   21a02:	f005 f930 	bl	26c66 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21a06:	2200      	movs	r2, #0
   21a08:	4b04      	ldr	r3, [pc, #16]	; (21a1c <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   21a0a:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21a0c:	511a      	str	r2, [r3, r4]
}
   21a0e:	e7dc      	b.n	219ca <nrfx_ipc_irq_handler+0x16>
   21a10:	4002a000 	.word	0x4002a000
   21a14:	00030d03 	.word	0x00030d03
   21a18:	20009ad4 	.word	0x20009ad4
   21a1c:	4002a100 	.word	0x4002a100
   21a20:	00030cd1 	.word	0x00030cd1
   21a24:	0002cfb2 	.word	0x0002cfb2

00021a28 <nrfx_nvmc_page_erase>:
    return ((addr & 0x1u) == 0u);
}

__STATIC_INLINE bool is_valid_address(uint32_t addr, bool uicr_allowed)
{
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   21a28:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   21a2c:	b510      	push	{r4, lr}
   21a2e:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   21a30:	d30b      	bcc.n	21a4a <nrfx_nvmc_page_erase+0x22>
    NRFX_ASSERT(is_valid_address(addr, false));
   21a32:	4910      	ldr	r1, [pc, #64]	; (21a74 <nrfx_nvmc_page_erase+0x4c>)
   21a34:	4810      	ldr	r0, [pc, #64]	; (21a78 <nrfx_nvmc_page_erase+0x50>)
   21a36:	f44f 7383 	mov.w	r3, #262	; 0x106
   21a3a:	4a10      	ldr	r2, [pc, #64]	; (21a7c <nrfx_nvmc_page_erase+0x54>)
   21a3c:	f004 fe6e 	bl	2671c <printk>
   21a40:	f44f 7183 	mov.w	r1, #262	; 0x106
   21a44:	480d      	ldr	r0, [pc, #52]	; (21a7c <nrfx_nvmc_page_erase+0x54>)
   21a46:	f005 f90e 	bl	26c66 <assert_post_action>
    return !(addr % flash_page_size_get());
   21a4a:	f3c4 030b 	ubfx	r3, r4, #0, #12

    if (!is_page_aligned_check(addr))
   21a4e:	b97b      	cbnz	r3, 21a70 <nrfx_nvmc_page_erase+0x48>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   21a50:	2202      	movs	r2, #2
   21a52:	4b0b      	ldr	r3, [pc, #44]	; (21a80 <nrfx_nvmc_page_erase+0x58>)
   21a54:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   21a58:	f04f 32ff 	mov.w	r2, #4294967295
   21a5c:	6022      	str	r2, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   21a5e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   21a62:	07d2      	lsls	r2, r2, #31
   21a64:	d5fb      	bpl.n	21a5e <nrfx_nvmc_page_erase+0x36>
    p_reg->CONFIGNS = (uint32_t)mode;
   21a66:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   21a68:	4806      	ldr	r0, [pc, #24]	; (21a84 <nrfx_nvmc_page_erase+0x5c>)
   21a6a:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   21a6e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   21a70:	4805      	ldr	r0, [pc, #20]	; (21a88 <nrfx_nvmc_page_erase+0x60>)
   21a72:	e7fc      	b.n	21a6e <nrfx_nvmc_page_erase+0x46>
   21a74:	00030d6a 	.word	0x00030d6a
   21a78:	0002cfb2 	.word	0x0002cfb2
   21a7c:	00030d0e 	.word	0x00030d0e
   21a80:	40039000 	.word	0x40039000
   21a84:	0bad0000 	.word	0x0bad0000
   21a88:	0bad000a 	.word	0x0bad000a

00021a8c <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   21a8c:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   21a90:	b538      	push	{r3, r4, r5, lr}
   21a92:	4604      	mov	r4, r0
   21a94:	460d      	mov	r5, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   21a96:	d30b      	bcc.n	21ab0 <nrfx_nvmc_word_write+0x24>
    NRFX_ASSERT(is_valid_address(addr, true));
   21a98:	4914      	ldr	r1, [pc, #80]	; (21aec <nrfx_nvmc_word_write+0x60>)
   21a9a:	4815      	ldr	r0, [pc, #84]	; (21af0 <nrfx_nvmc_word_write+0x64>)
   21a9c:	f44f 73ca 	mov.w	r3, #404	; 0x194
   21aa0:	4a14      	ldr	r2, [pc, #80]	; (21af4 <nrfx_nvmc_word_write+0x68>)
   21aa2:	f004 fe3b 	bl	2671c <printk>
   21aa6:	f44f 71ca 	mov.w	r1, #404	; 0x194
   21aaa:	4812      	ldr	r0, [pc, #72]	; (21af4 <nrfx_nvmc_word_write+0x68>)
   21aac:	f005 f8db 	bl	26c66 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   21ab0:	07a1      	lsls	r1, r4, #30
   21ab2:	d00b      	beq.n	21acc <nrfx_nvmc_word_write+0x40>
   21ab4:	4910      	ldr	r1, [pc, #64]	; (21af8 <nrfx_nvmc_word_write+0x6c>)
   21ab6:	480e      	ldr	r0, [pc, #56]	; (21af0 <nrfx_nvmc_word_write+0x64>)
   21ab8:	f240 1395 	movw	r3, #405	; 0x195
   21abc:	4a0d      	ldr	r2, [pc, #52]	; (21af4 <nrfx_nvmc_word_write+0x68>)
   21abe:	f004 fe2d 	bl	2671c <printk>
   21ac2:	f240 1195 	movw	r1, #405	; 0x195
   21ac6:	480b      	ldr	r0, [pc, #44]	; (21af4 <nrfx_nvmc_word_write+0x68>)
   21ac8:	f005 f8cd 	bl	26c66 <assert_post_action>
   21acc:	2201      	movs	r2, #1
   21ace:	4b0b      	ldr	r3, [pc, #44]	; (21afc <nrfx_nvmc_word_write+0x70>)
   21ad0:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   21ad4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   21ad8:	07d2      	lsls	r2, r2, #31
   21ada:	d5fb      	bpl.n	21ad4 <nrfx_nvmc_word_write+0x48>
    *(volatile uint32_t *)addr = value;
   21adc:	6025      	str	r5, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   21ade:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIGNS = (uint32_t)mode;
   21ae2:	2200      	movs	r2, #0
   21ae4:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   21ae8:	bd38      	pop	{r3, r4, r5, pc}
   21aea:	bf00      	nop
   21aec:	00030d84 	.word	0x00030d84
   21af0:	0002cfb2 	.word	0x0002cfb2
   21af4:	00030d0e 	.word	0x00030d0e
   21af8:	00030d9e 	.word	0x00030d9e
   21afc:	40039000 	.word	0x40039000

00021b00 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   21b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21b04:	460e      	mov	r6, r1
   21b06:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   21b08:	4d0c      	ldr	r5, [pc, #48]	; (21b3c <metal_generic_dev_open+0x3c>)
   21b0a:	f855 4f18 	ldr.w	r4, [r5, #24]!
   21b0e:	42ac      	cmp	r4, r5
   21b10:	d103      	bne.n	21b1a <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   21b12:	f06f 0012 	mvn.w	r0, #18
   21b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   21b1a:	4631      	mov	r1, r6
   21b1c:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   21b20:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   21b24:	f006 fd0a 	bl	2853c <strcmp>
   21b28:	b930      	cbnz	r0, 21b38 <metal_generic_dev_open+0x38>
			return metal_generic_dev_sys_open(dev);
   21b2a:	4640      	mov	r0, r8
			*device = dev;
   21b2c:	f8c7 8000 	str.w	r8, [r7]
}
   21b30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   21b34:	f009 bb85 	b.w	2b242 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   21b38:	6824      	ldr	r4, [r4, #0]
   21b3a:	e7e8      	b.n	21b0e <metal_generic_dev_open+0xe>
   21b3c:	20009ae0 	.word	0x20009ae0

00021b40 <metal_bus_find>:
{
   21b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21b44:	4607      	mov	r7, r0
   21b46:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   21b48:	4e0b      	ldr	r6, [pc, #44]	; (21b78 <metal_bus_find+0x38>)
   21b4a:	f856 4f08 	ldr.w	r4, [r6, #8]!
   21b4e:	42b4      	cmp	r4, r6
   21b50:	d102      	bne.n	21b58 <metal_bus_find+0x18>
	return -ENOENT;
   21b52:	f06f 0001 	mvn.w	r0, #1
   21b56:	e00a      	b.n	21b6e <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   21b58:	4639      	mov	r1, r7
   21b5a:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   21b5e:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   21b62:	f006 fceb 	bl	2853c <strcmp>
   21b66:	b920      	cbnz	r0, 21b72 <metal_bus_find+0x32>
   21b68:	b11d      	cbz	r5, 21b72 <metal_bus_find+0x32>
			*result = bus;
   21b6a:	f8c5 8000 	str.w	r8, [r5]
}
   21b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   21b72:	6824      	ldr	r4, [r4, #0]
   21b74:	e7eb      	b.n	21b4e <metal_bus_find+0xe>
   21b76:	bf00      	nop
   21b78:	20009ae0 	.word	0x20009ae0

00021b7c <metal_bus_register>:
{
   21b7c:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   21b7e:	4604      	mov	r4, r0
   21b80:	b910      	cbnz	r0, 21b88 <metal_bus_register+0xc>
		return -EINVAL;
   21b82:	f06f 0015 	mvn.w	r0, #21
}
   21b86:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   21b88:	6800      	ldr	r0, [r0, #0]
   21b8a:	2800      	cmp	r0, #0
   21b8c:	d0f9      	beq.n	21b82 <metal_bus_register+0x6>
   21b8e:	f006 fcc5 	bl	2851c <strlen>
   21b92:	2800      	cmp	r0, #0
   21b94:	d0f5      	beq.n	21b82 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   21b96:	2100      	movs	r1, #0
   21b98:	6820      	ldr	r0, [r4, #0]
   21b9a:	f7ff ffd1 	bl	21b40 <metal_bus_find>
   21b9e:	b1c0      	cbz	r0, 21bd2 <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
   21ba0:	f104 031c 	add.w	r3, r4, #28
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
	list->next = list;
   21ba4:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
   21ba8:	4b0c      	ldr	r3, [pc, #48]	; (21bdc <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   21baa:	f104 0224 	add.w	r2, r4, #36	; 0x24
   21bae:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   21bb0:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   21bb4:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   21bb6:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   21bb8:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   21bba:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   21bbc:	781a      	ldrb	r2, [r3, #0]
   21bbe:	2a06      	cmp	r2, #6
   21bc0:	d905      	bls.n	21bce <metal_bus_register+0x52>
   21bc2:	685b      	ldr	r3, [r3, #4]
   21bc4:	b143      	cbz	r3, 21bd8 <metal_bus_register+0x5c>
   21bc6:	2007      	movs	r0, #7
   21bc8:	6822      	ldr	r2, [r4, #0]
   21bca:	4905      	ldr	r1, [pc, #20]	; (21be0 <metal_bus_register+0x64>)
   21bcc:	4798      	blx	r3
	return 0;
   21bce:	2000      	movs	r0, #0
   21bd0:	e7d9      	b.n	21b86 <metal_bus_register+0xa>
		return -EEXIST;
   21bd2:	f06f 0010 	mvn.w	r0, #16
   21bd6:	e7d6      	b.n	21b86 <metal_bus_register+0xa>
	return 0;
   21bd8:	4618      	mov	r0, r3
   21bda:	e7d4      	b.n	21b86 <metal_bus_register+0xa>
   21bdc:	20009ae0 	.word	0x20009ae0
   21be0:	00030dc7 	.word	0x00030dc7

00021be4 <metal_register_generic_device>:
{
   21be4:	b510      	push	{r4, lr}
   21be6:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   21be8:	6800      	ldr	r0, [r0, #0]
   21bea:	b910      	cbnz	r0, 21bf2 <metal_register_generic_device+0xe>
		return -EINVAL;
   21bec:	f06f 0015 	mvn.w	r0, #21
}
   21bf0:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   21bf2:	f006 fc93 	bl	2851c <strlen>
   21bf6:	2800      	cmp	r0, #0
   21bf8:	d0f8      	beq.n	21bec <metal_register_generic_device+0x8>
   21bfa:	68a3      	ldr	r3, [r4, #8]
   21bfc:	2b01      	cmp	r3, #1
   21bfe:	d8f5      	bhi.n	21bec <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   21c00:	4b06      	ldr	r3, [pc, #24]	; (21c1c <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   21c02:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   21c06:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   21c08:	4b05      	ldr	r3, [pc, #20]	; (21c20 <metal_register_generic_device+0x3c>)
   21c0a:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   21c0c:	f103 0018 	add.w	r0, r3, #24
   21c10:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   21c12:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   21c14:	61d9      	str	r1, [r3, #28]
	return 0;
   21c16:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   21c18:	6011      	str	r1, [r2, #0]
}
   21c1a:	e7e9      	b.n	21bf0 <metal_register_generic_device+0xc>
   21c1c:	20008334 	.word	0x20008334
   21c20:	20009ae0 	.word	0x20009ae0

00021c24 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   21c24:	b538      	push	{r3, r4, r5, lr}
   21c26:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   21c28:	4c0d      	ldr	r4, [pc, #52]	; (21c60 <metal_init+0x3c>)
   21c2a:	2220      	movs	r2, #32
   21c2c:	4620      	mov	r0, r4
   21c2e:	2100      	movs	r1, #0
   21c30:	f006 fcda 	bl	285e8 <memset>

	_metal.common.log_handler   = params->log_handler;
   21c34:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   21c36:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   21c38:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   21c3a:	4623      	mov	r3, r4
   21c3c:	792a      	ldrb	r2, [r5, #4]
   21c3e:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   21c42:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   21c46:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   21c4a:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   21c4e:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   21c52:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   21c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   21c5a:	f000 b803 	b.w	21c64 <metal_sys_init>
   21c5e:	bf00      	nop
   21c60:	20009ae0 	.word	0x20009ae0

00021c64 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   21c64:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   21c66:	4802      	ldr	r0, [pc, #8]	; (21c70 <metal_sys_init+0xc>)
   21c68:	f7ff ff88 	bl	21b7c <metal_bus_register>
	return 0;
}
   21c6c:	2000      	movs	r0, #0
   21c6e:	bd08      	pop	{r3, pc}
   21c70:	20008334 	.word	0x20008334

00021c74 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   21c74:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   21c76:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   21c78:	2b06      	cmp	r3, #6
{
   21c7a:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   21c7c:	bf88      	it	hi
   21c7e:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   21c80:	4b09      	ldr	r3, [pc, #36]	; (21ca8 <metal_zephyr_log_handler+0x34>)
{
   21c82:	ac05      	add	r4, sp, #20
   21c84:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   21c88:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   21c8c:	4807      	ldr	r0, [pc, #28]	; (21cac <metal_zephyr_log_handler+0x38>)
   21c8e:	f004 fd45 	bl	2671c <printk>

	va_start(args, format);
	vprintk(format, args);
   21c92:	4621      	mov	r1, r4
   21c94:	4628      	mov	r0, r5
	va_start(args, format);
   21c96:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   21c98:	f7ef fc9e 	bl	115d8 <vprintk>
	va_end(args);
}
   21c9c:	b002      	add	sp, #8
   21c9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   21ca2:	b003      	add	sp, #12
   21ca4:	4770      	bx	lr
   21ca6:	bf00      	nop
   21ca8:	0002ca08 	.word	0x0002ca08
   21cac:	0002cd01 	.word	0x0002cd01

00021cb0 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   21cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21cb4:	b087      	sub	sp, #28
   21cb6:	9305      	str	r3, [sp, #20]
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   21cb8:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   21cba:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   21cbc:	4293      	cmp	r3, r2
{
   21cbe:	4617      	mov	r7, r2
	if (nvqs > num_vrings)
   21cc0:	d342      	bcc.n	21d48 <virtio_create_virtqueues+0x98>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   21cc2:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   21cc4:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   21cc8:	42bd      	cmp	r5, r7
   21cca:	d103      	bne.n	21cd4 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   21ccc:	2000      	movs	r0, #0
}
   21cce:	b007      	add	sp, #28
   21cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   21cd4:	fb0b f805 	mul.w	r8, fp, r5
   21cd8:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_MASTER) {
   21cdc:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   21cde:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   21ce2:	f104 0a04 	add.w	sl, r4, #4
		if (vdev->role == VIRTIO_DEV_MASTER) {
   21ce6:	b9ca      	cbnz	r2, 21d1c <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   21ce8:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   21cea:	6863      	ldr	r3, [r4, #4]
   21cec:	6801      	ldr	r1, [r0, #0]
			metal_io_block_set(io, offset, 0,
   21cee:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   21cf2:	1a59      	subs	r1, r3, r1
						      vring_alloc->align));
   21cf4:	68a3      	ldr	r3, [r4, #8]
static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   21cf6:	f10c 0e03 	add.w	lr, ip, #3
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
   21cfa:	1e5c      	subs	r4, r3, #1
   21cfc:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   21d00:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   21d04:	425b      	negs	r3, r3
   21d06:	4023      	ands	r3, r4
			metal_io_block_set(io, offset, 0,
   21d08:	6884      	ldr	r4, [r0, #8]
	size += sizeof(struct vring_used) +
   21d0a:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
   21d0e:	42a1      	cmp	r1, r4
   21d10:	bf28      	it	cs
   21d12:	f04f 31ff 	movcs.w	r1, #4294967295
   21d16:	3306      	adds	r3, #6
   21d18:	f009 fa5a 	bl	2b1d0 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   21d1c:	f859 3008 	ldr.w	r3, [r9, r8]
   21d20:	9a05      	ldr	r2, [sp, #20]
   21d22:	9302      	str	r3, [sp, #8]
   21d24:	6a33      	ldr	r3, [r6, #32]
   21d26:	4630      	mov	r0, r6
   21d28:	6a1b      	ldr	r3, [r3, #32]
   21d2a:	b2a9      	uxth	r1, r5
   21d2c:	9301      	str	r3, [sp, #4]
   21d2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   21d30:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   21d34:	9300      	str	r3, [sp, #0]
   21d36:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
   21d3a:	4653      	mov	r3, sl
   21d3c:	f009 fa9e 	bl	2b27c <virtqueue_create>
		if (ret)
   21d40:	2800      	cmp	r0, #0
   21d42:	d1c4      	bne.n	21cce <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   21d44:	3501      	adds	r5, #1
   21d46:	e7bf      	b.n	21cc8 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   21d48:	4800      	ldr	r0, [pc, #0]	; (21d4c <virtio_create_virtqueues+0x9c>)
   21d4a:	e7c0      	b.n	21cce <virtio_create_virtqueues+0x1e>
   21d4c:	fffff440 	.word	0xfffff440

00021d50 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   21d50:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   21d52:	8944      	ldrh	r4, [r0, #10]
   21d54:	428c      	cmp	r4, r1
   21d56:	d312      	bcc.n	21d7e <virtqueue_add_consumed_buffer+0x2e>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   21d58:	6a03      	ldr	r3, [r0, #32]
   21d5a:	3c01      	subs	r4, #1
   21d5c:	885d      	ldrh	r5, [r3, #2]
   21d5e:	402c      	ands	r4, r5
   21d60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
   21d64:	609a      	str	r2, [r3, #8]
	used_desc->id = head_idx;
   21d66:	6059      	str	r1, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   21d68:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   21d6c:	6a02      	ldr	r2, [r0, #32]
   21d6e:	8853      	ldrh	r3, [r2, #2]
   21d70:	3301      	adds	r3, #1
   21d72:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   21d74:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   21d76:	3301      	adds	r3, #1
   21d78:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   21d7a:	2000      	movs	r0, #0
}
   21d7c:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   21d7e:	4801      	ldr	r0, [pc, #4]	; (21d84 <virtqueue_add_consumed_buffer+0x34>)
   21d80:	e7fc      	b.n	21d7c <virtqueue_add_consumed_buffer+0x2c>
   21d82:	bf00      	nop
   21d84:	fffff441 	.word	0xfffff441

00021d88 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   21d88:	b430      	push	{r4, r5}
   21d8a:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   21d8c:	b148      	cbz	r0, 21da2 <rpmsg_send_offchannel_raw+0x1a>
   21d8e:	6a00      	ldr	r0, [r0, #32]
   21d90:	b138      	cbz	r0, 21da2 <rpmsg_send_offchannel_raw+0x1a>
   21d92:	b133      	cbz	r3, 21da2 <rpmsg_send_offchannel_raw+0x1a>
   21d94:	3401      	adds	r4, #1
   21d96:	d004      	beq.n	21da2 <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   21d98:	6f44      	ldr	r4, [r0, #116]	; 0x74
   21d9a:	b114      	cbz	r4, 21da2 <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   21d9c:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   21d9e:	bc30      	pop	{r4, r5}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   21da0:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   21da2:	4801      	ldr	r0, [pc, #4]	; (21da8 <rpmsg_send_offchannel_raw+0x20>)
}
   21da4:	bc30      	pop	{r4, r5}
   21da6:	4770      	bx	lr
   21da8:	fffff82d 	.word	0xfffff82d

00021dac <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   21dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21db0:	460e      	mov	r6, r1
   21db2:	4690      	mov	r8, r2
   21db4:	461c      	mov	r4, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   21db6:	4605      	mov	r5, r0
   21db8:	2800      	cmp	r0, #0
   21dba:	d06a      	beq.n	21e92 <rpmsg_create_ept+0xe6>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   21dbc:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   21dc0:	4638      	mov	r0, r7
   21dc2:	f009 fbe7 	bl	2b594 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   21dc6:	1c63      	adds	r3, r4, #1
   21dc8:	d11a      	bne.n	21e00 <rpmsg_create_ept+0x54>
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
   21dca:	2300      	movs	r3, #0
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   21dcc:	f106 0048 	add.w	r0, r6, #72	; 0x48
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   21dd0:	095a      	lsrs	r2, r3, #5
   21dd2:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   21dd6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   21dda:	f003 011f 	and.w	r1, r3, #31
   21dde:	fa22 f401 	lsr.w	r4, r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   21de2:	07e4      	lsls	r4, r4, #31
   21de4:	d407      	bmi.n	21df6 <rpmsg_create_ept+0x4a>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   21de6:	f503 6480 	add.w	r4, r3, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   21dea:	2301      	movs	r3, #1
   21dec:	408b      	lsls	r3, r1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   21dee:	4313      	orrs	r3, r2
   21df0:	f8cc 3000 	str.w	r3, [ip]
		if (addr == RPMSG_ADDR_ANY) {
   21df4:	e01d      	b.n	21e32 <rpmsg_create_ept+0x86>
	     bit++)
   21df6:	3301      	adds	r3, #1
	for (bit = start;
   21df8:	2b80      	cmp	r3, #128	; 0x80
   21dfa:	d1e9      	bne.n	21dd0 <rpmsg_create_ept+0x24>
			status = RPMSG_ERR_ADDR;
   21dfc:	4c27      	ldr	r4, [pc, #156]	; (21e9c <rpmsg_create_ept+0xf0>)
   21dfe:	e044      	b.n	21e8a <rpmsg_create_ept+0xde>
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   21e00:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   21e04:	d315      	bcc.n	21e32 <rpmsg_create_ept+0x86>
	addr -= RPMSG_RESERVED_ADDRESSES;
   21e06:	f5a4 6380 	sub.w	r3, r4, #1024	; 0x400
	if (addr >= 0 && addr < size)
   21e0a:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   21e0c:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
   21e10:	d83a      	bhi.n	21e88 <rpmsg_create_ept+0xdc>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   21e12:	0958      	lsrs	r0, r3, #5
   21e14:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   21e18:	f003 031f 	and.w	r3, r3, #31
   21e1c:	fa2c f203 	lsr.w	r2, ip, r3
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
   21e20:	07d2      	lsls	r2, r2, #31
   21e22:	d4eb      	bmi.n	21dfc <rpmsg_create_ept+0x50>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   21e24:	2201      	movs	r2, #1
   21e26:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   21e2a:	ea43 030c 	orr.w	r3, r3, ip
   21e2e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   21e32:	491b      	ldr	r1, [pc, #108]	; (21ea0 <rpmsg_create_ept+0xf4>)
   21e34:	2220      	movs	r2, #32
   21e36:	f1b8 0f00 	cmp.w	r8, #0
   21e3a:	bf18      	it	ne
   21e3c:	4641      	movne	r1, r8
   21e3e:	4628      	mov	r0, r5
   21e40:	f006 fb59 	bl	284f6 <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   21e44:	9b06      	ldr	r3, [sp, #24]
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
	rpmsg_register_endpoint(rdev, ept);
   21e46:	4629      	mov	r1, r5
   21e48:	62ab      	str	r3, [r5, #40]	; 0x28
	ept->cb = cb;
   21e4a:	9b07      	ldr	r3, [sp, #28]
   21e4c:	4630      	mov	r0, r6
   21e4e:	62eb      	str	r3, [r5, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   21e50:	9b08      	ldr	r3, [sp, #32]
	ept->addr = src;
   21e52:	626c      	str	r4, [r5, #36]	; 0x24
	ept->ns_unbind_cb = ns_unbind_cb;
   21e54:	632b      	str	r3, [r5, #48]	; 0x30
   21e56:	f009 fc17 	bl	2b688 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   21e5a:	4638      	mov	r0, r7
   21e5c:	f001 fb1e 	bl	2349c <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   21e60:	782c      	ldrb	r4, [r5, #0]
   21e62:	b174      	cbz	r4, 21e82 <rpmsg_create_ept+0xd6>
   21e64:	f896 4088 	ldrb.w	r4, [r6, #136]	; 0x88
   21e68:	b15c      	cbz	r4, 21e82 <rpmsg_create_ept+0xd6>
   21e6a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21e6c:	3301      	adds	r3, #1
   21e6e:	d112      	bne.n	21e96 <rpmsg_create_ept+0xea>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   21e70:	2100      	movs	r1, #0
   21e72:	4628      	mov	r0, r5
   21e74:	f009 fbbf 	bl	2b5f6 <rpmsg_send_ns_message>

	if (status)
   21e78:	4604      	mov	r4, r0
   21e7a:	b110      	cbz	r0, 21e82 <rpmsg_create_ept+0xd6>
		rpmsg_unregister_endpoint(ept);
   21e7c:	4628      	mov	r0, r5
   21e7e:	f009 fb8f 	bl	2b5a0 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   21e82:	4620      	mov	r0, r4
   21e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21e88:	4c06      	ldr	r4, [pc, #24]	; (21ea4 <rpmsg_create_ept+0xf8>)
   21e8a:	4638      	mov	r0, r7
   21e8c:	f001 fb06 	bl	2349c <z_impl_k_sem_give>
}
   21e90:	e7f7      	b.n	21e82 <rpmsg_create_ept+0xd6>
		return RPMSG_ERR_PARAM;
   21e92:	4c04      	ldr	r4, [pc, #16]	; (21ea4 <rpmsg_create_ept+0xf8>)
   21e94:	e7f5      	b.n	21e82 <rpmsg_create_ept+0xd6>
   21e96:	2400      	movs	r4, #0
   21e98:	e7f3      	b.n	21e82 <rpmsg_create_ept+0xd6>
   21e9a:	bf00      	nop
   21e9c:	fffff829 	.word	0xfffff829
   21ea0:	00030727 	.word	0x00030727
   21ea4:	fffff82d 	.word	0xfffff82d

00021ea8 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
   21ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct virtio_device *vdev = vq->vq_dev;
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   21eac:	6803      	ldr	r3, [r0, #0]
{
   21eae:	b085      	sub	sp, #20
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   21eb0:	6a5f      	ldr	r7, [r3, #36]	; 0x24
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
					 rp_hdr->len, rp_hdr->src, ept->priv);

			RPMSG_ASSERT(status >= 0,
   21eb2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 21f7c <rpmsg_virtio_rx_callback+0xd4>
	metal_mutex_acquire(&rdev->lock);
   21eb6:	f107 0658 	add.w	r6, r7, #88	; 0x58
   21eba:	4630      	mov	r0, r6
   21ebc:	f009 fc40 	bl	2b740 <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   21ec0:	f10d 020a 	add.w	r2, sp, #10
   21ec4:	a903      	add	r1, sp, #12
   21ec6:	4638      	mov	r0, r7
   21ec8:	f009 fc23 	bl	2b712 <rpmsg_virtio_get_rx_buffer>
   21ecc:	4604      	mov	r4, r0
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   21ece:	4630      	mov	r0, r6
   21ed0:	f009 fc03 	bl	2b6da <k_sem_give>
			RPMSG_ASSERT(status >= 0,
   21ed4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 21f80 <rpmsg_virtio_rx_callback+0xd8>
   21ed8:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 21f84 <rpmsg_virtio_rx_callback+0xdc>
	while (rp_hdr) {
   21edc:	b914      	cbnz	r4, 21ee4 <rpmsg_virtio_rx_callback+0x3c>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
		}
		metal_mutex_release(&rdev->lock);
	}
}
   21ede:	b005      	add	sp, #20
   21ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rp_hdr->reserved = idx;
   21ee4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   21ee8:	4630      	mov	r0, r6
   21eea:	60a3      	str	r3, [r4, #8]
   21eec:	f009 fc28 	bl	2b740 <__metal_mutex_acquire>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   21ef0:	f04f 33ff 	mov.w	r3, #4294967295
   21ef4:	2100      	movs	r1, #0
   21ef6:	4638      	mov	r0, r7
   21ef8:	6862      	ldr	r2, [r4, #4]
   21efa:	f009 fb95 	bl	2b628 <rpmsg_get_endpoint>
   21efe:	4605      	mov	r5, r0
   21f00:	4630      	mov	r0, r6
   21f02:	f009 fbea 	bl	2b6da <k_sem_give>
		if (ept) {
   21f06:	b1dd      	cbz	r5, 21f40 <rpmsg_virtio_rx_callback+0x98>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   21f08:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   21f0a:	6823      	ldr	r3, [r4, #0]
   21f0c:	3201      	adds	r2, #1
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   21f0e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
				ept->dest_addr = rp_hdr->src;
   21f10:	bf08      	it	eq
   21f12:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   21f14:	89a2      	ldrh	r2, [r4, #12]
   21f16:	9100      	str	r1, [sp, #0]
   21f18:	4628      	mov	r0, r5
   21f1a:	f8d5 b02c 	ldr.w	fp, [r5, #44]	; 0x2c
   21f1e:	f104 0110 	add.w	r1, r4, #16
   21f22:	47d8      	blx	fp
			RPMSG_ASSERT(status >= 0,
   21f24:	2800      	cmp	r0, #0
   21f26:	da0b      	bge.n	21f40 <rpmsg_virtio_rx_callback+0x98>
   21f28:	4649      	mov	r1, r9
   21f2a:	4650      	mov	r0, sl
   21f2c:	f240 13ef 	movw	r3, #495	; 0x1ef
   21f30:	4642      	mov	r2, r8
   21f32:	f004 fbf3 	bl	2671c <printk>
   21f36:	f240 11ef 	movw	r1, #495	; 0x1ef
   21f3a:	4640      	mov	r0, r8
   21f3c:	f004 fe93 	bl	26c66 <assert_post_action>
   21f40:	4630      	mov	r0, r6
   21f42:	f009 fbfd 	bl	2b740 <__metal_mutex_acquire>
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   21f46:	68a3      	ldr	r3, [r4, #8]
   21f48:	2b00      	cmp	r3, #0
   21f4a:	db06      	blt.n	21f5a <rpmsg_virtio_rx_callback+0xb2>
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   21f4c:	4621      	mov	r1, r4
   21f4e:	4638      	mov	r0, r7
   21f50:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   21f54:	9a03      	ldr	r2, [sp, #12]
   21f56:	f009 fbc2 	bl	2b6de <rpmsg_virtio_return_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   21f5a:	4638      	mov	r0, r7
   21f5c:	f10d 020a 	add.w	r2, sp, #10
   21f60:	a903      	add	r1, sp, #12
   21f62:	f009 fbd6 	bl	2b712 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   21f66:	4604      	mov	r4, r0
   21f68:	b918      	cbnz	r0, 21f72 <rpmsg_virtio_rx_callback+0xca>
			virtqueue_kick(rvdev->rvq);
   21f6a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
   21f6e:	f009 fad3 	bl	2b518 <virtqueue_kick>
   21f72:	4630      	mov	r0, r6
   21f74:	f009 fbb1 	bl	2b6da <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   21f78:	e7b0      	b.n	21edc <rpmsg_virtio_rx_callback+0x34>
   21f7a:	bf00      	nop
   21f7c:	00030e72 	.word	0x00030e72
   21f80:	00030eb5 	.word	0x00030eb5
   21f84:	0002cfb2 	.word	0x0002cfb2

00021f88 <rpmsg_virtio_send_offchannel_nocopy>:
{
   21f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	hdr = RPMSG_LOCATE_HDR(data);
   21f8c:	f1a3 0810 	sub.w	r8, r3, #16
	idx = hdr->reserved;
   21f90:	f853 7c08 	ldr.w	r7, [r3, #-8]
	rp_hdr.reserved = 0;
   21f94:	2300      	movs	r3, #0
{
   21f96:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   21f98:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   21f9a:	f8ad 301e 	strh.w	r3, [sp, #30]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   21f9e:	2310      	movs	r3, #16
{
   21fa0:	4604      	mov	r4, r0
	io = rvdev->shbuf_io;
   21fa2:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
	rp_hdr.src = src;
   21fa6:	e9cd 1204 	strd	r1, r2, [sp, #16]
   21faa:	6801      	ldr	r1, [r0, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   21fac:	6886      	ldr	r6, [r0, #8]
{
   21fae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   21fb0:	eba8 0101 	sub.w	r1, r8, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   21fb4:	42b1      	cmp	r1, r6
   21fb6:	bf28      	it	cs
   21fb8:	f04f 31ff 	movcs.w	r1, #4294967295
   21fbc:	eb0d 0203 	add.w	r2, sp, r3
	rp_hdr.len = len;
   21fc0:	f8ad 501c 	strh.w	r5, [sp, #28]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   21fc4:	f009 f8c9 	bl	2b15a <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   21fc8:	2810      	cmp	r0, #16
	idx = hdr->reserved;
   21fca:	b2bf      	uxth	r7, r7
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   21fcc:	d00b      	beq.n	21fe6 <rpmsg_virtio_send_offchannel_nocopy+0x5e>
   21fce:	4925      	ldr	r1, [pc, #148]	; (22064 <_flash_used+0x2c>)
   21fd0:	4825      	ldr	r0, [pc, #148]	; (22068 <_flash_used+0x30>)
   21fd2:	f44f 73b9 	mov.w	r3, #370	; 0x172
   21fd6:	4a25      	ldr	r2, [pc, #148]	; (2206c <_flash_used+0x34>)
   21fd8:	f004 fba0 	bl	2671c <printk>
   21fdc:	f44f 71b9 	mov.w	r1, #370	; 0x172
   21fe0:	4822      	ldr	r0, [pc, #136]	; (2206c <_flash_used+0x34>)
   21fe2:	f004 fe40 	bl	26c66 <assert_post_action>
	metal_mutex_acquire(&rdev->lock);
   21fe6:	f104 0658 	add.w	r6, r4, #88	; 0x58
	__metal_mutex_acquire(mutex);
   21fea:	4630      	mov	r0, r6
   21fec:	f009 fba8 	bl	2b740 <__metal_mutex_acquire>
#define RPMSG_MASTER	VIRTIO_DEV_MASTER

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   21ff0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_MASTER)
   21ff4:	699b      	ldr	r3, [r3, #24]
   21ff6:	b35b      	cbz	r3, 22050 <_flash_used+0x18>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   21ff8:	4639      	mov	r1, r7
   21ffa:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   21ffe:	f009 fa07 	bl	2b410 <virtqueue_get_buffer_length>
   22002:	4602      	mov	r2, r0
   22004:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   22008:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   2200c:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   2200e:	bb13      	cbnz	r3, 22056 <_flash_used+0x1e>
		vqbuf.len = len;
   22010:	e9cd 8202 	strd	r8, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   22014:	f8cd 8000 	str.w	r8, [sp]
   22018:	2201      	movs	r2, #1
   2201a:	a902      	add	r1, sp, #8
   2201c:	f009 f95e 	bl	2b2dc <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   22020:	b158      	cbz	r0, 2203a <_flash_used+0x2>
   22022:	4913      	ldr	r1, [pc, #76]	; (22070 <_flash_used+0x38>)
   22024:	4810      	ldr	r0, [pc, #64]	; (22068 <_flash_used+0x30>)
   22026:	f240 137f 	movw	r3, #383	; 0x17f
   2202a:	4a10      	ldr	r2, [pc, #64]	; (2206c <_flash_used+0x34>)
   2202c:	f004 fb76 	bl	2671c <printk>
   22030:	f240 117f 	movw	r1, #383	; 0x17f
   22034:	480d      	ldr	r0, [pc, #52]	; (2206c <_flash_used+0x34>)
   22036:	f004 fe16 	bl	26c66 <assert_post_action>
	virtqueue_kick(rvdev->svq);
   2203a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   2203e:	f009 fa6b 	bl	2b518 <virtqueue_kick>
   22042:	4630      	mov	r0, r6
   22044:	f009 fb49 	bl	2b6da <k_sem_give>
}
   22048:	4628      	mov	r0, r5
   2204a:	b008      	add	sp, #32
   2204c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buff_len = RPMSG_BUFFER_SIZE;
   22050:	f44f 7200 	mov.w	r2, #512	; 0x200
   22054:	e7d6      	b.n	22004 <rpmsg_virtio_send_offchannel_nocopy+0x7c>
	if (role == RPMSG_REMOTE) {
   22056:	2b01      	cmp	r3, #1
   22058:	d1ef      	bne.n	2203a <_flash_used+0x2>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   2205a:	4639      	mov	r1, r7
   2205c:	f7ff fe78 	bl	21d50 <virtqueue_add_consumed_buffer>
   22060:	e7de      	b.n	22020 <rpmsg_virtio_send_offchannel_nocopy+0x98>
   22062:	bf00      	nop
   22064:	00030ec1 	.word	0x00030ec1
   22068:	0002cfb2 	.word	0x0002cfb2
   2206c:	00030e72 	.word	0x00030e72
   22070:	00030eda 	.word	0x00030eda

00022074 <rpmsg_virtio_send_offchannel_raw>:
{
   22074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   22078:	4688      	mov	r8, r1
   2207a:	4691      	mov	r9, r2
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   2207c:	a903      	add	r1, sp, #12
   2207e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   22080:	4606      	mov	r6, r0
   22082:	469a      	mov	sl, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   22084:	f009 fbd4 	bl	2b830 <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   22088:	4604      	mov	r4, r0
   2208a:	b350      	cbz	r0, 220e2 <rpmsg_virtio_send_offchannel_raw+0x6e>
	if (len > (int)buff_len)
   2208c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2208e:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   22090:	f8d6 0098 	ldr.w	r0, [r6, #152]	; 0x98
   22094:	429d      	cmp	r5, r3
   22096:	bfa8      	it	ge
   22098:	461d      	movge	r5, r3
   2209a:	6807      	ldr	r7, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   2209c:	6881      	ldr	r1, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   2209e:	1be7      	subs	r7, r4, r7
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   220a0:	428f      	cmp	r7, r1
   220a2:	bf34      	ite	cc
   220a4:	4639      	movcc	r1, r7
   220a6:	f04f 31ff 	movcs.w	r1, #4294967295
   220aa:	462b      	mov	r3, r5
   220ac:	4652      	mov	r2, sl
   220ae:	f009 f854 	bl	2b15a <metal_io_block_write>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
   220b2:	4285      	cmp	r5, r0
   220b4:	d00b      	beq.n	220ce <rpmsg_virtio_send_offchannel_raw+0x5a>
   220b6:	490c      	ldr	r1, [pc, #48]	; (220e8 <rpmsg_virtio_send_offchannel_raw+0x74>)
   220b8:	480c      	ldr	r0, [pc, #48]	; (220ec <rpmsg_virtio_send_offchannel_raw+0x78>)
   220ba:	f240 13af 	movw	r3, #431	; 0x1af
   220be:	4a0c      	ldr	r2, [pc, #48]	; (220f0 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   220c0:	f004 fb2c 	bl	2671c <printk>
   220c4:	f240 11af 	movw	r1, #431	; 0x1af
   220c8:	4809      	ldr	r0, [pc, #36]	; (220f0 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   220ca:	f004 fdcc 	bl	26c66 <assert_post_action>
	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   220ce:	4623      	mov	r3, r4
   220d0:	464a      	mov	r2, r9
   220d2:	4641      	mov	r1, r8
   220d4:	4630      	mov	r0, r6
   220d6:	9500      	str	r5, [sp, #0]
   220d8:	f7ff ff56 	bl	21f88 <rpmsg_virtio_send_offchannel_nocopy>
}
   220dc:	b004      	add	sp, #16
   220de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return RPMSG_ERR_NO_BUFF;
   220e2:	4804      	ldr	r0, [pc, #16]	; (220f4 <rpmsg_virtio_send_offchannel_raw+0x80>)
   220e4:	e7fa      	b.n	220dc <rpmsg_virtio_send_offchannel_raw+0x68>
   220e6:	bf00      	nop
   220e8:	00030ee6 	.word	0x00030ee6
   220ec:	0002cfb2 	.word	0x0002cfb2
   220f0:	00030e72 	.word	0x00030e72
   220f4:	fffff82e 	.word	0xfffff82e

000220f8 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
   220f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   220fc:	460d      	mov	r5, r1
   220fe:	b088      	sub	sp, #32
   22100:	4617      	mov	r7, r2
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   22102:	2100      	movs	r1, #0
   22104:	228c      	movs	r2, #140	; 0x8c
{
   22106:	4604      	mov	r4, r0
   22108:	461e      	mov	r6, r3
   2210a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	memset(rdev, 0, sizeof(*rdev));
   2210e:	f006 fa6b 	bl	285e8 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   22112:	2201      	movs	r2, #1
   22114:	f104 0058 	add.w	r0, r4, #88	; 0x58
   22118:	4611      	mov	r1, r2
   2211a:	f009 fc64 	bl	2b9e6 <z_impl_k_sem_init>
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   2211e:	4b67      	ldr	r3, [pc, #412]	; (222bc <rpmsg_init_vdev+0x1c4>)
	rvdev->vdev = vdev;
   22120:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
	rdev->ns_bind_cb = ns_bind_cb;
   22124:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   22126:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   22128:	6763      	str	r3, [r4, #116]	; 0x74
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   2212a:	4b65      	ldr	r3, [pc, #404]	; (222c0 <rpmsg_init_vdev+0x1c8>)
   2212c:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   2212e:	4b65      	ldr	r3, [pc, #404]	; (222c4 <rpmsg_init_vdev+0x1cc>)
   22130:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   22132:	4b65      	ldr	r3, [pc, #404]	; (222c8 <rpmsg_init_vdev+0x1d0>)
   22134:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   22138:	4b64      	ldr	r3, [pc, #400]	; (222cc <rpmsg_init_vdev+0x1d4>)
   2213a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   2213e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   22142:	f8d3 8018 	ldr.w	r8, [r3, #24]
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
   22146:	f1b8 0f01 	cmp.w	r8, #1
   2214a:	d021      	beq.n	22190 <rpmsg_init_vdev+0x98>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
   2214c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   22150:	6a03      	ldr	r3, [r0, #32]
   22152:	689b      	ldr	r3, [r3, #8]
   22154:	4798      	blx	r3
   22156:	2300      	movs	r3, #0
   22158:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   2215a:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   2215e:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   22160:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   22164:	f1b8 0f00 	cmp.w	r8, #0
   22168:	d020      	beq.n	221ac <rpmsg_init_vdev+0xb4>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
   2216a:	f1b8 0f01 	cmp.w	r8, #1
   2216e:	d135      	bne.n	221dc <rpmsg_init_vdev+0xe4>
		vq_names[0] = "tx_vq";
   22170:	4b57      	ldr	r3, [pc, #348]	; (222d0 <rpmsg_init_vdev+0x1d8>)
   22172:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
   22174:	4b57      	ldr	r3, [pc, #348]	; (222d4 <rpmsg_init_vdev+0x1dc>)
   22176:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
   22178:	4b57      	ldr	r3, [pc, #348]	; (222d8 <rpmsg_init_vdev+0x1e0>)
   2217a:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
   2217c:	4b57      	ldr	r3, [pc, #348]	; (222dc <rpmsg_init_vdev+0x1e4>)
   2217e:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   22180:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   22182:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   22184:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   22186:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		rvdev->svq  = vdev->vrings_info[0].vq;
   2218a:	e025      	b.n	221d8 <rpmsg_init_vdev+0xe0>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   2218c:	0743      	lsls	r3, r0, #29
   2218e:	d4dd      	bmi.n	2214c <rpmsg_init_vdev+0x54>
		status = rpmsg_virtio_get_status(rvdev);
   22190:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	return rvdev->vdev->func->get_status(rvdev->vdev);
   22194:	6a03      	ldr	r3, [r0, #32]
   22196:	681b      	ldr	r3, [r3, #0]
   22198:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   2219a:	0642      	lsls	r2, r0, #25
   2219c:	d5f6      	bpl.n	2218c <rpmsg_init_vdev+0x94>
			rpmsg_virtio_set_status(rvdev, 0);
   2219e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   221a2:	2100      	movs	r1, #0
   221a4:	6a03      	ldr	r3, [r0, #32]
   221a6:	685b      	ldr	r3, [r3, #4]
   221a8:	4798      	blx	r3
}
   221aa:	e7f1      	b.n	22190 <rpmsg_init_vdev+0x98>
		if (!shpool)
   221ac:	f1b9 0f00 	cmp.w	r9, #0
   221b0:	d07f      	beq.n	222b2 <rpmsg_init_vdev+0x1ba>
		if (!shpool->size)
   221b2:	f8d9 3008 	ldr.w	r3, [r9, #8]
   221b6:	2b00      	cmp	r3, #0
   221b8:	d07d      	beq.n	222b6 <rpmsg_init_vdev+0x1be>
		vq_names[0] = "rx_vq";
   221ba:	4b46      	ldr	r3, [pc, #280]	; (222d4 <rpmsg_init_vdev+0x1dc>)
		rvdev->shpool = shpool;
   221bc:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
		vq_names[0] = "rx_vq";
   221c0:	9302      	str	r3, [sp, #8]
		vq_names[1] = "tx_vq";
   221c2:	4b43      	ldr	r3, [pc, #268]	; (222d0 <rpmsg_init_vdev+0x1d8>)
   221c4:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_rx_callback;
   221c6:	4b45      	ldr	r3, [pc, #276]	; (222dc <rpmsg_init_vdev+0x1e4>)
   221c8:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_tx_callback;
   221ca:	4b43      	ldr	r3, [pc, #268]	; (222d8 <rpmsg_init_vdev+0x1e0>)
   221cc:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   221ce:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   221d0:	681a      	ldr	r2, [r3, #0]
		rvdev->svq  = vdev->vrings_info[1].vq;
   221d2:	699b      	ldr	r3, [r3, #24]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   221d4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		rvdev->svq  = vdev->vrings_info[0].vq;
   221d8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   221dc:	ab04      	add	r3, sp, #16
   221de:	9300      	str	r3, [sp, #0]
   221e0:	2202      	movs	r2, #2
   221e2:	2100      	movs	r1, #0
   221e4:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
   221e8:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
   221ec:	ab02      	add	r3, sp, #8
   221ee:	f7ff fd5f 	bl	21cb0 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
   221f2:	4607      	mov	r7, r0
   221f4:	2800      	cmp	r0, #0
   221f6:	d158      	bne.n	222aa <rpmsg_init_vdev+0x1b2>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
   221f8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   221fc:	f009 f962 	bl	2b4c4 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
   22200:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		vq->shm_io = shm_io;
   22202:	681a      	ldr	r2, [r3, #0]
   22204:	699b      	ldr	r3, [r3, #24]
   22206:	6296      	str	r6, [r2, #40]	; 0x28
   22208:	629e      	str	r6, [r3, #40]	; 0x28
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   2220a:	f1b8 0f00 	cmp.w	r8, #0
   2220e:	d108      	bne.n	22222 <rpmsg_init_vdev+0x12a>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
   22210:	f44f 7300 	mov.w	r3, #512	; 0x200
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   22214:	46c2      	mov	sl, r8
		vqbuf.len = RPMSG_BUFFER_SIZE;
   22216:	9307      	str	r3, [sp, #28]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   22218:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   2221c:	895b      	ldrh	r3, [r3, #10]
   2221e:	4553      	cmp	r3, sl
   22220:	d820      	bhi.n	22264 <rpmsg_init_vdev+0x16c>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
   22222:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   22226:	e9c4 4400 	strd	r4, r4, [r4]
   2222a:	b18b      	cbz	r3, 22250 <rpmsg_init_vdev+0x158>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
   2222c:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   22230:	492b      	ldr	r1, [pc, #172]	; (222e0 <rpmsg_init_vdev+0x1e8>)
   22232:	2220      	movs	r2, #32
   22234:	4628      	mov	r0, r5
   22236:	f006 f95e 	bl	284f6 <strncpy>
	ept->addr = src;
   2223a:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
   2223c:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
   22240:	4b28      	ldr	r3, [pc, #160]	; (222e4 <rpmsg_init_vdev+0x1ec>)
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
   22242:	4629      	mov	r1, r5
   22244:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
   22246:	2300      	movs	r3, #0
   22248:	4620      	mov	r0, r4
   2224a:	63a3      	str	r3, [r4, #56]	; 0x38
   2224c:	f009 fa1c 	bl	2b688 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
   22250:	f1b8 0f00 	cmp.w	r8, #0
   22254:	d129      	bne.n	222aa <rpmsg_init_vdev+0x1b2>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   22256:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   2225a:	2104      	movs	r1, #4
   2225c:	6a03      	ldr	r3, [r0, #32]
   2225e:	685b      	ldr	r3, [r3, #4]
   22260:	4798      	blx	r3
}
   22262:	e022      	b.n	222aa <rpmsg_init_vdev+0x1b2>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   22264:	f44f 7100 	mov.w	r1, #512	; 0x200
   22268:	4648      	mov	r0, r9
   2226a:	f009 fad3 	bl	2b814 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   2226e:	4605      	mov	r5, r0
   22270:	b1c8      	cbz	r0, 222a6 <rpmsg_init_vdev+0x1ae>
   22272:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   22274:	9006      	str	r0, [sp, #24]
   22276:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   22278:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   2227a:	f44f 7300 	mov.w	r3, #512	; 0x200
   2227e:	4281      	cmp	r1, r0
   22280:	bf28      	it	cs
   22282:	f04f 31ff 	movcs.w	r1, #4294967295
   22286:	2200      	movs	r2, #0
   22288:	4630      	mov	r0, r6
   2228a:	f008 ffa1 	bl	2b1d0 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   2228e:	2301      	movs	r3, #1
   22290:	2200      	movs	r2, #0
   22292:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   22296:	9500      	str	r5, [sp, #0]
   22298:	a906      	add	r1, sp, #24
   2229a:	f009 f81f 	bl	2b2dc <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   2229e:	b918      	cbnz	r0, 222a8 <rpmsg_init_vdev+0x1b0>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   222a0:	f10a 0a01 	add.w	sl, sl, #1
   222a4:	e7b8      	b.n	22218 <rpmsg_init_vdev+0x120>
				return RPMSG_ERR_NO_BUFF;
   222a6:	4810      	ldr	r0, [pc, #64]	; (222e8 <rpmsg_init_vdev+0x1f0>)
   222a8:	4607      	mov	r7, r0
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
   222aa:	4638      	mov	r0, r7
   222ac:	b008      	add	sp, #32
   222ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return RPMSG_ERR_PARAM;
   222b2:	4f0e      	ldr	r7, [pc, #56]	; (222ec <rpmsg_init_vdev+0x1f4>)
   222b4:	e7f9      	b.n	222aa <rpmsg_init_vdev+0x1b2>
			return RPMSG_ERR_NO_BUFF;
   222b6:	4f0c      	ldr	r7, [pc, #48]	; (222e8 <rpmsg_init_vdev+0x1f0>)
   222b8:	e7f7      	b.n	222aa <rpmsg_init_vdev+0x1b2>
   222ba:	bf00      	nop
   222bc:	00022075 	.word	0x00022075
   222c0:	0002b6cb 	.word	0x0002b6cb
   222c4:	0002b7dd 	.word	0x0002b7dd
   222c8:	0002b831 	.word	0x0002b831
   222cc:	00021f89 	.word	0x00021f89
   222d0:	00030efa 	.word	0x00030efa
   222d4:	00030ef4 	.word	0x00030ef4
   222d8:	0002b6d9 	.word	0x0002b6d9
   222dc:	00021ea9 	.word	0x00021ea9
   222e0:	00030f00 	.word	0x00030f00
   222e4:	0002b74d 	.word	0x0002b74d
   222e8:	fffff82e 	.word	0xfffff82e
   222ec:	fffff82d 	.word	0xfffff82d

000222f0 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   222f0:	2303      	movs	r3, #3
static void _DoInit(void) {
   222f2:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   222f4:	4c10      	ldr	r4, [pc, #64]	; (22338 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   222f6:	4a11      	ldr	r2, [pc, #68]	; (2233c <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   222f8:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   222fa:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   222fc:	4b10      	ldr	r3, [pc, #64]	; (22340 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   222fe:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   22300:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   22302:	f44f 6380 	mov.w	r3, #1024	; 0x400
   22306:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   22308:	2300      	movs	r3, #0
   2230a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   2230c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2230e:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   22310:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   22312:	4a0c      	ldr	r2, [pc, #48]	; (22344 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   22314:	490c      	ldr	r1, [pc, #48]	; (22348 <_DoInit+0x58>)
  p->aDown[0].pBuffer       = _acDownBuffer;
   22316:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   22318:	2210      	movs	r2, #16
  STRCPY((char*)&p->acID[7], "RTT");
   2231a:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   2231c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   2231e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   22320:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   22322:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   22324:	f006 f8dd 	bl	284e2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   22328:	4620      	mov	r0, r4
   2232a:	4908      	ldr	r1, [pc, #32]	; (2234c <_DoInit+0x5c>)
   2232c:	f006 f8d9 	bl	284e2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   22330:	2320      	movs	r3, #32
   22332:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   22334:	bd10      	pop	{r4, pc}
   22336:	bf00      	nop
   22338:	20009b00 	.word	0x20009b00
   2233c:	00030f03 	.word	0x00030f03
   22340:	2000a52f 	.word	0x2000a52f
   22344:	2000a51f 	.word	0x2000a51f
   22348:	00030f0c 	.word	0x00030f0c
   2234c:	00030f10 	.word	0x00030f10

00022350 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   22350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   22354:	f04f 0b18 	mov.w	fp, #24
   22358:	4f22      	ldr	r7, [pc, #136]	; (223e4 <SEGGER_RTT_WriteSkipNoLock+0x94>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2235a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   2235c:	fb0b 7200 	mla	r2, fp, r0, r7
   22360:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   22362:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   22364:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   22366:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   22368:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   2236a:	d834      	bhi.n	223d6 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   2236c:	f8d2 a020 	ldr.w	sl, [r2, #32]
   22370:	ebaa 0905 	sub.w	r9, sl, r5
   22374:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   22378:	4294      	cmp	r4, r2
   2237a:	d811      	bhi.n	223a0 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2237c:	f04f 0918 	mov.w	r9, #24
   22380:	fb06 9309 	mla	r3, r6, r9, r9
   22384:	443b      	add	r3, r7
   22386:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   22388:	4622      	mov	r2, r4
   2238a:	4641      	mov	r1, r8
   2238c:	4428      	add	r0, r5
   2238e:	f006 f900 	bl	28592 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   22392:	fb09 7606 	mla	r6, r9, r6, r7
   22396:	442c      	add	r4, r5
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
      return 1;
   22398:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   2239a:	6274      	str	r4, [r6, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   2239c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   223a0:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   223a2:	429c      	cmp	r4, r3
   223a4:	d81b      	bhi.n	223de <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   223a6:	fb00 bb0b 	mla	fp, r0, fp, fp
   223aa:	44bb      	add	fp, r7
   223ac:	f8db 0004 	ldr.w	r0, [fp, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   223b0:	464a      	mov	r2, r9
   223b2:	4428      	add	r0, r5
   223b4:	442c      	add	r4, r5
   223b6:	f006 f8ec 	bl	28592 <memcpy>
      if (NumBytes) {
   223ba:	ebb4 040a 	subs.w	r4, r4, sl
   223be:	d006      	beq.n	223ce <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   223c0:	4622      	mov	r2, r4
   223c2:	f8db 0004 	ldr.w	r0, [fp, #4]
   223c6:	eb08 0109 	add.w	r1, r8, r9
   223ca:	f006 f8e2 	bl	28592 <memcpy>
      pRing->WrOff = NumBytes;
   223ce:	2018      	movs	r0, #24
   223d0:	fb00 7606 	mla	r6, r0, r6, r7
   223d4:	e7e0      	b.n	22398 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   223d6:	3b01      	subs	r3, #1
   223d8:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   223da:	42a3      	cmp	r3, r4
   223dc:	d2ce      	bcs.n	2237c <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   223de:	2000      	movs	r0, #0
   223e0:	e7dc      	b.n	2239c <SEGGER_RTT_WriteSkipNoLock+0x4c>
   223e2:	bf00      	nop
   223e4:	20009b00 	.word	0x20009b00

000223e8 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   223e8:	2218      	movs	r2, #24
   223ea:	4b03      	ldr	r3, [pc, #12]	; (223f8 <SEGGER_RTT_HasDataUp+0x10>)
   223ec:	fb02 3300 	mla	r3, r2, r0, r3
   223f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   223f2:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   223f4:	1a80      	subs	r0, r0, r2
   223f6:	4770      	bx	lr
   223f8:	20009b00 	.word	0x20009b00

000223fc <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   223fc:	4b0e      	ldr	r3, [pc, #56]	; (22438 <z_sys_init_run_level+0x3c>)
{
   223fe:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   22400:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   22404:	3001      	adds	r0, #1
   22406:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2240a:	42a6      	cmp	r6, r4
   2240c:	d800      	bhi.n	22410 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   2240e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   22410:	e9d4 3500 	ldrd	r3, r5, [r4]
   22414:	4628      	mov	r0, r5
   22416:	4798      	blx	r3
		if (dev != NULL) {
   22418:	b165      	cbz	r5, 22434 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   2241a:	68eb      	ldr	r3, [r5, #12]
   2241c:	b130      	cbz	r0, 2242c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   2241e:	2800      	cmp	r0, #0
   22420:	bfb8      	it	lt
   22422:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   22424:	28ff      	cmp	r0, #255	; 0xff
   22426:	bfa8      	it	ge
   22428:	20ff      	movge	r0, #255	; 0xff
   2242a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   2242c:	785a      	ldrb	r2, [r3, #1]
   2242e:	f042 0201 	orr.w	r2, r2, #1
   22432:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   22434:	3408      	adds	r4, #8
   22436:	e7e8      	b.n	2240a <z_sys_init_run_level+0xe>
   22438:	0002ca28 	.word	0x0002ca28

0002243c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   2243c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   2243e:	4605      	mov	r5, r0
   22440:	b910      	cbnz	r0, 22448 <z_impl_device_get_binding+0xc>
		return NULL;
   22442:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   22444:	4620      	mov	r0, r4
   22446:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   22448:	7803      	ldrb	r3, [r0, #0]
   2244a:	2b00      	cmp	r3, #0
   2244c:	d0f9      	beq.n	22442 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   2244e:	4a0f      	ldr	r2, [pc, #60]	; (2248c <z_impl_device_get_binding+0x50>)
   22450:	4c0f      	ldr	r4, [pc, #60]	; (22490 <z_impl_device_get_binding+0x54>)
   22452:	4616      	mov	r6, r2
   22454:	4294      	cmp	r4, r2
   22456:	d108      	bne.n	2246a <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   22458:	4c0d      	ldr	r4, [pc, #52]	; (22490 <z_impl_device_get_binding+0x54>)
   2245a:	42b4      	cmp	r4, r6
   2245c:	d0f1      	beq.n	22442 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   2245e:	4620      	mov	r0, r4
   22460:	f009 fa4b 	bl	2b8fa <z_device_ready>
   22464:	b950      	cbnz	r0, 2247c <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   22466:	3418      	adds	r4, #24
   22468:	e7f7      	b.n	2245a <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   2246a:	4620      	mov	r0, r4
   2246c:	f009 fa45 	bl	2b8fa <z_device_ready>
   22470:	b110      	cbz	r0, 22478 <z_impl_device_get_binding+0x3c>
   22472:	6823      	ldr	r3, [r4, #0]
   22474:	42ab      	cmp	r3, r5
   22476:	d0e5      	beq.n	22444 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   22478:	3418      	adds	r4, #24
   2247a:	e7eb      	b.n	22454 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   2247c:	4628      	mov	r0, r5
   2247e:	6821      	ldr	r1, [r4, #0]
   22480:	f006 f85c 	bl	2853c <strcmp>
   22484:	2800      	cmp	r0, #0
   22486:	d1ee      	bne.n	22466 <z_impl_device_get_binding+0x2a>
   22488:	e7dc      	b.n	22444 <z_impl_device_get_binding+0x8>
   2248a:	bf00      	nop
   2248c:	2000849c 	.word	0x2000849c
   22490:	200083c4 	.word	0x200083c4

00022494 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   22494:	4b01      	ldr	r3, [pc, #4]	; (2249c <z_impl_z_errno+0x8>)
   22496:	6898      	ldr	r0, [r3, #8]
}
   22498:	3064      	adds	r0, #100	; 0x64
   2249a:	4770      	bx	lr
   2249c:	20009ba8 	.word	0x20009ba8

000224a0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   224a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   224a4:	4605      	mov	r5, r0
   224a6:	460f      	mov	r7, r1
	__asm__ volatile(
   224a8:	f04f 0320 	mov.w	r3, #32
   224ac:	f3ef 8811 	mrs	r8, BASEPRI
   224b0:	f383 8811 	msr	BASEPRI, r3
   224b4:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   224b8:	f002 fee8 	bl	2528c <z_impl_k_current_get>
   224bc:	4c28      	ldr	r4, [pc, #160]	; (22560 <z_fatal_error+0xc0>)
   224be:	4b29      	ldr	r3, [pc, #164]	; (22564 <z_fatal_error+0xc4>)
   224c0:	2d04      	cmp	r5, #4
   224c2:	eba4 0403 	sub.w	r4, r4, r3
   224c6:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   224ca:	bf98      	it	ls
   224cc:	4a26      	ldrls	r2, [pc, #152]	; (22568 <z_fatal_error+0xc8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   224ce:	ea4f 1484 	mov.w	r4, r4, lsl #6
   224d2:	f044 0301 	orr.w	r3, r4, #1
   224d6:	4606      	mov	r6, r0
	switch (reason) {
   224d8:	bf94      	ite	ls
   224da:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   224de:	4a23      	ldrhi	r2, [pc, #140]	; (2256c <z_fatal_error+0xcc>)
   224e0:	f8ad 3000 	strh.w	r3, [sp]
   224e4:	4629      	mov	r1, r5
   224e6:	2300      	movs	r3, #0
   224e8:	4821      	ldr	r0, [pc, #132]	; (22570 <z_fatal_error+0xd0>)
   224ea:	f004 fc5b 	bl	26da4 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   224ee:	b147      	cbz	r7, 22502 <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   224f0:	69fb      	ldr	r3, [r7, #28]
   224f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   224f6:	b123      	cbz	r3, 22502 <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   224f8:	481e      	ldr	r0, [pc, #120]	; (22574 <z_fatal_error+0xd4>)
   224fa:	f044 0101 	orr.w	r1, r4, #1
   224fe:	f004 fc17 	bl	26d30 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   22502:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   22506:	b12e      	cbz	r6, 22514 <z_fatal_error+0x74>
   22508:	4630      	mov	r0, r6
   2250a:	f009 fa2c 	bl	2b966 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   2250e:	b108      	cbz	r0, 22514 <z_fatal_error+0x74>
   22510:	7803      	ldrb	r3, [r0, #0]
   22512:	b903      	cbnz	r3, 22516 <z_fatal_error+0x76>
		thread_name = "unknown";
   22514:	4818      	ldr	r0, [pc, #96]	; (22578 <z_fatal_error+0xd8>)
   22516:	f7f0 f9e9 	bl	128ec <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   2251a:	4623      	mov	r3, r4
   2251c:	4602      	mov	r2, r0
   2251e:	4631      	mov	r1, r6
   22520:	4816      	ldr	r0, [pc, #88]	; (2257c <z_fatal_error+0xdc>)
   22522:	f004 fc26 	bl	26d72 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   22526:	4639      	mov	r1, r7
   22528:	4628      	mov	r0, r5
   2252a:	f7fe febb 	bl	212a4 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   2252e:	2d04      	cmp	r5, #4
   22530:	d10c      	bne.n	2254c <z_fatal_error+0xac>
   22532:	4913      	ldr	r1, [pc, #76]	; (22580 <z_fatal_error+0xe0>)
   22534:	238f      	movs	r3, #143	; 0x8f
   22536:	4a13      	ldr	r2, [pc, #76]	; (22584 <z_fatal_error+0xe4>)
   22538:	4813      	ldr	r0, [pc, #76]	; (22588 <z_fatal_error+0xe8>)
   2253a:	f004 f8ef 	bl	2671c <printk>
   2253e:	4813      	ldr	r0, [pc, #76]	; (2258c <z_fatal_error+0xec>)
   22540:	f004 f8ec 	bl	2671c <printk>
   22544:	218f      	movs	r1, #143	; 0x8f
   22546:	480f      	ldr	r0, [pc, #60]	; (22584 <z_fatal_error+0xe4>)
   22548:	f004 fb8d 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   2254c:	f388 8811 	msr	BASEPRI, r8
   22550:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   22554:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   22556:	b002      	add	sp, #8
   22558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2255c:	f7f4 b9c6 	b.w	168ec <z_impl_k_thread_abort>
   22560:	0002c0cc 	.word	0x0002c0cc
   22564:	0002bfe4 	.word	0x0002bfe4
   22568:	0002ca40 	.word	0x0002ca40
   2256c:	00030f17 	.word	0x00030f17
   22570:	00030f2d 	.word	0x00030f2d
   22574:	00030f55 	.word	0x00030f55
   22578:	00030f25 	.word	0x00030f25
   2257c:	00030f76 	.word	0x00030f76
   22580:	00030fb0 	.word	0x00030fb0
   22584:	00030f8e 	.word	0x00030f8e
   22588:	0002cfb2 	.word	0x0002cfb2
   2258c:	00030fcd 	.word	0x00030fcd

00022590 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   22590:	4802      	ldr	r0, [pc, #8]	; (2259c <z_bss_zero+0xc>)
   22592:	4a03      	ldr	r2, [pc, #12]	; (225a0 <z_bss_zero+0x10>)
   22594:	2100      	movs	r1, #0
   22596:	1a12      	subs	r2, r2, r0
   22598:	f006 b826 	b.w	285e8 <memset>
   2259c:	20008720 	.word	0x20008720
   225a0:	2000a930 	.word	0x2000a930

000225a4 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   225a4:	2201      	movs	r2, #1
{
   225a6:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   225a8:	4b09      	ldr	r3, [pc, #36]	; (225d0 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   225aa:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   225ac:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   225ae:	f7ff ff25 	bl	223fc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   225b2:	f004 f80b 	bl	265cc <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   225b6:	2003      	movs	r0, #3
   225b8:	f7ff ff20 	bl	223fc <z_sys_init_run_level>

	z_init_static_threads();
   225bc:	f000 fb7c 	bl	22cb8 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   225c0:	f7ee ff12 	bl	113e8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   225c4:	4a03      	ldr	r2, [pc, #12]	; (225d4 <bg_thread_main+0x30>)
   225c6:	7b13      	ldrb	r3, [r2, #12]
   225c8:	f023 0301 	bic.w	r3, r3, #1
   225cc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   225ce:	bd08      	pop	{r3, pc}
   225d0:	2000a92f 	.word	0x2000a92f
   225d4:	200090f0 	.word	0x200090f0

000225d8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   225d8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   225dc:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   225de:	f7f0 f89d 	bl	1271c <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   225e2:	4b37      	ldr	r3, [pc, #220]	; (226c0 <z_cstart+0xe8>)
	uint32_t msp =
   225e4:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   225e8:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   225ec:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   225f0:	2400      	movs	r4, #0
   225f2:	23e0      	movs	r3, #224	; 0xe0
   225f4:	4d33      	ldr	r5, [pc, #204]	; (226c4 <z_cstart+0xec>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   225f6:	f04f 0b01 	mov.w	fp, #1
   225fa:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   225fe:	77ec      	strb	r4, [r5, #31]
   22600:	762c      	strb	r4, [r5, #24]
   22602:	766c      	strb	r4, [r5, #25]
   22604:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   22606:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   22608:	4e2f      	ldr	r6, [pc, #188]	; (226c8 <z_cstart+0xf0>)
   2260a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2260e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   22610:	f7f4 f934 	bl	1687c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   22614:	f7f3 fe2c 	bl	16270 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   22618:	f04f 33ff 	mov.w	r3, #4294967295
   2261c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2261e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   22620:	f7f4 fb26 	bl	16c70 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   22624:	f7f4 f974 	bl	16910 <z_arm_configure_static_mpu_regions>
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   22628:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   2262c:	4d27      	ldr	r5, [pc, #156]	; (226cc <z_cstart+0xf4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   2262e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   22632:	ab06      	add	r3, sp, #24
   22634:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   22636:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2263a:	f009 f95d 	bl	2b8f8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2263e:	4620      	mov	r0, r4
   22640:	f7ff fedc 	bl	223fc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   22644:	2001      	movs	r0, #1
   22646:	f7ff fed9 	bl	223fc <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2264a:	f8df a098 	ldr.w	sl, [pc, #152]	; 226e4 <z_cstart+0x10c>
	z_sched_init();
   2264e:	f002 fc89 	bl	24f64 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   22652:	4b1f      	ldr	r3, [pc, #124]	; (226d0 <z_cstart+0xf8>)
	_kernel.ready_q.cache = &z_main_thread;
   22654:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   22656:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2265a:	491e      	ldr	r1, [pc, #120]	; (226d4 <z_cstart+0xfc>)
   2265c:	9305      	str	r3, [sp, #20]
   2265e:	4630      	mov	r0, r6
   22660:	4653      	mov	r3, sl
   22662:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   22666:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2266a:	9400      	str	r4, [sp, #0]
   2266c:	f000 fa76 	bl	22b5c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   22670:	7b73      	ldrb	r3, [r6, #13]
   22672:	4680      	mov	r8, r0
   22674:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   22678:	4630      	mov	r0, r6
   2267a:	7373      	strb	r3, [r6, #13]
   2267c:	f002 fa42 	bl	24b04 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   22680:	230f      	movs	r3, #15
   22682:	4f15      	ldr	r7, [pc, #84]	; (226d8 <z_cstart+0x100>)
   22684:	f44f 72a0 	mov.w	r2, #320	; 0x140
   22688:	e9cd 4302 	strd	r4, r3, [sp, #8]
   2268c:	4913      	ldr	r1, [pc, #76]	; (226dc <z_cstart+0x104>)
   2268e:	4b14      	ldr	r3, [pc, #80]	; (226e0 <z_cstart+0x108>)
   22690:	4638      	mov	r0, r7
   22692:	e9cd b404 	strd	fp, r4, [sp, #16]
   22696:	e9cd 5400 	strd	r5, r4, [sp]
   2269a:	f000 fa5f 	bl	22b5c <z_setup_new_thread>
   2269e:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   226a0:	4652      	mov	r2, sl
   226a2:	f023 0304 	bic.w	r3, r3, #4
   226a6:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   226a8:	f105 0318 	add.w	r3, r5, #24
   226ac:	4641      	mov	r1, r8
   226ae:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   226b0:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   226b4:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   226b6:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   226b8:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   226bc:	f7f3 fdc4 	bl	16248 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   226c0:	2000c760 	.word	0x2000c760
   226c4:	e000ed00 	.word	0xe000ed00
   226c8:	200090f0 	.word	0x200090f0
   226cc:	20009ba8 	.word	0x20009ba8
   226d0:	0003104c 	.word	0x0003104c
   226d4:	2000c220 	.word	0x2000c220
   226d8:	20009070 	.word	0x20009070
   226dc:	2000c620 	.word	0x2000c620
   226e0:	00022e21 	.word	0x00022e21
   226e4:	000225a5 	.word	0x000225a5

000226e8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   226e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   226ea:	4d0f      	ldr	r5, [pc, #60]	; (22728 <statics_init+0x40>)
   226ec:	4c0f      	ldr	r4, [pc, #60]	; (2272c <statics_init+0x44>)
   226ee:	462f      	mov	r7, r5
   226f0:	4e0f      	ldr	r6, [pc, #60]	; (22730 <statics_init+0x48>)
   226f2:	42ac      	cmp	r4, r5
   226f4:	d90c      	bls.n	22710 <statics_init+0x28>
   226f6:	490f      	ldr	r1, [pc, #60]	; (22734 <statics_init+0x4c>)
   226f8:	2317      	movs	r3, #23
   226fa:	4632      	mov	r2, r6
   226fc:	480e      	ldr	r0, [pc, #56]	; (22738 <statics_init+0x50>)
   226fe:	f004 f80d 	bl	2671c <printk>
   22702:	480e      	ldr	r0, [pc, #56]	; (2273c <statics_init+0x54>)
   22704:	f004 f80a 	bl	2671c <printk>
   22708:	2117      	movs	r1, #23
   2270a:	4630      	mov	r0, r6
   2270c:	f004 faab 	bl	26c66 <assert_post_action>
   22710:	42bc      	cmp	r4, r7
   22712:	d301      	bcc.n	22718 <statics_init+0x30>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   22714:	2000      	movs	r0, #0
   22716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   22718:	4620      	mov	r0, r4
   2271a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   2271e:	f009 f8f5 	bl	2b90c <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   22722:	3418      	adds	r4, #24
   22724:	e7e5      	b.n	226f2 <statics_init+0xa>
   22726:	bf00      	nop
   22728:	20008514 	.word	0x20008514
   2272c:	200084fc 	.word	0x200084fc
   22730:	00031054 	.word	0x00031054
   22734:	00031076 	.word	0x00031076
   22738:	0002cfb2 	.word	0x0002cfb2
   2273c:	0002d8a9 	.word	0x0002d8a9

00022740 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   22740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22744:	b087      	sub	sp, #28
   22746:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   2274a:	4606      	mov	r6, r0
   2274c:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2274e:	4640      	mov	r0, r8
   22750:	4649      	mov	r1, r9
{
   22752:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   22754:	f009 f9e2 	bl	2bb1c <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   22758:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2275c:	e9cd 0104 	strd	r0, r1, [sp, #16]
	__asm__ volatile(
   22760:	f04f 0320 	mov.w	r3, #32
   22764:	f3ef 8511 	mrs	r5, BASEPRI
   22768:	f383 8811 	msr	BASEPRI, r3
   2276c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22770:	4620      	mov	r0, r4
   22772:	f000 fb31 	bl	22dd8 <z_spin_lock_valid>
   22776:	b968      	cbnz	r0, 22794 <k_heap_aligned_alloc+0x54>
   22778:	2381      	movs	r3, #129	; 0x81
   2277a:	4a3f      	ldr	r2, [pc, #252]	; (22878 <k_heap_aligned_alloc+0x138>)
   2277c:	493f      	ldr	r1, [pc, #252]	; (2287c <k_heap_aligned_alloc+0x13c>)
   2277e:	4840      	ldr	r0, [pc, #256]	; (22880 <k_heap_aligned_alloc+0x140>)
   22780:	f003 ffcc 	bl	2671c <printk>
   22784:	4621      	mov	r1, r4
   22786:	483f      	ldr	r0, [pc, #252]	; (22884 <k_heap_aligned_alloc+0x144>)
   22788:	f003 ffc8 	bl	2671c <printk>
   2278c:	2181      	movs	r1, #129	; 0x81
   2278e:	483a      	ldr	r0, [pc, #232]	; (22878 <k_heap_aligned_alloc+0x138>)
   22790:	f004 fa69 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   22794:	4620      	mov	r0, r4
   22796:	f000 fb3b 	bl	22e10 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2279a:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   2279e:	b17b      	cbz	r3, 227c0 <k_heap_aligned_alloc+0x80>
   227a0:	ea58 0309 	orrs.w	r3, r8, r9
   227a4:	d00c      	beq.n	227c0 <k_heap_aligned_alloc+0x80>
   227a6:	4938      	ldr	r1, [pc, #224]	; (22888 <k_heap_aligned_alloc+0x148>)
   227a8:	2328      	movs	r3, #40	; 0x28
   227aa:	4a38      	ldr	r2, [pc, #224]	; (2288c <k_heap_aligned_alloc+0x14c>)
   227ac:	4834      	ldr	r0, [pc, #208]	; (22880 <k_heap_aligned_alloc+0x140>)
   227ae:	f003 ffb5 	bl	2671c <printk>
   227b2:	4837      	ldr	r0, [pc, #220]	; (22890 <k_heap_aligned_alloc+0x150>)
   227b4:	f003 ffb2 	bl	2671c <printk>
   227b8:	2128      	movs	r1, #40	; 0x28
   227ba:	4834      	ldr	r0, [pc, #208]	; (2288c <k_heap_aligned_alloc+0x14c>)
   227bc:	f004 fa53 	bl	26c66 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   227c0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 22878 <k_heap_aligned_alloc+0x138>
   227c4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 2287c <k_heap_aligned_alloc+0x13c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   227c8:	4652      	mov	r2, sl
   227ca:	4659      	mov	r1, fp
   227cc:	4630      	mov	r0, r6
   227ce:	f7ef fa3f 	bl	11c50 <sys_heap_aligned_alloc>
   227d2:	4607      	mov	r7, r0

		now = sys_clock_tick_get();
   227d4:	f003 f97c 	bl	25ad0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   227d8:	b1cf      	cbz	r7, 2280e <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   227da:	4620      	mov	r0, r4
   227dc:	f000 fb0a 	bl	22df4 <z_spin_unlock_valid>
   227e0:	b968      	cbnz	r0, 227fe <k_heap_aligned_alloc+0xbe>
   227e2:	23ac      	movs	r3, #172	; 0xac
   227e4:	4a24      	ldr	r2, [pc, #144]	; (22878 <k_heap_aligned_alloc+0x138>)
   227e6:	492b      	ldr	r1, [pc, #172]	; (22894 <k_heap_aligned_alloc+0x154>)
   227e8:	4825      	ldr	r0, [pc, #148]	; (22880 <k_heap_aligned_alloc+0x140>)
   227ea:	f003 ff97 	bl	2671c <printk>
   227ee:	4621      	mov	r1, r4
   227f0:	4829      	ldr	r0, [pc, #164]	; (22898 <k_heap_aligned_alloc+0x158>)
   227f2:	f003 ff93 	bl	2671c <printk>
   227f6:	21ac      	movs	r1, #172	; 0xac
   227f8:	481f      	ldr	r0, [pc, #124]	; (22878 <k_heap_aligned_alloc+0x138>)
   227fa:	f004 fa34 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   227fe:	f385 8811 	msr	BASEPRI, r5
   22802:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   22806:	4638      	mov	r0, r7
   22808:	b007      	add	sp, #28
   2280a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2280e:	9b04      	ldr	r3, [sp, #16]
   22810:	1a1b      	subs	r3, r3, r0
   22812:	9302      	str	r3, [sp, #8]
   22814:	9b05      	ldr	r3, [sp, #20]
   22816:	eb63 0301 	sbc.w	r3, r3, r1
   2281a:	9303      	str	r3, [sp, #12]
   2281c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22820:	2a01      	cmp	r2, #1
   22822:	f173 0300 	sbcs.w	r3, r3, #0
   22826:	dbd8      	blt.n	227da <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   22828:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2282c:	4629      	mov	r1, r5
   2282e:	e9cd 2300 	strd	r2, r3, [sp]
   22832:	4620      	mov	r0, r4
   22834:	f106 020c 	add.w	r2, r6, #12
   22838:	f001 ff2a 	bl	24690 <z_pend_curr>
	__asm__ volatile(
   2283c:	f04f 0320 	mov.w	r3, #32
   22840:	f3ef 8511 	mrs	r5, BASEPRI
   22844:	f383 8811 	msr	BASEPRI, r3
   22848:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2284c:	4620      	mov	r0, r4
   2284e:	f000 fac3 	bl	22dd8 <z_spin_lock_valid>
   22852:	b968      	cbnz	r0, 22870 <k_heap_aligned_alloc+0x130>
   22854:	2381      	movs	r3, #129	; 0x81
   22856:	4642      	mov	r2, r8
   22858:	4649      	mov	r1, r9
   2285a:	4809      	ldr	r0, [pc, #36]	; (22880 <k_heap_aligned_alloc+0x140>)
   2285c:	f003 ff5e 	bl	2671c <printk>
   22860:	4621      	mov	r1, r4
   22862:	4808      	ldr	r0, [pc, #32]	; (22884 <k_heap_aligned_alloc+0x144>)
   22864:	f003 ff5a 	bl	2671c <printk>
   22868:	2181      	movs	r1, #129	; 0x81
   2286a:	4640      	mov	r0, r8
   2286c:	f004 f9fb 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   22870:	4620      	mov	r0, r4
   22872:	f000 facd 	bl	22e10 <z_spin_lock_set_owner>
	return k;
   22876:	e7a7      	b.n	227c8 <k_heap_aligned_alloc+0x88>
   22878:	0002d072 	.word	0x0002d072
   2287c:	0002d0c4 	.word	0x0002d0c4
   22880:	0002cfb2 	.word	0x0002cfb2
   22884:	0002d0d9 	.word	0x0002d0d9
   22888:	0003108c 	.word	0x0003108c
   2288c:	00031054 	.word	0x00031054
   22890:	00030725 	.word	0x00030725
   22894:	0002d098 	.word	0x0002d098
   22898:	0002d0af 	.word	0x0002d0af

0002289c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2289c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2289e:	4605      	mov	r5, r0
   228a0:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   228a2:	f100 0414 	add.w	r4, r0, #20
   228a6:	f04f 0320 	mov.w	r3, #32
   228aa:	f3ef 8711 	mrs	r7, BASEPRI
   228ae:	f383 8811 	msr	BASEPRI, r3
   228b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   228b6:	4620      	mov	r0, r4
   228b8:	f000 fa8e 	bl	22dd8 <z_spin_lock_valid>
   228bc:	b968      	cbnz	r0, 228da <k_heap_free+0x3e>
   228be:	2381      	movs	r3, #129	; 0x81
   228c0:	4a1a      	ldr	r2, [pc, #104]	; (2292c <k_heap_free+0x90>)
   228c2:	491b      	ldr	r1, [pc, #108]	; (22930 <k_heap_free+0x94>)
   228c4:	481b      	ldr	r0, [pc, #108]	; (22934 <k_heap_free+0x98>)
   228c6:	f003 ff29 	bl	2671c <printk>
   228ca:	4621      	mov	r1, r4
   228cc:	481a      	ldr	r0, [pc, #104]	; (22938 <k_heap_free+0x9c>)
   228ce:	f003 ff25 	bl	2671c <printk>
   228d2:	2181      	movs	r1, #129	; 0x81
   228d4:	4815      	ldr	r0, [pc, #84]	; (2292c <k_heap_free+0x90>)
   228d6:	f004 f9c6 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   228da:	4620      	mov	r0, r4
   228dc:	f000 fa98 	bl	22e10 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   228e0:	4628      	mov	r0, r5
   228e2:	4631      	mov	r1, r6
   228e4:	f7ef f95e 	bl	11ba4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   228e8:	f105 000c 	add.w	r0, r5, #12
   228ec:	f009 f8fc 	bl	2bae8 <z_unpend_all>
   228f0:	b128      	cbz	r0, 228fe <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   228f2:	4639      	mov	r1, r7
   228f4:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   228f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   228fa:	f001 bc8b 	b.w	24214 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   228fe:	4620      	mov	r0, r4
   22900:	f000 fa78 	bl	22df4 <z_spin_unlock_valid>
   22904:	b968      	cbnz	r0, 22922 <k_heap_free+0x86>
   22906:	23ac      	movs	r3, #172	; 0xac
   22908:	4a08      	ldr	r2, [pc, #32]	; (2292c <k_heap_free+0x90>)
   2290a:	490c      	ldr	r1, [pc, #48]	; (2293c <k_heap_free+0xa0>)
   2290c:	4809      	ldr	r0, [pc, #36]	; (22934 <k_heap_free+0x98>)
   2290e:	f003 ff05 	bl	2671c <printk>
   22912:	4621      	mov	r1, r4
   22914:	480a      	ldr	r0, [pc, #40]	; (22940 <k_heap_free+0xa4>)
   22916:	f003 ff01 	bl	2671c <printk>
   2291a:	21ac      	movs	r1, #172	; 0xac
   2291c:	4803      	ldr	r0, [pc, #12]	; (2292c <k_heap_free+0x90>)
   2291e:	f004 f9a2 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   22922:	f387 8811 	msr	BASEPRI, r7
   22926:	f3bf 8f6f 	isb	sy
}
   2292a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2292c:	0002d072 	.word	0x0002d072
   22930:	0002d0c4 	.word	0x0002d0c4
   22934:	0002cfb2 	.word	0x0002cfb2
   22938:	0002d0d9 	.word	0x0002d0d9
   2293c:	0002d098 	.word	0x0002d098
   22940:	0002d0af 	.word	0x0002d0af

00022944 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   22944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   22948:	4d16      	ldr	r5, [pc, #88]	; (229a4 <init_mem_slab_module+0x60>)
   2294a:	4c17      	ldr	r4, [pc, #92]	; (229a8 <init_mem_slab_module+0x64>)
   2294c:	46a8      	mov	r8, r5
   2294e:	4e17      	ldr	r6, [pc, #92]	; (229ac <init_mem_slab_module+0x68>)
   22950:	42ac      	cmp	r4, r5
   22952:	d90c      	bls.n	2296e <init_mem_slab_module+0x2a>
   22954:	4916      	ldr	r1, [pc, #88]	; (229b0 <init_mem_slab_module+0x6c>)
   22956:	233c      	movs	r3, #60	; 0x3c
   22958:	4632      	mov	r2, r6
   2295a:	4816      	ldr	r0, [pc, #88]	; (229b4 <init_mem_slab_module+0x70>)
   2295c:	f003 fede 	bl	2671c <printk>
   22960:	4815      	ldr	r0, [pc, #84]	; (229b8 <init_mem_slab_module+0x74>)
   22962:	f003 fedb 	bl	2671c <printk>
   22966:	213c      	movs	r1, #60	; 0x3c
   22968:	4630      	mov	r0, r6
   2296a:	f004 f97c 	bl	26c66 <assert_post_action>
   2296e:	4544      	cmp	r4, r8
   22970:	d302      	bcc.n	22978 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
   22972:	2000      	movs	r0, #0
	return rc;
}
   22974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   22978:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
   2297c:	ea41 0302 	orr.w	r3, r1, r2
   22980:	f013 0303 	ands.w	r3, r3, #3
   22984:	d10b      	bne.n	2299e <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   22986:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   22988:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2298a:	4283      	cmp	r3, r0
   2298c:	d101      	bne.n	22992 <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2298e:	3420      	adds	r4, #32
   22990:	e7de      	b.n	22950 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   22992:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   22994:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   22996:	600f      	str	r7, [r1, #0]
		slab->free_list = p;
   22998:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
   2299a:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2299c:	e7f5      	b.n	2298a <init_mem_slab_module+0x46>
		return -EINVAL;
   2299e:	f06f 0015 	mvn.w	r0, #21
	return rc;
   229a2:	e7e7      	b.n	22974 <init_mem_slab_module+0x30>
   229a4:	200084fc 	.word	0x200084fc
   229a8:	2000849c 	.word	0x2000849c
   229ac:	000310d1 	.word	0x000310d1
   229b0:	000310f6 	.word	0x000310f6
   229b4:	0002cfb2 	.word	0x0002cfb2
   229b8:	0002d8a9 	.word	0x0002d8a9

000229bc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   229bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   229c0:	4604      	mov	r4, r0
   229c2:	460e      	mov	r6, r1
   229c4:	4690      	mov	r8, r2
   229c6:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   229c8:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   229cc:	f04f 0320 	mov.w	r3, #32
   229d0:	f3ef 8711 	mrs	r7, BASEPRI
   229d4:	f383 8811 	msr	BASEPRI, r3
   229d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   229dc:	4628      	mov	r0, r5
   229de:	f000 f9fb 	bl	22dd8 <z_spin_lock_valid>
   229e2:	b968      	cbnz	r0, 22a00 <k_mem_slab_alloc+0x44>
   229e4:	2381      	movs	r3, #129	; 0x81
   229e6:	4a24      	ldr	r2, [pc, #144]	; (22a78 <k_mem_slab_alloc+0xbc>)
   229e8:	4924      	ldr	r1, [pc, #144]	; (22a7c <k_mem_slab_alloc+0xc0>)
   229ea:	4825      	ldr	r0, [pc, #148]	; (22a80 <k_mem_slab_alloc+0xc4>)
   229ec:	f003 fe96 	bl	2671c <printk>
   229f0:	4629      	mov	r1, r5
   229f2:	4824      	ldr	r0, [pc, #144]	; (22a84 <k_mem_slab_alloc+0xc8>)
   229f4:	f003 fe92 	bl	2671c <printk>
   229f8:	2181      	movs	r1, #129	; 0x81
   229fa:	481f      	ldr	r0, [pc, #124]	; (22a78 <k_mem_slab_alloc+0xbc>)
   229fc:	f004 f933 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   22a00:	4628      	mov	r0, r5
   22a02:	f000 fa05 	bl	22e10 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   22a06:	69a3      	ldr	r3, [r4, #24]
   22a08:	b1eb      	cbz	r3, 22a46 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
   22a0a:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   22a0c:	681b      	ldr	r3, [r3, #0]
   22a0e:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   22a10:	69e3      	ldr	r3, [r4, #28]
   22a12:	3301      	adds	r3, #1
   22a14:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   22a16:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22a18:	4628      	mov	r0, r5
   22a1a:	f000 f9eb 	bl	22df4 <z_spin_unlock_valid>
   22a1e:	b968      	cbnz	r0, 22a3c <k_mem_slab_alloc+0x80>
   22a20:	23ac      	movs	r3, #172	; 0xac
   22a22:	4a15      	ldr	r2, [pc, #84]	; (22a78 <k_mem_slab_alloc+0xbc>)
   22a24:	4918      	ldr	r1, [pc, #96]	; (22a88 <k_mem_slab_alloc+0xcc>)
   22a26:	4816      	ldr	r0, [pc, #88]	; (22a80 <k_mem_slab_alloc+0xc4>)
   22a28:	f003 fe78 	bl	2671c <printk>
   22a2c:	4629      	mov	r1, r5
   22a2e:	4817      	ldr	r0, [pc, #92]	; (22a8c <k_mem_slab_alloc+0xd0>)
   22a30:	f003 fe74 	bl	2671c <printk>
   22a34:	21ac      	movs	r1, #172	; 0xac
   22a36:	4810      	ldr	r0, [pc, #64]	; (22a78 <k_mem_slab_alloc+0xbc>)
   22a38:	f004 f915 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   22a3c:	f387 8811 	msr	BASEPRI, r7
   22a40:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   22a44:	e013      	b.n	22a6e <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   22a46:	ea58 0209 	orrs.w	r2, r8, r9
   22a4a:	d103      	bne.n	22a54 <k_mem_slab_alloc+0x98>
		result = -ENOMEM;
   22a4c:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   22a50:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   22a52:	e7e1      	b.n	22a18 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   22a54:	4622      	mov	r2, r4
   22a56:	4639      	mov	r1, r7
   22a58:	4628      	mov	r0, r5
   22a5a:	e9cd 8900 	strd	r8, r9, [sp]
   22a5e:	f001 fe17 	bl	24690 <z_pend_curr>
		if (result == 0) {
   22a62:	4604      	mov	r4, r0
   22a64:	b918      	cbnz	r0, 22a6e <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
   22a66:	4b0a      	ldr	r3, [pc, #40]	; (22a90 <k_mem_slab_alloc+0xd4>)
   22a68:	689b      	ldr	r3, [r3, #8]
   22a6a:	695b      	ldr	r3, [r3, #20]
   22a6c:	6033      	str	r3, [r6, #0]
}
   22a6e:	4620      	mov	r0, r4
   22a70:	b003      	add	sp, #12
   22a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22a76:	bf00      	nop
   22a78:	0002d072 	.word	0x0002d072
   22a7c:	0002d0c4 	.word	0x0002d0c4
   22a80:	0002cfb2 	.word	0x0002cfb2
   22a84:	0002d0d9 	.word	0x0002d0d9
   22a88:	0002d098 	.word	0x0002d098
   22a8c:	0002d0af 	.word	0x0002d0af
   22a90:	20009ba8 	.word	0x20009ba8

00022a94 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   22a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22a98:	4604      	mov	r4, r0
   22a9a:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   22a9c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   22aa0:	f04f 0320 	mov.w	r3, #32
   22aa4:	f3ef 8711 	mrs	r7, BASEPRI
   22aa8:	f383 8811 	msr	BASEPRI, r3
   22aac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22ab0:	4628      	mov	r0, r5
   22ab2:	f000 f991 	bl	22dd8 <z_spin_lock_valid>
   22ab6:	b968      	cbnz	r0, 22ad4 <k_mem_slab_free+0x40>
   22ab8:	2381      	movs	r3, #129	; 0x81
   22aba:	4a22      	ldr	r2, [pc, #136]	; (22b44 <k_mem_slab_free+0xb0>)
   22abc:	4922      	ldr	r1, [pc, #136]	; (22b48 <k_mem_slab_free+0xb4>)
   22abe:	4823      	ldr	r0, [pc, #140]	; (22b4c <k_mem_slab_free+0xb8>)
   22ac0:	f003 fe2c 	bl	2671c <printk>
   22ac4:	4629      	mov	r1, r5
   22ac6:	4822      	ldr	r0, [pc, #136]	; (22b50 <k_mem_slab_free+0xbc>)
   22ac8:	f003 fe28 	bl	2671c <printk>
   22acc:	2181      	movs	r1, #129	; 0x81
   22ace:	481d      	ldr	r0, [pc, #116]	; (22b44 <k_mem_slab_free+0xb0>)
   22ad0:	f004 f8c9 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   22ad4:	4628      	mov	r0, r5
   22ad6:	f000 f99b 	bl	22e10 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   22ada:	f8d4 8018 	ldr.w	r8, [r4, #24]
   22ade:	f1b8 0f00 	cmp.w	r8, #0
   22ae2:	d10f      	bne.n	22b04 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   22ae4:	4620      	mov	r0, r4
   22ae6:	f002 f9ed 	bl	24ec4 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   22aea:	b158      	cbz	r0, 22b04 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   22aec:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   22aee:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   22af2:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   22af4:	f002 f806 	bl	24b04 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   22af8:	4639      	mov	r1, r7
   22afa:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   22afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   22b00:	f001 bb88 	b.w	24214 <z_reschedule>
	**(char ***) mem = slab->free_list;
   22b04:	6833      	ldr	r3, [r6, #0]
   22b06:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22b08:	4628      	mov	r0, r5
   22b0a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   22b0c:	6833      	ldr	r3, [r6, #0]
   22b0e:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   22b10:	69e3      	ldr	r3, [r4, #28]
   22b12:	3b01      	subs	r3, #1
   22b14:	61e3      	str	r3, [r4, #28]
   22b16:	f000 f96d 	bl	22df4 <z_spin_unlock_valid>
   22b1a:	b968      	cbnz	r0, 22b38 <k_mem_slab_free+0xa4>
   22b1c:	23ac      	movs	r3, #172	; 0xac
   22b1e:	4a09      	ldr	r2, [pc, #36]	; (22b44 <k_mem_slab_free+0xb0>)
   22b20:	490c      	ldr	r1, [pc, #48]	; (22b54 <k_mem_slab_free+0xc0>)
   22b22:	480a      	ldr	r0, [pc, #40]	; (22b4c <k_mem_slab_free+0xb8>)
   22b24:	f003 fdfa 	bl	2671c <printk>
   22b28:	4629      	mov	r1, r5
   22b2a:	480b      	ldr	r0, [pc, #44]	; (22b58 <k_mem_slab_free+0xc4>)
   22b2c:	f003 fdf6 	bl	2671c <printk>
   22b30:	21ac      	movs	r1, #172	; 0xac
   22b32:	4804      	ldr	r0, [pc, #16]	; (22b44 <k_mem_slab_free+0xb0>)
   22b34:	f004 f897 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   22b38:	f387 8811 	msr	BASEPRI, r7
   22b3c:	f3bf 8f6f 	isb	sy
}
   22b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22b44:	0002d072 	.word	0x0002d072
   22b48:	0002d0c4 	.word	0x0002d0c4
   22b4c:	0002cfb2 	.word	0x0002cfb2
   22b50:	0002d0d9 	.word	0x0002d0d9
   22b54:	0002d098 	.word	0x0002d098
   22b58:	0002d0af 	.word	0x0002d0af

00022b5c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   22b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22b60:	b085      	sub	sp, #20
   22b62:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   22b66:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   22b68:	f1b9 0f0f 	cmp.w	r9, #15
{
   22b6c:	460f      	mov	r7, r1
   22b6e:	4615      	mov	r5, r2
   22b70:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   22b72:	d12e      	bne.n	22bd2 <z_setup_new_thread+0x76>
   22b74:	4b23      	ldr	r3, [pc, #140]	; (22c04 <z_setup_new_thread+0xa8>)
   22b76:	4598      	cmp	r8, r3
   22b78:	d12f      	bne.n	22bda <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   22b7a:	f104 0358 	add.w	r3, r4, #88	; 0x58
   22b7e:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   22b82:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
   22b84:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
   22b86:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   22b88:	2304      	movs	r3, #4
   22b8a:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22b8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   22b8e:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22b90:	9302      	str	r3, [sp, #8]
   22b92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   22b94:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22b98:	9301      	str	r3, [sp, #4]
   22b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
   22b9c:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   22b9e:	e9c4 701a 	strd	r7, r0, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22ba2:	9300      	str	r3, [sp, #0]
   22ba4:	462a      	mov	r2, r5
   22ba6:	4643      	mov	r3, r8
   22ba8:	4639      	mov	r1, r7
   22baa:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   22bac:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   22bb0:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
   22bb2:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
   22bb6:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   22bb8:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22bba:	f7f3 fb29 	bl	16210 <arch_new_thread>
	if (!_current) {
   22bbe:	4b12      	ldr	r3, [pc, #72]	; (22c08 <z_setup_new_thread+0xac>)
	new_thread->init_data = NULL;
   22bc0:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   22bc2:	689b      	ldr	r3, [r3, #8]
   22bc4:	b103      	cbz	r3, 22bc8 <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
   22bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   22bc8:	4628      	mov	r0, r5
   22bca:	6763      	str	r3, [r4, #116]	; 0x74
   22bcc:	b005      	add	sp, #20
   22bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   22bd2:	f109 0310 	add.w	r3, r9, #16
   22bd6:	2b1e      	cmp	r3, #30
   22bd8:	d9cf      	bls.n	22b7a <z_setup_new_thread+0x1e>
   22bda:	f44f 7302 	mov.w	r3, #520	; 0x208
   22bde:	4a0b      	ldr	r2, [pc, #44]	; (22c0c <z_setup_new_thread+0xb0>)
   22be0:	490b      	ldr	r1, [pc, #44]	; (22c10 <z_setup_new_thread+0xb4>)
   22be2:	480c      	ldr	r0, [pc, #48]	; (22c14 <z_setup_new_thread+0xb8>)
   22be4:	f003 fd9a 	bl	2671c <printk>
   22be8:	4649      	mov	r1, r9
   22bea:	f06f 030f 	mvn.w	r3, #15
   22bee:	220e      	movs	r2, #14
   22bf0:	4809      	ldr	r0, [pc, #36]	; (22c18 <z_setup_new_thread+0xbc>)
   22bf2:	f003 fd93 	bl	2671c <printk>
   22bf6:	f44f 7102 	mov.w	r1, #520	; 0x208
   22bfa:	4804      	ldr	r0, [pc, #16]	; (22c0c <z_setup_new_thread+0xb0>)
   22bfc:	f004 f833 	bl	26c66 <assert_post_action>
   22c00:	e7bb      	b.n	22b7a <z_setup_new_thread+0x1e>
   22c02:	bf00      	nop
   22c04:	00022e21 	.word	0x00022e21
   22c08:	20009ba8 	.word	0x20009ba8
   22c0c:	00031113 	.word	0x00031113
   22c10:	00031136 	.word	0x00031136
   22c14:	0002cfb2 	.word	0x0002cfb2
   22c18:	000311b6 	.word	0x000311b6

00022c1c <z_impl_k_thread_create>:
{
   22c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22c20:	b087      	sub	sp, #28
   22c22:	4604      	mov	r4, r0
   22c24:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   22c28:	460d      	mov	r5, r1
   22c2a:	4690      	mov	r8, r2
   22c2c:	4699      	mov	r9, r3
   22c2e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   22c32:	b173      	cbz	r3, 22c52 <z_impl_k_thread_create+0x36>
   22c34:	491b      	ldr	r1, [pc, #108]	; (22ca4 <z_impl_k_thread_create+0x88>)
   22c36:	f240 2371 	movw	r3, #625	; 0x271
   22c3a:	4a1b      	ldr	r2, [pc, #108]	; (22ca8 <z_impl_k_thread_create+0x8c>)
   22c3c:	481b      	ldr	r0, [pc, #108]	; (22cac <z_impl_k_thread_create+0x90>)
   22c3e:	f003 fd6d 	bl	2671c <printk>
   22c42:	481b      	ldr	r0, [pc, #108]	; (22cb0 <z_impl_k_thread_create+0x94>)
   22c44:	f003 fd6a 	bl	2671c <printk>
   22c48:	f240 2171 	movw	r1, #625	; 0x271
   22c4c:	4816      	ldr	r0, [pc, #88]	; (22ca8 <z_impl_k_thread_create+0x8c>)
   22c4e:	f004 f80a 	bl	26c66 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22c52:	2300      	movs	r3, #0
   22c54:	9305      	str	r3, [sp, #20]
   22c56:	9b12      	ldr	r3, [sp, #72]	; 0x48
   22c58:	4642      	mov	r2, r8
   22c5a:	9304      	str	r3, [sp, #16]
   22c5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   22c5e:	4629      	mov	r1, r5
   22c60:	9303      	str	r3, [sp, #12]
   22c62:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22c64:	4620      	mov	r0, r4
   22c66:	9302      	str	r3, [sp, #8]
   22c68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   22c6a:	9301      	str	r3, [sp, #4]
   22c6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22c6e:	9300      	str	r3, [sp, #0]
   22c70:	464b      	mov	r3, r9
   22c72:	f7ff ff73 	bl	22b5c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   22c76:	1c7b      	adds	r3, r7, #1
   22c78:	bf08      	it	eq
   22c7a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   22c7e:	d005      	beq.n	22c8c <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   22c80:	ea56 0307 	orrs.w	r3, r6, r7
   22c84:	d106      	bne.n	22c94 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   22c86:	4620      	mov	r0, r4
   22c88:	f001 ff84 	bl	24b94 <z_sched_start>
}
   22c8c:	4620      	mov	r0, r4
   22c8e:	b007      	add	sp, #28
   22c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   22c94:	4632      	mov	r2, r6
   22c96:	463b      	mov	r3, r7
   22c98:	4906      	ldr	r1, [pc, #24]	; (22cb4 <z_impl_k_thread_create+0x98>)
   22c9a:	f104 0018 	add.w	r0, r4, #24
   22c9e:	f002 fc93 	bl	255c8 <z_add_timeout>
   22ca2:	e7f3      	b.n	22c8c <z_impl_k_thread_create+0x70>
   22ca4:	000311e7 	.word	0x000311e7
   22ca8:	00031113 	.word	0x00031113
   22cac:	0002cfb2 	.word	0x0002cfb2
   22cb0:	000311f9 	.word	0x000311f9
   22cb4:	00024c3d 	.word	0x00024c3d

00022cb8 <z_init_static_threads>:
{
   22cb8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   22cbc:	4f3f      	ldr	r7, [pc, #252]	; (22dbc <z_init_static_threads+0x104>)
   22cbe:	4d40      	ldr	r5, [pc, #256]	; (22dc0 <z_init_static_threads+0x108>)
   22cc0:	463e      	mov	r6, r7
   22cc2:	f8df 810c 	ldr.w	r8, [pc, #268]	; 22dd0 <z_init_static_threads+0x118>
{
   22cc6:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   22cc8:	42bd      	cmp	r5, r7
   22cca:	d90e      	bls.n	22cea <z_init_static_threads+0x32>
   22ccc:	493d      	ldr	r1, [pc, #244]	; (22dc4 <z_init_static_threads+0x10c>)
   22cce:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   22cd2:	4642      	mov	r2, r8
   22cd4:	483c      	ldr	r0, [pc, #240]	; (22dc8 <z_init_static_threads+0x110>)
   22cd6:	f003 fd21 	bl	2671c <printk>
   22cda:	483c      	ldr	r0, [pc, #240]	; (22dcc <z_init_static_threads+0x114>)
   22cdc:	f003 fd1e 	bl	2671c <printk>
   22ce0:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   22ce4:	4640      	mov	r0, r8
   22ce6:	f003 ffbe 	bl	26c66 <assert_post_action>
   22cea:	42b5      	cmp	r5, r6
   22cec:	f105 0430 	add.w	r4, r5, #48	; 0x30
   22cf0:	d31f      	bcc.n	22d32 <z_init_static_threads+0x7a>
	k_sched_lock();
   22cf2:	f001 fad3 	bl	2429c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   22cf6:	4c32      	ldr	r4, [pc, #200]	; (22dc0 <z_init_static_threads+0x108>)
   22cf8:	4d35      	ldr	r5, [pc, #212]	; (22dd0 <z_init_static_threads+0x118>)
   22cfa:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 22dc4 <z_init_static_threads+0x10c>
   22cfe:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 22dc8 <z_init_static_threads+0x110>
   22d02:	42b4      	cmp	r4, r6
   22d04:	d90e      	bls.n	22d24 <z_init_static_threads+0x6c>
   22d06:	4641      	mov	r1, r8
   22d08:	f240 23f7 	movw	r3, #759	; 0x2f7
   22d0c:	462a      	mov	r2, r5
   22d0e:	4648      	mov	r0, r9
   22d10:	f003 fd04 	bl	2671c <printk>
   22d14:	482d      	ldr	r0, [pc, #180]	; (22dcc <z_init_static_threads+0x114>)
   22d16:	f003 fd01 	bl	2671c <printk>
   22d1a:	f240 21f7 	movw	r1, #759	; 0x2f7
   22d1e:	4628      	mov	r0, r5
   22d20:	f003 ffa1 	bl	26c66 <assert_post_action>
   22d24:	42b4      	cmp	r4, r6
   22d26:	d321      	bcc.n	22d6c <z_init_static_threads+0xb4>
}
   22d28:	b006      	add	sp, #24
   22d2a:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   22d2e:	f001 bd49 	b.w	247c4 <k_sched_unlock>
		z_setup_new_thread(
   22d32:	f854 3c04 	ldr.w	r3, [r4, #-4]
   22d36:	9305      	str	r3, [sp, #20]
   22d38:	f854 3c10 	ldr.w	r3, [r4, #-16]
   22d3c:	9304      	str	r3, [sp, #16]
   22d3e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   22d42:	9303      	str	r3, [sp, #12]
   22d44:	f854 3c18 	ldr.w	r3, [r4, #-24]
   22d48:	9302      	str	r3, [sp, #8]
   22d4a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   22d4e:	9301      	str	r3, [sp, #4]
   22d50:	f854 3c20 	ldr.w	r3, [r4, #-32]
   22d54:	9300      	str	r3, [sp, #0]
   22d56:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   22d5a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   22d5e:	f7ff fefd 	bl	22b5c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   22d62:	f854 3c30 	ldr.w	r3, [r4, #-48]
   22d66:	655d      	str	r5, [r3, #84]	; 0x54
   22d68:	4625      	mov	r5, r4
   22d6a:	e7ad      	b.n	22cc8 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   22d6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   22d6e:	1c4b      	adds	r3, r1, #1
   22d70:	d014      	beq.n	22d9c <z_init_static_threads+0xe4>
   22d72:	f240 32e7 	movw	r2, #999	; 0x3e7
   22d76:	2300      	movs	r3, #0
   22d78:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   22d7c:	4693      	mov	fp, r2
   22d7e:	469c      	mov	ip, r3
					    K_MSEC(thread_data->init_delay));
   22d80:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   22d84:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   22d88:	459c      	cmp	ip, r3
   22d8a:	bf08      	it	eq
   22d8c:	4593      	cmpeq	fp, r2
   22d8e:	4658      	mov	r0, fp
   22d90:	4661      	mov	r1, ip
			schedule_new_thread(thread_data->init_thread,
   22d92:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   22d94:	d104      	bne.n	22da0 <z_init_static_threads+0xe8>
	z_sched_start(thread);
   22d96:	4638      	mov	r0, r7
   22d98:	f001 fefc 	bl	24b94 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   22d9c:	3430      	adds	r4, #48	; 0x30
   22d9e:	e7b0      	b.n	22d02 <z_init_static_threads+0x4a>
   22da0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22da4:	2300      	movs	r3, #0
   22da6:	f7ed fa4b 	bl	10240 <__aeabi_uldivmod>
   22daa:	4602      	mov	r2, r0
   22dac:	460b      	mov	r3, r1
   22dae:	f107 0018 	add.w	r0, r7, #24
   22db2:	4908      	ldr	r1, [pc, #32]	; (22dd4 <z_init_static_threads+0x11c>)
   22db4:	f002 fc08 	bl	255c8 <z_add_timeout>
   22db8:	e7f0      	b.n	22d9c <z_init_static_threads+0xe4>
   22dba:	bf00      	nop
   22dbc:	2000849c 	.word	0x2000849c
   22dc0:	2000849c 	.word	0x2000849c
   22dc4:	0003121e 	.word	0x0003121e
   22dc8:	0002cfb2 	.word	0x0002cfb2
   22dcc:	0002d8a9 	.word	0x0002d8a9
   22dd0:	00031113 	.word	0x00031113
   22dd4:	00024c3d 	.word	0x00024c3d

00022dd8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   22dd8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   22dda:	b138      	cbz	r0, 22dec <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   22ddc:	4b04      	ldr	r3, [pc, #16]	; (22df0 <z_spin_lock_valid+0x18>)
   22dde:	f000 0003 	and.w	r0, r0, #3
   22de2:	7d1b      	ldrb	r3, [r3, #20]
   22de4:	1ac0      	subs	r0, r0, r3
   22de6:	bf18      	it	ne
   22de8:	2001      	movne	r0, #1
   22dea:	4770      	bx	lr
			return false;
		}
	}
	return true;
   22dec:	2001      	movs	r0, #1
}
   22dee:	4770      	bx	lr
   22df0:	20009ba8 	.word	0x20009ba8

00022df4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   22df4:	4905      	ldr	r1, [pc, #20]	; (22e0c <z_spin_unlock_valid+0x18>)
{
   22df6:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   22df8:	688a      	ldr	r2, [r1, #8]
   22dfa:	7d08      	ldrb	r0, [r1, #20]
   22dfc:	6819      	ldr	r1, [r3, #0]
   22dfe:	4302      	orrs	r2, r0
   22e00:	2000      	movs	r0, #0
   22e02:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   22e04:	bf04      	itt	eq
   22e06:	6018      	streq	r0, [r3, #0]
	return true;
   22e08:	2001      	moveq	r0, #1
}
   22e0a:	4770      	bx	lr
   22e0c:	20009ba8 	.word	0x20009ba8

00022e10 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   22e10:	4a02      	ldr	r2, [pc, #8]	; (22e1c <z_spin_lock_set_owner+0xc>)
   22e12:	7d11      	ldrb	r1, [r2, #20]
   22e14:	6893      	ldr	r3, [r2, #8]
   22e16:	430b      	orrs	r3, r1
   22e18:	6003      	str	r3, [r0, #0]
}
   22e1a:	4770      	bx	lr
   22e1c:	20009ba8 	.word	0x20009ba8

00022e20 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   22e20:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   22e22:	4c09      	ldr	r4, [pc, #36]	; (22e48 <idle+0x28>)
	__asm__ volatile(
   22e24:	f04f 0220 	mov.w	r2, #32
   22e28:	f3ef 8311 	mrs	r3, BASEPRI
   22e2c:	f382 8811 	msr	BASEPRI, r2
   22e30:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   22e34:	f002 fcea 	bl	2580c <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   22e38:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   22e3a:	f7f1 fbd1 	bl	145e0 <pm_system_suspend>
   22e3e:	2800      	cmp	r0, #0
   22e40:	d1f0      	bne.n	22e24 <idle+0x4>
	arch_cpu_idle();
   22e42:	f7f3 fa1b 	bl	1627c <arch_cpu_idle>
}
   22e46:	e7ed      	b.n	22e24 <idle+0x4>
   22e48:	20009ba8 	.word	0x20009ba8

00022e4c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   22e4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22e50:	4604      	mov	r4, r0
   22e52:	4616      	mov	r6, r2
   22e54:	461f      	mov	r7, r3
   22e56:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   22e5a:	b163      	cbz	r3, 22e76 <z_impl_k_mutex_lock+0x2a>
   22e5c:	496d      	ldr	r1, [pc, #436]	; (23014 <z_impl_k_mutex_lock+0x1c8>)
   22e5e:	2365      	movs	r3, #101	; 0x65
   22e60:	4a6d      	ldr	r2, [pc, #436]	; (23018 <z_impl_k_mutex_lock+0x1cc>)
   22e62:	486e      	ldr	r0, [pc, #440]	; (2301c <z_impl_k_mutex_lock+0x1d0>)
   22e64:	f003 fc5a 	bl	2671c <printk>
   22e68:	486d      	ldr	r0, [pc, #436]	; (23020 <z_impl_k_mutex_lock+0x1d4>)
   22e6a:	f003 fc57 	bl	2671c <printk>
   22e6e:	2165      	movs	r1, #101	; 0x65
   22e70:	4869      	ldr	r0, [pc, #420]	; (23018 <z_impl_k_mutex_lock+0x1cc>)
   22e72:	f003 fef8 	bl	26c66 <assert_post_action>
   22e76:	f04f 0320 	mov.w	r3, #32
   22e7a:	f3ef 8811 	mrs	r8, BASEPRI
   22e7e:	f383 8811 	msr	BASEPRI, r3
   22e82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22e86:	4867      	ldr	r0, [pc, #412]	; (23024 <z_impl_k_mutex_lock+0x1d8>)
   22e88:	f7ff ffa6 	bl	22dd8 <z_spin_lock_valid>
   22e8c:	b968      	cbnz	r0, 22eaa <z_impl_k_mutex_lock+0x5e>
   22e8e:	2381      	movs	r3, #129	; 0x81
   22e90:	4a65      	ldr	r2, [pc, #404]	; (23028 <z_impl_k_mutex_lock+0x1dc>)
   22e92:	4966      	ldr	r1, [pc, #408]	; (2302c <z_impl_k_mutex_lock+0x1e0>)
   22e94:	4861      	ldr	r0, [pc, #388]	; (2301c <z_impl_k_mutex_lock+0x1d0>)
   22e96:	f003 fc41 	bl	2671c <printk>
   22e9a:	4962      	ldr	r1, [pc, #392]	; (23024 <z_impl_k_mutex_lock+0x1d8>)
   22e9c:	4864      	ldr	r0, [pc, #400]	; (23030 <z_impl_k_mutex_lock+0x1e4>)
   22e9e:	f003 fc3d 	bl	2671c <printk>
   22ea2:	2181      	movs	r1, #129	; 0x81
   22ea4:	4860      	ldr	r0, [pc, #384]	; (23028 <z_impl_k_mutex_lock+0x1dc>)
   22ea6:	f003 fede 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   22eaa:	485e      	ldr	r0, [pc, #376]	; (23024 <z_impl_k_mutex_lock+0x1d8>)
   22eac:	f7ff ffb0 	bl	22e10 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   22eb0:	68e3      	ldr	r3, [r4, #12]
   22eb2:	4a60      	ldr	r2, [pc, #384]	; (23034 <z_impl_k_mutex_lock+0x1e8>)
   22eb4:	b1fb      	cbz	r3, 22ef6 <z_impl_k_mutex_lock+0xaa>
   22eb6:	68a0      	ldr	r0, [r4, #8]
   22eb8:	6891      	ldr	r1, [r2, #8]
   22eba:	4288      	cmp	r0, r1
   22ebc:	d03d      	beq.n	22f3a <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   22ebe:	ea56 0307 	orrs.w	r3, r6, r7
   22ec2:	d13c      	bne.n	22f3e <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22ec4:	4857      	ldr	r0, [pc, #348]	; (23024 <z_impl_k_mutex_lock+0x1d8>)
   22ec6:	f7ff ff95 	bl	22df4 <z_spin_unlock_valid>
   22eca:	b968      	cbnz	r0, 22ee8 <z_impl_k_mutex_lock+0x9c>
   22ecc:	23ac      	movs	r3, #172	; 0xac
   22ece:	4a56      	ldr	r2, [pc, #344]	; (23028 <z_impl_k_mutex_lock+0x1dc>)
   22ed0:	4959      	ldr	r1, [pc, #356]	; (23038 <z_impl_k_mutex_lock+0x1ec>)
   22ed2:	4852      	ldr	r0, [pc, #328]	; (2301c <z_impl_k_mutex_lock+0x1d0>)
   22ed4:	f003 fc22 	bl	2671c <printk>
   22ed8:	4952      	ldr	r1, [pc, #328]	; (23024 <z_impl_k_mutex_lock+0x1d8>)
   22eda:	4858      	ldr	r0, [pc, #352]	; (2303c <z_impl_k_mutex_lock+0x1f0>)
   22edc:	f003 fc1e 	bl	2671c <printk>
   22ee0:	21ac      	movs	r1, #172	; 0xac
   22ee2:	4851      	ldr	r0, [pc, #324]	; (23028 <z_impl_k_mutex_lock+0x1dc>)
   22ee4:	f003 febf 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   22ee8:	f388 8811 	msr	BASEPRI, r8
   22eec:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   22ef0:	f06f 000f 	mvn.w	r0, #15
   22ef4:	e01e      	b.n	22f34 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   22ef6:	6891      	ldr	r1, [r2, #8]
   22ef8:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   22efc:	3301      	adds	r3, #1
   22efe:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   22f00:	6893      	ldr	r3, [r2, #8]
   22f02:	4848      	ldr	r0, [pc, #288]	; (23024 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   22f04:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   22f06:	60a3      	str	r3, [r4, #8]
   22f08:	f7ff ff74 	bl	22df4 <z_spin_unlock_valid>
   22f0c:	b968      	cbnz	r0, 22f2a <z_impl_k_mutex_lock+0xde>
   22f0e:	23ac      	movs	r3, #172	; 0xac
   22f10:	4a45      	ldr	r2, [pc, #276]	; (23028 <z_impl_k_mutex_lock+0x1dc>)
   22f12:	4949      	ldr	r1, [pc, #292]	; (23038 <z_impl_k_mutex_lock+0x1ec>)
   22f14:	4841      	ldr	r0, [pc, #260]	; (2301c <z_impl_k_mutex_lock+0x1d0>)
   22f16:	f003 fc01 	bl	2671c <printk>
   22f1a:	4942      	ldr	r1, [pc, #264]	; (23024 <z_impl_k_mutex_lock+0x1d8>)
   22f1c:	4847      	ldr	r0, [pc, #284]	; (2303c <z_impl_k_mutex_lock+0x1f0>)
   22f1e:	f003 fbfd 	bl	2671c <printk>
   22f22:	21ac      	movs	r1, #172	; 0xac
   22f24:	4840      	ldr	r0, [pc, #256]	; (23028 <z_impl_k_mutex_lock+0x1dc>)
   22f26:	f003 fe9e 	bl	26c66 <assert_post_action>
   22f2a:	f388 8811 	msr	BASEPRI, r8
   22f2e:	f3bf 8f6f 	isb	sy
		return 0;
   22f32:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   22f34:	b002      	add	sp, #8
   22f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   22f3a:	6921      	ldr	r1, [r4, #16]
   22f3c:	e7de      	b.n	22efc <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   22f3e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   22f42:	f991 100e 	ldrsb.w	r1, [r1, #14]
   22f46:	4299      	cmp	r1, r3
   22f48:	bfa8      	it	ge
   22f4a:	4619      	movge	r1, r3
   22f4c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   22f50:	428b      	cmp	r3, r1
   22f52:	dd41      	ble.n	22fd8 <z_impl_k_mutex_lock+0x18c>
		return z_set_prio(mutex->owner, new_prio);
   22f54:	f001 fecc 	bl	24cf0 <z_set_prio>
   22f58:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   22f5a:	4622      	mov	r2, r4
   22f5c:	4641      	mov	r1, r8
   22f5e:	e9cd 6700 	strd	r6, r7, [sp]
   22f62:	4830      	ldr	r0, [pc, #192]	; (23024 <z_impl_k_mutex_lock+0x1d8>)
   22f64:	f001 fb94 	bl	24690 <z_pend_curr>
	if (got_mutex == 0) {
   22f68:	2800      	cmp	r0, #0
   22f6a:	d0e3      	beq.n	22f34 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   22f6c:	f04f 0320 	mov.w	r3, #32
   22f70:	f3ef 8611 	mrs	r6, BASEPRI
   22f74:	f383 8811 	msr	BASEPRI, r3
   22f78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22f7c:	4829      	ldr	r0, [pc, #164]	; (23024 <z_impl_k_mutex_lock+0x1d8>)
   22f7e:	f7ff ff2b 	bl	22dd8 <z_spin_lock_valid>
   22f82:	b968      	cbnz	r0, 22fa0 <z_impl_k_mutex_lock+0x154>
   22f84:	2381      	movs	r3, #129	; 0x81
   22f86:	4a28      	ldr	r2, [pc, #160]	; (23028 <z_impl_k_mutex_lock+0x1dc>)
   22f88:	4928      	ldr	r1, [pc, #160]	; (2302c <z_impl_k_mutex_lock+0x1e0>)
   22f8a:	4824      	ldr	r0, [pc, #144]	; (2301c <z_impl_k_mutex_lock+0x1d0>)
   22f8c:	f003 fbc6 	bl	2671c <printk>
   22f90:	4924      	ldr	r1, [pc, #144]	; (23024 <z_impl_k_mutex_lock+0x1d8>)
   22f92:	4827      	ldr	r0, [pc, #156]	; (23030 <z_impl_k_mutex_lock+0x1e4>)
   22f94:	f003 fbc2 	bl	2671c <printk>
   22f98:	2181      	movs	r1, #129	; 0x81
   22f9a:	4823      	ldr	r0, [pc, #140]	; (23028 <z_impl_k_mutex_lock+0x1dc>)
   22f9c:	f003 fe63 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   22fa0:	4820      	ldr	r0, [pc, #128]	; (23024 <z_impl_k_mutex_lock+0x1d8>)
   22fa2:	f7ff ff35 	bl	22e10 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   22fa6:	6823      	ldr	r3, [r4, #0]
   22fa8:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22faa:	429c      	cmp	r4, r3
   22fac:	d007      	beq.n	22fbe <z_impl_k_mutex_lock+0x172>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   22fae:	b133      	cbz	r3, 22fbe <z_impl_k_mutex_lock+0x172>
   22fb0:	f993 300e 	ldrsb.w	r3, [r3, #14]
   22fb4:	4299      	cmp	r1, r3
   22fb6:	bfa8      	it	ge
   22fb8:	4619      	movge	r1, r3
   22fba:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   22fbe:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   22fc0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   22fc4:	4299      	cmp	r1, r3
   22fc6:	d109      	bne.n	22fdc <z_impl_k_mutex_lock+0x190>
	if (resched) {
   22fc8:	b16d      	cbz	r5, 22fe6 <z_impl_k_mutex_lock+0x19a>
		z_reschedule(&lock, key);
   22fca:	4631      	mov	r1, r6
   22fcc:	4815      	ldr	r0, [pc, #84]	; (23024 <z_impl_k_mutex_lock+0x1d8>)
   22fce:	f001 f921 	bl	24214 <z_reschedule>
	return -EAGAIN;
   22fd2:	f06f 000a 	mvn.w	r0, #10
   22fd6:	e7ad      	b.n	22f34 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   22fd8:	2500      	movs	r5, #0
   22fda:	e7be      	b.n	22f5a <z_impl_k_mutex_lock+0x10e>
		return z_set_prio(mutex->owner, new_prio);
   22fdc:	f001 fe88 	bl	24cf0 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   22fe0:	2800      	cmp	r0, #0
   22fe2:	d1f2      	bne.n	22fca <z_impl_k_mutex_lock+0x17e>
   22fe4:	e7f0      	b.n	22fc8 <z_impl_k_mutex_lock+0x17c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22fe6:	480f      	ldr	r0, [pc, #60]	; (23024 <z_impl_k_mutex_lock+0x1d8>)
   22fe8:	f7ff ff04 	bl	22df4 <z_spin_unlock_valid>
   22fec:	b968      	cbnz	r0, 2300a <z_impl_k_mutex_lock+0x1be>
   22fee:	23ac      	movs	r3, #172	; 0xac
   22ff0:	4a0d      	ldr	r2, [pc, #52]	; (23028 <z_impl_k_mutex_lock+0x1dc>)
   22ff2:	4911      	ldr	r1, [pc, #68]	; (23038 <z_impl_k_mutex_lock+0x1ec>)
   22ff4:	4809      	ldr	r0, [pc, #36]	; (2301c <z_impl_k_mutex_lock+0x1d0>)
   22ff6:	f003 fb91 	bl	2671c <printk>
   22ffa:	490a      	ldr	r1, [pc, #40]	; (23024 <z_impl_k_mutex_lock+0x1d8>)
   22ffc:	480f      	ldr	r0, [pc, #60]	; (2303c <z_impl_k_mutex_lock+0x1f0>)
   22ffe:	f003 fb8d 	bl	2671c <printk>
   23002:	21ac      	movs	r1, #172	; 0xac
   23004:	4808      	ldr	r0, [pc, #32]	; (23028 <z_impl_k_mutex_lock+0x1dc>)
   23006:	f003 fe2e 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   2300a:	f386 8811 	msr	BASEPRI, r6
   2300e:	f3bf 8f6f 	isb	sy
   23012:	e7de      	b.n	22fd2 <z_impl_k_mutex_lock+0x186>
   23014:	000311e7 	.word	0x000311e7
   23018:	0003124b 	.word	0x0003124b
   2301c:	0002cfb2 	.word	0x0002cfb2
   23020:	0003126d 	.word	0x0003126d
   23024:	20009bd8 	.word	0x20009bd8
   23028:	0002d072 	.word	0x0002d072
   2302c:	0002d0c4 	.word	0x0002d0c4
   23030:	0002d0d9 	.word	0x0002d0d9
   23034:	20009ba8 	.word	0x20009ba8
   23038:	0002d098 	.word	0x0002d098
   2303c:	0002d0af 	.word	0x0002d0af

00023040 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   23040:	b538      	push	{r3, r4, r5, lr}
   23042:	4604      	mov	r4, r0
   23044:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   23048:	b163      	cbz	r3, 23064 <z_impl_k_mutex_unlock+0x24>
   2304a:	4952      	ldr	r1, [pc, #328]	; (23194 <z_impl_k_mutex_unlock+0x154>)
   2304c:	23c7      	movs	r3, #199	; 0xc7
   2304e:	4a52      	ldr	r2, [pc, #328]	; (23198 <z_impl_k_mutex_unlock+0x158>)
   23050:	4852      	ldr	r0, [pc, #328]	; (2319c <z_impl_k_mutex_unlock+0x15c>)
   23052:	f003 fb63 	bl	2671c <printk>
   23056:	4852      	ldr	r0, [pc, #328]	; (231a0 <z_impl_k_mutex_unlock+0x160>)
   23058:	f003 fb60 	bl	2671c <printk>
   2305c:	21c7      	movs	r1, #199	; 0xc7
   2305e:	484e      	ldr	r0, [pc, #312]	; (23198 <z_impl_k_mutex_unlock+0x158>)
   23060:	f003 fe01 	bl	26c66 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   23064:	68a3      	ldr	r3, [r4, #8]
   23066:	2b00      	cmp	r3, #0
   23068:	f000 808d 	beq.w	23186 <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2306c:	4d4d      	ldr	r5, [pc, #308]	; (231a4 <z_impl_k_mutex_unlock+0x164>)
   2306e:	68aa      	ldr	r2, [r5, #8]
   23070:	4293      	cmp	r3, r2
   23072:	f040 808b 	bne.w	2318c <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   23076:	68e3      	ldr	r3, [r4, #12]
   23078:	b94b      	cbnz	r3, 2308e <z_impl_k_mutex_unlock+0x4e>
   2307a:	494b      	ldr	r1, [pc, #300]	; (231a8 <z_impl_k_mutex_unlock+0x168>)
   2307c:	4847      	ldr	r0, [pc, #284]	; (2319c <z_impl_k_mutex_unlock+0x15c>)
   2307e:	23df      	movs	r3, #223	; 0xdf
   23080:	4a45      	ldr	r2, [pc, #276]	; (23198 <z_impl_k_mutex_unlock+0x158>)
   23082:	f003 fb4b 	bl	2671c <printk>
   23086:	21df      	movs	r1, #223	; 0xdf
   23088:	4843      	ldr	r0, [pc, #268]	; (23198 <z_impl_k_mutex_unlock+0x158>)
   2308a:	f003 fdec 	bl	26c66 <assert_post_action>
   2308e:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   23092:	b163      	cbz	r3, 230ae <z_impl_k_mutex_unlock+0x6e>
   23094:	493f      	ldr	r1, [pc, #252]	; (23194 <z_impl_k_mutex_unlock+0x154>)
   23096:	23fe      	movs	r3, #254	; 0xfe
   23098:	4a44      	ldr	r2, [pc, #272]	; (231ac <z_impl_k_mutex_unlock+0x16c>)
   2309a:	4840      	ldr	r0, [pc, #256]	; (2319c <z_impl_k_mutex_unlock+0x15c>)
   2309c:	f003 fb3e 	bl	2671c <printk>
   230a0:	4843      	ldr	r0, [pc, #268]	; (231b0 <z_impl_k_mutex_unlock+0x170>)
   230a2:	f003 fb3b 	bl	2671c <printk>
   230a6:	21fe      	movs	r1, #254	; 0xfe
   230a8:	4840      	ldr	r0, [pc, #256]	; (231ac <z_impl_k_mutex_unlock+0x16c>)
   230aa:	f003 fddc 	bl	26c66 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   230ae:	68ab      	ldr	r3, [r5, #8]
   230b0:	7bdb      	ldrb	r3, [r3, #15]
   230b2:	2b01      	cmp	r3, #1
   230b4:	d10c      	bne.n	230d0 <z_impl_k_mutex_unlock+0x90>
   230b6:	493f      	ldr	r1, [pc, #252]	; (231b4 <z_impl_k_mutex_unlock+0x174>)
   230b8:	23ff      	movs	r3, #255	; 0xff
   230ba:	4a3c      	ldr	r2, [pc, #240]	; (231ac <z_impl_k_mutex_unlock+0x16c>)
   230bc:	4837      	ldr	r0, [pc, #220]	; (2319c <z_impl_k_mutex_unlock+0x15c>)
   230be:	f003 fb2d 	bl	2671c <printk>
   230c2:	483b      	ldr	r0, [pc, #236]	; (231b0 <z_impl_k_mutex_unlock+0x170>)
   230c4:	f003 fb2a 	bl	2671c <printk>
   230c8:	21ff      	movs	r1, #255	; 0xff
   230ca:	4838      	ldr	r0, [pc, #224]	; (231ac <z_impl_k_mutex_unlock+0x16c>)
   230cc:	f003 fdcb 	bl	26c66 <assert_post_action>

	--_current->base.sched_locked;
   230d0:	68aa      	ldr	r2, [r5, #8]
   230d2:	7bd3      	ldrb	r3, [r2, #15]
   230d4:	3b01      	subs	r3, #1
   230d6:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   230d8:	68e3      	ldr	r3, [r4, #12]
   230da:	2b01      	cmp	r3, #1
   230dc:	d005      	beq.n	230ea <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
   230de:	3b01      	subs	r3, #1
   230e0:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   230e2:	f001 fb6f 	bl	247c4 <k_sched_unlock>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   230e6:	2000      	movs	r0, #0
}
   230e8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   230ea:	f04f 0320 	mov.w	r3, #32
   230ee:	f3ef 8511 	mrs	r5, BASEPRI
   230f2:	f383 8811 	msr	BASEPRI, r3
   230f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   230fa:	482f      	ldr	r0, [pc, #188]	; (231b8 <z_impl_k_mutex_unlock+0x178>)
   230fc:	f7ff fe6c 	bl	22dd8 <z_spin_lock_valid>
   23100:	b968      	cbnz	r0, 2311e <z_impl_k_mutex_unlock+0xde>
   23102:	2381      	movs	r3, #129	; 0x81
   23104:	4a2d      	ldr	r2, [pc, #180]	; (231bc <z_impl_k_mutex_unlock+0x17c>)
   23106:	492e      	ldr	r1, [pc, #184]	; (231c0 <z_impl_k_mutex_unlock+0x180>)
   23108:	4824      	ldr	r0, [pc, #144]	; (2319c <z_impl_k_mutex_unlock+0x15c>)
   2310a:	f003 fb07 	bl	2671c <printk>
   2310e:	492a      	ldr	r1, [pc, #168]	; (231b8 <z_impl_k_mutex_unlock+0x178>)
   23110:	482c      	ldr	r0, [pc, #176]	; (231c4 <z_impl_k_mutex_unlock+0x184>)
   23112:	f003 fb03 	bl	2671c <printk>
   23116:	2181      	movs	r1, #129	; 0x81
   23118:	4828      	ldr	r0, [pc, #160]	; (231bc <z_impl_k_mutex_unlock+0x17c>)
   2311a:	f003 fda4 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   2311e:	4826      	ldr	r0, [pc, #152]	; (231b8 <z_impl_k_mutex_unlock+0x178>)
   23120:	f7ff fe76 	bl	22e10 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   23124:	68a0      	ldr	r0, [r4, #8]
   23126:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   23128:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2312c:	4299      	cmp	r1, r3
   2312e:	d001      	beq.n	23134 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
   23130:	f001 fdde 	bl	24cf0 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   23134:	4620      	mov	r0, r4
   23136:	f001 fec5 	bl	24ec4 <z_unpend_first_thread>
	mutex->owner = new_owner;
   2313a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2313c:	b158      	cbz	r0, 23156 <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
   2313e:	f990 200e 	ldrsb.w	r2, [r0, #14]
   23142:	6122      	str	r2, [r4, #16]
   23144:	2200      	movs	r2, #0
   23146:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   23148:	f001 fcdc 	bl	24b04 <z_ready_thread>
		z_reschedule(&lock, key);
   2314c:	4629      	mov	r1, r5
   2314e:	481a      	ldr	r0, [pc, #104]	; (231b8 <z_impl_k_mutex_unlock+0x178>)
   23150:	f001 f860 	bl	24214 <z_reschedule>
   23154:	e7c5      	b.n	230e2 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
   23156:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23158:	4817      	ldr	r0, [pc, #92]	; (231b8 <z_impl_k_mutex_unlock+0x178>)
   2315a:	f7ff fe4b 	bl	22df4 <z_spin_unlock_valid>
   2315e:	b968      	cbnz	r0, 2317c <z_impl_k_mutex_unlock+0x13c>
   23160:	23ac      	movs	r3, #172	; 0xac
   23162:	4a16      	ldr	r2, [pc, #88]	; (231bc <z_impl_k_mutex_unlock+0x17c>)
   23164:	4918      	ldr	r1, [pc, #96]	; (231c8 <z_impl_k_mutex_unlock+0x188>)
   23166:	480d      	ldr	r0, [pc, #52]	; (2319c <z_impl_k_mutex_unlock+0x15c>)
   23168:	f003 fad8 	bl	2671c <printk>
   2316c:	4912      	ldr	r1, [pc, #72]	; (231b8 <z_impl_k_mutex_unlock+0x178>)
   2316e:	4817      	ldr	r0, [pc, #92]	; (231cc <z_impl_k_mutex_unlock+0x18c>)
   23170:	f003 fad4 	bl	2671c <printk>
   23174:	21ac      	movs	r1, #172	; 0xac
   23176:	4811      	ldr	r0, [pc, #68]	; (231bc <z_impl_k_mutex_unlock+0x17c>)
   23178:	f003 fd75 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   2317c:	f385 8811 	msr	BASEPRI, r5
   23180:	f3bf 8f6f 	isb	sy
   23184:	e7ad      	b.n	230e2 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
   23186:	f06f 0015 	mvn.w	r0, #21
   2318a:	e7ad      	b.n	230e8 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
   2318c:	f04f 30ff 	mov.w	r0, #4294967295
   23190:	e7aa      	b.n	230e8 <z_impl_k_mutex_unlock+0xa8>
   23192:	bf00      	nop
   23194:	000311e7 	.word	0x000311e7
   23198:	0003124b 	.word	0x0003124b
   2319c:	0002cfb2 	.word	0x0002cfb2
   231a0:	0003126d 	.word	0x0003126d
   231a4:	20009ba8 	.word	0x20009ba8
   231a8:	00031292 	.word	0x00031292
   231ac:	000312a9 	.word	0x000312a9
   231b0:	00030725 	.word	0x00030725
   231b4:	000312d4 	.word	0x000312d4
   231b8:	20009bd8 	.word	0x20009bd8
   231bc:	0002d072 	.word	0x0002d072
   231c0:	0002d0c4 	.word	0x0002d0c4
   231c4:	0002d0d9 	.word	0x0002d0d9
   231c8:	0002d098 	.word	0x0002d098
   231cc:	0002d0af 	.word	0x0002d0af

000231d0 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   231d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   231d4:	4604      	mov	r4, r0
   231d6:	460e      	mov	r6, r1
   231d8:	4690      	mov	r8, r2
   231da:	4699      	mov	r9, r3
   231dc:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   231e0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   231e4:	f04f 0320 	mov.w	r3, #32
   231e8:	f3ef 8711 	mrs	r7, BASEPRI
   231ec:	f383 8811 	msr	BASEPRI, r3
   231f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   231f4:	4628      	mov	r0, r5
   231f6:	f7ff fdef 	bl	22dd8 <z_spin_lock_valid>
   231fa:	b968      	cbnz	r0, 23218 <queue_insert+0x48>
   231fc:	2381      	movs	r3, #129	; 0x81
   231fe:	4a3b      	ldr	r2, [pc, #236]	; (232ec <queue_insert+0x11c>)
   23200:	493b      	ldr	r1, [pc, #236]	; (232f0 <queue_insert+0x120>)
   23202:	483c      	ldr	r0, [pc, #240]	; (232f4 <queue_insert+0x124>)
   23204:	f003 fa8a 	bl	2671c <printk>
   23208:	4629      	mov	r1, r5
   2320a:	483b      	ldr	r0, [pc, #236]	; (232f8 <queue_insert+0x128>)
   2320c:	f003 fa86 	bl	2671c <printk>
   23210:	2181      	movs	r1, #129	; 0x81
   23212:	4836      	ldr	r0, [pc, #216]	; (232ec <queue_insert+0x11c>)
   23214:	f003 fd27 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   23218:	4628      	mov	r0, r5
   2321a:	f7ff fdf9 	bl	22e10 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   2321e:	f1ba 0f00 	cmp.w	sl, #0
   23222:	d000      	beq.n	23226 <queue_insert+0x56>
		prev = sys_sflist_peek_tail(&queue->data_q);
   23224:	6866      	ldr	r6, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   23226:	f104 000c 	add.w	r0, r4, #12
   2322a:	f001 fe4b 	bl	24ec4 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   2322e:	b158      	cbz	r0, 23248 <queue_insert+0x78>
   23230:	2400      	movs	r4, #0
   23232:	f8c0 8014 	str.w	r8, [r0, #20]
   23236:	67c4      	str	r4, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   23238:	f001 fc64 	bl	24b04 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   2323c:	4628      	mov	r0, r5
   2323e:	4639      	mov	r1, r7
   23240:	f000 ffe8 	bl	24214 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   23244:	2000      	movs	r0, #0
   23246:	e01e      	b.n	23286 <queue_insert+0xb6>
	if (alloc) {
   23248:	f1b9 0f00 	cmp.w	r9, #0
   2324c:	d02d      	beq.n	232aa <queue_insert+0xda>
	return z_thread_aligned_alloc(0, size);
   2324e:	2108      	movs	r1, #8
   23250:	f003 f9a4 	bl	2659c <z_thread_aligned_alloc>
		if (anode == NULL) {
   23254:	b9c8      	cbnz	r0, 2328a <queue_insert+0xba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23256:	4628      	mov	r0, r5
   23258:	f7ff fdcc 	bl	22df4 <z_spin_unlock_valid>
   2325c:	b968      	cbnz	r0, 2327a <queue_insert+0xaa>
   2325e:	23ac      	movs	r3, #172	; 0xac
   23260:	4a22      	ldr	r2, [pc, #136]	; (232ec <queue_insert+0x11c>)
   23262:	4926      	ldr	r1, [pc, #152]	; (232fc <queue_insert+0x12c>)
   23264:	4823      	ldr	r0, [pc, #140]	; (232f4 <queue_insert+0x124>)
   23266:	f003 fa59 	bl	2671c <printk>
   2326a:	4629      	mov	r1, r5
   2326c:	4824      	ldr	r0, [pc, #144]	; (23300 <queue_insert+0x130>)
   2326e:	f003 fa55 	bl	2671c <printk>
   23272:	21ac      	movs	r1, #172	; 0xac
   23274:	481d      	ldr	r0, [pc, #116]	; (232ec <queue_insert+0x11c>)
   23276:	f003 fcf6 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   2327a:	f387 8811 	msr	BASEPRI, r7
   2327e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   23282:	f06f 000b 	mvn.w	r0, #11
}
   23286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2328a:	2301      	movs	r3, #1
		anode->data = data;
   2328c:	f8c0 8004 	str.w	r8, [r0, #4]
   23290:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   23292:	6803      	ldr	r3, [r0, #0]
   23294:	f003 0303 	and.w	r3, r3, #3
   23298:	b95e      	cbnz	r6, 232b2 <queue_insert+0xe2>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2329a:	6822      	ldr	r2, [r4, #0]
   2329c:	4313      	orrs	r3, r2
   2329e:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   232a0:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   232a2:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   232a4:	b973      	cbnz	r3, 232c4 <queue_insert+0xf4>
	list->tail = node;
   232a6:	6060      	str	r0, [r4, #4]
}
   232a8:	e00c      	b.n	232c4 <queue_insert+0xf4>
}
   232aa:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   232ac:	f8c8 9000 	str.w	r9, [r8]
}
   232b0:	e7ef      	b.n	23292 <queue_insert+0xc2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   232b2:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   232b4:	f032 0203 	bics.w	r2, r2, #3
   232b8:	d110      	bne.n	232dc <queue_insert+0x10c>
Z_GENLIST_APPEND(sflist, sfnode)
   232ba:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   232bc:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   232be:	b93a      	cbnz	r2, 232d0 <queue_insert+0x100>
	list->head = node;
   232c0:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   232c4:	2104      	movs	r1, #4
   232c6:	f104 0014 	add.w	r0, r4, #20
   232ca:	f008 fcae 	bl	2bc2a <z_handle_obj_poll_events>
   232ce:	e7b5      	b.n	2323c <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   232d0:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   232d2:	f003 0303 	and.w	r3, r3, #3
   232d6:	4303      	orrs	r3, r0
   232d8:	6013      	str	r3, [r2, #0]
   232da:	e7e4      	b.n	232a6 <queue_insert+0xd6>
   232dc:	4313      	orrs	r3, r2
   232de:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   232e0:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   232e2:	f003 0303 	and.w	r3, r3, #3
   232e6:	4303      	orrs	r3, r0
   232e8:	6033      	str	r3, [r6, #0]
}
   232ea:	e7eb      	b.n	232c4 <queue_insert+0xf4>
   232ec:	0002d072 	.word	0x0002d072
   232f0:	0002d0c4 	.word	0x0002d0c4
   232f4:	0002cfb2 	.word	0x0002cfb2
   232f8:	0002d0d9 	.word	0x0002d0d9
   232fc:	0002d098 	.word	0x0002d098
   23300:	0002d0af 	.word	0x0002d0af

00023304 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   23304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23308:	4605      	mov	r5, r0
   2330a:	4617      	mov	r7, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   2330c:	460c      	mov	r4, r1
   2330e:	2900      	cmp	r1, #0
   23310:	d04a      	beq.n	233a8 <k_queue_append_list+0xa4>
   23312:	2a00      	cmp	r2, #0
   23314:	d048      	beq.n	233a8 <k_queue_append_list+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   23316:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2331a:	f04f 0320 	mov.w	r3, #32
   2331e:	f3ef 8911 	mrs	r9, BASEPRI
   23322:	f383 8811 	msr	BASEPRI, r3
   23326:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2332a:	4630      	mov	r0, r6
   2332c:	f7ff fd54 	bl	22dd8 <z_spin_lock_valid>
   23330:	b968      	cbnz	r0, 2334e <k_queue_append_list+0x4a>
   23332:	2381      	movs	r3, #129	; 0x81
   23334:	4a1e      	ldr	r2, [pc, #120]	; (233b0 <k_queue_append_list+0xac>)
   23336:	491f      	ldr	r1, [pc, #124]	; (233b4 <k_queue_append_list+0xb0>)
   23338:	481f      	ldr	r0, [pc, #124]	; (233b8 <k_queue_append_list+0xb4>)
   2333a:	f003 f9ef 	bl	2671c <printk>
   2333e:	4631      	mov	r1, r6
   23340:	481e      	ldr	r0, [pc, #120]	; (233bc <k_queue_append_list+0xb8>)
   23342:	f003 f9eb 	bl	2671c <printk>
   23346:	2181      	movs	r1, #129	; 0x81
   23348:	4819      	ldr	r0, [pc, #100]	; (233b0 <k_queue_append_list+0xac>)
   2334a:	f003 fc8c 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   2334e:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   23350:	f105 080c 	add.w	r8, r5, #12
   23354:	f7ff fd5c 	bl	22e10 <z_spin_lock_set_owner>
   23358:	4640      	mov	r0, r8
   2335a:	f001 fdb3 	bl	24ec4 <z_unpend_first_thread>
   2335e:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   23362:	b920      	cbnz	r0, 2336e <k_queue_append_list+0x6a>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   23364:	686b      	ldr	r3, [r5, #4]
   23366:	b9cb      	cbnz	r3, 2339c <k_queue_append_list+0x98>
	list->head = node;
   23368:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2336a:	606f      	str	r7, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2336c:	e00a      	b.n	23384 <k_queue_append_list+0x80>
	thread->base.swap_data = data;
   2336e:	6144      	str	r4, [r0, #20]
   23370:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   23374:	f001 fbc6 	bl	24b04 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   23378:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2337a:	4640      	mov	r0, r8
   2337c:	f001 fda2 	bl	24ec4 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   23380:	2c00      	cmp	r4, #0
   23382:	d1ee      	bne.n	23362 <k_queue_append_list+0x5e>
	z_handle_obj_poll_events(&queue->poll_events, state);
   23384:	2104      	movs	r1, #4
   23386:	f105 0014 	add.w	r0, r5, #20
   2338a:	f008 fc4e 	bl	2bc2a <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   2338e:	4630      	mov	r0, r6
   23390:	4649      	mov	r1, r9
   23392:	f000 ff3f 	bl	24214 <z_reschedule>
	return 0;
   23396:	2000      	movs	r0, #0
}
   23398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2339c:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2339e:	f001 0103 	and.w	r1, r1, #3
   233a2:	430c      	orrs	r4, r1
   233a4:	601c      	str	r4, [r3, #0]
}
   233a6:	e7e0      	b.n	2336a <k_queue_append_list+0x66>
		return -EINVAL;
   233a8:	f06f 0015 	mvn.w	r0, #21
   233ac:	e7f4      	b.n	23398 <k_queue_append_list+0x94>
   233ae:	bf00      	nop
   233b0:	0002d072 	.word	0x0002d072
   233b4:	0002d0c4 	.word	0x0002d0c4
   233b8:	0002cfb2 	.word	0x0002cfb2
   233bc:	0002d0d9 	.word	0x0002d0d9

000233c0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   233c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   233c4:	4606      	mov	r6, r0
   233c6:	4690      	mov	r8, r2
   233c8:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   233ca:	f100 0508 	add.w	r5, r0, #8
   233ce:	f04f 0320 	mov.w	r3, #32
   233d2:	f3ef 8711 	mrs	r7, BASEPRI
   233d6:	f383 8811 	msr	BASEPRI, r3
   233da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   233de:	4628      	mov	r0, r5
   233e0:	f7ff fcfa 	bl	22dd8 <z_spin_lock_valid>
   233e4:	b968      	cbnz	r0, 23402 <z_impl_k_queue_get+0x42>
   233e6:	2381      	movs	r3, #129	; 0x81
   233e8:	4a25      	ldr	r2, [pc, #148]	; (23480 <z_impl_k_queue_get+0xc0>)
   233ea:	4926      	ldr	r1, [pc, #152]	; (23484 <z_impl_k_queue_get+0xc4>)
   233ec:	4826      	ldr	r0, [pc, #152]	; (23488 <z_impl_k_queue_get+0xc8>)
   233ee:	f003 f995 	bl	2671c <printk>
   233f2:	4629      	mov	r1, r5
   233f4:	4825      	ldr	r0, [pc, #148]	; (2348c <z_impl_k_queue_get+0xcc>)
   233f6:	f003 f991 	bl	2671c <printk>
   233fa:	2181      	movs	r1, #129	; 0x81
   233fc:	4820      	ldr	r0, [pc, #128]	; (23480 <z_impl_k_queue_get+0xc0>)
   233fe:	f003 fc32 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   23402:	4628      	mov	r0, r5
   23404:	f7ff fd04 	bl	22e10 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   23408:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2340a:	b33c      	cbz	r4, 2345c <z_impl_k_queue_get+0x9c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2340c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2340e:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23410:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   23414:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   23416:	4620      	mov	r0, r4
   23418:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   2341c:	6033      	str	r3, [r6, #0]
	list->tail = node;
   2341e:	bf08      	it	eq
   23420:	6073      	streq	r3, [r6, #4]
   23422:	f008 fab2 	bl	2b98a <z_queue_node_peek>
   23426:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23428:	4628      	mov	r0, r5
   2342a:	f7ff fce3 	bl	22df4 <z_spin_unlock_valid>
   2342e:	b968      	cbnz	r0, 2344c <z_impl_k_queue_get+0x8c>
   23430:	23ac      	movs	r3, #172	; 0xac
   23432:	4a13      	ldr	r2, [pc, #76]	; (23480 <z_impl_k_queue_get+0xc0>)
   23434:	4916      	ldr	r1, [pc, #88]	; (23490 <z_impl_k_queue_get+0xd0>)
   23436:	4814      	ldr	r0, [pc, #80]	; (23488 <z_impl_k_queue_get+0xc8>)
   23438:	f003 f970 	bl	2671c <printk>
   2343c:	4629      	mov	r1, r5
   2343e:	4815      	ldr	r0, [pc, #84]	; (23494 <z_impl_k_queue_get+0xd4>)
   23440:	f003 f96c 	bl	2671c <printk>
   23444:	21ac      	movs	r1, #172	; 0xac
   23446:	480e      	ldr	r0, [pc, #56]	; (23480 <z_impl_k_queue_get+0xc0>)
   23448:	f003 fc0d 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   2344c:	f387 8811 	msr	BASEPRI, r7
   23450:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   23454:	4620      	mov	r0, r4
   23456:	b003      	add	sp, #12
   23458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2345c:	ea58 0309 	orrs.w	r3, r8, r9
   23460:	d0e2      	beq.n	23428 <z_impl_k_queue_get+0x68>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   23462:	4639      	mov	r1, r7
   23464:	4628      	mov	r0, r5
   23466:	e9cd 8900 	strd	r8, r9, [sp]
   2346a:	f106 020c 	add.w	r2, r6, #12
   2346e:	f001 f90f 	bl	24690 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   23472:	2800      	cmp	r0, #0
   23474:	d1ee      	bne.n	23454 <z_impl_k_queue_get+0x94>
   23476:	4b08      	ldr	r3, [pc, #32]	; (23498 <z_impl_k_queue_get+0xd8>)
   23478:	689b      	ldr	r3, [r3, #8]
   2347a:	695c      	ldr	r4, [r3, #20]
   2347c:	e7ea      	b.n	23454 <z_impl_k_queue_get+0x94>
   2347e:	bf00      	nop
   23480:	0002d072 	.word	0x0002d072
   23484:	0002d0c4 	.word	0x0002d0c4
   23488:	0002cfb2 	.word	0x0002cfb2
   2348c:	0002d0d9 	.word	0x0002d0d9
   23490:	0002d098 	.word	0x0002d098
   23494:	0002d0af 	.word	0x0002d0af
   23498:	20009ba8 	.word	0x20009ba8

0002349c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2349c:	b538      	push	{r3, r4, r5, lr}
   2349e:	4604      	mov	r4, r0
	__asm__ volatile(
   234a0:	f04f 0320 	mov.w	r3, #32
   234a4:	f3ef 8511 	mrs	r5, BASEPRI
   234a8:	f383 8811 	msr	BASEPRI, r3
   234ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   234b0:	4817      	ldr	r0, [pc, #92]	; (23510 <z_impl_k_sem_give+0x74>)
   234b2:	f7ff fc91 	bl	22dd8 <z_spin_lock_valid>
   234b6:	b968      	cbnz	r0, 234d4 <z_impl_k_sem_give+0x38>
   234b8:	2381      	movs	r3, #129	; 0x81
   234ba:	4a16      	ldr	r2, [pc, #88]	; (23514 <z_impl_k_sem_give+0x78>)
   234bc:	4916      	ldr	r1, [pc, #88]	; (23518 <z_impl_k_sem_give+0x7c>)
   234be:	4817      	ldr	r0, [pc, #92]	; (2351c <z_impl_k_sem_give+0x80>)
   234c0:	f003 f92c 	bl	2671c <printk>
   234c4:	4912      	ldr	r1, [pc, #72]	; (23510 <z_impl_k_sem_give+0x74>)
   234c6:	4816      	ldr	r0, [pc, #88]	; (23520 <z_impl_k_sem_give+0x84>)
   234c8:	f003 f928 	bl	2671c <printk>
   234cc:	2181      	movs	r1, #129	; 0x81
   234ce:	4811      	ldr	r0, [pc, #68]	; (23514 <z_impl_k_sem_give+0x78>)
   234d0:	f003 fbc9 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   234d4:	480e      	ldr	r0, [pc, #56]	; (23510 <z_impl_k_sem_give+0x74>)
   234d6:	f7ff fc9b 	bl	22e10 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   234da:	4620      	mov	r0, r4
   234dc:	f001 fcf2 	bl	24ec4 <z_unpend_first_thread>

	if (thread != NULL) {
   234e0:	b148      	cbz	r0, 234f6 <z_impl_k_sem_give+0x5a>
   234e2:	2200      	movs	r2, #0
   234e4:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   234e6:	f001 fb0d 	bl	24b04 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   234ea:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   234ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   234f0:	4807      	ldr	r0, [pc, #28]	; (23510 <z_impl_k_sem_give+0x74>)
   234f2:	f000 be8f 	b.w	24214 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   234f6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   234fa:	429a      	cmp	r2, r3
   234fc:	bf18      	it	ne
   234fe:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   23500:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   23502:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   23504:	f104 0010 	add.w	r0, r4, #16
   23508:	f008 fb8f 	bl	2bc2a <z_handle_obj_poll_events>
}
   2350c:	e7ed      	b.n	234ea <z_impl_k_sem_give+0x4e>
   2350e:	bf00      	nop
   23510:	20009bdc 	.word	0x20009bdc
   23514:	0002d072 	.word	0x0002d072
   23518:	0002d0c4 	.word	0x0002d0c4
   2351c:	0002cfb2 	.word	0x0002cfb2
   23520:	0002d0d9 	.word	0x0002d0d9

00023524 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   23524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23526:	4604      	mov	r4, r0
   23528:	4616      	mov	r6, r2
   2352a:	461f      	mov	r7, r3
   2352c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   23530:	b17b      	cbz	r3, 23552 <z_impl_k_sem_take+0x2e>
   23532:	ea56 0307 	orrs.w	r3, r6, r7
   23536:	d00c      	beq.n	23552 <z_impl_k_sem_take+0x2e>
   23538:	4935      	ldr	r1, [pc, #212]	; (23610 <z_impl_k_sem_take+0xec>)
   2353a:	2379      	movs	r3, #121	; 0x79
   2353c:	4a35      	ldr	r2, [pc, #212]	; (23614 <z_impl_k_sem_take+0xf0>)
   2353e:	4836      	ldr	r0, [pc, #216]	; (23618 <z_impl_k_sem_take+0xf4>)
   23540:	f003 f8ec 	bl	2671c <printk>
   23544:	4835      	ldr	r0, [pc, #212]	; (2361c <z_impl_k_sem_take+0xf8>)
   23546:	f003 f8e9 	bl	2671c <printk>
   2354a:	2179      	movs	r1, #121	; 0x79
   2354c:	4831      	ldr	r0, [pc, #196]	; (23614 <z_impl_k_sem_take+0xf0>)
   2354e:	f003 fb8a 	bl	26c66 <assert_post_action>
   23552:	f04f 0320 	mov.w	r3, #32
   23556:	f3ef 8511 	mrs	r5, BASEPRI
   2355a:	f383 8811 	msr	BASEPRI, r3
   2355e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23562:	482f      	ldr	r0, [pc, #188]	; (23620 <z_impl_k_sem_take+0xfc>)
   23564:	f7ff fc38 	bl	22dd8 <z_spin_lock_valid>
   23568:	b968      	cbnz	r0, 23586 <z_impl_k_sem_take+0x62>
   2356a:	2381      	movs	r3, #129	; 0x81
   2356c:	4a2d      	ldr	r2, [pc, #180]	; (23624 <z_impl_k_sem_take+0x100>)
   2356e:	492e      	ldr	r1, [pc, #184]	; (23628 <z_impl_k_sem_take+0x104>)
   23570:	4829      	ldr	r0, [pc, #164]	; (23618 <z_impl_k_sem_take+0xf4>)
   23572:	f003 f8d3 	bl	2671c <printk>
   23576:	492a      	ldr	r1, [pc, #168]	; (23620 <z_impl_k_sem_take+0xfc>)
   23578:	482c      	ldr	r0, [pc, #176]	; (2362c <z_impl_k_sem_take+0x108>)
   2357a:	f003 f8cf 	bl	2671c <printk>
   2357e:	2181      	movs	r1, #129	; 0x81
   23580:	4828      	ldr	r0, [pc, #160]	; (23624 <z_impl_k_sem_take+0x100>)
   23582:	f003 fb70 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   23586:	4826      	ldr	r0, [pc, #152]	; (23620 <z_impl_k_sem_take+0xfc>)
   23588:	f7ff fc42 	bl	22e10 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   2358c:	68a3      	ldr	r3, [r4, #8]
   2358e:	b1d3      	cbz	r3, 235c6 <z_impl_k_sem_take+0xa2>
		sem->count--;
   23590:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23592:	4823      	ldr	r0, [pc, #140]	; (23620 <z_impl_k_sem_take+0xfc>)
   23594:	60a3      	str	r3, [r4, #8]
   23596:	f7ff fc2d 	bl	22df4 <z_spin_unlock_valid>
   2359a:	b968      	cbnz	r0, 235b8 <z_impl_k_sem_take+0x94>
   2359c:	23ac      	movs	r3, #172	; 0xac
   2359e:	4a21      	ldr	r2, [pc, #132]	; (23624 <z_impl_k_sem_take+0x100>)
   235a0:	4923      	ldr	r1, [pc, #140]	; (23630 <z_impl_k_sem_take+0x10c>)
   235a2:	481d      	ldr	r0, [pc, #116]	; (23618 <z_impl_k_sem_take+0xf4>)
   235a4:	f003 f8ba 	bl	2671c <printk>
   235a8:	491d      	ldr	r1, [pc, #116]	; (23620 <z_impl_k_sem_take+0xfc>)
   235aa:	4822      	ldr	r0, [pc, #136]	; (23634 <z_impl_k_sem_take+0x110>)
   235ac:	f003 f8b6 	bl	2671c <printk>
   235b0:	21ac      	movs	r1, #172	; 0xac
   235b2:	481c      	ldr	r0, [pc, #112]	; (23624 <z_impl_k_sem_take+0x100>)
   235b4:	f003 fb57 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   235b8:	f385 8811 	msr	BASEPRI, r5
   235bc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   235c0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   235c2:	b003      	add	sp, #12
   235c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   235c6:	ea56 0307 	orrs.w	r3, r6, r7
   235ca:	d118      	bne.n	235fe <z_impl_k_sem_take+0xda>
   235cc:	4814      	ldr	r0, [pc, #80]	; (23620 <z_impl_k_sem_take+0xfc>)
   235ce:	f7ff fc11 	bl	22df4 <z_spin_unlock_valid>
   235d2:	b968      	cbnz	r0, 235f0 <z_impl_k_sem_take+0xcc>
   235d4:	23ac      	movs	r3, #172	; 0xac
   235d6:	4a13      	ldr	r2, [pc, #76]	; (23624 <z_impl_k_sem_take+0x100>)
   235d8:	4915      	ldr	r1, [pc, #84]	; (23630 <z_impl_k_sem_take+0x10c>)
   235da:	480f      	ldr	r0, [pc, #60]	; (23618 <z_impl_k_sem_take+0xf4>)
   235dc:	f003 f89e 	bl	2671c <printk>
   235e0:	490f      	ldr	r1, [pc, #60]	; (23620 <z_impl_k_sem_take+0xfc>)
   235e2:	4814      	ldr	r0, [pc, #80]	; (23634 <z_impl_k_sem_take+0x110>)
   235e4:	f003 f89a 	bl	2671c <printk>
   235e8:	21ac      	movs	r1, #172	; 0xac
   235ea:	480e      	ldr	r0, [pc, #56]	; (23624 <z_impl_k_sem_take+0x100>)
   235ec:	f003 fb3b 	bl	26c66 <assert_post_action>
   235f0:	f385 8811 	msr	BASEPRI, r5
   235f4:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   235f8:	f06f 000f 	mvn.w	r0, #15
   235fc:	e7e1      	b.n	235c2 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   235fe:	4622      	mov	r2, r4
   23600:	4629      	mov	r1, r5
   23602:	e9cd 6700 	strd	r6, r7, [sp]
   23606:	4806      	ldr	r0, [pc, #24]	; (23620 <z_impl_k_sem_take+0xfc>)
   23608:	f001 f842 	bl	24690 <z_pend_curr>
	return ret;
   2360c:	e7d9      	b.n	235c2 <z_impl_k_sem_take+0x9e>
   2360e:	bf00      	nop
   23610:	00031325 	.word	0x00031325
   23614:	00031305 	.word	0x00031305
   23618:	0002cfb2 	.word	0x0002cfb2
   2361c:	00030725 	.word	0x00030725
   23620:	20009bdc 	.word	0x20009bdc
   23624:	0002d072 	.word	0x0002d072
   23628:	0002d0c4 	.word	0x0002d0c4
   2362c:	0002d0d9 	.word	0x0002d0d9
   23630:	0002d098 	.word	0x0002d098
   23634:	0002d0af 	.word	0x0002d0af

00023638 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   23638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   2363a:	2400      	movs	r4, #0
   2363c:	4b08      	ldr	r3, [pc, #32]	; (23660 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2363e:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct k_work_queue_config cfg = {
   23642:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   23644:	ab02      	add	r3, sp, #8
   23646:	9300      	str	r3, [sp, #0]
   23648:	4906      	ldr	r1, [pc, #24]	; (23664 <k_sys_work_q_init+0x2c>)
   2364a:	f04f 33ff 	mov.w	r3, #4294967295
   2364e:	4806      	ldr	r0, [pc, #24]	; (23668 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   23650:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   23654:	f000 fa88 	bl	23b68 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   23658:	4620      	mov	r0, r4
   2365a:	b004      	add	sp, #16
   2365c:	bd10      	pop	{r4, pc}
   2365e:	bf00      	nop
   23660:	00031372 	.word	0x00031372
   23664:	2000cf60 	.word	0x2000cf60
   23668:	20009170 	.word	0x20009170

0002366c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   2366c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23670:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23672:	4e7e      	ldr	r6, [pc, #504]	; (2386c <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   23674:	4f7e      	ldr	r7, [pc, #504]	; (23870 <work_queue_main+0x204>)
{
   23676:	b085      	sub	sp, #20
	__asm__ volatile(
   23678:	f04f 0320 	mov.w	r3, #32
   2367c:	f3ef 8811 	mrs	r8, BASEPRI
   23680:	f383 8811 	msr	BASEPRI, r3
   23684:	f3bf 8f6f 	isb	sy
   23688:	4630      	mov	r0, r6
   2368a:	f7ff fba5 	bl	22dd8 <z_spin_lock_valid>
   2368e:	b968      	cbnz	r0, 236ac <work_queue_main+0x40>
   23690:	2381      	movs	r3, #129	; 0x81
   23692:	4a78      	ldr	r2, [pc, #480]	; (23874 <work_queue_main+0x208>)
   23694:	4978      	ldr	r1, [pc, #480]	; (23878 <work_queue_main+0x20c>)
   23696:	4879      	ldr	r0, [pc, #484]	; (2387c <work_queue_main+0x210>)
   23698:	f003 f840 	bl	2671c <printk>
   2369c:	4631      	mov	r1, r6
   2369e:	4878      	ldr	r0, [pc, #480]	; (23880 <work_queue_main+0x214>)
   236a0:	f003 f83c 	bl	2671c <printk>
   236a4:	2181      	movs	r1, #129	; 0x81
   236a6:	4873      	ldr	r0, [pc, #460]	; (23874 <work_queue_main+0x208>)
   236a8:	f003 fadd 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   236ac:	4630      	mov	r0, r6
   236ae:	f7ff fbaf 	bl	22e10 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
   236b2:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   236b6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   236ba:	b9ad      	cbnz	r5, 236e8 <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
   236bc:	f023 0204 	bic.w	r2, r3, #4
			flag_set(&queue->flags, K_WORK_QUEUE_BUSY_BIT);
			work = CONTAINER_OF(node, struct k_work, node);
			flag_set(&work->flags, K_WORK_RUNNING_BIT);
			flag_clear(&work->flags, K_WORK_QUEUED_BIT);
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   236c0:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
   236c2:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   236c6:	f100 8092 	bmi.w	237ee <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   236ca:	2300      	movs	r3, #0
   236cc:	f04f 32ff 	mov.w	r2, #4294967295
   236d0:	9302      	str	r3, [sp, #8]
   236d2:	f04f 33ff 	mov.w	r3, #4294967295
   236d6:	4641      	mov	r1, r8
   236d8:	e9cd 2300 	strd	r2, r3, [sp]
   236dc:	4630      	mov	r0, r6
   236de:	f104 0288 	add.w	r2, r4, #136	; 0x88
   236e2:	f001 fef5 	bl	254d0 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   236e6:	e7c7      	b.n	23678 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   236e8:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   236ec:	682a      	ldr	r2, [r5, #0]
   236ee:	428d      	cmp	r5, r1
	list->head = node;
   236f0:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   236f4:	d101      	bne.n	236fa <work_queue_main+0x8e>
	list->tail = node;
   236f6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   236fa:	f043 0302 	orr.w	r3, r3, #2
   236fe:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   23702:	68eb      	ldr	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23704:	4630      	mov	r0, r6
   23706:	f023 0304 	bic.w	r3, r3, #4
   2370a:	f043 0301 	orr.w	r3, r3, #1
   2370e:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   23710:	f8d5 9004 	ldr.w	r9, [r5, #4]
   23714:	f7ff fb6e 	bl	22df4 <z_spin_unlock_valid>
   23718:	b968      	cbnz	r0, 23736 <work_queue_main+0xca>
   2371a:	23ac      	movs	r3, #172	; 0xac
   2371c:	4a55      	ldr	r2, [pc, #340]	; (23874 <work_queue_main+0x208>)
   2371e:	4959      	ldr	r1, [pc, #356]	; (23884 <work_queue_main+0x218>)
   23720:	4856      	ldr	r0, [pc, #344]	; (2387c <work_queue_main+0x210>)
   23722:	f002 fffb 	bl	2671c <printk>
   23726:	4631      	mov	r1, r6
   23728:	4857      	ldr	r0, [pc, #348]	; (23888 <work_queue_main+0x21c>)
   2372a:	f002 fff7 	bl	2671c <printk>
   2372e:	21ac      	movs	r1, #172	; 0xac
   23730:	4850      	ldr	r0, [pc, #320]	; (23874 <work_queue_main+0x208>)
   23732:	f003 fa98 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   23736:	f388 8811 	msr	BASEPRI, r8
   2373a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
   2373e:	f1b9 0f00 	cmp.w	r9, #0
   23742:	d10b      	bne.n	2375c <work_queue_main+0xf0>
   23744:	4951      	ldr	r1, [pc, #324]	; (2388c <work_queue_main+0x220>)
   23746:	484d      	ldr	r0, [pc, #308]	; (2387c <work_queue_main+0x210>)
   23748:	f240 237d 	movw	r3, #637	; 0x27d
   2374c:	4a50      	ldr	r2, [pc, #320]	; (23890 <work_queue_main+0x224>)
   2374e:	f002 ffe5 	bl	2671c <printk>
   23752:	f240 217d 	movw	r1, #637	; 0x27d
   23756:	484e      	ldr	r0, [pc, #312]	; (23890 <work_queue_main+0x224>)
   23758:	f003 fa85 	bl	26c66 <assert_post_action>
			handler(work);
   2375c:	4628      	mov	r0, r5
   2375e:	47c8      	blx	r9
	__asm__ volatile(
   23760:	f04f 0320 	mov.w	r3, #32
   23764:	f3ef 8a11 	mrs	sl, BASEPRI
   23768:	f383 8811 	msr	BASEPRI, r3
   2376c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23770:	4630      	mov	r0, r6
   23772:	f7ff fb31 	bl	22dd8 <z_spin_lock_valid>
   23776:	b968      	cbnz	r0, 23794 <work_queue_main+0x128>
   23778:	2381      	movs	r3, #129	; 0x81
   2377a:	4a3e      	ldr	r2, [pc, #248]	; (23874 <work_queue_main+0x208>)
   2377c:	493e      	ldr	r1, [pc, #248]	; (23878 <work_queue_main+0x20c>)
   2377e:	483f      	ldr	r0, [pc, #252]	; (2387c <work_queue_main+0x210>)
   23780:	f002 ffcc 	bl	2671c <printk>
   23784:	4631      	mov	r1, r6
   23786:	483e      	ldr	r0, [pc, #248]	; (23880 <work_queue_main+0x214>)
   23788:	f002 ffc8 	bl	2671c <printk>
   2378c:	2181      	movs	r1, #129	; 0x81
   2378e:	4839      	ldr	r0, [pc, #228]	; (23874 <work_queue_main+0x208>)
   23790:	f003 fa69 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   23794:	4630      	mov	r0, r6
   23796:	f7ff fb3b 	bl	22e10 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   2379a:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2379c:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   2379e:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   237a2:	d42e      	bmi.n	23802 <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
   237a4:	60ea      	str	r2, [r5, #12]
   237a6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   237aa:	4630      	mov	r0, r6
   237ac:	f023 0302 	bic.w	r3, r3, #2
   237b0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
   237b4:	f3c3 2500 	ubfx	r5, r3, #8, #1
   237b8:	f7ff fb1c 	bl	22df4 <z_spin_unlock_valid>
   237bc:	b968      	cbnz	r0, 237da <work_queue_main+0x16e>
   237be:	23ac      	movs	r3, #172	; 0xac
   237c0:	4a2c      	ldr	r2, [pc, #176]	; (23874 <work_queue_main+0x208>)
   237c2:	4930      	ldr	r1, [pc, #192]	; (23884 <work_queue_main+0x218>)
   237c4:	482d      	ldr	r0, [pc, #180]	; (2387c <work_queue_main+0x210>)
   237c6:	f002 ffa9 	bl	2671c <printk>
   237ca:	4631      	mov	r1, r6
   237cc:	482e      	ldr	r0, [pc, #184]	; (23888 <work_queue_main+0x21c>)
   237ce:	f002 ffa5 	bl	2671c <printk>
   237d2:	21ac      	movs	r1, #172	; 0xac
   237d4:	4827      	ldr	r0, [pc, #156]	; (23874 <work_queue_main+0x208>)
   237d6:	f003 fa46 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   237da:	f38a 8811 	msr	BASEPRI, sl
   237de:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   237e2:	2d00      	cmp	r5, #0
   237e4:	f47f af48 	bne.w	23678 <work_queue_main+0xc>
	z_impl_k_yield();
   237e8:	f001 fbc8 	bl	24f7c <z_impl_k_yield>
}
   237ec:	e744      	b.n	23678 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   237ee:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   237f2:	2200      	movs	r2, #0
   237f4:	2101      	movs	r1, #1
   237f6:	4628      	mov	r0, r5
   237f8:	f001 fe12 	bl	25420 <z_sched_wake>
   237fc:	2800      	cmp	r0, #0
   237fe:	d1f8      	bne.n	237f2 <work_queue_main+0x186>
   23800:	e763      	b.n	236ca <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   23802:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   23804:	f023 0303 	bic.w	r3, r3, #3
   23808:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2380a:	2800      	cmp	r0, #0
   2380c:	d0cb      	beq.n	237a6 <work_queue_main+0x13a>
	return node->next;
   2380e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23810:	f04f 0900 	mov.w	r9, #0
   23814:	2b00      	cmp	r3, #0
   23816:	bf38      	it	cc
   23818:	2300      	movcc	r3, #0
	parent->next = child;
   2381a:	46cb      	mov	fp, r9
   2381c:	4698      	mov	r8, r3
		if (wc->work == work) {
   2381e:	6843      	ldr	r3, [r0, #4]
   23820:	4602      	mov	r2, r0
   23822:	429d      	cmp	r5, r3
   23824:	d10d      	bne.n	23842 <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
   23826:	6802      	ldr	r2, [r0, #0]
   23828:	f1b9 0f00 	cmp.w	r9, #0
   2382c:	d115      	bne.n	2385a <work_queue_main+0x1ee>
   2382e:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   23830:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   23832:	4283      	cmp	r3, r0
   23834:	d100      	bne.n	23838 <work_queue_main+0x1cc>
	list->tail = node;
   23836:	607a      	str	r2, [r7, #4]
	parent->next = child;
   23838:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   2383c:	f7ff fe2e 	bl	2349c <z_impl_k_sem_give>
}
   23840:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   23842:	f1b8 0f00 	cmp.w	r8, #0
   23846:	d0ae      	beq.n	237a6 <work_queue_main+0x13a>
	return node->next;
   23848:	f8d8 3000 	ldr.w	r3, [r8]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2384c:	4640      	mov	r0, r8
   2384e:	2b00      	cmp	r3, #0
   23850:	bf38      	it	cc
   23852:	2300      	movcc	r3, #0
   23854:	4691      	mov	r9, r2
   23856:	4698      	mov	r8, r3
   23858:	e7e1      	b.n	2381e <work_queue_main+0x1b2>
	parent->next = child;
   2385a:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
   2385e:	687b      	ldr	r3, [r7, #4]
   23860:	4283      	cmp	r3, r0
	list->tail = node;
   23862:	bf08      	it	eq
   23864:	f8c7 9004 	streq.w	r9, [r7, #4]
}
   23868:	e7e6      	b.n	23838 <work_queue_main+0x1cc>
   2386a:	bf00      	nop
   2386c:	20009be0 	.word	0x20009be0
   23870:	20009be4 	.word	0x20009be4
   23874:	0002d072 	.word	0x0002d072
   23878:	0002d0c4 	.word	0x0002d0c4
   2387c:	0002cfb2 	.word	0x0002cfb2
   23880:	0002d0d9 	.word	0x0002d0d9
   23884:	0002d098 	.word	0x0002d098
   23888:	0002d0af 	.word	0x0002d0af
   2388c:	0003139c 	.word	0x0003139c
   23890:	0003137b 	.word	0x0003137b

00023894 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   23894:	68c3      	ldr	r3, [r0, #12]
{
   23896:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   23898:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   2389c:	079b      	lsls	r3, r3, #30
{
   2389e:	4605      	mov	r5, r0
   238a0:	460c      	mov	r4, r1
	if (ret) {
   238a2:	d50d      	bpl.n	238c0 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   238a4:	2201      	movs	r2, #1
   238a6:	2100      	movs	r1, #0
   238a8:	f104 0008 	add.w	r0, r4, #8
   238ac:	f008 f89b 	bl	2b9e6 <z_impl_k_sem_init>
	parent->next = child;
   238b0:	2300      	movs	r3, #0
   238b2:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   238b4:	4b05      	ldr	r3, [pc, #20]	; (238cc <cancel_sync_locked+0x38>)
	canceler->work = work;
   238b6:	6065      	str	r5, [r4, #4]
   238b8:	685a      	ldr	r2, [r3, #4]
   238ba:	b91a      	cbnz	r2, 238c4 <cancel_sync_locked+0x30>
	list->head = node;
   238bc:	e9c3 4400 	strd	r4, r4, [r3]
}
   238c0:	4630      	mov	r0, r6
   238c2:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   238c4:	6014      	str	r4, [r2, #0]
	list->tail = node;
   238c6:	605c      	str	r4, [r3, #4]
}
   238c8:	e7fa      	b.n	238c0 <cancel_sync_locked+0x2c>
   238ca:	bf00      	nop
   238cc:	20009be4 	.word	0x20009be4

000238d0 <submit_to_queue_locked>:
{
   238d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   238d2:	68c3      	ldr	r3, [r0, #12]
{
   238d4:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   238d6:	079a      	lsls	r2, r3, #30
{
   238d8:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   238da:	f3c3 0540 	ubfx	r5, r3, #1, #1
   238de:	d42b      	bmi.n	23938 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   238e0:	075f      	lsls	r7, r3, #29
   238e2:	d42b      	bmi.n	2393c <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
   238e4:	680a      	ldr	r2, [r1, #0]
   238e6:	b90a      	cbnz	r2, 238ec <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   238e8:	6882      	ldr	r2, [r0, #8]
   238ea:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   238ec:	07d8      	lsls	r0, r3, #31
   238ee:	d528      	bpl.n	23942 <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
   238f0:	68a3      	ldr	r3, [r4, #8]
   238f2:	b95b      	cbnz	r3, 2390c <submit_to_queue_locked+0x3c>
   238f4:	4924      	ldr	r1, [pc, #144]	; (23988 <submit_to_queue_locked+0xb8>)
   238f6:	4825      	ldr	r0, [pc, #148]	; (2398c <submit_to_queue_locked+0xbc>)
   238f8:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   238fc:	4a24      	ldr	r2, [pc, #144]	; (23990 <submit_to_queue_locked+0xc0>)
   238fe:	f002 ff0d 	bl	2671c <printk>
   23902:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   23906:	4822      	ldr	r0, [pc, #136]	; (23990 <submit_to_queue_locked+0xc0>)
   23908:	f003 f9ad 	bl	26c66 <assert_post_action>
			ret = 2;
   2390c:	2502      	movs	r5, #2
			*queuep = work->queue;
   2390e:	68a3      	ldr	r3, [r4, #8]
   23910:	6033      	str	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   23912:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   23914:	b38f      	cbz	r7, 2397a <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   23916:	4b1f      	ldr	r3, [pc, #124]	; (23994 <submit_to_queue_locked+0xc4>)
   23918:	689b      	ldr	r3, [r3, #8]
   2391a:	42bb      	cmp	r3, r7
   2391c:	d113      	bne.n	23946 <submit_to_queue_locked+0x76>
   2391e:	f008 f819 	bl	2b954 <k_is_in_isr>
   23922:	f080 0001 	eor.w	r0, r0, #1
   23926:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   23928:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2392c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   2392e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   23932:	d525      	bpl.n	23980 <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
   23934:	b14a      	cbz	r2, 2394a <submit_to_queue_locked+0x7a>
   23936:	b950      	cbnz	r0, 2394e <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
   23938:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   2393c:	2300      	movs	r3, #0
   2393e:	6033      	str	r3, [r6, #0]
	return ret;
   23940:	e015      	b.n	2396e <submit_to_queue_locked+0x9e>
		ret = 1;
   23942:	2501      	movs	r5, #1
   23944:	e7e5      	b.n	23912 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   23946:	2000      	movs	r0, #0
   23948:	e7ee      	b.n	23928 <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
   2394a:	071b      	lsls	r3, r3, #28
   2394c:	d4f4      	bmi.n	23938 <submit_to_queue_locked+0x68>
	parent->next = child;
   2394e:	2300      	movs	r3, #0
   23950:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   23952:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   23956:	b963      	cbnz	r3, 23972 <submit_to_queue_locked+0xa2>
	list->head = node;
   23958:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   2395c:	4638      	mov	r0, r7
   2395e:	f008 f852 	bl	2ba06 <notify_queue_locked>
	*flagp |= BIT(bit);
   23962:	68e3      	ldr	r3, [r4, #12]
   23964:	f043 0304 	orr.w	r3, r3, #4
   23968:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   2396a:	6833      	ldr	r3, [r6, #0]
   2396c:	60a3      	str	r3, [r4, #8]
}
   2396e:	4628      	mov	r0, r5
   23970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   23972:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23974:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   23978:	e7f0      	b.n	2395c <submit_to_queue_locked+0x8c>
		return -EINVAL;
   2397a:	f06f 0515 	mvn.w	r5, #21
   2397e:	e7dd      	b.n	2393c <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
   23980:	f06f 0512 	mvn.w	r5, #18
   23984:	e7da      	b.n	2393c <submit_to_queue_locked+0x6c>
   23986:	bf00      	nop
   23988:	000313b3 	.word	0x000313b3
   2398c:	0002cfb2 	.word	0x0002cfb2
   23990:	0003137b 	.word	0x0003137b
   23994:	20009ba8 	.word	0x20009ba8

00023998 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   23998:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2399a:	4604      	mov	r4, r0
	__asm__ volatile(
   2399c:	f04f 0320 	mov.w	r3, #32
   239a0:	f3ef 8511 	mrs	r5, BASEPRI
   239a4:	f383 8811 	msr	BASEPRI, r3
   239a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   239ac:	481e      	ldr	r0, [pc, #120]	; (23a28 <work_timeout+0x90>)
   239ae:	f7ff fa13 	bl	22dd8 <z_spin_lock_valid>
   239b2:	b968      	cbnz	r0, 239d0 <work_timeout+0x38>
   239b4:	2381      	movs	r3, #129	; 0x81
   239b6:	4a1d      	ldr	r2, [pc, #116]	; (23a2c <work_timeout+0x94>)
   239b8:	491d      	ldr	r1, [pc, #116]	; (23a30 <work_timeout+0x98>)
   239ba:	481e      	ldr	r0, [pc, #120]	; (23a34 <work_timeout+0x9c>)
   239bc:	f002 feae 	bl	2671c <printk>
   239c0:	4919      	ldr	r1, [pc, #100]	; (23a28 <work_timeout+0x90>)
   239c2:	481d      	ldr	r0, [pc, #116]	; (23a38 <work_timeout+0xa0>)
   239c4:	f002 feaa 	bl	2671c <printk>
   239c8:	2181      	movs	r1, #129	; 0x81
   239ca:	4818      	ldr	r0, [pc, #96]	; (23a2c <work_timeout+0x94>)
   239cc:	f003 f94b 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   239d0:	4815      	ldr	r0, [pc, #84]	; (23a28 <work_timeout+0x90>)
   239d2:	f7ff fa1d 	bl	22e10 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   239d6:	2300      	movs	r3, #0
   239d8:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   239da:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   239de:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   239e2:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   239e4:	f844 2c04 	str.w	r2, [r4, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   239e8:	d506      	bpl.n	239f8 <work_timeout+0x60>
		queue = dw->queue;
   239ea:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   239ec:	a901      	add	r1, sp, #4
   239ee:	f1a4 0010 	sub.w	r0, r4, #16
		queue = dw->queue;
   239f2:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   239f4:	f7ff ff6c 	bl	238d0 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   239f8:	480b      	ldr	r0, [pc, #44]	; (23a28 <work_timeout+0x90>)
   239fa:	f7ff f9fb 	bl	22df4 <z_spin_unlock_valid>
   239fe:	b968      	cbnz	r0, 23a1c <work_timeout+0x84>
   23a00:	23ac      	movs	r3, #172	; 0xac
   23a02:	4a0a      	ldr	r2, [pc, #40]	; (23a2c <work_timeout+0x94>)
   23a04:	490d      	ldr	r1, [pc, #52]	; (23a3c <work_timeout+0xa4>)
   23a06:	480b      	ldr	r0, [pc, #44]	; (23a34 <work_timeout+0x9c>)
   23a08:	f002 fe88 	bl	2671c <printk>
   23a0c:	4906      	ldr	r1, [pc, #24]	; (23a28 <work_timeout+0x90>)
   23a0e:	480c      	ldr	r0, [pc, #48]	; (23a40 <work_timeout+0xa8>)
   23a10:	f002 fe84 	bl	2671c <printk>
   23a14:	21ac      	movs	r1, #172	; 0xac
   23a16:	4805      	ldr	r0, [pc, #20]	; (23a2c <work_timeout+0x94>)
   23a18:	f003 f925 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   23a1c:	f385 8811 	msr	BASEPRI, r5
   23a20:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   23a24:	b003      	add	sp, #12
   23a26:	bd30      	pop	{r4, r5, pc}
   23a28:	20009be0 	.word	0x20009be0
   23a2c:	0002d072 	.word	0x0002d072
   23a30:	0002d0c4 	.word	0x0002d0c4
   23a34:	0002cfb2 	.word	0x0002cfb2
   23a38:	0002d0d9 	.word	0x0002d0d9
   23a3c:	0002d098 	.word	0x0002d098
   23a40:	0002d0af 	.word	0x0002d0af

00023a44 <k_work_init>:
{
   23a44:	b538      	push	{r3, r4, r5, lr}
   23a46:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   23a48:	4604      	mov	r4, r0
   23a4a:	b948      	cbnz	r0, 23a60 <k_work_init+0x1c>
   23a4c:	490d      	ldr	r1, [pc, #52]	; (23a84 <k_work_init+0x40>)
   23a4e:	480e      	ldr	r0, [pc, #56]	; (23a88 <k_work_init+0x44>)
   23a50:	2389      	movs	r3, #137	; 0x89
   23a52:	4a0e      	ldr	r2, [pc, #56]	; (23a8c <k_work_init+0x48>)
   23a54:	f002 fe62 	bl	2671c <printk>
   23a58:	2189      	movs	r1, #137	; 0x89
   23a5a:	480c      	ldr	r0, [pc, #48]	; (23a8c <k_work_init+0x48>)
   23a5c:	f003 f903 	bl	26c66 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   23a60:	b94d      	cbnz	r5, 23a76 <k_work_init+0x32>
   23a62:	490b      	ldr	r1, [pc, #44]	; (23a90 <k_work_init+0x4c>)
   23a64:	4808      	ldr	r0, [pc, #32]	; (23a88 <k_work_init+0x44>)
   23a66:	238a      	movs	r3, #138	; 0x8a
   23a68:	4a08      	ldr	r2, [pc, #32]	; (23a8c <k_work_init+0x48>)
   23a6a:	f002 fe57 	bl	2671c <printk>
   23a6e:	218a      	movs	r1, #138	; 0x8a
   23a70:	4806      	ldr	r0, [pc, #24]	; (23a8c <k_work_init+0x48>)
   23a72:	f003 f8f8 	bl	26c66 <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   23a76:	2210      	movs	r2, #16
   23a78:	2100      	movs	r1, #0
   23a7a:	4620      	mov	r0, r4
   23a7c:	f004 fdb4 	bl	285e8 <memset>
   23a80:	6065      	str	r5, [r4, #4]
}
   23a82:	bd38      	pop	{r3, r4, r5, pc}
   23a84:	00031452 	.word	0x00031452
   23a88:	0002cfb2 	.word	0x0002cfb2
   23a8c:	0003137b 	.word	0x0003137b
   23a90:	0003139c 	.word	0x0003139c

00023a94 <k_work_submit_to_queue>:
{
   23a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   23a96:	460c      	mov	r4, r1
{
   23a98:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   23a9a:	b959      	cbnz	r1, 23ab4 <k_work_submit_to_queue+0x20>
   23a9c:	4926      	ldr	r1, [pc, #152]	; (23b38 <k_work_submit_to_queue+0xa4>)
   23a9e:	4827      	ldr	r0, [pc, #156]	; (23b3c <k_work_submit_to_queue+0xa8>)
   23aa0:	f240 1369 	movw	r3, #361	; 0x169
   23aa4:	4a26      	ldr	r2, [pc, #152]	; (23b40 <k_work_submit_to_queue+0xac>)
   23aa6:	f002 fe39 	bl	2671c <printk>
   23aaa:	f240 1169 	movw	r1, #361	; 0x169
   23aae:	4824      	ldr	r0, [pc, #144]	; (23b40 <k_work_submit_to_queue+0xac>)
   23ab0:	f003 f8d9 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   23ab4:	f04f 0320 	mov.w	r3, #32
   23ab8:	f3ef 8511 	mrs	r5, BASEPRI
   23abc:	f383 8811 	msr	BASEPRI, r3
   23ac0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23ac4:	481f      	ldr	r0, [pc, #124]	; (23b44 <k_work_submit_to_queue+0xb0>)
   23ac6:	f7ff f987 	bl	22dd8 <z_spin_lock_valid>
   23aca:	b968      	cbnz	r0, 23ae8 <k_work_submit_to_queue+0x54>
   23acc:	2381      	movs	r3, #129	; 0x81
   23ace:	4a1e      	ldr	r2, [pc, #120]	; (23b48 <k_work_submit_to_queue+0xb4>)
   23ad0:	491e      	ldr	r1, [pc, #120]	; (23b4c <k_work_submit_to_queue+0xb8>)
   23ad2:	481a      	ldr	r0, [pc, #104]	; (23b3c <k_work_submit_to_queue+0xa8>)
   23ad4:	f002 fe22 	bl	2671c <printk>
   23ad8:	491a      	ldr	r1, [pc, #104]	; (23b44 <k_work_submit_to_queue+0xb0>)
   23ada:	481d      	ldr	r0, [pc, #116]	; (23b50 <k_work_submit_to_queue+0xbc>)
   23adc:	f002 fe1e 	bl	2671c <printk>
   23ae0:	2181      	movs	r1, #129	; 0x81
   23ae2:	4819      	ldr	r0, [pc, #100]	; (23b48 <k_work_submit_to_queue+0xb4>)
   23ae4:	f003 f8bf 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   23ae8:	4816      	ldr	r0, [pc, #88]	; (23b44 <k_work_submit_to_queue+0xb0>)
   23aea:	f7ff f991 	bl	22e10 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   23aee:	4620      	mov	r0, r4
   23af0:	a901      	add	r1, sp, #4
   23af2:	f7ff feed 	bl	238d0 <submit_to_queue_locked>
   23af6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23af8:	4812      	ldr	r0, [pc, #72]	; (23b44 <k_work_submit_to_queue+0xb0>)
   23afa:	f7ff f97b 	bl	22df4 <z_spin_unlock_valid>
   23afe:	b968      	cbnz	r0, 23b1c <k_work_submit_to_queue+0x88>
   23b00:	23ac      	movs	r3, #172	; 0xac
   23b02:	4a11      	ldr	r2, [pc, #68]	; (23b48 <k_work_submit_to_queue+0xb4>)
   23b04:	4913      	ldr	r1, [pc, #76]	; (23b54 <k_work_submit_to_queue+0xc0>)
   23b06:	480d      	ldr	r0, [pc, #52]	; (23b3c <k_work_submit_to_queue+0xa8>)
   23b08:	f002 fe08 	bl	2671c <printk>
   23b0c:	490d      	ldr	r1, [pc, #52]	; (23b44 <k_work_submit_to_queue+0xb0>)
   23b0e:	4812      	ldr	r0, [pc, #72]	; (23b58 <k_work_submit_to_queue+0xc4>)
   23b10:	f002 fe04 	bl	2671c <printk>
   23b14:	21ac      	movs	r1, #172	; 0xac
   23b16:	480c      	ldr	r0, [pc, #48]	; (23b48 <k_work_submit_to_queue+0xb4>)
   23b18:	f003 f8a5 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   23b1c:	f385 8811 	msr	BASEPRI, r5
   23b20:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   23b24:	2c00      	cmp	r4, #0
   23b26:	dd04      	ble.n	23b32 <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
   23b28:	f001 fbb6 	bl	25298 <z_impl_k_is_preempt_thread>
   23b2c:	b108      	cbz	r0, 23b32 <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
   23b2e:	f001 fa25 	bl	24f7c <z_impl_k_yield>
}
   23b32:	4620      	mov	r0, r4
   23b34:	b003      	add	sp, #12
   23b36:	bd30      	pop	{r4, r5, pc}
   23b38:	00031452 	.word	0x00031452
   23b3c:	0002cfb2 	.word	0x0002cfb2
   23b40:	0003137b 	.word	0x0003137b
   23b44:	20009be0 	.word	0x20009be0
   23b48:	0002d072 	.word	0x0002d072
   23b4c:	0002d0c4 	.word	0x0002d0c4
   23b50:	0002d0d9 	.word	0x0002d0d9
   23b54:	0002d098 	.word	0x0002d098
   23b58:	0002d0af 	.word	0x0002d0af

00023b5c <k_work_submit>:
{
   23b5c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   23b5e:	4801      	ldr	r0, [pc, #4]	; (23b64 <k_work_submit+0x8>)
   23b60:	f7ff bf98 	b.w	23a94 <k_work_submit_to_queue>
   23b64:	20009170 	.word	0x20009170

00023b68 <k_work_queue_start>:
{
   23b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23b6c:	b088      	sub	sp, #32
   23b6e:	460e      	mov	r6, r1
   23b70:	4617      	mov	r7, r2
   23b72:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   23b74:	4604      	mov	r4, r0
{
   23b76:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   23b78:	b958      	cbnz	r0, 23b92 <k_work_queue_start+0x2a>
   23b7a:	492e      	ldr	r1, [pc, #184]	; (23c34 <k_work_queue_start+0xcc>)
   23b7c:	482e      	ldr	r0, [pc, #184]	; (23c38 <k_work_queue_start+0xd0>)
   23b7e:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   23b82:	4a2e      	ldr	r2, [pc, #184]	; (23c3c <k_work_queue_start+0xd4>)
   23b84:	f002 fdca 	bl	2671c <printk>
   23b88:	f44f 7128 	mov.w	r1, #672	; 0x2a0
   23b8c:	482b      	ldr	r0, [pc, #172]	; (23c3c <k_work_queue_start+0xd4>)
   23b8e:	f003 f86a 	bl	26c66 <assert_post_action>
	__ASSERT_NO_MSG(stack);
   23b92:	b95e      	cbnz	r6, 23bac <k_work_queue_start+0x44>
   23b94:	492a      	ldr	r1, [pc, #168]	; (23c40 <k_work_queue_start+0xd8>)
   23b96:	4828      	ldr	r0, [pc, #160]	; (23c38 <k_work_queue_start+0xd0>)
   23b98:	f240 23a1 	movw	r3, #673	; 0x2a1
   23b9c:	4a27      	ldr	r2, [pc, #156]	; (23c3c <k_work_queue_start+0xd4>)
   23b9e:	f002 fdbd 	bl	2671c <printk>
   23ba2:	f240 21a1 	movw	r1, #673	; 0x2a1
   23ba6:	4825      	ldr	r0, [pc, #148]	; (23c3c <k_work_queue_start+0xd4>)
   23ba8:	f003 f85d 	bl	26c66 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   23bac:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   23bb0:	07db      	lsls	r3, r3, #31
   23bb2:	d50b      	bpl.n	23bcc <k_work_queue_start+0x64>
   23bb4:	4923      	ldr	r1, [pc, #140]	; (23c44 <k_work_queue_start+0xdc>)
   23bb6:	4820      	ldr	r0, [pc, #128]	; (23c38 <k_work_queue_start+0xd0>)
   23bb8:	f240 23a2 	movw	r3, #674	; 0x2a2
   23bbc:	4a1f      	ldr	r2, [pc, #124]	; (23c3c <k_work_queue_start+0xd4>)
   23bbe:	f002 fdad 	bl	2671c <printk>
   23bc2:	f240 21a2 	movw	r1, #674	; 0x2a2
   23bc6:	481d      	ldr	r0, [pc, #116]	; (23c3c <k_work_queue_start+0xd4>)
   23bc8:	f003 f84d 	bl	26c66 <assert_post_action>
	list->head = NULL;
   23bcc:	2300      	movs	r3, #0
	list->tail = NULL;
   23bce:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
   23bd2:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   23bd6:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
   23bda:	f104 0390 	add.w	r3, r4, #144	; 0x90
   23bde:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   23be2:	b32d      	cbz	r5, 23c30 <k_work_queue_start+0xc8>
   23be4:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   23be6:	f240 1101 	movw	r1, #257	; 0x101
   23bea:	2b00      	cmp	r3, #0
   23bec:	bf08      	it	eq
   23bee:	2101      	moveq	r1, #1
	*flagp = flags;
   23bf0:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   23bf4:	f04f 32ff 	mov.w	r2, #4294967295
   23bf8:	f04f 33ff 	mov.w	r3, #4294967295
   23bfc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   23c00:	2200      	movs	r2, #0
   23c02:	4631      	mov	r1, r6
   23c04:	e9cd 8203 	strd	r8, r2, [sp, #12]
   23c08:	e9cd 2201 	strd	r2, r2, [sp, #4]
   23c0c:	4620      	mov	r0, r4
   23c0e:	463a      	mov	r2, r7
   23c10:	4b0d      	ldr	r3, [pc, #52]	; (23c48 <k_work_queue_start+0xe0>)
   23c12:	9400      	str	r4, [sp, #0]
   23c14:	f7ff f802 	bl	22c1c <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   23c18:	b125      	cbz	r5, 23c24 <k_work_queue_start+0xbc>
   23c1a:	6829      	ldr	r1, [r5, #0]
   23c1c:	b111      	cbz	r1, 23c24 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
   23c1e:	4620      	mov	r0, r4
   23c20:	f007 fe9e 	bl	2b960 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   23c24:	4620      	mov	r0, r4
}
   23c26:	b008      	add	sp, #32
   23c28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23c2c:	f007 be9d 	b.w	2b96a <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   23c30:	2101      	movs	r1, #1
   23c32:	e7dd      	b.n	23bf0 <k_work_queue_start+0x88>
   23c34:	00031411 	.word	0x00031411
   23c38:	0002cfb2 	.word	0x0002cfb2
   23c3c:	0003137b 	.word	0x0003137b
   23c40:	00031417 	.word	0x00031417
   23c44:	0003141d 	.word	0x0003141d
   23c48:	0002366d 	.word	0x0002366d

00023c4c <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   23c4c:	b538      	push	{r3, r4, r5, lr}
   23c4e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   23c50:	4604      	mov	r4, r0
   23c52:	b958      	cbnz	r0, 23c6c <k_work_init_delayable+0x20>
   23c54:	4911      	ldr	r1, [pc, #68]	; (23c9c <k_work_init_delayable+0x50>)
   23c56:	4812      	ldr	r0, [pc, #72]	; (23ca0 <k_work_init_delayable+0x54>)
   23c58:	f44f 7346 	mov.w	r3, #792	; 0x318
   23c5c:	4a11      	ldr	r2, [pc, #68]	; (23ca4 <k_work_init_delayable+0x58>)
   23c5e:	f002 fd5d 	bl	2671c <printk>
   23c62:	f44f 7146 	mov.w	r1, #792	; 0x318
   23c66:	480f      	ldr	r0, [pc, #60]	; (23ca4 <k_work_init_delayable+0x58>)
   23c68:	f002 fffd 	bl	26c66 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   23c6c:	b95d      	cbnz	r5, 23c86 <k_work_init_delayable+0x3a>
   23c6e:	490e      	ldr	r1, [pc, #56]	; (23ca8 <k_work_init_delayable+0x5c>)
   23c70:	480b      	ldr	r0, [pc, #44]	; (23ca0 <k_work_init_delayable+0x54>)
   23c72:	f240 3319 	movw	r3, #793	; 0x319
   23c76:	4a0b      	ldr	r2, [pc, #44]	; (23ca4 <k_work_init_delayable+0x58>)
   23c78:	f002 fd50 	bl	2671c <printk>
   23c7c:	f240 3119 	movw	r1, #793	; 0x319
   23c80:	4808      	ldr	r0, [pc, #32]	; (23ca4 <k_work_init_delayable+0x58>)
   23c82:	f002 fff0 	bl	26c66 <assert_post_action>

	*dwork = (struct k_work_delayable){
   23c86:	2230      	movs	r2, #48	; 0x30
   23c88:	2100      	movs	r1, #0
   23c8a:	4620      	mov	r0, r4
   23c8c:	f004 fcac 	bl	285e8 <memset>
   23c90:	f44f 7380 	mov.w	r3, #256	; 0x100
   23c94:	6065      	str	r5, [r4, #4]
   23c96:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   23c98:	bd38      	pop	{r3, r4, r5, pc}
   23c9a:	bf00      	nop
   23c9c:	00031451 	.word	0x00031451
   23ca0:	0002cfb2 	.word	0x0002cfb2
   23ca4:	0003137b 	.word	0x0003137b
   23ca8:	0003139c 	.word	0x0003139c

00023cac <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   23cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23cae:	4616      	mov	r6, r2
   23cb0:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   23cb2:	460c      	mov	r4, r1
{
   23cb4:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   23cb6:	b959      	cbnz	r1, 23cd0 <k_work_schedule_for_queue+0x24>
   23cb8:	492e      	ldr	r1, [pc, #184]	; (23d74 <k_work_schedule_for_queue+0xc8>)
   23cba:	482f      	ldr	r0, [pc, #188]	; (23d78 <k_work_schedule_for_queue+0xcc>)
   23cbc:	f240 338f 	movw	r3, #911	; 0x38f
   23cc0:	4a2e      	ldr	r2, [pc, #184]	; (23d7c <k_work_schedule_for_queue+0xd0>)
   23cc2:	f002 fd2b 	bl	2671c <printk>
   23cc6:	f240 318f 	movw	r1, #911	; 0x38f
   23cca:	482c      	ldr	r0, [pc, #176]	; (23d7c <k_work_schedule_for_queue+0xd0>)
   23ccc:	f002 ffcb 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   23cd0:	f04f 0320 	mov.w	r3, #32
   23cd4:	f3ef 8511 	mrs	r5, BASEPRI
   23cd8:	f383 8811 	msr	BASEPRI, r3
   23cdc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23ce0:	4827      	ldr	r0, [pc, #156]	; (23d80 <k_work_schedule_for_queue+0xd4>)
   23ce2:	f7ff f879 	bl	22dd8 <z_spin_lock_valid>
   23ce6:	b968      	cbnz	r0, 23d04 <k_work_schedule_for_queue+0x58>
   23ce8:	2381      	movs	r3, #129	; 0x81
   23cea:	4a26      	ldr	r2, [pc, #152]	; (23d84 <k_work_schedule_for_queue+0xd8>)
   23cec:	4926      	ldr	r1, [pc, #152]	; (23d88 <k_work_schedule_for_queue+0xdc>)
   23cee:	4822      	ldr	r0, [pc, #136]	; (23d78 <k_work_schedule_for_queue+0xcc>)
   23cf0:	f002 fd14 	bl	2671c <printk>
   23cf4:	4922      	ldr	r1, [pc, #136]	; (23d80 <k_work_schedule_for_queue+0xd4>)
   23cf6:	4825      	ldr	r0, [pc, #148]	; (23d8c <k_work_schedule_for_queue+0xe0>)
   23cf8:	f002 fd10 	bl	2671c <printk>
   23cfc:	2181      	movs	r1, #129	; 0x81
   23cfe:	4821      	ldr	r0, [pc, #132]	; (23d84 <k_work_schedule_for_queue+0xd8>)
   23d00:	f002 ffb1 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   23d04:	481e      	ldr	r0, [pc, #120]	; (23d80 <k_work_schedule_for_queue+0xd4>)
   23d06:	f7ff f883 	bl	22e10 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   23d0a:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   23d0c:	f013 0f0e 	tst.w	r3, #14
   23d10:	d12e      	bne.n	23d70 <k_work_schedule_for_queue+0xc4>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23d12:	ea56 0207 	orrs.w	r2, r6, r7
   23d16:	d11d      	bne.n	23d54 <k_work_schedule_for_queue+0xa8>
		return submit_to_queue_locked(work, queuep);
   23d18:	4620      	mov	r0, r4
   23d1a:	a901      	add	r1, sp, #4
   23d1c:	f7ff fdd8 	bl	238d0 <submit_to_queue_locked>
   23d20:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23d22:	4817      	ldr	r0, [pc, #92]	; (23d80 <k_work_schedule_for_queue+0xd4>)
   23d24:	f7ff f866 	bl	22df4 <z_spin_unlock_valid>
   23d28:	b968      	cbnz	r0, 23d46 <k_work_schedule_for_queue+0x9a>
   23d2a:	23ac      	movs	r3, #172	; 0xac
   23d2c:	4a15      	ldr	r2, [pc, #84]	; (23d84 <k_work_schedule_for_queue+0xd8>)
   23d2e:	4918      	ldr	r1, [pc, #96]	; (23d90 <k_work_schedule_for_queue+0xe4>)
   23d30:	4811      	ldr	r0, [pc, #68]	; (23d78 <k_work_schedule_for_queue+0xcc>)
   23d32:	f002 fcf3 	bl	2671c <printk>
   23d36:	4912      	ldr	r1, [pc, #72]	; (23d80 <k_work_schedule_for_queue+0xd4>)
   23d38:	4816      	ldr	r0, [pc, #88]	; (23d94 <k_work_schedule_for_queue+0xe8>)
   23d3a:	f002 fcef 	bl	2671c <printk>
   23d3e:	21ac      	movs	r1, #172	; 0xac
   23d40:	4810      	ldr	r0, [pc, #64]	; (23d84 <k_work_schedule_for_queue+0xd8>)
   23d42:	f002 ff90 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   23d46:	f385 8811 	msr	BASEPRI, r5
   23d4a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   23d4e:	4620      	mov	r0, r4
   23d50:	b003      	add	sp, #12
   23d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   23d54:	f043 0308 	orr.w	r3, r3, #8
   23d58:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   23d5a:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   23d5c:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   23d60:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   23d62:	4632      	mov	r2, r6
   23d64:	463b      	mov	r3, r7
   23d66:	490c      	ldr	r1, [pc, #48]	; (23d98 <k_work_schedule_for_queue+0xec>)
   23d68:	f001 fc2e 	bl	255c8 <z_add_timeout>
	return ret;
   23d6c:	2401      	movs	r4, #1
   23d6e:	e7d8      	b.n	23d22 <k_work_schedule_for_queue+0x76>
	int ret = 0;
   23d70:	2400      	movs	r4, #0
   23d72:	e7d6      	b.n	23d22 <k_work_schedule_for_queue+0x76>
   23d74:	00031451 	.word	0x00031451
   23d78:	0002cfb2 	.word	0x0002cfb2
   23d7c:	0003137b 	.word	0x0003137b
   23d80:	20009be0 	.word	0x20009be0
   23d84:	0002d072 	.word	0x0002d072
   23d88:	0002d0c4 	.word	0x0002d0c4
   23d8c:	0002d0d9 	.word	0x0002d0d9
   23d90:	0002d098 	.word	0x0002d098
   23d94:	0002d0af 	.word	0x0002d0af
   23d98:	00023999 	.word	0x00023999

00023d9c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   23d9c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   23d9e:	4801      	ldr	r0, [pc, #4]	; (23da4 <k_work_schedule+0x8>)
   23da0:	f7ff bf84 	b.w	23cac <k_work_schedule_for_queue>
   23da4:	20009170 	.word	0x20009170

00023da8 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   23da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23daa:	4616      	mov	r6, r2
   23dac:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   23dae:	460c      	mov	r4, r1
{
   23db0:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   23db2:	b959      	cbnz	r1, 23dcc <k_work_reschedule_for_queue+0x24>
   23db4:	492d      	ldr	r1, [pc, #180]	; (23e6c <k_work_reschedule_for_queue+0xc4>)
   23db6:	482e      	ldr	r0, [pc, #184]	; (23e70 <k_work_reschedule_for_queue+0xc8>)
   23db8:	f240 33b3 	movw	r3, #947	; 0x3b3
   23dbc:	4a2d      	ldr	r2, [pc, #180]	; (23e74 <k_work_reschedule_for_queue+0xcc>)
   23dbe:	f002 fcad 	bl	2671c <printk>
   23dc2:	f240 31b3 	movw	r1, #947	; 0x3b3
   23dc6:	482b      	ldr	r0, [pc, #172]	; (23e74 <k_work_reschedule_for_queue+0xcc>)
   23dc8:	f002 ff4d 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   23dcc:	f04f 0320 	mov.w	r3, #32
   23dd0:	f3ef 8511 	mrs	r5, BASEPRI
   23dd4:	f383 8811 	msr	BASEPRI, r3
   23dd8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23ddc:	4826      	ldr	r0, [pc, #152]	; (23e78 <k_work_reschedule_for_queue+0xd0>)
   23dde:	f7fe fffb 	bl	22dd8 <z_spin_lock_valid>
   23de2:	b968      	cbnz	r0, 23e00 <k_work_reschedule_for_queue+0x58>
   23de4:	2381      	movs	r3, #129	; 0x81
   23de6:	4a25      	ldr	r2, [pc, #148]	; (23e7c <k_work_reschedule_for_queue+0xd4>)
   23de8:	4925      	ldr	r1, [pc, #148]	; (23e80 <k_work_reschedule_for_queue+0xd8>)
   23dea:	4821      	ldr	r0, [pc, #132]	; (23e70 <k_work_reschedule_for_queue+0xc8>)
   23dec:	f002 fc96 	bl	2671c <printk>
   23df0:	4921      	ldr	r1, [pc, #132]	; (23e78 <k_work_reschedule_for_queue+0xd0>)
   23df2:	4824      	ldr	r0, [pc, #144]	; (23e84 <k_work_reschedule_for_queue+0xdc>)
   23df4:	f002 fc92 	bl	2671c <printk>
   23df8:	2181      	movs	r1, #129	; 0x81
   23dfa:	4820      	ldr	r0, [pc, #128]	; (23e7c <k_work_reschedule_for_queue+0xd4>)
   23dfc:	f002 ff33 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   23e00:	481d      	ldr	r0, [pc, #116]	; (23e78 <k_work_reschedule_for_queue+0xd0>)
   23e02:	f7ff f805 	bl	22e10 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   23e06:	4620      	mov	r0, r4
   23e08:	f007 fe04 	bl	2ba14 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23e0c:	ea56 0307 	orrs.w	r3, r6, r7
   23e10:	d11d      	bne.n	23e4e <k_work_reschedule_for_queue+0xa6>
		return submit_to_queue_locked(work, queuep);
   23e12:	4620      	mov	r0, r4
   23e14:	a901      	add	r1, sp, #4
   23e16:	f7ff fd5b 	bl	238d0 <submit_to_queue_locked>
   23e1a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23e1c:	4816      	ldr	r0, [pc, #88]	; (23e78 <k_work_reschedule_for_queue+0xd0>)
   23e1e:	f7fe ffe9 	bl	22df4 <z_spin_unlock_valid>
   23e22:	b968      	cbnz	r0, 23e40 <k_work_reschedule_for_queue+0x98>
   23e24:	23ac      	movs	r3, #172	; 0xac
   23e26:	4a15      	ldr	r2, [pc, #84]	; (23e7c <k_work_reschedule_for_queue+0xd4>)
   23e28:	4917      	ldr	r1, [pc, #92]	; (23e88 <k_work_reschedule_for_queue+0xe0>)
   23e2a:	4811      	ldr	r0, [pc, #68]	; (23e70 <k_work_reschedule_for_queue+0xc8>)
   23e2c:	f002 fc76 	bl	2671c <printk>
   23e30:	4911      	ldr	r1, [pc, #68]	; (23e78 <k_work_reschedule_for_queue+0xd0>)
   23e32:	4816      	ldr	r0, [pc, #88]	; (23e8c <k_work_reschedule_for_queue+0xe4>)
   23e34:	f002 fc72 	bl	2671c <printk>
   23e38:	21ac      	movs	r1, #172	; 0xac
   23e3a:	4810      	ldr	r0, [pc, #64]	; (23e7c <k_work_reschedule_for_queue+0xd4>)
   23e3c:	f002 ff13 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   23e40:	f385 8811 	msr	BASEPRI, r5
   23e44:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   23e48:	4620      	mov	r0, r4
   23e4a:	b003      	add	sp, #12
   23e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   23e4e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   23e50:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   23e54:	f043 0308 	orr.w	r3, r3, #8
   23e58:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   23e5a:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   23e5c:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   23e5e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   23e60:	490b      	ldr	r1, [pc, #44]	; (23e90 <k_work_reschedule_for_queue+0xe8>)
   23e62:	463b      	mov	r3, r7
   23e64:	f001 fbb0 	bl	255c8 <z_add_timeout>
	return ret;
   23e68:	2401      	movs	r4, #1
   23e6a:	e7d7      	b.n	23e1c <k_work_reschedule_for_queue+0x74>
   23e6c:	00031451 	.word	0x00031451
   23e70:	0002cfb2 	.word	0x0002cfb2
   23e74:	0003137b 	.word	0x0003137b
   23e78:	20009be0 	.word	0x20009be0
   23e7c:	0002d072 	.word	0x0002d072
   23e80:	0002d0c4 	.word	0x0002d0c4
   23e84:	0002d0d9 	.word	0x0002d0d9
   23e88:	0002d098 	.word	0x0002d098
   23e8c:	0002d0af 	.word	0x0002d0af
   23e90:	00023999 	.word	0x00023999

00023e94 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   23e94:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   23e96:	4801      	ldr	r0, [pc, #4]	; (23e9c <k_work_reschedule+0x8>)
   23e98:	f7ff bf86 	b.w	23da8 <k_work_reschedule_for_queue>
   23e9c:	20009170 	.word	0x20009170

00023ea0 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   23ea0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   23ea2:	4604      	mov	r4, r0
   23ea4:	b958      	cbnz	r0, 23ebe <k_work_cancel_delayable+0x1e>
   23ea6:	4924      	ldr	r1, [pc, #144]	; (23f38 <k_work_cancel_delayable+0x98>)
   23ea8:	4824      	ldr	r0, [pc, #144]	; (23f3c <k_work_cancel_delayable+0x9c>)
   23eaa:	f240 33d5 	movw	r3, #981	; 0x3d5
   23eae:	4a24      	ldr	r2, [pc, #144]	; (23f40 <k_work_cancel_delayable+0xa0>)
   23eb0:	f002 fc34 	bl	2671c <printk>
   23eb4:	f240 31d5 	movw	r1, #981	; 0x3d5
   23eb8:	4821      	ldr	r0, [pc, #132]	; (23f40 <k_work_cancel_delayable+0xa0>)
   23eba:	f002 fed4 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   23ebe:	f04f 0320 	mov.w	r3, #32
   23ec2:	f3ef 8511 	mrs	r5, BASEPRI
   23ec6:	f383 8811 	msr	BASEPRI, r3
   23eca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23ece:	481d      	ldr	r0, [pc, #116]	; (23f44 <k_work_cancel_delayable+0xa4>)
   23ed0:	f7fe ff82 	bl	22dd8 <z_spin_lock_valid>
   23ed4:	b968      	cbnz	r0, 23ef2 <k_work_cancel_delayable+0x52>
   23ed6:	2381      	movs	r3, #129	; 0x81
   23ed8:	4a1b      	ldr	r2, [pc, #108]	; (23f48 <k_work_cancel_delayable+0xa8>)
   23eda:	491c      	ldr	r1, [pc, #112]	; (23f4c <k_work_cancel_delayable+0xac>)
   23edc:	4817      	ldr	r0, [pc, #92]	; (23f3c <k_work_cancel_delayable+0x9c>)
   23ede:	f002 fc1d 	bl	2671c <printk>
   23ee2:	4918      	ldr	r1, [pc, #96]	; (23f44 <k_work_cancel_delayable+0xa4>)
   23ee4:	481a      	ldr	r0, [pc, #104]	; (23f50 <k_work_cancel_delayable+0xb0>)
   23ee6:	f002 fc19 	bl	2671c <printk>
   23eea:	2181      	movs	r1, #129	; 0x81
   23eec:	4816      	ldr	r0, [pc, #88]	; (23f48 <k_work_cancel_delayable+0xa8>)
   23eee:	f002 feba 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   23ef2:	4814      	ldr	r0, [pc, #80]	; (23f44 <k_work_cancel_delayable+0xa4>)
   23ef4:	f7fe ff8c 	bl	22e10 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   23ef8:	4620      	mov	r0, r4
   23efa:	f007 fd8b 	bl	2ba14 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   23efe:	4620      	mov	r0, r4
   23f00:	f007 fd96 	bl	2ba30 <cancel_async_locked>
   23f04:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23f06:	480f      	ldr	r0, [pc, #60]	; (23f44 <k_work_cancel_delayable+0xa4>)
   23f08:	f7fe ff74 	bl	22df4 <z_spin_unlock_valid>
   23f0c:	b968      	cbnz	r0, 23f2a <k_work_cancel_delayable+0x8a>
   23f0e:	23ac      	movs	r3, #172	; 0xac
   23f10:	4a0d      	ldr	r2, [pc, #52]	; (23f48 <k_work_cancel_delayable+0xa8>)
   23f12:	4910      	ldr	r1, [pc, #64]	; (23f54 <k_work_cancel_delayable+0xb4>)
   23f14:	4809      	ldr	r0, [pc, #36]	; (23f3c <k_work_cancel_delayable+0x9c>)
   23f16:	f002 fc01 	bl	2671c <printk>
   23f1a:	490a      	ldr	r1, [pc, #40]	; (23f44 <k_work_cancel_delayable+0xa4>)
   23f1c:	480e      	ldr	r0, [pc, #56]	; (23f58 <k_work_cancel_delayable+0xb8>)
   23f1e:	f002 fbfd 	bl	2671c <printk>
   23f22:	21ac      	movs	r1, #172	; 0xac
   23f24:	4808      	ldr	r0, [pc, #32]	; (23f48 <k_work_cancel_delayable+0xa8>)
   23f26:	f002 fe9e 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   23f2a:	f385 8811 	msr	BASEPRI, r5
   23f2e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   23f32:	4620      	mov	r0, r4
   23f34:	bd38      	pop	{r3, r4, r5, pc}
   23f36:	bf00      	nop
   23f38:	00031451 	.word	0x00031451
   23f3c:	0002cfb2 	.word	0x0002cfb2
   23f40:	0003137b 	.word	0x0003137b
   23f44:	20009be0 	.word	0x20009be0
   23f48:	0002d072 	.word	0x0002d072
   23f4c:	0002d0c4 	.word	0x0002d0c4
   23f50:	0002d0d9 	.word	0x0002d0d9
   23f54:	0002d098 	.word	0x0002d098
   23f58:	0002d0af 	.word	0x0002d0af

00023f5c <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   23f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23f60:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   23f62:	4605      	mov	r5, r0
   23f64:	b958      	cbnz	r0, 23f7e <k_work_cancel_delayable_sync+0x22>
   23f66:	493e      	ldr	r1, [pc, #248]	; (24060 <k_work_cancel_delayable_sync+0x104>)
   23f68:	483e      	ldr	r0, [pc, #248]	; (24064 <k_work_cancel_delayable_sync+0x108>)
   23f6a:	f240 33e6 	movw	r3, #998	; 0x3e6
   23f6e:	4a3e      	ldr	r2, [pc, #248]	; (24068 <k_work_cancel_delayable_sync+0x10c>)
   23f70:	f002 fbd4 	bl	2671c <printk>
   23f74:	f240 31e6 	movw	r1, #998	; 0x3e6
   23f78:	483b      	ldr	r0, [pc, #236]	; (24068 <k_work_cancel_delayable_sync+0x10c>)
   23f7a:	f002 fe74 	bl	26c66 <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
   23f7e:	b95e      	cbnz	r6, 23f98 <k_work_cancel_delayable_sync+0x3c>
   23f80:	493a      	ldr	r1, [pc, #232]	; (2406c <k_work_cancel_delayable_sync+0x110>)
   23f82:	4838      	ldr	r0, [pc, #224]	; (24064 <k_work_cancel_delayable_sync+0x108>)
   23f84:	f240 33e7 	movw	r3, #999	; 0x3e7
   23f88:	4a37      	ldr	r2, [pc, #220]	; (24068 <k_work_cancel_delayable_sync+0x10c>)
   23f8a:	f002 fbc7 	bl	2671c <printk>
   23f8e:	f240 31e7 	movw	r1, #999	; 0x3e7
   23f92:	4835      	ldr	r0, [pc, #212]	; (24068 <k_work_cancel_delayable_sync+0x10c>)
   23f94:	f002 fe67 	bl	26c66 <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   23f98:	f007 fcdc 	bl	2b954 <k_is_in_isr>
   23f9c:	b158      	cbz	r0, 23fb6 <k_work_cancel_delayable_sync+0x5a>
   23f9e:	4934      	ldr	r1, [pc, #208]	; (24070 <k_work_cancel_delayable_sync+0x114>)
   23fa0:	4830      	ldr	r0, [pc, #192]	; (24064 <k_work_cancel_delayable_sync+0x108>)
   23fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   23fa6:	4a30      	ldr	r2, [pc, #192]	; (24068 <k_work_cancel_delayable_sync+0x10c>)
   23fa8:	f002 fbb8 	bl	2671c <printk>
   23fac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   23fb0:	482d      	ldr	r0, [pc, #180]	; (24068 <k_work_cancel_delayable_sync+0x10c>)
   23fb2:	f002 fe58 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   23fb6:	f04f 0320 	mov.w	r3, #32
   23fba:	f3ef 8811 	mrs	r8, BASEPRI
   23fbe:	f383 8811 	msr	BASEPRI, r3
   23fc2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23fc6:	482b      	ldr	r0, [pc, #172]	; (24074 <k_work_cancel_delayable_sync+0x118>)
   23fc8:	f7fe ff06 	bl	22dd8 <z_spin_lock_valid>
   23fcc:	b968      	cbnz	r0, 23fea <k_work_cancel_delayable_sync+0x8e>
   23fce:	2381      	movs	r3, #129	; 0x81
   23fd0:	4a29      	ldr	r2, [pc, #164]	; (24078 <k_work_cancel_delayable_sync+0x11c>)
   23fd2:	492a      	ldr	r1, [pc, #168]	; (2407c <k_work_cancel_delayable_sync+0x120>)
   23fd4:	4823      	ldr	r0, [pc, #140]	; (24064 <k_work_cancel_delayable_sync+0x108>)
   23fd6:	f002 fba1 	bl	2671c <printk>
   23fda:	4926      	ldr	r1, [pc, #152]	; (24074 <k_work_cancel_delayable_sync+0x118>)
   23fdc:	4828      	ldr	r0, [pc, #160]	; (24080 <k_work_cancel_delayable_sync+0x124>)
   23fde:	f002 fb9d 	bl	2671c <printk>
   23fe2:	2181      	movs	r1, #129	; 0x81
   23fe4:	4824      	ldr	r0, [pc, #144]	; (24078 <k_work_cancel_delayable_sync+0x11c>)
   23fe6:	f002 fe3e 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   23fea:	4822      	ldr	r0, [pc, #136]	; (24074 <k_work_cancel_delayable_sync+0x118>)
   23fec:	f7fe ff10 	bl	22e10 <z_spin_lock_set_owner>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23ff0:	f105 030c 	add.w	r3, r5, #12
   23ff4:	e8d3 4faf 	lda	r4, [r3]
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   23ff8:	f004 040f 	and.w	r4, r4, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   23ffc:	2c00      	cmp	r4, #0
   23ffe:	bf14      	ite	ne
   24000:	2701      	movne	r7, #1
   24002:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   24004:	d00a      	beq.n	2401c <k_work_cancel_delayable_sync+0xc0>
	(void)unschedule_locked(dwork);
   24006:	4628      	mov	r0, r5
   24008:	f007 fd04 	bl	2ba14 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2400c:	4628      	mov	r0, r5
   2400e:	f007 fd0f 	bl	2ba30 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   24012:	4631      	mov	r1, r6
   24014:	4628      	mov	r0, r5
   24016:	f7ff fc3d 	bl	23894 <cancel_sync_locked>
   2401a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2401c:	4815      	ldr	r0, [pc, #84]	; (24074 <k_work_cancel_delayable_sync+0x118>)
   2401e:	f7fe fee9 	bl	22df4 <z_spin_unlock_valid>
   24022:	b968      	cbnz	r0, 24040 <k_work_cancel_delayable_sync+0xe4>
   24024:	23ac      	movs	r3, #172	; 0xac
   24026:	4a14      	ldr	r2, [pc, #80]	; (24078 <k_work_cancel_delayable_sync+0x11c>)
   24028:	4916      	ldr	r1, [pc, #88]	; (24084 <k_work_cancel_delayable_sync+0x128>)
   2402a:	480e      	ldr	r0, [pc, #56]	; (24064 <k_work_cancel_delayable_sync+0x108>)
   2402c:	f002 fb76 	bl	2671c <printk>
   24030:	4910      	ldr	r1, [pc, #64]	; (24074 <k_work_cancel_delayable_sync+0x118>)
   24032:	4815      	ldr	r0, [pc, #84]	; (24088 <k_work_cancel_delayable_sync+0x12c>)
   24034:	f002 fb72 	bl	2671c <printk>
   24038:	21ac      	movs	r1, #172	; 0xac
   2403a:	480f      	ldr	r0, [pc, #60]	; (24078 <k_work_cancel_delayable_sync+0x11c>)
   2403c:	f002 fe13 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   24040:	f388 8811 	msr	BASEPRI, r8
   24044:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   24048:	b13c      	cbz	r4, 2405a <k_work_cancel_delayable_sync+0xfe>
	return z_impl_k_sem_take(sem, timeout);
   2404a:	f04f 32ff 	mov.w	r2, #4294967295
   2404e:	f04f 33ff 	mov.w	r3, #4294967295
   24052:	f106 0008 	add.w	r0, r6, #8
   24056:	f7ff fa65 	bl	23524 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2405a:	4638      	mov	r0, r7
   2405c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24060:	00031451 	.word	0x00031451
   24064:	0002cfb2 	.word	0x0002cfb2
   24068:	0003137b 	.word	0x0003137b
   2406c:	000313fd 	.word	0x000313fd
   24070:	0002f82c 	.word	0x0002f82c
   24074:	20009be0 	.word	0x20009be0
   24078:	0002d072 	.word	0x0002d072
   2407c:	0002d0c4 	.word	0x0002d0c4
   24080:	0002d0d9 	.word	0x0002d0d9
   24084:	0002d098 	.word	0x0002d098
   24088:	0002d0af 	.word	0x0002d0af

0002408c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   2408c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   2408e:	4c08      	ldr	r4, [pc, #32]	; (240b0 <z_reset_time_slice+0x24>)
   24090:	6823      	ldr	r3, [r4, #0]
   24092:	b15b      	cbz	r3, 240ac <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   24094:	f7f0 ffd2 	bl	1503c <sys_clock_elapsed>
   24098:	4603      	mov	r3, r0
   2409a:	6820      	ldr	r0, [r4, #0]
   2409c:	4a05      	ldr	r2, [pc, #20]	; (240b4 <z_reset_time_slice+0x28>)
   2409e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   240a0:	2100      	movs	r1, #0
	}
}
   240a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   240a6:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   240a8:	f001 bbf8 	b.w	2589c <z_set_timeout_expiry>
}
   240ac:	bd10      	pop	{r4, pc}
   240ae:	bf00      	nop
   240b0:	20009bf8 	.word	0x20009bf8
   240b4:	20009ba8 	.word	0x20009ba8

000240b8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   240b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   240ba:	4604      	mov	r4, r0
   240bc:	460d      	mov	r5, r1
	__asm__ volatile(
   240be:	f04f 0320 	mov.w	r3, #32
   240c2:	f3ef 8611 	mrs	r6, BASEPRI
   240c6:	f383 8811 	msr	BASEPRI, r3
   240ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   240ce:	4823      	ldr	r0, [pc, #140]	; (2415c <k_sched_time_slice_set+0xa4>)
   240d0:	f7fe fe82 	bl	22dd8 <z_spin_lock_valid>
   240d4:	b968      	cbnz	r0, 240f2 <k_sched_time_slice_set+0x3a>
   240d6:	2381      	movs	r3, #129	; 0x81
   240d8:	4a21      	ldr	r2, [pc, #132]	; (24160 <k_sched_time_slice_set+0xa8>)
   240da:	4922      	ldr	r1, [pc, #136]	; (24164 <k_sched_time_slice_set+0xac>)
   240dc:	4822      	ldr	r0, [pc, #136]	; (24168 <k_sched_time_slice_set+0xb0>)
   240de:	f002 fb1d 	bl	2671c <printk>
   240e2:	491e      	ldr	r1, [pc, #120]	; (2415c <k_sched_time_slice_set+0xa4>)
   240e4:	4821      	ldr	r0, [pc, #132]	; (2416c <k_sched_time_slice_set+0xb4>)
   240e6:	f002 fb19 	bl	2671c <printk>
   240ea:	2181      	movs	r1, #129	; 0x81
   240ec:	481c      	ldr	r0, [pc, #112]	; (24160 <k_sched_time_slice_set+0xa8>)
   240ee:	f002 fdba 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   240f2:	481a      	ldr	r0, [pc, #104]	; (2415c <k_sched_time_slice_set+0xa4>)
   240f4:	f7fe fe8c 	bl	22e10 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   240f8:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   240fc:	2200      	movs	r2, #0
   240fe:	f240 30e7 	movw	r0, #999	; 0x3e7
   24102:	2100      	movs	r1, #0
   24104:	4b1a      	ldr	r3, [pc, #104]	; (24170 <k_sched_time_slice_set+0xb8>)
   24106:	fbe7 0104 	umlal	r0, r1, r7, r4
   2410a:	611a      	str	r2, [r3, #16]
   2410c:	2300      	movs	r3, #0
   2410e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24112:	f7ec f895 	bl	10240 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   24116:	2c00      	cmp	r4, #0
   24118:	4b16      	ldr	r3, [pc, #88]	; (24174 <k_sched_time_slice_set+0xbc>)
   2411a:	dc1b      	bgt.n	24154 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   2411c:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   2411e:	4b16      	ldr	r3, [pc, #88]	; (24178 <k_sched_time_slice_set+0xc0>)
   24120:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   24122:	f7ff ffb3 	bl	2408c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24126:	480d      	ldr	r0, [pc, #52]	; (2415c <k_sched_time_slice_set+0xa4>)
   24128:	f7fe fe64 	bl	22df4 <z_spin_unlock_valid>
   2412c:	b968      	cbnz	r0, 2414a <k_sched_time_slice_set+0x92>
   2412e:	23ac      	movs	r3, #172	; 0xac
   24130:	4a0b      	ldr	r2, [pc, #44]	; (24160 <k_sched_time_slice_set+0xa8>)
   24132:	4912      	ldr	r1, [pc, #72]	; (2417c <k_sched_time_slice_set+0xc4>)
   24134:	480c      	ldr	r0, [pc, #48]	; (24168 <k_sched_time_slice_set+0xb0>)
   24136:	f002 faf1 	bl	2671c <printk>
   2413a:	4908      	ldr	r1, [pc, #32]	; (2415c <k_sched_time_slice_set+0xa4>)
   2413c:	4810      	ldr	r0, [pc, #64]	; (24180 <k_sched_time_slice_set+0xc8>)
   2413e:	f002 faed 	bl	2671c <printk>
   24142:	21ac      	movs	r1, #172	; 0xac
   24144:	4806      	ldr	r0, [pc, #24]	; (24160 <k_sched_time_slice_set+0xa8>)
   24146:	f002 fd8e 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   2414a:	f386 8811 	msr	BASEPRI, r6
   2414e:	f3bf 8f6f 	isb	sy
	}
}
   24152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   24154:	2802      	cmp	r0, #2
   24156:	bfb8      	it	lt
   24158:	2002      	movlt	r0, #2
   2415a:	e7df      	b.n	2411c <k_sched_time_slice_set+0x64>
   2415c:	20009bf0 	.word	0x20009bf0
   24160:	0002d072 	.word	0x0002d072
   24164:	0002d0c4 	.word	0x0002d0c4
   24168:	0002cfb2 	.word	0x0002cfb2
   2416c:	0002d0d9 	.word	0x0002d0d9
   24170:	20009ba8 	.word	0x20009ba8
   24174:	20009bf8 	.word	0x20009bf8
   24178:	20009bf4 	.word	0x20009bf4
   2417c:	0002d098 	.word	0x0002d098
   24180:	0002d0af 	.word	0x0002d0af

00024184 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   24184:	b538      	push	{r3, r4, r5, lr}
   24186:	4604      	mov	r4, r0
	__asm__ volatile(
   24188:	f04f 0320 	mov.w	r3, #32
   2418c:	f3ef 8511 	mrs	r5, BASEPRI
   24190:	f383 8811 	msr	BASEPRI, r3
   24194:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24198:	4817      	ldr	r0, [pc, #92]	; (241f8 <z_unpend_thread_no_timeout+0x74>)
   2419a:	f7fe fe1d 	bl	22dd8 <z_spin_lock_valid>
   2419e:	b968      	cbnz	r0, 241bc <z_unpend_thread_no_timeout+0x38>
   241a0:	2381      	movs	r3, #129	; 0x81
   241a2:	4a16      	ldr	r2, [pc, #88]	; (241fc <z_unpend_thread_no_timeout+0x78>)
   241a4:	4916      	ldr	r1, [pc, #88]	; (24200 <z_unpend_thread_no_timeout+0x7c>)
   241a6:	4817      	ldr	r0, [pc, #92]	; (24204 <z_unpend_thread_no_timeout+0x80>)
   241a8:	f002 fab8 	bl	2671c <printk>
   241ac:	4912      	ldr	r1, [pc, #72]	; (241f8 <z_unpend_thread_no_timeout+0x74>)
   241ae:	4816      	ldr	r0, [pc, #88]	; (24208 <z_unpend_thread_no_timeout+0x84>)
   241b0:	f002 fab4 	bl	2671c <printk>
   241b4:	2181      	movs	r1, #129	; 0x81
   241b6:	4811      	ldr	r0, [pc, #68]	; (241fc <z_unpend_thread_no_timeout+0x78>)
   241b8:	f002 fd55 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   241bc:	480e      	ldr	r0, [pc, #56]	; (241f8 <z_unpend_thread_no_timeout+0x74>)
   241be:	f7fe fe27 	bl	22e10 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   241c2:	4620      	mov	r0, r4
   241c4:	f000 f900 	bl	243c8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   241c8:	480b      	ldr	r0, [pc, #44]	; (241f8 <z_unpend_thread_no_timeout+0x74>)
   241ca:	f7fe fe13 	bl	22df4 <z_spin_unlock_valid>
   241ce:	b968      	cbnz	r0, 241ec <z_unpend_thread_no_timeout+0x68>
   241d0:	23ac      	movs	r3, #172	; 0xac
   241d2:	4a0a      	ldr	r2, [pc, #40]	; (241fc <z_unpend_thread_no_timeout+0x78>)
   241d4:	490d      	ldr	r1, [pc, #52]	; (2420c <z_unpend_thread_no_timeout+0x88>)
   241d6:	480b      	ldr	r0, [pc, #44]	; (24204 <z_unpend_thread_no_timeout+0x80>)
   241d8:	f002 faa0 	bl	2671c <printk>
   241dc:	4906      	ldr	r1, [pc, #24]	; (241f8 <z_unpend_thread_no_timeout+0x74>)
   241de:	480c      	ldr	r0, [pc, #48]	; (24210 <z_unpend_thread_no_timeout+0x8c>)
   241e0:	f002 fa9c 	bl	2671c <printk>
   241e4:	21ac      	movs	r1, #172	; 0xac
   241e6:	4805      	ldr	r0, [pc, #20]	; (241fc <z_unpend_thread_no_timeout+0x78>)
   241e8:	f002 fd3d 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   241ec:	f385 8811 	msr	BASEPRI, r5
   241f0:	f3bf 8f6f 	isb	sy
	}
}
   241f4:	bd38      	pop	{r3, r4, r5, pc}
   241f6:	bf00      	nop
   241f8:	20009bf0 	.word	0x20009bf0
   241fc:	0002d072 	.word	0x0002d072
   24200:	0002d0c4 	.word	0x0002d0c4
   24204:	0002cfb2 	.word	0x0002cfb2
   24208:	0002d0d9 	.word	0x0002d0d9
   2420c:	0002d098 	.word	0x0002d098
   24210:	0002d0af 	.word	0x0002d0af

00024214 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   24214:	b538      	push	{r3, r4, r5, lr}
   24216:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   24218:	460d      	mov	r5, r1
   2421a:	b9e9      	cbnz	r1, 24258 <z_reschedule+0x44>
   2421c:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
   24220:	b9d3      	cbnz	r3, 24258 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   24222:	4b19      	ldr	r3, [pc, #100]	; (24288 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   24224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   24226:	689b      	ldr	r3, [r3, #8]
   24228:	429a      	cmp	r2, r3
   2422a:	d015      	beq.n	24258 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2422c:	f7fe fde2 	bl	22df4 <z_spin_unlock_valid>
   24230:	b968      	cbnz	r0, 2424e <z_reschedule+0x3a>
   24232:	23c3      	movs	r3, #195	; 0xc3
   24234:	4a15      	ldr	r2, [pc, #84]	; (2428c <z_reschedule+0x78>)
   24236:	4916      	ldr	r1, [pc, #88]	; (24290 <z_reschedule+0x7c>)
   24238:	4816      	ldr	r0, [pc, #88]	; (24294 <z_reschedule+0x80>)
   2423a:	f002 fa6f 	bl	2671c <printk>
   2423e:	4621      	mov	r1, r4
   24240:	4815      	ldr	r0, [pc, #84]	; (24298 <z_reschedule+0x84>)
   24242:	f002 fa6b 	bl	2671c <printk>
   24246:	21c3      	movs	r1, #195	; 0xc3
   24248:	4810      	ldr	r0, [pc, #64]	; (2428c <z_reschedule+0x78>)
   2424a:	f002 fd0c 	bl	26c66 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   2424e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   24252:	2000      	movs	r0, #0
   24254:	f7f1 bf36 	b.w	160c4 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24258:	4620      	mov	r0, r4
   2425a:	f7fe fdcb 	bl	22df4 <z_spin_unlock_valid>
   2425e:	b968      	cbnz	r0, 2427c <z_reschedule+0x68>
   24260:	23ac      	movs	r3, #172	; 0xac
   24262:	4a0a      	ldr	r2, [pc, #40]	; (2428c <z_reschedule+0x78>)
   24264:	490a      	ldr	r1, [pc, #40]	; (24290 <z_reschedule+0x7c>)
   24266:	480b      	ldr	r0, [pc, #44]	; (24294 <z_reschedule+0x80>)
   24268:	f002 fa58 	bl	2671c <printk>
   2426c:	4621      	mov	r1, r4
   2426e:	480a      	ldr	r0, [pc, #40]	; (24298 <z_reschedule+0x84>)
   24270:	f002 fa54 	bl	2671c <printk>
   24274:	21ac      	movs	r1, #172	; 0xac
   24276:	4805      	ldr	r0, [pc, #20]	; (2428c <z_reschedule+0x78>)
   24278:	f002 fcf5 	bl	26c66 <assert_post_action>
   2427c:	f385 8811 	msr	BASEPRI, r5
   24280:	f3bf 8f6f 	isb	sy
   24284:	bd38      	pop	{r3, r4, r5, pc}
   24286:	bf00      	nop
   24288:	20009ba8 	.word	0x20009ba8
   2428c:	0002d072 	.word	0x0002d072
   24290:	0002d098 	.word	0x0002d098
   24294:	0002cfb2 	.word	0x0002cfb2
   24298:	0002d0af 	.word	0x0002d0af

0002429c <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   2429c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2429e:	f04f 0320 	mov.w	r3, #32
   242a2:	f3ef 8511 	mrs	r5, BASEPRI
   242a6:	f383 8811 	msr	BASEPRI, r3
   242aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   242ae:	4829      	ldr	r0, [pc, #164]	; (24354 <k_sched_lock+0xb8>)
   242b0:	f7fe fd92 	bl	22dd8 <z_spin_lock_valid>
   242b4:	b968      	cbnz	r0, 242d2 <k_sched_lock+0x36>
   242b6:	2381      	movs	r3, #129	; 0x81
   242b8:	4a27      	ldr	r2, [pc, #156]	; (24358 <k_sched_lock+0xbc>)
   242ba:	4928      	ldr	r1, [pc, #160]	; (2435c <k_sched_lock+0xc0>)
   242bc:	4828      	ldr	r0, [pc, #160]	; (24360 <k_sched_lock+0xc4>)
   242be:	f002 fa2d 	bl	2671c <printk>
   242c2:	4924      	ldr	r1, [pc, #144]	; (24354 <k_sched_lock+0xb8>)
   242c4:	4827      	ldr	r0, [pc, #156]	; (24364 <k_sched_lock+0xc8>)
   242c6:	f002 fa29 	bl	2671c <printk>
   242ca:	2181      	movs	r1, #129	; 0x81
   242cc:	4822      	ldr	r0, [pc, #136]	; (24358 <k_sched_lock+0xbc>)
   242ce:	f002 fcca 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   242d2:	4820      	ldr	r0, [pc, #128]	; (24354 <k_sched_lock+0xb8>)
   242d4:	f7fe fd9c 	bl	22e10 <z_spin_lock_set_owner>
   242d8:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   242dc:	b163      	cbz	r3, 242f8 <k_sched_lock+0x5c>
   242de:	4922      	ldr	r1, [pc, #136]	; (24368 <k_sched_lock+0xcc>)
   242e0:	23fe      	movs	r3, #254	; 0xfe
   242e2:	4a22      	ldr	r2, [pc, #136]	; (2436c <k_sched_lock+0xd0>)
   242e4:	481e      	ldr	r0, [pc, #120]	; (24360 <k_sched_lock+0xc4>)
   242e6:	f002 fa19 	bl	2671c <printk>
   242ea:	4821      	ldr	r0, [pc, #132]	; (24370 <k_sched_lock+0xd4>)
   242ec:	f002 fa16 	bl	2671c <printk>
   242f0:	21fe      	movs	r1, #254	; 0xfe
   242f2:	481e      	ldr	r0, [pc, #120]	; (2436c <k_sched_lock+0xd0>)
   242f4:	f002 fcb7 	bl	26c66 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   242f8:	4c1e      	ldr	r4, [pc, #120]	; (24374 <k_sched_lock+0xd8>)
   242fa:	68a2      	ldr	r2, [r4, #8]
   242fc:	7bd2      	ldrb	r2, [r2, #15]
   242fe:	2a01      	cmp	r2, #1
   24300:	d10c      	bne.n	2431c <k_sched_lock+0x80>
   24302:	491d      	ldr	r1, [pc, #116]	; (24378 <k_sched_lock+0xdc>)
   24304:	23ff      	movs	r3, #255	; 0xff
   24306:	4a19      	ldr	r2, [pc, #100]	; (2436c <k_sched_lock+0xd0>)
   24308:	4815      	ldr	r0, [pc, #84]	; (24360 <k_sched_lock+0xc4>)
   2430a:	f002 fa07 	bl	2671c <printk>
   2430e:	4818      	ldr	r0, [pc, #96]	; (24370 <k_sched_lock+0xd4>)
   24310:	f002 fa04 	bl	2671c <printk>
   24314:	21ff      	movs	r1, #255	; 0xff
   24316:	4815      	ldr	r0, [pc, #84]	; (2436c <k_sched_lock+0xd0>)
   24318:	f002 fca5 	bl	26c66 <assert_post_action>
	--_current->base.sched_locked;
   2431c:	68a2      	ldr	r2, [r4, #8]
   2431e:	7bd3      	ldrb	r3, [r2, #15]
   24320:	3b01      	subs	r3, #1
   24322:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24324:	480b      	ldr	r0, [pc, #44]	; (24354 <k_sched_lock+0xb8>)
   24326:	f7fe fd65 	bl	22df4 <z_spin_unlock_valid>
   2432a:	b968      	cbnz	r0, 24348 <k_sched_lock+0xac>
   2432c:	23ac      	movs	r3, #172	; 0xac
   2432e:	4a0a      	ldr	r2, [pc, #40]	; (24358 <k_sched_lock+0xbc>)
   24330:	4912      	ldr	r1, [pc, #72]	; (2437c <k_sched_lock+0xe0>)
   24332:	480b      	ldr	r0, [pc, #44]	; (24360 <k_sched_lock+0xc4>)
   24334:	f002 f9f2 	bl	2671c <printk>
   24338:	4906      	ldr	r1, [pc, #24]	; (24354 <k_sched_lock+0xb8>)
   2433a:	4811      	ldr	r0, [pc, #68]	; (24380 <k_sched_lock+0xe4>)
   2433c:	f002 f9ee 	bl	2671c <printk>
   24340:	21ac      	movs	r1, #172	; 0xac
   24342:	4805      	ldr	r0, [pc, #20]	; (24358 <k_sched_lock+0xbc>)
   24344:	f002 fc8f 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   24348:	f385 8811 	msr	BASEPRI, r5
   2434c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   24350:	bd38      	pop	{r3, r4, r5, pc}
   24352:	bf00      	nop
   24354:	20009bf0 	.word	0x20009bf0
   24358:	0002d072 	.word	0x0002d072
   2435c:	0002d0c4 	.word	0x0002d0c4
   24360:	0002cfb2 	.word	0x0002cfb2
   24364:	0002d0d9 	.word	0x0002d0d9
   24368:	000311e7 	.word	0x000311e7
   2436c:	000312a9 	.word	0x000312a9
   24370:	00030725 	.word	0x00030725
   24374:	20009ba8 	.word	0x20009ba8
   24378:	000312d4 	.word	0x000312d4
   2437c:	0002d098 	.word	0x0002d098
   24380:	0002d0af 	.word	0x0002d0af

00024384 <z_priq_dumb_remove>:
	sys_dlist_append(pq, &thread->base.qnode_dlist);
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24384:	4b0c      	ldr	r3, [pc, #48]	; (243b8 <z_priq_dumb_remove+0x34>)
{
   24386:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24388:	4299      	cmp	r1, r3
{
   2438a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2438c:	d10b      	bne.n	243a6 <z_priq_dumb_remove+0x22>
   2438e:	490b      	ldr	r1, [pc, #44]	; (243bc <z_priq_dumb_remove+0x38>)
   24390:	480b      	ldr	r0, [pc, #44]	; (243c0 <z_priq_dumb_remove+0x3c>)
   24392:	f44f 7371 	mov.w	r3, #964	; 0x3c4
   24396:	4a0b      	ldr	r2, [pc, #44]	; (243c4 <z_priq_dumb_remove+0x40>)
   24398:	f002 f9c0 	bl	2671c <printk>
   2439c:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   243a0:	4808      	ldr	r0, [pc, #32]	; (243c4 <z_priq_dumb_remove+0x40>)
   243a2:	f002 fc60 	bl	26c66 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   243a6:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   243aa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   243ac:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   243ae:	2300      	movs	r3, #0
	node->prev = NULL;
   243b0:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   243b4:	bd10      	pop	{r4, pc}
   243b6:	bf00      	nop
   243b8:	20009070 	.word	0x20009070
   243bc:	00031488 	.word	0x00031488
   243c0:	0002cfb2 	.word	0x0002cfb2
   243c4:	00031466 	.word	0x00031466

000243c8 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   243c8:	6883      	ldr	r3, [r0, #8]
{
   243ca:	b510      	push	{r4, lr}
   243cc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   243ce:	b95b      	cbnz	r3, 243e8 <unpend_thread_no_timeout+0x20>
   243d0:	490b      	ldr	r1, [pc, #44]	; (24400 <unpend_thread_no_timeout+0x38>)
   243d2:	480c      	ldr	r0, [pc, #48]	; (24404 <unpend_thread_no_timeout+0x3c>)
   243d4:	f240 234f 	movw	r3, #591	; 0x24f
   243d8:	4a0b      	ldr	r2, [pc, #44]	; (24408 <unpend_thread_no_timeout+0x40>)
   243da:	f002 f99f 	bl	2671c <printk>
   243de:	f240 214f 	movw	r1, #591	; 0x24f
   243e2:	4809      	ldr	r0, [pc, #36]	; (24408 <unpend_thread_no_timeout+0x40>)
   243e4:	f002 fc3f 	bl	26c66 <assert_post_action>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   243e8:	4621      	mov	r1, r4
   243ea:	68a0      	ldr	r0, [r4, #8]
   243ec:	f7ff ffca 	bl	24384 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   243f0:	7b63      	ldrb	r3, [r4, #13]
   243f2:	f023 0302 	bic.w	r3, r3, #2
   243f6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   243f8:	2300      	movs	r3, #0
   243fa:	60a3      	str	r3, [r4, #8]
}
   243fc:	bd10      	pop	{r4, pc}
   243fe:	bf00      	nop
   24400:	000314a9 	.word	0x000314a9
   24404:	0002cfb2 	.word	0x0002cfb2
   24408:	00031466 	.word	0x00031466

0002440c <z_unpend_thread>:
{
   2440c:	b538      	push	{r3, r4, r5, lr}
   2440e:	4604      	mov	r4, r0
	__asm__ volatile(
   24410:	f04f 0320 	mov.w	r3, #32
   24414:	f3ef 8511 	mrs	r5, BASEPRI
   24418:	f383 8811 	msr	BASEPRI, r3
   2441c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24420:	4819      	ldr	r0, [pc, #100]	; (24488 <z_unpend_thread+0x7c>)
   24422:	f7fe fcd9 	bl	22dd8 <z_spin_lock_valid>
   24426:	b968      	cbnz	r0, 24444 <z_unpend_thread+0x38>
   24428:	2381      	movs	r3, #129	; 0x81
   2442a:	4a18      	ldr	r2, [pc, #96]	; (2448c <z_unpend_thread+0x80>)
   2442c:	4918      	ldr	r1, [pc, #96]	; (24490 <z_unpend_thread+0x84>)
   2442e:	4819      	ldr	r0, [pc, #100]	; (24494 <z_unpend_thread+0x88>)
   24430:	f002 f974 	bl	2671c <printk>
   24434:	4914      	ldr	r1, [pc, #80]	; (24488 <z_unpend_thread+0x7c>)
   24436:	4818      	ldr	r0, [pc, #96]	; (24498 <z_unpend_thread+0x8c>)
   24438:	f002 f970 	bl	2671c <printk>
   2443c:	2181      	movs	r1, #129	; 0x81
   2443e:	4813      	ldr	r0, [pc, #76]	; (2448c <z_unpend_thread+0x80>)
   24440:	f002 fc11 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   24444:	4810      	ldr	r0, [pc, #64]	; (24488 <z_unpend_thread+0x7c>)
   24446:	f7fe fce3 	bl	22e10 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   2444a:	4620      	mov	r0, r4
   2444c:	f7ff ffbc 	bl	243c8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24450:	480d      	ldr	r0, [pc, #52]	; (24488 <z_unpend_thread+0x7c>)
   24452:	f7fe fccf 	bl	22df4 <z_spin_unlock_valid>
   24456:	b968      	cbnz	r0, 24474 <z_unpend_thread+0x68>
   24458:	23ac      	movs	r3, #172	; 0xac
   2445a:	4a0c      	ldr	r2, [pc, #48]	; (2448c <z_unpend_thread+0x80>)
   2445c:	490f      	ldr	r1, [pc, #60]	; (2449c <z_unpend_thread+0x90>)
   2445e:	480d      	ldr	r0, [pc, #52]	; (24494 <z_unpend_thread+0x88>)
   24460:	f002 f95c 	bl	2671c <printk>
   24464:	4908      	ldr	r1, [pc, #32]	; (24488 <z_unpend_thread+0x7c>)
   24466:	480e      	ldr	r0, [pc, #56]	; (244a0 <z_unpend_thread+0x94>)
   24468:	f002 f958 	bl	2671c <printk>
   2446c:	21ac      	movs	r1, #172	; 0xac
   2446e:	4807      	ldr	r0, [pc, #28]	; (2448c <z_unpend_thread+0x80>)
   24470:	f002 fbf9 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   24474:	f385 8811 	msr	BASEPRI, r5
   24478:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2447c:	f104 0018 	add.w	r0, r4, #24
}
   24480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   24484:	f001 b974 	b.w	25770 <z_abort_timeout>
   24488:	20009bf0 	.word	0x20009bf0
   2448c:	0002d072 	.word	0x0002d072
   24490:	0002d0c4 	.word	0x0002d0c4
   24494:	0002cfb2 	.word	0x0002cfb2
   24498:	0002d0d9 	.word	0x0002d0d9
   2449c:	0002d098 	.word	0x0002d098
   244a0:	0002d0af 	.word	0x0002d0af

000244a4 <update_cache>:
{
   244a4:	b538      	push	{r3, r4, r5, lr}
   244a6:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   244a8:	4814      	ldr	r0, [pc, #80]	; (244fc <update_cache+0x58>)
   244aa:	f007 fb13 	bl	2bad4 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   244ae:	4d14      	ldr	r5, [pc, #80]	; (24500 <update_cache+0x5c>)
   244b0:	4604      	mov	r4, r0
   244b2:	b900      	cbnz	r0, 244b6 <update_cache+0x12>
   244b4:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   244b6:	b9ca      	cbnz	r2, 244ec <update_cache+0x48>
	__ASSERT(_current != NULL, "");
   244b8:	68ab      	ldr	r3, [r5, #8]
   244ba:	b963      	cbnz	r3, 244d6 <update_cache+0x32>
   244bc:	4911      	ldr	r1, [pc, #68]	; (24504 <update_cache+0x60>)
   244be:	2385      	movs	r3, #133	; 0x85
   244c0:	4a11      	ldr	r2, [pc, #68]	; (24508 <update_cache+0x64>)
   244c2:	4812      	ldr	r0, [pc, #72]	; (2450c <update_cache+0x68>)
   244c4:	f002 f92a 	bl	2671c <printk>
   244c8:	4811      	ldr	r0, [pc, #68]	; (24510 <update_cache+0x6c>)
   244ca:	f002 f927 	bl	2671c <printk>
   244ce:	2185      	movs	r1, #133	; 0x85
   244d0:	480d      	ldr	r0, [pc, #52]	; (24508 <update_cache+0x64>)
   244d2:	f002 fbc8 	bl	26c66 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   244d6:	68ab      	ldr	r3, [r5, #8]
   244d8:	7b5a      	ldrb	r2, [r3, #13]
   244da:	06d2      	lsls	r2, r2, #27
   244dc:	d106      	bne.n	244ec <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   244de:	69a2      	ldr	r2, [r4, #24]
   244e0:	b922      	cbnz	r2, 244ec <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
   244e2:	89da      	ldrh	r2, [r3, #14]
   244e4:	2a7f      	cmp	r2, #127	; 0x7f
   244e6:	d901      	bls.n	244ec <update_cache+0x48>
		_kernel.ready_q.cache = _current;
   244e8:	626b      	str	r3, [r5, #36]	; 0x24
}
   244ea:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   244ec:	68ab      	ldr	r3, [r5, #8]
   244ee:	42a3      	cmp	r3, r4
   244f0:	d001      	beq.n	244f6 <update_cache+0x52>
			z_reset_time_slice();
   244f2:	f7ff fdcb 	bl	2408c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   244f6:	626c      	str	r4, [r5, #36]	; 0x24
}
   244f8:	e7f7      	b.n	244ea <update_cache+0x46>
   244fa:	bf00      	nop
   244fc:	20009bd0 	.word	0x20009bd0
   24500:	20009ba8 	.word	0x20009ba8
   24504:	000314c0 	.word	0x000314c0
   24508:	00031466 	.word	0x00031466
   2450c:	0002cfb2 	.word	0x0002cfb2
   24510:	00030725 	.word	0x00030725

00024514 <unready_thread>:
{
   24514:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   24516:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2451a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   2451c:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   2451e:	7b43      	ldrb	r3, [r0, #13]
   24520:	da06      	bge.n	24530 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   24526:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24528:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   2452a:	4806      	ldr	r0, [pc, #24]	; (24544 <unready_thread+0x30>)
   2452c:	f7ff ff2a 	bl	24384 <z_priq_dumb_remove>
	update_cache(thread == _current);
   24530:	4b05      	ldr	r3, [pc, #20]	; (24548 <unready_thread+0x34>)
   24532:	6898      	ldr	r0, [r3, #8]
   24534:	1b03      	subs	r3, r0, r4
   24536:	4258      	negs	r0, r3
   24538:	4158      	adcs	r0, r3
}
   2453a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   2453e:	f7ff bfb1 	b.w	244a4 <update_cache>
   24542:	bf00      	nop
   24544:	20009bd0 	.word	0x20009bd0
   24548:	20009ba8 	.word	0x20009ba8

0002454c <add_to_waitq_locked>:
{
   2454c:	b538      	push	{r3, r4, r5, lr}
   2454e:	4604      	mov	r4, r0
   24550:	460d      	mov	r5, r1
	unready_thread(thread);
   24552:	f7ff ffdf 	bl	24514 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   24556:	7b63      	ldrb	r3, [r4, #13]
   24558:	f043 0302 	orr.w	r3, r3, #2
   2455c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2455e:	b32d      	cbz	r5, 245ac <add_to_waitq_locked+0x60>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24560:	4b18      	ldr	r3, [pc, #96]	; (245c4 <add_to_waitq_locked+0x78>)
		thread->base.pended_on = wait_q;
   24562:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24564:	429c      	cmp	r4, r3
   24566:	d10b      	bne.n	24580 <add_to_waitq_locked+0x34>
   24568:	4917      	ldr	r1, [pc, #92]	; (245c8 <add_to_waitq_locked+0x7c>)
   2456a:	4818      	ldr	r0, [pc, #96]	; (245cc <add_to_waitq_locked+0x80>)
   2456c:	f240 33b5 	movw	r3, #949	; 0x3b5
   24570:	4a17      	ldr	r2, [pc, #92]	; (245d0 <add_to_waitq_locked+0x84>)
   24572:	f002 f8d3 	bl	2671c <printk>
   24576:	f240 31b5 	movw	r1, #949	; 0x3b5
   2457a:	4815      	ldr	r0, [pc, #84]	; (245d0 <add_to_waitq_locked+0x84>)
   2457c:	f002 fb73 	bl	26c66 <assert_post_action>
	return list->head == list;
   24580:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24582:	429d      	cmp	r5, r3
   24584:	bf08      	it	eq
   24586:	2300      	moveq	r3, #0
   24588:	2b00      	cmp	r3, #0
   2458a:	bf38      	it	cc
   2458c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2458e:	b19b      	cbz	r3, 245b8 <add_to_waitq_locked+0x6c>
	int32_t b1 = thread_1->base.prio;
   24590:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   24594:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   24598:	4291      	cmp	r1, r2
   2459a:	d008      	beq.n	245ae <add_to_waitq_locked+0x62>
		return b2 - b1;
   2459c:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2459e:	2a00      	cmp	r2, #0
   245a0:	dd05      	ble.n	245ae <add_to_waitq_locked+0x62>
	sys_dnode_t *const prev = successor->prev;
   245a2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   245a4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   245a8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   245aa:	605c      	str	r4, [r3, #4]
}
   245ac:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   245ae:	686a      	ldr	r2, [r5, #4]
   245b0:	4293      	cmp	r3, r2
   245b2:	d001      	beq.n	245b8 <add_to_waitq_locked+0x6c>
   245b4:	681b      	ldr	r3, [r3, #0]
   245b6:	e7ea      	b.n	2458e <add_to_waitq_locked+0x42>
	sys_dnode_t *const tail = list->tail;
   245b8:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   245ba:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   245be:	601c      	str	r4, [r3, #0]
	list->tail = node;
   245c0:	606c      	str	r4, [r5, #4]
   245c2:	e7f3      	b.n	245ac <add_to_waitq_locked+0x60>
   245c4:	20009070 	.word	0x20009070
   245c8:	00031488 	.word	0x00031488
   245cc:	0002cfb2 	.word	0x0002cfb2
   245d0:	00031466 	.word	0x00031466

000245d4 <pend>:
{
   245d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   245d8:	4604      	mov	r4, r0
   245da:	460d      	mov	r5, r1
   245dc:	4616      	mov	r6, r2
   245de:	461f      	mov	r7, r3
	__asm__ volatile(
   245e0:	f04f 0320 	mov.w	r3, #32
   245e4:	f3ef 8811 	mrs	r8, BASEPRI
   245e8:	f383 8811 	msr	BASEPRI, r3
   245ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   245f0:	481f      	ldr	r0, [pc, #124]	; (24670 <pend+0x9c>)
   245f2:	f7fe fbf1 	bl	22dd8 <z_spin_lock_valid>
   245f6:	b968      	cbnz	r0, 24614 <pend+0x40>
   245f8:	2381      	movs	r3, #129	; 0x81
   245fa:	4a1e      	ldr	r2, [pc, #120]	; (24674 <pend+0xa0>)
   245fc:	491e      	ldr	r1, [pc, #120]	; (24678 <pend+0xa4>)
   245fe:	481f      	ldr	r0, [pc, #124]	; (2467c <pend+0xa8>)
   24600:	f002 f88c 	bl	2671c <printk>
   24604:	491a      	ldr	r1, [pc, #104]	; (24670 <pend+0x9c>)
   24606:	481e      	ldr	r0, [pc, #120]	; (24680 <pend+0xac>)
   24608:	f002 f888 	bl	2671c <printk>
   2460c:	2181      	movs	r1, #129	; 0x81
   2460e:	4819      	ldr	r0, [pc, #100]	; (24674 <pend+0xa0>)
   24610:	f002 fb29 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   24614:	4816      	ldr	r0, [pc, #88]	; (24670 <pend+0x9c>)
   24616:	f7fe fbfb 	bl	22e10 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   2461a:	4620      	mov	r0, r4
   2461c:	4629      	mov	r1, r5
   2461e:	f7ff ff95 	bl	2454c <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24622:	4813      	ldr	r0, [pc, #76]	; (24670 <pend+0x9c>)
   24624:	f7fe fbe6 	bl	22df4 <z_spin_unlock_valid>
   24628:	b968      	cbnz	r0, 24646 <pend+0x72>
   2462a:	23ac      	movs	r3, #172	; 0xac
   2462c:	4a11      	ldr	r2, [pc, #68]	; (24674 <pend+0xa0>)
   2462e:	4915      	ldr	r1, [pc, #84]	; (24684 <pend+0xb0>)
   24630:	4812      	ldr	r0, [pc, #72]	; (2467c <pend+0xa8>)
   24632:	f002 f873 	bl	2671c <printk>
   24636:	490e      	ldr	r1, [pc, #56]	; (24670 <pend+0x9c>)
   24638:	4813      	ldr	r0, [pc, #76]	; (24688 <pend+0xb4>)
   2463a:	f002 f86f 	bl	2671c <printk>
   2463e:	21ac      	movs	r1, #172	; 0xac
   24640:	480c      	ldr	r0, [pc, #48]	; (24674 <pend+0xa0>)
   24642:	f002 fb10 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   24646:	f388 8811 	msr	BASEPRI, r8
   2464a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2464e:	1c7b      	adds	r3, r7, #1
   24650:	bf08      	it	eq
   24652:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   24656:	d008      	beq.n	2466a <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   24658:	4632      	mov	r2, r6
   2465a:	463b      	mov	r3, r7
   2465c:	f104 0018 	add.w	r0, r4, #24
   24660:	490a      	ldr	r1, [pc, #40]	; (2468c <pend+0xb8>)
}
   24662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   24666:	f000 bfaf 	b.w	255c8 <z_add_timeout>
   2466a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2466e:	bf00      	nop
   24670:	20009bf0 	.word	0x20009bf0
   24674:	0002d072 	.word	0x0002d072
   24678:	0002d0c4 	.word	0x0002d0c4
   2467c:	0002cfb2 	.word	0x0002cfb2
   24680:	0002d0d9 	.word	0x0002d0d9
   24684:	0002d098 	.word	0x0002d098
   24688:	0002d0af 	.word	0x0002d0af
   2468c:	00024c3d 	.word	0x00024c3d

00024690 <z_pend_curr>:
{
   24690:	b538      	push	{r3, r4, r5, lr}
   24692:	4604      	mov	r4, r0
	pending_current = _current;
   24694:	4b10      	ldr	r3, [pc, #64]	; (246d8 <z_pend_curr+0x48>)
{
   24696:	460d      	mov	r5, r1
	pending_current = _current;
   24698:	6898      	ldr	r0, [r3, #8]
   2469a:	4b10      	ldr	r3, [pc, #64]	; (246dc <z_pend_curr+0x4c>)
{
   2469c:	4611      	mov	r1, r2
	pending_current = _current;
   2469e:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   246a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   246a4:	f7ff ff96 	bl	245d4 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   246a8:	4620      	mov	r0, r4
   246aa:	f7fe fba3 	bl	22df4 <z_spin_unlock_valid>
   246ae:	b968      	cbnz	r0, 246cc <z_pend_curr+0x3c>
   246b0:	23c3      	movs	r3, #195	; 0xc3
   246b2:	4a0b      	ldr	r2, [pc, #44]	; (246e0 <z_pend_curr+0x50>)
   246b4:	490b      	ldr	r1, [pc, #44]	; (246e4 <z_pend_curr+0x54>)
   246b6:	480c      	ldr	r0, [pc, #48]	; (246e8 <z_pend_curr+0x58>)
   246b8:	f002 f830 	bl	2671c <printk>
   246bc:	4621      	mov	r1, r4
   246be:	480b      	ldr	r0, [pc, #44]	; (246ec <z_pend_curr+0x5c>)
   246c0:	f002 f82c 	bl	2671c <printk>
   246c4:	21c3      	movs	r1, #195	; 0xc3
   246c6:	4806      	ldr	r0, [pc, #24]	; (246e0 <z_pend_curr+0x50>)
   246c8:	f002 facd 	bl	26c66 <assert_post_action>
   246cc:	4628      	mov	r0, r5
}
   246ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   246d2:	f7f1 bcf7 	b.w	160c4 <arch_swap>
   246d6:	bf00      	nop
   246d8:	20009ba8 	.word	0x20009ba8
   246dc:	20009bec 	.word	0x20009bec
   246e0:	0002d072 	.word	0x0002d072
   246e4:	0002d098 	.word	0x0002d098
   246e8:	0002cfb2 	.word	0x0002cfb2
   246ec:	0002d0af 	.word	0x0002d0af

000246f0 <z_impl_k_thread_suspend>:
{
   246f0:	b570      	push	{r4, r5, r6, lr}
   246f2:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   246f4:	3018      	adds	r0, #24
   246f6:	f001 f83b 	bl	25770 <z_abort_timeout>
	__asm__ volatile(
   246fa:	f04f 0320 	mov.w	r3, #32
   246fe:	f3ef 8611 	mrs	r6, BASEPRI
   24702:	f383 8811 	msr	BASEPRI, r3
   24706:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2470a:	4825      	ldr	r0, [pc, #148]	; (247a0 <z_impl_k_thread_suspend+0xb0>)
   2470c:	f7fe fb64 	bl	22dd8 <z_spin_lock_valid>
   24710:	b968      	cbnz	r0, 2472e <z_impl_k_thread_suspend+0x3e>
   24712:	2381      	movs	r3, #129	; 0x81
   24714:	4a23      	ldr	r2, [pc, #140]	; (247a4 <z_impl_k_thread_suspend+0xb4>)
   24716:	4924      	ldr	r1, [pc, #144]	; (247a8 <z_impl_k_thread_suspend+0xb8>)
   24718:	4824      	ldr	r0, [pc, #144]	; (247ac <z_impl_k_thread_suspend+0xbc>)
   2471a:	f001 ffff 	bl	2671c <printk>
   2471e:	4920      	ldr	r1, [pc, #128]	; (247a0 <z_impl_k_thread_suspend+0xb0>)
   24720:	4823      	ldr	r0, [pc, #140]	; (247b0 <z_impl_k_thread_suspend+0xc0>)
   24722:	f001 fffb 	bl	2671c <printk>
   24726:	2181      	movs	r1, #129	; 0x81
   24728:	481e      	ldr	r0, [pc, #120]	; (247a4 <z_impl_k_thread_suspend+0xb4>)
   2472a:	f002 fa9c 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   2472e:	481c      	ldr	r0, [pc, #112]	; (247a0 <z_impl_k_thread_suspend+0xb0>)
   24730:	f7fe fb6e 	bl	22e10 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   24734:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   24738:	7b63      	ldrb	r3, [r4, #13]
   2473a:	2a00      	cmp	r2, #0
   2473c:	da06      	bge.n	2474c <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2473e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   24742:	4621      	mov	r1, r4
   24744:	481b      	ldr	r0, [pc, #108]	; (247b4 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24746:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   24748:	f7ff fe1c 	bl	24384 <z_priq_dumb_remove>
		update_cache(thread == _current);
   2474c:	4d1a      	ldr	r5, [pc, #104]	; (247b8 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2474e:	7b63      	ldrb	r3, [r4, #13]
   24750:	68a8      	ldr	r0, [r5, #8]
   24752:	f043 0310 	orr.w	r3, r3, #16
   24756:	7363      	strb	r3, [r4, #13]
   24758:	1b03      	subs	r3, r0, r4
   2475a:	4258      	negs	r0, r3
   2475c:	4158      	adcs	r0, r3
   2475e:	f7ff fea1 	bl	244a4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24762:	480f      	ldr	r0, [pc, #60]	; (247a0 <z_impl_k_thread_suspend+0xb0>)
   24764:	f7fe fb46 	bl	22df4 <z_spin_unlock_valid>
   24768:	b968      	cbnz	r0, 24786 <z_impl_k_thread_suspend+0x96>
   2476a:	23ac      	movs	r3, #172	; 0xac
   2476c:	4a0d      	ldr	r2, [pc, #52]	; (247a4 <z_impl_k_thread_suspend+0xb4>)
   2476e:	4913      	ldr	r1, [pc, #76]	; (247bc <z_impl_k_thread_suspend+0xcc>)
   24770:	480e      	ldr	r0, [pc, #56]	; (247ac <z_impl_k_thread_suspend+0xbc>)
   24772:	f001 ffd3 	bl	2671c <printk>
   24776:	490a      	ldr	r1, [pc, #40]	; (247a0 <z_impl_k_thread_suspend+0xb0>)
   24778:	4811      	ldr	r0, [pc, #68]	; (247c0 <z_impl_k_thread_suspend+0xd0>)
   2477a:	f001 ffcf 	bl	2671c <printk>
   2477e:	21ac      	movs	r1, #172	; 0xac
   24780:	4808      	ldr	r0, [pc, #32]	; (247a4 <z_impl_k_thread_suspend+0xb4>)
   24782:	f002 fa70 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   24786:	f386 8811 	msr	BASEPRI, r6
   2478a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2478e:	68ab      	ldr	r3, [r5, #8]
   24790:	42a3      	cmp	r3, r4
   24792:	d103      	bne.n	2479c <z_impl_k_thread_suspend+0xac>
}
   24794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   24798:	f007 b992 	b.w	2bac0 <z_reschedule_unlocked>
}
   2479c:	bd70      	pop	{r4, r5, r6, pc}
   2479e:	bf00      	nop
   247a0:	20009bf0 	.word	0x20009bf0
   247a4:	0002d072 	.word	0x0002d072
   247a8:	0002d0c4 	.word	0x0002d0c4
   247ac:	0002cfb2 	.word	0x0002cfb2
   247b0:	0002d0d9 	.word	0x0002d0d9
   247b4:	20009bd0 	.word	0x20009bd0
   247b8:	20009ba8 	.word	0x20009ba8
   247bc:	0002d098 	.word	0x0002d098
   247c0:	0002d0af 	.word	0x0002d0af

000247c4 <k_sched_unlock>:
{
   247c4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   247c6:	f04f 0320 	mov.w	r3, #32
   247ca:	f3ef 8511 	mrs	r5, BASEPRI
   247ce:	f383 8811 	msr	BASEPRI, r3
   247d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   247d6:	482d      	ldr	r0, [pc, #180]	; (2488c <k_sched_unlock+0xc8>)
   247d8:	f7fe fafe 	bl	22dd8 <z_spin_lock_valid>
   247dc:	b968      	cbnz	r0, 247fa <k_sched_unlock+0x36>
   247de:	2381      	movs	r3, #129	; 0x81
   247e0:	4a2b      	ldr	r2, [pc, #172]	; (24890 <k_sched_unlock+0xcc>)
   247e2:	492c      	ldr	r1, [pc, #176]	; (24894 <k_sched_unlock+0xd0>)
   247e4:	482c      	ldr	r0, [pc, #176]	; (24898 <k_sched_unlock+0xd4>)
   247e6:	f001 ff99 	bl	2671c <printk>
   247ea:	4928      	ldr	r1, [pc, #160]	; (2488c <k_sched_unlock+0xc8>)
   247ec:	482b      	ldr	r0, [pc, #172]	; (2489c <k_sched_unlock+0xd8>)
   247ee:	f001 ff95 	bl	2671c <printk>
   247f2:	2181      	movs	r1, #129	; 0x81
   247f4:	4826      	ldr	r0, [pc, #152]	; (24890 <k_sched_unlock+0xcc>)
   247f6:	f002 fa36 	bl	26c66 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   247fa:	4c29      	ldr	r4, [pc, #164]	; (248a0 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   247fc:	4823      	ldr	r0, [pc, #140]	; (2488c <k_sched_unlock+0xc8>)
   247fe:	f7fe fb07 	bl	22e10 <z_spin_lock_set_owner>
   24802:	68a2      	ldr	r2, [r4, #8]
   24804:	7bd2      	ldrb	r2, [r2, #15]
   24806:	b972      	cbnz	r2, 24826 <k_sched_unlock+0x62>
   24808:	4926      	ldr	r1, [pc, #152]	; (248a4 <k_sched_unlock+0xe0>)
   2480a:	f240 3352 	movw	r3, #850	; 0x352
   2480e:	4a26      	ldr	r2, [pc, #152]	; (248a8 <k_sched_unlock+0xe4>)
   24810:	4821      	ldr	r0, [pc, #132]	; (24898 <k_sched_unlock+0xd4>)
   24812:	f001 ff83 	bl	2671c <printk>
   24816:	4825      	ldr	r0, [pc, #148]	; (248ac <k_sched_unlock+0xe8>)
   24818:	f001 ff80 	bl	2671c <printk>
   2481c:	f240 3152 	movw	r1, #850	; 0x352
   24820:	4821      	ldr	r0, [pc, #132]	; (248a8 <k_sched_unlock+0xe4>)
   24822:	f002 fa20 	bl	26c66 <assert_post_action>
   24826:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   2482a:	b173      	cbz	r3, 2484a <k_sched_unlock+0x86>
   2482c:	4920      	ldr	r1, [pc, #128]	; (248b0 <k_sched_unlock+0xec>)
   2482e:	f240 3353 	movw	r3, #851	; 0x353
   24832:	4a1d      	ldr	r2, [pc, #116]	; (248a8 <k_sched_unlock+0xe4>)
   24834:	4818      	ldr	r0, [pc, #96]	; (24898 <k_sched_unlock+0xd4>)
   24836:	f001 ff71 	bl	2671c <printk>
   2483a:	481c      	ldr	r0, [pc, #112]	; (248ac <k_sched_unlock+0xe8>)
   2483c:	f001 ff6e 	bl	2671c <printk>
   24840:	f240 3153 	movw	r1, #851	; 0x353
   24844:	4818      	ldr	r0, [pc, #96]	; (248a8 <k_sched_unlock+0xe4>)
   24846:	f002 fa0e 	bl	26c66 <assert_post_action>
		++_current->base.sched_locked;
   2484a:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   2484c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   2484e:	7bd3      	ldrb	r3, [r2, #15]
   24850:	3301      	adds	r3, #1
   24852:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   24854:	f7ff fe26 	bl	244a4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24858:	480c      	ldr	r0, [pc, #48]	; (2488c <k_sched_unlock+0xc8>)
   2485a:	f7fe facb 	bl	22df4 <z_spin_unlock_valid>
   2485e:	b968      	cbnz	r0, 2487c <k_sched_unlock+0xb8>
   24860:	23ac      	movs	r3, #172	; 0xac
   24862:	4a0b      	ldr	r2, [pc, #44]	; (24890 <k_sched_unlock+0xcc>)
   24864:	4913      	ldr	r1, [pc, #76]	; (248b4 <k_sched_unlock+0xf0>)
   24866:	480c      	ldr	r0, [pc, #48]	; (24898 <k_sched_unlock+0xd4>)
   24868:	f001 ff58 	bl	2671c <printk>
   2486c:	4907      	ldr	r1, [pc, #28]	; (2488c <k_sched_unlock+0xc8>)
   2486e:	4812      	ldr	r0, [pc, #72]	; (248b8 <k_sched_unlock+0xf4>)
   24870:	f001 ff54 	bl	2671c <printk>
   24874:	21ac      	movs	r1, #172	; 0xac
   24876:	4806      	ldr	r0, [pc, #24]	; (24890 <k_sched_unlock+0xcc>)
   24878:	f002 f9f5 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   2487c:	f385 8811 	msr	BASEPRI, r5
   24880:	f3bf 8f6f 	isb	sy
}
   24884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   24888:	f007 b91a 	b.w	2bac0 <z_reschedule_unlocked>
   2488c:	20009bf0 	.word	0x20009bf0
   24890:	0002d072 	.word	0x0002d072
   24894:	0002d0c4 	.word	0x0002d0c4
   24898:	0002cfb2 	.word	0x0002cfb2
   2489c:	0002d0d9 	.word	0x0002d0d9
   248a0:	20009ba8 	.word	0x20009ba8
   248a4:	000314e7 	.word	0x000314e7
   248a8:	00031466 	.word	0x00031466
   248ac:	00030725 	.word	0x00030725
   248b0:	000311e7 	.word	0x000311e7
   248b4:	0002d098 	.word	0x0002d098
   248b8:	0002d0af 	.word	0x0002d0af

000248bc <move_thread_to_end_of_prio_q>:
{
   248bc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   248be:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   248c2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   248c4:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   248c6:	7b43      	ldrb	r3, [r0, #13]
   248c8:	da06      	bge.n	248d8 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   248ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   248ce:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   248d0:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   248d2:	4820      	ldr	r0, [pc, #128]	; (24954 <move_thread_to_end_of_prio_q+0x98>)
   248d4:	f7ff fd56 	bl	24384 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   248d8:	7b63      	ldrb	r3, [r4, #13]
   248da:	f063 037f 	orn	r3, r3, #127	; 0x7f
   248de:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   248e0:	4b1d      	ldr	r3, [pc, #116]	; (24958 <move_thread_to_end_of_prio_q+0x9c>)
   248e2:	429c      	cmp	r4, r3
   248e4:	d10b      	bne.n	248fe <move_thread_to_end_of_prio_q+0x42>
   248e6:	491d      	ldr	r1, [pc, #116]	; (2495c <move_thread_to_end_of_prio_q+0xa0>)
   248e8:	481d      	ldr	r0, [pc, #116]	; (24960 <move_thread_to_end_of_prio_q+0xa4>)
   248ea:	f240 33b5 	movw	r3, #949	; 0x3b5
   248ee:	4a1d      	ldr	r2, [pc, #116]	; (24964 <move_thread_to_end_of_prio_q+0xa8>)
   248f0:	f001 ff14 	bl	2671c <printk>
   248f4:	f240 31b5 	movw	r1, #949	; 0x3b5
   248f8:	481a      	ldr	r0, [pc, #104]	; (24964 <move_thread_to_end_of_prio_q+0xa8>)
   248fa:	f002 f9b4 	bl	26c66 <assert_post_action>
	return list->head == list;
   248fe:	4a1a      	ldr	r2, [pc, #104]	; (24968 <move_thread_to_end_of_prio_q+0xac>)
   24900:	4611      	mov	r1, r2
   24902:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   24906:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24908:	428b      	cmp	r3, r1
   2490a:	bf08      	it	eq
   2490c:	2300      	moveq	r3, #0
   2490e:	2b00      	cmp	r3, #0
   24910:	bf38      	it	cc
   24912:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24914:	b1cb      	cbz	r3, 2494a <move_thread_to_end_of_prio_q+0x8e>
	int32_t b1 = thread_1->base.prio;
   24916:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2491a:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   2491e:	4286      	cmp	r6, r0
   24920:	d00f      	beq.n	24942 <move_thread_to_end_of_prio_q+0x86>
		return b2 - b1;
   24922:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   24924:	2800      	cmp	r0, #0
   24926:	dd0c      	ble.n	24942 <move_thread_to_end_of_prio_q+0x86>
	sys_dnode_t *const prev = successor->prev;
   24928:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   2492a:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   2492e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   24930:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   24932:	6890      	ldr	r0, [r2, #8]
   24934:	1b03      	subs	r3, r0, r4
   24936:	4258      	negs	r0, r3
   24938:	4158      	adcs	r0, r3
}
   2493a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2493e:	f7ff bdb1 	b.w	244a4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   24942:	42ab      	cmp	r3, r5
   24944:	d001      	beq.n	2494a <move_thread_to_end_of_prio_q+0x8e>
   24946:	681b      	ldr	r3, [r3, #0]
   24948:	e7e4      	b.n	24914 <move_thread_to_end_of_prio_q+0x58>
	node->prev = tail;
   2494a:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
   2494e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   24950:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   24952:	e7ee      	b.n	24932 <move_thread_to_end_of_prio_q+0x76>
   24954:	20009bd0 	.word	0x20009bd0
   24958:	20009070 	.word	0x20009070
   2495c:	00031488 	.word	0x00031488
   24960:	0002cfb2 	.word	0x0002cfb2
   24964:	00031466 	.word	0x00031466
   24968:	20009ba8 	.word	0x20009ba8

0002496c <z_time_slice>:
{
   2496c:	b570      	push	{r4, r5, r6, lr}
   2496e:	4604      	mov	r4, r0
	__asm__ volatile(
   24970:	f04f 0320 	mov.w	r3, #32
   24974:	f3ef 8511 	mrs	r5, BASEPRI
   24978:	f383 8811 	msr	BASEPRI, r3
   2497c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24980:	482a      	ldr	r0, [pc, #168]	; (24a2c <z_time_slice+0xc0>)
   24982:	f7fe fa29 	bl	22dd8 <z_spin_lock_valid>
   24986:	b968      	cbnz	r0, 249a4 <z_time_slice+0x38>
   24988:	2381      	movs	r3, #129	; 0x81
   2498a:	4a29      	ldr	r2, [pc, #164]	; (24a30 <z_time_slice+0xc4>)
   2498c:	4929      	ldr	r1, [pc, #164]	; (24a34 <z_time_slice+0xc8>)
   2498e:	482a      	ldr	r0, [pc, #168]	; (24a38 <z_time_slice+0xcc>)
   24990:	f001 fec4 	bl	2671c <printk>
   24994:	4925      	ldr	r1, [pc, #148]	; (24a2c <z_time_slice+0xc0>)
   24996:	4829      	ldr	r0, [pc, #164]	; (24a3c <z_time_slice+0xd0>)
   24998:	f001 fec0 	bl	2671c <printk>
   2499c:	2181      	movs	r1, #129	; 0x81
   2499e:	4824      	ldr	r0, [pc, #144]	; (24a30 <z_time_slice+0xc4>)
   249a0:	f002 f961 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   249a4:	4821      	ldr	r0, [pc, #132]	; (24a2c <z_time_slice+0xc0>)
   249a6:	f7fe fa33 	bl	22e10 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   249aa:	4b25      	ldr	r3, [pc, #148]	; (24a40 <z_time_slice+0xd4>)
   249ac:	4a25      	ldr	r2, [pc, #148]	; (24a44 <z_time_slice+0xd8>)
   249ae:	6898      	ldr	r0, [r3, #8]
   249b0:	6811      	ldr	r1, [r2, #0]
   249b2:	4288      	cmp	r0, r1
   249b4:	4619      	mov	r1, r3
   249b6:	d118      	bne.n	249ea <z_time_slice+0x7e>
			z_reset_time_slice();
   249b8:	f7ff fb68 	bl	2408c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   249bc:	481b      	ldr	r0, [pc, #108]	; (24a2c <z_time_slice+0xc0>)
   249be:	f7fe fa19 	bl	22df4 <z_spin_unlock_valid>
   249c2:	b968      	cbnz	r0, 249e0 <z_time_slice+0x74>
   249c4:	23ac      	movs	r3, #172	; 0xac
   249c6:	4a1a      	ldr	r2, [pc, #104]	; (24a30 <z_time_slice+0xc4>)
   249c8:	491f      	ldr	r1, [pc, #124]	; (24a48 <z_time_slice+0xdc>)
   249ca:	481b      	ldr	r0, [pc, #108]	; (24a38 <z_time_slice+0xcc>)
   249cc:	f001 fea6 	bl	2671c <printk>
   249d0:	4916      	ldr	r1, [pc, #88]	; (24a2c <z_time_slice+0xc0>)
   249d2:	481e      	ldr	r0, [pc, #120]	; (24a4c <z_time_slice+0xe0>)
   249d4:	f001 fea2 	bl	2671c <printk>
   249d8:	21ac      	movs	r1, #172	; 0xac
   249da:	4815      	ldr	r0, [pc, #84]	; (24a30 <z_time_slice+0xc4>)
   249dc:	f002 f943 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   249e0:	f385 8811 	msr	BASEPRI, r5
   249e4:	f3bf 8f6f 	isb	sy
}
   249e8:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   249ea:	2600      	movs	r6, #0
   249ec:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   249ee:	4a18      	ldr	r2, [pc, #96]	; (24a50 <z_time_slice+0xe4>)
   249f0:	6812      	ldr	r2, [r2, #0]
   249f2:	b1ba      	cbz	r2, 24a24 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   249f4:	89c2      	ldrh	r2, [r0, #14]
   249f6:	2a7f      	cmp	r2, #127	; 0x7f
   249f8:	d814      	bhi.n	24a24 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   249fa:	7b42      	ldrb	r2, [r0, #13]
   249fc:	06d2      	lsls	r2, r2, #27
   249fe:	d111      	bne.n	24a24 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   24a00:	4a14      	ldr	r2, [pc, #80]	; (24a54 <z_time_slice+0xe8>)
   24a02:	f990 600e 	ldrsb.w	r6, [r0, #14]
   24a06:	6812      	ldr	r2, [r2, #0]
   24a08:	4296      	cmp	r6, r2
   24a0a:	db0b      	blt.n	24a24 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   24a0c:	4a12      	ldr	r2, [pc, #72]	; (24a58 <z_time_slice+0xec>)
   24a0e:	4290      	cmp	r0, r2
   24a10:	d008      	beq.n	24a24 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   24a12:	691a      	ldr	r2, [r3, #16]
   24a14:	42a2      	cmp	r2, r4
   24a16:	dc02      	bgt.n	24a1e <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   24a18:	f7ff ff50 	bl	248bc <move_thread_to_end_of_prio_q>
   24a1c:	e7cc      	b.n	249b8 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   24a1e:	1b12      	subs	r2, r2, r4
   24a20:	611a      	str	r2, [r3, #16]
   24a22:	e7cb      	b.n	249bc <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   24a24:	2300      	movs	r3, #0
   24a26:	610b      	str	r3, [r1, #16]
   24a28:	e7c8      	b.n	249bc <z_time_slice+0x50>
   24a2a:	bf00      	nop
   24a2c:	20009bf0 	.word	0x20009bf0
   24a30:	0002d072 	.word	0x0002d072
   24a34:	0002d0c4 	.word	0x0002d0c4
   24a38:	0002cfb2 	.word	0x0002cfb2
   24a3c:	0002d0d9 	.word	0x0002d0d9
   24a40:	20009ba8 	.word	0x20009ba8
   24a44:	20009bec 	.word	0x20009bec
   24a48:	0002d098 	.word	0x0002d098
   24a4c:	0002d0af 	.word	0x0002d0af
   24a50:	20009bf8 	.word	0x20009bf8
   24a54:	20009bf4 	.word	0x20009bf4
   24a58:	20009070 	.word	0x20009070

00024a5c <ready_thread>:
{
   24a5c:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   24a5e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   24a62:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   24a64:	2a00      	cmp	r2, #0
   24a66:	7b43      	ldrb	r3, [r0, #13]
   24a68:	db40      	blt.n	24aec <ready_thread+0x90>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24a6a:	06da      	lsls	r2, r3, #27
   24a6c:	d13e      	bne.n	24aec <ready_thread+0x90>
	return !sys_dnode_is_linked(&to->node);
   24a6e:	6985      	ldr	r5, [r0, #24]
   24a70:	2d00      	cmp	r5, #0
   24a72:	d13b      	bne.n	24aec <ready_thread+0x90>
	thread->base.thread_state |= _THREAD_QUEUED;
   24a74:	f063 037f 	orn	r3, r3, #127	; 0x7f
   24a78:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24a7a:	4b1d      	ldr	r3, [pc, #116]	; (24af0 <ready_thread+0x94>)
   24a7c:	4298      	cmp	r0, r3
   24a7e:	d10b      	bne.n	24a98 <ready_thread+0x3c>
   24a80:	491c      	ldr	r1, [pc, #112]	; (24af4 <ready_thread+0x98>)
   24a82:	481d      	ldr	r0, [pc, #116]	; (24af8 <ready_thread+0x9c>)
   24a84:	f240 33b5 	movw	r3, #949	; 0x3b5
   24a88:	4a1c      	ldr	r2, [pc, #112]	; (24afc <ready_thread+0xa0>)
   24a8a:	f001 fe47 	bl	2671c <printk>
   24a8e:	f240 31b5 	movw	r1, #949	; 0x3b5
   24a92:	481a      	ldr	r0, [pc, #104]	; (24afc <ready_thread+0xa0>)
   24a94:	f002 f8e7 	bl	26c66 <assert_post_action>
	return list->head == list;
   24a98:	4919      	ldr	r1, [pc, #100]	; (24b00 <ready_thread+0xa4>)
   24a9a:	460b      	mov	r3, r1
   24a9c:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24aa0:	4298      	cmp	r0, r3
   24aa2:	bf18      	it	ne
   24aa4:	4605      	movne	r5, r0
   24aa6:	2d00      	cmp	r5, #0
   24aa8:	461a      	mov	r2, r3
   24aaa:	462b      	mov	r3, r5
   24aac:	bf38      	it	cc
   24aae:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   24ab0:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24ab2:	b1b3      	cbz	r3, 24ae2 <ready_thread+0x86>
	int32_t b1 = thread_1->base.prio;
   24ab4:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   24ab8:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   24abc:	4286      	cmp	r6, r0
   24abe:	d00c      	beq.n	24ada <ready_thread+0x7e>
		return b2 - b1;
   24ac0:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   24ac2:	2800      	cmp	r0, #0
   24ac4:	dd09      	ble.n	24ada <ready_thread+0x7e>
	sys_dnode_t *const prev = successor->prev;
   24ac6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24ac8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   24acc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   24ace:	605c      	str	r4, [r3, #4]
		update_cache(0);
   24ad0:	2000      	movs	r0, #0
}
   24ad2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   24ad6:	f7ff bce5 	b.w	244a4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   24ada:	42ab      	cmp	r3, r5
   24adc:	d001      	beq.n	24ae2 <ready_thread+0x86>
   24ade:	681b      	ldr	r3, [r3, #0]
   24ae0:	e7e7      	b.n	24ab2 <ready_thread+0x56>
	node->prev = tail;
   24ae2:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   24ae6:	602c      	str	r4, [r5, #0]
	list->tail = node;
   24ae8:	62cc      	str	r4, [r1, #44]	; 0x2c
}
   24aea:	e7f1      	b.n	24ad0 <ready_thread+0x74>
}
   24aec:	bd70      	pop	{r4, r5, r6, pc}
   24aee:	bf00      	nop
   24af0:	20009070 	.word	0x20009070
   24af4:	00031488 	.word	0x00031488
   24af8:	0002cfb2 	.word	0x0002cfb2
   24afc:	00031466 	.word	0x00031466
   24b00:	20009ba8 	.word	0x20009ba8

00024b04 <z_ready_thread>:
{
   24b04:	b538      	push	{r3, r4, r5, lr}
   24b06:	4604      	mov	r4, r0
	__asm__ volatile(
   24b08:	f04f 0320 	mov.w	r3, #32
   24b0c:	f3ef 8511 	mrs	r5, BASEPRI
   24b10:	f383 8811 	msr	BASEPRI, r3
   24b14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24b18:	4817      	ldr	r0, [pc, #92]	; (24b78 <z_ready_thread+0x74>)
   24b1a:	f7fe f95d 	bl	22dd8 <z_spin_lock_valid>
   24b1e:	b968      	cbnz	r0, 24b3c <z_ready_thread+0x38>
   24b20:	2381      	movs	r3, #129	; 0x81
   24b22:	4a16      	ldr	r2, [pc, #88]	; (24b7c <z_ready_thread+0x78>)
   24b24:	4916      	ldr	r1, [pc, #88]	; (24b80 <z_ready_thread+0x7c>)
   24b26:	4817      	ldr	r0, [pc, #92]	; (24b84 <z_ready_thread+0x80>)
   24b28:	f001 fdf8 	bl	2671c <printk>
   24b2c:	4912      	ldr	r1, [pc, #72]	; (24b78 <z_ready_thread+0x74>)
   24b2e:	4816      	ldr	r0, [pc, #88]	; (24b88 <z_ready_thread+0x84>)
   24b30:	f001 fdf4 	bl	2671c <printk>
   24b34:	2181      	movs	r1, #129	; 0x81
   24b36:	4811      	ldr	r0, [pc, #68]	; (24b7c <z_ready_thread+0x78>)
   24b38:	f002 f895 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   24b3c:	480e      	ldr	r0, [pc, #56]	; (24b78 <z_ready_thread+0x74>)
   24b3e:	f7fe f967 	bl	22e10 <z_spin_lock_set_owner>
			ready_thread(thread);
   24b42:	4620      	mov	r0, r4
   24b44:	f7ff ff8a 	bl	24a5c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24b48:	480b      	ldr	r0, [pc, #44]	; (24b78 <z_ready_thread+0x74>)
   24b4a:	f7fe f953 	bl	22df4 <z_spin_unlock_valid>
   24b4e:	b968      	cbnz	r0, 24b6c <z_ready_thread+0x68>
   24b50:	23ac      	movs	r3, #172	; 0xac
   24b52:	4a0a      	ldr	r2, [pc, #40]	; (24b7c <z_ready_thread+0x78>)
   24b54:	490d      	ldr	r1, [pc, #52]	; (24b8c <z_ready_thread+0x88>)
   24b56:	480b      	ldr	r0, [pc, #44]	; (24b84 <z_ready_thread+0x80>)
   24b58:	f001 fde0 	bl	2671c <printk>
   24b5c:	4906      	ldr	r1, [pc, #24]	; (24b78 <z_ready_thread+0x74>)
   24b5e:	480c      	ldr	r0, [pc, #48]	; (24b90 <z_ready_thread+0x8c>)
   24b60:	f001 fddc 	bl	2671c <printk>
   24b64:	21ac      	movs	r1, #172	; 0xac
   24b66:	4805      	ldr	r0, [pc, #20]	; (24b7c <z_ready_thread+0x78>)
   24b68:	f002 f87d 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   24b6c:	f385 8811 	msr	BASEPRI, r5
   24b70:	f3bf 8f6f 	isb	sy
}
   24b74:	bd38      	pop	{r3, r4, r5, pc}
   24b76:	bf00      	nop
   24b78:	20009bf0 	.word	0x20009bf0
   24b7c:	0002d072 	.word	0x0002d072
   24b80:	0002d0c4 	.word	0x0002d0c4
   24b84:	0002cfb2 	.word	0x0002cfb2
   24b88:	0002d0d9 	.word	0x0002d0d9
   24b8c:	0002d098 	.word	0x0002d098
   24b90:	0002d0af 	.word	0x0002d0af

00024b94 <z_sched_start>:
{
   24b94:	b538      	push	{r3, r4, r5, lr}
   24b96:	4604      	mov	r4, r0
	__asm__ volatile(
   24b98:	f04f 0320 	mov.w	r3, #32
   24b9c:	f3ef 8511 	mrs	r5, BASEPRI
   24ba0:	f383 8811 	msr	BASEPRI, r3
   24ba4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24ba8:	481d      	ldr	r0, [pc, #116]	; (24c20 <z_sched_start+0x8c>)
   24baa:	f7fe f915 	bl	22dd8 <z_spin_lock_valid>
   24bae:	b968      	cbnz	r0, 24bcc <z_sched_start+0x38>
   24bb0:	2381      	movs	r3, #129	; 0x81
   24bb2:	4a1c      	ldr	r2, [pc, #112]	; (24c24 <z_sched_start+0x90>)
   24bb4:	491c      	ldr	r1, [pc, #112]	; (24c28 <z_sched_start+0x94>)
   24bb6:	481d      	ldr	r0, [pc, #116]	; (24c2c <z_sched_start+0x98>)
   24bb8:	f001 fdb0 	bl	2671c <printk>
   24bbc:	4918      	ldr	r1, [pc, #96]	; (24c20 <z_sched_start+0x8c>)
   24bbe:	481c      	ldr	r0, [pc, #112]	; (24c30 <z_sched_start+0x9c>)
   24bc0:	f001 fdac 	bl	2671c <printk>
   24bc4:	2181      	movs	r1, #129	; 0x81
   24bc6:	4817      	ldr	r0, [pc, #92]	; (24c24 <z_sched_start+0x90>)
   24bc8:	f002 f84d 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   24bcc:	4814      	ldr	r0, [pc, #80]	; (24c20 <z_sched_start+0x8c>)
   24bce:	f7fe f91f 	bl	22e10 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   24bd2:	7b63      	ldrb	r3, [r4, #13]
   24bd4:	075a      	lsls	r2, r3, #29
   24bd6:	d416      	bmi.n	24c06 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24bd8:	4811      	ldr	r0, [pc, #68]	; (24c20 <z_sched_start+0x8c>)
   24bda:	f7fe f90b 	bl	22df4 <z_spin_unlock_valid>
   24bde:	b968      	cbnz	r0, 24bfc <z_sched_start+0x68>
   24be0:	23ac      	movs	r3, #172	; 0xac
   24be2:	4a10      	ldr	r2, [pc, #64]	; (24c24 <z_sched_start+0x90>)
   24be4:	4913      	ldr	r1, [pc, #76]	; (24c34 <z_sched_start+0xa0>)
   24be6:	4811      	ldr	r0, [pc, #68]	; (24c2c <z_sched_start+0x98>)
   24be8:	f001 fd98 	bl	2671c <printk>
   24bec:	490c      	ldr	r1, [pc, #48]	; (24c20 <z_sched_start+0x8c>)
   24bee:	4812      	ldr	r0, [pc, #72]	; (24c38 <z_sched_start+0xa4>)
   24bf0:	f001 fd94 	bl	2671c <printk>
   24bf4:	21ac      	movs	r1, #172	; 0xac
   24bf6:	480b      	ldr	r0, [pc, #44]	; (24c24 <z_sched_start+0x90>)
   24bf8:	f002 f835 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   24bfc:	f385 8811 	msr	BASEPRI, r5
   24c00:	f3bf 8f6f 	isb	sy
}
   24c04:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   24c06:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   24c0a:	4620      	mov	r0, r4
   24c0c:	7363      	strb	r3, [r4, #13]
   24c0e:	f7ff ff25 	bl	24a5c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   24c12:	4629      	mov	r1, r5
}
   24c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   24c18:	4801      	ldr	r0, [pc, #4]	; (24c20 <z_sched_start+0x8c>)
   24c1a:	f7ff bafb 	b.w	24214 <z_reschedule>
   24c1e:	bf00      	nop
   24c20:	20009bf0 	.word	0x20009bf0
   24c24:	0002d072 	.word	0x0002d072
   24c28:	0002d0c4 	.word	0x0002d0c4
   24c2c:	0002cfb2 	.word	0x0002cfb2
   24c30:	0002d0d9 	.word	0x0002d0d9
   24c34:	0002d098 	.word	0x0002d098
   24c38:	0002d0af 	.word	0x0002d0af

00024c3c <z_thread_timeout>:
{
   24c3c:	b570      	push	{r4, r5, r6, lr}
   24c3e:	4604      	mov	r4, r0
	__asm__ volatile(
   24c40:	f04f 0320 	mov.w	r3, #32
   24c44:	f3ef 8611 	mrs	r6, BASEPRI
   24c48:	f383 8811 	msr	BASEPRI, r3
   24c4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24c50:	4820      	ldr	r0, [pc, #128]	; (24cd4 <z_thread_timeout+0x98>)
   24c52:	f7fe f8c1 	bl	22dd8 <z_spin_lock_valid>
   24c56:	b968      	cbnz	r0, 24c74 <z_thread_timeout+0x38>
   24c58:	2381      	movs	r3, #129	; 0x81
   24c5a:	4a1f      	ldr	r2, [pc, #124]	; (24cd8 <z_thread_timeout+0x9c>)
   24c5c:	491f      	ldr	r1, [pc, #124]	; (24cdc <z_thread_timeout+0xa0>)
   24c5e:	4820      	ldr	r0, [pc, #128]	; (24ce0 <z_thread_timeout+0xa4>)
   24c60:	f001 fd5c 	bl	2671c <printk>
   24c64:	491b      	ldr	r1, [pc, #108]	; (24cd4 <z_thread_timeout+0x98>)
   24c66:	481f      	ldr	r0, [pc, #124]	; (24ce4 <z_thread_timeout+0xa8>)
   24c68:	f001 fd58 	bl	2671c <printk>
   24c6c:	2181      	movs	r1, #129	; 0x81
   24c6e:	481a      	ldr	r0, [pc, #104]	; (24cd8 <z_thread_timeout+0x9c>)
   24c70:	f001 fff9 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   24c74:	4817      	ldr	r0, [pc, #92]	; (24cd4 <z_thread_timeout+0x98>)
   24c76:	f7fe f8cb 	bl	22e10 <z_spin_lock_set_owner>
		if (!killed) {
   24c7a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   24c7e:	f013 0f28 	tst.w	r3, #40	; 0x28
   24c82:	d110      	bne.n	24ca6 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   24c84:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   24c88:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   24c8c:	b113      	cbz	r3, 24c94 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   24c8e:	4628      	mov	r0, r5
   24c90:	f7ff fb9a 	bl	243c8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   24c94:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   24c98:	4628      	mov	r0, r5
   24c9a:	f023 0314 	bic.w	r3, r3, #20
   24c9e:	f804 3c0b 	strb.w	r3, [r4, #-11]
   24ca2:	f7ff fedb 	bl	24a5c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ca6:	480b      	ldr	r0, [pc, #44]	; (24cd4 <z_thread_timeout+0x98>)
   24ca8:	f7fe f8a4 	bl	22df4 <z_spin_unlock_valid>
   24cac:	b968      	cbnz	r0, 24cca <z_thread_timeout+0x8e>
   24cae:	23ac      	movs	r3, #172	; 0xac
   24cb0:	4a09      	ldr	r2, [pc, #36]	; (24cd8 <z_thread_timeout+0x9c>)
   24cb2:	490d      	ldr	r1, [pc, #52]	; (24ce8 <z_thread_timeout+0xac>)
   24cb4:	480a      	ldr	r0, [pc, #40]	; (24ce0 <z_thread_timeout+0xa4>)
   24cb6:	f001 fd31 	bl	2671c <printk>
   24cba:	4906      	ldr	r1, [pc, #24]	; (24cd4 <z_thread_timeout+0x98>)
   24cbc:	480b      	ldr	r0, [pc, #44]	; (24cec <z_thread_timeout+0xb0>)
   24cbe:	f001 fd2d 	bl	2671c <printk>
   24cc2:	21ac      	movs	r1, #172	; 0xac
   24cc4:	4804      	ldr	r0, [pc, #16]	; (24cd8 <z_thread_timeout+0x9c>)
   24cc6:	f001 ffce 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   24cca:	f386 8811 	msr	BASEPRI, r6
   24cce:	f3bf 8f6f 	isb	sy
}
   24cd2:	bd70      	pop	{r4, r5, r6, pc}
   24cd4:	20009bf0 	.word	0x20009bf0
   24cd8:	0002d072 	.word	0x0002d072
   24cdc:	0002d0c4 	.word	0x0002d0c4
   24ce0:	0002cfb2 	.word	0x0002cfb2
   24ce4:	0002d0d9 	.word	0x0002d0d9
   24ce8:	0002d098 	.word	0x0002d098
   24cec:	0002d0af 	.word	0x0002d0af

00024cf0 <z_set_prio>:
{
   24cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24cf2:	4604      	mov	r4, r0
   24cf4:	460e      	mov	r6, r1
	__asm__ volatile(
   24cf6:	f04f 0320 	mov.w	r3, #32
   24cfa:	f3ef 8711 	mrs	r7, BASEPRI
   24cfe:	f383 8811 	msr	BASEPRI, r3
   24d02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24d06:	483d      	ldr	r0, [pc, #244]	; (24dfc <z_set_prio+0x10c>)
   24d08:	f7fe f866 	bl	22dd8 <z_spin_lock_valid>
   24d0c:	b968      	cbnz	r0, 24d2a <z_set_prio+0x3a>
   24d0e:	2381      	movs	r3, #129	; 0x81
   24d10:	4a3b      	ldr	r2, [pc, #236]	; (24e00 <z_set_prio+0x110>)
   24d12:	493c      	ldr	r1, [pc, #240]	; (24e04 <z_set_prio+0x114>)
   24d14:	483c      	ldr	r0, [pc, #240]	; (24e08 <z_set_prio+0x118>)
   24d16:	f001 fd01 	bl	2671c <printk>
   24d1a:	4938      	ldr	r1, [pc, #224]	; (24dfc <z_set_prio+0x10c>)
   24d1c:	483b      	ldr	r0, [pc, #236]	; (24e0c <z_set_prio+0x11c>)
   24d1e:	f001 fcfd 	bl	2671c <printk>
   24d22:	2181      	movs	r1, #129	; 0x81
   24d24:	4836      	ldr	r0, [pc, #216]	; (24e00 <z_set_prio+0x110>)
   24d26:	f001 ff9e 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   24d2a:	4834      	ldr	r0, [pc, #208]	; (24dfc <z_set_prio+0x10c>)
   24d2c:	f7fe f870 	bl	22e10 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24d30:	7b63      	ldrb	r3, [r4, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   24d32:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24d34:	06da      	lsls	r2, r3, #27
   24d36:	d15e      	bne.n	24df6 <z_set_prio+0x106>
   24d38:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   24d3a:	2d00      	cmp	r5, #0
   24d3c:	d15b      	bne.n	24df6 <z_set_prio+0x106>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   24d42:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   24d44:	4621      	mov	r1, r4
   24d46:	4832      	ldr	r0, [pc, #200]	; (24e10 <z_set_prio+0x120>)
   24d48:	f7ff fb1c 	bl	24384 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   24d4c:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   24d4e:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   24d50:	f063 037f 	orn	r3, r3, #127	; 0x7f
   24d54:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24d56:	4b2f      	ldr	r3, [pc, #188]	; (24e14 <z_set_prio+0x124>)
   24d58:	429c      	cmp	r4, r3
   24d5a:	d10b      	bne.n	24d74 <z_set_prio+0x84>
   24d5c:	492e      	ldr	r1, [pc, #184]	; (24e18 <z_set_prio+0x128>)
   24d5e:	482a      	ldr	r0, [pc, #168]	; (24e08 <z_set_prio+0x118>)
   24d60:	f240 33b5 	movw	r3, #949	; 0x3b5
   24d64:	4a2d      	ldr	r2, [pc, #180]	; (24e1c <z_set_prio+0x12c>)
   24d66:	f001 fcd9 	bl	2671c <printk>
   24d6a:	f240 31b5 	movw	r1, #949	; 0x3b5
   24d6e:	482b      	ldr	r0, [pc, #172]	; (24e1c <z_set_prio+0x12c>)
   24d70:	f001 ff79 	bl	26c66 <assert_post_action>
	return list->head == list;
   24d74:	492a      	ldr	r1, [pc, #168]	; (24e20 <z_set_prio+0x130>)
   24d76:	460b      	mov	r3, r1
   24d78:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24d7c:	4298      	cmp	r0, r3
   24d7e:	bf18      	it	ne
   24d80:	4605      	movne	r5, r0
   24d82:	2d00      	cmp	r5, #0
   24d84:	461a      	mov	r2, r3
   24d86:	462b      	mov	r3, r5
   24d88:	bf38      	it	cc
   24d8a:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   24d8c:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24d8e:	b36b      	cbz	r3, 24dec <z_set_prio+0xfc>
	int32_t b1 = thread_1->base.prio;
   24d90:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   24d94:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   24d98:	4286      	cmp	r6, r0
   24d9a:	d023      	beq.n	24de4 <z_set_prio+0xf4>
		return b2 - b1;
   24d9c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   24d9e:	2800      	cmp	r0, #0
   24da0:	dd20      	ble.n	24de4 <z_set_prio+0xf4>
	sys_dnode_t *const prev = successor->prev;
   24da2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24da4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   24da8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   24daa:	605c      	str	r4, [r3, #4]
			update_cache(1);
   24dac:	2001      	movs	r0, #1
   24dae:	f7ff fb79 	bl	244a4 <update_cache>
   24db2:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24db4:	4811      	ldr	r0, [pc, #68]	; (24dfc <z_set_prio+0x10c>)
   24db6:	f7fe f81d 	bl	22df4 <z_spin_unlock_valid>
   24dba:	b968      	cbnz	r0, 24dd8 <z_set_prio+0xe8>
   24dbc:	23ac      	movs	r3, #172	; 0xac
   24dbe:	4a10      	ldr	r2, [pc, #64]	; (24e00 <z_set_prio+0x110>)
   24dc0:	4918      	ldr	r1, [pc, #96]	; (24e24 <z_set_prio+0x134>)
   24dc2:	4811      	ldr	r0, [pc, #68]	; (24e08 <z_set_prio+0x118>)
   24dc4:	f001 fcaa 	bl	2671c <printk>
   24dc8:	490c      	ldr	r1, [pc, #48]	; (24dfc <z_set_prio+0x10c>)
   24dca:	4817      	ldr	r0, [pc, #92]	; (24e28 <z_set_prio+0x138>)
   24dcc:	f001 fca6 	bl	2671c <printk>
   24dd0:	21ac      	movs	r1, #172	; 0xac
   24dd2:	480b      	ldr	r0, [pc, #44]	; (24e00 <z_set_prio+0x110>)
   24dd4:	f001 ff47 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   24dd8:	f387 8811 	msr	BASEPRI, r7
   24ddc:	f3bf 8f6f 	isb	sy
}
   24de0:	4620      	mov	r0, r4
   24de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   24de4:	42ab      	cmp	r3, r5
   24de6:	d001      	beq.n	24dec <z_set_prio+0xfc>
   24de8:	681b      	ldr	r3, [r3, #0]
   24dea:	e7d0      	b.n	24d8e <z_set_prio+0x9e>
	node->prev = tail;
   24dec:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   24df0:	602c      	str	r4, [r5, #0]
	list->tail = node;
   24df2:	62cc      	str	r4, [r1, #44]	; 0x2c
}
   24df4:	e7da      	b.n	24dac <z_set_prio+0xbc>
			thread->base.prio = prio;
   24df6:	73a6      	strb	r6, [r4, #14]
   24df8:	2400      	movs	r4, #0
   24dfa:	e7db      	b.n	24db4 <z_set_prio+0xc4>
   24dfc:	20009bf0 	.word	0x20009bf0
   24e00:	0002d072 	.word	0x0002d072
   24e04:	0002d0c4 	.word	0x0002d0c4
   24e08:	0002cfb2 	.word	0x0002cfb2
   24e0c:	0002d0d9 	.word	0x0002d0d9
   24e10:	20009bd0 	.word	0x20009bd0
   24e14:	20009070 	.word	0x20009070
   24e18:	00031488 	.word	0x00031488
   24e1c:	00031466 	.word	0x00031466
   24e20:	20009ba8 	.word	0x20009ba8
   24e24:	0002d098 	.word	0x0002d098
   24e28:	0002d0af 	.word	0x0002d0af

00024e2c <z_unpend1_no_timeout>:
{
   24e2c:	b538      	push	{r3, r4, r5, lr}
   24e2e:	4604      	mov	r4, r0
	__asm__ volatile(
   24e30:	f04f 0320 	mov.w	r3, #32
   24e34:	f3ef 8511 	mrs	r5, BASEPRI
   24e38:	f383 8811 	msr	BASEPRI, r3
   24e3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24e40:	4819      	ldr	r0, [pc, #100]	; (24ea8 <z_unpend1_no_timeout+0x7c>)
   24e42:	f7fd ffc9 	bl	22dd8 <z_spin_lock_valid>
   24e46:	b968      	cbnz	r0, 24e64 <z_unpend1_no_timeout+0x38>
   24e48:	2381      	movs	r3, #129	; 0x81
   24e4a:	4a18      	ldr	r2, [pc, #96]	; (24eac <z_unpend1_no_timeout+0x80>)
   24e4c:	4918      	ldr	r1, [pc, #96]	; (24eb0 <z_unpend1_no_timeout+0x84>)
   24e4e:	4819      	ldr	r0, [pc, #100]	; (24eb4 <z_unpend1_no_timeout+0x88>)
   24e50:	f001 fc64 	bl	2671c <printk>
   24e54:	4914      	ldr	r1, [pc, #80]	; (24ea8 <z_unpend1_no_timeout+0x7c>)
   24e56:	4818      	ldr	r0, [pc, #96]	; (24eb8 <z_unpend1_no_timeout+0x8c>)
   24e58:	f001 fc60 	bl	2671c <printk>
   24e5c:	2181      	movs	r1, #129	; 0x81
   24e5e:	4813      	ldr	r0, [pc, #76]	; (24eac <z_unpend1_no_timeout+0x80>)
   24e60:	f001 ff01 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   24e64:	4810      	ldr	r0, [pc, #64]	; (24ea8 <z_unpend1_no_timeout+0x7c>)
   24e66:	f7fd ffd3 	bl	22e10 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   24e6a:	4620      	mov	r0, r4
   24e6c:	f006 fe32 	bl	2bad4 <z_priq_dumb_best>
		if (thread != NULL) {
   24e70:	4604      	mov	r4, r0
   24e72:	b108      	cbz	r0, 24e78 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   24e74:	f7ff faa8 	bl	243c8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24e78:	480b      	ldr	r0, [pc, #44]	; (24ea8 <z_unpend1_no_timeout+0x7c>)
   24e7a:	f7fd ffbb 	bl	22df4 <z_spin_unlock_valid>
   24e7e:	b968      	cbnz	r0, 24e9c <z_unpend1_no_timeout+0x70>
   24e80:	23ac      	movs	r3, #172	; 0xac
   24e82:	4a0a      	ldr	r2, [pc, #40]	; (24eac <z_unpend1_no_timeout+0x80>)
   24e84:	490d      	ldr	r1, [pc, #52]	; (24ebc <z_unpend1_no_timeout+0x90>)
   24e86:	480b      	ldr	r0, [pc, #44]	; (24eb4 <z_unpend1_no_timeout+0x88>)
   24e88:	f001 fc48 	bl	2671c <printk>
   24e8c:	4906      	ldr	r1, [pc, #24]	; (24ea8 <z_unpend1_no_timeout+0x7c>)
   24e8e:	480c      	ldr	r0, [pc, #48]	; (24ec0 <z_unpend1_no_timeout+0x94>)
   24e90:	f001 fc44 	bl	2671c <printk>
   24e94:	21ac      	movs	r1, #172	; 0xac
   24e96:	4805      	ldr	r0, [pc, #20]	; (24eac <z_unpend1_no_timeout+0x80>)
   24e98:	f001 fee5 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   24e9c:	f385 8811 	msr	BASEPRI, r5
   24ea0:	f3bf 8f6f 	isb	sy
}
   24ea4:	4620      	mov	r0, r4
   24ea6:	bd38      	pop	{r3, r4, r5, pc}
   24ea8:	20009bf0 	.word	0x20009bf0
   24eac:	0002d072 	.word	0x0002d072
   24eb0:	0002d0c4 	.word	0x0002d0c4
   24eb4:	0002cfb2 	.word	0x0002cfb2
   24eb8:	0002d0d9 	.word	0x0002d0d9
   24ebc:	0002d098 	.word	0x0002d098
   24ec0:	0002d0af 	.word	0x0002d0af

00024ec4 <z_unpend_first_thread>:
{
   24ec4:	b538      	push	{r3, r4, r5, lr}
   24ec6:	4604      	mov	r4, r0
	__asm__ volatile(
   24ec8:	f04f 0320 	mov.w	r3, #32
   24ecc:	f3ef 8511 	mrs	r5, BASEPRI
   24ed0:	f383 8811 	msr	BASEPRI, r3
   24ed4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24ed8:	481b      	ldr	r0, [pc, #108]	; (24f48 <z_unpend_first_thread+0x84>)
   24eda:	f7fd ff7d 	bl	22dd8 <z_spin_lock_valid>
   24ede:	b968      	cbnz	r0, 24efc <z_unpend_first_thread+0x38>
   24ee0:	2381      	movs	r3, #129	; 0x81
   24ee2:	4a1a      	ldr	r2, [pc, #104]	; (24f4c <z_unpend_first_thread+0x88>)
   24ee4:	491a      	ldr	r1, [pc, #104]	; (24f50 <z_unpend_first_thread+0x8c>)
   24ee6:	481b      	ldr	r0, [pc, #108]	; (24f54 <z_unpend_first_thread+0x90>)
   24ee8:	f001 fc18 	bl	2671c <printk>
   24eec:	4916      	ldr	r1, [pc, #88]	; (24f48 <z_unpend_first_thread+0x84>)
   24eee:	481a      	ldr	r0, [pc, #104]	; (24f58 <z_unpend_first_thread+0x94>)
   24ef0:	f001 fc14 	bl	2671c <printk>
   24ef4:	2181      	movs	r1, #129	; 0x81
   24ef6:	4815      	ldr	r0, [pc, #84]	; (24f4c <z_unpend_first_thread+0x88>)
   24ef8:	f001 feb5 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   24efc:	4812      	ldr	r0, [pc, #72]	; (24f48 <z_unpend_first_thread+0x84>)
   24efe:	f7fd ff87 	bl	22e10 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   24f02:	4620      	mov	r0, r4
   24f04:	f006 fde6 	bl	2bad4 <z_priq_dumb_best>
		if (thread != NULL) {
   24f08:	4604      	mov	r4, r0
   24f0a:	b128      	cbz	r0, 24f18 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   24f0c:	f7ff fa5c 	bl	243c8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   24f10:	f104 0018 	add.w	r0, r4, #24
   24f14:	f000 fc2c 	bl	25770 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24f18:	480b      	ldr	r0, [pc, #44]	; (24f48 <z_unpend_first_thread+0x84>)
   24f1a:	f7fd ff6b 	bl	22df4 <z_spin_unlock_valid>
   24f1e:	b968      	cbnz	r0, 24f3c <z_unpend_first_thread+0x78>
   24f20:	23ac      	movs	r3, #172	; 0xac
   24f22:	4a0a      	ldr	r2, [pc, #40]	; (24f4c <z_unpend_first_thread+0x88>)
   24f24:	490d      	ldr	r1, [pc, #52]	; (24f5c <z_unpend_first_thread+0x98>)
   24f26:	480b      	ldr	r0, [pc, #44]	; (24f54 <z_unpend_first_thread+0x90>)
   24f28:	f001 fbf8 	bl	2671c <printk>
   24f2c:	4906      	ldr	r1, [pc, #24]	; (24f48 <z_unpend_first_thread+0x84>)
   24f2e:	480c      	ldr	r0, [pc, #48]	; (24f60 <z_unpend_first_thread+0x9c>)
   24f30:	f001 fbf4 	bl	2671c <printk>
   24f34:	21ac      	movs	r1, #172	; 0xac
   24f36:	4805      	ldr	r0, [pc, #20]	; (24f4c <z_unpend_first_thread+0x88>)
   24f38:	f001 fe95 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   24f3c:	f385 8811 	msr	BASEPRI, r5
   24f40:	f3bf 8f6f 	isb	sy
}
   24f44:	4620      	mov	r0, r4
   24f46:	bd38      	pop	{r3, r4, r5, pc}
   24f48:	20009bf0 	.word	0x20009bf0
   24f4c:	0002d072 	.word	0x0002d072
   24f50:	0002d0c4 	.word	0x0002d0c4
   24f54:	0002cfb2 	.word	0x0002cfb2
   24f58:	0002d0d9 	.word	0x0002d0d9
   24f5c:	0002d098 	.word	0x0002d098
   24f60:	0002d0af 	.word	0x0002d0af

00024f64 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   24f64:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   24f66:	4b04      	ldr	r3, [pc, #16]	; (24f78 <z_sched_init+0x14>)
   24f68:	4608      	mov	r0, r1
   24f6a:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   24f6e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   24f72:	f7ff b8a1 	b.w	240b8 <k_sched_time_slice_set>
   24f76:	bf00      	nop
   24f78:	20009ba8 	.word	0x20009ba8

00024f7c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   24f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24f7e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   24f82:	b173      	cbz	r3, 24fa2 <z_impl_k_yield+0x26>
   24f84:	4947      	ldr	r1, [pc, #284]	; (250a4 <z_impl_k_yield+0x128>)
   24f86:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   24f8a:	4a47      	ldr	r2, [pc, #284]	; (250a8 <z_impl_k_yield+0x12c>)
   24f8c:	4847      	ldr	r0, [pc, #284]	; (250ac <z_impl_k_yield+0x130>)
   24f8e:	f001 fbc5 	bl	2671c <printk>
   24f92:	4847      	ldr	r0, [pc, #284]	; (250b0 <z_impl_k_yield+0x134>)
   24f94:	f001 fbc2 	bl	2671c <printk>
   24f98:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
   24f9c:	4842      	ldr	r0, [pc, #264]	; (250a8 <z_impl_k_yield+0x12c>)
   24f9e:	f001 fe62 	bl	26c66 <assert_post_action>

	SYS_PORT_TRACING_FUNC(k_thread, yield);

	if (!z_is_idle_thread_object(_current)) {
   24fa2:	4d44      	ldr	r5, [pc, #272]	; (250b4 <z_impl_k_yield+0x138>)
   24fa4:	4e44      	ldr	r6, [pc, #272]	; (250b8 <z_impl_k_yield+0x13c>)
   24fa6:	68ab      	ldr	r3, [r5, #8]
   24fa8:	42b3      	cmp	r3, r6
   24faa:	d072      	beq.n	25092 <z_impl_k_yield+0x116>
	__asm__ volatile(
   24fac:	f04f 0320 	mov.w	r3, #32
   24fb0:	f3ef 8711 	mrs	r7, BASEPRI
   24fb4:	f383 8811 	msr	BASEPRI, r3
   24fb8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24fbc:	483f      	ldr	r0, [pc, #252]	; (250bc <z_impl_k_yield+0x140>)
   24fbe:	f7fd ff0b 	bl	22dd8 <z_spin_lock_valid>
   24fc2:	b968      	cbnz	r0, 24fe0 <z_impl_k_yield+0x64>
   24fc4:	2381      	movs	r3, #129	; 0x81
   24fc6:	4a3e      	ldr	r2, [pc, #248]	; (250c0 <z_impl_k_yield+0x144>)
   24fc8:	493e      	ldr	r1, [pc, #248]	; (250c4 <z_impl_k_yield+0x148>)
   24fca:	4838      	ldr	r0, [pc, #224]	; (250ac <z_impl_k_yield+0x130>)
   24fcc:	f001 fba6 	bl	2671c <printk>
   24fd0:	493a      	ldr	r1, [pc, #232]	; (250bc <z_impl_k_yield+0x140>)
   24fd2:	483d      	ldr	r0, [pc, #244]	; (250c8 <z_impl_k_yield+0x14c>)
   24fd4:	f001 fba2 	bl	2671c <printk>
   24fd8:	2181      	movs	r1, #129	; 0x81
   24fda:	4839      	ldr	r0, [pc, #228]	; (250c0 <z_impl_k_yield+0x144>)
   24fdc:	f001 fe43 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   24fe0:	4836      	ldr	r0, [pc, #216]	; (250bc <z_impl_k_yield+0x140>)
   24fe2:	f7fd ff15 	bl	22e10 <z_spin_lock_set_owner>
		k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

		if (!IS_ENABLED(CONFIG_SMP) ||
			z_is_thread_queued(_current)) {
			dequeue_thread(&_kernel.ready_q.runq,
   24fe6:	68a9      	ldr	r1, [r5, #8]
		_priq_run_remove(pq, thread);
   24fe8:	4838      	ldr	r0, [pc, #224]	; (250cc <z_impl_k_yield+0x150>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24fea:	7b4b      	ldrb	r3, [r1, #13]
   24fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   24ff0:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   24ff2:	f7ff f9c7 	bl	24384 <z_priq_dumb_remove>
					_current);
		}
		queue_thread(&_kernel.ready_q.runq, _current);
   24ff6:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   24ff8:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24ffa:	42b4      	cmp	r4, r6
	thread->base.thread_state |= _THREAD_QUEUED;
   24ffc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   25000:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25002:	d10b      	bne.n	2501c <z_impl_k_yield+0xa0>
   25004:	4932      	ldr	r1, [pc, #200]	; (250d0 <z_impl_k_yield+0x154>)
   25006:	4829      	ldr	r0, [pc, #164]	; (250ac <z_impl_k_yield+0x130>)
   25008:	f240 33b5 	movw	r3, #949	; 0x3b5
   2500c:	4a26      	ldr	r2, [pc, #152]	; (250a8 <z_impl_k_yield+0x12c>)
   2500e:	f001 fb85 	bl	2671c <printk>
   25012:	f240 31b5 	movw	r1, #949	; 0x3b5
   25016:	4824      	ldr	r0, [pc, #144]	; (250a8 <z_impl_k_yield+0x12c>)
   25018:	f001 fe25 	bl	26c66 <assert_post_action>
	return list->head == list;
   2501c:	6aab      	ldr	r3, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2501e:	482b      	ldr	r0, [pc, #172]	; (250cc <z_impl_k_yield+0x150>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   25020:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25022:	4283      	cmp	r3, r0
   25024:	bf08      	it	eq
   25026:	2300      	moveq	r3, #0
   25028:	2b00      	cmp	r3, #0
   2502a:	bf38      	it	cc
   2502c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2502e:	b35b      	cbz	r3, 25088 <z_impl_k_yield+0x10c>
	int32_t b1 = thread_1->base.prio;
   25030:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   25034:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   25038:	4296      	cmp	r6, r2
   2503a:	d021      	beq.n	25080 <z_impl_k_yield+0x104>
		return b2 - b1;
   2503c:	1b92      	subs	r2, r2, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2503e:	2a00      	cmp	r2, #0
   25040:	dd1e      	ble.n	25080 <z_impl_k_yield+0x104>
	sys_dnode_t *const prev = successor->prev;
   25042:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   25044:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   25048:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2504a:	605c      	str	r4, [r3, #4]
		update_cache(1);
   2504c:	2001      	movs	r0, #1
   2504e:	f7ff fa29 	bl	244a4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25052:	481a      	ldr	r0, [pc, #104]	; (250bc <z_impl_k_yield+0x140>)
   25054:	f7fd fece 	bl	22df4 <z_spin_unlock_valid>
   25058:	b968      	cbnz	r0, 25076 <z_impl_k_yield+0xfa>
   2505a:	23c3      	movs	r3, #195	; 0xc3
   2505c:	4a18      	ldr	r2, [pc, #96]	; (250c0 <z_impl_k_yield+0x144>)
   2505e:	491d      	ldr	r1, [pc, #116]	; (250d4 <z_impl_k_yield+0x158>)
   25060:	4812      	ldr	r0, [pc, #72]	; (250ac <z_impl_k_yield+0x130>)
   25062:	f001 fb5b 	bl	2671c <printk>
   25066:	4915      	ldr	r1, [pc, #84]	; (250bc <z_impl_k_yield+0x140>)
   25068:	481b      	ldr	r0, [pc, #108]	; (250d8 <z_impl_k_yield+0x15c>)
   2506a:	f001 fb57 	bl	2671c <printk>
   2506e:	21c3      	movs	r1, #195	; 0xc3
   25070:	4813      	ldr	r0, [pc, #76]	; (250c0 <z_impl_k_yield+0x144>)
   25072:	f001 fdf8 	bl	26c66 <assert_post_action>
   25076:	4638      	mov	r0, r7
		z_swap(&sched_spinlock, key);
	} else {
		z_swap_unlocked();
	}
}
   25078:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2507c:	f7f1 b822 	b.w	160c4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   25080:	428b      	cmp	r3, r1
   25082:	d001      	beq.n	25088 <z_impl_k_yield+0x10c>
   25084:	681b      	ldr	r3, [r3, #0]
   25086:	e7d2      	b.n	2502e <z_impl_k_yield+0xb2>
	node->prev = tail;
   25088:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   2508c:	600c      	str	r4, [r1, #0]
	list->tail = node;
   2508e:	62ec      	str	r4, [r5, #44]	; 0x2c
}
   25090:	e7dc      	b.n	2504c <z_impl_k_yield+0xd0>
   25092:	f04f 0320 	mov.w	r3, #32
   25096:	f3ef 8011 	mrs	r0, BASEPRI
   2509a:	f383 8811 	msr	BASEPRI, r3
   2509e:	f3bf 8f6f 	isb	sy
   250a2:	e7e9      	b.n	25078 <z_impl_k_yield+0xfc>
   250a4:	000311e7 	.word	0x000311e7
   250a8:	00031466 	.word	0x00031466
   250ac:	0002cfb2 	.word	0x0002cfb2
   250b0:	00030725 	.word	0x00030725
   250b4:	20009ba8 	.word	0x20009ba8
   250b8:	20009070 	.word	0x20009070
   250bc:	20009bf0 	.word	0x20009bf0
   250c0:	0002d072 	.word	0x0002d072
   250c4:	0002d0c4 	.word	0x0002d0c4
   250c8:	0002d0d9 	.word	0x0002d0d9
   250cc:	20009bd0 	.word	0x20009bd0
   250d0:	00031488 	.word	0x00031488
   250d4:	0002d098 	.word	0x0002d098
   250d8:	0002d0af 	.word	0x0002d0af

000250dc <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   250dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   250e0:	4606      	mov	r6, r0
   250e2:	460f      	mov	r7, r1
   250e4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   250e8:	b173      	cbz	r3, 25108 <z_tick_sleep+0x2c>
   250ea:	493e      	ldr	r1, [pc, #248]	; (251e4 <z_tick_sleep+0x108>)
   250ec:	f240 43d1 	movw	r3, #1233	; 0x4d1
   250f0:	4a3d      	ldr	r2, [pc, #244]	; (251e8 <z_tick_sleep+0x10c>)
   250f2:	483e      	ldr	r0, [pc, #248]	; (251ec <z_tick_sleep+0x110>)
   250f4:	f001 fb12 	bl	2671c <printk>
   250f8:	483d      	ldr	r0, [pc, #244]	; (251f0 <z_tick_sleep+0x114>)
   250fa:	f001 fb0f 	bl	2671c <printk>
   250fe:	f240 41d1 	movw	r1, #1233	; 0x4d1
   25102:	4839      	ldr	r0, [pc, #228]	; (251e8 <z_tick_sleep+0x10c>)
   25104:	f001 fdaf 	bl	26c66 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   25108:	ea56 0307 	orrs.w	r3, r6, r7
   2510c:	d104      	bne.n	25118 <z_tick_sleep+0x3c>
	z_impl_k_yield();
   2510e:	f7ff ff35 	bl	24f7c <z_impl_k_yield>
		k_yield();
		return 0;
   25112:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   25114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   25118:	f006 fcf6 	bl	2bb08 <sys_clock_tick_get_32>
   2511c:	1984      	adds	r4, r0, r6
   2511e:	f04f 0320 	mov.w	r3, #32
   25122:	f3ef 8811 	mrs	r8, BASEPRI
   25126:	f383 8811 	msr	BASEPRI, r3
   2512a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2512e:	4831      	ldr	r0, [pc, #196]	; (251f4 <z_tick_sleep+0x118>)
   25130:	f7fd fe52 	bl	22dd8 <z_spin_lock_valid>
   25134:	b968      	cbnz	r0, 25152 <z_tick_sleep+0x76>
   25136:	2381      	movs	r3, #129	; 0x81
   25138:	4a2f      	ldr	r2, [pc, #188]	; (251f8 <z_tick_sleep+0x11c>)
   2513a:	4930      	ldr	r1, [pc, #192]	; (251fc <z_tick_sleep+0x120>)
   2513c:	482b      	ldr	r0, [pc, #172]	; (251ec <z_tick_sleep+0x110>)
   2513e:	f001 faed 	bl	2671c <printk>
   25142:	492c      	ldr	r1, [pc, #176]	; (251f4 <z_tick_sleep+0x118>)
   25144:	482e      	ldr	r0, [pc, #184]	; (25200 <z_tick_sleep+0x124>)
   25146:	f001 fae9 	bl	2671c <printk>
   2514a:	2181      	movs	r1, #129	; 0x81
   2514c:	482a      	ldr	r0, [pc, #168]	; (251f8 <z_tick_sleep+0x11c>)
   2514e:	f001 fd8a 	bl	26c66 <assert_post_action>
	pending_current = _current;
   25152:	4d2c      	ldr	r5, [pc, #176]	; (25204 <z_tick_sleep+0x128>)
	z_spin_lock_set_owner(l);
   25154:	4827      	ldr	r0, [pc, #156]	; (251f4 <z_tick_sleep+0x118>)
   25156:	f7fd fe5b 	bl	22e10 <z_spin_lock_set_owner>
   2515a:	68a8      	ldr	r0, [r5, #8]
   2515c:	4b2a      	ldr	r3, [pc, #168]	; (25208 <z_tick_sleep+0x12c>)
   2515e:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   25160:	f7ff f9d8 	bl	24514 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   25164:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   25166:	4632      	mov	r2, r6
   25168:	463b      	mov	r3, r7
   2516a:	3018      	adds	r0, #24
   2516c:	4927      	ldr	r1, [pc, #156]	; (2520c <z_tick_sleep+0x130>)
   2516e:	f000 fa2b 	bl	255c8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   25172:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25174:	481f      	ldr	r0, [pc, #124]	; (251f4 <z_tick_sleep+0x118>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   25176:	7b53      	ldrb	r3, [r2, #13]
   25178:	f043 0310 	orr.w	r3, r3, #16
   2517c:	7353      	strb	r3, [r2, #13]
   2517e:	f7fd fe39 	bl	22df4 <z_spin_unlock_valid>
   25182:	b968      	cbnz	r0, 251a0 <z_tick_sleep+0xc4>
   25184:	23c3      	movs	r3, #195	; 0xc3
   25186:	4a1c      	ldr	r2, [pc, #112]	; (251f8 <z_tick_sleep+0x11c>)
   25188:	4921      	ldr	r1, [pc, #132]	; (25210 <z_tick_sleep+0x134>)
   2518a:	4818      	ldr	r0, [pc, #96]	; (251ec <z_tick_sleep+0x110>)
   2518c:	f001 fac6 	bl	2671c <printk>
   25190:	4918      	ldr	r1, [pc, #96]	; (251f4 <z_tick_sleep+0x118>)
   25192:	4820      	ldr	r0, [pc, #128]	; (25214 <z_tick_sleep+0x138>)
   25194:	f001 fac2 	bl	2671c <printk>
   25198:	21c3      	movs	r1, #195	; 0xc3
   2519a:	4817      	ldr	r0, [pc, #92]	; (251f8 <z_tick_sleep+0x11c>)
   2519c:	f001 fd63 	bl	26c66 <assert_post_action>
   251a0:	4640      	mov	r0, r8
   251a2:	f7f0 ff8f 	bl	160c4 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   251a6:	68ab      	ldr	r3, [r5, #8]
   251a8:	7b5b      	ldrb	r3, [r3, #13]
   251aa:	06db      	lsls	r3, r3, #27
   251ac:	d50e      	bpl.n	251cc <z_tick_sleep+0xf0>
   251ae:	491a      	ldr	r1, [pc, #104]	; (25218 <z_tick_sleep+0x13c>)
   251b0:	f240 43ef 	movw	r3, #1263	; 0x4ef
   251b4:	4a0c      	ldr	r2, [pc, #48]	; (251e8 <z_tick_sleep+0x10c>)
   251b6:	480d      	ldr	r0, [pc, #52]	; (251ec <z_tick_sleep+0x110>)
   251b8:	f001 fab0 	bl	2671c <printk>
   251bc:	480c      	ldr	r0, [pc, #48]	; (251f0 <z_tick_sleep+0x114>)
   251be:	f001 faad 	bl	2671c <printk>
   251c2:	f240 41ef 	movw	r1, #1263	; 0x4ef
   251c6:	4808      	ldr	r0, [pc, #32]	; (251e8 <z_tick_sleep+0x10c>)
   251c8:	f001 fd4d 	bl	26c66 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   251cc:	f006 fc9c 	bl	2bb08 <sys_clock_tick_get_32>
   251d0:	1a20      	subs	r0, r4, r0
   251d2:	eb64 0104 	sbc.w	r1, r4, r4
   251d6:	2800      	cmp	r0, #0
   251d8:	f171 0300 	sbcs.w	r3, r1, #0
   251dc:	bfb8      	it	lt
   251de:	2000      	movlt	r0, #0
   251e0:	e798      	b.n	25114 <z_tick_sleep+0x38>
   251e2:	bf00      	nop
   251e4:	000311e7 	.word	0x000311e7
   251e8:	00031466 	.word	0x00031466
   251ec:	0002cfb2 	.word	0x0002cfb2
   251f0:	00030725 	.word	0x00030725
   251f4:	20009bf0 	.word	0x20009bf0
   251f8:	0002d072 	.word	0x0002d072
   251fc:	0002d0c4 	.word	0x0002d0c4
   25200:	0002d0d9 	.word	0x0002d0d9
   25204:	20009ba8 	.word	0x20009ba8
   25208:	20009bec 	.word	0x20009bec
   2520c:	00024c3d 	.word	0x00024c3d
   25210:	0002d098 	.word	0x0002d098
   25214:	0002d0af 	.word	0x0002d0af
   25218:	00031518 	.word	0x00031518

0002521c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   2521c:	b538      	push	{r3, r4, r5, lr}
   2521e:	4604      	mov	r4, r0
   25220:	460d      	mov	r5, r1
   25222:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   25226:	b173      	cbz	r3, 25246 <z_impl_k_sleep+0x2a>
   25228:	4913      	ldr	r1, [pc, #76]	; (25278 <z_impl_k_sleep+0x5c>)
   2522a:	f240 43fe 	movw	r3, #1278	; 0x4fe
   2522e:	4a13      	ldr	r2, [pc, #76]	; (2527c <z_impl_k_sleep+0x60>)
   25230:	4813      	ldr	r0, [pc, #76]	; (25280 <z_impl_k_sleep+0x64>)
   25232:	f001 fa73 	bl	2671c <printk>
   25236:	4813      	ldr	r0, [pc, #76]	; (25284 <z_impl_k_sleep+0x68>)
   25238:	f001 fa70 	bl	2671c <printk>
   2523c:	f240 41fe 	movw	r1, #1278	; 0x4fe
   25240:	480e      	ldr	r0, [pc, #56]	; (2527c <z_impl_k_sleep+0x60>)
   25242:	f001 fd10 	bl	26c66 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25246:	1c6b      	adds	r3, r5, #1
   25248:	bf08      	it	eq
   2524a:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   2524e:	d106      	bne.n	2525e <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   25250:	4b0d      	ldr	r3, [pc, #52]	; (25288 <z_impl_k_sleep+0x6c>)
   25252:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   25254:	f7ff fa4c 	bl	246f0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   25258:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   2525c:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   2525e:	4620      	mov	r0, r4
   25260:	4629      	mov	r1, r5
   25262:	f7ff ff3b 	bl	250dc <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   25266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2526a:	fb80 3403 	smull	r3, r4, r0, r3
   2526e:	0bd8      	lsrs	r0, r3, #15
   25270:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
   25274:	e7f2      	b.n	2525c <z_impl_k_sleep+0x40>
   25276:	bf00      	nop
   25278:	000311e7 	.word	0x000311e7
   2527c:	00031466 	.word	0x00031466
   25280:	0002cfb2 	.word	0x0002cfb2
   25284:	00030725 	.word	0x00030725
   25288:	20009ba8 	.word	0x20009ba8

0002528c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   2528c:	4b01      	ldr	r3, [pc, #4]	; (25294 <z_impl_k_current_get+0x8>)
   2528e:	6898      	ldr	r0, [r3, #8]
   25290:	4770      	bx	lr
   25292:	bf00      	nop
   25294:	20009ba8 	.word	0x20009ba8

00025298 <z_impl_k_is_preempt_thread>:
   25298:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   2529c:	b93b      	cbnz	r3, 252ae <z_impl_k_is_preempt_thread+0x16>
   2529e:	4b05      	ldr	r3, [pc, #20]	; (252b4 <z_impl_k_is_preempt_thread+0x1c>)
   252a0:	689b      	ldr	r3, [r3, #8]
   252a2:	89d8      	ldrh	r0, [r3, #14]
   252a4:	287f      	cmp	r0, #127	; 0x7f
   252a6:	bf8c      	ite	hi
   252a8:	2000      	movhi	r0, #0
   252aa:	2001      	movls	r0, #1
   252ac:	4770      	bx	lr
   252ae:	2000      	movs	r0, #0
}
   252b0:	4770      	bx	lr
   252b2:	bf00      	nop
   252b4:	20009ba8 	.word	0x20009ba8

000252b8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   252b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   252bc:	4604      	mov	r4, r0
   252be:	f04f 0320 	mov.w	r3, #32
   252c2:	f3ef 8611 	mrs	r6, BASEPRI
   252c6:	f383 8811 	msr	BASEPRI, r3
   252ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   252ce:	4848      	ldr	r0, [pc, #288]	; (253f0 <z_thread_abort+0x138>)
   252d0:	f7fd fd82 	bl	22dd8 <z_spin_lock_valid>
   252d4:	b968      	cbnz	r0, 252f2 <z_thread_abort+0x3a>
   252d6:	2381      	movs	r3, #129	; 0x81
   252d8:	4a46      	ldr	r2, [pc, #280]	; (253f4 <z_thread_abort+0x13c>)
   252da:	4947      	ldr	r1, [pc, #284]	; (253f8 <z_thread_abort+0x140>)
   252dc:	4847      	ldr	r0, [pc, #284]	; (253fc <z_thread_abort+0x144>)
   252de:	f001 fa1d 	bl	2671c <printk>
   252e2:	4943      	ldr	r1, [pc, #268]	; (253f0 <z_thread_abort+0x138>)
   252e4:	4846      	ldr	r0, [pc, #280]	; (25400 <z_thread_abort+0x148>)
   252e6:	f001 fa19 	bl	2671c <printk>
   252ea:	2181      	movs	r1, #129	; 0x81
   252ec:	4841      	ldr	r0, [pc, #260]	; (253f4 <z_thread_abort+0x13c>)
   252ee:	f001 fcba 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   252f2:	483f      	ldr	r0, [pc, #252]	; (253f0 <z_thread_abort+0x138>)
   252f4:	f7fd fd8c 	bl	22e10 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   252f8:	7b63      	ldrb	r3, [r4, #13]
   252fa:	071a      	lsls	r2, r3, #28
   252fc:	d517      	bpl.n	2532e <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   252fe:	483c      	ldr	r0, [pc, #240]	; (253f0 <z_thread_abort+0x138>)
   25300:	f7fd fd78 	bl	22df4 <z_spin_unlock_valid>
   25304:	b968      	cbnz	r0, 25322 <z_thread_abort+0x6a>
   25306:	23ac      	movs	r3, #172	; 0xac
   25308:	4a3a      	ldr	r2, [pc, #232]	; (253f4 <z_thread_abort+0x13c>)
   2530a:	493e      	ldr	r1, [pc, #248]	; (25404 <z_thread_abort+0x14c>)
   2530c:	483b      	ldr	r0, [pc, #236]	; (253fc <z_thread_abort+0x144>)
   2530e:	f001 fa05 	bl	2671c <printk>
   25312:	4937      	ldr	r1, [pc, #220]	; (253f0 <z_thread_abort+0x138>)
   25314:	483c      	ldr	r0, [pc, #240]	; (25408 <z_thread_abort+0x150>)
   25316:	f001 fa01 	bl	2671c <printk>
   2531a:	21ac      	movs	r1, #172	; 0xac
   2531c:	4835      	ldr	r0, [pc, #212]	; (253f4 <z_thread_abort+0x13c>)
   2531e:	f001 fca2 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   25322:	f386 8811 	msr	BASEPRI, r6
   25326:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2532a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2532e:	f023 0220 	bic.w	r2, r3, #32
   25332:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   25336:	09d2      	lsrs	r2, r2, #7
   25338:	d142      	bne.n	253c0 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2533a:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   2533c:	68a3      	ldr	r3, [r4, #8]
   2533e:	b113      	cbz	r3, 25346 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
   25340:	4620      	mov	r0, r4
   25342:	f7ff f841 	bl	243c8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   25346:	f104 0018 	add.w	r0, r4, #24
   2534a:	f000 fa11 	bl	25770 <z_abort_timeout>
   2534e:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   25352:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   25356:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25358:	42bd      	cmp	r5, r7
   2535a:	d001      	beq.n	25360 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2535c:	2d00      	cmp	r5, #0
   2535e:	d139      	bne.n	253d4 <z_thread_abort+0x11c>
		update_cache(1);
   25360:	2001      	movs	r0, #1
   25362:	f7ff f89f 	bl	244a4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   25366:	4b29      	ldr	r3, [pc, #164]	; (2540c <z_thread_abort+0x154>)
   25368:	689b      	ldr	r3, [r3, #8]
   2536a:	42a3      	cmp	r3, r4
   2536c:	d1c7      	bne.n	252fe <z_thread_abort+0x46>
   2536e:	f3ef 8305 	mrs	r3, IPSR
   25372:	2b00      	cmp	r3, #0
   25374:	d1c3      	bne.n	252fe <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25376:	481e      	ldr	r0, [pc, #120]	; (253f0 <z_thread_abort+0x138>)
   25378:	f7fd fd3c 	bl	22df4 <z_spin_unlock_valid>
   2537c:	b968      	cbnz	r0, 2539a <z_thread_abort+0xe2>
   2537e:	23c3      	movs	r3, #195	; 0xc3
   25380:	4a1c      	ldr	r2, [pc, #112]	; (253f4 <z_thread_abort+0x13c>)
   25382:	4920      	ldr	r1, [pc, #128]	; (25404 <z_thread_abort+0x14c>)
   25384:	481d      	ldr	r0, [pc, #116]	; (253fc <z_thread_abort+0x144>)
   25386:	f001 f9c9 	bl	2671c <printk>
   2538a:	4919      	ldr	r1, [pc, #100]	; (253f0 <z_thread_abort+0x138>)
   2538c:	481e      	ldr	r0, [pc, #120]	; (25408 <z_thread_abort+0x150>)
   2538e:	f001 f9c5 	bl	2671c <printk>
   25392:	21c3      	movs	r1, #195	; 0xc3
   25394:	4817      	ldr	r0, [pc, #92]	; (253f4 <z_thread_abort+0x13c>)
   25396:	f001 fc66 	bl	26c66 <assert_post_action>
   2539a:	4630      	mov	r0, r6
   2539c:	f7f0 fe92 	bl	160c4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   253a0:	f240 6311 	movw	r3, #1553	; 0x611
   253a4:	4a1a      	ldr	r2, [pc, #104]	; (25410 <z_thread_abort+0x158>)
   253a6:	491b      	ldr	r1, [pc, #108]	; (25414 <z_thread_abort+0x15c>)
   253a8:	4814      	ldr	r0, [pc, #80]	; (253fc <z_thread_abort+0x144>)
   253aa:	f001 f9b7 	bl	2671c <printk>
   253ae:	481a      	ldr	r0, [pc, #104]	; (25418 <z_thread_abort+0x160>)
   253b0:	f001 f9b4 	bl	2671c <printk>
   253b4:	f240 6111 	movw	r1, #1553	; 0x611
   253b8:	4815      	ldr	r0, [pc, #84]	; (25410 <z_thread_abort+0x158>)
   253ba:	f001 fc54 	bl	26c66 <assert_post_action>
   253be:	e79e      	b.n	252fe <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   253c0:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   253c4:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
   253c8:	4621      	mov	r1, r4
   253ca:	4814      	ldr	r0, [pc, #80]	; (2541c <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   253cc:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   253ce:	f7fe ffd9 	bl	24384 <z_priq_dumb_remove>
}
   253d2:	e7b3      	b.n	2533c <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
   253d4:	4628      	mov	r0, r5
   253d6:	f7fe fff7 	bl	243c8 <unpend_thread_no_timeout>
   253da:	f105 0018 	add.w	r0, r5, #24
   253de:	f000 f9c7 	bl	25770 <z_abort_timeout>
		ready_thread(thread);
   253e2:	4628      	mov	r0, r5
   253e4:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   253e8:	f7ff fb38 	bl	24a5c <ready_thread>
   253ec:	e7b3      	b.n	25356 <z_thread_abort+0x9e>
   253ee:	bf00      	nop
   253f0:	20009bf0 	.word	0x20009bf0
   253f4:	0002d072 	.word	0x0002d072
   253f8:	0002d0c4 	.word	0x0002d0c4
   253fc:	0002cfb2 	.word	0x0002cfb2
   25400:	0002d0d9 	.word	0x0002d0d9
   25404:	0002d098 	.word	0x0002d098
   25408:	0002d0af 	.word	0x0002d0af
   2540c:	20009ba8 	.word	0x20009ba8
   25410:	00031466 	.word	0x00031466
   25414:	0002dee4 	.word	0x0002dee4
   25418:	00031558 	.word	0x00031558
   2541c:	20009bd0 	.word	0x20009bd0

00025420 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   25420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25422:	4604      	mov	r4, r0
   25424:	460e      	mov	r6, r1
   25426:	4615      	mov	r5, r2
	__asm__ volatile(
   25428:	f04f 0320 	mov.w	r3, #32
   2542c:	f3ef 8711 	mrs	r7, BASEPRI
   25430:	f383 8811 	msr	BASEPRI, r3
   25434:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25438:	481e      	ldr	r0, [pc, #120]	; (254b4 <z_sched_wake+0x94>)
   2543a:	f7fd fccd 	bl	22dd8 <z_spin_lock_valid>
   2543e:	b968      	cbnz	r0, 2545c <z_sched_wake+0x3c>
   25440:	2381      	movs	r3, #129	; 0x81
   25442:	4a1d      	ldr	r2, [pc, #116]	; (254b8 <z_sched_wake+0x98>)
   25444:	491d      	ldr	r1, [pc, #116]	; (254bc <z_sched_wake+0x9c>)
   25446:	481e      	ldr	r0, [pc, #120]	; (254c0 <z_sched_wake+0xa0>)
   25448:	f001 f968 	bl	2671c <printk>
   2544c:	4919      	ldr	r1, [pc, #100]	; (254b4 <z_sched_wake+0x94>)
   2544e:	481d      	ldr	r0, [pc, #116]	; (254c4 <z_sched_wake+0xa4>)
   25450:	f001 f964 	bl	2671c <printk>
   25454:	2181      	movs	r1, #129	; 0x81
   25456:	4818      	ldr	r0, [pc, #96]	; (254b8 <z_sched_wake+0x98>)
   25458:	f001 fc05 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   2545c:	4815      	ldr	r0, [pc, #84]	; (254b4 <z_sched_wake+0x94>)
   2545e:	f7fd fcd7 	bl	22e10 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   25462:	4620      	mov	r0, r4
   25464:	f006 fb36 	bl	2bad4 <z_priq_dumb_best>

		if (thread != NULL) {
   25468:	4604      	mov	r4, r0
   2546a:	b158      	cbz	r0, 25484 <z_sched_wake+0x64>
   2546c:	67c6      	str	r6, [r0, #124]	; 0x7c
   2546e:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   25470:	f7fe ffaa 	bl	243c8 <unpend_thread_no_timeout>
   25474:	f104 0018 	add.w	r0, r4, #24
   25478:	f000 f97a 	bl	25770 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   2547c:	4620      	mov	r0, r4
   2547e:	f7ff faed 	bl	24a5c <ready_thread>
			ret = true;
   25482:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25484:	480b      	ldr	r0, [pc, #44]	; (254b4 <z_sched_wake+0x94>)
   25486:	f7fd fcb5 	bl	22df4 <z_spin_unlock_valid>
   2548a:	b968      	cbnz	r0, 254a8 <z_sched_wake+0x88>
   2548c:	23ac      	movs	r3, #172	; 0xac
   2548e:	4a0a      	ldr	r2, [pc, #40]	; (254b8 <z_sched_wake+0x98>)
   25490:	490d      	ldr	r1, [pc, #52]	; (254c8 <z_sched_wake+0xa8>)
   25492:	480b      	ldr	r0, [pc, #44]	; (254c0 <z_sched_wake+0xa0>)
   25494:	f001 f942 	bl	2671c <printk>
   25498:	4906      	ldr	r1, [pc, #24]	; (254b4 <z_sched_wake+0x94>)
   2549a:	480c      	ldr	r0, [pc, #48]	; (254cc <z_sched_wake+0xac>)
   2549c:	f001 f93e 	bl	2671c <printk>
   254a0:	21ac      	movs	r1, #172	; 0xac
   254a2:	4805      	ldr	r0, [pc, #20]	; (254b8 <z_sched_wake+0x98>)
   254a4:	f001 fbdf 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   254a8:	f387 8811 	msr	BASEPRI, r7
   254ac:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   254b0:	4620      	mov	r0, r4
   254b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   254b4:	20009bf0 	.word	0x20009bf0
   254b8:	0002d072 	.word	0x0002d072
   254bc:	0002d0c4 	.word	0x0002d0c4
   254c0:	0002cfb2 	.word	0x0002cfb2
   254c4:	0002d0d9 	.word	0x0002d0d9
   254c8:	0002d098 	.word	0x0002d098
   254cc:	0002d0af 	.word	0x0002d0af

000254d0 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   254d0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   254d2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   254d6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   254d8:	e9cd 6700 	strd	r6, r7, [sp]
   254dc:	f7ff f8d8 	bl	24690 <z_pend_curr>

	if (data != NULL) {
   254e0:	b11c      	cbz	r4, 254ea <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   254e2:	4b03      	ldr	r3, [pc, #12]	; (254f0 <z_sched_wait+0x20>)
   254e4:	689b      	ldr	r3, [r3, #8]
   254e6:	695b      	ldr	r3, [r3, #20]
   254e8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   254ea:	b002      	add	sp, #8
   254ec:	bdd0      	pop	{r4, r6, r7, pc}
   254ee:	bf00      	nop
   254f0:	20009ba8 	.word	0x20009ba8

000254f4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   254f4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   254f6:	4806      	ldr	r0, [pc, #24]	; (25510 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   254f8:	4a06      	ldr	r2, [pc, #24]	; (25514 <z_data_copy+0x20>)
   254fa:	4907      	ldr	r1, [pc, #28]	; (25518 <z_data_copy+0x24>)
   254fc:	1a12      	subs	r2, r2, r0
   254fe:	f003 f848 	bl	28592 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   25502:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   25506:	4a05      	ldr	r2, [pc, #20]	; (2551c <z_data_copy+0x28>)
   25508:	4905      	ldr	r1, [pc, #20]	; (25520 <z_data_copy+0x2c>)
   2550a:	4806      	ldr	r0, [pc, #24]	; (25524 <z_data_copy+0x30>)
   2550c:	f003 b841 	b.w	28592 <memcpy>
   25510:	20008000 	.word	0x20008000
   25514:	20008720 	.word	0x20008720
   25518:	00031918 	.word	0x00031918
   2551c:	00000000 	.word	0x00000000
   25520:	00031918 	.word	0x00031918
   25524:	20008000 	.word	0x20008000

00025528 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   25528:	4b03      	ldr	r3, [pc, #12]	; (25538 <elapsed+0x10>)
   2552a:	681b      	ldr	r3, [r3, #0]
   2552c:	b90b      	cbnz	r3, 25532 <elapsed+0xa>
   2552e:	f7ef bd85 	b.w	1503c <sys_clock_elapsed>
}
   25532:	2000      	movs	r0, #0
   25534:	4770      	bx	lr
   25536:	bf00      	nop
   25538:	20009bfc 	.word	0x20009bfc

0002553c <next_timeout>:

static int32_t next_timeout(void)
{
   2553c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   2553e:	4b13      	ldr	r3, [pc, #76]	; (2558c <next_timeout+0x50>)
   25540:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25542:	429c      	cmp	r4, r3
   25544:	bf08      	it	eq
   25546:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   25548:	f7ff ffee 	bl	25528 <elapsed>
   2554c:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   2554e:	b1bc      	cbz	r4, 25580 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   25550:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   25554:	1b40      	subs	r0, r0, r5
   25556:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   2555a:	2801      	cmp	r0, #1
   2555c:	f171 0300 	sbcs.w	r3, r1, #0
   25560:	db11      	blt.n	25586 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   25562:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   25566:	2300      	movs	r3, #0
   25568:	4282      	cmp	r2, r0
   2556a:	eb73 0401 	sbcs.w	r4, r3, r1
   2556e:	da00      	bge.n	25572 <next_timeout+0x36>
   25570:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   25572:	4b07      	ldr	r3, [pc, #28]	; (25590 <next_timeout+0x54>)
   25574:	691b      	ldr	r3, [r3, #16]
   25576:	b113      	cbz	r3, 2557e <next_timeout+0x42>
   25578:	4298      	cmp	r0, r3
   2557a:	bfa8      	it	ge
   2557c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2557e:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   25580:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   25584:	e7f5      	b.n	25572 <next_timeout+0x36>
   25586:	2000      	movs	r0, #0
   25588:	e7f3      	b.n	25572 <next_timeout+0x36>
   2558a:	bf00      	nop
   2558c:	20008360 	.word	0x20008360
   25590:	20009ba8 	.word	0x20009ba8

00025594 <remove_timeout>:
{
   25594:	b530      	push	{r4, r5, lr}
   25596:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   25598:	b168      	cbz	r0, 255b6 <remove_timeout+0x22>
   2559a:	4a0a      	ldr	r2, [pc, #40]	; (255c4 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   2559c:	6852      	ldr	r2, [r2, #4]
   2559e:	4290      	cmp	r0, r2
   255a0:	d009      	beq.n	255b6 <remove_timeout+0x22>
	if (next(t) != NULL) {
   255a2:	b143      	cbz	r3, 255b6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   255a4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   255a8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   255ac:	1912      	adds	r2, r2, r4
   255ae:	eb45 0101 	adc.w	r1, r5, r1
   255b2:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   255b6:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   255b8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   255ba:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   255bc:	2300      	movs	r3, #0
	node->prev = NULL;
   255be:	e9c0 3300 	strd	r3, r3, [r0]
}
   255c2:	bd30      	pop	{r4, r5, pc}
   255c4:	20008360 	.word	0x20008360

000255c8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   255c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255cc:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   255ce:	1c6b      	adds	r3, r5, #1
   255d0:	bf08      	it	eq
   255d2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   255d6:	4682      	mov	sl, r0
   255d8:	468b      	mov	fp, r1
   255da:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   255dc:	f000 80aa 	beq.w	25734 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   255e0:	6803      	ldr	r3, [r0, #0]
   255e2:	b163      	cbz	r3, 255fe <z_add_timeout+0x36>
   255e4:	4955      	ldr	r1, [pc, #340]	; (2573c <z_add_timeout+0x174>)
   255e6:	235d      	movs	r3, #93	; 0x5d
   255e8:	4a55      	ldr	r2, [pc, #340]	; (25740 <z_add_timeout+0x178>)
   255ea:	4856      	ldr	r0, [pc, #344]	; (25744 <z_add_timeout+0x17c>)
   255ec:	f001 f896 	bl	2671c <printk>
   255f0:	4855      	ldr	r0, [pc, #340]	; (25748 <z_add_timeout+0x180>)
   255f2:	f001 f893 	bl	2671c <printk>
   255f6:	215d      	movs	r1, #93	; 0x5d
   255f8:	4851      	ldr	r0, [pc, #324]	; (25740 <z_add_timeout+0x178>)
   255fa:	f001 fb34 	bl	26c66 <assert_post_action>
	to->fn = fn;
   255fe:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
   25602:	f04f 0320 	mov.w	r3, #32
   25606:	f3ef 8b11 	mrs	fp, BASEPRI
   2560a:	f383 8811 	msr	BASEPRI, r3
   2560e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25612:	484e      	ldr	r0, [pc, #312]	; (2574c <z_add_timeout+0x184>)
   25614:	f7fd fbe0 	bl	22dd8 <z_spin_lock_valid>
   25618:	b968      	cbnz	r0, 25636 <z_add_timeout+0x6e>
   2561a:	2381      	movs	r3, #129	; 0x81
   2561c:	4a4c      	ldr	r2, [pc, #304]	; (25750 <z_add_timeout+0x188>)
   2561e:	494d      	ldr	r1, [pc, #308]	; (25754 <z_add_timeout+0x18c>)
   25620:	4848      	ldr	r0, [pc, #288]	; (25744 <z_add_timeout+0x17c>)
   25622:	f001 f87b 	bl	2671c <printk>
   25626:	4949      	ldr	r1, [pc, #292]	; (2574c <z_add_timeout+0x184>)
   25628:	484b      	ldr	r0, [pc, #300]	; (25758 <z_add_timeout+0x190>)
   2562a:	f001 f877 	bl	2671c <printk>
   2562e:	2181      	movs	r1, #129	; 0x81
   25630:	4847      	ldr	r0, [pc, #284]	; (25750 <z_add_timeout+0x188>)
   25632:	f001 fb18 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   25636:	4845      	ldr	r0, [pc, #276]	; (2574c <z_add_timeout+0x184>)
   25638:	f7fd fbea 	bl	22e10 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   2563c:	f06f 0301 	mvn.w	r3, #1
   25640:	f04f 32ff 	mov.w	r2, #4294967295
   25644:	ebb3 0804 	subs.w	r8, r3, r4
   25648:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2564c:	f1b8 0f00 	cmp.w	r8, #0
   25650:	f179 0100 	sbcs.w	r1, r9, #0
   25654:	db1c      	blt.n	25690 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   25656:	4841      	ldr	r0, [pc, #260]	; (2575c <z_add_timeout+0x194>)
   25658:	e9d0 1000 	ldrd	r1, r0, [r0]
   2565c:	1a5b      	subs	r3, r3, r1
   2565e:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   25662:	1b1e      	subs	r6, r3, r4
   25664:	eb62 0705 	sbc.w	r7, r2, r5
   25668:	2e01      	cmp	r6, #1
   2566a:	f177 0300 	sbcs.w	r3, r7, #0
   2566e:	bfbc      	itt	lt
   25670:	2601      	movlt	r6, #1
   25672:	2700      	movlt	r7, #0
   25674:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
   25678:	4a39      	ldr	r2, [pc, #228]	; (25760 <z_add_timeout+0x198>)
   2567a:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2567e:	4293      	cmp	r3, r2
   25680:	d11d      	bne.n	256be <z_add_timeout+0xf6>
	node->prev = tail;
   25682:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
   25686:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
   2568a:	f8c2 a004 	str.w	sl, [r2, #4]
}
   2568e:	e02c      	b.n	256ea <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   25690:	f7ff ff4a 	bl	25528 <elapsed>
   25694:	1c63      	adds	r3, r4, #1
   25696:	9300      	str	r3, [sp, #0]
   25698:	f145 0300 	adc.w	r3, r5, #0
   2569c:	9301      	str	r3, [sp, #4]
   2569e:	e9dd 2300 	ldrd	r2, r3, [sp]
   256a2:	1812      	adds	r2, r2, r0
   256a4:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   256a8:	e9ca 2304 	strd	r2, r3, [sl, #16]
   256ac:	e7e4      	b.n	25678 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   256ae:	1be0      	subs	r0, r4, r7
   256b0:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
   256b4:	42b3      	cmp	r3, r6
   256b6:	e9ca 0104 	strd	r0, r1, [sl, #16]
   256ba:	d0e2      	beq.n	25682 <z_add_timeout+0xba>
   256bc:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   256be:	2b00      	cmp	r3, #0
   256c0:	d0df      	beq.n	25682 <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
   256c2:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
   256c6:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   256ca:	42bc      	cmp	r4, r7
   256cc:	eb75 0108 	sbcs.w	r1, r5, r8
   256d0:	daed      	bge.n	256ae <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
   256d2:	1b38      	subs	r0, r7, r4
   256d4:	eb68 0105 	sbc.w	r1, r8, r5
   256d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   256dc:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   256de:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
   256e2:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   256e6:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
   256ea:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   256ec:	4293      	cmp	r3, r2
   256ee:	d00b      	beq.n	25708 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   256f0:	459a      	cmp	sl, r3
   256f2:	d109      	bne.n	25708 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   256f4:	f7ff ff22 	bl	2553c <next_timeout>

			if (next_time == 0 ||
   256f8:	b118      	cbz	r0, 25702 <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
   256fa:	4b1a      	ldr	r3, [pc, #104]	; (25764 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
   256fc:	691b      	ldr	r3, [r3, #16]
   256fe:	4283      	cmp	r3, r0
   25700:	d002      	beq.n	25708 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
   25702:	2100      	movs	r1, #0
   25704:	f7ef fc68 	bl	14fd8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25708:	4810      	ldr	r0, [pc, #64]	; (2574c <z_add_timeout+0x184>)
   2570a:	f7fd fb73 	bl	22df4 <z_spin_unlock_valid>
   2570e:	b968      	cbnz	r0, 2572c <z_add_timeout+0x164>
   25710:	23ac      	movs	r3, #172	; 0xac
   25712:	4a0f      	ldr	r2, [pc, #60]	; (25750 <z_add_timeout+0x188>)
   25714:	4914      	ldr	r1, [pc, #80]	; (25768 <z_add_timeout+0x1a0>)
   25716:	480b      	ldr	r0, [pc, #44]	; (25744 <z_add_timeout+0x17c>)
   25718:	f001 f800 	bl	2671c <printk>
   2571c:	490b      	ldr	r1, [pc, #44]	; (2574c <z_add_timeout+0x184>)
   2571e:	4813      	ldr	r0, [pc, #76]	; (2576c <z_add_timeout+0x1a4>)
   25720:	f000 fffc 	bl	2671c <printk>
   25724:	21ac      	movs	r1, #172	; 0xac
   25726:	480a      	ldr	r0, [pc, #40]	; (25750 <z_add_timeout+0x188>)
   25728:	f001 fa9d 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   2572c:	f38b 8811 	msr	BASEPRI, fp
   25730:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   25734:	b003      	add	sp, #12
   25736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2573a:	bf00      	nop
   2573c:	0003159e 	.word	0x0003159e
   25740:	0003157a 	.word	0x0003157a
   25744:	0002cfb2 	.word	0x0002cfb2
   25748:	00030725 	.word	0x00030725
   2574c:	20009c00 	.word	0x20009c00
   25750:	0002d072 	.word	0x0002d072
   25754:	0002d0c4 	.word	0x0002d0c4
   25758:	0002d0d9 	.word	0x0002d0d9
   2575c:	20009210 	.word	0x20009210
   25760:	20008360 	.word	0x20008360
   25764:	20009ba8 	.word	0x20009ba8
   25768:	0002d098 	.word	0x0002d098
   2576c:	0002d0af 	.word	0x0002d0af

00025770 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   25770:	b538      	push	{r3, r4, r5, lr}
   25772:	4604      	mov	r4, r0
	__asm__ volatile(
   25774:	f04f 0320 	mov.w	r3, #32
   25778:	f3ef 8511 	mrs	r5, BASEPRI
   2577c:	f383 8811 	msr	BASEPRI, r3
   25780:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25784:	481a      	ldr	r0, [pc, #104]	; (257f0 <z_abort_timeout+0x80>)
   25786:	f7fd fb27 	bl	22dd8 <z_spin_lock_valid>
   2578a:	b968      	cbnz	r0, 257a8 <z_abort_timeout+0x38>
   2578c:	2381      	movs	r3, #129	; 0x81
   2578e:	4a19      	ldr	r2, [pc, #100]	; (257f4 <z_abort_timeout+0x84>)
   25790:	4919      	ldr	r1, [pc, #100]	; (257f8 <z_abort_timeout+0x88>)
   25792:	481a      	ldr	r0, [pc, #104]	; (257fc <z_abort_timeout+0x8c>)
   25794:	f000 ffc2 	bl	2671c <printk>
   25798:	4915      	ldr	r1, [pc, #84]	; (257f0 <z_abort_timeout+0x80>)
   2579a:	4819      	ldr	r0, [pc, #100]	; (25800 <z_abort_timeout+0x90>)
   2579c:	f000 ffbe 	bl	2671c <printk>
   257a0:	2181      	movs	r1, #129	; 0x81
   257a2:	4814      	ldr	r0, [pc, #80]	; (257f4 <z_abort_timeout+0x84>)
   257a4:	f001 fa5f 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   257a8:	4811      	ldr	r0, [pc, #68]	; (257f0 <z_abort_timeout+0x80>)
   257aa:	f7fd fb31 	bl	22e10 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   257ae:	6823      	ldr	r3, [r4, #0]
   257b0:	b1db      	cbz	r3, 257ea <z_abort_timeout+0x7a>
			remove_timeout(to);
   257b2:	4620      	mov	r0, r4
   257b4:	f7ff feee 	bl	25594 <remove_timeout>
			ret = 0;
   257b8:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   257ba:	480d      	ldr	r0, [pc, #52]	; (257f0 <z_abort_timeout+0x80>)
   257bc:	f7fd fb1a 	bl	22df4 <z_spin_unlock_valid>
   257c0:	b968      	cbnz	r0, 257de <z_abort_timeout+0x6e>
   257c2:	23ac      	movs	r3, #172	; 0xac
   257c4:	4a0b      	ldr	r2, [pc, #44]	; (257f4 <z_abort_timeout+0x84>)
   257c6:	490f      	ldr	r1, [pc, #60]	; (25804 <z_abort_timeout+0x94>)
   257c8:	480c      	ldr	r0, [pc, #48]	; (257fc <z_abort_timeout+0x8c>)
   257ca:	f000 ffa7 	bl	2671c <printk>
   257ce:	4908      	ldr	r1, [pc, #32]	; (257f0 <z_abort_timeout+0x80>)
   257d0:	480d      	ldr	r0, [pc, #52]	; (25808 <z_abort_timeout+0x98>)
   257d2:	f000 ffa3 	bl	2671c <printk>
   257d6:	21ac      	movs	r1, #172	; 0xac
   257d8:	4806      	ldr	r0, [pc, #24]	; (257f4 <z_abort_timeout+0x84>)
   257da:	f001 fa44 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   257de:	f385 8811 	msr	BASEPRI, r5
   257e2:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   257e6:	4620      	mov	r0, r4
   257e8:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   257ea:	f06f 0415 	mvn.w	r4, #21
   257ee:	e7e4      	b.n	257ba <z_abort_timeout+0x4a>
   257f0:	20009c00 	.word	0x20009c00
   257f4:	0002d072 	.word	0x0002d072
   257f8:	0002d0c4 	.word	0x0002d0c4
   257fc:	0002cfb2 	.word	0x0002cfb2
   25800:	0002d0d9 	.word	0x0002d0d9
   25804:	0002d098 	.word	0x0002d098
   25808:	0002d0af 	.word	0x0002d0af

0002580c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   2580c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2580e:	f04f 0320 	mov.w	r3, #32
   25812:	f3ef 8511 	mrs	r5, BASEPRI
   25816:	f383 8811 	msr	BASEPRI, r3
   2581a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2581e:	4818      	ldr	r0, [pc, #96]	; (25880 <z_get_next_timeout_expiry+0x74>)
   25820:	f7fd fada 	bl	22dd8 <z_spin_lock_valid>
   25824:	b968      	cbnz	r0, 25842 <z_get_next_timeout_expiry+0x36>
   25826:	2381      	movs	r3, #129	; 0x81
   25828:	4a16      	ldr	r2, [pc, #88]	; (25884 <z_get_next_timeout_expiry+0x78>)
   2582a:	4917      	ldr	r1, [pc, #92]	; (25888 <z_get_next_timeout_expiry+0x7c>)
   2582c:	4817      	ldr	r0, [pc, #92]	; (2588c <z_get_next_timeout_expiry+0x80>)
   2582e:	f000 ff75 	bl	2671c <printk>
   25832:	4913      	ldr	r1, [pc, #76]	; (25880 <z_get_next_timeout_expiry+0x74>)
   25834:	4816      	ldr	r0, [pc, #88]	; (25890 <z_get_next_timeout_expiry+0x84>)
   25836:	f000 ff71 	bl	2671c <printk>
   2583a:	2181      	movs	r1, #129	; 0x81
   2583c:	4811      	ldr	r0, [pc, #68]	; (25884 <z_get_next_timeout_expiry+0x78>)
   2583e:	f001 fa12 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   25842:	480f      	ldr	r0, [pc, #60]	; (25880 <z_get_next_timeout_expiry+0x74>)
   25844:	f7fd fae4 	bl	22e10 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   25848:	f7ff fe78 	bl	2553c <next_timeout>
   2584c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2584e:	480c      	ldr	r0, [pc, #48]	; (25880 <z_get_next_timeout_expiry+0x74>)
   25850:	f7fd fad0 	bl	22df4 <z_spin_unlock_valid>
   25854:	b968      	cbnz	r0, 25872 <z_get_next_timeout_expiry+0x66>
   25856:	23ac      	movs	r3, #172	; 0xac
   25858:	4a0a      	ldr	r2, [pc, #40]	; (25884 <z_get_next_timeout_expiry+0x78>)
   2585a:	490e      	ldr	r1, [pc, #56]	; (25894 <z_get_next_timeout_expiry+0x88>)
   2585c:	480b      	ldr	r0, [pc, #44]	; (2588c <z_get_next_timeout_expiry+0x80>)
   2585e:	f000 ff5d 	bl	2671c <printk>
   25862:	4907      	ldr	r1, [pc, #28]	; (25880 <z_get_next_timeout_expiry+0x74>)
   25864:	480c      	ldr	r0, [pc, #48]	; (25898 <z_get_next_timeout_expiry+0x8c>)
   25866:	f000 ff59 	bl	2671c <printk>
   2586a:	21ac      	movs	r1, #172	; 0xac
   2586c:	4805      	ldr	r0, [pc, #20]	; (25884 <z_get_next_timeout_expiry+0x78>)
   2586e:	f001 f9fa 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   25872:	f385 8811 	msr	BASEPRI, r5
   25876:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2587a:	4620      	mov	r0, r4
   2587c:	bd38      	pop	{r3, r4, r5, pc}
   2587e:	bf00      	nop
   25880:	20009c00 	.word	0x20009c00
   25884:	0002d072 	.word	0x0002d072
   25888:	0002d0c4 	.word	0x0002d0c4
   2588c:	0002cfb2 	.word	0x0002cfb2
   25890:	0002d0d9 	.word	0x0002d0d9
   25894:	0002d098 	.word	0x0002d098
   25898:	0002d0af 	.word	0x0002d0af

0002589c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   2589c:	b570      	push	{r4, r5, r6, lr}
   2589e:	4604      	mov	r4, r0
   258a0:	460d      	mov	r5, r1
	__asm__ volatile(
   258a2:	f04f 0320 	mov.w	r3, #32
   258a6:	f3ef 8611 	mrs	r6, BASEPRI
   258aa:	f383 8811 	msr	BASEPRI, r3
   258ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   258b2:	481b      	ldr	r0, [pc, #108]	; (25920 <z_set_timeout_expiry+0x84>)
   258b4:	f7fd fa90 	bl	22dd8 <z_spin_lock_valid>
   258b8:	b968      	cbnz	r0, 258d6 <z_set_timeout_expiry+0x3a>
   258ba:	2381      	movs	r3, #129	; 0x81
   258bc:	4a19      	ldr	r2, [pc, #100]	; (25924 <z_set_timeout_expiry+0x88>)
   258be:	491a      	ldr	r1, [pc, #104]	; (25928 <z_set_timeout_expiry+0x8c>)
   258c0:	481a      	ldr	r0, [pc, #104]	; (2592c <z_set_timeout_expiry+0x90>)
   258c2:	f000 ff2b 	bl	2671c <printk>
   258c6:	4916      	ldr	r1, [pc, #88]	; (25920 <z_set_timeout_expiry+0x84>)
   258c8:	4819      	ldr	r0, [pc, #100]	; (25930 <z_set_timeout_expiry+0x94>)
   258ca:	f000 ff27 	bl	2671c <printk>
   258ce:	2181      	movs	r1, #129	; 0x81
   258d0:	4814      	ldr	r0, [pc, #80]	; (25924 <z_set_timeout_expiry+0x88>)
   258d2:	f001 f9c8 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   258d6:	4812      	ldr	r0, [pc, #72]	; (25920 <z_set_timeout_expiry+0x84>)
   258d8:	f7fd fa9a 	bl	22e10 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   258dc:	f7ff fe2e 	bl	2553c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   258e0:	2801      	cmp	r0, #1
   258e2:	dd05      	ble.n	258f0 <z_set_timeout_expiry+0x54>
   258e4:	42a0      	cmp	r0, r4
   258e6:	db03      	blt.n	258f0 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   258e8:	4629      	mov	r1, r5
   258ea:	4620      	mov	r0, r4
   258ec:	f7ef fb74 	bl	14fd8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   258f0:	480b      	ldr	r0, [pc, #44]	; (25920 <z_set_timeout_expiry+0x84>)
   258f2:	f7fd fa7f 	bl	22df4 <z_spin_unlock_valid>
   258f6:	b968      	cbnz	r0, 25914 <z_set_timeout_expiry+0x78>
   258f8:	23ac      	movs	r3, #172	; 0xac
   258fa:	4a0a      	ldr	r2, [pc, #40]	; (25924 <z_set_timeout_expiry+0x88>)
   258fc:	490d      	ldr	r1, [pc, #52]	; (25934 <z_set_timeout_expiry+0x98>)
   258fe:	480b      	ldr	r0, [pc, #44]	; (2592c <z_set_timeout_expiry+0x90>)
   25900:	f000 ff0c 	bl	2671c <printk>
   25904:	4906      	ldr	r1, [pc, #24]	; (25920 <z_set_timeout_expiry+0x84>)
   25906:	480c      	ldr	r0, [pc, #48]	; (25938 <z_set_timeout_expiry+0x9c>)
   25908:	f000 ff08 	bl	2671c <printk>
   2590c:	21ac      	movs	r1, #172	; 0xac
   2590e:	4805      	ldr	r0, [pc, #20]	; (25924 <z_set_timeout_expiry+0x88>)
   25910:	f001 f9a9 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   25914:	f386 8811 	msr	BASEPRI, r6
   25918:	f3bf 8f6f 	isb	sy
		}
	}
}
   2591c:	bd70      	pop	{r4, r5, r6, pc}
   2591e:	bf00      	nop
   25920:	20009c00 	.word	0x20009c00
   25924:	0002d072 	.word	0x0002d072
   25928:	0002d0c4 	.word	0x0002d0c4
   2592c:	0002cfb2 	.word	0x0002cfb2
   25930:	0002d0d9 	.word	0x0002d0d9
   25934:	0002d098 	.word	0x0002d098
   25938:	0002d0af 	.word	0x0002d0af

0002593c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   2593c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25940:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   25942:	f7ff f813 	bl	2496c <z_time_slice>
	__asm__ volatile(
   25946:	f04f 0320 	mov.w	r3, #32
   2594a:	f3ef 8711 	mrs	r7, BASEPRI
   2594e:	f383 8811 	msr	BASEPRI, r3
   25952:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25956:	4854      	ldr	r0, [pc, #336]	; (25aa8 <sys_clock_announce+0x16c>)
   25958:	f7fd fa3e 	bl	22dd8 <z_spin_lock_valid>
   2595c:	b968      	cbnz	r0, 2597a <sys_clock_announce+0x3e>
   2595e:	2381      	movs	r3, #129	; 0x81
   25960:	4a52      	ldr	r2, [pc, #328]	; (25aac <sys_clock_announce+0x170>)
   25962:	4953      	ldr	r1, [pc, #332]	; (25ab0 <sys_clock_announce+0x174>)
   25964:	4853      	ldr	r0, [pc, #332]	; (25ab4 <sys_clock_announce+0x178>)
   25966:	f000 fed9 	bl	2671c <printk>
   2596a:	494f      	ldr	r1, [pc, #316]	; (25aa8 <sys_clock_announce+0x16c>)
   2596c:	4852      	ldr	r0, [pc, #328]	; (25ab8 <sys_clock_announce+0x17c>)
   2596e:	f000 fed5 	bl	2671c <printk>
   25972:	2181      	movs	r1, #129	; 0x81
   25974:	484d      	ldr	r0, [pc, #308]	; (25aac <sys_clock_announce+0x170>)
   25976:	f001 f976 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   2597a:	4e50      	ldr	r6, [pc, #320]	; (25abc <sys_clock_announce+0x180>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   2597c:	4d50      	ldr	r5, [pc, #320]	; (25ac0 <sys_clock_announce+0x184>)
   2597e:	46b3      	mov	fp, r6
   25980:	4849      	ldr	r0, [pc, #292]	; (25aa8 <sys_clock_announce+0x16c>)
	return list->head == list;
   25982:	f8df a148 	ldr.w	sl, [pc, #328]	; 25acc <sys_clock_announce+0x190>
   25986:	f7fd fa43 	bl	22e10 <z_spin_lock_set_owner>
   2598a:	602c      	str	r4, [r5, #0]
   2598c:	f8d5 c000 	ldr.w	ip, [r5]
   25990:	e9d6 2300 	ldrd	r2, r3, [r6]
   25994:	e9cd 2300 	strd	r2, r3, [sp]
   25998:	4662      	mov	r2, ip
   2599a:	f8da 4000 	ldr.w	r4, [sl]
   2599e:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   259a0:	4554      	cmp	r4, sl
   259a2:	46e0      	mov	r8, ip
   259a4:	4699      	mov	r9, r3
   259a6:	d00c      	beq.n	259c2 <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   259a8:	b15c      	cbz	r4, 259c2 <sys_clock_announce+0x86>
   259aa:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   259ae:	458c      	cmp	ip, r1
   259b0:	eb79 0302 	sbcs.w	r3, r9, r2
   259b4:	da2e      	bge.n	25a14 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   259b6:	ebb1 000c 	subs.w	r0, r1, ip
   259ba:	eb62 0109 	sbc.w	r1, r2, r9
   259be:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   259c2:	464b      	mov	r3, r9
	announce_remaining = 0;
   259c4:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   259c6:	9a00      	ldr	r2, [sp, #0]
   259c8:	9901      	ldr	r1, [sp, #4]
   259ca:	eb18 0202 	adds.w	r2, r8, r2
   259ce:	eb43 0101 	adc.w	r1, r3, r1
   259d2:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
   259d6:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   259d8:	f7ff fdb0 	bl	2553c <next_timeout>
   259dc:	4621      	mov	r1, r4
   259de:	f7ef fafb 	bl	14fd8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   259e2:	4831      	ldr	r0, [pc, #196]	; (25aa8 <sys_clock_announce+0x16c>)
   259e4:	f7fd fa06 	bl	22df4 <z_spin_unlock_valid>
   259e8:	b968      	cbnz	r0, 25a06 <sys_clock_announce+0xca>
   259ea:	23ac      	movs	r3, #172	; 0xac
   259ec:	4a2f      	ldr	r2, [pc, #188]	; (25aac <sys_clock_announce+0x170>)
   259ee:	4935      	ldr	r1, [pc, #212]	; (25ac4 <sys_clock_announce+0x188>)
   259f0:	4830      	ldr	r0, [pc, #192]	; (25ab4 <sys_clock_announce+0x178>)
   259f2:	f000 fe93 	bl	2671c <printk>
   259f6:	492c      	ldr	r1, [pc, #176]	; (25aa8 <sys_clock_announce+0x16c>)
   259f8:	4833      	ldr	r0, [pc, #204]	; (25ac8 <sys_clock_announce+0x18c>)
   259fa:	f000 fe8f 	bl	2671c <printk>
   259fe:	21ac      	movs	r1, #172	; 0xac
   25a00:	482a      	ldr	r0, [pc, #168]	; (25aac <sys_clock_announce+0x170>)
   25a02:	f001 f930 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   25a06:	f387 8811 	msr	BASEPRI, r7
   25a0a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   25a0e:	b003      	add	sp, #12
   25a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   25a14:	2200      	movs	r2, #0
		curr_tick += dt;
   25a16:	e9dd 8900 	ldrd	r8, r9, [sp]
		t->dticks = 0;
   25a1a:	2300      	movs	r3, #0
		curr_tick += dt;
   25a1c:	eb18 0801 	adds.w	r8, r8, r1
		announce_remaining -= dt;
   25a20:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   25a24:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   25a28:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   25a2a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   25a2e:	4620      	mov	r0, r4
		curr_tick += dt;
   25a30:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   25a34:	f7ff fdae 	bl	25594 <remove_timeout>
   25a38:	481b      	ldr	r0, [pc, #108]	; (25aa8 <sys_clock_announce+0x16c>)
   25a3a:	f7fd f9db 	bl	22df4 <z_spin_unlock_valid>
   25a3e:	b968      	cbnz	r0, 25a5c <sys_clock_announce+0x120>
   25a40:	23ac      	movs	r3, #172	; 0xac
   25a42:	4a1a      	ldr	r2, [pc, #104]	; (25aac <sys_clock_announce+0x170>)
   25a44:	491f      	ldr	r1, [pc, #124]	; (25ac4 <sys_clock_announce+0x188>)
   25a46:	481b      	ldr	r0, [pc, #108]	; (25ab4 <sys_clock_announce+0x178>)
   25a48:	f000 fe68 	bl	2671c <printk>
   25a4c:	4916      	ldr	r1, [pc, #88]	; (25aa8 <sys_clock_announce+0x16c>)
   25a4e:	481e      	ldr	r0, [pc, #120]	; (25ac8 <sys_clock_announce+0x18c>)
   25a50:	f000 fe64 	bl	2671c <printk>
   25a54:	21ac      	movs	r1, #172	; 0xac
   25a56:	4815      	ldr	r0, [pc, #84]	; (25aac <sys_clock_announce+0x170>)
   25a58:	f001 f905 	bl	26c66 <assert_post_action>
   25a5c:	f387 8811 	msr	BASEPRI, r7
   25a60:	f3bf 8f6f 	isb	sy
		t->fn(t);
   25a64:	4620      	mov	r0, r4
   25a66:	68a3      	ldr	r3, [r4, #8]
   25a68:	4798      	blx	r3
	__asm__ volatile(
   25a6a:	f04f 0320 	mov.w	r3, #32
   25a6e:	f3ef 8711 	mrs	r7, BASEPRI
   25a72:	f383 8811 	msr	BASEPRI, r3
   25a76:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25a7a:	480b      	ldr	r0, [pc, #44]	; (25aa8 <sys_clock_announce+0x16c>)
   25a7c:	f7fd f9ac 	bl	22dd8 <z_spin_lock_valid>
   25a80:	b968      	cbnz	r0, 25a9e <sys_clock_announce+0x162>
   25a82:	2381      	movs	r3, #129	; 0x81
   25a84:	4a09      	ldr	r2, [pc, #36]	; (25aac <sys_clock_announce+0x170>)
   25a86:	490a      	ldr	r1, [pc, #40]	; (25ab0 <sys_clock_announce+0x174>)
   25a88:	480a      	ldr	r0, [pc, #40]	; (25ab4 <sys_clock_announce+0x178>)
   25a8a:	f000 fe47 	bl	2671c <printk>
   25a8e:	4906      	ldr	r1, [pc, #24]	; (25aa8 <sys_clock_announce+0x16c>)
   25a90:	4809      	ldr	r0, [pc, #36]	; (25ab8 <sys_clock_announce+0x17c>)
   25a92:	f000 fe43 	bl	2671c <printk>
   25a96:	2181      	movs	r1, #129	; 0x81
   25a98:	4804      	ldr	r0, [pc, #16]	; (25aac <sys_clock_announce+0x170>)
   25a9a:	f001 f8e4 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   25a9e:	4802      	ldr	r0, [pc, #8]	; (25aa8 <sys_clock_announce+0x16c>)
   25aa0:	f7fd f9b6 	bl	22e10 <z_spin_lock_set_owner>
	return k;
   25aa4:	e772      	b.n	2598c <sys_clock_announce+0x50>
   25aa6:	bf00      	nop
   25aa8:	20009c00 	.word	0x20009c00
   25aac:	0002d072 	.word	0x0002d072
   25ab0:	0002d0c4 	.word	0x0002d0c4
   25ab4:	0002cfb2 	.word	0x0002cfb2
   25ab8:	0002d0d9 	.word	0x0002d0d9
   25abc:	20009210 	.word	0x20009210
   25ac0:	20009bfc 	.word	0x20009bfc
   25ac4:	0002d098 	.word	0x0002d098
   25ac8:	0002d0af 	.word	0x0002d0af
   25acc:	20008360 	.word	0x20008360

00025ad0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   25ad0:	b570      	push	{r4, r5, r6, lr}
   25ad2:	f04f 0320 	mov.w	r3, #32
   25ad6:	f3ef 8611 	mrs	r6, BASEPRI
   25ada:	f383 8811 	msr	BASEPRI, r3
   25ade:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25ae2:	481b      	ldr	r0, [pc, #108]	; (25b50 <sys_clock_tick_get+0x80>)
   25ae4:	f7fd f978 	bl	22dd8 <z_spin_lock_valid>
   25ae8:	b968      	cbnz	r0, 25b06 <sys_clock_tick_get+0x36>
   25aea:	2381      	movs	r3, #129	; 0x81
   25aec:	4a19      	ldr	r2, [pc, #100]	; (25b54 <sys_clock_tick_get+0x84>)
   25aee:	491a      	ldr	r1, [pc, #104]	; (25b58 <sys_clock_tick_get+0x88>)
   25af0:	481a      	ldr	r0, [pc, #104]	; (25b5c <sys_clock_tick_get+0x8c>)
   25af2:	f000 fe13 	bl	2671c <printk>
   25af6:	4916      	ldr	r1, [pc, #88]	; (25b50 <sys_clock_tick_get+0x80>)
   25af8:	4819      	ldr	r0, [pc, #100]	; (25b60 <sys_clock_tick_get+0x90>)
   25afa:	f000 fe0f 	bl	2671c <printk>
   25afe:	2181      	movs	r1, #129	; 0x81
   25b00:	4814      	ldr	r0, [pc, #80]	; (25b54 <sys_clock_tick_get+0x84>)
   25b02:	f001 f8b0 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   25b06:	4812      	ldr	r0, [pc, #72]	; (25b50 <sys_clock_tick_get+0x80>)
   25b08:	f7fd f982 	bl	22e10 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   25b0c:	f7ef fa96 	bl	1503c <sys_clock_elapsed>
   25b10:	4b14      	ldr	r3, [pc, #80]	; (25b64 <sys_clock_tick_get+0x94>)
   25b12:	e9d3 4500 	ldrd	r4, r5, [r3]
   25b16:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25b18:	480d      	ldr	r0, [pc, #52]	; (25b50 <sys_clock_tick_get+0x80>)
   25b1a:	f145 0500 	adc.w	r5, r5, #0
   25b1e:	f7fd f969 	bl	22df4 <z_spin_unlock_valid>
   25b22:	b968      	cbnz	r0, 25b40 <sys_clock_tick_get+0x70>
   25b24:	23ac      	movs	r3, #172	; 0xac
   25b26:	4a0b      	ldr	r2, [pc, #44]	; (25b54 <sys_clock_tick_get+0x84>)
   25b28:	490f      	ldr	r1, [pc, #60]	; (25b68 <sys_clock_tick_get+0x98>)
   25b2a:	480c      	ldr	r0, [pc, #48]	; (25b5c <sys_clock_tick_get+0x8c>)
   25b2c:	f000 fdf6 	bl	2671c <printk>
   25b30:	4907      	ldr	r1, [pc, #28]	; (25b50 <sys_clock_tick_get+0x80>)
   25b32:	480e      	ldr	r0, [pc, #56]	; (25b6c <sys_clock_tick_get+0x9c>)
   25b34:	f000 fdf2 	bl	2671c <printk>
   25b38:	21ac      	movs	r1, #172	; 0xac
   25b3a:	4806      	ldr	r0, [pc, #24]	; (25b54 <sys_clock_tick_get+0x84>)
   25b3c:	f001 f893 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   25b40:	f386 8811 	msr	BASEPRI, r6
   25b44:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   25b48:	4620      	mov	r0, r4
   25b4a:	4629      	mov	r1, r5
   25b4c:	bd70      	pop	{r4, r5, r6, pc}
   25b4e:	bf00      	nop
   25b50:	20009c00 	.word	0x20009c00
   25b54:	0002d072 	.word	0x0002d072
   25b58:	0002d0c4 	.word	0x0002d0c4
   25b5c:	0002cfb2 	.word	0x0002cfb2
   25b60:	0002d0d9 	.word	0x0002d0d9
   25b64:	20009210 	.word	0x20009210
   25b68:	0002d098 	.word	0x0002d098
   25b6c:	0002d0af 	.word	0x0002d0af

00025b70 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   25b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   25b72:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   25b76:	1c56      	adds	r6, r2, #1
   25b78:	f143 0700 	adc.w	r7, r3, #0
   25b7c:	2f00      	cmp	r7, #0
   25b7e:	bf08      	it	eq
   25b80:	2e02      	cmpeq	r6, #2
{
   25b82:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   25b84:	d302      	bcc.n	25b8c <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   25b86:	490d      	ldr	r1, [pc, #52]	; (25bbc <z_timer_expiration_handler+0x4c>)
   25b88:	f7ff fd1e 	bl	255c8 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   25b8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   25b8e:	3301      	adds	r3, #1
   25b90:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   25b92:	6a23      	ldr	r3, [r4, #32]
   25b94:	b10b      	cbz	r3, 25b9a <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   25b96:	4620      	mov	r0, r4
   25b98:	4798      	blx	r3
	return list->head == list;
   25b9a:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25b9e:	42a5      	cmp	r5, r4
   25ba0:	d00a      	beq.n	25bb8 <z_timer_expiration_handler+0x48>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   25ba2:	b14d      	cbz	r5, 25bb8 <z_timer_expiration_handler+0x48>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   25ba4:	4628      	mov	r0, r5
   25ba6:	f7fe faed 	bl	24184 <z_unpend_thread_no_timeout>
   25baa:	2300      	movs	r3, #0

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   25bac:	4628      	mov	r0, r5
   25bae:	67eb      	str	r3, [r5, #124]	; 0x7c
}
   25bb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   25bb4:	f7fe bfa6 	b.w	24b04 <z_ready_thread>
}
   25bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25bba:	bf00      	nop
   25bbc:	00025b71 	.word	0x00025b71

00025bc0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   25bc0:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   25bc4:	4619      	mov	r1, r3
   25bc6:	4606      	mov	r6, r0
   25bc8:	4610      	mov	r0, r2
   25bca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   25bce:	1c4c      	adds	r4, r1, #1
   25bd0:	bf08      	it	eq
   25bd2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   25bd6:	4680      	mov	r8, r0
   25bd8:	4689      	mov	r9, r1
   25bda:	d04c      	beq.n	25c76 <z_impl_k_timer_start+0xb6>
   25bdc:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   25bde:	1c6b      	adds	r3, r5, #1
   25be0:	bf08      	it	eq
   25be2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   25be6:	4614      	mov	r4, r2
   25be8:	d019      	beq.n	25c1e <z_impl_k_timer_start+0x5e>
   25bea:	ea54 0305 	orrs.w	r3, r4, r5
   25bee:	d016      	beq.n	25c1e <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   25bf0:	f06f 0301 	mvn.w	r3, #1
   25bf4:	ebb3 0a02 	subs.w	sl, r3, r2
   25bf8:	f04f 33ff 	mov.w	r3, #4294967295
   25bfc:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   25c00:	f1ba 0f00 	cmp.w	sl, #0
   25c04:	f17b 0300 	sbcs.w	r3, fp, #0
   25c08:	da09      	bge.n	25c1e <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   25c0a:	f112 34ff 	adds.w	r4, r2, #4294967295
   25c0e:	f145 35ff 	adc.w	r5, r5, #4294967295
   25c12:	2c01      	cmp	r4, #1
   25c14:	f175 0300 	sbcs.w	r3, r5, #0
   25c18:	bfbc      	itt	lt
   25c1a:	2401      	movlt	r4, #1
   25c1c:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   25c1e:	f06f 0301 	mvn.w	r3, #1
   25c22:	1a1b      	subs	r3, r3, r0
   25c24:	9300      	str	r3, [sp, #0]
   25c26:	f04f 33ff 	mov.w	r3, #4294967295
   25c2a:	eb63 0301 	sbc.w	r3, r3, r1
   25c2e:	9301      	str	r3, [sp, #4]
   25c30:	e9dd 2300 	ldrd	r2, r3, [sp]
   25c34:	2a00      	cmp	r2, #0
   25c36:	f173 0300 	sbcs.w	r3, r3, #0
   25c3a:	da0c      	bge.n	25c56 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   25c3c:	f110 38ff 	adds.w	r8, r0, #4294967295
   25c40:	f141 39ff 	adc.w	r9, r1, #4294967295
   25c44:	f1b8 0f00 	cmp.w	r8, #0
   25c48:	f179 0300 	sbcs.w	r3, r9, #0
   25c4c:	bfbc      	itt	lt
   25c4e:	f04f 0800 	movlt.w	r8, #0
   25c52:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   25c56:	4630      	mov	r0, r6
   25c58:	f7ff fd8a 	bl	25770 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   25c5c:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   25c5e:	4642      	mov	r2, r8
	timer->status = 0U;
   25c60:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   25c62:	4630      	mov	r0, r6
   25c64:	464b      	mov	r3, r9
   25c66:	4905      	ldr	r1, [pc, #20]	; (25c7c <z_impl_k_timer_start+0xbc>)
	timer->period = period;
   25c68:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   25c6c:	b002      	add	sp, #8
   25c6e:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   25c72:	f7ff bca9 	b.w	255c8 <z_add_timeout>
}
   25c76:	b002      	add	sp, #8
   25c78:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   25c7c:	00025b71 	.word	0x00025b71

00025c80 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   25c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25c84:	2414      	movs	r4, #20
   25c86:	4680      	mov	r8, r0
   25c88:	4617      	mov	r7, r2
	while (num_events--) {
   25c8a:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   25c8e:	4d51      	ldr	r5, [pc, #324]	; (25dd4 <clear_event_registrations+0x154>)
   25c90:	f8df 9184 	ldr.w	r9, [pc, #388]	; 25e18 <clear_event_registrations+0x198>
   25c94:	4e50      	ldr	r6, [pc, #320]	; (25dd8 <clear_event_registrations+0x158>)
	while (num_events--) {
   25c96:	45a0      	cmp	r8, r4
   25c98:	d101      	bne.n	25c9e <clear_event_registrations+0x1e>
		clear_event_registration(&events[num_events]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   25c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   25c9e:	2300      	movs	r3, #0
   25ca0:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   25ca4:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   25ca8:	f003 031f 	and.w	r3, r3, #31
   25cac:	2b08      	cmp	r3, #8
   25cae:	d84f      	bhi.n	25d50 <clear_event_registrations+0xd0>
   25cb0:	e8df f003 	tbb	[pc, r3]
   25cb4:	4e05305b 	.word	0x4e05305b
   25cb8:	4e4e4e21 	.word	0x4e4e4e21
   25cbc:	3f          	.byte	0x3f
   25cbd:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   25cbe:	f854 3c04 	ldr.w	r3, [r4, #-4]
   25cc2:	b963      	cbnz	r3, 25cde <clear_event_registrations+0x5e>
   25cc4:	4945      	ldr	r1, [pc, #276]	; (25ddc <clear_event_registrations+0x15c>)
   25cc6:	23a9      	movs	r3, #169	; 0xa9
   25cc8:	462a      	mov	r2, r5
   25cca:	4630      	mov	r0, r6
   25ccc:	f000 fd26 	bl	2671c <printk>
   25cd0:	4843      	ldr	r0, [pc, #268]	; (25de0 <clear_event_registrations+0x160>)
   25cd2:	f000 fd23 	bl	2671c <printk>
   25cd6:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   25cd8:	4628      	mov	r0, r5
   25cda:	f000 ffc4 	bl	26c66 <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   25cde:	f854 3c14 	ldr.w	r3, [r4, #-20]
   25ce2:	2b00      	cmp	r3, #0
   25ce4:	d041      	beq.n	25d6a <clear_event_registrations+0xea>
	sys_dnode_t *const prev = node->prev;
   25ce6:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   25cea:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   25cec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25cee:	2300      	movs	r3, #0
	node->prev = NULL;
   25cf0:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   25cf4:	e039      	b.n	25d6a <clear_event_registrations+0xea>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   25cf6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   25cfa:	2b00      	cmp	r3, #0
   25cfc:	d1ef      	bne.n	25cde <clear_event_registrations+0x5e>
   25cfe:	4939      	ldr	r1, [pc, #228]	; (25de4 <clear_event_registrations+0x164>)
   25d00:	23ad      	movs	r3, #173	; 0xad
   25d02:	462a      	mov	r2, r5
   25d04:	4630      	mov	r0, r6
   25d06:	f000 fd09 	bl	2671c <printk>
   25d0a:	4837      	ldr	r0, [pc, #220]	; (25de8 <clear_event_registrations+0x168>)
   25d0c:	f000 fd06 	bl	2671c <printk>
   25d10:	21ad      	movs	r1, #173	; 0xad
   25d12:	e7e1      	b.n	25cd8 <clear_event_registrations+0x58>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   25d14:	f854 3c04 	ldr.w	r3, [r4, #-4]
   25d18:	2b00      	cmp	r3, #0
   25d1a:	d1e0      	bne.n	25cde <clear_event_registrations+0x5e>
   25d1c:	4933      	ldr	r1, [pc, #204]	; (25dec <clear_event_registrations+0x16c>)
   25d1e:	23b1      	movs	r3, #177	; 0xb1
   25d20:	462a      	mov	r2, r5
   25d22:	4630      	mov	r0, r6
   25d24:	f000 fcfa 	bl	2671c <printk>
   25d28:	4831      	ldr	r0, [pc, #196]	; (25df0 <clear_event_registrations+0x170>)
   25d2a:	f000 fcf7 	bl	2671c <printk>
   25d2e:	21b1      	movs	r1, #177	; 0xb1
   25d30:	e7d2      	b.n	25cd8 <clear_event_registrations+0x58>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   25d32:	f854 3c04 	ldr.w	r3, [r4, #-4]
   25d36:	2b00      	cmp	r3, #0
   25d38:	d1d1      	bne.n	25cde <clear_event_registrations+0x5e>
   25d3a:	492e      	ldr	r1, [pc, #184]	; (25df4 <clear_event_registrations+0x174>)
   25d3c:	23b5      	movs	r3, #181	; 0xb5
   25d3e:	462a      	mov	r2, r5
   25d40:	4630      	mov	r0, r6
   25d42:	f000 fceb 	bl	2671c <printk>
   25d46:	482c      	ldr	r0, [pc, #176]	; (25df8 <clear_event_registrations+0x178>)
   25d48:	f000 fce8 	bl	2671c <printk>
   25d4c:	21b5      	movs	r1, #181	; 0xb5
   25d4e:	e7c3      	b.n	25cd8 <clear_event_registrations+0x58>
		__ASSERT(false, "invalid event type\n");
   25d50:	4649      	mov	r1, r9
   25d52:	23bc      	movs	r3, #188	; 0xbc
   25d54:	462a      	mov	r2, r5
   25d56:	4630      	mov	r0, r6
   25d58:	f000 fce0 	bl	2671c <printk>
   25d5c:	4827      	ldr	r0, [pc, #156]	; (25dfc <clear_event_registrations+0x17c>)
   25d5e:	f000 fcdd 	bl	2671c <printk>
   25d62:	21bc      	movs	r1, #188	; 0xbc
   25d64:	4628      	mov	r0, r5
   25d66:	f000 ff7e 	bl	26c66 <assert_post_action>
   25d6a:	4825      	ldr	r0, [pc, #148]	; (25e00 <clear_event_registrations+0x180>)
   25d6c:	f7fd f842 	bl	22df4 <z_spin_unlock_valid>
   25d70:	b968      	cbnz	r0, 25d8e <clear_event_registrations+0x10e>
   25d72:	23ac      	movs	r3, #172	; 0xac
   25d74:	4630      	mov	r0, r6
   25d76:	4a23      	ldr	r2, [pc, #140]	; (25e04 <clear_event_registrations+0x184>)
   25d78:	4923      	ldr	r1, [pc, #140]	; (25e08 <clear_event_registrations+0x188>)
   25d7a:	f000 fccf 	bl	2671c <printk>
   25d7e:	4920      	ldr	r1, [pc, #128]	; (25e00 <clear_event_registrations+0x180>)
   25d80:	4822      	ldr	r0, [pc, #136]	; (25e0c <clear_event_registrations+0x18c>)
   25d82:	f000 fccb 	bl	2671c <printk>
   25d86:	21ac      	movs	r1, #172	; 0xac
   25d88:	481e      	ldr	r0, [pc, #120]	; (25e04 <clear_event_registrations+0x184>)
   25d8a:	f000 ff6c 	bl	26c66 <assert_post_action>
   25d8e:	f387 8811 	msr	BASEPRI, r7
   25d92:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   25d96:	f04f 0320 	mov.w	r3, #32
   25d9a:	f3ef 8711 	mrs	r7, BASEPRI
   25d9e:	f383 8811 	msr	BASEPRI, r3
   25da2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25da6:	4816      	ldr	r0, [pc, #88]	; (25e00 <clear_event_registrations+0x180>)
   25da8:	f7fd f816 	bl	22dd8 <z_spin_lock_valid>
   25dac:	b968      	cbnz	r0, 25dca <clear_event_registrations+0x14a>
   25dae:	2381      	movs	r3, #129	; 0x81
   25db0:	4630      	mov	r0, r6
   25db2:	4a14      	ldr	r2, [pc, #80]	; (25e04 <clear_event_registrations+0x184>)
   25db4:	4916      	ldr	r1, [pc, #88]	; (25e10 <clear_event_registrations+0x190>)
   25db6:	f000 fcb1 	bl	2671c <printk>
   25dba:	4911      	ldr	r1, [pc, #68]	; (25e00 <clear_event_registrations+0x180>)
   25dbc:	4815      	ldr	r0, [pc, #84]	; (25e14 <clear_event_registrations+0x194>)
   25dbe:	f000 fcad 	bl	2671c <printk>
   25dc2:	2181      	movs	r1, #129	; 0x81
   25dc4:	480f      	ldr	r0, [pc, #60]	; (25e04 <clear_event_registrations+0x184>)
   25dc6:	f000 ff4e 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   25dca:	480d      	ldr	r0, [pc, #52]	; (25e00 <clear_event_registrations+0x180>)
   25dcc:	f7fd f820 	bl	22e10 <z_spin_lock_set_owner>
	return k;
   25dd0:	3c14      	subs	r4, #20
   25dd2:	e760      	b.n	25c96 <clear_event_registrations+0x16>
   25dd4:	000315be 	.word	0x000315be
   25dd8:	0002cfb2 	.word	0x0002cfb2
   25ddc:	000315df 	.word	0x000315df
   25de0:	000315f9 	.word	0x000315f9
   25de4:	0003160e 	.word	0x0003160e
   25de8:	0003162a 	.word	0x0003162a
   25dec:	0003163b 	.word	0x0003163b
   25df0:	00031658 	.word	0x00031658
   25df4:	0003166f 	.word	0x0003166f
   25df8:	0003168a 	.word	0x0003168a
   25dfc:	000316a3 	.word	0x000316a3
   25e00:	20009c04 	.word	0x20009c04
   25e04:	0002d072 	.word	0x0002d072
   25e08:	0002d098 	.word	0x0002d098
   25e0c:	0002d0af 	.word	0x0002d0af
   25e10:	0002d0c4 	.word	0x0002d0c4
   25e14:	0002d0d9 	.word	0x0002d0d9
   25e18:	0002dee4 	.word	0x0002dee4

00025e1c <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   25e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   25e20:	2700      	movs	r7, #0
{
   25e22:	4615      	mov	r5, r2
   25e24:	4604      	mov	r4, r0
	int events_registered = 0;
   25e26:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25e28:	4e7a      	ldr	r6, [pc, #488]	; (26014 <register_events+0x1f8>)
   25e2a:	f8df 822c 	ldr.w	r8, [pc, #556]	; 26058 <register_events+0x23c>
   25e2e:	f8df a22c 	ldr.w	sl, [pc, #556]	; 2605c <register_events+0x240>
{
   25e32:	9100      	str	r1, [sp, #0]
   25e34:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   25e36:	9b00      	ldr	r3, [sp, #0]
   25e38:	429f      	cmp	r7, r3
   25e3a:	db03      	blt.n	25e44 <register_events+0x28>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   25e3c:	4648      	mov	r0, r9
   25e3e:	b003      	add	sp, #12
   25e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e44:	f04f 0320 	mov.w	r3, #32
   25e48:	f3ef 8b11 	mrs	fp, BASEPRI
   25e4c:	f383 8811 	msr	BASEPRI, r3
   25e50:	f3bf 8f6f 	isb	sy
   25e54:	4630      	mov	r0, r6
   25e56:	f7fc ffbf 	bl	22dd8 <z_spin_lock_valid>
   25e5a:	b968      	cbnz	r0, 25e78 <register_events+0x5c>
   25e5c:	2381      	movs	r3, #129	; 0x81
   25e5e:	4642      	mov	r2, r8
   25e60:	4651      	mov	r1, sl
   25e62:	486d      	ldr	r0, [pc, #436]	; (26018 <register_events+0x1fc>)
   25e64:	f000 fc5a 	bl	2671c <printk>
   25e68:	4631      	mov	r1, r6
   25e6a:	486c      	ldr	r0, [pc, #432]	; (2601c <register_events+0x200>)
   25e6c:	f000 fc56 	bl	2671c <printk>
   25e70:	2181      	movs	r1, #129	; 0x81
   25e72:	4640      	mov	r0, r8
   25e74:	f000 fef7 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   25e78:	4630      	mov	r0, r6
   25e7a:	f7fc ffc9 	bl	22e10 <z_spin_lock_set_owner>
	switch (event->type) {
   25e7e:	7b63      	ldrb	r3, [r4, #13]
   25e80:	f003 031f 	and.w	r3, r3, #31
   25e84:	2b08      	cmp	r3, #8
   25e86:	d84f      	bhi.n	25f28 <register_events+0x10c>
   25e88:	e8df f003 	tbb	[pc, r3]
   25e8c:	4e054230 	.word	0x4e054230
   25e90:	4e4e4e2c 	.word	0x4e4e4e2c
   25e94:	48          	.byte	0x48
   25e95:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   25e96:	6923      	ldr	r3, [r4, #16]
   25e98:	689b      	ldr	r3, [r3, #8]
   25e9a:	b33b      	cbz	r3, 25eec <register_events+0xd0>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   25e9c:	2302      	movs	r3, #2
	event->poller = NULL;
   25e9e:	2100      	movs	r1, #0
	event->state |= state;
   25ea0:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   25ea2:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   25ea4:	f3c2 3045 	ubfx	r0, r2, #13, #6
   25ea8:	4303      	orrs	r3, r0
   25eaa:	f363 3252 	bfi	r2, r3, #13, #6
   25eae:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   25eb0:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25eb2:	4630      	mov	r0, r6
   25eb4:	f7fc ff9e 	bl	22df4 <z_spin_unlock_valid>
   25eb8:	b968      	cbnz	r0, 25ed6 <register_events+0xba>
   25eba:	23ac      	movs	r3, #172	; 0xac
   25ebc:	4642      	mov	r2, r8
   25ebe:	4958      	ldr	r1, [pc, #352]	; (26020 <register_events+0x204>)
   25ec0:	4855      	ldr	r0, [pc, #340]	; (26018 <register_events+0x1fc>)
   25ec2:	f000 fc2b 	bl	2671c <printk>
   25ec6:	4631      	mov	r1, r6
   25ec8:	4856      	ldr	r0, [pc, #344]	; (26024 <register_events+0x208>)
   25eca:	f000 fc27 	bl	2671c <printk>
   25ece:	21ac      	movs	r1, #172	; 0xac
   25ed0:	4640      	mov	r0, r8
   25ed2:	f000 fec8 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   25ed6:	f38b 8811 	msr	BASEPRI, fp
   25eda:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   25ede:	3701      	adds	r7, #1
   25ee0:	3414      	adds	r4, #20
   25ee2:	e7a8      	b.n	25e36 <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   25ee4:	6923      	ldr	r3, [r4, #16]
   25ee6:	681b      	ldr	r3, [r3, #0]
   25ee8:	2b00      	cmp	r3, #0
   25eea:	d12e      	bne.n	25f4a <register_events+0x12e>
		} else if (!just_check && poller->is_polling) {
   25eec:	9b01      	ldr	r3, [sp, #4]
   25eee:	2b00      	cmp	r3, #0
   25ef0:	d1df      	bne.n	25eb2 <register_events+0x96>
   25ef2:	782b      	ldrb	r3, [r5, #0]
   25ef4:	2b00      	cmp	r3, #0
   25ef6:	d0dc      	beq.n	25eb2 <register_events+0x96>
	switch (event->type) {
   25ef8:	7b63      	ldrb	r3, [r4, #13]
   25efa:	f003 031f 	and.w	r3, r3, #31
   25efe:	2b08      	cmp	r3, #8
   25f00:	d879      	bhi.n	25ff6 <register_events+0x1da>
   25f02:	e8df f003 	tbb	[pc, r3]
   25f06:	5139      	.short	0x5139
   25f08:	783d7824 	.word	0x783d7824
   25f0c:	7878      	.short	0x7878
   25f0e:	64          	.byte	0x64
   25f0f:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   25f10:	6923      	ldr	r3, [r4, #16]
   25f12:	689b      	ldr	r3, [r3, #8]
   25f14:	2b00      	cmp	r3, #0
   25f16:	d0e9      	beq.n	25eec <register_events+0xd0>
			*state = K_POLL_STATE_SIGNALED;
   25f18:	2301      	movs	r3, #1
   25f1a:	e7c0      	b.n	25e9e <register_events+0x82>
		if (event->msgq->used_msgs > 0) {
   25f1c:	6923      	ldr	r3, [r4, #16]
   25f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   25f20:	2b00      	cmp	r3, #0
   25f22:	d0e3      	beq.n	25eec <register_events+0xd0>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   25f24:	2310      	movs	r3, #16
   25f26:	e7ba      	b.n	25e9e <register_events+0x82>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   25f28:	235c      	movs	r3, #92	; 0x5c
   25f2a:	4a3f      	ldr	r2, [pc, #252]	; (26028 <register_events+0x20c>)
   25f2c:	493f      	ldr	r1, [pc, #252]	; (2602c <register_events+0x210>)
   25f2e:	483a      	ldr	r0, [pc, #232]	; (26018 <register_events+0x1fc>)
   25f30:	f000 fbf4 	bl	2671c <printk>
   25f34:	7b61      	ldrb	r1, [r4, #13]
   25f36:	483e      	ldr	r0, [pc, #248]	; (26030 <register_events+0x214>)
   25f38:	f001 011f 	and.w	r1, r1, #31
   25f3c:	f000 fbee 	bl	2671c <printk>
   25f40:	215c      	movs	r1, #92	; 0x5c
   25f42:	4839      	ldr	r0, [pc, #228]	; (26028 <register_events+0x20c>)
   25f44:	f000 fe8f 	bl	26c66 <assert_post_action>
		break;
   25f48:	e7d0      	b.n	25eec <register_events+0xd0>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   25f4a:	2304      	movs	r3, #4
   25f4c:	e7a7      	b.n	25e9e <register_events+0x82>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   25f4e:	6923      	ldr	r3, [r4, #16]
   25f50:	b963      	cbnz	r3, 25f6c <register_events+0x150>
   25f52:	4938      	ldr	r1, [pc, #224]	; (26034 <register_events+0x218>)
   25f54:	2386      	movs	r3, #134	; 0x86
   25f56:	4a34      	ldr	r2, [pc, #208]	; (26028 <register_events+0x20c>)
   25f58:	482f      	ldr	r0, [pc, #188]	; (26018 <register_events+0x1fc>)
   25f5a:	f000 fbdf 	bl	2671c <printk>
   25f5e:	4836      	ldr	r0, [pc, #216]	; (26038 <register_events+0x21c>)
   25f60:	f000 fbdc 	bl	2671c <printk>
   25f64:	2186      	movs	r1, #134	; 0x86
   25f66:	4830      	ldr	r0, [pc, #192]	; (26028 <register_events+0x20c>)
   25f68:	f000 fe7d 	bl	26c66 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   25f6c:	462a      	mov	r2, r5
   25f6e:	4621      	mov	r1, r4
   25f70:	6920      	ldr	r0, [r4, #16]
   25f72:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   25f74:	f005 fe24 	bl	2bbc0 <add_event>
	event->poller = poller;
   25f78:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   25f7a:	f109 0901 	add.w	r9, r9, #1
   25f7e:	e798      	b.n	25eb2 <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   25f80:	6923      	ldr	r3, [r4, #16]
   25f82:	b963      	cbnz	r3, 25f9e <register_events+0x182>
   25f84:	492d      	ldr	r1, [pc, #180]	; (2603c <register_events+0x220>)
   25f86:	238a      	movs	r3, #138	; 0x8a
   25f88:	4a27      	ldr	r2, [pc, #156]	; (26028 <register_events+0x20c>)
   25f8a:	4823      	ldr	r0, [pc, #140]	; (26018 <register_events+0x1fc>)
   25f8c:	f000 fbc6 	bl	2671c <printk>
   25f90:	482b      	ldr	r0, [pc, #172]	; (26040 <register_events+0x224>)
   25f92:	f000 fbc3 	bl	2671c <printk>
   25f96:	218a      	movs	r1, #138	; 0x8a
   25f98:	4823      	ldr	r0, [pc, #140]	; (26028 <register_events+0x20c>)
   25f9a:	f000 fe64 	bl	26c66 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   25f9e:	6920      	ldr	r0, [r4, #16]
   25fa0:	462a      	mov	r2, r5
   25fa2:	4621      	mov	r1, r4
   25fa4:	3014      	adds	r0, #20
   25fa6:	e7e5      	b.n	25f74 <register_events+0x158>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   25fa8:	6923      	ldr	r3, [r4, #16]
   25faa:	b963      	cbnz	r3, 25fc6 <register_events+0x1aa>
   25fac:	4925      	ldr	r1, [pc, #148]	; (26044 <register_events+0x228>)
   25fae:	238e      	movs	r3, #142	; 0x8e
   25fb0:	4a1d      	ldr	r2, [pc, #116]	; (26028 <register_events+0x20c>)
   25fb2:	4819      	ldr	r0, [pc, #100]	; (26018 <register_events+0x1fc>)
   25fb4:	f000 fbb2 	bl	2671c <printk>
   25fb8:	4823      	ldr	r0, [pc, #140]	; (26048 <register_events+0x22c>)
   25fba:	f000 fbaf 	bl	2671c <printk>
   25fbe:	218e      	movs	r1, #142	; 0x8e
   25fc0:	4819      	ldr	r0, [pc, #100]	; (26028 <register_events+0x20c>)
   25fc2:	f000 fe50 	bl	26c66 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   25fc6:	462a      	mov	r2, r5
   25fc8:	4621      	mov	r1, r4
   25fca:	6920      	ldr	r0, [r4, #16]
   25fcc:	e7d2      	b.n	25f74 <register_events+0x158>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   25fce:	6923      	ldr	r3, [r4, #16]
   25fd0:	b963      	cbnz	r3, 25fec <register_events+0x1d0>
   25fd2:	491e      	ldr	r1, [pc, #120]	; (2604c <register_events+0x230>)
   25fd4:	2392      	movs	r3, #146	; 0x92
   25fd6:	4a14      	ldr	r2, [pc, #80]	; (26028 <register_events+0x20c>)
   25fd8:	480f      	ldr	r0, [pc, #60]	; (26018 <register_events+0x1fc>)
   25fda:	f000 fb9f 	bl	2671c <printk>
   25fde:	481c      	ldr	r0, [pc, #112]	; (26050 <register_events+0x234>)
   25fe0:	f000 fb9c 	bl	2671c <printk>
   25fe4:	2192      	movs	r1, #146	; 0x92
   25fe6:	4810      	ldr	r0, [pc, #64]	; (26028 <register_events+0x20c>)
   25fe8:	f000 fe3d 	bl	26c66 <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   25fec:	6920      	ldr	r0, [r4, #16]
   25fee:	462a      	mov	r2, r5
   25ff0:	4621      	mov	r1, r4
   25ff2:	3028      	adds	r0, #40	; 0x28
   25ff4:	e7be      	b.n	25f74 <register_events+0x158>
		__ASSERT(false, "invalid event type\n");
   25ff6:	2399      	movs	r3, #153	; 0x99
   25ff8:	4a0b      	ldr	r2, [pc, #44]	; (26028 <register_events+0x20c>)
   25ffa:	490c      	ldr	r1, [pc, #48]	; (2602c <register_events+0x210>)
   25ffc:	4806      	ldr	r0, [pc, #24]	; (26018 <register_events+0x1fc>)
   25ffe:	f000 fb8d 	bl	2671c <printk>
   26002:	4814      	ldr	r0, [pc, #80]	; (26054 <register_events+0x238>)
   26004:	f000 fb8a 	bl	2671c <printk>
   26008:	2199      	movs	r1, #153	; 0x99
   2600a:	4807      	ldr	r0, [pc, #28]	; (26028 <register_events+0x20c>)
   2600c:	f000 fe2b 	bl	26c66 <assert_post_action>
		break;
   26010:	e7b2      	b.n	25f78 <register_events+0x15c>
   26012:	bf00      	nop
   26014:	20009c04 	.word	0x20009c04
   26018:	0002cfb2 	.word	0x0002cfb2
   2601c:	0002d0d9 	.word	0x0002d0d9
   26020:	0002d098 	.word	0x0002d098
   26024:	0002d0af 	.word	0x0002d0af
   26028:	000315be 	.word	0x000315be
   2602c:	0002dee4 	.word	0x0002dee4
   26030:	000316b9 	.word	0x000316b9
   26034:	000315df 	.word	0x000315df
   26038:	000315f9 	.word	0x000315f9
   2603c:	0003160e 	.word	0x0003160e
   26040:	0003162a 	.word	0x0003162a
   26044:	0003163b 	.word	0x0003163b
   26048:	00031658 	.word	0x00031658
   2604c:	0003166f 	.word	0x0003166f
   26050:	0003168a 	.word	0x0003168a
   26054:	000316a3 	.word	0x000316a3
   26058:	0002d072 	.word	0x0002d072
   2605c:	0002d0c4 	.word	0x0002d0c4

00026060 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   26060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   26064:	6884      	ldr	r4, [r0, #8]
{
   26066:	4605      	mov	r5, r0
   26068:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
   2606a:	b1d4      	cbz	r4, 260a2 <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
   2606c:	7863      	ldrb	r3, [r4, #1]
   2606e:	2b01      	cmp	r3, #1
   26070:	d14b      	bne.n	2610a <signal_poll_event+0xaa>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   26072:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
   26076:	d10e      	bne.n	26096 <signal_poll_event+0x36>
   26078:	23f5      	movs	r3, #245	; 0xf5
   2607a:	4a30      	ldr	r2, [pc, #192]	; (2613c <signal_poll_event+0xdc>)
   2607c:	4930      	ldr	r1, [pc, #192]	; (26140 <signal_poll_event+0xe0>)
   2607e:	4831      	ldr	r0, [pc, #196]	; (26144 <signal_poll_event+0xe4>)
   26080:	f000 fb4c 	bl	2671c <printk>
   26084:	4830      	ldr	r0, [pc, #192]	; (26148 <signal_poll_event+0xe8>)
   26086:	f000 fb49 	bl	2671c <printk>
   2608a:	21f5      	movs	r1, #245	; 0xf5
   2608c:	482b      	ldr	r0, [pc, #172]	; (2613c <signal_poll_event+0xdc>)
   2608e:	f000 fdea 	bl	26c66 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
   26092:	7b7b      	ldrb	r3, [r7, #13]
   26094:	deff      	udf	#255	; 0xff
   26096:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2609a:	f013 0302 	ands.w	r3, r3, #2
   2609e:	d10a      	bne.n	260b6 <signal_poll_event+0x56>
			retcode = signal_triggered_work(event, state);
		} else {
			;
		}

		poller->is_polling = false;
   260a0:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   260a2:	2000      	movs	r0, #0
	event->state |= state;
   260a4:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   260a6:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   260a8:	f3c3 3145 	ubfx	r1, r3, #13, #6
   260ac:	430e      	orrs	r6, r1
   260ae:	f366 3352 	bfi	r3, r6, #13, #6
   260b2:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   260b4:	e00d      	b.n	260d2 <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
   260b6:	f04f 31ff 	mov.w	r1, #4294967295
   260ba:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   260be:	f06f 0001 	mvn.w	r0, #1
   260c2:	428b      	cmp	r3, r1
   260c4:	bf08      	it	eq
   260c6:	4282      	cmpeq	r2, r0
   260c8:	d105      	bne.n	260d6 <signal_poll_event+0x76>
		poller->is_polling = false;
   260ca:	2300      	movs	r3, #0
		return -EAGAIN;
   260cc:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   260d0:	7023      	strb	r3, [r4, #0]
}
   260d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   260d6:	4638      	mov	r0, r7
   260d8:	f7fe f998 	bl	2440c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   260dc:	2e08      	cmp	r6, #8
   260de:	bf0c      	ite	eq
   260e0:	f06f 0303 	mvneq.w	r3, #3
   260e4:	2300      	movne	r3, #0
   260e6:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   260e8:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   260ec:	06db      	lsls	r3, r3, #27
   260ee:	d104      	bne.n	260fa <signal_poll_event+0x9a>
	if (!z_is_thread_ready(thread)) {
   260f0:	f854 8c48 	ldr.w	r8, [r4, #-72]
   260f4:	f1b8 0f00 	cmp.w	r8, #0
   260f8:	d001      	beq.n	260fe <signal_poll_event+0x9e>
		poller->is_polling = false;
   260fa:	2300      	movs	r3, #0
   260fc:	e7d0      	b.n	260a0 <signal_poll_event+0x40>
	z_ready_thread(thread);
   260fe:	4638      	mov	r0, r7
   26100:	f7fe fd00 	bl	24b04 <z_ready_thread>
		poller->is_polling = false;
   26104:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   26108:	e7cb      	b.n	260a2 <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
   2610a:	2b02      	cmp	r3, #2
   2610c:	d1f5      	bne.n	260fa <signal_poll_event+0x9a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2610e:	7823      	ldrb	r3, [r4, #0]
   26110:	2b00      	cmp	r3, #0
   26112:	d0c6      	beq.n	260a2 <signal_poll_event+0x42>
   26114:	f854 7c04 	ldr.w	r7, [r4, #-4]
   26118:	b177      	cbz	r7, 26138 <signal_poll_event+0xd8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2611a:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2611e:	f1a4 0914 	sub.w	r9, r4, #20
   26122:	f104 0014 	add.w	r0, r4, #20
   26126:	f7ff fb23 	bl	25770 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   2612a:	4649      	mov	r1, r9
   2612c:	4638      	mov	r0, r7
		twork->poll_result = 0;
   2612e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   26132:	f7fd fcaf 	bl	23a94 <k_work_submit_to_queue>
   26136:	e7e5      	b.n	26104 <signal_poll_event+0xa4>
		poller->is_polling = false;
   26138:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2613a:	e7b2      	b.n	260a2 <signal_poll_event+0x42>
   2613c:	000315be 	.word	0x000315be
   26140:	000316d6 	.word	0x000316d6
   26144:	0002cfb2 	.word	0x0002cfb2
   26148:	000316ec 	.word	0x000316ec

0002614c <k_poll_event_init>:
{
   2614c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2614e:	4605      	mov	r5, r0
   26150:	460f      	mov	r7, r1
   26152:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   26154:	4614      	mov	r4, r2
   26156:	b162      	cbz	r2, 26172 <k_poll_event_init+0x26>
   26158:	491b      	ldr	r1, [pc, #108]	; (261c8 <k_poll_event_init+0x7c>)
   2615a:	232d      	movs	r3, #45	; 0x2d
   2615c:	4a1b      	ldr	r2, [pc, #108]	; (261cc <k_poll_event_init+0x80>)
   2615e:	481c      	ldr	r0, [pc, #112]	; (261d0 <k_poll_event_init+0x84>)
   26160:	f000 fadc 	bl	2671c <printk>
   26164:	481b      	ldr	r0, [pc, #108]	; (261d4 <k_poll_event_init+0x88>)
   26166:	f000 fad9 	bl	2671c <printk>
   2616a:	212d      	movs	r1, #45	; 0x2d
   2616c:	4817      	ldr	r0, [pc, #92]	; (261cc <k_poll_event_init+0x80>)
   2616e:	f000 fd7a 	bl	26c66 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   26172:	2f1f      	cmp	r7, #31
   26174:	d90c      	bls.n	26190 <k_poll_event_init+0x44>
   26176:	4918      	ldr	r1, [pc, #96]	; (261d8 <k_poll_event_init+0x8c>)
   26178:	232f      	movs	r3, #47	; 0x2f
   2617a:	4a14      	ldr	r2, [pc, #80]	; (261cc <k_poll_event_init+0x80>)
   2617c:	4814      	ldr	r0, [pc, #80]	; (261d0 <k_poll_event_init+0x84>)
   2617e:	f000 facd 	bl	2671c <printk>
   26182:	4816      	ldr	r0, [pc, #88]	; (261dc <k_poll_event_init+0x90>)
   26184:	f000 faca 	bl	2671c <printk>
   26188:	212f      	movs	r1, #47	; 0x2f
   2618a:	4810      	ldr	r0, [pc, #64]	; (261cc <k_poll_event_init+0x80>)
   2618c:	f000 fd6b 	bl	26c66 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   26190:	b966      	cbnz	r6, 261ac <k_poll_event_init+0x60>
   26192:	4913      	ldr	r1, [pc, #76]	; (261e0 <k_poll_event_init+0x94>)
   26194:	2330      	movs	r3, #48	; 0x30
   26196:	4a0d      	ldr	r2, [pc, #52]	; (261cc <k_poll_event_init+0x80>)
   26198:	480d      	ldr	r0, [pc, #52]	; (261d0 <k_poll_event_init+0x84>)
   2619a:	f000 fabf 	bl	2671c <printk>
   2619e:	4811      	ldr	r0, [pc, #68]	; (261e4 <k_poll_event_init+0x98>)
   261a0:	f000 fabc 	bl	2671c <printk>
   261a4:	2130      	movs	r1, #48	; 0x30
   261a6:	4809      	ldr	r0, [pc, #36]	; (261cc <k_poll_event_init+0x80>)
   261a8:	f000 fd5d 	bl	26c66 <assert_post_action>
	event->poller = NULL;
   261ac:	2300      	movs	r3, #0
	event->type = type;
   261ae:	04e4      	lsls	r4, r4, #19
   261b0:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   261b2:	60ab      	str	r3, [r5, #8]
	event->type = type;
   261b4:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
   261b8:	7b2b      	ldrb	r3, [r5, #12]
   261ba:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
   261be:	433c      	orrs	r4, r7
   261c0:	431c      	orrs	r4, r3
	event->obj = obj;
   261c2:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   261c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   261c8:	0003170b 	.word	0x0003170b
   261cc:	000315be 	.word	0x000315be
   261d0:	0002cfb2 	.word	0x0002cfb2
   261d4:	0003172b 	.word	0x0003172b
   261d8:	00031751 	.word	0x00031751
   261dc:	00031775 	.word	0x00031775
   261e0:	00031785 	.word	0x00031785
   261e4:	00031798 	.word	0x00031798

000261e8 <z_impl_k_poll>:
{
   261e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   261ec:	461f      	mov	r7, r3
	struct z_poller *poller = &_current->poller;
   261ee:	4b75      	ldr	r3, [pc, #468]	; (263c4 <z_impl_k_poll+0x1dc>)
{
   261f0:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   261f2:	689d      	ldr	r5, [r3, #8]
	poller->is_polling = true;
   261f4:	2301      	movs	r3, #1
{
   261f6:	4688      	mov	r8, r1
   261f8:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   261fa:	f105 0960 	add.w	r9, r5, #96	; 0x60
	poller->is_polling = true;
   261fe:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   26202:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
   26206:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2620a:	b173      	cbz	r3, 2622a <z_impl_k_poll+0x42>
   2620c:	496e      	ldr	r1, [pc, #440]	; (263c8 <z_impl_k_poll+0x1e0>)
   2620e:	f44f 738b 	mov.w	r3, #278	; 0x116
   26212:	4a6e      	ldr	r2, [pc, #440]	; (263cc <z_impl_k_poll+0x1e4>)
   26214:	486e      	ldr	r0, [pc, #440]	; (263d0 <z_impl_k_poll+0x1e8>)
   26216:	f000 fa81 	bl	2671c <printk>
   2621a:	486e      	ldr	r0, [pc, #440]	; (263d4 <z_impl_k_poll+0x1ec>)
   2621c:	f000 fa7e 	bl	2671c <printk>
   26220:	f44f 718b 	mov.w	r1, #278	; 0x116
   26224:	4869      	ldr	r0, [pc, #420]	; (263cc <z_impl_k_poll+0x1e4>)
   26226:	f000 fd1e 	bl	26c66 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   2622a:	b974      	cbnz	r4, 2624a <z_impl_k_poll+0x62>
   2622c:	496a      	ldr	r1, [pc, #424]	; (263d8 <z_impl_k_poll+0x1f0>)
   2622e:	f240 1317 	movw	r3, #279	; 0x117
   26232:	4a66      	ldr	r2, [pc, #408]	; (263cc <z_impl_k_poll+0x1e4>)
   26234:	4866      	ldr	r0, [pc, #408]	; (263d0 <z_impl_k_poll+0x1e8>)
   26236:	f000 fa71 	bl	2671c <printk>
   2623a:	4868      	ldr	r0, [pc, #416]	; (263dc <z_impl_k_poll+0x1f4>)
   2623c:	f000 fa6e 	bl	2671c <printk>
   26240:	f240 1117 	movw	r1, #279	; 0x117
   26244:	4861      	ldr	r0, [pc, #388]	; (263cc <z_impl_k_poll+0x1e4>)
   26246:	f000 fd0e 	bl	26c66 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   2624a:	f1b8 0f00 	cmp.w	r8, #0
   2624e:	da0e      	bge.n	2626e <z_impl_k_poll+0x86>
   26250:	4963      	ldr	r1, [pc, #396]	; (263e0 <z_impl_k_poll+0x1f8>)
   26252:	f44f 738c 	mov.w	r3, #280	; 0x118
   26256:	4a5d      	ldr	r2, [pc, #372]	; (263cc <z_impl_k_poll+0x1e4>)
   26258:	485d      	ldr	r0, [pc, #372]	; (263d0 <z_impl_k_poll+0x1e8>)
   2625a:	f000 fa5f 	bl	2671c <printk>
   2625e:	4861      	ldr	r0, [pc, #388]	; (263e4 <z_impl_k_poll+0x1fc>)
   26260:	f000 fa5c 	bl	2671c <printk>
   26264:	f44f 718c 	mov.w	r1, #280	; 0x118
   26268:	4858      	ldr	r0, [pc, #352]	; (263cc <z_impl_k_poll+0x1e4>)
   2626a:	f000 fcfc 	bl	26c66 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   2626e:	ea56 0307 	orrs.w	r3, r6, r7
   26272:	bf0c      	ite	eq
   26274:	2301      	moveq	r3, #1
   26276:	2300      	movne	r3, #0
   26278:	4641      	mov	r1, r8
   2627a:	464a      	mov	r2, r9
   2627c:	4620      	mov	r0, r4
   2627e:	f7ff fdcd 	bl	25e1c <register_events>
   26282:	4680      	mov	r8, r0
	__asm__ volatile(
   26284:	f04f 0320 	mov.w	r3, #32
   26288:	f3ef 8911 	mrs	r9, BASEPRI
   2628c:	f383 8811 	msr	BASEPRI, r3
   26290:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26294:	4854      	ldr	r0, [pc, #336]	; (263e8 <z_impl_k_poll+0x200>)
   26296:	f7fc fd9f 	bl	22dd8 <z_spin_lock_valid>
   2629a:	b968      	cbnz	r0, 262b8 <z_impl_k_poll+0xd0>
   2629c:	2381      	movs	r3, #129	; 0x81
   2629e:	4a53      	ldr	r2, [pc, #332]	; (263ec <z_impl_k_poll+0x204>)
   262a0:	4953      	ldr	r1, [pc, #332]	; (263f0 <z_impl_k_poll+0x208>)
   262a2:	484b      	ldr	r0, [pc, #300]	; (263d0 <z_impl_k_poll+0x1e8>)
   262a4:	f000 fa3a 	bl	2671c <printk>
   262a8:	494f      	ldr	r1, [pc, #316]	; (263e8 <z_impl_k_poll+0x200>)
   262aa:	4852      	ldr	r0, [pc, #328]	; (263f4 <z_impl_k_poll+0x20c>)
   262ac:	f000 fa36 	bl	2671c <printk>
   262b0:	2181      	movs	r1, #129	; 0x81
   262b2:	484e      	ldr	r0, [pc, #312]	; (263ec <z_impl_k_poll+0x204>)
   262b4:	f000 fcd7 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   262b8:	484b      	ldr	r0, [pc, #300]	; (263e8 <z_impl_k_poll+0x200>)
   262ba:	f7fc fda9 	bl	22e10 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   262be:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   262c2:	b9fb      	cbnz	r3, 26304 <z_impl_k_poll+0x11c>
		clear_event_registrations(events, events_registered, key);
   262c4:	4620      	mov	r0, r4
   262c6:	464a      	mov	r2, r9
   262c8:	4641      	mov	r1, r8
   262ca:	f7ff fcd9 	bl	25c80 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   262ce:	4846      	ldr	r0, [pc, #280]	; (263e8 <z_impl_k_poll+0x200>)
   262d0:	f7fc fd90 	bl	22df4 <z_spin_unlock_valid>
   262d4:	b968      	cbnz	r0, 262f2 <z_impl_k_poll+0x10a>
   262d6:	23ac      	movs	r3, #172	; 0xac
   262d8:	4a44      	ldr	r2, [pc, #272]	; (263ec <z_impl_k_poll+0x204>)
   262da:	4947      	ldr	r1, [pc, #284]	; (263f8 <z_impl_k_poll+0x210>)
   262dc:	483c      	ldr	r0, [pc, #240]	; (263d0 <z_impl_k_poll+0x1e8>)
   262de:	f000 fa1d 	bl	2671c <printk>
   262e2:	4941      	ldr	r1, [pc, #260]	; (263e8 <z_impl_k_poll+0x200>)
   262e4:	4845      	ldr	r0, [pc, #276]	; (263fc <z_impl_k_poll+0x214>)
   262e6:	f000 fa19 	bl	2671c <printk>
   262ea:	21ac      	movs	r1, #172	; 0xac
   262ec:	483f      	ldr	r0, [pc, #252]	; (263ec <z_impl_k_poll+0x204>)
   262ee:	f000 fcba 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   262f2:	f389 8811 	msr	BASEPRI, r9
   262f6:	f3bf 8f6f 	isb	sy
		return 0;
   262fa:	2500      	movs	r5, #0
}
   262fc:	4628      	mov	r0, r5
   262fe:	b003      	add	sp, #12
   26300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   26304:	2300      	movs	r3, #0
   26306:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2630a:	ea56 0307 	orrs.w	r3, r6, r7
   2630e:	d118      	bne.n	26342 <z_impl_k_poll+0x15a>
   26310:	4835      	ldr	r0, [pc, #212]	; (263e8 <z_impl_k_poll+0x200>)
   26312:	f7fc fd6f 	bl	22df4 <z_spin_unlock_valid>
   26316:	b968      	cbnz	r0, 26334 <z_impl_k_poll+0x14c>
   26318:	23ac      	movs	r3, #172	; 0xac
   2631a:	4a34      	ldr	r2, [pc, #208]	; (263ec <z_impl_k_poll+0x204>)
   2631c:	4936      	ldr	r1, [pc, #216]	; (263f8 <z_impl_k_poll+0x210>)
   2631e:	482c      	ldr	r0, [pc, #176]	; (263d0 <z_impl_k_poll+0x1e8>)
   26320:	f000 f9fc 	bl	2671c <printk>
   26324:	4930      	ldr	r1, [pc, #192]	; (263e8 <z_impl_k_poll+0x200>)
   26326:	4835      	ldr	r0, [pc, #212]	; (263fc <z_impl_k_poll+0x214>)
   26328:	f000 f9f8 	bl	2671c <printk>
   2632c:	21ac      	movs	r1, #172	; 0xac
   2632e:	482f      	ldr	r0, [pc, #188]	; (263ec <z_impl_k_poll+0x204>)
   26330:	f000 fc99 	bl	26c66 <assert_post_action>
   26334:	f389 8811 	msr	BASEPRI, r9
   26338:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2633c:	f06f 050a 	mvn.w	r5, #10
   26340:	e7dc      	b.n	262fc <z_impl_k_poll+0x114>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   26342:	4649      	mov	r1, r9
   26344:	e9cd 6700 	strd	r6, r7, [sp]
   26348:	4a2d      	ldr	r2, [pc, #180]	; (26400 <z_impl_k_poll+0x218>)
   2634a:	4827      	ldr	r0, [pc, #156]	; (263e8 <z_impl_k_poll+0x200>)
   2634c:	f7fe f9a0 	bl	24690 <z_pend_curr>
   26350:	4605      	mov	r5, r0
	__asm__ volatile(
   26352:	f04f 0320 	mov.w	r3, #32
   26356:	f3ef 8611 	mrs	r6, BASEPRI
   2635a:	f383 8811 	msr	BASEPRI, r3
   2635e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26362:	4821      	ldr	r0, [pc, #132]	; (263e8 <z_impl_k_poll+0x200>)
   26364:	f7fc fd38 	bl	22dd8 <z_spin_lock_valid>
   26368:	b968      	cbnz	r0, 26386 <z_impl_k_poll+0x19e>
   2636a:	2381      	movs	r3, #129	; 0x81
   2636c:	4a1f      	ldr	r2, [pc, #124]	; (263ec <z_impl_k_poll+0x204>)
   2636e:	4920      	ldr	r1, [pc, #128]	; (263f0 <z_impl_k_poll+0x208>)
   26370:	4817      	ldr	r0, [pc, #92]	; (263d0 <z_impl_k_poll+0x1e8>)
   26372:	f000 f9d3 	bl	2671c <printk>
   26376:	491c      	ldr	r1, [pc, #112]	; (263e8 <z_impl_k_poll+0x200>)
   26378:	481e      	ldr	r0, [pc, #120]	; (263f4 <z_impl_k_poll+0x20c>)
   2637a:	f000 f9cf 	bl	2671c <printk>
   2637e:	2181      	movs	r1, #129	; 0x81
   26380:	481a      	ldr	r0, [pc, #104]	; (263ec <z_impl_k_poll+0x204>)
   26382:	f000 fc70 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   26386:	4818      	ldr	r0, [pc, #96]	; (263e8 <z_impl_k_poll+0x200>)
   26388:	f7fc fd42 	bl	22e10 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   2638c:	4620      	mov	r0, r4
   2638e:	4632      	mov	r2, r6
   26390:	4641      	mov	r1, r8
   26392:	f7ff fc75 	bl	25c80 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26396:	4814      	ldr	r0, [pc, #80]	; (263e8 <z_impl_k_poll+0x200>)
   26398:	f7fc fd2c 	bl	22df4 <z_spin_unlock_valid>
   2639c:	b968      	cbnz	r0, 263ba <z_impl_k_poll+0x1d2>
   2639e:	23ac      	movs	r3, #172	; 0xac
   263a0:	4a12      	ldr	r2, [pc, #72]	; (263ec <z_impl_k_poll+0x204>)
   263a2:	4915      	ldr	r1, [pc, #84]	; (263f8 <z_impl_k_poll+0x210>)
   263a4:	480a      	ldr	r0, [pc, #40]	; (263d0 <z_impl_k_poll+0x1e8>)
   263a6:	f000 f9b9 	bl	2671c <printk>
   263aa:	490f      	ldr	r1, [pc, #60]	; (263e8 <z_impl_k_poll+0x200>)
   263ac:	4813      	ldr	r0, [pc, #76]	; (263fc <z_impl_k_poll+0x214>)
   263ae:	f000 f9b5 	bl	2671c <printk>
   263b2:	21ac      	movs	r1, #172	; 0xac
   263b4:	480d      	ldr	r0, [pc, #52]	; (263ec <z_impl_k_poll+0x204>)
   263b6:	f000 fc56 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   263ba:	f386 8811 	msr	BASEPRI, r6
   263be:	f3bf 8f6f 	isb	sy
	return swap_rc;
   263c2:	e79b      	b.n	262fc <z_impl_k_poll+0x114>
   263c4:	20009ba8 	.word	0x20009ba8
   263c8:	000311e7 	.word	0x000311e7
   263cc:	000315be 	.word	0x000315be
   263d0:	0002cfb2 	.word	0x0002cfb2
   263d4:	00030725 	.word	0x00030725
   263d8:	000317b2 	.word	0x000317b2
   263dc:	000317c8 	.word	0x000317c8
   263e0:	000317d7 	.word	0x000317d7
   263e4:	000317e7 	.word	0x000317e7
   263e8:	20009c04 	.word	0x20009c04
   263ec:	0002d072 	.word	0x0002d072
   263f0:	0002d0c4 	.word	0x0002d0c4
   263f4:	0002d0d9 	.word	0x0002d0d9
   263f8:	0002d098 	.word	0x0002d098
   263fc:	0002d0af 	.word	0x0002d0af
   26400:	20008368 	.word	0x20008368

00026404 <z_impl_k_poll_signal_raise>:
{
   26404:	b570      	push	{r4, r5, r6, lr}
   26406:	4604      	mov	r4, r0
   26408:	460d      	mov	r5, r1
	__asm__ volatile(
   2640a:	f04f 0320 	mov.w	r3, #32
   2640e:	f3ef 8611 	mrs	r6, BASEPRI
   26412:	f383 8811 	msr	BASEPRI, r3
   26416:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2641a:	4821      	ldr	r0, [pc, #132]	; (264a0 <z_impl_k_poll_signal_raise+0x9c>)
   2641c:	f7fc fcdc 	bl	22dd8 <z_spin_lock_valid>
   26420:	b968      	cbnz	r0, 2643e <z_impl_k_poll_signal_raise+0x3a>
   26422:	2381      	movs	r3, #129	; 0x81
   26424:	4a1f      	ldr	r2, [pc, #124]	; (264a4 <z_impl_k_poll_signal_raise+0xa0>)
   26426:	4920      	ldr	r1, [pc, #128]	; (264a8 <z_impl_k_poll_signal_raise+0xa4>)
   26428:	4820      	ldr	r0, [pc, #128]	; (264ac <z_impl_k_poll_signal_raise+0xa8>)
   2642a:	f000 f977 	bl	2671c <printk>
   2642e:	491c      	ldr	r1, [pc, #112]	; (264a0 <z_impl_k_poll_signal_raise+0x9c>)
   26430:	481f      	ldr	r0, [pc, #124]	; (264b0 <z_impl_k_poll_signal_raise+0xac>)
   26432:	f000 f973 	bl	2671c <printk>
   26436:	2181      	movs	r1, #129	; 0x81
   26438:	481a      	ldr	r0, [pc, #104]	; (264a4 <z_impl_k_poll_signal_raise+0xa0>)
   2643a:	f000 fc14 	bl	26c66 <assert_post_action>
	z_spin_lock_set_owner(l);
   2643e:	4818      	ldr	r0, [pc, #96]	; (264a0 <z_impl_k_poll_signal_raise+0x9c>)
   26440:	f7fc fce6 	bl	22e10 <z_spin_lock_set_owner>
	sig->signaled = 1U;
   26444:	2101      	movs	r1, #1
	return list->head == list;
   26446:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   26448:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   2644a:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   2644c:	60a1      	str	r1, [r4, #8]
   2644e:	d117      	bne.n	26480 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26450:	4813      	ldr	r0, [pc, #76]	; (264a0 <z_impl_k_poll_signal_raise+0x9c>)
   26452:	f7fc fccf 	bl	22df4 <z_spin_unlock_valid>
   26456:	b968      	cbnz	r0, 26474 <z_impl_k_poll_signal_raise+0x70>
   26458:	23ac      	movs	r3, #172	; 0xac
   2645a:	4a12      	ldr	r2, [pc, #72]	; (264a4 <z_impl_k_poll_signal_raise+0xa0>)
   2645c:	4915      	ldr	r1, [pc, #84]	; (264b4 <z_impl_k_poll_signal_raise+0xb0>)
   2645e:	4813      	ldr	r0, [pc, #76]	; (264ac <z_impl_k_poll_signal_raise+0xa8>)
   26460:	f000 f95c 	bl	2671c <printk>
   26464:	490e      	ldr	r1, [pc, #56]	; (264a0 <z_impl_k_poll_signal_raise+0x9c>)
   26466:	4814      	ldr	r0, [pc, #80]	; (264b8 <z_impl_k_poll_signal_raise+0xb4>)
   26468:	f000 f958 	bl	2671c <printk>
   2646c:	21ac      	movs	r1, #172	; 0xac
   2646e:	480d      	ldr	r0, [pc, #52]	; (264a4 <z_impl_k_poll_signal_raise+0xa0>)
   26470:	f000 fbf9 	bl	26c66 <assert_post_action>
	__asm__ volatile(
   26474:	f386 8811 	msr	BASEPRI, r6
   26478:	f3bf 8f6f 	isb	sy
		return 0;
   2647c:	2400      	movs	r4, #0
   2647e:	e00d      	b.n	2649c <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
   26480:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   26484:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26486:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26488:	2300      	movs	r3, #0
	node->prev = NULL;
   2648a:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2648e:	f7ff fde7 	bl	26060 <signal_poll_event>
	z_reschedule(&lock, key);
   26492:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   26494:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   26496:	4802      	ldr	r0, [pc, #8]	; (264a0 <z_impl_k_poll_signal_raise+0x9c>)
   26498:	f7fd febc 	bl	24214 <z_reschedule>
}
   2649c:	4620      	mov	r0, r4
   2649e:	bd70      	pop	{r4, r5, r6, pc}
   264a0:	20009c04 	.word	0x20009c04
   264a4:	0002d072 	.word	0x0002d072
   264a8:	0002d0c4 	.word	0x0002d0c4
   264ac:	0002cfb2 	.word	0x0002cfb2
   264b0:	0002d0d9 	.word	0x0002d0d9
   264b4:	0002d098 	.word	0x0002d098
   264b8:	0002d0af 	.word	0x0002d0af

000264bc <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   264bc:	2304      	movs	r3, #4
   264be:	18d2      	adds	r2, r2, r3
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   264c0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   264c4:	4606      	mov	r6, r0
   264c6:	460d      	mov	r5, r1
   264c8:	d20a      	bcs.n	264e0 <z_heap_aligned_alloc+0x24>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   264ca:	f04f 0800 	mov.w	r8, #0
   264ce:	f04f 0900 	mov.w	r9, #0
   264d2:	4319      	orrs	r1, r3
   264d4:	e9cd 8900 	strd	r8, r9, [sp]
   264d8:	f7fc f932 	bl	22740 <k_heap_aligned_alloc>
	if (mem == NULL) {
   264dc:	4604      	mov	r4, r0
   264de:	b920      	cbnz	r0, 264ea <z_heap_aligned_alloc+0x2e>
		return NULL;
   264e0:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   264e2:	4620      	mov	r0, r4
   264e4:	b002      	add	sp, #8
   264e6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
   264ea:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   264ee:	2d00      	cmp	r5, #0
   264f0:	d0f7      	beq.n	264e2 <z_heap_aligned_alloc+0x26>
   264f2:	1e6b      	subs	r3, r5, #1
   264f4:	421c      	tst	r4, r3
   264f6:	d0f4      	beq.n	264e2 <z_heap_aligned_alloc+0x26>
   264f8:	2325      	movs	r3, #37	; 0x25
   264fa:	4a07      	ldr	r2, [pc, #28]	; (26518 <z_heap_aligned_alloc+0x5c>)
   264fc:	4907      	ldr	r1, [pc, #28]	; (2651c <z_heap_aligned_alloc+0x60>)
   264fe:	4808      	ldr	r0, [pc, #32]	; (26520 <z_heap_aligned_alloc+0x64>)
   26500:	f000 f90c 	bl	2671c <printk>
   26504:	4621      	mov	r1, r4
   26506:	462a      	mov	r2, r5
   26508:	4806      	ldr	r0, [pc, #24]	; (26524 <z_heap_aligned_alloc+0x68>)
   2650a:	f000 f907 	bl	2671c <printk>
   2650e:	2125      	movs	r1, #37	; 0x25
   26510:	4801      	ldr	r0, [pc, #4]	; (26518 <z_heap_aligned_alloc+0x5c>)
   26512:	f000 fba8 	bl	26c66 <assert_post_action>
   26516:	e7e4      	b.n	264e2 <z_heap_aligned_alloc+0x26>
   26518:	000317f4 	.word	0x000317f4
   2651c:	00031818 	.word	0x00031818
   26520:	0002cfb2 	.word	0x0002cfb2
   26524:	0003184a 	.word	0x0003184a

00026528 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   26528:	2803      	cmp	r0, #3
{
   2652a:	b538      	push	{r3, r4, r5, lr}
   2652c:	4604      	mov	r4, r0
   2652e:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   26530:	d901      	bls.n	26536 <k_aligned_alloc+0xe>
   26532:	0783      	lsls	r3, r0, #30
   26534:	d00c      	beq.n	26550 <k_aligned_alloc+0x28>
   26536:	4912      	ldr	r1, [pc, #72]	; (26580 <k_aligned_alloc+0x58>)
   26538:	2342      	movs	r3, #66	; 0x42
   2653a:	4a12      	ldr	r2, [pc, #72]	; (26584 <k_aligned_alloc+0x5c>)
   2653c:	4812      	ldr	r0, [pc, #72]	; (26588 <k_aligned_alloc+0x60>)
   2653e:	f000 f8ed 	bl	2671c <printk>
   26542:	4812      	ldr	r0, [pc, #72]	; (2658c <k_aligned_alloc+0x64>)
   26544:	f000 f8ea 	bl	2671c <printk>
   26548:	2142      	movs	r1, #66	; 0x42
   2654a:	480e      	ldr	r0, [pc, #56]	; (26584 <k_aligned_alloc+0x5c>)
   2654c:	f000 fb8b 	bl	26c66 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   26550:	1e63      	subs	r3, r4, #1
   26552:	4223      	tst	r3, r4
   26554:	d00c      	beq.n	26570 <k_aligned_alloc+0x48>
   26556:	490e      	ldr	r1, [pc, #56]	; (26590 <k_aligned_alloc+0x68>)
   26558:	2346      	movs	r3, #70	; 0x46
   2655a:	4a0a      	ldr	r2, [pc, #40]	; (26584 <k_aligned_alloc+0x5c>)
   2655c:	480a      	ldr	r0, [pc, #40]	; (26588 <k_aligned_alloc+0x60>)
   2655e:	f000 f8dd 	bl	2671c <printk>
   26562:	480c      	ldr	r0, [pc, #48]	; (26594 <k_aligned_alloc+0x6c>)
   26564:	f000 f8da 	bl	2671c <printk>
   26568:	2146      	movs	r1, #70	; 0x46
   2656a:	4806      	ldr	r0, [pc, #24]	; (26584 <k_aligned_alloc+0x5c>)
   2656c:	f000 fb7b 	bl	26c66 <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   26570:	462a      	mov	r2, r5
   26572:	4621      	mov	r1, r4

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   26574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   26578:	4807      	ldr	r0, [pc, #28]	; (26598 <k_aligned_alloc+0x70>)
   2657a:	f7ff bf9f 	b.w	264bc <z_heap_aligned_alloc>
   2657e:	bf00      	nop
   26580:	00031872 	.word	0x00031872
   26584:	000317f4 	.word	0x000317f4
   26588:	0002cfb2 	.word	0x0002cfb2
   2658c:	000318af 	.word	0x000318af
   26590:	0002d1bd 	.word	0x0002d1bd
   26594:	0002d1d8 	.word	0x0002d1d8
   26598:	200084fc 	.word	0x200084fc

0002659c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   2659c:	b538      	push	{r3, r4, r5, lr}
   2659e:	4604      	mov	r4, r0
   265a0:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   265a2:	f005 f9d7 	bl	2b954 <k_is_in_isr>
   265a6:	b950      	cbnz	r0, 265be <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   265a8:	4b06      	ldr	r3, [pc, #24]	; (265c4 <z_thread_aligned_alloc+0x28>)
   265aa:	689b      	ldr	r3, [r3, #8]
   265ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   265ae:	b143      	cbz	r3, 265c2 <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   265b0:	462a      	mov	r2, r5
   265b2:	4621      	mov	r1, r4
   265b4:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   265b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   265ba:	f7ff bf7f 	b.w	264bc <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   265be:	4b02      	ldr	r3, [pc, #8]	; (265c8 <z_thread_aligned_alloc+0x2c>)
   265c0:	e7f6      	b.n	265b0 <z_thread_aligned_alloc+0x14>
}
   265c2:	bd38      	pop	{r3, r4, r5, pc}
   265c4:	20009ba8 	.word	0x20009ba8
   265c8:	200084fc 	.word	0x200084fc

000265cc <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   265cc:	4a02      	ldr	r2, [pc, #8]	; (265d8 <boot_banner+0xc>)
   265ce:	4903      	ldr	r1, [pc, #12]	; (265dc <boot_banner+0x10>)
   265d0:	4803      	ldr	r0, [pc, #12]	; (265e0 <boot_banner+0x14>)
   265d2:	f000 b8a3 	b.w	2671c <printk>
   265d6:	bf00      	nop
   265d8:	00030727 	.word	0x00030727
   265dc:	000318dc 	.word	0x000318dc
   265e0:	000318ec 	.word	0x000318ec

000265e4 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   265e4:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   265e6:	f04f 0c0a 	mov.w	ip, #10
{
   265ea:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   265ec:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   265ee:	2000      	movs	r0, #0
	uint8_t divisor = 100;
   265f0:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   265f2:	b111      	cbz	r1, 265fa <u8_to_dec+0x16>
   265f4:	3e01      	subs	r6, #1
   265f6:	d101      	bne.n	265fc <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   265f8:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   265fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		digit = value / divisor;
   265fc:	fbb2 f7f4 	udiv	r7, r2, r4
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   26600:	42a2      	cmp	r2, r4
		digit = value / divisor;
   26602:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   26604:	d202      	bcs.n	2660c <u8_to_dec+0x28>
   26606:	2c01      	cmp	r4, #1
   26608:	d000      	beq.n	2660c <u8_to_dec+0x28>
   2660a:	b130      	cbz	r0, 2661a <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   2660c:	3330      	adds	r3, #48	; 0x30
   2660e:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   26612:	3901      	subs	r1, #1
			num_digits++;
   26614:	1c43      	adds	r3, r0, #1
			buflen--;
   26616:	b2c9      	uxtb	r1, r1
			num_digits++;
   26618:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   2661a:	fb04 2217 	mls	r2, r4, r7, r2
		divisor /= 10;
   2661e:	fbb4 f4fc 	udiv	r4, r4, ip
   26622:	b2d2      	uxtb	r2, r2
   26624:	e7e5      	b.n	265f2 <u8_to_dec+0xe>

00026626 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   26626:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2662a:	b2db      	uxtb	r3, r3
   2662c:	2b09      	cmp	r3, #9
   2662e:	d802      	bhi.n	26636 <char2hex+0x10>
		*x = c - '0';
   26630:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   26632:	2000      	movs	r0, #0
   26634:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   26636:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2663a:	2b05      	cmp	r3, #5
   2663c:	d802      	bhi.n	26644 <char2hex+0x1e>
		*x = c - 'a' + 10;
   2663e:	3857      	subs	r0, #87	; 0x57
   26640:	7008      	strb	r0, [r1, #0]
   26642:	e7f6      	b.n	26632 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   26644:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   26648:	2b05      	cmp	r3, #5
   2664a:	d801      	bhi.n	26650 <char2hex+0x2a>
		*x = c - 'A' + 10;
   2664c:	3837      	subs	r0, #55	; 0x37
   2664e:	e7f7      	b.n	26640 <char2hex+0x1a>
		return -EINVAL;
   26650:	f06f 0015 	mvn.w	r0, #21
}
   26654:	4770      	bx	lr

00026656 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   26656:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26658:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   2665a:	f001 0001 	and.w	r0, r1, #1
   2665e:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   26662:	429d      	cmp	r5, r3
   26664:	ea4f 0651 	mov.w	r6, r1, lsr #1
   26668:	d903      	bls.n	26672 <hex2bin+0x1c>
		return 0;
   2666a:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   2666c:	4628      	mov	r0, r5
   2666e:	b003      	add	sp, #12
   26670:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   26672:	b158      	cbz	r0, 2668c <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   26674:	7820      	ldrb	r0, [r4, #0]
   26676:	f10d 0107 	add.w	r1, sp, #7
   2667a:	f7ff ffd4 	bl	26626 <char2hex>
   2667e:	2800      	cmp	r0, #0
   26680:	dbf3      	blt.n	2666a <hex2bin+0x14>
		buf[0] = dec;
   26682:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   26686:	3401      	adds	r4, #1
		buf[0] = dec;
   26688:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2668c:	3401      	adds	r4, #1
   2668e:	4416      	add	r6, r2
   26690:	42b2      	cmp	r2, r6
   26692:	d0eb      	beq.n	2666c <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   26694:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   26698:	f10d 0107 	add.w	r1, sp, #7
   2669c:	f7ff ffc3 	bl	26626 <char2hex>
   266a0:	2800      	cmp	r0, #0
   266a2:	dbe2      	blt.n	2666a <hex2bin+0x14>
		buf[i] = dec << 4;
   266a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   266a8:	f10d 0107 	add.w	r1, sp, #7
		buf[i] = dec << 4;
   266ac:	011b      	lsls	r3, r3, #4
   266ae:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   266b0:	f814 0b02 	ldrb.w	r0, [r4], #2
   266b4:	f7ff ffb7 	bl	26626 <char2hex>
   266b8:	2800      	cmp	r0, #0
   266ba:	dbd6      	blt.n	2666a <hex2bin+0x14>
		buf[i] += dec;
   266bc:	7813      	ldrb	r3, [r2, #0]
   266be:	f89d 1007 	ldrb.w	r1, [sp, #7]
   266c2:	440b      	add	r3, r1
   266c4:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   266c8:	e7e2      	b.n	26690 <hex2bin+0x3a>

000266ca <sys_notify_validate>:
	if (notify == NULL) {
   266ca:	4603      	mov	r3, r0
   266cc:	b140      	cbz	r0, 266e0 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   266ce:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   266d0:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   266d4:	2a02      	cmp	r2, #2
   266d6:	d006      	beq.n	266e6 <sys_notify_validate+0x1c>
   266d8:	2a03      	cmp	r2, #3
   266da:	d004      	beq.n	266e6 <sys_notify_validate+0x1c>
   266dc:	2a01      	cmp	r2, #1
   266de:	d005      	beq.n	266ec <sys_notify_validate+0x22>
		return -EINVAL;
   266e0:	f06f 0015 	mvn.w	r0, #21
}
   266e4:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   266e6:	681a      	ldr	r2, [r3, #0]
   266e8:	2a00      	cmp	r2, #0
   266ea:	d0f9      	beq.n	266e0 <sys_notify_validate+0x16>
		notify->result = 0;
   266ec:	2000      	movs	r0, #0
   266ee:	6098      	str	r0, [r3, #8]
   266f0:	4770      	bx	lr

000266f2 <arch_printk_char_out>:
}
   266f2:	2000      	movs	r0, #0
   266f4:	4770      	bx	lr

000266f6 <str_out>:
{
   266f6:	b530      	push	{r4, r5, lr}
   266f8:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   266fa:	680c      	ldr	r4, [r1, #0]
   266fc:	1c55      	adds	r5, r2, #1
   266fe:	b114      	cbz	r4, 26706 <str_out+0x10>
   26700:	684b      	ldr	r3, [r1, #4]
   26702:	4293      	cmp	r3, r2
   26704:	dc01      	bgt.n	2670a <str_out+0x14>
		ctx->count++;
   26706:	608d      	str	r5, [r1, #8]
}
   26708:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2670a:	3b01      	subs	r3, #1
   2670c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2670e:	bf08      	it	eq
   26710:	2200      	moveq	r2, #0
   26712:	608d      	str	r5, [r1, #8]
   26714:	bf0c      	ite	eq
   26716:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   26718:	54a0      	strbne	r0, [r4, r2]
   2671a:	e7f5      	b.n	26708 <str_out+0x12>

0002671c <printk>:
{
   2671c:	b40f      	push	{r0, r1, r2, r3}
   2671e:	b507      	push	{r0, r1, r2, lr}
   26720:	a904      	add	r1, sp, #16
   26722:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   26726:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   26728:	f7ea ff56 	bl	115d8 <vprintk>
}
   2672c:	b003      	add	sp, #12
   2672e:	f85d eb04 	ldr.w	lr, [sp], #4
   26732:	b004      	add	sp, #16
   26734:	4770      	bx	lr

00026736 <snprintk>:
{
   26736:	b40c      	push	{r2, r3}
   26738:	b507      	push	{r0, r1, r2, lr}
   2673a:	ab04      	add	r3, sp, #16
   2673c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   26740:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   26742:	f7ea ff57 	bl	115f4 <vsnprintk>
}
   26746:	b003      	add	sp, #12
   26748:	f85d eb04 	ldr.w	lr, [sp], #4
   2674c:	b002      	add	sp, #8
   2674e:	4770      	bx	lr

00026750 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   26750:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   26752:	f013 0307 	ands.w	r3, r3, #7
   26756:	d105      	bne.n	26764 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   26758:	6803      	ldr	r3, [r0, #0]
   2675a:	2b00      	cmp	r3, #0
		evt = EVT_START;
   2675c:	bf0c      	ite	eq
   2675e:	2000      	moveq	r0, #0
   26760:	2003      	movne	r0, #3
   26762:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   26764:	2b02      	cmp	r3, #2
   26766:	d105      	bne.n	26774 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   26768:	8bc3      	ldrh	r3, [r0, #30]
   2676a:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   2676c:	bf14      	ite	ne
   2676e:	2000      	movne	r0, #0
   26770:	2004      	moveq	r0, #4
   26772:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   26774:	2b01      	cmp	r3, #1
   26776:	d105      	bne.n	26784 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   26778:	6803      	ldr	r3, [r0, #0]
   2677a:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   2677c:	bf0c      	ite	eq
   2677e:	2000      	moveq	r0, #0
   26780:	2005      	movne	r0, #5
   26782:	4770      	bx	lr
	int evt = EVT_NOP;
   26784:	2000      	movs	r0, #0
}
   26786:	4770      	bx	lr

00026788 <notify_one>:
{
   26788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2678c:	460d      	mov	r5, r1
   2678e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   26790:	4619      	mov	r1, r3
   26792:	1d28      	adds	r0, r5, #4
{
   26794:	4690      	mov	r8, r2
   26796:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   26798:	f7ea fee0 	bl	1155c <sys_notify_finalize>
	if (cb) {
   2679c:	4604      	mov	r4, r0
   2679e:	b138      	cbz	r0, 267b0 <notify_one+0x28>
		cb(mgr, cli, state, res);
   267a0:	4633      	mov	r3, r6
   267a2:	4642      	mov	r2, r8
   267a4:	4629      	mov	r1, r5
   267a6:	4638      	mov	r0, r7
   267a8:	46a4      	mov	ip, r4
}
   267aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   267ae:	4760      	bx	ip
}
   267b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000267b4 <validate_args>:
{
   267b4:	b510      	push	{r4, lr}
   267b6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   267b8:	b140      	cbz	r0, 267cc <validate_args+0x18>
   267ba:	b139      	cbz	r1, 267cc <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   267bc:	1d08      	adds	r0, r1, #4
   267be:	f7ff ff84 	bl	266ca <sys_notify_validate>
	if ((rv == 0)
   267c2:	b928      	cbnz	r0, 267d0 <validate_args+0x1c>
	    && ((cli->notify.flags
   267c4:	68a3      	ldr	r3, [r4, #8]
   267c6:	f033 0303 	bics.w	r3, r3, #3
   267ca:	d001      	beq.n	267d0 <validate_args+0x1c>
		rv = -EINVAL;
   267cc:	f06f 0015 	mvn.w	r0, #21
}
   267d0:	bd10      	pop	{r4, pc}

000267d2 <onoff_manager_init>:
{
   267d2:	b538      	push	{r3, r4, r5, lr}
   267d4:	460c      	mov	r4, r1
	if ((mgr == NULL)
   267d6:	4605      	mov	r5, r0
   267d8:	b158      	cbz	r0, 267f2 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   267da:	b151      	cbz	r1, 267f2 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   267dc:	680b      	ldr	r3, [r1, #0]
   267de:	b143      	cbz	r3, 267f2 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   267e0:	684b      	ldr	r3, [r1, #4]
   267e2:	b133      	cbz	r3, 267f2 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   267e4:	2220      	movs	r2, #32
   267e6:	2100      	movs	r1, #0
   267e8:	f001 fefe 	bl	285e8 <memset>
	return 0;
   267ec:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   267ee:	612c      	str	r4, [r5, #16]
}
   267f0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   267f2:	f06f 0015 	mvn.w	r0, #21
   267f6:	e7fb      	b.n	267f0 <onoff_manager_init+0x1e>

000267f8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   267f8:	4604      	mov	r4, r0
   267fa:	b508      	push	{r3, lr}
   267fc:	4608      	mov	r0, r1
   267fe:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   26800:	461a      	mov	r2, r3
   26802:	47a0      	blx	r4
	return z_impl_k_current_get();
   26804:	f7fe fd42 	bl	2528c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   26808:	f7f0 f870 	bl	168ec <z_impl_k_thread_abort>

0002680c <chunk_field>:
	if (big_heap(h)) {
   2680c:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   2680e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   26812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   26816:	bf2c      	ite	cs
   26818:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   2681c:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   26820:	4770      	bx	lr

00026822 <chunk_set>:
	void *cmem = &buf[c];
   26822:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   26826:	6880      	ldr	r0, [r0, #8]
   26828:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   2682c:	bf2c      	ite	cs
   2682e:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   26832:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   26836:	4770      	bx	lr

00026838 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   26838:	2201      	movs	r2, #1
{
   2683a:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2683c:	f7ff ffe6 	bl	2680c <chunk_field>
}
   26840:	0840      	lsrs	r0, r0, #1
   26842:	bd08      	pop	{r3, pc}

00026844 <set_chunk_used>:
	if (big_heap(h)) {
   26844:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   26846:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2684a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2684e:	d308      	bcc.n	26862 <set_chunk_used+0x1e>
		if (used) {
   26850:	684b      	ldr	r3, [r1, #4]
   26852:	b11a      	cbz	r2, 2685c <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   26854:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   26858:	604b      	str	r3, [r1, #4]
   2685a:	4770      	bx	lr
   2685c:	f023 0301 	bic.w	r3, r3, #1
   26860:	e7fa      	b.n	26858 <set_chunk_used+0x14>
		if (used) {
   26862:	884b      	ldrh	r3, [r1, #2]
   26864:	b11a      	cbz	r2, 2686e <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   26866:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2686a:	804b      	strh	r3, [r1, #2]
}
   2686c:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2686e:	f023 0301 	bic.w	r3, r3, #1
   26872:	e7fa      	b.n	2686a <set_chunk_used+0x26>

00026874 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26874:	0053      	lsls	r3, r2, #1
   26876:	2201      	movs	r2, #1
   26878:	f7ff bfd3 	b.w	26822 <chunk_set>

0002687c <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
   2687c:	6883      	ldr	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2687e:	3107      	adds	r1, #7
	return big_heap(h) ? 8 : 4;
   26880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   26884:	bf2c      	ite	cs
   26886:	2008      	movcs	r0, #8
   26888:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2688a:	4408      	add	r0, r1
}
   2688c:	08c0      	lsrs	r0, r0, #3
   2688e:	4770      	bx	lr

00026890 <bucket_idx>:
{
	return chunksz * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
   26890:	460a      	mov	r2, r1
   26892:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   26894:	2101      	movs	r1, #1
   26896:	f7ff fff1 	bl	2687c <bytes_to_chunksz>
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   2689a:	3201      	adds	r2, #1
   2689c:	1a12      	subs	r2, r2, r0
	return 31 - __builtin_clz(usable_sz);
   2689e:	fab2 f082 	clz	r0, r2
}
   268a2:	f1c0 001f 	rsb	r0, r0, #31
   268a6:	bd08      	pop	{r3, pc}

000268a8 <merge_chunks>:
{
   268a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   268ac:	4616      	mov	r6, r2
   268ae:	4604      	mov	r4, r0
   268b0:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   268b2:	f7ff ffc1 	bl	26838 <chunk_size>
   268b6:	4631      	mov	r1, r6
   268b8:	4605      	mov	r5, r0
   268ba:	4620      	mov	r0, r4
   268bc:	f7ff ffbc 	bl	26838 <chunk_size>
   268c0:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   268c2:	462a      	mov	r2, r5
   268c4:	4639      	mov	r1, r7
   268c6:	4620      	mov	r0, r4
   268c8:	f7ff ffd4 	bl	26874 <set_chunk_size>
	return c + chunk_size(h, c);
   268cc:	4631      	mov	r1, r6
   268ce:	4620      	mov	r0, r4
   268d0:	f7ff ffb2 	bl	26838 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   268d4:	462b      	mov	r3, r5
   268d6:	1831      	adds	r1, r6, r0
   268d8:	2200      	movs	r2, #0
   268da:	4620      	mov	r0, r4
}
   268dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   268e0:	f7ff bf9f 	b.w	26822 <chunk_set>

000268e4 <split_chunks>:
{
   268e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   268e8:	4614      	mov	r4, r2
   268ea:	460e      	mov	r6, r1
   268ec:	4605      	mov	r5, r0
	chunksz_t sz0 = chunk_size(h, lc);
   268ee:	f7ff ffa3 	bl	26838 <chunk_size>
	chunksz_t lsz = rc - lc;
   268f2:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   268f6:	1b37      	subs	r7, r6, r4
   268f8:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   268fa:	4642      	mov	r2, r8
   268fc:	4631      	mov	r1, r6
   268fe:	4628      	mov	r0, r5
   26900:	f7ff ffb8 	bl	26874 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   26904:	463a      	mov	r2, r7
   26906:	4621      	mov	r1, r4
   26908:	4628      	mov	r0, r5
   2690a:	f7ff ffb3 	bl	26874 <set_chunk_size>
   2690e:	4643      	mov	r3, r8
   26910:	2200      	movs	r2, #0
   26912:	4621      	mov	r1, r4
   26914:	4628      	mov	r0, r5
   26916:	f7ff ff84 	bl	26822 <chunk_set>
	return c + chunk_size(h, c);
   2691a:	4621      	mov	r1, r4
   2691c:	4628      	mov	r0, r5
   2691e:	f7ff ff8b 	bl	26838 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   26922:	463b      	mov	r3, r7
   26924:	1821      	adds	r1, r4, r0
   26926:	2200      	movs	r2, #0
   26928:	4628      	mov	r0, r5
}
   2692a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2692e:	f7ff bf78 	b.w	26822 <chunk_set>

00026932 <free_list_remove_bidx>:
{
   26932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26936:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   26938:	2203      	movs	r2, #3
   2693a:	460e      	mov	r6, r1
   2693c:	4604      	mov	r4, r0
   2693e:	f7ff ff65 	bl	2680c <chunk_field>
	if (next_free_chunk(h, c) == c) {
   26942:	4286      	cmp	r6, r0
   26944:	4605      	mov	r5, r0
   26946:	f107 0804 	add.w	r8, r7, #4
   2694a:	d10b      	bne.n	26964 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   2694c:	2301      	movs	r3, #1
   2694e:	fa03 f707 	lsl.w	r7, r3, r7
   26952:	68e3      	ldr	r3, [r4, #12]
   26954:	ea23 0307 	bic.w	r3, r3, r7
   26958:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   2695a:	2300      	movs	r3, #0
   2695c:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   26960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   26964:	4631      	mov	r1, r6
   26966:	2202      	movs	r2, #2
   26968:	4620      	mov	r0, r4
   2696a:	f7ff ff4f 	bl	2680c <chunk_field>
   2696e:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   26970:	462b      	mov	r3, r5
   26972:	4601      	mov	r1, r0
   26974:	2203      	movs	r2, #3
   26976:	4620      	mov	r0, r4
		b->next = second;
   26978:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   2697c:	f7ff ff51 	bl	26822 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   26980:	4633      	mov	r3, r6
   26982:	4629      	mov	r1, r5
   26984:	4620      	mov	r0, r4
}
   26986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2698a:	2202      	movs	r2, #2
   2698c:	f7ff bf49 	b.w	26822 <chunk_set>

00026990 <alloc_chunk>:
{
   26990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26994:	4605      	mov	r5, r0
   26996:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   26998:	f7ff ff7a 	bl	26890 <bucket_idx>
   2699c:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
	if (b->next) {
   269a0:	f8da 9010 	ldr.w	r9, [sl, #16]
	int bi = bucket_idx(h, sz);
   269a4:	4606      	mov	r6, r0
	if (b->next) {
   269a6:	f1b9 0f00 	cmp.w	r9, #0
   269aa:	d01b      	beq.n	269e4 <alloc_chunk+0x54>
   269ac:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   269ae:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   269b2:	4628      	mov	r0, r5
   269b4:	4621      	mov	r1, r4
   269b6:	f7ff ff3f 	bl	26838 <chunk_size>
   269ba:	4540      	cmp	r0, r8
   269bc:	d307      	bcc.n	269ce <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
   269be:	4632      	mov	r2, r6
		free_list_remove_bidx(h, c, minbucket);
   269c0:	4621      	mov	r1, r4
   269c2:	4628      	mov	r0, r5
   269c4:	f7ff ffb5 	bl	26932 <free_list_remove_bidx>
}
   269c8:	4620      	mov	r0, r4
   269ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   269ce:	2203      	movs	r2, #3
   269d0:	4621      	mov	r1, r4
   269d2:	4628      	mov	r0, r5
   269d4:	f7ff ff1a 	bl	2680c <chunk_field>
		} while (--i && b->next != first);
   269d8:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   269da:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   269de:	d001      	beq.n	269e4 <alloc_chunk+0x54>
   269e0:	4581      	cmp	r9, r0
   269e2:	d1e4      	bne.n	269ae <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   269e4:	f04f 34ff 	mov.w	r4, #4294967295
   269e8:	68e9      	ldr	r1, [r5, #12]
   269ea:	3601      	adds	r6, #1
   269ec:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   269ee:	400c      	ands	r4, r1
   269f0:	d0ea      	beq.n	269c8 <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
   269f2:	fa94 f2a4 	rbit	r2, r4
   269f6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   269fa:	1d13      	adds	r3, r2, #4
   269fc:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   26a00:	e7de      	b.n	269c0 <alloc_chunk+0x30>

00026a02 <free_list_add>:
{
   26a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26a06:	4604      	mov	r4, r0
   26a08:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   26a0a:	f7ff ff15 	bl	26838 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   26a0e:	68a3      	ldr	r3, [r4, #8]
   26a10:	4601      	mov	r1, r0
   26a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   26a16:	d301      	bcc.n	26a1c <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   26a18:	2801      	cmp	r0, #1
   26a1a:	d035      	beq.n	26a88 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   26a1c:	4620      	mov	r0, r4
   26a1e:	f7ff ff37 	bl	26890 <bucket_idx>
	if (b->next == 0U) {
   26a22:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   26a26:	6916      	ldr	r6, [r2, #16]
   26a28:	b99e      	cbnz	r6, 26a52 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   26a2a:	2301      	movs	r3, #1
   26a2c:	fa03 f000 	lsl.w	r0, r3, r0
   26a30:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   26a32:	4629      	mov	r1, r5
   26a34:	4303      	orrs	r3, r0
   26a36:	60e3      	str	r3, [r4, #12]
   26a38:	4620      	mov	r0, r4
		b->next = c;
   26a3a:	6115      	str	r5, [r2, #16]
   26a3c:	462b      	mov	r3, r5
   26a3e:	2202      	movs	r2, #2
   26a40:	f7ff feef 	bl	26822 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   26a44:	2203      	movs	r2, #3
   26a46:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   26a48:	4620      	mov	r0, r4
}
   26a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   26a4e:	f7ff bee8 	b.w	26822 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   26a52:	2202      	movs	r2, #2
   26a54:	4631      	mov	r1, r6
   26a56:	4620      	mov	r0, r4
   26a58:	f7ff fed8 	bl	2680c <chunk_field>
   26a5c:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   26a5e:	4603      	mov	r3, r0
   26a60:	2202      	movs	r2, #2
   26a62:	4629      	mov	r1, r5
   26a64:	4620      	mov	r0, r4
   26a66:	f7ff fedc 	bl	26822 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   26a6a:	4633      	mov	r3, r6
   26a6c:	2203      	movs	r2, #3
   26a6e:	4629      	mov	r1, r5
   26a70:	4620      	mov	r0, r4
   26a72:	f7ff fed6 	bl	26822 <chunk_set>
   26a76:	2203      	movs	r2, #3
   26a78:	4639      	mov	r1, r7
   26a7a:	462b      	mov	r3, r5
   26a7c:	4620      	mov	r0, r4
   26a7e:	f7ff fed0 	bl	26822 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   26a82:	2202      	movs	r2, #2
   26a84:	4631      	mov	r1, r6
   26a86:	e7df      	b.n	26a48 <free_list_add+0x46>
   26a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026a8c <free_list_remove>:
{
   26a8c:	b538      	push	{r3, r4, r5, lr}
   26a8e:	4604      	mov	r4, r0
   26a90:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   26a92:	f7ff fed1 	bl	26838 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   26a96:	68a3      	ldr	r3, [r4, #8]
   26a98:	4601      	mov	r1, r0
   26a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   26a9e:	d301      	bcc.n	26aa4 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   26aa0:	2801      	cmp	r0, #1
   26aa2:	d009      	beq.n	26ab8 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   26aa4:	4620      	mov	r0, r4
   26aa6:	f7ff fef3 	bl	26890 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   26aaa:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   26aac:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   26aae:	4620      	mov	r0, r4
}
   26ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   26ab4:	f7ff bf3d 	b.w	26932 <free_list_remove_bidx>
}
   26ab8:	bd38      	pop	{r3, r4, r5, pc}

00026aba <free_chunk>:
{
   26aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26abc:	460c      	mov	r4, r1
   26abe:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   26ac0:	f7ff feba 	bl	26838 <chunk_size>
   26ac4:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   26ac6:	2201      	movs	r2, #1
   26ac8:	4631      	mov	r1, r6
   26aca:	4628      	mov	r0, r5
   26acc:	f7ff fe9e 	bl	2680c <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   26ad0:	07c3      	lsls	r3, r0, #31
   26ad2:	d40c      	bmi.n	26aee <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   26ad4:	4631      	mov	r1, r6
   26ad6:	4628      	mov	r0, r5
   26ad8:	f7ff ffd8 	bl	26a8c <free_list_remove>
	return c + chunk_size(h, c);
   26adc:	4621      	mov	r1, r4
   26ade:	4628      	mov	r0, r5
   26ae0:	f7ff feaa 	bl	26838 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   26ae4:	4621      	mov	r1, r4
   26ae6:	1822      	adds	r2, r4, r0
   26ae8:	4628      	mov	r0, r5
   26aea:	f7ff fedd 	bl	268a8 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   26aee:	2200      	movs	r2, #0
   26af0:	4621      	mov	r1, r4
   26af2:	4628      	mov	r0, r5
   26af4:	f7ff fe8a 	bl	2680c <chunk_field>
   26af8:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   26afa:	2201      	movs	r2, #1
   26afc:	4639      	mov	r1, r7
   26afe:	4628      	mov	r0, r5
   26b00:	f7ff fe84 	bl	2680c <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   26b04:	f010 0601 	ands.w	r6, r0, #1
   26b08:	d113      	bne.n	26b32 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   26b0a:	4639      	mov	r1, r7
   26b0c:	4628      	mov	r0, r5
   26b0e:	f7ff ffbd 	bl	26a8c <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   26b12:	4621      	mov	r1, r4
   26b14:	4632      	mov	r2, r6
   26b16:	4628      	mov	r0, r5
   26b18:	f7ff fe78 	bl	2680c <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   26b1c:	4622      	mov	r2, r4
   26b1e:	1a21      	subs	r1, r4, r0
   26b20:	4628      	mov	r0, r5
   26b22:	f7ff fec1 	bl	268a8 <merge_chunks>
   26b26:	4621      	mov	r1, r4
   26b28:	4632      	mov	r2, r6
   26b2a:	4628      	mov	r0, r5
   26b2c:	f7ff fe6e 	bl	2680c <chunk_field>
   26b30:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   26b32:	4621      	mov	r1, r4
   26b34:	4628      	mov	r0, r5
}
   26b36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   26b3a:	f7ff bf62 	b.w	26a02 <free_list_add>

00026b3e <sys_heap_alloc>:
{
   26b3e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   26b40:	6804      	ldr	r4, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   26b42:	b909      	cbnz	r1, 26b48 <sys_heap_alloc+0xa>
		return NULL;
   26b44:	2000      	movs	r0, #0
}
   26b46:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   26b48:	68a2      	ldr	r2, [r4, #8]
   26b4a:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   26b4e:	d9f9      	bls.n	26b44 <sys_heap_alloc+0x6>
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   26b50:	4620      	mov	r0, r4
   26b52:	f7ff fe93 	bl	2687c <bytes_to_chunksz>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   26b56:	4601      	mov	r1, r0
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   26b58:	4606      	mov	r6, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   26b5a:	4620      	mov	r0, r4
   26b5c:	f7ff ff18 	bl	26990 <alloc_chunk>
	if (c == 0U) {
   26b60:	4605      	mov	r5, r0
   26b62:	2800      	cmp	r0, #0
   26b64:	d0ee      	beq.n	26b44 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   26b66:	4601      	mov	r1, r0
   26b68:	4620      	mov	r0, r4
   26b6a:	f7ff fe65 	bl	26838 <chunk_size>
   26b6e:	42b0      	cmp	r0, r6
   26b70:	d909      	bls.n	26b86 <sys_heap_alloc+0x48>
		split_chunks(h, c, c + chunk_sz);
   26b72:	442e      	add	r6, r5
   26b74:	4629      	mov	r1, r5
   26b76:	4620      	mov	r0, r4
   26b78:	4632      	mov	r2, r6
   26b7a:	f7ff feb3 	bl	268e4 <split_chunks>
		free_list_add(h, c + chunk_sz);
   26b7e:	4631      	mov	r1, r6
   26b80:	4620      	mov	r0, r4
   26b82:	f7ff ff3e 	bl	26a02 <free_list_add>
	set_chunk_used(h, c, true);
   26b86:	4620      	mov	r0, r4
   26b88:	2201      	movs	r2, #1
   26b8a:	4629      	mov	r1, r5
   26b8c:	f7ff fe5a 	bl	26844 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   26b90:	68a3      	ldr	r3, [r4, #8]
   26b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   26b96:	bf2c      	ite	cs
   26b98:	2008      	movcs	r0, #8
   26b9a:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   26b9c:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   26ba0:	4420      	add	r0, r4
	return chunk_mem(h, c);
   26ba2:	e7d0      	b.n	26b46 <sys_heap_alloc+0x8>

00026ba4 <encode_uint>:
{
   26ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26ba8:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   26baa:	78d3      	ldrb	r3, [r2, #3]
{
   26bac:	4614      	mov	r4, r2
	switch (specifier) {
   26bae:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   26bb0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   26bb4:	4606      	mov	r6, r0
   26bb6:	460f      	mov	r7, r1
   26bb8:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   26bba:	d02d      	beq.n	26c18 <encode_uint+0x74>
   26bbc:	d828      	bhi.n	26c10 <encode_uint+0x6c>
		return 16;
   26bbe:	2b58      	cmp	r3, #88	; 0x58
   26bc0:	bf14      	ite	ne
   26bc2:	250a      	movne	r5, #10
   26bc4:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
   26bc6:	46aa      	mov	sl, r5
   26bc8:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   26bcc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   26bd0:	4652      	mov	r2, sl
   26bd2:	465b      	mov	r3, fp
   26bd4:	4630      	mov	r0, r6
   26bd6:	4639      	mov	r1, r7
   26bd8:	f7e9 fb32 	bl	10240 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26bdc:	2a09      	cmp	r2, #9
   26bde:	b2d3      	uxtb	r3, r2
   26be0:	d81f      	bhi.n	26c22 <encode_uint+0x7e>
   26be2:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   26be4:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26be6:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   26be8:	bf08      	it	eq
   26bea:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26bec:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   26bf0:	d301      	bcc.n	26bf6 <encode_uint+0x52>
   26bf2:	45c8      	cmp	r8, r9
   26bf4:	d812      	bhi.n	26c1c <encode_uint+0x78>
	if (conv->flag_hash) {
   26bf6:	7823      	ldrb	r3, [r4, #0]
   26bf8:	069b      	lsls	r3, r3, #26
   26bfa:	d505      	bpl.n	26c08 <encode_uint+0x64>
		if (radix == 8) {
   26bfc:	2d08      	cmp	r5, #8
   26bfe:	d116      	bne.n	26c2e <encode_uint+0x8a>
			conv->altform_0 = true;
   26c00:	78a3      	ldrb	r3, [r4, #2]
   26c02:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   26c06:	70a3      	strb	r3, [r4, #2]
}
   26c08:	4640      	mov	r0, r8
   26c0a:	b003      	add	sp, #12
   26c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   26c10:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   26c14:	2b70      	cmp	r3, #112	; 0x70
   26c16:	e7d3      	b.n	26bc0 <encode_uint+0x1c>
	switch (specifier) {
   26c18:	2508      	movs	r5, #8
   26c1a:	e7d4      	b.n	26bc6 <encode_uint+0x22>
		value /= radix;
   26c1c:	4606      	mov	r6, r0
   26c1e:	460f      	mov	r7, r1
   26c20:	e7d6      	b.n	26bd0 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26c22:	9a01      	ldr	r2, [sp, #4]
   26c24:	2a19      	cmp	r2, #25
   26c26:	bf94      	ite	ls
   26c28:	3337      	addls	r3, #55	; 0x37
   26c2a:	3357      	addhi	r3, #87	; 0x57
   26c2c:	e7da      	b.n	26be4 <encode_uint+0x40>
		} else if (radix == 16) {
   26c2e:	2d10      	cmp	r5, #16
   26c30:	d1ea      	bne.n	26c08 <encode_uint+0x64>
			conv->altform_0c = true;
   26c32:	78a3      	ldrb	r3, [r4, #2]
   26c34:	f043 0310 	orr.w	r3, r3, #16
   26c38:	e7e5      	b.n	26c06 <encode_uint+0x62>

00026c3a <outs>:
{
   26c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26c3e:	4607      	mov	r7, r0
   26c40:	4688      	mov	r8, r1
   26c42:	4615      	mov	r5, r2
   26c44:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   26c46:	4614      	mov	r4, r2
   26c48:	42b4      	cmp	r4, r6
   26c4a:	eba4 0005 	sub.w	r0, r4, r5
   26c4e:	d302      	bcc.n	26c56 <outs+0x1c>
   26c50:	b93e      	cbnz	r6, 26c62 <outs+0x28>
   26c52:	7823      	ldrb	r3, [r4, #0]
   26c54:	b12b      	cbz	r3, 26c62 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   26c56:	4641      	mov	r1, r8
   26c58:	f814 0b01 	ldrb.w	r0, [r4], #1
   26c5c:	47b8      	blx	r7
		if (rc < 0) {
   26c5e:	2800      	cmp	r0, #0
   26c60:	daf2      	bge.n	26c48 <outs+0xe>
}
   26c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026c66 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   26c66:	4040      	eors	r0, r0
   26c68:	f380 8811 	msr	BASEPRI, r0
   26c6c:	f04f 0004 	mov.w	r0, #4
   26c70:	df02      	svc	2
}
   26c72:	4770      	bx	lr

00026c74 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   26c74:	4770      	bx	lr

00026c76 <nordicsemi_nrf53_init>:
	__asm__ volatile(
   26c76:	f04f 0320 	mov.w	r3, #32
   26c7a:	f3ef 8111 	mrs	r1, BASEPRI
   26c7e:	f383 8811 	msr	BASEPRI, r3
   26c82:	f3bf 8f6f 	isb	sy
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   26c86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   26c8a:	2201      	movs	r2, #1
   26c8c:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   26c90:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   26c94:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
   26c98:	f381 8811 	msr	BASEPRI, r1
   26c9c:	f3bf 8f6f 	isb	sy
}
   26ca0:	2000      	movs	r0, #0
   26ca2:	4770      	bx	lr

00026ca4 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   26ca4:	f004 b9e8 	b.w	2b078 <SystemInit>

00026ca8 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   26ca8:	b084      	sub	sp, #16
   26caa:	ab04      	add	r3, sp, #16
   26cac:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   26cb0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   26cb4:	2b06      	cmp	r3, #6
   26cb6:	d108      	bne.n	26cca <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   26cb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   26cbc:	2201      	movs	r2, #1
   26cbe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   26cc2:	f3bf 8f4f 	dsb	sy
        __WFE();
   26cc6:	bf20      	wfe
    while (true)
   26cc8:	e7fd      	b.n	26cc6 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   26cca:	b004      	add	sp, #16
   26ccc:	4770      	bx	lr

00026cce <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   26cce:	b084      	sub	sp, #16
   26cd0:	ab04      	add	r3, sp, #16
   26cd2:	e903 0007 	stmdb	r3, {r0, r1, r2}
   26cd6:	2300      	movs	r3, #0
   26cd8:	f383 8811 	msr	BASEPRI, r3
   26cdc:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   26ce0:	b004      	add	sp, #16
   26ce2:	4770      	bx	lr

00026ce4 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   26ce4:	2300      	movs	r3, #0
	list->head = NULL;
   26ce6:	e9c0 3300 	strd	r3, r3, [r0]
}
   26cea:	4770      	bx	lr

00026cec <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   26cec:	6803      	ldr	r3, [r0, #0]
   26cee:	b923      	cbnz	r3, 26cfa <log_list_add_tail+0xe>
		list->head = msg;
   26cf0:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   26cf2:	2300      	movs	r3, #0
	list->tail = msg;
   26cf4:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   26cf6:	600b      	str	r3, [r1, #0]
}
   26cf8:	4770      	bx	lr
		list->tail->next = msg;
   26cfa:	6843      	ldr	r3, [r0, #4]
   26cfc:	6019      	str	r1, [r3, #0]
   26cfe:	e7f8      	b.n	26cf2 <log_list_add_tail+0x6>

00026d00 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   26d00:	6800      	ldr	r0, [r0, #0]
   26d02:	4770      	bx	lr

00026d04 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   26d04:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   26d06:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   26d08:	b108      	cbz	r0, 26d0e <log_list_head_get+0xa>
		list->head = list->head->next;
   26d0a:	6802      	ldr	r2, [r0, #0]
   26d0c:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   26d0e:	4770      	bx	lr

00026d10 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   26d10:	6843      	ldr	r3, [r0, #4]
}
   26d12:	7958      	ldrb	r0, [r3, #5]
   26d14:	4770      	bx	lr

00026d16 <z_log_msg_std_alloc>:
{
   26d16:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   26d18:	f7eb ffd2 	bl	12cc0 <log_msg_chunk_alloc>
	if (msg != NULL) {
   26d1c:	b118      	cbz	r0, 26d26 <z_log_msg_std_alloc+0x10>
		msg->hdr.ref_cnt = 1;
   26d1e:	2301      	movs	r3, #1
   26d20:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   26d22:	2300      	movs	r3, #0
   26d24:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   26d26:	bd08      	pop	{r3, pc}

00026d28 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   26d28:	f7ee b996 	b.w	15058 <sys_clock_cycle_get_32>

00026d2c <dummy_timestamp>:
   26d2c:	2000      	movs	r0, #0
   26d2e:	4770      	bx	lr

00026d30 <log_0>:
{
   26d30:	b538      	push	{r3, r4, r5, lr}
   26d32:	4605      	mov	r5, r0
   26d34:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   26d36:	f7ff ffee 	bl	26d16 <z_log_msg_std_alloc>

	if (msg != NULL) {
   26d3a:	b128      	cbz	r0, 26d48 <log_0+0x18>
		msg_finalize(msg, src_level);
   26d3c:	4621      	mov	r1, r4
		msg->str = str;
   26d3e:	6105      	str	r5, [r0, #16]
}
   26d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   26d44:	f7eb bec2 	b.w	12acc <msg_finalize>
}
   26d48:	bd38      	pop	{r3, r4, r5, pc}

00026d4a <log_1>:
{
   26d4a:	b570      	push	{r4, r5, r6, lr}
   26d4c:	4606      	mov	r6, r0
   26d4e:	460d      	mov	r5, r1
   26d50:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   26d52:	f7ff ffe0 	bl	26d16 <z_log_msg_std_alloc>

	if (msg != NULL) {
   26d56:	b158      	cbz	r0, 26d70 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   26d58:	2101      	movs	r1, #1
   26d5a:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   26d5c:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   26d5e:	f361 1207 	bfi	r2, r1, #4, #4
   26d62:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   26d64:	4621      	mov	r1, r4
		msg->payload.single.args[0] = arg1;
   26d66:	6145      	str	r5, [r0, #20]
}
   26d68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   26d6c:	f7eb beae 	b.w	12acc <msg_finalize>
}
   26d70:	bd70      	pop	{r4, r5, r6, pc}

00026d72 <log_2>:
{
   26d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26d76:	4680      	mov	r8, r0
   26d78:	460f      	mov	r7, r1
   26d7a:	4616      	mov	r6, r2
   26d7c:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   26d7e:	f7ff ffca 	bl	26d16 <z_log_msg_std_alloc>

	if (msg != NULL) {
   26d82:	b168      	cbz	r0, 26da0 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   26d84:	2202      	movs	r2, #2
   26d86:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   26d88:	4629      	mov	r1, r5
   26d8a:	f362 1307 	bfi	r3, r2, #4, #4
   26d8e:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   26d90:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   26d94:	f8c0 8010 	str.w	r8, [r0, #16]
}
   26d98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   26d9c:	f7eb be96 	b.w	12acc <msg_finalize>
}
   26da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026da4 <log_3>:
{
   26da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26da8:	4680      	mov	r8, r0
   26daa:	460f      	mov	r7, r1
   26dac:	4616      	mov	r6, r2
   26dae:	461d      	mov	r5, r3
   26db0:	f8bd 9020 	ldrh.w	r9, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   26db4:	f7ff ffaf 	bl	26d16 <z_log_msg_std_alloc>

	if (msg != NULL) {
   26db8:	b170      	cbz	r0, 26dd8 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   26dba:	2203      	movs	r2, #3
   26dbc:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   26dbe:	4649      	mov	r1, r9
   26dc0:	f362 1307 	bfi	r3, r2, #4, #4
   26dc4:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   26dc6:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   26dca:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   26dce:	61c5      	str	r5, [r0, #28]
}
   26dd0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   26dd4:	f7eb be7a 	b.w	12acc <msg_finalize>
}
   26dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00026ddc <log_n>:
{
   26ddc:	b510      	push	{r4, lr}
   26dde:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   26de0:	f7eb ffc0 	bl	12d64 <log_msg_create_n>
		if (msg == NULL) {
   26de4:	b120      	cbz	r0, 26df0 <log_n+0x14>
		msg_finalize(msg, src_level);
   26de6:	4621      	mov	r1, r4
}
   26de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   26dec:	f7eb be6e 	b.w	12acc <msg_finalize>
}
   26df0:	bd10      	pop	{r4, pc}

00026df2 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   26df2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26df6:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   26df8:	8903      	ldrh	r3, [r0, #8]
{
   26dfa:	460e      	mov	r6, r1
   26dfc:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   26dfe:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   26e02:	42a2      	cmp	r2, r4
{
   26e04:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   26e08:	d803      	bhi.n	26e12 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   26e0a:	2300      	movs	r3, #0
   26e0c:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   26e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   26e12:	680b      	ldr	r3, [r1, #0]
   26e14:	4423      	add	r3, r4
   26e16:	4293      	cmp	r3, r2
		*length = available_len - offset;
   26e18:	bf84      	itt	hi
   26e1a:	1b13      	subhi	r3, r2, r4
   26e1c:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   26e1e:	2a0c      	cmp	r2, #12
	req_len = *length;
   26e20:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   26e24:	d92a      	bls.n	26e7c <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   26e26:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   26e28:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   26e2c:	d82d      	bhi.n	26e8a <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   26e2e:	2208      	movs	r2, #8
		head_data = msg->payload.ext.data.bytes;
   26e30:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   26e32:	454a      	cmp	r2, r9
   26e34:	bf28      	it	cs
   26e36:	464a      	movcs	r2, r9
   26e38:	4420      	add	r0, r4
   26e3a:	4615      	mov	r5, r2
		if (put_op) {
   26e3c:	b317      	cbz	r7, 26e84 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   26e3e:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   26e40:	f001 fba7 	bl	28592 <memcpy>
		req_len -= cpy_len;
   26e44:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   26e48:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   26e4a:	f1b9 0f00 	cmp.w	r9, #0
   26e4e:	d0de      	beq.n	26e0e <log_msg_hexdump_data_op+0x1c>
   26e50:	f1b8 0f00 	cmp.w	r8, #0
   26e54:	d0db      	beq.n	26e0e <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   26e56:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   26e5a:	454d      	cmp	r5, r9
   26e5c:	bf28      	it	cs
   26e5e:	464d      	movcs	r5, r9
		if (put_op) {
   26e60:	1d20      	adds	r0, r4, #4
			(void)memcpy(&cont->payload.bytes[offset],
   26e62:	462a      	mov	r2, r5
   26e64:	4440      	add	r0, r8
		if (put_op) {
   26e66:	b1bf      	cbz	r7, 26e98 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   26e68:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   26e6a:	f001 fb92 	bl	28592 <memcpy>
		offset = 0;
   26e6e:	2400      	movs	r4, #0
		cont = cont->next;
   26e70:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   26e74:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   26e78:	442e      	add	r6, r5
   26e7a:	e7e6      	b.n	26e4a <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   26e7c:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   26e80:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   26e82:	e7d6      	b.n	26e32 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   26e84:	4601      	mov	r1, r0
   26e86:	4630      	mov	r0, r6
   26e88:	e7da      	b.n	26e40 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   26e8a:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   26e8c:	2c1b      	cmp	r4, #27
   26e8e:	d9dc      	bls.n	26e4a <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   26e90:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   26e94:	3c1c      	subs	r4, #28
   26e96:	e7f9      	b.n	26e8c <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   26e98:	4601      	mov	r1, r0
   26e9a:	4630      	mov	r0, r6
   26e9c:	e7e5      	b.n	26e6a <log_msg_hexdump_data_op+0x78>

00026e9e <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   26e9e:	3004      	adds	r0, #4
   26ea0:	e8d0 3fef 	ldaex	r3, [r0]
   26ea4:	3301      	adds	r3, #1
   26ea6:	e8c0 3fe2 	stlex	r2, r3, [r0]
   26eaa:	2a00      	cmp	r2, #0
   26eac:	d1f8      	bne.n	26ea0 <log_msg_get+0x2>
}
   26eae:	4770      	bx	lr

00026eb0 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   26eb0:	7a40      	ldrb	r0, [r0, #9]
}
   26eb2:	0900      	lsrs	r0, r0, #4
   26eb4:	4770      	bx	lr

00026eb6 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   26eb6:	7a43      	ldrb	r3, [r0, #9]
   26eb8:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   26ebc:	ea4f 1213 	mov.w	r2, r3, lsr #4
   26ec0:	d216      	bcs.n	26ef0 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   26ec2:	2a03      	cmp	r2, #3
   26ec4:	d803      	bhi.n	26ece <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   26ec6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   26eca:	6948      	ldr	r0, [r1, #20]
   26ecc:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   26ece:	2901      	cmp	r1, #1
   26ed0:	d803      	bhi.n	26eda <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   26ed2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   26ed6:	6988      	ldr	r0, [r1, #24]
   26ed8:	4770      	bx	lr
	cont = msg->payload.ext.next;
   26eda:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   26edc:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   26ede:	2906      	cmp	r1, #6
   26ee0:	d803      	bhi.n	26eea <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   26ee2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   26ee6:	6848      	ldr	r0, [r1, #4]
   26ee8:	4770      	bx	lr
		cont = cont->next;
   26eea:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   26eec:	3907      	subs	r1, #7
		cont = cont->next;
   26eee:	e7f6      	b.n	26ede <log_msg_arg_get+0x28>
		return 0;
   26ef0:	2000      	movs	r0, #0
}
   26ef2:	4770      	bx	lr

00026ef4 <log_msg_put>:
{
   26ef4:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   26ef6:	1d02      	adds	r2, r0, #4
   26ef8:	e8d2 1fef 	ldaex	r1, [r2]
   26efc:	3901      	subs	r1, #1
   26efe:	e8c2 1fec 	stlex	ip, r1, [r2]
   26f02:	f1bc 0f00 	cmp.w	ip, #0
   26f06:	d1f7      	bne.n	26ef8 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   26f08:	685b      	ldr	r3, [r3, #4]
   26f0a:	b90b      	cbnz	r3, 26f10 <log_msg_put+0x1c>
		msg_free(msg);
   26f0c:	f7eb beec 	b.w	12ce8 <msg_free>
}
   26f10:	4770      	bx	lr

00026f12 <log_msg_str_get>:
}
   26f12:	6900      	ldr	r0, [r0, #16]
   26f14:	4770      	bx	lr

00026f16 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   26f16:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   26f18:	2400      	movs	r4, #0
   26f1a:	9400      	str	r4, [sp, #0]
   26f1c:	f7ff ff69 	bl	26df2 <log_msg_hexdump_data_op>
}
   26f20:	b002      	add	sp, #8
   26f22:	bd10      	pop	{r4, pc}

00026f24 <buffer_write>:
{
   26f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26f26:	4606      	mov	r6, r0
   26f28:	460d      	mov	r5, r1
   26f2a:	4614      	mov	r4, r2
   26f2c:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   26f2e:	4621      	mov	r1, r4
   26f30:	4628      	mov	r0, r5
   26f32:	463a      	mov	r2, r7
   26f34:	47b0      	blx	r6
	} while (len != 0);
   26f36:	1a24      	subs	r4, r4, r0
		buf += processed;
   26f38:	4405      	add	r5, r0
	} while (len != 0);
   26f3a:	d1f8      	bne.n	26f2e <buffer_write+0xa>
}
   26f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026f3e <std_print>:
{
   26f3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26f42:	b08e      	sub	sp, #56	; 0x38
   26f44:	af0e      	add	r7, sp, #56	; 0x38
   26f46:	4680      	mov	r8, r0
   26f48:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   26f4a:	f7ff ffe2 	bl	26f12 <log_msg_str_get>
   26f4e:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   26f50:	4640      	mov	r0, r8
   26f52:	f7ff ffad 	bl	26eb0 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   26f56:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   26f5a:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   26f5c:	0083      	lsls	r3, r0, #2
   26f5e:	3307      	adds	r3, #7
   26f60:	f023 0307 	bic.w	r3, r3, #7
   26f64:	ebad 0d03 	sub.w	sp, sp, r3
   26f68:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   26f6a:	45d1      	cmp	r9, sl
   26f6c:	d116      	bne.n	26f9c <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   26f6e:	4640      	mov	r0, r8
   26f70:	f7ff ff9e 	bl	26eb0 <log_msg_nargs_get>
   26f74:	280f      	cmp	r0, #15
   26f76:	d81e      	bhi.n	26fb6 <std_print+0x78>
   26f78:	e8df f010 	tbh	[pc, r0, lsl #1]
   26f7c:	00200019 	.word	0x00200019
   26f80:	002d0026 	.word	0x002d0026
   26f84:	00410036 	.word	0x00410036
   26f88:	005d004e 	.word	0x005d004e
   26f8c:	0081006e 	.word	0x0081006e
   26f90:	00ad0096 	.word	0x00ad0096
   26f94:	00e100c6 	.word	0x00e100c6
   26f98:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   26f9c:	4649      	mov	r1, r9
   26f9e:	4640      	mov	r0, r8
   26fa0:	f7ff ff89 	bl	26eb6 <log_msg_arg_get>
   26fa4:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   26fa8:	f109 0901 	add.w	r9, r9, #1
   26fac:	e7dd      	b.n	26f6a <std_print+0x2c>
		print_formatted(output, str);
   26fae:	4631      	mov	r1, r6
   26fb0:	4628      	mov	r0, r5
   26fb2:	f7eb ff3f 	bl	12e34 <print_formatted>
}
   26fb6:	46bd      	mov	sp, r7
   26fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   26fbc:	4631      	mov	r1, r6
   26fbe:	4628      	mov	r0, r5
   26fc0:	6822      	ldr	r2, [r4, #0]
   26fc2:	f7eb ff37 	bl	12e34 <print_formatted>
		break;
   26fc6:	e7f6      	b.n	26fb6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   26fc8:	4631      	mov	r1, r6
   26fca:	e9d4 2300 	ldrd	r2, r3, [r4]
   26fce:	4628      	mov	r0, r5
   26fd0:	f7eb ff30 	bl	12e34 <print_formatted>
		break;
   26fd4:	e7ef      	b.n	26fb6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   26fd6:	68a3      	ldr	r3, [r4, #8]
   26fd8:	4631      	mov	r1, r6
   26fda:	9300      	str	r3, [sp, #0]
   26fdc:	4628      	mov	r0, r5
   26fde:	e9d4 2300 	ldrd	r2, r3, [r4]
   26fe2:	f7eb ff27 	bl	12e34 <print_formatted>
		break;
   26fe6:	e7e6      	b.n	26fb6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   26fe8:	68e3      	ldr	r3, [r4, #12]
   26fea:	4631      	mov	r1, r6
   26fec:	9301      	str	r3, [sp, #4]
   26fee:	68a3      	ldr	r3, [r4, #8]
   26ff0:	4628      	mov	r0, r5
   26ff2:	9300      	str	r3, [sp, #0]
   26ff4:	e9d4 2300 	ldrd	r2, r3, [r4]
   26ff8:	f7eb ff1c 	bl	12e34 <print_formatted>
		break;
   26ffc:	e7db      	b.n	26fb6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   26ffe:	6923      	ldr	r3, [r4, #16]
   27000:	4631      	mov	r1, r6
   27002:	9302      	str	r3, [sp, #8]
   27004:	68e3      	ldr	r3, [r4, #12]
   27006:	4628      	mov	r0, r5
   27008:	9301      	str	r3, [sp, #4]
   2700a:	68a3      	ldr	r3, [r4, #8]
   2700c:	9300      	str	r3, [sp, #0]
   2700e:	e9d4 2300 	ldrd	r2, r3, [r4]
   27012:	f7eb ff0f 	bl	12e34 <print_formatted>
		break;
   27016:	e7ce      	b.n	26fb6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   27018:	6963      	ldr	r3, [r4, #20]
   2701a:	4631      	mov	r1, r6
   2701c:	9303      	str	r3, [sp, #12]
   2701e:	6923      	ldr	r3, [r4, #16]
   27020:	4628      	mov	r0, r5
   27022:	9302      	str	r3, [sp, #8]
   27024:	68e3      	ldr	r3, [r4, #12]
   27026:	9301      	str	r3, [sp, #4]
   27028:	68a3      	ldr	r3, [r4, #8]
   2702a:	9300      	str	r3, [sp, #0]
   2702c:	e9d4 2300 	ldrd	r2, r3, [r4]
   27030:	f7eb ff00 	bl	12e34 <print_formatted>
		break;
   27034:	e7bf      	b.n	26fb6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   27036:	69a3      	ldr	r3, [r4, #24]
   27038:	4631      	mov	r1, r6
   2703a:	9304      	str	r3, [sp, #16]
   2703c:	6963      	ldr	r3, [r4, #20]
   2703e:	4628      	mov	r0, r5
   27040:	9303      	str	r3, [sp, #12]
   27042:	6923      	ldr	r3, [r4, #16]
   27044:	9302      	str	r3, [sp, #8]
   27046:	68e3      	ldr	r3, [r4, #12]
   27048:	9301      	str	r3, [sp, #4]
   2704a:	68a3      	ldr	r3, [r4, #8]
   2704c:	9300      	str	r3, [sp, #0]
   2704e:	e9d4 2300 	ldrd	r2, r3, [r4]
   27052:	f7eb feef 	bl	12e34 <print_formatted>
		break;
   27056:	e7ae      	b.n	26fb6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   27058:	69e3      	ldr	r3, [r4, #28]
   2705a:	4631      	mov	r1, r6
   2705c:	9305      	str	r3, [sp, #20]
   2705e:	69a3      	ldr	r3, [r4, #24]
   27060:	4628      	mov	r0, r5
   27062:	9304      	str	r3, [sp, #16]
   27064:	6963      	ldr	r3, [r4, #20]
   27066:	9303      	str	r3, [sp, #12]
   27068:	6923      	ldr	r3, [r4, #16]
   2706a:	9302      	str	r3, [sp, #8]
   2706c:	68e3      	ldr	r3, [r4, #12]
   2706e:	9301      	str	r3, [sp, #4]
   27070:	68a3      	ldr	r3, [r4, #8]
   27072:	9300      	str	r3, [sp, #0]
   27074:	e9d4 2300 	ldrd	r2, r3, [r4]
   27078:	f7eb fedc 	bl	12e34 <print_formatted>
		break;
   2707c:	e79b      	b.n	26fb6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2707e:	6a23      	ldr	r3, [r4, #32]
   27080:	4631      	mov	r1, r6
   27082:	9306      	str	r3, [sp, #24]
   27084:	69e3      	ldr	r3, [r4, #28]
   27086:	4628      	mov	r0, r5
   27088:	9305      	str	r3, [sp, #20]
   2708a:	69a3      	ldr	r3, [r4, #24]
   2708c:	9304      	str	r3, [sp, #16]
   2708e:	6963      	ldr	r3, [r4, #20]
   27090:	9303      	str	r3, [sp, #12]
   27092:	6923      	ldr	r3, [r4, #16]
   27094:	9302      	str	r3, [sp, #8]
   27096:	68e3      	ldr	r3, [r4, #12]
   27098:	9301      	str	r3, [sp, #4]
   2709a:	68a3      	ldr	r3, [r4, #8]
   2709c:	9300      	str	r3, [sp, #0]
   2709e:	e9d4 2300 	ldrd	r2, r3, [r4]
   270a2:	f7eb fec7 	bl	12e34 <print_formatted>
		break;
   270a6:	e786      	b.n	26fb6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   270a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   270aa:	4631      	mov	r1, r6
   270ac:	9307      	str	r3, [sp, #28]
   270ae:	6a23      	ldr	r3, [r4, #32]
   270b0:	4628      	mov	r0, r5
   270b2:	9306      	str	r3, [sp, #24]
   270b4:	69e3      	ldr	r3, [r4, #28]
   270b6:	9305      	str	r3, [sp, #20]
   270b8:	69a3      	ldr	r3, [r4, #24]
   270ba:	9304      	str	r3, [sp, #16]
   270bc:	6963      	ldr	r3, [r4, #20]
   270be:	9303      	str	r3, [sp, #12]
   270c0:	6923      	ldr	r3, [r4, #16]
   270c2:	9302      	str	r3, [sp, #8]
   270c4:	68e3      	ldr	r3, [r4, #12]
   270c6:	9301      	str	r3, [sp, #4]
   270c8:	68a3      	ldr	r3, [r4, #8]
   270ca:	9300      	str	r3, [sp, #0]
   270cc:	e9d4 2300 	ldrd	r2, r3, [r4]
   270d0:	f7eb feb0 	bl	12e34 <print_formatted>
		break;
   270d4:	e76f      	b.n	26fb6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   270d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   270d8:	4631      	mov	r1, r6
   270da:	9308      	str	r3, [sp, #32]
   270dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   270de:	4628      	mov	r0, r5
   270e0:	9307      	str	r3, [sp, #28]
   270e2:	6a23      	ldr	r3, [r4, #32]
   270e4:	9306      	str	r3, [sp, #24]
   270e6:	69e3      	ldr	r3, [r4, #28]
   270e8:	9305      	str	r3, [sp, #20]
   270ea:	69a3      	ldr	r3, [r4, #24]
   270ec:	9304      	str	r3, [sp, #16]
   270ee:	6963      	ldr	r3, [r4, #20]
   270f0:	9303      	str	r3, [sp, #12]
   270f2:	6923      	ldr	r3, [r4, #16]
   270f4:	9302      	str	r3, [sp, #8]
   270f6:	68e3      	ldr	r3, [r4, #12]
   270f8:	9301      	str	r3, [sp, #4]
   270fa:	68a3      	ldr	r3, [r4, #8]
   270fc:	9300      	str	r3, [sp, #0]
   270fe:	e9d4 2300 	ldrd	r2, r3, [r4]
   27102:	f7eb fe97 	bl	12e34 <print_formatted>
		break;
   27106:	e756      	b.n	26fb6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   27108:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2710a:	4631      	mov	r1, r6
   2710c:	9309      	str	r3, [sp, #36]	; 0x24
   2710e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   27110:	4628      	mov	r0, r5
   27112:	9308      	str	r3, [sp, #32]
   27114:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27116:	9307      	str	r3, [sp, #28]
   27118:	6a23      	ldr	r3, [r4, #32]
   2711a:	9306      	str	r3, [sp, #24]
   2711c:	69e3      	ldr	r3, [r4, #28]
   2711e:	9305      	str	r3, [sp, #20]
   27120:	69a3      	ldr	r3, [r4, #24]
   27122:	9304      	str	r3, [sp, #16]
   27124:	6963      	ldr	r3, [r4, #20]
   27126:	9303      	str	r3, [sp, #12]
   27128:	6923      	ldr	r3, [r4, #16]
   2712a:	9302      	str	r3, [sp, #8]
   2712c:	68e3      	ldr	r3, [r4, #12]
   2712e:	9301      	str	r3, [sp, #4]
   27130:	68a3      	ldr	r3, [r4, #8]
   27132:	9300      	str	r3, [sp, #0]
   27134:	e9d4 2300 	ldrd	r2, r3, [r4]
   27138:	f7eb fe7c 	bl	12e34 <print_formatted>
		break;
   2713c:	e73b      	b.n	26fb6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2713e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   27140:	4631      	mov	r1, r6
   27142:	930a      	str	r3, [sp, #40]	; 0x28
   27144:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   27146:	4628      	mov	r0, r5
   27148:	9309      	str	r3, [sp, #36]	; 0x24
   2714a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2714c:	9308      	str	r3, [sp, #32]
   2714e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27150:	9307      	str	r3, [sp, #28]
   27152:	6a23      	ldr	r3, [r4, #32]
   27154:	9306      	str	r3, [sp, #24]
   27156:	69e3      	ldr	r3, [r4, #28]
   27158:	9305      	str	r3, [sp, #20]
   2715a:	69a3      	ldr	r3, [r4, #24]
   2715c:	9304      	str	r3, [sp, #16]
   2715e:	6963      	ldr	r3, [r4, #20]
   27160:	9303      	str	r3, [sp, #12]
   27162:	6923      	ldr	r3, [r4, #16]
   27164:	9302      	str	r3, [sp, #8]
   27166:	68e3      	ldr	r3, [r4, #12]
   27168:	9301      	str	r3, [sp, #4]
   2716a:	68a3      	ldr	r3, [r4, #8]
   2716c:	9300      	str	r3, [sp, #0]
   2716e:	e9d4 2300 	ldrd	r2, r3, [r4]
   27172:	f7eb fe5f 	bl	12e34 <print_formatted>
		break;
   27176:	e71e      	b.n	26fb6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   27178:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2717a:	4631      	mov	r1, r6
   2717c:	930b      	str	r3, [sp, #44]	; 0x2c
   2717e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   27180:	4628      	mov	r0, r5
   27182:	930a      	str	r3, [sp, #40]	; 0x28
   27184:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   27186:	9309      	str	r3, [sp, #36]	; 0x24
   27188:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2718a:	9308      	str	r3, [sp, #32]
   2718c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2718e:	9307      	str	r3, [sp, #28]
   27190:	6a23      	ldr	r3, [r4, #32]
   27192:	9306      	str	r3, [sp, #24]
   27194:	69e3      	ldr	r3, [r4, #28]
   27196:	9305      	str	r3, [sp, #20]
   27198:	69a3      	ldr	r3, [r4, #24]
   2719a:	9304      	str	r3, [sp, #16]
   2719c:	6963      	ldr	r3, [r4, #20]
   2719e:	9303      	str	r3, [sp, #12]
   271a0:	6923      	ldr	r3, [r4, #16]
   271a2:	9302      	str	r3, [sp, #8]
   271a4:	68e3      	ldr	r3, [r4, #12]
   271a6:	9301      	str	r3, [sp, #4]
   271a8:	68a3      	ldr	r3, [r4, #8]
   271aa:	9300      	str	r3, [sp, #0]
   271ac:	e9d4 2300 	ldrd	r2, r3, [r4]
   271b0:	f7eb fe40 	bl	12e34 <print_formatted>
		break;
   271b4:	e6ff      	b.n	26fb6 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   271b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   271b8:	4631      	mov	r1, r6
   271ba:	930c      	str	r3, [sp, #48]	; 0x30
   271bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   271be:	4628      	mov	r0, r5
   271c0:	930b      	str	r3, [sp, #44]	; 0x2c
   271c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   271c4:	930a      	str	r3, [sp, #40]	; 0x28
   271c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   271c8:	9309      	str	r3, [sp, #36]	; 0x24
   271ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   271cc:	9308      	str	r3, [sp, #32]
   271ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   271d0:	9307      	str	r3, [sp, #28]
   271d2:	6a23      	ldr	r3, [r4, #32]
   271d4:	9306      	str	r3, [sp, #24]
   271d6:	69e3      	ldr	r3, [r4, #28]
   271d8:	9305      	str	r3, [sp, #20]
   271da:	69a3      	ldr	r3, [r4, #24]
   271dc:	9304      	str	r3, [sp, #16]
   271de:	6963      	ldr	r3, [r4, #20]
   271e0:	9303      	str	r3, [sp, #12]
   271e2:	6923      	ldr	r3, [r4, #16]
   271e4:	9302      	str	r3, [sp, #8]
   271e6:	68e3      	ldr	r3, [r4, #12]
   271e8:	9301      	str	r3, [sp, #4]
   271ea:	68a3      	ldr	r3, [r4, #8]
   271ec:	9300      	str	r3, [sp, #0]
   271ee:	e9d4 2300 	ldrd	r2, r3, [r4]
   271f2:	f7eb fe1f 	bl	12e34 <print_formatted>
}
   271f6:	e6de      	b.n	26fb6 <std_print+0x78>

000271f8 <log_output_flush>:
		     output->control_block->offset,
   271f8:	6842      	ldr	r2, [r0, #4]
{
   271fa:	b510      	push	{r4, lr}
	buffer_write(output->func, output->buf,
   271fc:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   27200:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   27202:	6881      	ldr	r1, [r0, #8]
   27204:	6800      	ldr	r0, [r0, #0]
   27206:	f7ff fe8d 	bl	26f24 <buffer_write>
	output->control_block->offset = 0;
   2720a:	2200      	movs	r2, #0
   2720c:	6863      	ldr	r3, [r4, #4]
   2720e:	601a      	str	r2, [r3, #0]
}
   27210:	bd10      	pop	{r4, pc}

00027212 <z_impl_flash_write>:
{
   27212:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct flash_driver_api *api =
   27216:	6886      	ldr	r6, [r0, #8]
{
   27218:	4699      	mov	r9, r3
	if (api->write_protection != NULL) {
   2721a:	68f3      	ldr	r3, [r6, #12]
{
   2721c:	4605      	mov	r5, r0
   2721e:	460f      	mov	r7, r1
   27220:	4690      	mov	r8, r2
	if (api->write_protection != NULL) {
   27222:	b95b      	cbnz	r3, 2723c <z_impl_flash_write+0x2a>
	rc = api->write(dev, offset, data, len);
   27224:	464b      	mov	r3, r9
   27226:	6874      	ldr	r4, [r6, #4]
   27228:	4642      	mov	r2, r8
   2722a:	4639      	mov	r1, r7
   2722c:	4628      	mov	r0, r5
   2722e:	47a0      	blx	r4
	if (api->write_protection != NULL) {
   27230:	68f3      	ldr	r3, [r6, #12]
	rc = api->write(dev, offset, data, len);
   27232:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   27234:	b943      	cbnz	r3, 27248 <z_impl_flash_write+0x36>
}
   27236:	4620      	mov	r0, r4
   27238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
   2723c:	2100      	movs	r1, #0
   2723e:	4798      	blx	r3
		if (rc) {
   27240:	4604      	mov	r4, r0
   27242:	2800      	cmp	r0, #0
   27244:	d0ee      	beq.n	27224 <z_impl_flash_write+0x12>
   27246:	e7f6      	b.n	27236 <z_impl_flash_write+0x24>
		(void) api->write_protection(dev, true);
   27248:	2101      	movs	r1, #1
   2724a:	4628      	mov	r0, r5
   2724c:	4798      	blx	r3
   2724e:	e7f2      	b.n	27236 <z_impl_flash_write+0x24>

00027250 <nvs_flash_rd>:
{
   27250:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   27252:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   27254:	8984      	ldrh	r4, [r0, #12]
   27256:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   27258:	fa16 f181 	uxtah	r1, r6, r1
   2725c:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   27260:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   27262:	6884      	ldr	r4, [r0, #8]
   27264:	6824      	ldr	r4, [r4, #0]
   27266:	46a4      	mov	ip, r4
}
   27268:	bc70      	pop	{r4, r5, r6}
   2726a:	4760      	bx	ip

0002726c <nvs_flash_block_cmp>:
{
   2726c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27270:	4681      	mov	r9, r0
   27272:	460e      	mov	r6, r1
   27274:	4617      	mov	r7, r2
   27276:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   27278:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   2727a:	b089      	sub	sp, #36	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2727c:	681d      	ldr	r5, [r3, #0]
   2727e:	426d      	negs	r5, r5
	block_size =
   27280:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   27284:	b91c      	cbnz	r4, 2728e <nvs_flash_block_cmp+0x22>
	return 0;
   27286:	4620      	mov	r0, r4
}
   27288:	b009      	add	sp, #36	; 0x24
   2728a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   2728e:	42ac      	cmp	r4, r5
   27290:	46a0      	mov	r8, r4
   27292:	bf28      	it	cs
   27294:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   27296:	466a      	mov	r2, sp
   27298:	4643      	mov	r3, r8
   2729a:	4631      	mov	r1, r6
   2729c:	4648      	mov	r0, r9
   2729e:	f7ff ffd7 	bl	27250 <nvs_flash_rd>
		if (rc) {
   272a2:	2800      	cmp	r0, #0
   272a4:	d1f0      	bne.n	27288 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   272a6:	4642      	mov	r2, r8
   272a8:	4669      	mov	r1, sp
   272aa:	4638      	mov	r0, r7
   272ac:	f001 f961 	bl	28572 <memcmp>
		if (rc) {
   272b0:	b920      	cbnz	r0, 272bc <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   272b2:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   272b6:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   272b8:	4447      	add	r7, r8
   272ba:	e7e3      	b.n	27284 <nvs_flash_block_cmp+0x18>
			return 1;
   272bc:	2001      	movs	r0, #1
   272be:	e7e3      	b.n	27288 <nvs_flash_block_cmp+0x1c>

000272c0 <nvs_flash_cmp_const>:
{
   272c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   272c4:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   272c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   272c8:	b088      	sub	sp, #32
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   272ca:	681d      	ldr	r5, [r3, #0]
{
   272cc:	4607      	mov	r7, r0
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   272ce:	426d      	negs	r5, r5
	block_size =
   272d0:	f005 0520 	and.w	r5, r5, #32
{
   272d4:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   272d6:	4668      	mov	r0, sp
{
   272d8:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   272da:	462a      	mov	r2, r5
   272dc:	f001 f984 	bl	285e8 <memset>
	while (len) {
   272e0:	b91c      	cbnz	r4, 272ea <nvs_flash_cmp_const+0x2a>
	return 0;
   272e2:	4620      	mov	r0, r4
}
   272e4:	b008      	add	sp, #32
   272e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   272ea:	42ac      	cmp	r4, r5
   272ec:	46a0      	mov	r8, r4
   272ee:	bf28      	it	cs
   272f0:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   272f2:	466a      	mov	r2, sp
   272f4:	4643      	mov	r3, r8
   272f6:	4631      	mov	r1, r6
   272f8:	4638      	mov	r0, r7
   272fa:	f7ff ffb7 	bl	2726c <nvs_flash_block_cmp>
		if (rc) {
   272fe:	2800      	cmp	r0, #0
   27300:	d1f0      	bne.n	272e4 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   27302:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   27306:	4446      	add	r6, r8
   27308:	e7ea      	b.n	272e0 <nvs_flash_cmp_const+0x20>

0002730a <nvs_flash_erase_sector>:
{
   2730a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2730e:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
   27312:	6806      	ldr	r6, [r0, #0]
	addr &= ADDR_SECT_MASK;
   27314:	ea4f 4811 	mov.w	r8, r1, lsr #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   27318:	0c09      	lsrs	r1, r1, #16
{
   2731a:	4605      	mov	r5, r0
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2731c:	fb0a 6601 	mla	r6, sl, r1, r6
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   27320:	6a87      	ldr	r7, [r0, #40]	; 0x28
	addr &= ADDR_SECT_MASK;
   27322:	ea4f 4808 	mov.w	r8, r8, lsl #16
	const struct flash_driver_api *api =
   27326:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (api->write_protection != NULL) {
   2732a:	f8d9 300c 	ldr.w	r3, [r9, #12]
   2732e:	b9b3      	cbnz	r3, 2735e <nvs_flash_erase_sector+0x54>
	rc = api->erase(dev, offset, size);
   27330:	f8d9 3008 	ldr.w	r3, [r9, #8]
   27334:	4652      	mov	r2, sl
   27336:	4631      	mov	r1, r6
   27338:	4638      	mov	r0, r7
   2733a:	4798      	blx	r3
	if (api->write_protection != NULL) {
   2733c:	f8d9 300c 	ldr.w	r3, [r9, #12]
	rc = api->erase(dev, offset, size);
   27340:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   27342:	b9ab      	cbnz	r3, 27370 <nvs_flash_erase_sector+0x66>
	if (rc) {
   27344:	b98c      	cbnz	r4, 2736a <nvs_flash_erase_sector+0x60>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   27346:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   27348:	4641      	mov	r1, r8
   2734a:	4628      	mov	r0, r5
   2734c:	89ab      	ldrh	r3, [r5, #12]
   2734e:	7912      	ldrb	r2, [r2, #4]
   27350:	f7ff ffb6 	bl	272c0 <nvs_flash_cmp_const>
		rc = -ENXIO;
   27354:	1e04      	subs	r4, r0, #0
   27356:	bf18      	it	ne
   27358:	f06f 0405 	mvnne.w	r4, #5
   2735c:	e005      	b.n	2736a <nvs_flash_erase_sector+0x60>
		rc = api->write_protection(dev, false);
   2735e:	2100      	movs	r1, #0
   27360:	4638      	mov	r0, r7
   27362:	4798      	blx	r3
		if (rc) {
   27364:	4604      	mov	r4, r0
   27366:	2800      	cmp	r0, #0
   27368:	d0e2      	beq.n	27330 <nvs_flash_erase_sector+0x26>
}
   2736a:	4620      	mov	r0, r4
   2736c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		(void) api->write_protection(dev, true);
   27370:	2101      	movs	r1, #1
   27372:	4638      	mov	r0, r7
   27374:	4798      	blx	r3
   27376:	e7e5      	b.n	27344 <nvs_flash_erase_sector+0x3a>

00027378 <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   27378:	4601      	mov	r1, r0
{
   2737a:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2737c:	2207      	movs	r2, #7
{
   2737e:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   27380:	20ff      	movs	r0, #255	; 0xff
   27382:	f7ea f8d3 	bl	1152c <crc8_ccitt>
	entry->crc8 = crc8;
   27386:	71e0      	strb	r0, [r4, #7]
}
   27388:	bd10      	pop	{r4, pc}

0002738a <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   2738a:	7800      	ldrb	r0, [r0, #0]
   2738c:	2801      	cmp	r0, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2738e:	bf81      	itttt	hi
   27390:	1809      	addhi	r1, r1, r0
   27392:	f101 31ff 	addhi.w	r1, r1, #4294967295
   27396:	4240      	neghi	r0, r0
   27398:	4001      	andhi	r1, r0
}
   2739a:	4608      	mov	r0, r1
   2739c:	4770      	bx	lr

0002739e <nvs_ate_valid>:
{
   2739e:	b570      	push	{r4, r5, r6, lr}
   273a0:	460c      	mov	r4, r1
   273a2:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   273a4:	2108      	movs	r1, #8
   273a6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   273a8:	f7ff ffef 	bl	2738a <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   273ac:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   273ae:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   273b0:	4621      	mov	r1, r4
   273b2:	20ff      	movs	r0, #255	; 0xff
   273b4:	f7ea f8ba 	bl	1152c <crc8_ccitt>
	if (crc8 == entry->crc8) {
   273b8:	79e3      	ldrb	r3, [r4, #7]
   273ba:	4283      	cmp	r3, r0
   273bc:	d107      	bne.n	273ce <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   273be:	89a8      	ldrh	r0, [r5, #12]
   273c0:	8863      	ldrh	r3, [r4, #2]
   273c2:	1b80      	subs	r0, r0, r6
	if ((nvs_ate_crc8_check(entry)) ||
   273c4:	4283      	cmp	r3, r0
   273c6:	bf2c      	ite	cs
   273c8:	2000      	movcs	r0, #0
   273ca:	2001      	movcc	r0, #1
}
   273cc:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   273ce:	2000      	movs	r0, #0
   273d0:	e7fc      	b.n	273cc <nvs_ate_valid+0x2e>

000273d2 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   273d2:	680b      	ldr	r3, [r1, #0]
   273d4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   273d8:	0c1a      	lsrs	r2, r3, #16
   273da:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   273de:	bf08      	it	eq
   273e0:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   273e4:	600b      	str	r3, [r1, #0]
}
   273e6:	4770      	bx	lr

000273e8 <nvs_close_ate_valid>:
{
   273e8:	b538      	push	{r3, r4, r5, lr}
   273ea:	4605      	mov	r5, r0
   273ec:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   273ee:	f7ff ffd6 	bl	2739e <nvs_ate_valid>
   273f2:	b1a0      	cbz	r0, 2741e <nvs_close_ate_valid+0x36>
   273f4:	88a0      	ldrh	r0, [r4, #4]
   273f6:	b998      	cbnz	r0, 27420 <nvs_close_ate_valid+0x38>
   273f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   273fc:	8822      	ldrh	r2, [r4, #0]
   273fe:	429a      	cmp	r2, r3
   27400:	d10d      	bne.n	2741e <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   27402:	2108      	movs	r1, #8
   27404:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   27406:	f7ff ffc0 	bl	2738a <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   2740a:	8862      	ldrh	r2, [r4, #2]
   2740c:	89ab      	ldrh	r3, [r5, #12]
   2740e:	1a9b      	subs	r3, r3, r2
   27410:	fbb3 f2f0 	udiv	r2, r3, r0
   27414:	fb02 3010 	mls	r0, r2, r0, r3
   27418:	fab0 f080 	clz	r0, r0
   2741c:	0940      	lsrs	r0, r0, #5
}
   2741e:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   27420:	2000      	movs	r0, #0
   27422:	e7fc      	b.n	2741e <nvs_close_ate_valid+0x36>

00027424 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   27424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27428:	4605      	mov	r5, r0
   2742a:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2742c:	8987      	ldrh	r7, [r0, #12]
	offset += addr & ADDR_OFFS_MASK;
   2742e:	6800      	ldr	r0, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   27430:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   27432:	fa10 f181 	uxtah	r1, r0, r1
   27436:	fb03 1707 	mla	r7, r3, r7, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2743a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   2743c:	4690      	mov	r8, r2
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2743e:	681e      	ldr	r6, [r3, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   27440:	b088      	sub	sp, #32
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   27442:	4276      	negs	r6, r6
	if (blen > 0) {
   27444:	4026      	ands	r6, r4
   27446:	d008      	beq.n	2745a <nvs_flash_al_wrt.part.0+0x36>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   27448:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return z_impl_flash_write(dev, offset, data, len);
   2744a:	4633      	mov	r3, r6
   2744c:	4639      	mov	r1, r7
   2744e:	f7ff fee0 	bl	27212 <z_impl_flash_write>
		if (rc) {
   27452:	b9b8      	cbnz	r0, 27484 <nvs_flash_al_wrt.part.0+0x60>
		len -= blen;
   27454:	1ba4      	subs	r4, r4, r6
		offset += blen;
   27456:	4437      	add	r7, r6
		data8 += blen;
   27458:	44b0      	add	r8, r6
	if (len) {
   2745a:	b1b4      	cbz	r4, 2748a <nvs_flash_al_wrt.part.0+0x66>
		memcpy(buf, data8, len);
   2745c:	4622      	mov	r2, r4
   2745e:	4641      	mov	r1, r8
   27460:	4668      	mov	r0, sp
   27462:	f001 f896 	bl	28592 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   27466:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   27468:	eb0d 0004 	add.w	r0, sp, r4
   2746c:	681a      	ldr	r2, [r3, #0]
   2746e:	7919      	ldrb	r1, [r3, #4]
   27470:	1b12      	subs	r2, r2, r4
   27472:	f001 f8b9 	bl	285e8 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   27476:	e9d5 030a 	ldrd	r0, r3, [r5, #40]	; 0x28
   2747a:	681b      	ldr	r3, [r3, #0]
   2747c:	466a      	mov	r2, sp
   2747e:	4639      	mov	r1, r7
   27480:	f7ff fec7 	bl	27212 <z_impl_flash_write>
}
   27484:	b008      	add	sp, #32
   27486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
end:
   2748a:	4620      	mov	r0, r4
   2748c:	e7fa      	b.n	27484 <nvs_flash_al_wrt.part.0+0x60>

0002748e <nvs_flash_ate_wrt>:
{
   2748e:	460a      	mov	r2, r1
   27490:	b510      	push	{r4, lr}
   27492:	2308      	movs	r3, #8
   27494:	6841      	ldr	r1, [r0, #4]
   27496:	4604      	mov	r4, r0
   27498:	f7ff ffc4 	bl	27424 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2749c:	2108      	movs	r1, #8
   2749e:	4603      	mov	r3, r0
   274a0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   274a2:	f7ff ff72 	bl	2738a <nvs_al_size.isra.0>
   274a6:	6862      	ldr	r2, [r4, #4]
   274a8:	1a12      	subs	r2, r2, r0
   274aa:	6062      	str	r2, [r4, #4]
}
   274ac:	4618      	mov	r0, r3
   274ae:	bd10      	pop	{r4, pc}

000274b0 <nvs_prev_ate>:
{
   274b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   274b2:	4605      	mov	r5, r0
   274b4:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   274b6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   274b8:	2108      	movs	r1, #8
   274ba:	f7ff ff66 	bl	2738a <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   274be:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   274c0:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   274c2:	6831      	ldr	r1, [r6, #0]
   274c4:	4628      	mov	r0, r5
   274c6:	f7ff fec3 	bl	27250 <nvs_flash_rd>
	if (rc) {
   274ca:	4604      	mov	r4, r0
   274cc:	2800      	cmp	r0, #0
   274ce:	d138      	bne.n	27542 <nvs_prev_ate+0x92>
	*addr += ate_size;
   274d0:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   274d2:	89a8      	ldrh	r0, [r5, #12]
	*addr += ate_size;
   274d4:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   274d6:	b29a      	uxth	r2, r3
   274d8:	1bc7      	subs	r7, r0, r7
   274da:	42ba      	cmp	r2, r7
	*addr += ate_size;
   274dc:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   274de:	d130      	bne.n	27542 <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   274e0:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   274e2:	bf09      	itett	eq
   274e4:	89e9      	ldrheq	r1, [r5, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
   274e6:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   274ea:	f101 31ff 	addeq.w	r1, r1, #4294967295
   274ee:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   274f2:	466a      	mov	r2, sp
   274f4:	2308      	movs	r3, #8
   274f6:	4628      	mov	r0, r5
   274f8:	6031      	str	r1, [r6, #0]
   274fa:	f7ff fea9 	bl	27250 <nvs_flash_rd>
	if (rc) {
   274fe:	4604      	mov	r4, r0
   27500:	b9f8      	cbnz	r0, 27542 <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   27502:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   27504:	466a      	mov	r2, sp
   27506:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   27508:	4603      	mov	r3, r0
		if (data8[i] != value) {
   2750a:	f812 0b01 	ldrb.w	r0, [r2], #1
   2750e:	4281      	cmp	r1, r0
   27510:	d10c      	bne.n	2752c <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   27512:	3301      	adds	r3, #1
   27514:	2b08      	cmp	r3, #8
   27516:	d1f8      	bne.n	2750a <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   27518:	686b      	ldr	r3, [r5, #4]
   2751a:	e005      	b.n	27528 <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   2751c:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   2751e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   27522:	0c1b      	lsrs	r3, r3, #16
   27524:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   27526:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   27528:	6033      	str	r3, [r6, #0]
		return 0;
   2752a:	e00a      	b.n	27542 <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2752c:	4669      	mov	r1, sp
   2752e:	4628      	mov	r0, r5
   27530:	f7ff ff5a 	bl	273e8 <nvs_close_ate_valid>
   27534:	2800      	cmp	r0, #0
   27536:	d1f1      	bne.n	2751c <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   27538:	4631      	mov	r1, r6
   2753a:	4628      	mov	r0, r5
   2753c:	f7eb ff32 	bl	133a4 <nvs_recover_last_ate>
   27540:	4604      	mov	r4, r0
}
   27542:	4620      	mov	r0, r4
   27544:	b003      	add	sp, #12
   27546:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027548 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   27548:	2300      	movs	r3, #0
   2754a:	461a      	mov	r2, r3
   2754c:	f7ec b99e 	b.w	1388c <nvs_write>

00027550 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   27550:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   27552:	2400      	movs	r4, #0
   27554:	9400      	str	r4, [sp, #0]
   27556:	f7ec fa7d 	bl	13a54 <nvs_read_hist>
	return rc;
}
   2755a:	b002      	add	sp, #8
   2755c:	bd10      	pop	{r4, pc}

0002755e <virtio_get_status>:
}
   2755e:	2004      	movs	r0, #4
   27560:	4770      	bx	lr

00027562 <virtio_get_features>:
}
   27562:	2001      	movs	r0, #1
   27564:	4770      	bx	lr

00027566 <virtio_set_features>:
}
   27566:	4770      	bx	lr

00027568 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   27568:	f004 b898 	b.w	2b69c <rpmsg_destroy_ept>

0002756c <device_get_binding>:
   2756c:	f7fa bf66 	b.w	2243c <z_impl_device_get_binding>

00027570 <get_sectors_cb>:
{
   27570:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   27572:	6802      	ldr	r2, [r0, #0]
   27574:	684c      	ldr	r4, [r1, #4]
   27576:	42a2      	cmp	r2, r4
   27578:	d316      	bcc.n	275a8 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   2757a:	688b      	ldr	r3, [r1, #8]
   2757c:	4423      	add	r3, r4
   2757e:	429a      	cmp	r2, r3
   27580:	d206      	bcs.n	27590 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   27582:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   27586:	42ab      	cmp	r3, r5
   27588:	d304      	bcc.n	27594 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   2758a:	f06f 030b 	mvn.w	r3, #11
   2758e:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   27590:	2000      	movs	r0, #0
   27592:	e00a      	b.n	275aa <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   27594:	68cd      	ldr	r5, [r1, #12]
   27596:	1b12      	subs	r2, r2, r4
   27598:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   2759c:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   2759e:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
   275a2:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
   275a4:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   275a6:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   275a8:	2001      	movs	r0, #1
}
   275aa:	bd70      	pop	{r4, r5, r6, pc}

000275ac <settings_load>:
	return settings_load_subtree(NULL);
   275ac:	2000      	movs	r0, #0
   275ae:	f7ec bd87 	b.w	140c0 <settings_load_subtree>

000275b2 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   275b2:	2200      	movs	r2, #0
   275b4:	4611      	mov	r1, r2
   275b6:	f7ec bd49 	b.w	1404c <settings_save_one>

000275ba <settings_name_steq>:
{
   275ba:	4603      	mov	r3, r0
   275bc:	b530      	push	{r4, r5, lr}
   275be:	4608      	mov	r0, r1
	if (next) {
   275c0:	b10a      	cbz	r2, 275c6 <settings_name_steq+0xc>
		*next = NULL;
   275c2:	2100      	movs	r1, #0
   275c4:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   275c6:	b163      	cbz	r3, 275e2 <settings_name_steq+0x28>
   275c8:	b190      	cbz	r0, 275f0 <settings_name_steq+0x36>
   275ca:	1e41      	subs	r1, r0, #1
   275cc:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   275ce:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   275d2:	4604      	mov	r4, r0
   275d4:	f810 3b01 	ldrb.w	r3, [r0], #1
   275d8:	b15d      	cbz	r5, 275f2 <settings_name_steq+0x38>
   275da:	429d      	cmp	r5, r3
   275dc:	d101      	bne.n	275e2 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   275de:	2d3d      	cmp	r5, #61	; 0x3d
   275e0:	d1f5      	bne.n	275ce <settings_name_steq+0x14>
	return 0;
   275e2:	2000      	movs	r0, #0
   275e4:	e004      	b.n	275f0 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   275e6:	2b3d      	cmp	r3, #61	; 0x3d
   275e8:	d008      	beq.n	275fc <settings_name_steq+0x42>
   275ea:	fab3 f083 	clz	r0, r3
   275ee:	0940      	lsrs	r0, r0, #5
}
   275f0:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   275f2:	2b2f      	cmp	r3, #47	; 0x2f
   275f4:	d1f7      	bne.n	275e6 <settings_name_steq+0x2c>
		if (next) {
   275f6:	b10a      	cbz	r2, 275fc <settings_name_steq+0x42>
			*next = name + 1;
   275f8:	3401      	adds	r4, #1
   275fa:	6014      	str	r4, [r2, #0]
		return 1;
   275fc:	2001      	movs	r0, #1
   275fe:	e7f7      	b.n	275f0 <settings_name_steq+0x36>

00027600 <settings_name_next>:
{
   27600:	4603      	mov	r3, r0
   27602:	b530      	push	{r4, r5, lr}
	if (next) {
   27604:	b109      	cbz	r1, 2760a <settings_name_next+0xa>
		*next = NULL;
   27606:	2200      	movs	r2, #0
   27608:	600a      	str	r2, [r1, #0]
	if (!name) {
   2760a:	b16b      	cbz	r3, 27628 <settings_name_next+0x28>
   2760c:	461a      	mov	r2, r3
   2760e:	4614      	mov	r4, r2
   27610:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   27612:	f812 5b01 	ldrb.w	r5, [r2], #1
   27616:	b135      	cbz	r5, 27626 <settings_name_next+0x26>
   27618:	2d3d      	cmp	r5, #61	; 0x3d
   2761a:	d004      	beq.n	27626 <settings_name_next+0x26>
   2761c:	2d2f      	cmp	r5, #47	; 0x2f
   2761e:	d1f6      	bne.n	2760e <settings_name_next+0xe>
		if (next) {
   27620:	b109      	cbz	r1, 27626 <settings_name_next+0x26>
			*next = name + 1;
   27622:	3401      	adds	r4, #1
   27624:	600c      	str	r4, [r1, #0]
}
   27626:	bd30      	pop	{r4, r5, pc}
		return 0;
   27628:	4618      	mov	r0, r3
   2762a:	e7fc      	b.n	27626 <settings_name_next+0x26>

0002762c <settings_nvs_read_fn>:
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2762c:	4613      	mov	r3, r2
{
   2762e:	b510      	push	{r4, lr}
   27630:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   27632:	460a      	mov	r2, r1
   27634:	8881      	ldrh	r1, [r0, #4]
   27636:	6800      	ldr	r0, [r0, #0]
   27638:	f7ff ff8a 	bl	27550 <nvs_read>
}
   2763c:	42a0      	cmp	r0, r4
   2763e:	bfa8      	it	ge
   27640:	4620      	movge	r0, r4
   27642:	bd10      	pop	{r4, pc}

00027644 <settings_nvs_save>:
{
   27644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27648:	b097      	sub	sp, #92	; 0x5c
   2764a:	4604      	mov	r4, r0
   2764c:	469b      	mov	fp, r3
	if (!name) {
   2764e:	4689      	mov	r9, r1
{
   27650:	9201      	str	r2, [sp, #4]
	if (!name) {
   27652:	2900      	cmp	r1, #0
   27654:	d069      	beq.n	2772a <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   27656:	b1da      	cbz	r2, 27690 <settings_nvs_save+0x4c>
   27658:	fabb f78b 	clz	r7, fp
   2765c:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   2765e:	8f25      	ldrh	r5, [r4, #56]	; 0x38
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   27660:	f104 0a08 	add.w	sl, r4, #8
	name_id = cf->last_name_id + 1;
   27664:	3501      	adds	r5, #1
   27666:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   27668:	46a8      	mov	r8, r5
		name_id--;
   2766a:	1e6e      	subs	r6, r5, #1
   2766c:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   2766e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   27672:	d02e      	beq.n	276d2 <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   27674:	234a      	movs	r3, #74	; 0x4a
   27676:	4631      	mov	r1, r6
   27678:	4650      	mov	r0, sl
   2767a:	aa03      	add	r2, sp, #12
   2767c:	f7ff ff68 	bl	27550 <nvs_read>
		if (rc < 0) {
   27680:	2800      	cmp	r0, #0
   27682:	da07      	bge.n	27694 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   27684:	f110 0f02 	cmn.w	r0, #2
   27688:	bf08      	it	eq
   2768a:	46b0      	moveq	r8, r6
   2768c:	4635      	mov	r5, r6
   2768e:	e7ec      	b.n	2766a <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   27690:	2701      	movs	r7, #1
   27692:	e7e4      	b.n	2765e <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   27694:	ab16      	add	r3, sp, #88	; 0x58
   27696:	4418      	add	r0, r3
   27698:	2300      	movs	r3, #0
		if (strcmp(name, rdname)) {
   2769a:	a903      	add	r1, sp, #12
		rdname[rc] = '\0';
   2769c:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   276a0:	4648      	mov	r0, r9
   276a2:	f000 ff4b 	bl	2853c <strcmp>
   276a6:	2800      	cmp	r0, #0
   276a8:	d1f0      	bne.n	2768c <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   276aa:	2f00      	cmp	r7, #0
   276ac:	d03b      	beq.n	27726 <settings_nvs_save+0xe2>
   276ae:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   276b0:	42b3      	cmp	r3, r6
   276b2:	d142      	bne.n	2773a <settings_nvs_save+0xf6>
			cf->last_name_id--;
   276b4:	4622      	mov	r2, r4
   276b6:	1e73      	subs	r3, r6, #1
   276b8:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   276bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   276c0:	2302      	movs	r3, #2
   276c2:	4650      	mov	r0, sl
   276c4:	f7ec f8e2 	bl	1388c <nvs_write>
			if (rc < 0) {
   276c8:	2800      	cmp	r0, #0
   276ca:	da36      	bge.n	2773a <settings_nvs_save+0xf6>
}
   276cc:	b017      	add	sp, #92	; 0x5c
   276ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   276d2:	bb6f      	cbnz	r7, 27730 <settings_nvs_save+0xec>
	write_name = true;
   276d4:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   276d6:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   276da:	d02b      	beq.n	27734 <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   276dc:	f104 0508 	add.w	r5, r4, #8
   276e0:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   276e4:	465b      	mov	r3, fp
   276e6:	4628      	mov	r0, r5
   276e8:	9a01      	ldr	r2, [sp, #4]
   276ea:	b289      	uxth	r1, r1
   276ec:	f7ec f8ce 	bl	1388c <nvs_write>
	if (rc < 0) {
   276f0:	2800      	cmp	r0, #0
   276f2:	dbeb      	blt.n	276cc <settings_nvs_save+0x88>
	if (write_name) {
   276f4:	b157      	cbz	r7, 2770c <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   276f6:	4648      	mov	r0, r9
   276f8:	f000 ff10 	bl	2851c <strlen>
   276fc:	464a      	mov	r2, r9
   276fe:	4603      	mov	r3, r0
   27700:	4641      	mov	r1, r8
   27702:	4628      	mov	r0, r5
   27704:	f7ec f8c2 	bl	1388c <nvs_write>
		if (rc < 0) {
   27708:	2800      	cmp	r0, #0
   2770a:	dbdf      	blt.n	276cc <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   2770c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2770e:	4543      	cmp	r3, r8
   27710:	d220      	bcs.n	27754 <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   27712:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   27714:	2302      	movs	r3, #2
   27716:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2771a:	4628      	mov	r0, r5
		cf->last_name_id = write_name_id;
   2771c:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   27720:	f7ec f8b4 	bl	1388c <nvs_write>
   27724:	e016      	b.n	27754 <settings_nvs_save+0x110>
   27726:	46b0      	mov	r8, r6
   27728:	e7d5      	b.n	276d6 <settings_nvs_save+0x92>
		return -EINVAL;
   2772a:	f06f 0015 	mvn.w	r0, #21
   2772e:	e7cd      	b.n	276cc <settings_nvs_save+0x88>
		return 0;
   27730:	2000      	movs	r0, #0
   27732:	e7cb      	b.n	276cc <settings_nvs_save+0x88>
		return -ENOMEM;
   27734:	f06f 000b 	mvn.w	r0, #11
   27738:	e7c8      	b.n	276cc <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   2773a:	4631      	mov	r1, r6
   2773c:	4650      	mov	r0, sl
   2773e:	f7ff ff03 	bl	27548 <nvs_delete>
			if (rc >= 0) {
   27742:	2800      	cmp	r0, #0
   27744:	dbc2      	blt.n	276cc <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   27746:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   2774a:	313f      	adds	r1, #63	; 0x3f
   2774c:	4650      	mov	r0, sl
   2774e:	b289      	uxth	r1, r1
   27750:	f7ff fefa 	bl	27548 <nvs_delete>
	if (rc < 0) {
   27754:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   27758:	e7b8      	b.n	276cc <settings_nvs_save+0x88>

0002775a <settings_nvs_backend_init>:
{
   2775a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   2775c:	f100 0608 	add.w	r6, r0, #8
   27760:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   27762:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   27764:	4630      	mov	r0, r6
   27766:	f7eb ff11 	bl	1358c <nvs_init>
	if (rc) {
   2776a:	4605      	mov	r5, r0
   2776c:	b970      	cbnz	r0, 2778c <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   2776e:	2302      	movs	r3, #2
   27770:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   27774:	4630      	mov	r0, r6
   27776:	f10d 0206 	add.w	r2, sp, #6
   2777a:	f7ff fee9 	bl	27550 <nvs_read>
	if (rc < 0) {
   2777e:	2800      	cmp	r0, #0
		cf->last_name_id = NVS_NAMECNT_ID;
   27780:	bfb4      	ite	lt
   27782:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   27786:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   2778a:	8723      	strh	r3, [r4, #56]	; 0x38
}
   2778c:	4628      	mov	r0, r5
   2778e:	b002      	add	sp, #8
   27790:	bd70      	pop	{r4, r5, r6, pc}

00027792 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   27792:	2200      	movs	r2, #0
   27794:	e9c0 2200 	strd	r2, r2, [r0]
   27798:	6082      	str	r2, [r0, #8]
}
   2779a:	4770      	bx	lr

0002779c <set_starting_state>:
{
   2779c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2779e:	f04f 0320 	mov.w	r3, #32
   277a2:	f3ef 8211 	mrs	r2, BASEPRI
   277a6:	f383 8811 	msr	BASEPRI, r3
   277aa:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   277ae:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   277b0:	f003 0407 	and.w	r4, r3, #7
   277b4:	2c01      	cmp	r4, #1
   277b6:	d106      	bne.n	277c6 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   277b8:	6001      	str	r1, [r0, #0]
	int err = 0;
   277ba:	2000      	movs	r0, #0
	__asm__ volatile(
   277bc:	f382 8811 	msr	BASEPRI, r2
   277c0:	f3bf 8f6f 	isb	sy
}
   277c4:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   277c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   277ca:	428b      	cmp	r3, r1
		err = -EALREADY;
   277cc:	bf14      	ite	ne
   277ce:	f04f 30ff 	movne.w	r0, #4294967295
   277d2:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   277d6:	e7f1      	b.n	277bc <set_starting_state+0x20>

000277d8 <set_on_state>:
	__asm__ volatile(
   277d8:	f04f 0320 	mov.w	r3, #32
   277dc:	f3ef 8211 	mrs	r2, BASEPRI
   277e0:	f383 8811 	msr	BASEPRI, r3
   277e4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   277e8:	6803      	ldr	r3, [r0, #0]
   277ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   277ee:	f043 0302 	orr.w	r3, r3, #2
   277f2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   277f4:	f382 8811 	msr	BASEPRI, r2
   277f8:	f3bf 8f6f 	isb	sy
}
   277fc:	4770      	bx	lr

000277fe <onoff_started_callback>:
	return &data->mgr[type];
   277fe:	6900      	ldr	r0, [r0, #16]
   27800:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   27802:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   27806:	2100      	movs	r1, #0
   27808:	4710      	bx	r2

0002780a <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2780a:	2003      	movs	r0, #3
   2780c:	f7f9 be4a 	b.w	214a4 <nrfx_clock_start>

00027810 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   27810:	2002      	movs	r0, #2
   27812:	f7f9 be47 	b.w	214a4 <nrfx_clock_start>

00027816 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   27816:	2000      	movs	r0, #0
   27818:	f7f9 be44 	b.w	214a4 <nrfx_clock_start>

0002781c <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2781c:	2003      	movs	r0, #3
   2781e:	f7f9 beb7 	b.w	21590 <nrfx_clock_stop>

00027822 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   27822:	2002      	movs	r0, #2
   27824:	f7f9 beb4 	b.w	21590 <nrfx_clock_stop>

00027828 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   27828:	2000      	movs	r0, #0
   2782a:	f7f9 beb1 	b.w	21590 <nrfx_clock_stop>

0002782e <api_stop>:
	return stop(dev, subsys, CTX_API);
   2782e:	2280      	movs	r2, #128	; 0x80
   27830:	f7ec bf96 	b.w	14760 <stop>

00027834 <blocking_start_callback>:
{
   27834:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   27836:	f7fb be31 	b.w	2349c <z_impl_k_sem_give>

0002783a <api_start>:
{
   2783a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   2783e:	240c      	movs	r4, #12
   27840:	b2c9      	uxtb	r1, r1
   27842:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   27844:	6905      	ldr	r5, [r0, #16]
{
   27846:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   27848:	f104 0088 	add.w	r0, r4, #136	; 0x88
   2784c:	2180      	movs	r1, #128	; 0x80
   2784e:	4428      	add	r0, r5
{
   27850:	4690      	mov	r8, r2
   27852:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   27854:	f7ff ffa2 	bl	2779c <set_starting_state>
	if (err < 0) {
   27858:	2800      	cmp	r0, #0
   2785a:	db06      	blt.n	2786a <api_start+0x30>
	subdata->cb = cb;
   2785c:	4425      	add	r5, r4
	subdata->user_data = user_data;
   2785e:	e9c5 8720 	strd	r8, r7, [r5, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   27862:	6873      	ldr	r3, [r6, #4]
   27864:	591b      	ldr	r3, [r3, r4]
   27866:	4798      	blx	r3
	return 0;
   27868:	2000      	movs	r0, #0
}
   2786a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002786e <bt_rpmsg_open>:
{
   2786e:	b508      	push	{r3, lr}
	while (!bt_rpmsg_platform_endpoint_is_bound()) {
   27870:	f7ed faec 	bl	14e4c <bt_rpmsg_platform_endpoint_is_bound>
   27874:	b108      	cbz	r0, 2787a <bt_rpmsg_open+0xc>
}
   27876:	2000      	movs	r0, #0
   27878:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
   2787a:	2100      	movs	r1, #0
   2787c:	2021      	movs	r0, #33	; 0x21
   2787e:	f7fd fccd 	bl	2521c <z_impl_k_sleep>
   27882:	e7f5      	b.n	27870 <bt_rpmsg_open+0x2>

00027884 <endpoint_cb>:
{
   27884:	b508      	push	{r3, lr}
   27886:	4608      	mov	r0, r1
	bt_rpmsg_rx(data, len);
   27888:	4611      	mov	r1, r2
   2788a:	f7ed f9b3 	bl	14bf4 <bt_rpmsg_rx>
}
   2788e:	2000      	movs	r0, #0
   27890:	bd08      	pop	{r3, pc}

00027892 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   27892:	4770      	bx	lr

00027894 <attr_find_by_handle>:
{
   27894:	b570      	push	{r4, r5, r6, lr}
   27896:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   27898:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   2789c:	b1a8      	cbz	r0, 278ca <attr_find_by_handle+0x36>
	ssize_t lower = 0;
   2789e:	2600      	movs	r6, #0
	ssize_t upper = dm->cur_attr_id - 1;
   278a0:	3801      	subs	r0, #1
	while (upper >= lower) {
   278a2:	4286      	cmp	r6, r0
   278a4:	dd01      	ble.n	278aa <attr_find_by_handle+0x16>
		return NULL;
   278a6:	2000      	movs	r0, #0
   278a8:	e00f      	b.n	278ca <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   278aa:	1832      	adds	r2, r6, r0
   278ac:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   278b0:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   278b2:	1cd5      	adds	r5, r2, #3
   278b4:	00eb      	lsls	r3, r5, #3
   278b6:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   278ba:	892d      	ldrh	r5, [r5, #8]
   278bc:	428d      	cmp	r5, r1
   278be:	d201      	bcs.n	278c4 <attr_find_by_handle+0x30>
			lower = m + 1;
   278c0:	1c56      	adds	r6, r2, #1
   278c2:	e7ee      	b.n	278a2 <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   278c4:	d802      	bhi.n	278cc <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   278c6:	3304      	adds	r3, #4
   278c8:	18e0      	adds	r0, r4, r3
}
   278ca:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   278cc:	1e50      	subs	r0, r2, #1
   278ce:	e7e8      	b.n	278a2 <attr_find_by_handle+0xe>

000278d0 <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   278d0:	2300      	movs	r3, #0
{
   278d2:	b510      	push	{r4, lr}
   278d4:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   278d6:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
Z_GENLIST_IS_EMPTY(slist)
   278da:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   278de:	b910      	cbnz	r0, 278e6 <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   278e0:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
}
   278e4:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   278e6:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
   278ea:	6803      	ldr	r3, [r0, #0]
   278ec:	4290      	cmp	r0, r2
	list->head = node;
   278ee:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
	list->tail = node;
   278f2:	bf08      	it	eq
   278f4:	f8c4 3140 	streq.w	r3, [r4, #320]	; 0x140
		k_free(item);
   278f8:	f004 f9a5 	bl	2bc46 <k_free>
   278fc:	e7ed      	b.n	278da <svc_attr_memory_release+0xa>

000278fe <atomic_and>:
{
   278fe:	4603      	mov	r3, r0
}
   27900:	e8d3 0fef 	ldaex	r0, [r3]
   27904:	ea00 0201 	and.w	r2, r0, r1
   27908:	e8c3 2fec 	stlex	ip, r2, [r3]
   2790c:	f1bc 0f00 	cmp.w	ip, #0
   27910:	d1f6      	bne.n	27900 <atomic_and+0x2>
   27912:	4770      	bx	lr

00027914 <discovery_complete_not_found>:
{
   27914:	b510      	push	{r4, lr}
   27916:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   27918:	f7ff ffda 	bl	278d0 <svc_attr_memory_release>
   2791c:	f06f 0101 	mvn.w	r1, #1
   27920:	f504 709c 	add.w	r0, r4, #312	; 0x138
   27924:	f7ff ffeb 	bl	278fe <atomic_and>
	if (dm->callback->service_not_found) {
   27928:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   2792c:	685b      	ldr	r3, [r3, #4]
   2792e:	b123      	cbz	r3, 2793a <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   27930:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   27934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   27938:	4718      	bx	r3
}
   2793a:	bd10      	pop	{r4, pc}

0002793c <discovery_complete_error>:
{
   2793c:	b570      	push	{r4, r5, r6, lr}
   2793e:	4604      	mov	r4, r0
   27940:	460d      	mov	r5, r1
	svc_attr_memory_release(dm);
   27942:	f7ff ffc5 	bl	278d0 <svc_attr_memory_release>
   27946:	f06f 0101 	mvn.w	r1, #1
   2794a:	f504 709c 	add.w	r0, r4, #312	; 0x138
   2794e:	f7ff ffd6 	bl	278fe <atomic_and>
	if (dm->callback->error_found) {
   27952:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   27956:	689b      	ldr	r3, [r3, #8]
   27958:	b12b      	cbz	r3, 27966 <discovery_complete_error+0x2a>
		dm->callback->error_found(dm->conn, err, dm->context);
   2795a:	4629      	mov	r1, r5
   2795c:	6862      	ldr	r2, [r4, #4]
   2795e:	6820      	ldr	r0, [r4, #0]
}
   27960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
   27964:	4718      	bx	r3
}
   27966:	bd70      	pop	{r4, r5, r6, pc}

00027968 <bt_gatt_dm_attr_service_val>:
{
   27968:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   2796a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2796e:	2400      	movs	r4, #0
{
   27970:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   27972:	6801      	ldr	r1, [r0, #0]
   27974:	4668      	mov	r0, sp
   27976:	f88d 4000 	strb.w	r4, [sp]
   2797a:	f8ad 3002 	strh.w	r3, [sp, #2]
   2797e:	f000 fea3 	bl	286c8 <bt_uuid_cmp>
   27982:	b918      	cbnz	r0, 2798c <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   27984:	6828      	ldr	r0, [r5, #0]
   27986:	3808      	subs	r0, #8
}
   27988:	b003      	add	sp, #12
   2798a:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   2798c:	f642 0301 	movw	r3, #10241	; 0x2801
   27990:	6829      	ldr	r1, [r5, #0]
   27992:	a801      	add	r0, sp, #4
   27994:	f88d 4004 	strb.w	r4, [sp, #4]
   27998:	f8ad 3006 	strh.w	r3, [sp, #6]
   2799c:	f000 fe94 	bl	286c8 <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   279a0:	2800      	cmp	r0, #0
   279a2:	d0ef      	beq.n	27984 <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   279a4:	4620      	mov	r0, r4
   279a6:	e7ef      	b.n	27988 <bt_gatt_dm_attr_service_val+0x20>

000279a8 <bt_gatt_dm_attr_chrc_val>:
{
   279a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   279aa:	f642 0303 	movw	r3, #10243	; 0x2803
   279ae:	2400      	movs	r4, #0
{
   279b0:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   279b2:	6801      	ldr	r1, [r0, #0]
   279b4:	a801      	add	r0, sp, #4
   279b6:	f88d 4004 	strb.w	r4, [sp, #4]
   279ba:	f8ad 3006 	strh.w	r3, [sp, #6]
   279be:	f000 fe83 	bl	286c8 <bt_uuid_cmp>
   279c2:	b918      	cbnz	r0, 279cc <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   279c4:	6828      	ldr	r0, [r5, #0]
   279c6:	3808      	subs	r0, #8
}
   279c8:	b003      	add	sp, #12
   279ca:	bd30      	pop	{r4, r5, pc}
	return NULL;
   279cc:	4620      	mov	r0, r4
   279ce:	e7fb      	b.n	279c8 <bt_gatt_dm_attr_chrc_val+0x20>

000279d0 <bt_gatt_dm_conn_get>:
}
   279d0:	6800      	ldr	r0, [r0, #0]
   279d2:	4770      	bx	lr

000279d4 <bt_gatt_dm_service_get>:
}
   279d4:	301c      	adds	r0, #28
   279d6:	4770      	bx	lr

000279d8 <bt_gatt_dm_char_next>:
{
   279d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   279da:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   279de:	b131      	cbz	r1, 279ee <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   279e0:	42a9      	cmp	r1, r5
   279e2:	d203      	bcs.n	279ec <bt_gatt_dm_char_next+0x14>
	return NULL;
   279e4:	2500      	movs	r5, #0
}
   279e6:	4628      	mov	r0, r5
   279e8:	b003      	add	sp, #12
   279ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   279ec:	460d      	mov	r5, r1
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   279ee:	2600      	movs	r6, #0
   279f0:	f642 0703 	movw	r7, #10243	; 0x2803
		const struct bt_gatt_dm_attr *const end =
   279f4:	f8d0 4134 	ldr.w	r4, [r0, #308]	; 0x134
   279f8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   279fc:	f100 041c 	add.w	r4, r0, #28
		while (++prev < end) {
   27a00:	3508      	adds	r5, #8
   27a02:	42ac      	cmp	r4, r5
   27a04:	d9ee      	bls.n	279e4 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   27a06:	6829      	ldr	r1, [r5, #0]
   27a08:	a801      	add	r0, sp, #4
   27a0a:	f88d 6004 	strb.w	r6, [sp, #4]
   27a0e:	f8ad 7006 	strh.w	r7, [sp, #6]
   27a12:	f000 fe59 	bl	286c8 <bt_uuid_cmp>
   27a16:	2800      	cmp	r0, #0
   27a18:	d1f2      	bne.n	27a00 <bt_gatt_dm_char_next+0x28>
   27a1a:	e7e4      	b.n	279e6 <bt_gatt_dm_char_next+0xe>

00027a1c <bt_gatt_dm_attr_next>:
{
   27a1c:	4602      	mov	r2, r0
   27a1e:	f100 031c 	add.w	r3, r0, #28
	if (!prev) {
   27a22:	b111      	cbz	r1, 27a2a <bt_gatt_dm_attr_next+0xe>
	if (dm->attrs <= prev) {
   27a24:	4299      	cmp	r1, r3
   27a26:	d30b      	bcc.n	27a40 <bt_gatt_dm_attr_next+0x24>
   27a28:	460b      	mov	r3, r1
		if (++prev < end) {
   27a2a:	f103 0008 	add.w	r0, r3, #8
		const struct bt_gatt_dm_attr *const end =
   27a2e:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   27a32:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   27a36:	321c      	adds	r2, #28
	return NULL;
   27a38:	4290      	cmp	r0, r2
   27a3a:	bf28      	it	cs
   27a3c:	2000      	movcs	r0, #0
   27a3e:	4770      	bx	lr
   27a40:	2000      	movs	r0, #0
}
   27a42:	4770      	bx	lr

00027a44 <bt_gatt_dm_desc_next>:
{
   27a44:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   27a46:	f7ff ffe9 	bl	27a1c <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   27a4a:	4604      	mov	r4, r0
   27a4c:	b158      	cbz	r0, 27a66 <bt_gatt_dm_desc_next+0x22>
   27a4e:	2300      	movs	r3, #0
   27a50:	f88d 3004 	strb.w	r3, [sp, #4]
   27a54:	f642 0303 	movw	r3, #10243	; 0x2803
   27a58:	6801      	ldr	r1, [r0, #0]
   27a5a:	a801      	add	r0, sp, #4
   27a5c:	f8ad 3006 	strh.w	r3, [sp, #6]
   27a60:	f000 fe32 	bl	286c8 <bt_uuid_cmp>
   27a64:	b900      	cbnz	r0, 27a68 <bt_gatt_dm_desc_next+0x24>
		curr = NULL;
   27a66:	2400      	movs	r4, #0
}
   27a68:	4620      	mov	r0, r4
   27a6a:	b002      	add	sp, #8
   27a6c:	bd10      	pop	{r4, pc}

00027a6e <bt_gatt_dm_desc_by_uuid>:
{
   27a6e:	b570      	push	{r4, r5, r6, lr}
   27a70:	4605      	mov	r5, r0
   27a72:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   27a74:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   27a76:	4621      	mov	r1, r4
   27a78:	4628      	mov	r0, r5
   27a7a:	f7ff ffe3 	bl	27a44 <bt_gatt_dm_desc_next>
   27a7e:	4604      	mov	r4, r0
   27a80:	b128      	cbz	r0, 27a8e <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   27a82:	4630      	mov	r0, r6
   27a84:	6821      	ldr	r1, [r4, #0]
   27a86:	f000 fe1f 	bl	286c8 <bt_uuid_cmp>
   27a8a:	2800      	cmp	r0, #0
   27a8c:	d1f3      	bne.n	27a76 <bt_gatt_dm_desc_by_uuid+0x8>
}
   27a8e:	4620      	mov	r0, r4
   27a90:	bd70      	pop	{r4, r5, r6, pc}

00027a92 <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   27a92:	b510      	push	{r4, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   27a94:	f500 749c 	add.w	r4, r0, #312	; 0x138
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27a98:	e8d4 3fef 	ldaex	r3, [r4]
   27a9c:	f023 0202 	bic.w	r2, r3, #2
   27aa0:	e8c4 2fe1 	stlex	r1, r2, [r4]
   27aa4:	2900      	cmp	r1, #0
   27aa6:	d1f7      	bne.n	27a98 <bt_gatt_dm_data_release+0x6>
   27aa8:	079b      	lsls	r3, r3, #30
   27aaa:	d508      	bpl.n	27abe <bt_gatt_dm_data_release+0x2c>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   27aac:	f7ff ff10 	bl	278d0 <svc_attr_memory_release>
   27ab0:	f06f 0101 	mvn.w	r1, #1
   27ab4:	4620      	mov	r0, r4
   27ab6:	f7ff ff22 	bl	278fe <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   27aba:	2000      	movs	r0, #0
}
   27abc:	bd10      	pop	{r4, pc}
		return -EALREADY;
   27abe:	f06f 0077 	mvn.w	r0, #119	; 0x77
   27ac2:	e7fb      	b.n	27abc <bt_gatt_dm_data_release+0x2a>

00027ac4 <adv_data_found>:
{
   27ac4:	b510      	push	{r4, lr}
   27ac6:	4604      	mov	r4, r0
	switch (data->type) {
   27ac8:	7823      	ldrb	r3, [r4, #0]
{
   27aca:	4608      	mov	r0, r1
	switch (data->type) {
   27acc:	2b05      	cmp	r3, #5
   27ace:	d806      	bhi.n	27ade <adv_data_found+0x1a>
   27ad0:	2b03      	cmp	r3, #3
   27ad2:	d80e      	bhi.n	27af2 <adv_data_found+0x2e>
   27ad4:	3b02      	subs	r3, #2
   27ad6:	2b01      	cmp	r3, #1
   27ad8:	d906      	bls.n	27ae8 <adv_data_found+0x24>
}
   27ada:	2001      	movs	r0, #1
   27adc:	bd10      	pop	{r4, pc}
	switch (data->type) {
   27ade:	3b06      	subs	r3, #6
   27ae0:	2b01      	cmp	r3, #1
   27ae2:	d8fa      	bhi.n	27ada <adv_data_found+0x16>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
   27ae4:	2202      	movs	r2, #2
   27ae6:	e000      	b.n	27aea <adv_data_found+0x26>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
   27ae8:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
   27aea:	4621      	mov	r1, r4
   27aec:	f7ed fdd2 	bl	15694 <uuid_check>
		break;
   27af0:	e7f3      	b.n	27ada <adv_data_found+0x16>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
   27af2:	2201      	movs	r2, #1
   27af4:	e7f9      	b.n	27aea <adv_data_found+0x26>

00027af6 <bt_scan_stop>:
	return bt_le_scan_stop();
   27af6:	f7f1 bc13 	b.w	19320 <bt_le_scan_stop>

00027afa <on_received>:
{
   27afa:	4608      	mov	r0, r1
   27afc:	b510      	push	{r4, lr}
   27afe:	4619      	mov	r1, r3
	if (!data) {
   27b00:	4614      	mov	r4, r2
   27b02:	b97a      	cbnz	r2, 27b24 <on_received+0x2a>
		params->value_handle = 0;
   27b04:	8102      	strh	r2, [r0, #8]
   27b06:	f1a0 030c 	sub.w	r3, r0, #12
   27b0a:	e8d3 2fef 	ldaex	r2, [r3]
   27b0e:	f022 0202 	bic.w	r2, r2, #2
   27b12:	e8c3 2fe1 	stlex	r1, r2, [r3]
   27b16:	2900      	cmp	r1, #0
   27b18:	d1f7      	bne.n	27b0a <on_received+0x10>
		if (nus->cb.unsubscribed) {
   27b1a:	6b00      	ldr	r0, [r0, #48]	; 0x30
   27b1c:	b108      	cbz	r0, 27b22 <on_received+0x28>
			nus->cb.unsubscribed();
   27b1e:	4780      	blx	r0
   27b20:	4620      	mov	r0, r4
}
   27b22:	bd10      	pop	{r4, pc}
	if (nus->cb.received) {
   27b24:	6a83      	ldr	r3, [r0, #40]	; 0x28
   27b26:	b11b      	cbz	r3, 27b30 <on_received+0x36>
}
   27b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return nus->cb.received(data, length);
   27b2c:	4610      	mov	r0, r2
   27b2e:	4718      	bx	r3
	return BT_GATT_ITER_CONTINUE;
   27b30:	2001      	movs	r0, #1
   27b32:	e7f6      	b.n	27b22 <on_received+0x28>

00027b34 <bt_nus_client_init>:
{
   27b34:	b510      	push	{r4, lr}
	if (!nus_c || !nus_c_init) {
   27b36:	b198      	cbz	r0, 27b60 <bt_nus_client_init+0x2c>
   27b38:	b191      	cbz	r1, 27b60 <bt_nus_client_init+0x2c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27b3a:	1d03      	adds	r3, r0, #4
   27b3c:	e8d3 4fef 	ldaex	r4, [r3]
   27b40:	f044 0201 	orr.w	r2, r4, #1
   27b44:	e8c3 2fec 	stlex	ip, r2, [r3]
   27b48:	f1bc 0f00 	cmp.w	ip, #0
   27b4c:	d1f6      	bne.n	27b3c <bt_nus_client_init+0x8>
	if (atomic_test_and_set_bit(&nus_c->state, NUS_C_INITIALIZED)) {
   27b4e:	f014 0401 	ands.w	r4, r4, #1
   27b52:	d108      	bne.n	27b66 <bt_nus_client_init+0x32>
	memcpy(&nus_c->cb, &nus_c_init->cb, sizeof(nus_c->cb));
   27b54:	220c      	movs	r2, #12
   27b56:	3038      	adds	r0, #56	; 0x38
   27b58:	f000 fd1b 	bl	28592 <memcpy>
}
   27b5c:	4620      	mov	r0, r4
   27b5e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   27b60:	f06f 0415 	mvn.w	r4, #21
   27b64:	e7fa      	b.n	27b5c <bt_nus_client_init+0x28>
		return -EALREADY;
   27b66:	f06f 0477 	mvn.w	r4, #119	; 0x77
   27b6a:	e7f7      	b.n	27b5c <bt_nus_client_init+0x28>

00027b6c <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   27b6c:	b510      	push	{r4, lr}
   27b6e:	b40f      	push	{r0, r1, r2, r3}
   27b70:	f7ee f8c4 	bl	15cfc <before_nse>
   27b74:	bc0f      	pop	{r0, r1, r2, r3}
   27b76:	f7e4 fa37 	bl	bfe8 <spm_request_random_number_nse>
   27b7a:	b40f      	push	{r0, r1, r2, r3}
   27b7c:	f7ee f8c8 	bl	15d10 <after_nse>
   27b80:	bc0f      	pop	{r0, r1, r2, r3}
   27b82:	bd10      	pop	{r4, pc}

00027b84 <spm_request_read>:
					size_t *olen);
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_READ
NRF_NSE(int, spm_request_read, void *destination, uint32_t addr, size_t len);
   27b84:	b510      	push	{r4, lr}
   27b86:	b40f      	push	{r0, r1, r2, r3}
   27b88:	f7ee f8b8 	bl	15cfc <before_nse>
   27b8c:	bc0f      	pop	{r0, r1, r2, r3}
   27b8e:	f7e4 fa2f 	bl	bff0 <spm_request_read_nse>
   27b92:	b40f      	push	{r0, r1, r2, r3}
   27b94:	f7ee f8bc 	bl	15d10 <after_nse>
   27b98:	bc0f      	pop	{r0, r1, r2, r3}
   27b9a:	bd10      	pop	{r4, pc}

00027b9c <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   27b9c:	b538      	push	{r3, r4, r5, lr}
   27b9e:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   27ba0:	42ab      	cmp	r3, r5
{
   27ba2:	4611      	mov	r1, r2
   27ba4:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   27ba6:	d804      	bhi.n	27bb2 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   27ba8:	461a      	mov	r2, r3
   27baa:	f000 fcf2 	bl	28592 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   27bae:	4620      	mov	r0, r4
   27bb0:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   27bb2:	2400      	movs	r4, #0
   27bb4:	e7fb      	b.n	27bae <_copy+0x12>

00027bb6 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   27bb6:	f000 bd17 	b.w	285e8 <memset>

00027bba <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   27bba:	09c3      	lsrs	r3, r0, #7
   27bbc:	005a      	lsls	r2, r3, #1
   27bbe:	4413      	add	r3, r2
   27bc0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   27bc4:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   27bc8:	b2c0      	uxtb	r0, r0
   27bca:	4770      	bx	lr

00027bcc <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   27bcc:	78cb      	ldrb	r3, [r1, #3]
   27bce:	7802      	ldrb	r2, [r0, #0]
   27bd0:	4053      	eors	r3, r2
   27bd2:	7003      	strb	r3, [r0, #0]
   27bd4:	884b      	ldrh	r3, [r1, #2]
   27bd6:	7842      	ldrb	r2, [r0, #1]
   27bd8:	4053      	eors	r3, r2
   27bda:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   27bdc:	680a      	ldr	r2, [r1, #0]
   27bde:	7883      	ldrb	r3, [r0, #2]
   27be0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27be4:	7083      	strb	r3, [r0, #2]
   27be6:	680a      	ldr	r2, [r1, #0]
   27be8:	78c3      	ldrb	r3, [r0, #3]
   27bea:	4053      	eors	r3, r2
   27bec:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   27bee:	79cb      	ldrb	r3, [r1, #7]
   27bf0:	7902      	ldrb	r2, [r0, #4]
   27bf2:	4053      	eors	r3, r2
   27bf4:	7103      	strb	r3, [r0, #4]
   27bf6:	88cb      	ldrh	r3, [r1, #6]
   27bf8:	7942      	ldrb	r2, [r0, #5]
   27bfa:	4053      	eors	r3, r2
   27bfc:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   27bfe:	684a      	ldr	r2, [r1, #4]
   27c00:	7983      	ldrb	r3, [r0, #6]
   27c02:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27c06:	7183      	strb	r3, [r0, #6]
   27c08:	684a      	ldr	r2, [r1, #4]
   27c0a:	79c3      	ldrb	r3, [r0, #7]
   27c0c:	4053      	eors	r3, r2
   27c0e:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   27c10:	7acb      	ldrb	r3, [r1, #11]
   27c12:	7a02      	ldrb	r2, [r0, #8]
   27c14:	4053      	eors	r3, r2
   27c16:	7203      	strb	r3, [r0, #8]
   27c18:	7a42      	ldrb	r2, [r0, #9]
   27c1a:	894b      	ldrh	r3, [r1, #10]
   27c1c:	4053      	eors	r3, r2
   27c1e:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   27c20:	688a      	ldr	r2, [r1, #8]
   27c22:	7a83      	ldrb	r3, [r0, #10]
   27c24:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27c28:	7283      	strb	r3, [r0, #10]
   27c2a:	688a      	ldr	r2, [r1, #8]
   27c2c:	7ac3      	ldrb	r3, [r0, #11]
   27c2e:	4053      	eors	r3, r2
   27c30:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   27c32:	7bcb      	ldrb	r3, [r1, #15]
   27c34:	7b02      	ldrb	r2, [r0, #12]
   27c36:	4053      	eors	r3, r2
   27c38:	7303      	strb	r3, [r0, #12]
   27c3a:	89cb      	ldrh	r3, [r1, #14]
   27c3c:	7b42      	ldrb	r2, [r0, #13]
   27c3e:	4053      	eors	r3, r2
   27c40:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   27c42:	68ca      	ldr	r2, [r1, #12]
   27c44:	7b83      	ldrb	r3, [r0, #14]
   27c46:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27c4a:	7383      	strb	r3, [r0, #14]
   27c4c:	68ca      	ldr	r2, [r1, #12]
   27c4e:	7bc3      	ldrb	r3, [r0, #15]
   27c50:	4053      	eors	r3, r2
   27c52:	73c3      	strb	r3, [r0, #15]
}
   27c54:	4770      	bx	lr

00027c56 <shift_rows>:
{
   27c56:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   27c58:	7802      	ldrb	r2, [r0, #0]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   27c5a:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   27c5c:	f88d 2000 	strb.w	r2, [sp]
   27c60:	7942      	ldrb	r2, [r0, #5]
   27c62:	f88d 2001 	strb.w	r2, [sp, #1]
   27c66:	7a82      	ldrb	r2, [r0, #10]
   27c68:	f88d 2002 	strb.w	r2, [sp, #2]
   27c6c:	7bc2      	ldrb	r2, [r0, #15]
   27c6e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   27c72:	7902      	ldrb	r2, [r0, #4]
   27c74:	f88d 2004 	strb.w	r2, [sp, #4]
   27c78:	7a42      	ldrb	r2, [r0, #9]
   27c7a:	f88d 2005 	strb.w	r2, [sp, #5]
   27c7e:	7b82      	ldrb	r2, [r0, #14]
   27c80:	f88d 2006 	strb.w	r2, [sp, #6]
   27c84:	78c2      	ldrb	r2, [r0, #3]
   27c86:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   27c8a:	7a02      	ldrb	r2, [r0, #8]
   27c8c:	f88d 2008 	strb.w	r2, [sp, #8]
   27c90:	7b42      	ldrb	r2, [r0, #13]
   27c92:	f88d 2009 	strb.w	r2, [sp, #9]
   27c96:	7882      	ldrb	r2, [r0, #2]
   27c98:	f88d 200a 	strb.w	r2, [sp, #10]
   27c9c:	79c2      	ldrb	r2, [r0, #7]
   27c9e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   27ca2:	7b02      	ldrb	r2, [r0, #12]
   27ca4:	f88d 200c 	strb.w	r2, [sp, #12]
   27ca8:	7842      	ldrb	r2, [r0, #1]
   27caa:	f88d 200d 	strb.w	r2, [sp, #13]
   27cae:	7982      	ldrb	r2, [r0, #6]
   27cb0:	f88d 200e 	strb.w	r2, [sp, #14]
   27cb4:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   27cb8:	2310      	movs	r3, #16
   27cba:	466a      	mov	r2, sp
   27cbc:	4619      	mov	r1, r3
   27cbe:	f7ff ff6d 	bl	27b9c <_copy>
}
   27cc2:	b005      	add	sp, #20
   27cc4:	f85d fb04 	ldr.w	pc, [sp], #4

00027cc8 <mult_row_column>:
{
   27cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27cca:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   27ccc:	7808      	ldrb	r0, [r1, #0]
{
   27cce:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   27cd0:	f7ff ff73 	bl	27bba <_double_byte>
   27cd4:	4605      	mov	r5, r0
   27cd6:	7860      	ldrb	r0, [r4, #1]
   27cd8:	f7ff ff6f 	bl	27bba <_double_byte>
   27cdc:	78a2      	ldrb	r2, [r4, #2]
   27cde:	7863      	ldrb	r3, [r4, #1]
   27ce0:	4053      	eors	r3, r2
   27ce2:	78e2      	ldrb	r2, [r4, #3]
   27ce4:	4053      	eors	r3, r2
   27ce6:	405d      	eors	r5, r3
   27ce8:	4045      	eors	r5, r0
   27cea:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   27cec:	7860      	ldrb	r0, [r4, #1]
   27cee:	7827      	ldrb	r7, [r4, #0]
   27cf0:	f7ff ff63 	bl	27bba <_double_byte>
   27cf4:	4605      	mov	r5, r0
   27cf6:	78a0      	ldrb	r0, [r4, #2]
   27cf8:	f7ff ff5f 	bl	27bba <_double_byte>
   27cfc:	78a3      	ldrb	r3, [r4, #2]
   27cfe:	405f      	eors	r7, r3
   27d00:	78e3      	ldrb	r3, [r4, #3]
   27d02:	405f      	eors	r7, r3
   27d04:	407d      	eors	r5, r7
   27d06:	4045      	eors	r5, r0
   27d08:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   27d0a:	78a0      	ldrb	r0, [r4, #2]
   27d0c:	7865      	ldrb	r5, [r4, #1]
   27d0e:	7827      	ldrb	r7, [r4, #0]
   27d10:	f7ff ff53 	bl	27bba <_double_byte>
   27d14:	406f      	eors	r7, r5
   27d16:	4605      	mov	r5, r0
   27d18:	78e0      	ldrb	r0, [r4, #3]
   27d1a:	f7ff ff4e 	bl	27bba <_double_byte>
   27d1e:	78e3      	ldrb	r3, [r4, #3]
   27d20:	405f      	eors	r7, r3
   27d22:	407d      	eors	r5, r7
   27d24:	4045      	eors	r5, r0
   27d26:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   27d28:	7820      	ldrb	r0, [r4, #0]
   27d2a:	f7ff ff46 	bl	27bba <_double_byte>
   27d2e:	7863      	ldrb	r3, [r4, #1]
   27d30:	7825      	ldrb	r5, [r4, #0]
   27d32:	405d      	eors	r5, r3
   27d34:	78a3      	ldrb	r3, [r4, #2]
   27d36:	405d      	eors	r5, r3
   27d38:	4045      	eors	r5, r0
   27d3a:	78e0      	ldrb	r0, [r4, #3]
   27d3c:	f7ff ff3d 	bl	27bba <_double_byte>
   27d40:	b2ed      	uxtb	r5, r5
   27d42:	4045      	eors	r5, r0
   27d44:	70f5      	strb	r5, [r6, #3]
}
   27d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027d48 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   27d48:	460a      	mov	r2, r1
{
   27d4a:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   27d4c:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   27d50:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   27d52:	2b00      	cmp	r3, #0
   27d54:	bfb4      	ite	lt
   27d56:	2387      	movlt	r3, #135	; 0x87
   27d58:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   27d5a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   27d5e:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   27d62:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   27d64:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   27d68:	d002      	beq.n	27d70 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   27d6a:	7813      	ldrb	r3, [r2, #0]
   27d6c:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   27d6e:	e7f4      	b.n	27d5a <gf_double+0x12>
	}
}
   27d70:	bd10      	pop	{r4, pc}

00027d72 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   27d72:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   27d74:	b120      	cbz	r0, 27d80 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   27d76:	2258      	movs	r2, #88	; 0x58
   27d78:	2100      	movs	r1, #0
   27d7a:	f7ff ff1c 	bl	27bb6 <_set>
   27d7e:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   27d80:	bd08      	pop	{r3, pc}

00027d82 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   27d82:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   27d84:	4604      	mov	r4, r0
   27d86:	b188      	cbz	r0, 27dac <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   27d88:	2210      	movs	r2, #16
   27d8a:	2100      	movs	r1, #0
   27d8c:	f7ff ff13 	bl	27bb6 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   27d90:	2210      	movs	r2, #16
   27d92:	f104 0030 	add.w	r0, r4, #48	; 0x30
   27d96:	2100      	movs	r1, #0
   27d98:	f7ff ff0d 	bl	27bb6 <_set>
	s->leftover_offset = 0;
   27d9c:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   27d9e:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   27da0:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   27da2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   27da6:	2001      	movs	r0, #1
   27da8:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   27dac:	bd10      	pop	{r4, pc}

00027dae <tc_cmac_setup>:
{
   27dae:	b570      	push	{r4, r5, r6, lr}
   27db0:	460d      	mov	r5, r1
   27db2:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   27db4:	4604      	mov	r4, r0
   27db6:	b310      	cbz	r0, 27dfe <tc_cmac_setup+0x50>
   27db8:	b311      	cbz	r1, 27e00 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   27dba:	2258      	movs	r2, #88	; 0x58
   27dbc:	2100      	movs	r1, #0
   27dbe:	f7ff fefa 	bl	27bb6 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   27dc2:	4629      	mov	r1, r5
   27dc4:	4630      	mov	r0, r6
	s->sched = sched;
   27dc6:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   27dc8:	f7ed ffac 	bl	15d24 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   27dcc:	2210      	movs	r2, #16
   27dce:	2100      	movs	r1, #0
   27dd0:	4620      	mov	r0, r4
   27dd2:	f7ff fef0 	bl	27bb6 <_set>
	gf_double (s->K1, s->iv);
   27dd6:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   27dda:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27ddc:	4621      	mov	r1, r4
   27dde:	4620      	mov	r0, r4
   27de0:	f7ed fff4 	bl	15dcc <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   27de4:	4621      	mov	r1, r4
   27de6:	4628      	mov	r0, r5
   27de8:	f7ff ffae 	bl	27d48 <gf_double>
	gf_double (s->K2, s->K1);
   27dec:	4629      	mov	r1, r5
   27dee:	f104 0020 	add.w	r0, r4, #32
   27df2:	f7ff ffa9 	bl	27d48 <gf_double>
	tc_cmac_init(s);
   27df6:	4620      	mov	r0, r4
   27df8:	f7ff ffc3 	bl	27d82 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   27dfc:	2001      	movs	r0, #1
}
   27dfe:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   27e00:	4608      	mov	r0, r1
   27e02:	e7fc      	b.n	27dfe <tc_cmac_setup+0x50>

00027e04 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   27e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27e08:	460d      	mov	r5, r1
   27e0a:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   27e0c:	4604      	mov	r4, r0
   27e0e:	2800      	cmp	r0, #0
   27e10:	d062      	beq.n	27ed8 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   27e12:	b912      	cbnz	r2, 27e1a <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   27e14:	2001      	movs	r0, #1
}
   27e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   27e1a:	2900      	cmp	r1, #0
   27e1c:	d05c      	beq.n	27ed8 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   27e1e:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   27e22:	ea50 0301 	orrs.w	r3, r0, r1
   27e26:	d057      	beq.n	27ed8 <tc_cmac_update+0xd4>
	s->countdown--;
   27e28:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   27e2c:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   27e30:	f141 33ff 	adc.w	r3, r1, #4294967295
   27e34:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   27e38:	f1b8 0f00 	cmp.w	r8, #0
   27e3c:	d02a      	beq.n	27e94 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   27e3e:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   27e42:	f108 0030 	add.w	r0, r8, #48	; 0x30
   27e46:	42be      	cmp	r6, r7
   27e48:	4420      	add	r0, r4
   27e4a:	d208      	bcs.n	27e5e <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   27e4c:	462a      	mov	r2, r5
   27e4e:	4633      	mov	r3, r6
   27e50:	4631      	mov	r1, r6
   27e52:	f7ff fea3 	bl	27b9c <_copy>
			s->leftover_offset += data_length;
   27e56:	6c62      	ldr	r2, [r4, #68]	; 0x44
   27e58:	4432      	add	r2, r6
   27e5a:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   27e5c:	e7da      	b.n	27e14 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   27e5e:	463b      	mov	r3, r7
   27e60:	462a      	mov	r2, r5
   27e62:	4639      	mov	r1, r7
   27e64:	f7ff fe9a 	bl	27b9c <_copy>
		s->leftover_offset = 0;
   27e68:	2300      	movs	r3, #0
   27e6a:	3e10      	subs	r6, #16
   27e6c:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   27e6e:	4446      	add	r6, r8
		data += remaining_space;
   27e70:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27e72:	1e63      	subs	r3, r4, #1
   27e74:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   27e78:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   27e7c:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27e80:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   27e82:	ea82 0200 	eor.w	r2, r2, r0
   27e86:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27e88:	d1f6      	bne.n	27e78 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   27e8a:	4621      	mov	r1, r4
   27e8c:	4620      	mov	r0, r4
   27e8e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27e90:	f7ed ff9c 	bl	15dcc <tc_aes_encrypt>
   27e94:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   27e98:	2e10      	cmp	r6, #16
   27e9a:	d80a      	bhi.n	27eb2 <tc_cmac_update+0xae>
	if (data_length > 0) {
   27e9c:	2e00      	cmp	r6, #0
   27e9e:	d0b9      	beq.n	27e14 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   27ea0:	4633      	mov	r3, r6
   27ea2:	462a      	mov	r2, r5
   27ea4:	4631      	mov	r1, r6
   27ea6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   27eaa:	f7ff fe77 	bl	27b9c <_copy>
		s->leftover_offset = data_length;
   27eae:	6466      	str	r6, [r4, #68]	; 0x44
   27eb0:	e7b0      	b.n	27e14 <tc_cmac_update+0x10>
   27eb2:	1e63      	subs	r3, r4, #1
   27eb4:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   27eb6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   27eba:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27ebe:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   27ec0:	ea82 0200 	eor.w	r2, r2, r0
   27ec4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27ec6:	d1f6      	bne.n	27eb6 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   27ec8:	4621      	mov	r1, r4
   27eca:	4620      	mov	r0, r4
   27ecc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27ece:	f7ed ff7d 	bl	15dcc <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   27ed2:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   27ed4:	3e10      	subs	r6, #16
   27ed6:	e7df      	b.n	27e98 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   27ed8:	2000      	movs	r0, #0
   27eda:	e79c      	b.n	27e16 <tc_cmac_update+0x12>

00027edc <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   27edc:	b570      	push	{r4, r5, r6, lr}
   27ede:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   27ee0:	4605      	mov	r5, r0
   27ee2:	b1f0      	cbz	r0, 27f22 <tc_cmac_final+0x46>
   27ee4:	b371      	cbz	r1, 27f44 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   27ee6:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   27ee8:	2a10      	cmp	r2, #16
   27eea:	d11b      	bne.n	27f24 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   27eec:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27eee:	1e63      	subs	r3, r4, #1
   27ef0:	3901      	subs	r1, #1
   27ef2:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   27ef6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   27efa:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27efe:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   27f00:	ea82 0206 	eor.w	r2, r2, r6
   27f04:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   27f08:	ea82 0206 	eor.w	r2, r2, r6
   27f0c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27f0e:	d1f2      	bne.n	27ef6 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   27f10:	4621      	mov	r1, r4
   27f12:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27f14:	4628      	mov	r0, r5
   27f16:	f7ed ff59 	bl	15dcc <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   27f1a:	4620      	mov	r0, r4
   27f1c:	f7ff ff29 	bl	27d72 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   27f20:	2001      	movs	r0, #1
}
   27f22:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   27f24:	f102 0030 	add.w	r0, r2, #48	; 0x30
   27f28:	2100      	movs	r1, #0
   27f2a:	f1c2 0210 	rsb	r2, r2, #16
   27f2e:	4420      	add	r0, r4
   27f30:	f7ff fe41 	bl	27bb6 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   27f34:	2280      	movs	r2, #128	; 0x80
   27f36:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   27f38:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   27f3c:	4423      	add	r3, r4
   27f3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   27f42:	e7d4      	b.n	27eee <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   27f44:	4608      	mov	r0, r1
   27f46:	e7ec      	b.n	27f22 <tc_cmac_final+0x46>

00027f48 <tc_sha256_update>:
{
   27f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27f4a:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   27f4c:	b110      	cbz	r0, 27f54 <tc_sha256_update+0xc>
   27f4e:	b1f9      	cbz	r1, 27f90 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   27f50:	b90a      	cbnz	r2, 27f56 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   27f52:	2001      	movs	r0, #1
}
   27f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   27f56:	2600      	movs	r6, #0
   27f58:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   27f5a:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   27f5e:	42a5      	cmp	r5, r4
   27f60:	d0f7      	beq.n	27f52 <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
   27f62:	6e83      	ldr	r3, [r0, #104]	; 0x68
   27f64:	1c5a      	adds	r2, r3, #1
   27f66:	6682      	str	r2, [r0, #104]	; 0x68
   27f68:	f814 1b01 	ldrb.w	r1, [r4], #1
   27f6c:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   27f6e:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   27f70:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   27f74:	d9f3      	bls.n	27f5e <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
   27f76:	4639      	mov	r1, r7
   27f78:	f7ed ff92 	bl	15ea0 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   27f7c:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   27f80:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   27f84:	f142 0200 	adc.w	r2, r2, #0
   27f88:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   27f8c:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   27f8e:	e7e6      	b.n	27f5e <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
   27f90:	4608      	mov	r0, r1
   27f92:	e7df      	b.n	27f54 <tc_sha256_update+0xc>

00027f94 <tc_sha256_final>:
{
   27f94:	b570      	push	{r4, r5, r6, lr}
   27f96:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   27f98:	4605      	mov	r5, r0
   27f9a:	2800      	cmp	r0, #0
   27f9c:	d054      	beq.n	28048 <tc_sha256_final+0xb4>
   27f9e:	2900      	cmp	r1, #0
   27fa0:	d053      	beq.n	2804a <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   27fa2:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   27fa6:	6e89      	ldr	r1, [r1, #104]	; 0x68
   27fa8:	f104 0628 	add.w	r6, r4, #40	; 0x28
   27fac:	00c8      	lsls	r0, r1, #3
   27fae:	1812      	adds	r2, r2, r0
   27fb0:	f143 0300 	adc.w	r3, r3, #0
   27fb4:	e9c4 2308 	strd	r2, r3, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   27fb8:	2380      	movs	r3, #128	; 0x80
   27fba:	1c48      	adds	r0, r1, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   27fbc:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   27fbe:	4421      	add	r1, r4
   27fc0:	66a0      	str	r0, [r4, #104]	; 0x68
   27fc2:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   27fc6:	d90b      	bls.n	27fe0 <tc_sha256_final+0x4c>
		_set(s->leftover + s->leftover_offset, 0x00,
   27fc8:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   27fcc:	2100      	movs	r1, #0
   27fce:	4430      	add	r0, r6
   27fd0:	f7ff fdf1 	bl	27bb6 <_set>
		compress(s->iv, s->leftover);
   27fd4:	4631      	mov	r1, r6
   27fd6:	4620      	mov	r0, r4
   27fd8:	f7ed ff62 	bl	15ea0 <compress>
		s->leftover_offset = 0;
   27fdc:	2300      	movs	r3, #0
   27fde:	66a3      	str	r3, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   27fe0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   27fe2:	2100      	movs	r1, #0
   27fe4:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   27fe8:	4430      	add	r0, r6
   27fea:	f7ff fde4 	bl	27bb6 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   27fee:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   27ff0:	4631      	mov	r1, r6
   27ff2:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   27ff4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   27ff6:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   27ff8:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   27ffa:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   27ffe:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   28002:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   28004:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
   28006:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   28008:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2800c:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   28010:	f7ed ff46 	bl	15ea0 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   28014:	1f26      	subs	r6, r4, #4
   28016:	1d2b      	adds	r3, r5, #4
   28018:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   2801c:	f856 2f04 	ldr.w	r2, [r6, #4]!
		*digest++ = (uint8_t)(t >> 24);
   28020:	3304      	adds	r3, #4
   28022:	0e11      	lsrs	r1, r2, #24
   28024:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   28028:	0c11      	lsrs	r1, r2, #16
   2802a:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   2802e:	0a11      	lsrs	r1, r2, #8
   28030:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
   28034:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   28038:	4283      	cmp	r3, r0
   2803a:	d1ef      	bne.n	2801c <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   2803c:	4620      	mov	r0, r4
   2803e:	2270      	movs	r2, #112	; 0x70
   28040:	2100      	movs	r1, #0
   28042:	f7ff fdb8 	bl	27bb6 <_set>
	return TC_CRYPTO_SUCCESS;
   28046:	2001      	movs	r0, #1
}
   28048:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2804a:	4608      	mov	r0, r1
   2804c:	e7fc      	b.n	28048 <tc_sha256_final+0xb4>

0002804e <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   2804e:	b530      	push	{r4, r5, lr}
   28050:	1e43      	subs	r3, r0, #1
   28052:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   28054:	42a9      	cmp	r1, r5
   28056:	d106      	bne.n	28066 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   28058:	2136      	movs	r1, #54	; 0x36
   2805a:	245c      	movs	r4, #92	; 0x5c
   2805c:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   2805e:	1a13      	subs	r3, r2, r0
   28060:	2b3f      	cmp	r3, #63	; 0x3f
   28062:	d90c      	bls.n	2807e <rekey+0x30>
	}
}
   28064:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   28066:	780c      	ldrb	r4, [r1, #0]
   28068:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   2806c:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   28070:	f811 4b01 	ldrb.w	r4, [r1], #1
   28074:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   28078:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   2807c:	e7ea      	b.n	28054 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   2807e:	f802 1b01 	strb.w	r1, [r2], #1
   28082:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   28086:	e7ea      	b.n	2805e <rekey+0x10>

00028088 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   28088:	b5f0      	push	{r4, r5, r6, r7, lr}
   2808a:	460e      	mov	r6, r1
   2808c:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   2808e:	4605      	mov	r5, r0
{
   28090:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   28092:	b1b8      	cbz	r0, 280c4 <tc_hmac_set_key+0x3c>
   28094:	b341      	cbz	r1, 280e8 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   28096:	b34a      	cbz	r2, 280ec <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   28098:	2a40      	cmp	r2, #64	; 0x40
   2809a:	f100 0770 	add.w	r7, r0, #112	; 0x70
   2809e:	d813      	bhi.n	280c8 <tc_hmac_set_key+0x40>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
   280a0:	a810      	add	r0, sp, #64	; 0x40
   280a2:	f7ed ffe3 	bl	1606c <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   280a6:	4622      	mov	r2, r4
   280a8:	4669      	mov	r1, sp
   280aa:	a810      	add	r0, sp, #64	; 0x40
   280ac:	f7ff ff4c 	bl	27f48 <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   280b0:	a910      	add	r1, sp, #64	; 0x40
   280b2:	a834      	add	r0, sp, #208	; 0xd0
   280b4:	f7ff ff6e 	bl	27f94 <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   280b8:	4622      	mov	r2, r4
   280ba:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   280bc:	4638      	mov	r0, r7
   280be:	f7ff ffc6 	bl	2804e <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   280c2:	2001      	movs	r0, #1
}
   280c4:	b04d      	add	sp, #308	; 0x134
   280c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   280c8:	f7ed ffd0 	bl	1606c <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   280cc:	4622      	mov	r2, r4
   280ce:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   280d0:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   280d4:	4628      	mov	r0, r5
   280d6:	f7ff ff37 	bl	27f48 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   280da:	4629      	mov	r1, r5
   280dc:	4620      	mov	r0, r4
   280de:	f7ff ff59 	bl	27f94 <tc_sha256_final>
		rekey(ctx->key,
   280e2:	2220      	movs	r2, #32
   280e4:	4621      	mov	r1, r4
   280e6:	e7e9      	b.n	280bc <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   280e8:	4608      	mov	r0, r1
   280ea:	e7eb      	b.n	280c4 <tc_hmac_set_key+0x3c>
   280ec:	4610      	mov	r0, r2
   280ee:	e7e9      	b.n	280c4 <tc_hmac_set_key+0x3c>

000280f0 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   280f0:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   280f2:	4604      	mov	r4, r0
   280f4:	b140      	cbz	r0, 28108 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   280f6:	f7ed ffb9 	bl	1606c <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   280fa:	2240      	movs	r2, #64	; 0x40
   280fc:	4620      	mov	r0, r4
   280fe:	f104 0170 	add.w	r1, r4, #112	; 0x70
   28102:	f7ff ff21 	bl	27f48 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   28106:	2001      	movs	r0, #1
}
   28108:	bd10      	pop	{r4, pc}

0002810a <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   2810a:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2810c:	b110      	cbz	r0, 28114 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   2810e:	f7ff ff1b 	bl	27f48 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   28112:	2001      	movs	r0, #1
}
   28114:	bd08      	pop	{r3, pc}

00028116 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   28116:	b570      	push	{r4, r5, r6, lr}
   28118:	460e      	mov	r6, r1
   2811a:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2811c:	4605      	mov	r5, r0
   2811e:	b1f0      	cbz	r0, 2815e <tc_hmac_final+0x48>
   28120:	2920      	cmp	r1, #32
   28122:	d11c      	bne.n	2815e <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   28124:	b1ea      	cbz	r2, 28162 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   28126:	4611      	mov	r1, r2
   28128:	f7ff ff34 	bl	27f94 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   2812c:	4620      	mov	r0, r4
   2812e:	f7ed ff9d 	bl	1606c <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   28132:	2240      	movs	r2, #64	; 0x40
   28134:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   28138:	4620      	mov	r0, r4
   2813a:	f7ff ff05 	bl	27f48 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   2813e:	4632      	mov	r2, r6
   28140:	4629      	mov	r1, r5
   28142:	4620      	mov	r0, r4
   28144:	f7ff ff00 	bl	27f48 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   28148:	4621      	mov	r1, r4
   2814a:	4628      	mov	r0, r5
   2814c:	f7ff ff22 	bl	27f94 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   28150:	4620      	mov	r0, r4
   28152:	22f0      	movs	r2, #240	; 0xf0
   28154:	2100      	movs	r1, #0
   28156:	f7ff fd2e 	bl	27bb6 <_set>

	return TC_CRYPTO_SUCCESS;
   2815a:	2001      	movs	r0, #1
}
   2815c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2815e:	2000      	movs	r0, #0
   28160:	e7fc      	b.n	2815c <tc_hmac_final+0x46>
   28162:	4610      	mov	r0, r2
   28164:	e7fa      	b.n	2815c <tc_hmac_final+0x46>

00028166 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   28166:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2816a:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   2816c:	f04f 0b01 	mov.w	fp, #1
{
   28170:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   28172:	2300      	movs	r3, #0
{
   28174:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   28176:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   2817a:	4631      	mov	r1, r6
{
   2817c:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2817e:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   28180:	f88d 3006 	strb.w	r3, [sp, #6]
{
   28184:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   28188:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2818c:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   28190:	f7ff ff7a 	bl	28088 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   28194:	4620      	mov	r0, r4
   28196:	f7ff ffab 	bl	280f0 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2819a:	2220      	movs	r2, #32
   2819c:	4629      	mov	r1, r5
   2819e:	4620      	mov	r0, r4
   281a0:	f7ff ffb3 	bl	2810a <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   281a4:	465a      	mov	r2, fp
   281a6:	4620      	mov	r0, r4
   281a8:	f10d 0106 	add.w	r1, sp, #6
   281ac:	f7ff ffad 	bl	2810a <tc_hmac_update>

	if (data && datalen)
   281b0:	f1b8 0f00 	cmp.w	r8, #0
   281b4:	d007      	beq.n	281c6 <update+0x60>
   281b6:	f1b9 0f00 	cmp.w	r9, #0
   281ba:	d004      	beq.n	281c6 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   281bc:	464a      	mov	r2, r9
   281be:	4641      	mov	r1, r8
   281c0:	4620      	mov	r0, r4
   281c2:	f7ff ffa2 	bl	2810a <tc_hmac_update>
	if (additional_data && additional_datalen)
   281c6:	b13f      	cbz	r7, 281d8 <update+0x72>
   281c8:	f1ba 0f00 	cmp.w	sl, #0
   281cc:	d004      	beq.n	281d8 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   281ce:	4652      	mov	r2, sl
   281d0:	4639      	mov	r1, r7
   281d2:	4620      	mov	r0, r4
   281d4:	f7ff ff99 	bl	2810a <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   281d8:	4622      	mov	r2, r4
   281da:	2120      	movs	r1, #32
   281dc:	4630      	mov	r0, r6
   281de:	f7ff ff9a 	bl	28116 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   281e2:	2220      	movs	r2, #32
   281e4:	4631      	mov	r1, r6
   281e6:	4620      	mov	r0, r4
   281e8:	f7ff ff4e 	bl	28088 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   281ec:	4620      	mov	r0, r4
   281ee:	f7ff ff7f 	bl	280f0 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   281f2:	2220      	movs	r2, #32
   281f4:	4629      	mov	r1, r5
   281f6:	4620      	mov	r0, r4
   281f8:	f7ff ff87 	bl	2810a <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   281fc:	4622      	mov	r2, r4
   281fe:	2120      	movs	r1, #32
   28200:	4628      	mov	r0, r5
   28202:	f7ff ff88 	bl	28116 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   28206:	f1b8 0f00 	cmp.w	r8, #0
   2820a:	d03a      	beq.n	28282 <update+0x11c>
   2820c:	f1b9 0f00 	cmp.w	r9, #0
   28210:	d037      	beq.n	28282 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   28212:	2220      	movs	r2, #32
   28214:	4631      	mov	r1, r6
   28216:	4620      	mov	r0, r4
   28218:	f7ff ff36 	bl	28088 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   2821c:	4620      	mov	r0, r4
   2821e:	f7ff ff67 	bl	280f0 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   28222:	2220      	movs	r2, #32
   28224:	4629      	mov	r1, r5
   28226:	4620      	mov	r0, r4
   28228:	f7ff ff6f 	bl	2810a <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   2822c:	2201      	movs	r2, #1
   2822e:	f10d 0107 	add.w	r1, sp, #7
   28232:	4620      	mov	r0, r4
   28234:	f7ff ff69 	bl	2810a <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   28238:	464a      	mov	r2, r9
   2823a:	4641      	mov	r1, r8
   2823c:	4620      	mov	r0, r4
   2823e:	f7ff ff64 	bl	2810a <tc_hmac_update>
	if (additional_data && additional_datalen)
   28242:	b13f      	cbz	r7, 28254 <update+0xee>
   28244:	f1ba 0f00 	cmp.w	sl, #0
   28248:	d004      	beq.n	28254 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2824a:	4652      	mov	r2, sl
   2824c:	4639      	mov	r1, r7
   2824e:	4620      	mov	r0, r4
   28250:	f7ff ff5b 	bl	2810a <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   28254:	4622      	mov	r2, r4
   28256:	2120      	movs	r1, #32
   28258:	4630      	mov	r0, r6
   2825a:	f7ff ff5c 	bl	28116 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2825e:	2220      	movs	r2, #32
   28260:	4631      	mov	r1, r6
   28262:	4620      	mov	r0, r4
   28264:	f7ff ff10 	bl	28088 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   28268:	4620      	mov	r0, r4
   2826a:	f7ff ff41 	bl	280f0 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2826e:	2220      	movs	r2, #32
   28270:	4629      	mov	r1, r5
   28272:	4620      	mov	r0, r4
   28274:	f7ff ff49 	bl	2810a <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   28278:	4622      	mov	r2, r4
   2827a:	2120      	movs	r1, #32
   2827c:	4628      	mov	r0, r5
   2827e:	f7ff ff4a 	bl	28116 <tc_hmac_final>
}
   28282:	b003      	add	sp, #12
   28284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00028288 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   28288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2828a:	460c      	mov	r4, r1
   2828c:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2828e:	4605      	mov	r5, r0
   28290:	b1b0      	cbz	r0, 282c0 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   28292:	b1b9      	cbz	r1, 282c4 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   28294:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   28296:	2220      	movs	r2, #32
   28298:	2100      	movs	r1, #0
   2829a:	30f0      	adds	r0, #240	; 0xf0
   2829c:	f7ff fc8b 	bl	27bb6 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   282a0:	2220      	movs	r2, #32
   282a2:	2101      	movs	r1, #1
   282a4:	f505 7088 	add.w	r0, r5, #272	; 0x110
   282a8:	f7ff fc85 	bl	27bb6 <_set>
	update(prng, personalization, plen, 0, 0);
   282ac:	4628      	mov	r0, r5
   282ae:	4633      	mov	r3, r6
   282b0:	463a      	mov	r2, r7
   282b2:	4621      	mov	r1, r4
   282b4:	9600      	str	r6, [sp, #0]
   282b6:	f7ff ff56 	bl	28166 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   282ba:	2001      	movs	r0, #1
	prng->countdown = 0;
   282bc:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   282c0:	b003      	add	sp, #12
   282c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   282c4:	4608      	mov	r0, r1
   282c6:	e7fb      	b.n	282c0 <tc_hmac_prng_init+0x38>

000282c8 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   282c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   282ca:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   282cc:	4605      	mov	r5, r0
   282ce:	b180      	cbz	r0, 282f2 <tc_hmac_prng_reseed+0x2a>
   282d0:	b179      	cbz	r1, 282f2 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   282d2:	2a1f      	cmp	r2, #31
   282d4:	d90d      	bls.n	282f2 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   282d6:	b153      	cbz	r3, 282ee <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   282d8:	b16c      	cbz	r4, 282f6 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   282da:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   282dc:	f7ff ff43 	bl	28166 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   282e0:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   282e4:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   282e6:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   282ea:	b003      	add	sp, #12
   282ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   282ee:	9300      	str	r3, [sp, #0]
   282f0:	e7f4      	b.n	282dc <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   282f2:	2000      	movs	r0, #0
   282f4:	e7f9      	b.n	282ea <tc_hmac_prng_reseed+0x22>
   282f6:	4620      	mov	r0, r4
   282f8:	e7f7      	b.n	282ea <tc_hmac_prng_reseed+0x22>

000282fa <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   282fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   282fe:	460d      	mov	r5, r1
   28300:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   28302:	4680      	mov	r8, r0
   28304:	b3d8      	cbz	r0, 2837e <tc_hmac_prng_generate+0x84>
   28306:	b3d2      	cbz	r2, 2837e <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   28308:	1e4b      	subs	r3, r1, #1
   2830a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   2830e:	d236      	bcs.n	2837e <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   28310:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   28314:	b3ab      	cbz	r3, 28382 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   28316:	3b01      	subs	r3, #1
   28318:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2831c:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   28320:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   28324:	2220      	movs	r2, #32
   28326:	4649      	mov	r1, r9
   28328:	4620      	mov	r0, r4
   2832a:	f7ff fead 	bl	28088 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   2832e:	4620      	mov	r0, r4
   28330:	f7ff fede 	bl	280f0 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   28334:	2220      	movs	r2, #32
   28336:	4639      	mov	r1, r7
   28338:	4620      	mov	r0, r4
   2833a:	f7ff fee6 	bl	2810a <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2833e:	4622      	mov	r2, r4
   28340:	2120      	movs	r1, #32
   28342:	4638      	mov	r0, r7
   28344:	f7ff fee7 	bl	28116 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   28348:	2d20      	cmp	r5, #32
   2834a:	462e      	mov	r6, r5
   2834c:	bf28      	it	cs
   2834e:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   28350:	4640      	mov	r0, r8
   28352:	4633      	mov	r3, r6
   28354:	463a      	mov	r2, r7
   28356:	4631      	mov	r1, r6
   28358:	f7ff fc20 	bl	27b9c <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   2835c:	2d20      	cmp	r5, #32
   2835e:	bf38      	it	cc
   28360:	2520      	movcc	r5, #32
	while (outlen != 0) {
   28362:	3d20      	subs	r5, #32
		out += bufferlen;
   28364:	44b0      	add	r8, r6
	while (outlen != 0) {
   28366:	d1dd      	bne.n	28324 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   28368:	4620      	mov	r0, r4
   2836a:	462b      	mov	r3, r5
   2836c:	462a      	mov	r2, r5
   2836e:	4629      	mov	r1, r5
   28370:	9500      	str	r5, [sp, #0]
   28372:	f7ff fef8 	bl	28166 <update>

	return TC_CRYPTO_SUCCESS;
   28376:	2001      	movs	r0, #1
}
   28378:	b003      	add	sp, #12
   2837a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   2837e:	2000      	movs	r0, #0
   28380:	e7fa      	b.n	28378 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   28382:	f04f 30ff 	mov.w	r0, #4294967295
   28386:	e7f7      	b.n	28378 <tc_hmac_prng_generate+0x7e>

00028388 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   28388:	2100      	movs	r1, #0
   2838a:	2001      	movs	r0, #1
   2838c:	f7ed bf8e 	b.w	162ac <z_arm_fatal_error>

00028390 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   28390:	6e83      	ldr	r3, [r0, #104]	; 0x68
   28392:	f383 880b 	msr	PSPLIM, r3
}
   28396:	4770      	bx	lr

00028398 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   28398:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2839a:	6800      	ldr	r0, [r0, #0]
   2839c:	f7ed bf86 	b.w	162ac <z_arm_fatal_error>

000283a0 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   283a0:	b508      	push	{r3, lr}
	handler();
   283a2:	f7ed ffbb 	bl	1631c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   283a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   283aa:	f7ee ba73 	b.w	16894 <z_arm_exc_exit>

000283ae <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   283ae:	4770      	bx	lr

000283b0 <z_arm_restore_fp_context>:
   283b0:	4770      	bx	lr

000283b2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   283b2:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   283b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   283ba:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   283bc:	bf08      	it	eq
   283be:	f06f 0015 	mvneq.w	r0, #21
   283c2:	4770      	bx	lr

000283c4 <mpu_configure_region>:
{
   283c4:	b530      	push	{r4, r5, lr}
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   283c6:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   283c8:	680c      	ldr	r4, [r1, #0]
{
   283ca:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   283cc:	890a      	ldrh	r2, [r1, #8]
   283ce:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   283d0:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   283d2:	3b01      	subs	r3, #1
   283d4:	f024 041f 	bic.w	r4, r4, #31
   283d8:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   283da:	f002 021f 	and.w	r2, r2, #31
   283de:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   283e2:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   283e6:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   283e8:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   283ec:	9303      	str	r3, [sp, #12]
   283ee:	f7ee fac3 	bl	16978 <region_allocate_and_init>
}
   283f2:	b005      	add	sp, #20
   283f4:	bd30      	pop	{r4, r5, pc}

000283f6 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   283f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   283fa:	4684      	mov	ip, r0
   283fc:	4688      	mov	r8, r1
	register const char *s = nptr;
   283fe:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   28400:	460c      	mov	r4, r1
   28402:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   28406:	2b20      	cmp	r3, #32
   28408:	d033      	beq.n	28472 <strtol+0x7c>
   2840a:	f1a3 0009 	sub.w	r0, r3, #9
   2840e:	2804      	cmp	r0, #4
   28410:	d92f      	bls.n	28472 <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   28412:	2b2d      	cmp	r3, #45	; 0x2d
   28414:	d12f      	bne.n	28476 <strtol+0x80>
		neg = 1;
		c = *s++;
   28416:	784b      	ldrb	r3, [r1, #1]
   28418:	1c8c      	adds	r4, r1, #2
		neg = 1;
   2841a:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   2841c:	2a00      	cmp	r2, #0
   2841e:	d05c      	beq.n	284da <strtol+0xe4>
   28420:	2a10      	cmp	r2, #16
   28422:	d109      	bne.n	28438 <strtol+0x42>
   28424:	2b30      	cmp	r3, #48	; 0x30
   28426:	d107      	bne.n	28438 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   28428:	7823      	ldrb	r3, [r4, #0]
   2842a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2842e:	2b58      	cmp	r3, #88	; 0x58
   28430:	d14e      	bne.n	284d0 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   28432:	2210      	movs	r2, #16
		c = s[1];
   28434:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   28436:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   28438:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   2843a:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   2843e:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   28440:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   28444:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   28446:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2844a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   2844e:	2d09      	cmp	r5, #9
   28450:	d817      	bhi.n	28482 <strtol+0x8c>
			c -= '0';
   28452:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   28454:	429a      	cmp	r2, r3
   28456:	dd24      	ble.n	284a2 <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   28458:	1c75      	adds	r5, r6, #1
   2845a:	d007      	beq.n	2846c <strtol+0x76>
   2845c:	4570      	cmp	r0, lr
   2845e:	d81d      	bhi.n	2849c <strtol+0xa6>
   28460:	d101      	bne.n	28466 <strtol+0x70>
   28462:	454b      	cmp	r3, r9
   28464:	dc1a      	bgt.n	2849c <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
   28466:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   28468:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   2846c:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   28470:	e7eb      	b.n	2844a <strtol+0x54>
{
   28472:	4621      	mov	r1, r4
   28474:	e7c4      	b.n	28400 <strtol+0xa>
	} else if (c == '+') {
   28476:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   28478:	bf04      	itt	eq
   2847a:	784b      	ldrbeq	r3, [r1, #1]
   2847c:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   2847e:	2100      	movs	r1, #0
   28480:	e7cc      	b.n	2841c <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   28482:	f043 0520 	orr.w	r5, r3, #32
   28486:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   28488:	2d19      	cmp	r5, #25
   2848a:	d80a      	bhi.n	284a2 <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2848c:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   28490:	2d1a      	cmp	r5, #26
   28492:	bf34      	ite	cc
   28494:	2537      	movcc	r5, #55	; 0x37
   28496:	2557      	movcs	r5, #87	; 0x57
   28498:	1b5b      	subs	r3, r3, r5
   2849a:	e7db      	b.n	28454 <strtol+0x5e>
			any = -1;
   2849c:	f04f 36ff 	mov.w	r6, #4294967295
   284a0:	e7e4      	b.n	2846c <strtol+0x76>
		}
	}

	if (any < 0) {
   284a2:	1c73      	adds	r3, r6, #1
   284a4:	d109      	bne.n	284ba <strtol+0xc4>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   284a6:	f7f9 fff5 	bl	22494 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   284aa:	2322      	movs	r3, #34	; 0x22
   284ac:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   284ae:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   284b0:	f1b8 0f00 	cmp.w	r8, #0
   284b4:	d107      	bne.n	284c6 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   284b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   284ba:	b101      	cbz	r1, 284be <strtol+0xc8>
		acc = -acc;
   284bc:	4240      	negs	r0, r0
	if (endptr != NULL) {
   284be:	f1b8 0f00 	cmp.w	r8, #0
   284c2:	d0f8      	beq.n	284b6 <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   284c4:	b10e      	cbz	r6, 284ca <strtol+0xd4>
   284c6:	f104 3cff 	add.w	ip, r4, #4294967295
   284ca:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   284ce:	e7f2      	b.n	284b6 <strtol+0xc0>
	if (base == 0) {
   284d0:	2330      	movs	r3, #48	; 0x30
   284d2:	2a00      	cmp	r2, #0
   284d4:	d1b0      	bne.n	28438 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   284d6:	2208      	movs	r2, #8
   284d8:	e7ae      	b.n	28438 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   284da:	2b30      	cmp	r3, #48	; 0x30
   284dc:	d0a4      	beq.n	28428 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   284de:	220a      	movs	r2, #10
   284e0:	e7aa      	b.n	28438 <strtol+0x42>

000284e2 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   284e2:	4603      	mov	r3, r0
   284e4:	3901      	subs	r1, #1
   284e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   284ea:	b90a      	cbnz	r2, 284f0 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   284ec:	701a      	strb	r2, [r3, #0]

	return dest;
}
   284ee:	4770      	bx	lr
		*d = *s;
   284f0:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   284f4:	e7f7      	b.n	284e6 <strcpy+0x4>

000284f6 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   284f6:	b570      	push	{r4, r5, r6, lr}
   284f8:	4605      	mov	r5, r0
   284fa:	3901      	subs	r1, #1
   284fc:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   284fe:	b142      	cbz	r2, 28512 <strncpy+0x1c>
   28500:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   28504:	1e56      	subs	r6, r2, #1
   28506:	b92b      	cbnz	r3, 28514 <strncpy+0x1e>
   28508:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   2850a:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   2850e:	42a2      	cmp	r2, r4
   28510:	d1fb      	bne.n	2850a <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   28512:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   28514:	4632      	mov	r2, r6
		*d = *s;
   28516:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   2851a:	e7ef      	b.n	284fc <strncpy+0x6>

0002851c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2851c:	4603      	mov	r3, r0
	size_t n = 0;
   2851e:	2000      	movs	r0, #0

	while (*s != '\0') {
   28520:	5c1a      	ldrb	r2, [r3, r0]
   28522:	b902      	cbnz	r2, 28526 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   28524:	4770      	bx	lr
		n++;
   28526:	3001      	adds	r0, #1
   28528:	e7fa      	b.n	28520 <strlen+0x4>

0002852a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   2852a:	4603      	mov	r3, r0
	size_t n = 0;
   2852c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   2852e:	5c1a      	ldrb	r2, [r3, r0]
   28530:	b10a      	cbz	r2, 28536 <strnlen+0xc>
   28532:	4288      	cmp	r0, r1
   28534:	d100      	bne.n	28538 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   28536:	4770      	bx	lr
		n++;
   28538:	3001      	adds	r0, #1
   2853a:	e7f8      	b.n	2852e <strnlen+0x4>

0002853c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2853c:	1e43      	subs	r3, r0, #1
   2853e:	3901      	subs	r1, #1
   28540:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   28544:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   28548:	4282      	cmp	r2, r0
   2854a:	d101      	bne.n	28550 <strcmp+0x14>
   2854c:	2a00      	cmp	r2, #0
   2854e:	d1f7      	bne.n	28540 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   28550:	1a10      	subs	r0, r2, r0
   28552:	4770      	bx	lr

00028554 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   28554:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   28556:	2400      	movs	r4, #0
   28558:	42a2      	cmp	r2, r4
   2855a:	d008      	beq.n	2856e <strncmp+0x1a>
   2855c:	5d03      	ldrb	r3, [r0, r4]
   2855e:	5d0d      	ldrb	r5, [r1, r4]
   28560:	42ab      	cmp	r3, r5
   28562:	d102      	bne.n	2856a <strncmp+0x16>
   28564:	3401      	adds	r4, #1
   28566:	2b00      	cmp	r3, #0
   28568:	d1f6      	bne.n	28558 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   2856a:	1b58      	subs	r0, r3, r5
   2856c:	e000      	b.n	28570 <strncmp+0x1c>
   2856e:	2000      	movs	r0, #0
}
   28570:	bd30      	pop	{r4, r5, pc}

00028572 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   28572:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   28574:	b15a      	cbz	r2, 2858e <memcmp+0x1c>
   28576:	3901      	subs	r1, #1
   28578:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   2857a:	f810 2b01 	ldrb.w	r2, [r0], #1
   2857e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   28582:	42a0      	cmp	r0, r4
   28584:	d001      	beq.n	2858a <memcmp+0x18>
   28586:	429a      	cmp	r2, r3
   28588:	d0f7      	beq.n	2857a <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   2858a:	1ad0      	subs	r0, r2, r3
}
   2858c:	bd10      	pop	{r4, pc}
		return 0;
   2858e:	4610      	mov	r0, r2
   28590:	e7fc      	b.n	2858c <memcmp+0x1a>

00028592 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   28592:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   28594:	ea81 0400 	eor.w	r4, r1, r0
   28598:	07a5      	lsls	r5, r4, #30
   2859a:	4603      	mov	r3, r0
   2859c:	d00b      	beq.n	285b6 <memcpy+0x24>
   2859e:	3b01      	subs	r3, #1
   285a0:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   285a2:	4291      	cmp	r1, r2
   285a4:	d11b      	bne.n	285de <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   285a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   285a8:	2a00      	cmp	r2, #0
   285aa:	d0fc      	beq.n	285a6 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   285ac:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   285b0:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   285b2:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   285b6:	079c      	lsls	r4, r3, #30
   285b8:	d1f6      	bne.n	285a8 <memcpy+0x16>
   285ba:	f022 0403 	bic.w	r4, r2, #3
   285be:	1f1d      	subs	r5, r3, #4
   285c0:	0896      	lsrs	r6, r2, #2
   285c2:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   285c4:	42b9      	cmp	r1, r7
   285c6:	d105      	bne.n	285d4 <memcpy+0x42>
   285c8:	f06f 0503 	mvn.w	r5, #3
   285cc:	4423      	add	r3, r4
   285ce:	fb05 2206 	mla	r2, r5, r6, r2
   285d2:	e7e4      	b.n	2859e <memcpy+0xc>
			*(d_word++) = *(s_word++);
   285d4:	f851 cb04 	ldr.w	ip, [r1], #4
   285d8:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   285dc:	e7f2      	b.n	285c4 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   285de:	f811 4b01 	ldrb.w	r4, [r1], #1
   285e2:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   285e6:	e7dc      	b.n	285a2 <memcpy+0x10>

000285e8 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   285e8:	4603      	mov	r3, r0
{
   285ea:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   285ec:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   285ee:	079c      	lsls	r4, r3, #30
   285f0:	d111      	bne.n	28616 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   285f2:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   285f6:	f022 0603 	bic.w	r6, r2, #3
   285fa:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   285fe:	441e      	add	r6, r3
   28600:	0894      	lsrs	r4, r2, #2
   28602:	42b3      	cmp	r3, r6
   28604:	d10d      	bne.n	28622 <memset+0x3a>
   28606:	f06f 0503 	mvn.w	r5, #3
   2860a:	fb05 2204 	mla	r2, r5, r4, r2
   2860e:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   28610:	4293      	cmp	r3, r2
   28612:	d109      	bne.n	28628 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   28614:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   28616:	2a00      	cmp	r2, #0
   28618:	d0fc      	beq.n	28614 <memset+0x2c>
		*(d_byte++) = c_byte;
   2861a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2861e:	3a01      	subs	r2, #1
   28620:	e7e5      	b.n	285ee <memset+0x6>
		*(d_word++) = c_word;
   28622:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   28626:	e7ec      	b.n	28602 <memset+0x1a>
		*(d_byte++) = c_byte;
   28628:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2862c:	e7f0      	b.n	28610 <memset+0x28>

0002862e <_stdout_hook_default>:
}
   2862e:	f04f 30ff 	mov.w	r0, #4294967295
   28632:	4770      	bx	lr

00028634 <bt_rpa_irk_matches>:

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   28634:	2203      	movs	r2, #3
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   28636:	b530      	push	{r4, r5, lr}
   28638:	4605      	mov	r5, r0
   2863a:	b087      	sub	sp, #28
   2863c:	460c      	mov	r4, r1
	memcpy(res, r, 3);
   2863e:	a802      	add	r0, sp, #8
   28640:	4411      	add	r1, r2
   28642:	f7ff ffa6 	bl	28592 <memcpy>
	(void)memset(res + 3, 0, 13);
   28646:	220d      	movs	r2, #13
   28648:	2100      	movs	r1, #0
   2864a:	f10d 000b 	add.w	r0, sp, #11
   2864e:	f7ff ffcb 	bl	285e8 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   28652:	aa02      	add	r2, sp, #8
   28654:	4611      	mov	r1, r2
   28656:	4628      	mov	r0, r5
   28658:	f000 fa2a 	bl	28ab0 <bt_encrypt_le>
	if (err) {
   2865c:	b970      	cbnz	r0, 2867c <bt_rpa_irk_matches+0x48>
	memcpy(out, res, 3);
   2865e:	2203      	movs	r2, #3
   28660:	a902      	add	r1, sp, #8
   28662:	a801      	add	r0, sp, #4
   28664:	f7ff ff95 	bl	28592 <memcpy>
	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   28668:	2203      	movs	r2, #3
   2866a:	4620      	mov	r0, r4
   2866c:	a901      	add	r1, sp, #4
   2866e:	f7ff ff80 	bl	28572 <memcmp>
   28672:	fab0 f080 	clz	r0, r0
   28676:	0940      	lsrs	r0, r0, #5
}
   28678:	b007      	add	sp, #28
   2867a:	bd30      	pop	{r4, r5, pc}
		return false;
   2867c:	2000      	movs	r0, #0
   2867e:	e7fb      	b.n	28678 <bt_rpa_irk_matches+0x44>

00028680 <bt_settings_decode_key>:
{
   28680:	b570      	push	{r4, r5, r6, lr}
   28682:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   28684:	2100      	movs	r1, #0
{
   28686:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   28688:	f7fe ffba 	bl	27600 <settings_name_next>
   2868c:	280d      	cmp	r0, #13
   2868e:	d118      	bne.n	286c2 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   28690:	7b23      	ldrb	r3, [r4, #12]
   28692:	2b30      	cmp	r3, #48	; 0x30
   28694:	d111      	bne.n	286ba <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   28696:	2300      	movs	r3, #0
   28698:	702b      	strb	r3, [r5, #0]
   2869a:	f104 060c 	add.w	r6, r4, #12
   2869e:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   286a0:	462a      	mov	r2, r5
   286a2:	4620      	mov	r0, r4
   286a4:	2301      	movs	r3, #1
   286a6:	2102      	movs	r1, #2
   286a8:	3402      	adds	r4, #2
   286aa:	f7fd ffd4 	bl	26656 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   286ae:	42b4      	cmp	r4, r6
   286b0:	f105 35ff 	add.w	r5, r5, #4294967295
   286b4:	d1f4      	bne.n	286a0 <bt_settings_decode_key+0x20>
	return 0;
   286b6:	2000      	movs	r0, #0
}
   286b8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   286ba:	2b31      	cmp	r3, #49	; 0x31
   286bc:	d101      	bne.n	286c2 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   286be:	2301      	movs	r3, #1
   286c0:	e7ea      	b.n	28698 <bt_settings_decode_key+0x18>
		return -EINVAL;
   286c2:	f06f 0015 	mvn.w	r0, #21
   286c6:	e7f7      	b.n	286b8 <bt_settings_decode_key+0x38>

000286c8 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   286c8:	b510      	push	{r4, lr}
   286ca:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   286cc:	7801      	ldrb	r1, [r0, #0]
   286ce:	7822      	ldrb	r2, [r4, #0]
{
   286d0:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   286d2:	428a      	cmp	r2, r1
   286d4:	d00e      	beq.n	286f4 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   286d6:	4669      	mov	r1, sp
   286d8:	f7ee fc96 	bl	17008 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   286dc:	4620      	mov	r0, r4
   286de:	a905      	add	r1, sp, #20
   286e0:	f7ee fc92 	bl	17008 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   286e4:	2210      	movs	r2, #16
   286e6:	f10d 0115 	add.w	r1, sp, #21
   286ea:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   286ee:	f7ff ff40 	bl	28572 <memcmp>
   286f2:	e007      	b.n	28704 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   286f4:	2a01      	cmp	r2, #1
   286f6:	d007      	beq.n	28708 <bt_uuid_cmp+0x40>
   286f8:	2a02      	cmp	r2, #2
   286fa:	d008      	beq.n	2870e <bt_uuid_cmp+0x46>
   286fc:	b95a      	cbnz	r2, 28716 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   286fe:	8840      	ldrh	r0, [r0, #2]
   28700:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   28702:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   28704:	b00a      	add	sp, #40	; 0x28
   28706:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   28708:	6840      	ldr	r0, [r0, #4]
   2870a:	6863      	ldr	r3, [r4, #4]
   2870c:	e7f9      	b.n	28702 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2870e:	2210      	movs	r2, #16
   28710:	1c61      	adds	r1, r4, #1
   28712:	3001      	adds	r0, #1
   28714:	e7eb      	b.n	286ee <bt_uuid_cmp+0x26>
	switch (u1->type) {
   28716:	f06f 0015 	mvn.w	r0, #21
   2871a:	e7f3      	b.n	28704 <bt_uuid_cmp+0x3c>

0002871c <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2871c:	2a04      	cmp	r2, #4
{
   2871e:	b538      	push	{r3, r4, r5, lr}
   28720:	460c      	mov	r4, r1
	switch (data_len) {
   28722:	d00d      	beq.n	28740 <bt_uuid_create+0x24>
   28724:	2a10      	cmp	r2, #16
   28726:	d019      	beq.n	2875c <bt_uuid_create+0x40>
   28728:	2a02      	cmp	r2, #2
   2872a:	f04f 0300 	mov.w	r3, #0
   2872e:	d11b      	bne.n	28768 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   28730:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   28732:	784a      	ldrb	r2, [r1, #1]
   28734:	780b      	ldrb	r3, [r1, #0]
   28736:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2873a:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2873c:	2001      	movs	r0, #1
}
   2873e:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   28740:	2301      	movs	r3, #1
   28742:	7003      	strb	r3, [r0, #0]
   28744:	78a2      	ldrb	r2, [r4, #2]
   28746:	78c9      	ldrb	r1, [r1, #3]
   28748:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2874a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   2874e:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   28750:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   28754:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   28758:	6042      	str	r2, [r0, #4]
		break;
   2875a:	e7ef      	b.n	2873c <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   2875c:	2302      	movs	r3, #2
   2875e:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   28762:	f7ff ff16 	bl	28592 <memcpy>
		break;
   28766:	e7e9      	b.n	2873c <bt_uuid_create+0x20>
	switch (data_len) {
   28768:	4618      	mov	r0, r3
   2876a:	e7e8      	b.n	2873e <bt_uuid_create+0x22>

0002876c <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2876c:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2876e:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   28770:	2106      	movs	r1, #6
{
   28772:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   28774:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   28778:	f7f0 feaa 	bl	194d0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2877c:	b918      	cbnz	r0, 28786 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2877e:	79a3      	ldrb	r3, [r4, #6]
   28780:	f063 033f 	orn	r3, r3, #63	; 0x3f
   28784:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   28786:	bd10      	pop	{r4, pc}

00028788 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   28788:	280f      	cmp	r0, #15
   2878a:	d806      	bhi.n	2879a <bt_hci_evt_get_flags+0x12>
   2878c:	280d      	cmp	r0, #13
   2878e:	d80b      	bhi.n	287a8 <bt_hci_evt_get_flags+0x20>
   28790:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   28792:	bf14      	ite	ne
   28794:	2002      	movne	r0, #2
   28796:	2003      	moveq	r0, #3
   28798:	4770      	bx	lr
	switch (evt) {
   2879a:	2813      	cmp	r0, #19
   2879c:	d004      	beq.n	287a8 <bt_hci_evt_get_flags+0x20>
   2879e:	281a      	cmp	r0, #26
   287a0:	bf14      	ite	ne
   287a2:	2002      	movne	r0, #2
   287a4:	2001      	moveq	r0, #1
   287a6:	4770      	bx	lr
   287a8:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   287aa:	4770      	bx	lr

000287ac <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   287ac:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   287b0:	b193      	cbz	r3, 287d8 <update_sec_level+0x2c>
   287b2:	7b5a      	ldrb	r2, [r3, #13]
   287b4:	07d1      	lsls	r1, r2, #31
   287b6:	d50f      	bpl.n	287d8 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   287b8:	06d2      	lsls	r2, r2, #27
   287ba:	d50b      	bpl.n	287d4 <update_sec_level+0x28>
   287bc:	7b1b      	ldrb	r3, [r3, #12]
   287be:	2b10      	cmp	r3, #16
   287c0:	d108      	bne.n	287d4 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   287c2:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   287c4:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   287c6:	7a82      	ldrb	r2, [r0, #10]
   287c8:	7a40      	ldrb	r0, [r0, #9]
}
   287ca:	4282      	cmp	r2, r0
   287cc:	bf8c      	ite	hi
   287ce:	2000      	movhi	r0, #0
   287d0:	2001      	movls	r0, #1
   287d2:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   287d4:	2303      	movs	r3, #3
   287d6:	e7f5      	b.n	287c4 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   287d8:	2302      	movs	r3, #2
   287da:	e7f3      	b.n	287c4 <update_sec_level+0x18>

000287dc <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   287dc:	2207      	movs	r2, #7
   287de:	f7ff bed8 	b.w	28592 <memcpy>

000287e2 <atomic_or>:
{
   287e2:	4603      	mov	r3, r0
}
   287e4:	e8d3 0fef 	ldaex	r0, [r3]
   287e8:	ea40 0201 	orr.w	r2, r0, r1
   287ec:	e8c3 2fec 	stlex	ip, r2, [r3]
   287f0:	f1bc 0f00 	cmp.w	ip, #0
   287f4:	d1f6      	bne.n	287e4 <atomic_or+0x2>
   287f6:	4770      	bx	lr

000287f8 <sys_put_le64>:
	dst[1] = val >> 8;
   287f8:	f3c0 2307 	ubfx	r3, r0, #8, #8
   287fc:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   287fe:	2300      	movs	r3, #0
   28800:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   28802:	0e00      	lsrs	r0, r0, #24
   28804:	70d0      	strb	r0, [r2, #3]
   28806:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2880a:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2880c:	7093      	strb	r3, [r2, #2]
   2880e:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   28810:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   28812:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   28814:	71d1      	strb	r1, [r2, #7]
}
   28816:	4770      	bx	lr

00028818 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   28818:	f7ef b99a 	b.w	17b50 <bt_le_create_conn_legacy>

0002881c <bt_hci_disconnect>:
{
   2881c:	b570      	push	{r4, r5, r6, lr}
   2881e:	4606      	mov	r6, r0
   28820:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   28822:	f240 4006 	movw	r0, #1030	; 0x406
   28826:	2103      	movs	r1, #3
   28828:	f7ef f8a8 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   2882c:	4604      	mov	r4, r0
   2882e:	b168      	cbz	r0, 2884c <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   28830:	2103      	movs	r1, #3
   28832:	3008      	adds	r0, #8
   28834:	f7f7 fd68 	bl	20308 <net_buf_simple_add>
	disconn->reason = reason;
   28838:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   2883a:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2883c:	4621      	mov	r1, r4
}
   2883e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   28842:	2200      	movs	r2, #0
   28844:	f240 4006 	movw	r0, #1030	; 0x406
   28848:	f7ef b8e0 	b.w	17a0c <bt_hci_cmd_send_sync>
}
   2884c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28850:	bd70      	pop	{r4, r5, r6, pc}

00028852 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   28852:	8802      	ldrh	r2, [r0, #0]
   28854:	8843      	ldrh	r3, [r0, #2]
{
   28856:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   28858:	429a      	cmp	r2, r3
   2885a:	d818      	bhi.n	2888e <bt_le_conn_params_valid+0x3c>
   2885c:	2a05      	cmp	r2, #5
   2885e:	d916      	bls.n	2888e <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   28860:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   28864:	d813      	bhi.n	2888e <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   28866:	8884      	ldrh	r4, [r0, #4]
   28868:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   2886c:	d20f      	bcs.n	2888e <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2886e:	88c1      	ldrh	r1, [r0, #6]
   28870:	f640 4076 	movw	r0, #3190	; 0xc76
   28874:	f1a1 020a 	sub.w	r2, r1, #10
   28878:	b292      	uxth	r2, r2
   2887a:	4282      	cmp	r2, r0
   2887c:	d807      	bhi.n	2888e <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   2887e:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   28882:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   28886:	bf34      	ite	cc
   28888:	2001      	movcc	r0, #1
   2888a:	2000      	movcs	r0, #0
}
   2888c:	bd10      	pop	{r4, pc}
		return false;
   2888e:	2000      	movs	r0, #0
   28890:	e7fc      	b.n	2888c <bt_le_conn_params_valid+0x3a>

00028892 <bt_le_set_data_len>:
{
   28892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28894:	4607      	mov	r7, r0
   28896:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   28898:	f242 0022 	movw	r0, #8226	; 0x2022
   2889c:	2106      	movs	r1, #6
{
   2889e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   288a0:	f7ef f86c 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   288a4:	4604      	mov	r4, r0
   288a6:	b170      	cbz	r0, 288c6 <bt_le_set_data_len+0x34>
   288a8:	2106      	movs	r1, #6
   288aa:	3008      	adds	r0, #8
   288ac:	f7f7 fd2c 	bl	20308 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   288b0:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   288b2:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
   288b4:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   288b6:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   288b8:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   288ba:	f242 0022 	movw	r0, #8226	; 0x2022
}
   288be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   288c2:	f7ef b9e5 	b.w	17c90 <bt_hci_cmd_send>
}
   288c6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   288ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000288cc <bt_le_set_phy>:
{
   288cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   288d0:	4680      	mov	r8, r0
   288d2:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   288d4:	f242 0032 	movw	r0, #8242	; 0x2032
   288d8:	2107      	movs	r1, #7
{
   288da:	4616      	mov	r6, r2
   288dc:	461d      	mov	r5, r3
   288de:	f89d 9020 	ldrb.w	r9, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   288e2:	f7ef f84b 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   288e6:	4604      	mov	r4, r0
   288e8:	b190      	cbz	r0, 28910 <bt_le_set_phy+0x44>
   288ea:	2107      	movs	r1, #7
   288ec:	3008      	adds	r0, #8
   288ee:	f7f7 fd0b 	bl	20308 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   288f2:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   288f6:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   288f8:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   288fa:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   288fc:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   288fe:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   28902:	4621      	mov	r1, r4
}
   28904:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   28908:	f242 0032 	movw	r0, #8242	; 0x2032
   2890c:	f7ef b9c0 	b.w	17c90 <bt_hci_cmd_send>
}
   28910:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00028918 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   28918:	6880      	ldr	r0, [r0, #8]
   2891a:	f7ef bad3 	b.w	17ec4 <bt_hci_le_enh_conn_complete>

0002891e <le_legacy_conn_complete>:
{
   2891e:	b510      	push	{r4, lr}
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   28920:	2400      	movs	r4, #0
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   28922:	6881      	ldr	r1, [r0, #8]
{
   28924:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   28926:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   28928:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
   2892a:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   2892e:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   28932:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   28934:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   28938:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   2893c:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   28940:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   28944:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   28948:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   2894c:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   28950:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   28954:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   28958:	7b4b      	ldrb	r3, [r1, #13]
   2895a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   2895e:	f7ff ff3d 	bl	287dc <bt_addr_le_copy>
	memcpy(dst, src, sizeof(*dst));
   28962:	4669      	mov	r1, sp
   28964:	2206      	movs	r2, #6
   28966:	f10d 0013 	add.w	r0, sp, #19
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   2896a:	9400      	str	r4, [sp, #0]
   2896c:	f8ad 4004 	strh.w	r4, [sp, #4]
   28970:	f7ff fe0f 	bl	28592 <memcpy>
   28974:	2206      	movs	r2, #6
   28976:	4669      	mov	r1, sp
   28978:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   2897c:	9400      	str	r4, [sp, #0]
   2897e:	f8ad 4004 	strh.w	r4, [sp, #4]
   28982:	f7ff fe06 	bl	28592 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   28986:	a802      	add	r0, sp, #8
   28988:	f7ef fa9c 	bl	17ec4 <bt_hci_le_enh_conn_complete>
}
   2898c:	b00a      	add	sp, #40	; 0x28
   2898e:	bd10      	pop	{r4, pc}

00028990 <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   28990:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   28992:	f7f7 f8dd 	bl	1fb50 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   28996:	b118      	cbz	r0, 289a0 <bt_addr_le_is_bonded+0x10>
   28998:	89c0      	ldrh	r0, [r0, #14]
   2899a:	3800      	subs	r0, #0
   2899c:	bf18      	it	ne
   2899e:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   289a0:	bd08      	pop	{r3, pc}

000289a2 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   289a2:	2207      	movs	r2, #7
   289a4:	f7ff bdf5 	b.w	28592 <memcpy>

000289a8 <addr_res_enable>:
{
   289a8:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   289aa:	2101      	movs	r1, #1
{
   289ac:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   289ae:	f242 002d 	movw	r0, #8237	; 0x202d
   289b2:	f7ee ffe3 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   289b6:	4604      	mov	r4, r0
   289b8:	b158      	cbz	r0, 289d2 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   289ba:	4629      	mov	r1, r5
   289bc:	3008      	adds	r0, #8
   289be:	f001 fe62 	bl	2a686 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   289c2:	4621      	mov	r1, r4
}
   289c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   289c8:	2200      	movs	r2, #0
   289ca:	f242 002d 	movw	r0, #8237	; 0x202d
   289ce:	f7ef b81d 	b.w	17a0c <bt_hci_cmd_send_sync>
}
   289d2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   289d6:	bd38      	pop	{r3, r4, r5, pc}

000289d8 <hci_id_add.isra.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   289d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   289da:	4607      	mov	r7, r0
   289dc:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   289de:	f242 0027 	movw	r0, #8231	; 0x2027
   289e2:	2127      	movs	r1, #39	; 0x27
   289e4:	f7ee ffca 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   289e8:	4604      	mov	r4, r0
   289ea:	b1d0      	cbz	r0, 28a22 <hci_id_add.isra.0+0x4a>
	return net_buf_simple_add(&buf->b, len);
   289ec:	2127      	movs	r1, #39	; 0x27
   289ee:	3008      	adds	r0, #8
   289f0:	f7f7 fc8a 	bl	20308 <net_buf_simple_add>
   289f4:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   289f6:	4639      	mov	r1, r7
   289f8:	f7ff ffd3 	bl	289a2 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   289fc:	4631      	mov	r1, r6
   289fe:	2210      	movs	r2, #16
   28a00:	1de8      	adds	r0, r5, #7
   28a02:	f7ff fdc6 	bl	28592 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   28a06:	2210      	movs	r2, #16
   28a08:	2100      	movs	r1, #0
   28a0a:	f105 0017 	add.w	r0, r5, #23
   28a0e:	f7ff fdeb 	bl	285e8 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   28a12:	4621      	mov	r1, r4
}
   28a14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   28a18:	2200      	movs	r2, #0
   28a1a:	f242 0027 	movw	r0, #8231	; 0x2027
   28a1e:	f7ee bff5 	b.w	17a0c <bt_hci_cmd_send_sync>
}
   28a22:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028a28 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   28a28:	7a03      	ldrb	r3, [r0, #8]
   28a2a:	075b      	lsls	r3, r3, #29
   28a2c:	d504      	bpl.n	28a38 <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   28a2e:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   28a32:	3001      	adds	r0, #1
   28a34:	f7ff bfd0 	b.w	289d8 <hci_id_add.isra.0>
}
   28a38:	4770      	bx	lr

00028a3a <bt_lookup_id_addr>:
{
   28a3a:	b510      	push	{r4, lr}
   28a3c:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   28a3e:	f7f7 f84d 	bl	1fadc <bt_keys_find_irk>
		if (keys) {
   28a42:	b100      	cbz	r0, 28a46 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   28a44:	1c44      	adds	r4, r0, #1
}
   28a46:	4620      	mov	r0, r4
   28a48:	bd10      	pop	{r4, pc}

00028a4a <bt_id_set_private_addr>:
{
   28a4a:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   28a4c:	2106      	movs	r1, #6
   28a4e:	4668      	mov	r0, sp
   28a50:	f7f0 fd3e 	bl	194d0 <bt_rand>
	if (err) {
   28a54:	b940      	cbnz	r0, 28a68 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   28a56:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   28a5a:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   28a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   28a60:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   28a64:	f7ef fea6 	bl	187b4 <set_random_address>
}
   28a68:	b003      	add	sp, #12
   28a6a:	f85d fb04 	ldr.w	pc, [sp], #4

00028a6e <bt_id_scan_random_addr_check>:
}
   28a6e:	2001      	movs	r0, #1
   28a70:	4770      	bx	lr

00028a72 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   28a72:	7a03      	ldrb	r3, [r0, #8]
   28a74:	07d9      	lsls	r1, r3, #31
   28a76:	d504      	bpl.n	28a82 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   28a78:	f023 0301 	bic.w	r3, r3, #1
   28a7c:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   28a7e:	f7ef bf0f 	b.w	188a0 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   28a82:	0799      	lsls	r1, r3, #30
   28a84:	d504      	bpl.n	28a90 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   28a86:	f023 0302 	bic.w	r3, r3, #2
   28a8a:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   28a8c:	f7ef bfdc 	b.w	18a48 <bt_id_del>
}
   28a90:	4770      	bx	lr

00028a92 <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   28a92:	2000      	movs	r0, #0
   28a94:	4770      	bx	lr

00028a96 <atomic_and>:
{
   28a96:	4603      	mov	r3, r0
}
   28a98:	e8d3 0fef 	ldaex	r0, [r3]
   28a9c:	ea00 0201 	and.w	r2, r0, r1
   28aa0:	e8c3 2fec 	stlex	ip, r2, [r3]
   28aa4:	f1bc 0f00 	cmp.w	ip, #0
   28aa8:	d1f6      	bne.n	28a98 <atomic_and+0x2>
   28aaa:	4770      	bx	lr

00028aac <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   28aac:	f7f0 b9c4 	b.w	18e38 <bt_le_scan_set_enable_legacy>

00028ab0 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   28ab0:	b530      	push	{r4, r5, lr}
   28ab2:	b0b1      	sub	sp, #196	; 0xc4
   28ab4:	460d      	mov	r5, r1
	uint8_t tmp[16];

	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);
   28ab6:	4601      	mov	r1, r0
   28ab8:	4668      	mov	r0, sp
{
   28aba:	4614      	mov	r4, r2
	sys_memcpy_swap(tmp, key, 16);
   28abc:	f7f0 fca2 	bl	19404 <sys_memcpy_swap.constprop.0>

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   28ac0:	4669      	mov	r1, sp
   28ac2:	a804      	add	r0, sp, #16
   28ac4:	f7ed f92e 	bl	15d24 <tc_aes128_set_encrypt_key>
   28ac8:	b1c0      	cbz	r0, 28afc <bt_encrypt_le+0x4c>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);
   28aca:	4629      	mov	r1, r5
   28acc:	4668      	mov	r0, sp
   28ace:	f7f0 fc99 	bl	19404 <sys_memcpy_swap.constprop.0>

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   28ad2:	4669      	mov	r1, sp
   28ad4:	4620      	mov	r0, r4
   28ad6:	aa04      	add	r2, sp, #16
   28ad8:	f7ed f978 	bl	15dcc <tc_aes_encrypt>
   28adc:	b170      	cbz	r0, 28afc <bt_encrypt_le+0x4c>
   28ade:	1e63      	subs	r3, r4, #1
   28ae0:	f104 0210 	add.w	r2, r4, #16
   28ae4:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   28ae6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   28aea:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   28aee:	42a3      	cmp	r3, r4
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   28af0:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   28af2:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   28af4:	d1f7      	bne.n	28ae6 <bt_encrypt_le+0x36>

	sys_mem_swap(enc_data, 16);

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   28af6:	2000      	movs	r0, #0
}
   28af8:	b031      	add	sp, #196	; 0xc4
   28afa:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   28afc:	f06f 0015 	mvn.w	r0, #21
   28b00:	e7fa      	b.n	28af8 <bt_encrypt_le+0x48>

00028b02 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28b02:	e8d0 0faf 	lda	r0, [r0]
}
   28b06:	4770      	bx	lr

00028b08 <tx_notify>:
{
   28b08:	b570      	push	{r4, r5, r6, lr}
   28b0a:	4604      	mov	r4, r0
	__asm__ volatile(
   28b0c:	f04f 0220 	mov.w	r2, #32
   28b10:	f3ef 8311 	mrs	r3, BASEPRI
   28b14:	f382 8811 	msr	BASEPRI, r2
   28b18:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   28b1c:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   28b1e:	b920      	cbnz	r0, 28b2a <tx_notify+0x22>
	__asm__ volatile(
   28b20:	f383 8811 	msr	BASEPRI, r3
   28b24:	f3bf 8f6f 	isb	sy
}
   28b28:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28b2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   28b2c:	6802      	ldr	r2, [r0, #0]
   28b2e:	4288      	cmp	r0, r1
	list->tail = node;
   28b30:	bf08      	it	eq
   28b32:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   28b34:	6222      	str	r2, [r4, #32]
   28b36:	f383 8811 	msr	BASEPRI, r3
   28b3a:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   28b3e:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   28b42:	f7f0 fe1d 	bl	19780 <tx_free>
		cb(conn, user_data);
   28b46:	4631      	mov	r1, r6
   28b48:	4620      	mov	r0, r4
   28b4a:	47a8      	blx	r5
	while (1) {
   28b4c:	e7de      	b.n	28b0c <tx_notify+0x4>

00028b4e <tx_complete_work>:
	tx_notify(conn);
   28b4e:	3828      	subs	r0, #40	; 0x28
   28b50:	f7ff bfda 	b.w	28b08 <tx_notify>

00028b54 <bt_conn_new>:
{
   28b54:	b538      	push	{r3, r4, r5, lr}
   28b56:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   28b58:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   28b5a:	2501      	movs	r5, #1
   28b5c:	428b      	cmp	r3, r1
   28b5e:	d102      	bne.n	28b66 <bt_conn_new+0x12>
		return NULL;
   28b60:	2400      	movs	r4, #0
}
   28b62:	4620      	mov	r0, r4
   28b64:	bd38      	pop	{r3, r4, r5, pc}
   28b66:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   28b6a:	e8d2 0fef 	ldaex	r0, [r2]
   28b6e:	2800      	cmp	r0, #0
   28b70:	d104      	bne.n	28b7c <bt_conn_new+0x28>
   28b72:	e8c2 5fec 	stlex	ip, r5, [r2]
   28b76:	f1bc 0f00 	cmp.w	ip, #0
   28b7a:	d1f6      	bne.n	28b6a <bt_conn_new+0x16>
   28b7c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   28b80:	d002      	beq.n	28b88 <bt_conn_new+0x34>
	for (i = 0; i < size; i++) {
   28b82:	4604      	mov	r4, r0
   28b84:	3301      	adds	r3, #1
   28b86:	e7e9      	b.n	28b5c <bt_conn_new+0x8>
	if (!conn) {
   28b88:	2c00      	cmp	r4, #0
   28b8a:	d0ea      	beq.n	28b62 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   28b8c:	22c0      	movs	r2, #192	; 0xc0
   28b8e:	2100      	movs	r1, #0
   28b90:	4620      	mov	r0, r4
   28b92:	f7ff fd29 	bl	285e8 <memset>
	return conn;
   28b96:	e7e4      	b.n	28b62 <bt_conn_new+0xe>

00028b98 <bt_conn_le_start_encryption>:
{
   28b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28b9c:	4682      	mov	sl, r0
   28b9e:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   28ba0:	f242 0019 	movw	r0, #8217	; 0x2019
   28ba4:	211c      	movs	r1, #28
{
   28ba6:	4690      	mov	r8, r2
   28ba8:	461f      	mov	r7, r3
   28baa:	9e08      	ldr	r6, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   28bac:	f7ee fee6 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   28bb0:	4605      	mov	r5, r0
   28bb2:	b340      	cbz	r0, 28c06 <bt_conn_le_start_encryption+0x6e>
   28bb4:	211c      	movs	r1, #28
   28bb6:	3008      	adds	r0, #8
   28bb8:	f7f7 fba6 	bl	20308 <net_buf_simple_add>
   28bbc:	4604      	mov	r4, r0
	cp->handle = sys_cpu_to_le16(conn->handle);
   28bbe:	f8ba 3000 	ldrh.w	r3, [sl]
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   28bc2:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   28bc4:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   28bc8:	4649      	mov	r1, r9
   28bca:	f7ff fce2 	bl	28592 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   28bce:	2202      	movs	r2, #2
   28bd0:	4641      	mov	r1, r8
   28bd2:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   28bd6:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   28bd8:	f7ff fcdb 	bl	28592 <memcpy>
	memcpy(cp->ltk, ltk, len);
   28bdc:	4632      	mov	r2, r6
   28bde:	4639      	mov	r1, r7
   28be0:	4620      	mov	r0, r4
   28be2:	f7ff fcd6 	bl	28592 <memcpy>
	if (len < sizeof(cp->ltk)) {
   28be6:	2e0f      	cmp	r6, #15
   28be8:	d805      	bhi.n	28bf6 <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   28bea:	2100      	movs	r1, #0
   28bec:	f1c6 0210 	rsb	r2, r6, #16
   28bf0:	19a0      	adds	r0, r4, r6
   28bf2:	f7ff fcf9 	bl	285e8 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   28bf6:	4629      	mov	r1, r5
}
   28bf8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   28bfc:	2200      	movs	r2, #0
   28bfe:	f242 0019 	movw	r0, #8217	; 0x2019
   28c02:	f7ee bf03 	b.w	17a0c <bt_hci_cmd_send_sync>
}
   28c06:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00028c0e <bt_conn_set_security>:
{
   28c0e:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   28c10:	7b43      	ldrb	r3, [r0, #13]
{
   28c12:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   28c14:	2b07      	cmp	r3, #7
   28c16:	d124      	bne.n	28c62 <bt_conn_set_security+0x54>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   28c18:	7a43      	ldrb	r3, [r0, #9]
   28c1a:	428b      	cmp	r3, r1
   28c1c:	d224      	bcs.n	28c68 <bt_conn_set_security+0x5a>
   28c1e:	7a83      	ldrb	r3, [r0, #10]
   28c20:	428b      	cmp	r3, r1
   28c22:	d221      	bcs.n	28c68 <bt_conn_set_security+0x5a>
	if (val) {
   28c24:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   28c26:	f100 0304 	add.w	r3, r0, #4
   28c2a:	d511      	bpl.n	28c50 <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28c2c:	e8d3 2fef 	ldaex	r2, [r3]
   28c30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   28c34:	e8c3 2fe0 	stlex	r0, r2, [r3]
   28c38:	2800      	cmp	r0, #0
   28c3a:	d1f7      	bne.n	28c2c <bt_conn_set_security+0x1e>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   28c3c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		return bt_smp_start_security(conn);
   28c40:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   28c42:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   28c44:	f001 fbbb 	bl	2a3be <bt_smp_start_security>
	if (err) {
   28c48:	b108      	cbz	r0, 28c4e <bt_conn_set_security+0x40>
		conn->required_sec_level = conn->sec_level;
   28c4a:	7a63      	ldrb	r3, [r4, #9]
   28c4c:	72a3      	strb	r3, [r4, #10]
}
   28c4e:	bd10      	pop	{r4, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28c50:	e8d3 2fef 	ldaex	r2, [r3]
   28c54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   28c58:	e8c3 2fe0 	stlex	r0, r2, [r3]
   28c5c:	2800      	cmp	r0, #0
   28c5e:	d0ed      	beq.n	28c3c <bt_conn_set_security+0x2e>
   28c60:	e7f6      	b.n	28c50 <bt_conn_set_security+0x42>
		return -ENOTCONN;
   28c62:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   28c66:	e7f2      	b.n	28c4e <bt_conn_set_security+0x40>
		return 0;
   28c68:	2000      	movs	r0, #0
   28c6a:	e7f0      	b.n	28c4e <bt_conn_set_security+0x40>

00028c6c <bt_conn_get_security>:
}
   28c6c:	7a40      	ldrb	r0, [r0, #9]
   28c6e:	4770      	bx	lr

00028c70 <bt_conn_reset_rx_state>:
{
   28c70:	b510      	push	{r4, lr}
   28c72:	4604      	mov	r4, r0
	if (!conn->rx) {
   28c74:	6900      	ldr	r0, [r0, #16]
   28c76:	b118      	cbz	r0, 28c80 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   28c78:	f7f7 fa16 	bl	200a8 <net_buf_unref>
	conn->rx = NULL;
   28c7c:	2300      	movs	r3, #0
   28c7e:	6123      	str	r3, [r4, #16]
}
   28c80:	bd10      	pop	{r4, pc}

00028c82 <bt_conn_connected>:
{
   28c82:	b510      	push	{r4, lr}
   28c84:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   28c86:	f7f1 fd67 	bl	1a758 <bt_l2cap_connected>
	notify_connected(conn);
   28c8a:	4620      	mov	r0, r4
}
   28c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   28c90:	f7f0 bd80 	b.w	19794 <notify_connected>

00028c94 <bt_conn_is_peer_addr_le>:
{
   28c94:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   28c96:	7a03      	ldrb	r3, [r0, #8]
{
   28c98:	4604      	mov	r4, r0
	if (id != conn->id) {
   28c9a:	428b      	cmp	r3, r1
{
   28c9c:	4615      	mov	r5, r2
	if (id != conn->id) {
   28c9e:	d115      	bne.n	28ccc <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   28ca0:	f100 0190 	add.w	r1, r0, #144	; 0x90
   28ca4:	2207      	movs	r2, #7
   28ca6:	4628      	mov	r0, r5
   28ca8:	f7ff fc63 	bl	28572 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   28cac:	b180      	cbz	r0, 28cd0 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   28cae:	78e3      	ldrb	r3, [r4, #3]
   28cb0:	2207      	movs	r2, #7
   28cb2:	b943      	cbnz	r3, 28cc6 <bt_conn_is_peer_addr_le+0x32>
   28cb4:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   28cb8:	4628      	mov	r0, r5
   28cba:	f7ff fc5a 	bl	28572 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   28cbe:	fab0 f080 	clz	r0, r0
   28cc2:	0940      	lsrs	r0, r0, #5
}
   28cc4:	bd38      	pop	{r3, r4, r5, pc}
   28cc6:	f104 0197 	add.w	r1, r4, #151	; 0x97
   28cca:	e7f5      	b.n	28cb8 <bt_conn_is_peer_addr_le+0x24>
		return false;
   28ccc:	2000      	movs	r0, #0
   28cce:	e7f9      	b.n	28cc4 <bt_conn_is_peer_addr_le+0x30>
		return true;
   28cd0:	2001      	movs	r0, #1
   28cd2:	e7f7      	b.n	28cc4 <bt_conn_is_peer_addr_le+0x30>

00028cd4 <bt_conn_ref>:
{
   28cd4:	4603      	mov	r3, r0
   28cd6:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   28cd8:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
   28cdc:	4610      	mov	r0, r2
   28cde:	f7ff ff10 	bl	28b02 <atomic_get>
		if (!old) {
   28ce2:	b160      	cbz	r0, 28cfe <bt_conn_ref+0x2a>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   28ce4:	1c41      	adds	r1, r0, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   28ce6:	e8d2 4fef 	ldaex	r4, [r2]
   28cea:	4284      	cmp	r4, r0
   28cec:	d104      	bne.n	28cf8 <bt_conn_ref+0x24>
   28cee:	e8c2 1fec 	stlex	ip, r1, [r2]
   28cf2:	f1bc 0f00 	cmp.w	ip, #0
   28cf6:	d1f6      	bne.n	28ce6 <bt_conn_ref+0x12>
   28cf8:	d1f0      	bne.n	28cdc <bt_conn_ref+0x8>
}
   28cfa:	4618      	mov	r0, r3
   28cfc:	bd10      	pop	{r4, pc}
			return NULL;
   28cfe:	4603      	mov	r3, r0
   28d00:	e7fb      	b.n	28cfa <bt_conn_ref+0x26>

00028d02 <conn_lookup_handle>:
{
   28d02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28d06:	4607      	mov	r7, r0
   28d08:	460e      	mov	r6, r1
   28d0a:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   28d0c:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   28d0e:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   28d12:	42b4      	cmp	r4, r6
   28d14:	d103      	bne.n	28d1e <conn_lookup_handle+0x1c>
	return NULL;
   28d16:	2300      	movs	r3, #0
}
   28d18:	4618      	mov	r0, r3
   28d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   28d1e:	fb09 7004 	mla	r0, r9, r4, r7
   28d22:	f7ff ffd7 	bl	28cd4 <bt_conn_ref>
   28d26:	4603      	mov	r3, r0
		if (!conn) {
   28d28:	b158      	cbz	r0, 28d42 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   28d2a:	7b45      	ldrb	r5, [r0, #13]
   28d2c:	2d01      	cmp	r5, #1
   28d2e:	d002      	beq.n	28d36 <conn_lookup_handle+0x34>
   28d30:	3d07      	subs	r5, #7
   28d32:	2d01      	cmp	r5, #1
   28d34:	d803      	bhi.n	28d3e <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   28d36:	881a      	ldrh	r2, [r3, #0]
   28d38:	4542      	cmp	r2, r8
   28d3a:	d0ed      	beq.n	28d18 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   28d3c:	4618      	mov	r0, r3
   28d3e:	f7f1 f815 	bl	19d6c <bt_conn_unref>
	for (i = 0; i < size; i++) {
   28d42:	3401      	adds	r4, #1
   28d44:	e7e5      	b.n	28d12 <conn_lookup_handle+0x10>

00028d46 <bt_conn_get_dst>:
}
   28d46:	3090      	adds	r0, #144	; 0x90
   28d48:	4770      	bx	lr

00028d4a <bt_conn_disconnect>:
{
   28d4a:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   28d4c:	7883      	ldrb	r3, [r0, #2]
{
   28d4e:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   28d50:	2b01      	cmp	r3, #1
{
   28d52:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   28d54:	d103      	bne.n	28d5e <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   28d56:	2100      	movs	r1, #0
   28d58:	3090      	adds	r0, #144	; 0x90
   28d5a:	f7f1 fa4b 	bl	1a1f4 <bt_le_set_auto_conn>
	switch (conn->state) {
   28d5e:	7b63      	ldrb	r3, [r4, #13]
   28d60:	3b02      	subs	r3, #2
   28d62:	2b06      	cmp	r3, #6
   28d64:	d805      	bhi.n	28d72 <bt_conn_disconnect+0x28>
   28d66:	e8df f003 	tbb	[pc, r3]
   28d6a:	0408      	.short	0x0408
   28d6c:	1a120404 	.word	0x1a120404
   28d70:	10          	.byte	0x10
   28d71:	00          	.byte	0x00
   28d72:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   28d76:	4628      	mov	r0, r5
   28d78:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   28d7a:	4620      	mov	r0, r4
   28d7c:	2100      	movs	r1, #0
		conn->err = reason;
   28d7e:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   28d80:	f7f1 f826 	bl	19dd0 <bt_conn_set_state>
			bt_le_scan_update(false);
   28d84:	2000      	movs	r0, #0
   28d86:	f7f0 f8dd 	bl	18f44 <bt_le_scan_update>
		return 0;
   28d8a:	2500      	movs	r5, #0
   28d8c:	e7f3      	b.n	28d76 <bt_conn_disconnect+0x2c>
			k_work_cancel_delayable(&conn->deferred_work);
   28d8e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   28d92:	f7fb f885 	bl	23ea0 <k_work_cancel_delayable>
}
   28d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   28d9a:	f7ee bf45 	b.w	17c28 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   28d9e:	4629      	mov	r1, r5
   28da0:	8820      	ldrh	r0, [r4, #0]
   28da2:	f7ff fd3b 	bl	2881c <bt_hci_disconnect>
	if (err) {
   28da6:	4605      	mov	r5, r0
   28da8:	2800      	cmp	r0, #0
   28daa:	d1e4      	bne.n	28d76 <bt_conn_disconnect+0x2c>
	if (conn->state == BT_CONN_CONNECTED) {
   28dac:	7b63      	ldrb	r3, [r4, #13]
   28dae:	2b07      	cmp	r3, #7
   28db0:	d1e1      	bne.n	28d76 <bt_conn_disconnect+0x2c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   28db2:	2108      	movs	r1, #8
   28db4:	4620      	mov	r0, r4
   28db6:	f7f1 f80b 	bl	19dd0 <bt_conn_set_state>
   28dba:	e7dc      	b.n	28d76 <bt_conn_disconnect+0x2c>

00028dbc <bt_conn_le_conn_update>:
{
   28dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28dbe:	4607      	mov	r7, r0
   28dc0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   28dc2:	f242 0013 	movw	r0, #8211	; 0x2013
   28dc6:	210e      	movs	r1, #14
   28dc8:	f7ee fdd8 	bl	1797c <bt_hci_cmd_create>
	if (!buf) {
   28dcc:	4606      	mov	r6, r0
   28dce:	b1d0      	cbz	r0, 28e06 <bt_conn_le_conn_update+0x4a>
   28dd0:	210e      	movs	r1, #14
   28dd2:	3008      	adds	r0, #8
   28dd4:	f7f7 fa98 	bl	20308 <net_buf_simple_add>
   28dd8:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   28dda:	220e      	movs	r2, #14
   28ddc:	2100      	movs	r1, #0
   28dde:	f7ff fc03 	bl	285e8 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   28de2:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   28de4:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   28de6:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   28de8:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   28dea:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   28dec:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   28dee:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   28df0:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   28df4:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   28df6:	88ab      	ldrh	r3, [r5, #4]
   28df8:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   28dfa:	88eb      	ldrh	r3, [r5, #6]
   28dfc:	8123      	strh	r3, [r4, #8]
}
   28dfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   28e02:	f7ee be03 	b.w	17a0c <bt_hci_cmd_send_sync>
}
   28e06:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028e0c <l2cap_connected>:
}
   28e0c:	4770      	bx	lr

00028e0e <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   28e0e:	3010      	adds	r0, #16
   28e10:	f7fb b846 	b.w	23ea0 <k_work_cancel_delayable>

00028e14 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28e14:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   28e16:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28e18:	b17b      	cbz	r3, 28e3a <bt_l2cap_chan_remove+0x26>
   28e1a:	2200      	movs	r2, #0
   28e1c:	3b08      	subs	r3, #8
   28e1e:	b163      	cbz	r3, 28e3a <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   28e20:	428b      	cmp	r3, r1
   28e22:	f103 0408 	add.w	r4, r3, #8
   28e26:	d10f      	bne.n	28e48 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   28e28:	688b      	ldr	r3, [r1, #8]
   28e2a:	b93a      	cbnz	r2, 28e3c <bt_l2cap_chan_remove+0x28>
   28e2c:	6d82      	ldr	r2, [r0, #88]	; 0x58
	list->head = node;
   28e2e:	6543      	str	r3, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   28e30:	4294      	cmp	r4, r2
   28e32:	d100      	bne.n	28e36 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   28e34:	6583      	str	r3, [r0, #88]	; 0x58
	parent->next = child;
   28e36:	2300      	movs	r3, #0
   28e38:	608b      	str	r3, [r1, #8]
}
   28e3a:	bd10      	pop	{r4, pc}
   28e3c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   28e3e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   28e40:	429c      	cmp	r4, r3
	list->tail = node;
   28e42:	bf08      	it	eq
   28e44:	6582      	streq	r2, [r0, #88]	; 0x58
}
   28e46:	e7f6      	b.n	28e36 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28e48:	2c00      	cmp	r4, #0
   28e4a:	d0f6      	beq.n	28e3a <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28e4c:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28e4e:	2b00      	cmp	r3, #0
   28e50:	d0f3      	beq.n	28e3a <bt_l2cap_chan_remove+0x26>
   28e52:	4622      	mov	r2, r4
   28e54:	3b08      	subs	r3, #8
   28e56:	e7e2      	b.n	28e1e <bt_l2cap_chan_remove+0xa>

00028e58 <bt_l2cap_chan_del>:
{
   28e58:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   28e5a:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   28e5e:	4604      	mov	r4, r0
	if (!chan->conn) {
   28e60:	b123      	cbz	r3, 28e6c <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   28e62:	686b      	ldr	r3, [r5, #4]
   28e64:	b103      	cbz	r3, 28e68 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   28e66:	4798      	blx	r3
	chan->conn = NULL;
   28e68:	2300      	movs	r3, #0
   28e6a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   28e6c:	68e3      	ldr	r3, [r4, #12]
   28e6e:	b10b      	cbz	r3, 28e74 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   28e70:	4620      	mov	r0, r4
   28e72:	4798      	blx	r3
	if (ops->released) {
   28e74:	69eb      	ldr	r3, [r5, #28]
   28e76:	b11b      	cbz	r3, 28e80 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   28e78:	4620      	mov	r0, r4
}
   28e7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   28e7e:	4718      	bx	r3
}
   28e80:	bd70      	pop	{r4, r5, r6, pc}

00028e82 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28e82:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   28e84:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28e86:	b18b      	cbz	r3, 28eac <bt_l2cap_disconnected+0x2a>
   28e88:	f1b3 0008 	subs.w	r0, r3, #8
   28e8c:	d00e      	beq.n	28eac <bt_l2cap_disconnected+0x2a>
   28e8e:	681c      	ldr	r4, [r3, #0]
   28e90:	b104      	cbz	r4, 28e94 <bt_l2cap_disconnected+0x12>
   28e92:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   28e94:	f7ff ffe0 	bl	28e58 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28e98:	b144      	cbz	r4, 28eac <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28e9a:	f114 0308 	adds.w	r3, r4, #8
   28e9e:	d002      	beq.n	28ea6 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28ea0:	68a3      	ldr	r3, [r4, #8]
   28ea2:	b103      	cbz	r3, 28ea6 <bt_l2cap_disconnected+0x24>
   28ea4:	3b08      	subs	r3, #8
{
   28ea6:	4620      	mov	r0, r4
   28ea8:	461c      	mov	r4, r3
   28eaa:	e7f3      	b.n	28e94 <bt_l2cap_disconnected+0x12>
}
   28eac:	bd10      	pop	{r4, pc}

00028eae <bt_l2cap_security_changed>:
{
   28eae:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28eb0:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   28eb2:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28eb4:	b1a3      	cbz	r3, 28ee0 <bt_l2cap_security_changed+0x32>
   28eb6:	f1b3 0008 	subs.w	r0, r3, #8
   28eba:	d011      	beq.n	28ee0 <bt_l2cap_security_changed+0x32>
   28ebc:	681c      	ldr	r4, [r3, #0]
   28ebe:	b104      	cbz	r4, 28ec2 <bt_l2cap_security_changed+0x14>
   28ec0:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   28ec2:	6843      	ldr	r3, [r0, #4]
   28ec4:	689b      	ldr	r3, [r3, #8]
   28ec6:	b10b      	cbz	r3, 28ecc <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   28ec8:	4629      	mov	r1, r5
   28eca:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28ecc:	b144      	cbz	r4, 28ee0 <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28ece:	f114 0308 	adds.w	r3, r4, #8
   28ed2:	d002      	beq.n	28eda <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28ed4:	68a3      	ldr	r3, [r4, #8]
   28ed6:	b103      	cbz	r3, 28eda <bt_l2cap_security_changed+0x2c>
   28ed8:	3b08      	subs	r3, #8
{
   28eda:	4620      	mov	r0, r4
   28edc:	461c      	mov	r4, r3
   28ede:	e7f0      	b.n	28ec2 <bt_l2cap_security_changed+0x14>
}
   28ee0:	bd38      	pop	{r3, r4, r5, pc}

00028ee2 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   28ee2:	3104      	adds	r1, #4
   28ee4:	f7f1 ba66 	b.w	1a3b4 <bt_conn_create_pdu_timeout>

00028ee8 <bt_l2cap_send_cb>:
{
   28ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28eec:	4614      	mov	r4, r2
   28eee:	4605      	mov	r5, r0
   28ef0:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   28ef2:	f102 0008 	add.w	r0, r2, #8
   28ef6:	2104      	movs	r1, #4
   28ef8:	461e      	mov	r6, r3
   28efa:	f8dd 8018 	ldr.w	r8, [sp, #24]
   28efe:	f7f7 f99f 	bl	20240 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   28f02:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   28f04:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   28f06:	3a04      	subs	r2, #4
   28f08:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   28f0a:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   28f0c:	4632      	mov	r2, r6
   28f0e:	4621      	mov	r1, r4
   28f10:	4628      	mov	r0, r5
}
   28f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   28f16:	f7f0 be61 	b.w	19bdc <bt_conn_send_cb>

00028f1a <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   28f1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28f1c:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   28f1e:	2202      	movs	r2, #2
   28f20:	2001      	movs	r0, #1
   28f22:	f7f1 fbd3 	bl	1a6cc <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   28f26:	4604      	mov	r4, r0
   28f28:	b198      	cbz	r0, 28f52 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   28f2a:	2102      	movs	r1, #2
   28f2c:	3008      	adds	r0, #8
   28f2e:	f7f7 f9eb 	bl	20308 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   28f32:	2300      	movs	r3, #0
   28f34:	4622      	mov	r2, r4
   28f36:	7003      	strb	r3, [r0, #0]
   28f38:	7043      	strb	r3, [r0, #1]
   28f3a:	2105      	movs	r1, #5
   28f3c:	4628      	mov	r0, r5
   28f3e:	9300      	str	r3, [sp, #0]
   28f40:	f7ff ffd2 	bl	28ee8 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   28f44:	b128      	cbz	r0, 28f52 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   28f46:	4620      	mov	r0, r4
}
   28f48:	b003      	add	sp, #12
   28f4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   28f4e:	f7f7 b8ab 	b.w	200a8 <net_buf_unref>
}
   28f52:	b003      	add	sp, #12
   28f54:	bd30      	pop	{r4, r5, pc}

00028f56 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28f56:	6d40      	ldr	r0, [r0, #84]	; 0x54
   28f58:	b160      	cbz	r0, 28f74 <bt_l2cap_le_lookup_tx_cid+0x1e>
   28f5a:	3808      	subs	r0, #8
   28f5c:	b900      	cbnz	r0, 28f60 <bt_l2cap_le_lookup_tx_cid+0xa>
   28f5e:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   28f60:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
   28f64:	428b      	cmp	r3, r1
   28f66:	d005      	beq.n	28f74 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28f68:	f110 0308 	adds.w	r3, r0, #8
   28f6c:	d001      	beq.n	28f72 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28f6e:	6880      	ldr	r0, [r0, #8]
   28f70:	e7f2      	b.n	28f58 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   28f72:	4618      	mov	r0, r3
}
   28f74:	4770      	bx	lr

00028f76 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28f76:	6d40      	ldr	r0, [r0, #84]	; 0x54
   28f78:	b160      	cbz	r0, 28f94 <bt_l2cap_le_lookup_rx_cid+0x1e>
   28f7a:	3808      	subs	r0, #8
   28f7c:	b900      	cbnz	r0, 28f80 <bt_l2cap_le_lookup_rx_cid+0xa>
   28f7e:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   28f80:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   28f84:	428b      	cmp	r3, r1
   28f86:	d005      	beq.n	28f94 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28f88:	f110 0308 	adds.w	r3, r0, #8
   28f8c:	d001      	beq.n	28f92 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28f8e:	6880      	ldr	r0, [r0, #8]
   28f90:	e7f2      	b.n	28f78 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   28f92:	4618      	mov	r0, r3
}
   28f94:	4770      	bx	lr

00028f96 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   28f96:	4770      	bx	lr

00028f98 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   28f98:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   28f9a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   28f9c:	b128      	cbz	r0, 28faa <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28f9e:	6859      	ldr	r1, [r3, #4]
   28fa0:	6802      	ldr	r2, [r0, #0]
   28fa2:	4288      	cmp	r0, r1
	list->head = node;
   28fa4:	601a      	str	r2, [r3, #0]
	list->tail = node;
   28fa6:	bf08      	it	eq
   28fa8:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   28faa:	4770      	bx	lr

00028fac <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28fac:	2200      	movs	r2, #0
   28fae:	4603      	mov	r3, r0
   28fb0:	6800      	ldr	r0, [r0, #0]
   28fb2:	b900      	cbnz	r0, 28fb6 <sys_slist_find_and_remove+0xa>
   28fb4:	4770      	bx	lr
   28fb6:	4288      	cmp	r0, r1
   28fb8:	d110      	bne.n	28fdc <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   28fba:	6808      	ldr	r0, [r1, #0]
   28fbc:	b942      	cbnz	r2, 28fd0 <sys_slist_find_and_remove+0x24>
   28fbe:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   28fc0:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   28fc2:	4291      	cmp	r1, r2
   28fc4:	d100      	bne.n	28fc8 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   28fc6:	6058      	str	r0, [r3, #4]
	parent->next = child;
   28fc8:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28fca:	2001      	movs	r0, #1
	parent->next = child;
   28fcc:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   28fce:	4770      	bx	lr
	parent->next = child;
   28fd0:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   28fd2:	6858      	ldr	r0, [r3, #4]
   28fd4:	4281      	cmp	r1, r0
	list->tail = node;
   28fd6:	bf08      	it	eq
   28fd8:	605a      	streq	r2, [r3, #4]
}
   28fda:	e7f5      	b.n	28fc8 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28fdc:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28fde:	6800      	ldr	r0, [r0, #0]
   28fe0:	e7e7      	b.n	28fb2 <sys_slist_find_and_remove+0x6>

00028fe2 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   28fe2:	4603      	mov	r3, r0
	size_t bytes = 0;
   28fe4:	2000      	movs	r0, #0

	while (buf) {
   28fe6:	b903      	cbnz	r3, 28fea <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   28fe8:	4770      	bx	lr
		bytes += buf->len;
   28fea:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   28fec:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   28fee:	4410      	add	r0, r2
		buf = buf->frags;
   28ff0:	e7f9      	b.n	28fe6 <net_buf_frags_len+0x4>

00028ff2 <att_sent>:
	if (chan->ops->sent) {
   28ff2:	684b      	ldr	r3, [r1, #4]
{
   28ff4:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   28ff6:	695b      	ldr	r3, [r3, #20]
   28ff8:	b103      	cbz	r3, 28ffc <att_sent+0xa>
		chan->ops->sent(chan);
   28ffa:	4718      	bx	r3
}
   28ffc:	4770      	bx	lr

00028ffe <attr_read_type_cb>:
{
   28ffe:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   29000:	68d4      	ldr	r4, [r2, #12]
   29002:	3102      	adds	r1, #2
   29004:	7823      	ldrb	r3, [r4, #0]
   29006:	b913      	cbnz	r3, 2900e <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   29008:	7021      	strb	r1, [r4, #0]
	return true;
   2900a:	2001      	movs	r0, #1
   2900c:	e006      	b.n	2901c <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2900e:	428b      	cmp	r3, r1
   29010:	d0fb      	beq.n	2900a <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   29012:	8983      	ldrh	r3, [r0, #12]
   29014:	3b02      	subs	r3, #2
   29016:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   29018:	2000      	movs	r0, #0
   2901a:	6110      	str	r0, [r2, #16]
}
   2901c:	bd10      	pop	{r4, pc}

0002901e <att_prepare_write_req>:
}
   2901e:	2006      	movs	r0, #6
   29020:	4770      	bx	lr

00029022 <att_op_get_type>:
	switch (op) {
   29022:	281e      	cmp	r0, #30
   29024:	d816      	bhi.n	29054 <att_op_get_type+0x32>
   29026:	b308      	cbz	r0, 2906c <att_op_get_type+0x4a>
   29028:	1e43      	subs	r3, r0, #1
   2902a:	2b1d      	cmp	r3, #29
   2902c:	d81e      	bhi.n	2906c <att_op_get_type+0x4a>
   2902e:	e8df f003 	tbb	[pc, r3]
   29032:	2317      	.short	0x2317
   29034:	23172317 	.word	0x23172317
   29038:	23172317 	.word	0x23172317
   2903c:	23172317 	.word	0x23172317
   29040:	23172317 	.word	0x23172317
   29044:	231d1d17 	.word	0x231d1d17
   29048:	1d172317 	.word	0x1d172317
   2904c:	0f1b1d19 	.word	0x0f1b1d19
   29050:	2004      	movs	r0, #4
   29052:	4770      	bx	lr
   29054:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   29058:	2b52      	cmp	r3, #82	; 0x52
   2905a:	d107      	bne.n	2906c <att_op_get_type+0x4a>
		return ATT_COMMAND;
   2905c:	2000      	movs	r0, #0
}
   2905e:	4770      	bx	lr
		return ATT_RESPONSE;
   29060:	2002      	movs	r0, #2
   29062:	4770      	bx	lr
		return ATT_NOTIFICATION;
   29064:	2003      	movs	r0, #3
   29066:	4770      	bx	lr
		return ATT_INDICATION;
   29068:	2005      	movs	r0, #5
   2906a:	4770      	bx	lr
		return ATT_COMMAND;
   2906c:	f010 0f40 	tst.w	r0, #64	; 0x40
   29070:	bf0c      	ite	eq
   29072:	2006      	moveq	r0, #6
   29074:	2000      	movne	r0, #0
   29076:	4770      	bx	lr
		return ATT_REQUEST;
   29078:	2001      	movs	r0, #1
   2907a:	4770      	bx	lr

0002907c <att_notify_mult>:
{
   2907c:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   2907e:	6803      	ldr	r3, [r0, #0]
   29080:	898a      	ldrh	r2, [r1, #12]
   29082:	6818      	ldr	r0, [r3, #0]
   29084:	6889      	ldr	r1, [r1, #8]
   29086:	f7f4 fdad 	bl	1dbe4 <bt_gatt_mult_notification>
}
   2908a:	2000      	movs	r0, #0
   2908c:	bd08      	pop	{r3, pc}

0002908e <att_notify>:
{
   2908e:	b538      	push	{r3, r4, r5, lr}
   29090:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   29092:	f101 0008 	add.w	r0, r1, #8
   29096:	460c      	mov	r4, r1
   29098:	f001 fad5 	bl	2a646 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   2909c:	682d      	ldr	r5, [r5, #0]
   2909e:	4601      	mov	r1, r0
   290a0:	89a3      	ldrh	r3, [r4, #12]
   290a2:	6828      	ldr	r0, [r5, #0]
   290a4:	68a2      	ldr	r2, [r4, #8]
   290a6:	f000 fe82 	bl	29dae <bt_gatt_notification>
}
   290aa:	2000      	movs	r0, #0
   290ac:	bd38      	pop	{r3, r4, r5, pc}

000290ae <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   290ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   290b0:	e9cd 2301 	strd	r2, r3, [sp, #4]
   290b4:	2300      	movs	r3, #0
   290b6:	461a      	mov	r2, r3
   290b8:	9300      	str	r3, [sp, #0]
   290ba:	f7f3 fb7b 	bl	1c7b4 <bt_gatt_foreach_attr_type>
				  user_data);
}
   290be:	b005      	add	sp, #20
   290c0:	f85d fb04 	ldr.w	pc, [sp], #4

000290c4 <att_chan_read>:
{
   290c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   290c8:	4680      	mov	r8, r0
   290ca:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   290cc:	4610      	mov	r0, r2
{
   290ce:	4699      	mov	r9, r3
   290d0:	468b      	mov	fp, r1
   290d2:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   290d4:	f7ff ff85 	bl	28fe2 <net_buf_frags_len>
   290d8:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
   290dc:	4283      	cmp	r3, r0
   290de:	d97a      	bls.n	291d6 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   290e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
	frag = net_buf_frag_last(buf);
   290e4:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   290e6:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   290e8:	f7f7 f83e 	bl	20168 <net_buf_frag_last>
	size_t len, total = 0;
   290ec:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   290f0:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   290f2:	4630      	mov	r0, r6
   290f4:	f7ff ff75 	bl	28fe2 <net_buf_frags_len>
   290f8:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   290fc:	f105 0708 	add.w	r7, r5, #8
   29100:	1a24      	subs	r4, r4, r0
   29102:	4638      	mov	r0, r7
   29104:	f001 faab 	bl	2a65e <net_buf_simple_tailroom>
   29108:	4284      	cmp	r4, r0
   2910a:	d211      	bcs.n	29130 <att_chan_read+0x6c>
   2910c:	4630      	mov	r0, r6
   2910e:	f7ff ff68 	bl	28fe2 <net_buf_frags_len>
   29112:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   29116:	1a24      	subs	r4, r4, r0
		if (!len) {
   29118:	bb34      	cbnz	r4, 29168 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2911a:	79b0      	ldrb	r0, [r6, #6]
   2911c:	f7f6 fe24 	bl	1fd68 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   29120:	2200      	movs	r2, #0
   29122:	2300      	movs	r3, #0
   29124:	f001 fa75 	bl	2a612 <net_buf_alloc_fixed>
			if (!frag) {
   29128:	4605      	mov	r5, r0
   2912a:	b930      	cbnz	r0, 2913a <att_chan_read+0x76>
	return total;
   2912c:	4657      	mov	r7, sl
   2912e:	e02c      	b.n	2918a <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   29130:	4638      	mov	r0, r7
   29132:	f001 fa94 	bl	2a65e <net_buf_simple_tailroom>
   29136:	4604      	mov	r4, r0
   29138:	e7ee      	b.n	29118 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2913a:	4601      	mov	r1, r0
   2913c:	4630      	mov	r0, r6
   2913e:	f7f7 f85b 	bl	201f8 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   29142:	4630      	mov	r0, r6
   29144:	f7ff ff4d 	bl	28fe2 <net_buf_frags_len>
   29148:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   2914c:	f105 0708 	add.w	r7, r5, #8
   29150:	1a24      	subs	r4, r4, r0
   29152:	4638      	mov	r0, r7
   29154:	f001 fa83 	bl	2a65e <net_buf_simple_tailroom>
   29158:	4284      	cmp	r4, r0
   2915a:	d21a      	bcs.n	29192 <att_chan_read+0xce>
   2915c:	4630      	mov	r0, r6
   2915e:	f7ff ff40 	bl	28fe2 <net_buf_frags_len>
   29162:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   29166:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   29168:	68a9      	ldr	r1, [r5, #8]
   2916a:	89aa      	ldrh	r2, [r5, #12]
   2916c:	f8db 7004 	ldr.w	r7, [fp, #4]
   29170:	440a      	add	r2, r1
   29172:	9803      	ldr	r0, [sp, #12]
   29174:	4659      	mov	r1, fp
   29176:	f8cd 9000 	str.w	r9, [sp]
   2917a:	b2a3      	uxth	r3, r4
   2917c:	47b8      	blx	r7
		if (read < 0) {
   2917e:	1e07      	subs	r7, r0, #0
   29180:	da0c      	bge.n	2919c <att_chan_read+0xd8>
				return total;
   29182:	f1ba 0f00 	cmp.w	sl, #0
   29186:	bf18      	it	ne
   29188:	4657      	movne	r7, sl
}
   2918a:	4638      	mov	r0, r7
   2918c:	b005      	add	sp, #20
   2918e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29192:	4638      	mov	r0, r7
   29194:	f001 fa63 	bl	2a65e <net_buf_simple_tailroom>
   29198:	4604      	mov	r4, r0
   2919a:	e7e5      	b.n	29168 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2919c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2919e:	b993      	cbnz	r3, 291c6 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   291a0:	4639      	mov	r1, r7
   291a2:	f105 0008 	add.w	r0, r5, #8
   291a6:	f7f7 f8af 	bl	20308 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   291aa:	4630      	mov	r0, r6
   291ac:	f7ff ff19 	bl	28fe2 <net_buf_frags_len>
   291b0:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
		offset += read;
   291b4:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   291b6:	4283      	cmp	r3, r0
		total += read;
   291b8:	44ba      	add	sl, r7
		offset += read;
   291ba:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   291be:	d9b5      	bls.n	2912c <att_chan_read+0x68>
   291c0:	42a7      	cmp	r7, r4
   291c2:	d096      	beq.n	290f2 <att_chan_read+0x2e>
   291c4:	e7b2      	b.n	2912c <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   291c6:	4639      	mov	r1, r7
   291c8:	4628      	mov	r0, r5
   291ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   291cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   291ce:	4798      	blx	r3
   291d0:	2800      	cmp	r0, #0
   291d2:	d1e5      	bne.n	291a0 <att_chan_read+0xdc>
   291d4:	e7aa      	b.n	2912c <att_chan_read+0x68>
		return 0;
   291d6:	2700      	movs	r7, #0
   291d8:	e7d7      	b.n	2918a <att_chan_read+0xc6>

000291da <find_info_cb>:
{
   291da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   291dc:	6893      	ldr	r3, [r2, #8]
{
   291de:	4605      	mov	r5, r0
   291e0:	460e      	mov	r6, r1
   291e2:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   291e4:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   291e6:	b963      	cbnz	r3, 29202 <find_info_cb+0x28>
   291e8:	6850      	ldr	r0, [r2, #4]
   291ea:	2101      	movs	r1, #1
   291ec:	3008      	adds	r0, #8
   291ee:	f7f7 f88b 	bl	20308 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   291f2:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   291f4:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   291f6:	781b      	ldrb	r3, [r3, #0]
   291f8:	2b00      	cmp	r3, #0
   291fa:	bf0c      	ite	eq
   291fc:	2301      	moveq	r3, #1
   291fe:	2302      	movne	r3, #2
   29200:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   29202:	68a3      	ldr	r3, [r4, #8]
   29204:	781b      	ldrb	r3, [r3, #0]
   29206:	2b01      	cmp	r3, #1
   29208:	d003      	beq.n	29212 <find_info_cb+0x38>
   2920a:	2b02      	cmp	r3, #2
   2920c:	d019      	beq.n	29242 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   2920e:	2000      	movs	r0, #0
   29210:	e016      	b.n	29240 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   29212:	682b      	ldr	r3, [r5, #0]
   29214:	781b      	ldrb	r3, [r3, #0]
   29216:	2b00      	cmp	r3, #0
   29218:	d1f9      	bne.n	2920e <find_info_cb+0x34>
   2921a:	6860      	ldr	r0, [r4, #4]
   2921c:	2104      	movs	r1, #4
   2921e:	3008      	adds	r0, #8
   29220:	f7f7 f872 	bl	20308 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   29224:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   29226:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   29228:	885b      	ldrh	r3, [r3, #2]
		data->info16->handle = sys_cpu_to_le16(handle);
   2922a:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2922c:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2922e:	6863      	ldr	r3, [r4, #4]
   29230:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   29234:	899b      	ldrh	r3, [r3, #12]
   29236:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   29238:	2804      	cmp	r0, #4
   2923a:	bf94      	ite	ls
   2923c:	2000      	movls	r0, #0
   2923e:	2001      	movhi	r0, #1
}
   29240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   29242:	682b      	ldr	r3, [r5, #0]
   29244:	781b      	ldrb	r3, [r3, #0]
   29246:	2b02      	cmp	r3, #2
   29248:	d1e1      	bne.n	2920e <find_info_cb+0x34>
   2924a:	6860      	ldr	r0, [r4, #4]
   2924c:	2112      	movs	r1, #18
   2924e:	3008      	adds	r0, #8
   29250:	f7f7 f85a 	bl	20308 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   29254:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   29256:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   29258:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   2925a:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2925e:	3101      	adds	r1, #1
   29260:	f7ff f997 	bl	28592 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   29264:	6863      	ldr	r3, [r4, #4]
   29266:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   2926a:	899b      	ldrh	r3, [r3, #12]
   2926c:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2926e:	2812      	cmp	r0, #18
   29270:	e7e3      	b.n	2923a <find_info_cb+0x60>

00029272 <attr_read_group_cb>:
	if (!data->rsp->len) {
   29272:	68d0      	ldr	r0, [r2, #12]
   29274:	3104      	adds	r1, #4
   29276:	7803      	ldrb	r3, [r0, #0]
   29278:	b913      	cbnz	r3, 29280 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2927a:	7001      	strb	r1, [r0, #0]
	return true;
   2927c:	2001      	movs	r0, #1
}
   2927e:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   29280:	428b      	cmp	r3, r1
   29282:	d0fb      	beq.n	2927c <attr_read_group_cb+0xa>
		data->group = NULL;
   29284:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   29286:	6891      	ldr	r1, [r2, #8]
   29288:	898b      	ldrh	r3, [r1, #12]
   2928a:	3b04      	subs	r3, #4
   2928c:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2928e:	6110      	str	r0, [r2, #16]
		return false;
   29290:	4770      	bx	lr

00029292 <chan_req_send>:
{
   29292:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   29294:	688e      	ldr	r6, [r1, #8]
{
   29296:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   29298:	4630      	mov	r0, r6
{
   2929a:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2929c:	f7ff fea1 	bl	28fe2 <net_buf_frags_len>
   292a0:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
   292a4:	4283      	cmp	r3, r0
   292a6:	d30a      	bcc.n	292be <chan_req_send+0x2c>
	req->buf = NULL;
   292a8:	2200      	movs	r2, #0
	chan->req = req;
   292aa:	f8c5 10fc 	str.w	r1, [r5, #252]	; 0xfc
	err = chan_send(chan, buf, NULL);
   292ae:	4628      	mov	r0, r5
	req->buf = NULL;
   292b0:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   292b2:	4631      	mov	r1, r6
   292b4:	f7f1 fd5e 	bl	1ad74 <chan_send>
	if (err) {
   292b8:	b100      	cbz	r0, 292bc <chan_req_send+0x2a>
		req->buf = buf;
   292ba:	60a6      	str	r6, [r4, #8]
}
   292bc:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   292be:	f06f 0079 	mvn.w	r0, #121	; 0x79
   292c2:	e7fb      	b.n	292bc <chan_req_send+0x2a>

000292c4 <process_queue>:
{
   292c4:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   292c6:	2200      	movs	r2, #0
{
   292c8:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   292ca:	2300      	movs	r3, #0
   292cc:	4608      	mov	r0, r1
{
   292ce:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   292d0:	f7f6 fe58 	bl	1ff84 <net_buf_get>
	if (buf) {
   292d4:	4605      	mov	r5, r0
   292d6:	b160      	cbz	r0, 292f2 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   292d8:	4601      	mov	r1, r0
   292da:	2200      	movs	r2, #0
   292dc:	4620      	mov	r0, r4
   292de:	f7f1 fd49 	bl	1ad74 <chan_send>
		if (err) {
   292e2:	4604      	mov	r4, r0
   292e4:	b118      	cbz	r0, 292ee <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   292e6:	4629      	mov	r1, r5
   292e8:	4630      	mov	r0, r6
   292ea:	f002 fb72 	bl	2b9d2 <k_queue_prepend>
}
   292ee:	4620      	mov	r0, r4
   292f0:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   292f2:	f06f 0401 	mvn.w	r4, #1
   292f6:	e7fa      	b.n	292ee <process_queue+0x2a>

000292f8 <bt_att_chan_send_rsp>:
{
   292f8:	b538      	push	{r3, r4, r5, lr}
   292fa:	4604      	mov	r4, r0
   292fc:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   292fe:	f7f1 fd39 	bl	1ad74 <chan_send>
	if (err) {
   29302:	b130      	cbz	r0, 29312 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   29304:	4629      	mov	r1, r5
   29306:	f504 7080 	add.w	r0, r4, #256	; 0x100
}
   2930a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2930e:	f7f6 be97 	b.w	20040 <net_buf_put>
}
   29312:	bd38      	pop	{r3, r4, r5, pc}

00029314 <chan_req_sent>:
	if (chan->req) {
   29314:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   29318:	b133      	cbz	r3, 29328 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2931a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2931e:	2300      	movs	r3, #0
   29320:	f500 7090 	add.w	r0, r0, #288	; 0x120
   29324:	f7fa bdb6 	b.w	23e94 <k_work_reschedule>
}
   29328:	4770      	bx	lr

0002932a <att_exec_write_req>:
   2932a:	2006      	movs	r0, #6
   2932c:	4770      	bx	lr

0002932e <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2932e:	30f8      	adds	r0, #248	; 0xf8
   29330:	e8d0 3fef 	ldaex	r3, [r0]
   29334:	f023 0301 	bic.w	r3, r3, #1
   29338:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2933c:	2a00      	cmp	r2, #0
   2933e:	d1f7      	bne.n	29330 <chan_rsp_sent+0x2>
}
   29340:	4770      	bx	lr

00029342 <chan_cfm_sent>:
   29342:	30f8      	adds	r0, #248	; 0xf8
   29344:	e8d0 3fef 	ldaex	r3, [r0]
   29348:	f023 0302 	bic.w	r3, r3, #2
   2934c:	e8c0 3fe2 	stlex	r2, r3, [r0]
   29350:	2a00      	cmp	r2, #0
   29352:	d1f7      	bne.n	29344 <chan_cfm_sent+0x2>
}
   29354:	4770      	bx	lr

00029356 <bt_att_status>:
{
   29356:	b538      	push	{r3, r4, r5, lr}
   29358:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2935a:	e8d1 3faf 	lda	r3, [r1]
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2935e:	07db      	lsls	r3, r3, #31
   29360:	d519      	bpl.n	29396 <bt_att_status+0x40>
	if (!chan->att) {
   29362:	f850 0c08 	ldr.w	r0, [r0, #-8]
   29366:	b1b0      	cbz	r0, 29396 <bt_att_status+0x40>
	if (chan->req) {
   29368:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   2936c:	b99b      	cbnz	r3, 29396 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   2936e:	3004      	adds	r0, #4
   29370:	f7ff fe12 	bl	28f98 <sys_slist_get>
	if (!node) {
   29374:	4604      	mov	r4, r0
   29376:	b170      	cbz	r0, 29396 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   29378:	4601      	mov	r1, r0
   2937a:	f1a5 0008 	sub.w	r0, r5, #8
   2937e:	f7f1 fd67 	bl	1ae50 <bt_att_chan_req_send>
   29382:	2800      	cmp	r0, #0
   29384:	da07      	bge.n	29396 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   29386:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   2938a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2938c:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2938e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   29390:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   29392:	b902      	cbnz	r2, 29396 <bt_att_status+0x40>
	list->tail = node;
   29394:	609c      	str	r4, [r3, #8]
}
   29396:	bd38      	pop	{r3, r4, r5, pc}

00029398 <att_req_send_process>:
{
   29398:	b570      	push	{r4, r5, r6, lr}
   2939a:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   2939c:	3004      	adds	r0, #4
   2939e:	f7ff fdfb 	bl	28f98 <sys_slist_get>
	if (!node) {
   293a2:	4606      	mov	r6, r0
   293a4:	b1c0      	cbz	r0, 293d8 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   293a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   293a8:	b153      	cbz	r3, 293c0 <att_req_send_process+0x28>
   293aa:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   293ae:	d007      	beq.n	293c0 <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   293b0:	681c      	ldr	r4, [r3, #0]
   293b2:	b10c      	cbz	r4, 293b8 <att_req_send_process+0x20>
   293b4:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
		if (!chan->req) {
   293b8:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   293bc:	b13b      	cbz	r3, 293ce <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   293be:	b964      	cbnz	r4, 293da <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   293c0:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   293c2:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   293c4:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   293c6:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   293c8:	b933      	cbnz	r3, 293d8 <att_req_send_process+0x40>
	list->tail = node;
   293ca:	60ae      	str	r6, [r5, #8]
}
   293cc:	e004      	b.n	293d8 <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   293ce:	4631      	mov	r1, r6
   293d0:	f7f1 fd3e 	bl	1ae50 <bt_att_chan_req_send>
   293d4:	2800      	cmp	r0, #0
   293d6:	dbf2      	blt.n	293be <att_req_send_process+0x26>
}
   293d8:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   293da:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   293de:	d004      	beq.n	293ea <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   293e0:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   293e4:	b10b      	cbz	r3, 293ea <att_req_send_process+0x52>
   293e6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   293ea:	4620      	mov	r0, r4
   293ec:	461c      	mov	r4, r3
   293ee:	e7e3      	b.n	293b8 <att_req_send_process+0x20>

000293f0 <write_cb>:
{
   293f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   293f2:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   293f4:	4601      	mov	r1, r0
{
   293f6:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   293f8:	222a      	movs	r2, #42	; 0x2a
   293fa:	6820      	ldr	r0, [r4, #0]
   293fc:	f000 fc44 	bl	29c88 <bt_gatt_check_perm>
   29400:	4605      	mov	r5, r0
   29402:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   29404:	bb00      	cbnz	r0, 29448 <write_cb+0x58>
	if (!data->req) {
   29406:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   29408:	4631      	mov	r1, r6
	if (!data->req) {
   2940a:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2940c:	bf14      	ite	ne
   2940e:	2300      	movne	r3, #0
   29410:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   29412:	9301      	str	r3, [sp, #4]
   29414:	8a63      	ldrh	r3, [r4, #18]
   29416:	68b7      	ldr	r7, [r6, #8]
   29418:	9300      	str	r3, [sp, #0]
   2941a:	68e2      	ldr	r2, [r4, #12]
   2941c:	8a23      	ldrh	r3, [r4, #16]
   2941e:	6820      	ldr	r0, [r4, #0]
   29420:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   29422:	1e03      	subs	r3, r0, #0
   29424:	db05      	blt.n	29432 <write_cb+0x42>
   29426:	8a22      	ldrh	r2, [r4, #16]
   29428:	4293      	cmp	r3, r2
   2942a:	d10b      	bne.n	29444 <write_cb+0x54>
	data->err = 0U;
   2942c:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2942e:	2501      	movs	r5, #1
   29430:	e005      	b.n	2943e <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   29432:	f113 0fff 	cmn.w	r3, #255	; 0xff
   29436:	d305      	bcc.n	29444 <write_cb+0x54>
		return -err;
   29438:	425b      	negs	r3, r3
   2943a:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   2943c:	7523      	strb	r3, [r4, #20]
}
   2943e:	4628      	mov	r0, r5
   29440:	b003      	add	sp, #12
   29442:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   29444:	230e      	movs	r3, #14
   29446:	e7f9      	b.n	2943c <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   29448:	2500      	movs	r5, #0
   2944a:	e7f8      	b.n	2943e <write_cb+0x4e>

0002944c <bt_att_sent>:
{
   2944c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   2944e:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
{
   29452:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   29454:	f850 4c08 	ldr.w	r4, [r0, #-8]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   29458:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   2945c:	b10b      	cbz	r3, 29462 <bt_att_sent+0x16>
		chan->sent(chan);
   2945e:	4638      	mov	r0, r7
   29460:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29462:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
   29466:	e8d3 2fef 	ldaex	r2, [r3]
   2946a:	f022 0210 	bic.w	r2, r2, #16
   2946e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   29472:	2900      	cmp	r1, #0
   29474:	d1f7      	bne.n	29466 <bt_att_sent+0x1a>
	if (!att) {
   29476:	b30c      	cbz	r4, 294bc <bt_att_sent+0x70>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   29478:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   2947c:	b98b      	cbnz	r3, 294a2 <bt_att_sent+0x56>
   2947e:	6863      	ldr	r3, [r4, #4]
   29480:	b17b      	cbz	r3, 294a2 <bt_att_sent+0x56>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   29482:	1d20      	adds	r0, r4, #4
   29484:	f7ff fd88 	bl	28f98 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   29488:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2948a:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2948c:	4638      	mov	r0, r7
   2948e:	f7ff ff00 	bl	29292 <chan_req_send>
   29492:	2800      	cmp	r0, #0
   29494:	da12      	bge.n	294bc <bt_att_sent+0x70>
Z_GENLIST_PREPEND(slist, snode)
   29496:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   29498:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2949a:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2949c:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2949e:	b903      	cbnz	r3, 294a2 <bt_att_sent+0x56>
	list->tail = node;
   294a0:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   294a2:	4638      	mov	r0, r7
   294a4:	f105 01f8 	add.w	r1, r5, #248	; 0xf8
   294a8:	f7ff ff0c 	bl	292c4 <process_queue>
	if (!err) {
   294ac:	b130      	cbz	r0, 294bc <bt_att_sent+0x70>
	(void)process_queue(chan, &att->tx_queue);
   294ae:	4638      	mov	r0, r7
   294b0:	f104 010c 	add.w	r1, r4, #12
}
   294b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   294b8:	f7ff bf04 	b.w	292c4 <process_queue>
}
   294bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000294be <read_cb>:
{
   294be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   294c2:	4606      	mov	r6, r0
	data->err = 0x00;
   294c4:	2700      	movs	r7, #0
	struct bt_att_chan *chan = data->chan;
   294c6:	f8d2 8000 	ldr.w	r8, [r2]
{
   294ca:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   294cc:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   294d0:	4631      	mov	r1, r6
	data->err = 0x00;
   294d2:	7317      	strb	r7, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   294d4:	2215      	movs	r2, #21
   294d6:	f000 fbd7 	bl	29c88 <bt_gatt_check_perm>
   294da:	4604      	mov	r4, r0
   294dc:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   294de:	b9a0      	cbnz	r0, 2950a <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   294e0:	e9cd 0000 	strd	r0, r0, [sp]
   294e4:	88ab      	ldrh	r3, [r5, #4]
   294e6:	4631      	mov	r1, r6
   294e8:	4640      	mov	r0, r8
   294ea:	68aa      	ldr	r2, [r5, #8]
   294ec:	f7ff fdea 	bl	290c4 <att_chan_read>
	if (ret < 0) {
   294f0:	1e03      	subs	r3, r0, #0
   294f2:	da0c      	bge.n	2950e <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   294f4:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   294f8:	bf32      	itee	cc
   294fa:	230e      	movcc	r3, #14
		return -err;
   294fc:	425b      	negcs	r3, r3
   294fe:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(ret);
   29500:	732b      	strb	r3, [r5, #12]
}
   29502:	4620      	mov	r0, r4
   29504:	b002      	add	sp, #8
   29506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   2950a:	463c      	mov	r4, r7
   2950c:	e7f9      	b.n	29502 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   2950e:	2401      	movs	r4, #1
   29510:	e7f7      	b.n	29502 <read_cb+0x44>

00029512 <att_read_blob_req>:
{
   29512:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   29514:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   29516:	210c      	movs	r1, #12
   29518:	8813      	ldrh	r3, [r2, #0]
   2951a:	8852      	ldrh	r2, [r2, #2]
   2951c:	9200      	str	r2, [sp, #0]
   2951e:	220d      	movs	r2, #13
   29520:	f7f2 f892 	bl	1b648 <att_read_rsp>
}
   29524:	b003      	add	sp, #12
   29526:	f85d fb04 	ldr.w	pc, [sp], #4

0002952a <att_read_req>:
{
   2952a:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2952c:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   2952e:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   29530:	210a      	movs	r1, #10
   29532:	881b      	ldrh	r3, [r3, #0]
   29534:	9200      	str	r2, [sp, #0]
   29536:	220b      	movs	r2, #11
   29538:	f7f2 f886 	bl	1b648 <att_read_rsp>
}
   2953c:	b003      	add	sp, #12
   2953e:	f85d fb04 	ldr.w	pc, [sp], #4

00029542 <bt_att_init>:
	bt_gatt_init();
   29542:	f7f3 b885 	b.w	1c650 <bt_gatt_init>

00029546 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29546:	898a      	ldrh	r2, [r1, #12]
   29548:	2300      	movs	r3, #0
   2954a:	6889      	ldr	r1, [r1, #8]
   2954c:	f7f2 ba30 	b.w	1b9b0 <att_handle_rsp>

00029550 <att_handle_find_type_rsp>:
   29550:	f7ff bff9 	b.w	29546 <att_handle_find_info_rsp>

00029554 <att_handle_read_type_rsp>:
   29554:	f7ff bff7 	b.w	29546 <att_handle_find_info_rsp>

00029558 <att_handle_read_rsp>:
   29558:	f7ff bff5 	b.w	29546 <att_handle_find_info_rsp>

0002955c <att_handle_read_blob_rsp>:
   2955c:	f7ff bff3 	b.w	29546 <att_handle_find_info_rsp>

00029560 <att_handle_read_mult_rsp>:
   29560:	f7ff bff1 	b.w	29546 <att_handle_find_info_rsp>

00029564 <att_handle_read_group_rsp>:
   29564:	f7ff bfef 	b.w	29546 <att_handle_find_info_rsp>

00029568 <att_handle_write_rsp>:
   29568:	f7ff bfed 	b.w	29546 <att_handle_find_info_rsp>

0002956c <att_handle_prepare_write_rsp>:
   2956c:	f7ff bfeb 	b.w	29546 <att_handle_find_info_rsp>

00029570 <att_handle_exec_write_rsp>:
   29570:	f7ff bfe9 	b.w	29546 <att_handle_find_info_rsp>

00029574 <att_confirm>:
   29574:	f7ff bfe7 	b.w	29546 <att_handle_find_info_rsp>

00029578 <att_mtu_rsp>:
{
   29578:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   2957a:	6889      	ldr	r1, [r1, #8]
{
   2957c:	b410      	push	{r4}
	mtu = sys_le16_to_cpu(rsp->mtu);
   2957e:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   29580:	2b16      	cmp	r3, #22
   29582:	d805      	bhi.n	29590 <att_mtu_rsp+0x18>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   29584:	2200      	movs	r2, #0
   29586:	2304      	movs	r3, #4
   29588:	4611      	mov	r1, r2
}
   2958a:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2958c:	f7f2 ba10 	b.w	1b9b0 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   29590:	2b41      	cmp	r3, #65	; 0x41
   29592:	bf28      	it	cs
   29594:	2341      	movcs	r3, #65	; 0x41
	return att_handle_rsp(chan, rsp, buf->len, 0);
   29596:	8992      	ldrh	r2, [r2, #12]
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   29598:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2959c:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
	return att_handle_rsp(chan, rsp, buf->len, 0);
   295a0:	2300      	movs	r3, #0
   295a2:	e7f2      	b.n	2958a <att_mtu_rsp+0x12>

000295a4 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   295a4:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   295a8:	b570      	push	{r4, r5, r6, lr}
   295aa:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   295ac:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   295b0:	2b00      	cmp	r3, #0
   295b2:	d037      	beq.n	29624 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   295b4:	b171      	cbz	r1, 295d4 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   295b6:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   295ba:	2b00      	cmp	r3, #0
   295bc:	d032      	beq.n	29624 <bt_att_encrypt_change+0x80>
   295be:	7c1b      	ldrb	r3, [r3, #16]
   295c0:	07da      	lsls	r2, r3, #31
   295c2:	d52f      	bpl.n	29624 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   295c4:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   295c6:	2200      	movs	r2, #0
   295c8:	4630      	mov	r0, r6
}
   295ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   295ce:	4611      	mov	r1, r2
   295d0:	f7f2 b9ee 	b.w	1b9b0 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   295d4:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   295d6:	4628      	mov	r0, r5
   295d8:	f7f4 fbba 	bl	1dd50 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   295dc:	7a6b      	ldrb	r3, [r5, #9]
   295de:	2b01      	cmp	r3, #1
   295e0:	d020      	beq.n	29624 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   295e2:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
   295e6:	b1ec      	cbz	r4, 29624 <bt_att_encrypt_change+0x80>
   295e8:	7c23      	ldrb	r3, [r4, #16]
   295ea:	07db      	lsls	r3, r3, #31
   295ec:	d51a      	bpl.n	29624 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   295ee:	68e3      	ldr	r3, [r4, #12]
   295f0:	2b00      	cmp	r3, #0
   295f2:	d0e7      	beq.n	295c4 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   295f4:	4630      	mov	r0, r6
   295f6:	6962      	ldr	r2, [r4, #20]
   295f8:	7c61      	ldrb	r1, [r4, #17]
   295fa:	f7f1 fd9b 	bl	1b134 <bt_att_chan_create_pdu>
	if (!buf) {
   295fe:	4605      	mov	r5, r0
   29600:	b140      	cbz	r0, 29614 <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   29602:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   29606:	68e3      	ldr	r3, [r4, #12]
   29608:	4798      	blx	r3
   2960a:	4602      	mov	r2, r0
   2960c:	b120      	cbz	r0, 29618 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   2960e:	4628      	mov	r0, r5
   29610:	f7f6 fd4a 	bl	200a8 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   29614:	230e      	movs	r3, #14
   29616:	e7d6      	b.n	295c6 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   29618:	4629      	mov	r1, r5
   2961a:	4630      	mov	r0, r6
   2961c:	f7f1 fbaa 	bl	1ad74 <chan_send>
   29620:	2800      	cmp	r0, #0
   29622:	d1f4      	bne.n	2960e <bt_att_encrypt_change+0x6a>
}
   29624:	bd70      	pop	{r4, r5, r6, pc}

00029626 <gatt_ccc_changed>:
{
   29626:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   29628:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2962a:	895a      	ldrh	r2, [r3, #10]
   2962c:	428a      	cmp	r2, r1
   2962e:	d003      	beq.n	29638 <gatt_ccc_changed+0x12>
		ccc->value = value;
   29630:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   29632:	68db      	ldr	r3, [r3, #12]
   29634:	b103      	cbz	r3, 29638 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   29636:	4718      	bx	r3
}
   29638:	4770      	bx	lr

0002963a <gatt_indicate_rsp>:
{
   2963a:	b510      	push	{r4, lr}
   2963c:	9c02      	ldr	r4, [sp, #8]
   2963e:	460a      	mov	r2, r1
	if (params->func) {
   29640:	68a3      	ldr	r3, [r4, #8]
   29642:	b10b      	cbz	r3, 29648 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   29644:	4621      	mov	r1, r4
   29646:	4798      	blx	r3
	params->_ref--;
   29648:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2964a:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2964c:	3b01      	subs	r3, #1
   2964e:	b2db      	uxtb	r3, r3
   29650:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   29652:	b122      	cbz	r2, 2965e <gatt_indicate_rsp+0x24>
   29654:	b91b      	cbnz	r3, 2965e <gatt_indicate_rsp+0x24>
		params->destroy(params);
   29656:	4620      	mov	r0, r4
}
   29658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2965c:	4710      	bx	r2
}
   2965e:	bd10      	pop	{r4, pc}

00029660 <match_uuid>:
	data->attr = attr;
   29660:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   29662:	8091      	strh	r1, [r2, #4]
}
   29664:	2000      	movs	r0, #0
   29666:	4770      	bx	lr

00029668 <gatt_mtu_rsp>:
{
   29668:	9a00      	ldr	r2, [sp, #0]
	params->func(conn, err, params);
   2966a:	6813      	ldr	r3, [r2, #0]
   2966c:	4718      	bx	r3

0002966e <ccc_set_cb>:
}
   2966e:	2000      	movs	r0, #0
   29670:	4770      	bx	lr

00029672 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29672:	e8d0 0faf 	lda	r0, [r0]
}
   29676:	4770      	bx	lr

00029678 <gen_hash_m>:
{
   29678:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2967a:	6807      	ldr	r7, [r0, #0]
{
   2967c:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2967e:	783d      	ldrb	r5, [r7, #0]
{
   29680:	4614      	mov	r4, r2
   29682:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   29684:	b10d      	cbz	r5, 2968a <gen_hash_m+0x12>
	switch (u16->val) {
   29686:	2501      	movs	r5, #1
   29688:	e014      	b.n	296b4 <gen_hash_m+0x3c>
   2968a:	887b      	ldrh	r3, [r7, #2]
   2968c:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   29690:	d004      	beq.n	2969c <gen_hash_m+0x24>
   29692:	d812      	bhi.n	296ba <gen_hash_m+0x42>
   29694:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   29698:	2b03      	cmp	r3, #3
   2969a:	d8f4      	bhi.n	29686 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2969c:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   296a0:	2202      	movs	r2, #2
   296a2:	4620      	mov	r0, r4
   296a4:	f10d 010e 	add.w	r1, sp, #14
   296a8:	f7fe fbac 	bl	27e04 <tc_cmac_update>
   296ac:	b9e0      	cbnz	r0, 296e8 <gen_hash_m+0x70>
			state->err = -EINVAL;
   296ae:	f06f 0315 	mvn.w	r3, #21
   296b2:	65a3      	str	r3, [r4, #88]	; 0x58
}
   296b4:	4628      	mov	r0, r5
   296b6:	b009      	add	sp, #36	; 0x24
   296b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   296ba:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   296be:	33ff      	adds	r3, #255	; 0xff
   296c0:	b29b      	uxth	r3, r3
   296c2:	2b04      	cmp	r3, #4
   296c4:	d8df      	bhi.n	29686 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   296c6:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   296ca:	2202      	movs	r2, #2
   296cc:	4620      	mov	r0, r4
   296ce:	f10d 010e 	add.w	r1, sp, #14
   296d2:	f7fe fb97 	bl	27e04 <tc_cmac_update>
   296d6:	2800      	cmp	r0, #0
   296d8:	d0e9      	beq.n	296ae <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   296da:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   296dc:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   296de:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   296e2:	f10d 010e 	add.w	r1, sp, #14
   296e6:	e017      	b.n	29718 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   296e8:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   296ea:	2202      	movs	r2, #2
   296ec:	4620      	mov	r0, r4
   296ee:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
   296f2:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   296f6:	f7fe fb85 	bl	27e04 <tc_cmac_update>
   296fa:	2800      	cmp	r0, #0
   296fc:	d0d7      	beq.n	296ae <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   296fe:	2000      	movs	r0, #0
   29700:	2310      	movs	r3, #16
   29702:	4631      	mov	r1, r6
   29704:	eb0d 0203 	add.w	r2, sp, r3
   29708:	6877      	ldr	r7, [r6, #4]
   2970a:	9000      	str	r0, [sp, #0]
   2970c:	47b8      	blx	r7
		if (len < 0) {
   2970e:	1e02      	subs	r2, r0, #0
   29710:	da01      	bge.n	29716 <gen_hash_m+0x9e>
			state->err = len;
   29712:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   29714:	e7ce      	b.n	296b4 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   29716:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29718:	4620      	mov	r0, r4
   2971a:	f7fe fb73 	bl	27e04 <tc_cmac_update>
   2971e:	2800      	cmp	r0, #0
   29720:	d1b1      	bne.n	29686 <gen_hash_m+0xe>
   29722:	e7c4      	b.n	296ae <gen_hash_m+0x36>

00029724 <atomic_or>:
{
   29724:	4603      	mov	r3, r0
}
   29726:	e8d3 0fef 	ldaex	r0, [r3]
   2972a:	ea40 0201 	orr.w	r2, r0, r1
   2972e:	e8c3 2fec 	stlex	ip, r2, [r3]
   29732:	f1bc 0f00 	cmp.w	ip, #0
   29736:	d1f6      	bne.n	29726 <atomic_or+0x2>
   29738:	4770      	bx	lr

0002973a <bt_addr_le_cmp>:
   2973a:	2207      	movs	r2, #7
   2973c:	f7fe bf19 	b.w	28572 <memcmp>

00029740 <find_ccc_cfg>:
{
   29740:	b513      	push	{r0, r1, r4, lr}
   29742:	1c4a      	adds	r2, r1, #1
   29744:	460c      	mov	r4, r1
		if (conn) {
   29746:	b140      	cbz	r0, 2975a <find_ccc_cfg+0x1a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   29748:	7809      	ldrb	r1, [r1, #0]
   2974a:	f7ff faa3 	bl	28c94 <bt_conn_is_peer_addr_le>
   2974e:	2800      	cmp	r0, #0
	return NULL;
   29750:	bf08      	it	eq
   29752:	2400      	moveq	r4, #0
}
   29754:	4620      	mov	r0, r4
   29756:	b002      	add	sp, #8
   29758:	bd10      	pop	{r4, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2975a:	9000      	str	r0, [sp, #0]
   2975c:	4669      	mov	r1, sp
   2975e:	f8cd 0003 	str.w	r0, [sp, #3]
   29762:	4610      	mov	r0, r2
   29764:	f7ff ffe9 	bl	2973a <bt_addr_le_cmp>
   29768:	2800      	cmp	r0, #0
	return NULL;
   2976a:	bf18      	it	ne
   2976c:	2400      	movne	r4, #0
   2976e:	e7f1      	b.n	29754 <find_ccc_cfg+0x14>

00029770 <ccc_find_cfg>:
{
   29770:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   29772:	7803      	ldrb	r3, [r0, #0]
{
   29774:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   29776:	4293      	cmp	r3, r2
   29778:	d001      	beq.n	2977e <ccc_find_cfg+0xe>
	return NULL;
   2977a:	2000      	movs	r0, #0
}
   2977c:	bd10      	pop	{r4, pc}
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   2977e:	3001      	adds	r0, #1
   29780:	f7ff ffdb 	bl	2973a <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   29784:	2800      	cmp	r0, #0
   29786:	d1f8      	bne.n	2977a <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   29788:	4620      	mov	r0, r4
   2978a:	e7f7      	b.n	2977c <ccc_find_cfg+0xc>

0002978c <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2978c:	2207      	movs	r2, #7
   2978e:	f7fe bf00 	b.w	28592 <memcpy>

00029792 <clear_ccc_cfg>:
{
   29792:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   29794:	2500      	movs	r5, #0
{
   29796:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   29798:	4669      	mov	r1, sp
   2979a:	3001      	adds	r0, #1
   2979c:	9500      	str	r5, [sp, #0]
   2979e:	f8cd 5003 	str.w	r5, [sp, #3]
   297a2:	f7ff fff3 	bl	2978c <bt_addr_le_copy>
	cfg->id = 0U;
   297a6:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   297a8:	8125      	strh	r5, [r4, #8]
}
   297aa:	b003      	add	sp, #12
   297ac:	bd30      	pop	{r4, r5, pc}

000297ae <atomic_and>:
{
   297ae:	4603      	mov	r3, r0
}
   297b0:	e8d3 0fef 	ldaex	r0, [r3]
   297b4:	ea00 0201 	and.w	r2, r0, r1
   297b8:	e8c3 2fec 	stlex	ip, r2, [r3]
   297bc:	f1bc 0f00 	cmp.w	ip, #0
   297c0:	d1f6      	bne.n	297b0 <atomic_and+0x2>
   297c2:	4770      	bx	lr

000297c4 <gatt_exchange_mtu_encode>:
{
   297c4:	b508      	push	{r3, lr}
   297c6:	2102      	movs	r1, #2
   297c8:	3008      	adds	r0, #8
   297ca:	f7f6 fd9d 	bl	20308 <net_buf_simple_add>
	req->mtu = sys_cpu_to_le16(mtu);
   297ce:	2241      	movs	r2, #65	; 0x41
   297d0:	4603      	mov	r3, r0
   297d2:	2000      	movs	r0, #0
   297d4:	701a      	strb	r2, [r3, #0]
   297d6:	7058      	strb	r0, [r3, #1]
}
   297d8:	bd08      	pop	{r3, pc}

000297da <read_included_uuid_encode>:
{
   297da:	b510      	push	{r4, lr}
   297dc:	4614      	mov	r4, r2
   297de:	2102      	movs	r1, #2
   297e0:	3008      	adds	r0, #8
   297e2:	f7f6 fd91 	bl	20308 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   297e6:	8963      	ldrh	r3, [r4, #10]
   297e8:	8003      	strh	r3, [r0, #0]
}
   297ea:	2000      	movs	r0, #0
   297ec:	bd10      	pop	{r4, pc}

000297ee <gatt_find_info_encode>:
{
   297ee:	b510      	push	{r4, lr}
   297f0:	4614      	mov	r4, r2
   297f2:	2104      	movs	r1, #4
   297f4:	3008      	adds	r0, #8
   297f6:	f7f6 fd87 	bl	20308 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   297fa:	8923      	ldrh	r3, [r4, #8]
   297fc:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   297fe:	89e3      	ldrh	r3, [r4, #14]
   29800:	8043      	strh	r3, [r0, #2]
}
   29802:	2000      	movs	r0, #0
   29804:	bd10      	pop	{r4, pc}

00029806 <gatt_read_group_encode>:
{
   29806:	b538      	push	{r3, r4, r5, lr}
   29808:	4615      	mov	r5, r2
   2980a:	f100 0408 	add.w	r4, r0, #8
   2980e:	2104      	movs	r1, #4
   29810:	4620      	mov	r0, r4
   29812:	f7f6 fd79 	bl	20308 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   29816:	892b      	ldrh	r3, [r5, #8]
   29818:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2981a:	89eb      	ldrh	r3, [r5, #14]
   2981c:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2981e:	7c2b      	ldrb	r3, [r5, #16]
   29820:	b933      	cbnz	r3, 29830 <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   29822:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   29826:	4620      	mov	r0, r4
   29828:	f000 ff34 	bl	2a694 <net_buf_simple_add_le16>
}
   2982c:	2000      	movs	r0, #0
   2982e:	bd38      	pop	{r3, r4, r5, pc}
   29830:	f642 0101 	movw	r1, #10241	; 0x2801
   29834:	e7f7      	b.n	29826 <gatt_read_group_encode+0x20>

00029836 <gatt_read_type_encode>:
{
   29836:	b538      	push	{r3, r4, r5, lr}
   29838:	4615      	mov	r5, r2
	return net_buf_simple_add(&buf->b, len);
   2983a:	f100 0408 	add.w	r4, r0, #8
   2983e:	2104      	movs	r1, #4
   29840:	4620      	mov	r0, r4
   29842:	f7f6 fd61 	bl	20308 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   29846:	892b      	ldrh	r3, [r5, #8]
   29848:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2984a:	89eb      	ldrh	r3, [r5, #14]
   2984c:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   2984e:	7c2b      	ldrb	r3, [r5, #16]
   29850:	2b02      	cmp	r3, #2
   29852:	d004      	beq.n	2985e <gatt_read_type_encode+0x28>
   29854:	2b03      	cmp	r3, #3
   29856:	d009      	beq.n	2986c <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   29858:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2985a:	8859      	ldrh	r1, [r3, #2]
   2985c:	e001      	b.n	29862 <gatt_read_type_encode+0x2c>
   2985e:	f642 0102 	movw	r1, #10242	; 0x2802
   29862:	4620      	mov	r0, r4
   29864:	f000 ff16 	bl	2a694 <net_buf_simple_add_le16>
}
   29868:	2000      	movs	r0, #0
   2986a:	bd38      	pop	{r3, r4, r5, pc}
   2986c:	f642 0103 	movw	r1, #10243	; 0x2803
   29870:	e7f7      	b.n	29862 <gatt_read_type_encode+0x2c>

00029872 <gatt_sub_remove.part.0>:
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   29872:	2300      	movs	r3, #0
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   29874:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   29876:	3001      	adds	r0, #1
   29878:	4669      	mov	r1, sp
   2987a:	9300      	str	r3, [sp, #0]
   2987c:	f8cd 3003 	str.w	r3, [sp, #3]
   29880:	f7ff ff84 	bl	2978c <bt_addr_le_copy>
}
   29884:	b003      	add	sp, #12
   29886:	f85d fb04 	ldr.w	pc, [sp], #4

0002988a <gatt_find_type_encode>:
{
   2988a:	b538      	push	{r3, r4, r5, lr}
   2988c:	4614      	mov	r4, r2
	return net_buf_simple_add(&buf->b, len);
   2988e:	f100 0508 	add.w	r5, r0, #8
   29892:	2106      	movs	r1, #6
   29894:	4628      	mov	r0, r5
   29896:	f7f6 fd37 	bl	20308 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2989a:	8923      	ldrh	r3, [r4, #8]
	switch (params->uuid->type) {
   2989c:	6821      	ldr	r1, [r4, #0]
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2989e:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   298a0:	89e3      	ldrh	r3, [r4, #14]
   298a2:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   298a4:	7c23      	ldrb	r3, [r4, #16]
   298a6:	2b00      	cmp	r3, #0
	req->type = sys_cpu_to_le16(uuid_val);
   298a8:	f642 0301 	movw	r3, #10241	; 0x2801
   298ac:	bf08      	it	eq
   298ae:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   298b2:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   298b4:	780b      	ldrb	r3, [r1, #0]
   298b6:	b11b      	cbz	r3, 298c0 <gatt_find_type_encode+0x36>
   298b8:	2b02      	cmp	r3, #2
   298ba:	d006      	beq.n	298ca <gatt_find_type_encode+0x40>
}
   298bc:	2000      	movs	r0, #0
   298be:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   298c0:	4628      	mov	r0, r5
   298c2:	8849      	ldrh	r1, [r1, #2]
   298c4:	f000 fee6 	bl	2a694 <net_buf_simple_add_le16>
}
   298c8:	e7f8      	b.n	298bc <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   298ca:	2210      	movs	r2, #16
   298cc:	4628      	mov	r0, r5
   298ce:	3101      	adds	r1, #1
   298d0:	f000 fecd 	bl	2a66e <net_buf_simple_add_mem>
   298d4:	e7f2      	b.n	298bc <gatt_find_type_encode+0x32>

000298d6 <clear_cf_cfg>:
{
   298d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   298d8:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   298da:	2500      	movs	r5, #0
   298dc:	4669      	mov	r1, sp
   298de:	3001      	adds	r0, #1
   298e0:	9500      	str	r5, [sp, #0]
   298e2:	f8cd 5003 	str.w	r5, [sp, #3]
   298e6:	f7ff ff51 	bl	2978c <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   298ea:	f104 0008 	add.w	r0, r4, #8
   298ee:	2201      	movs	r2, #1
   298f0:	4629      	mov	r1, r5
   298f2:	f7fe fe79 	bl	285e8 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   298f6:	340c      	adds	r4, #12
   298f8:	e8d4 3fef 	ldaex	r3, [r4]
   298fc:	e8c4 5fe2 	stlex	r2, r5, [r4]
   29900:	2a00      	cmp	r2, #0
   29902:	d1f9      	bne.n	298f8 <clear_cf_cfg+0x22>
}
   29904:	b003      	add	sp, #12
   29906:	bd30      	pop	{r4, r5, pc}

00029908 <gatt_write_ccc_buf>:
{
   29908:	b538      	push	{r3, r4, r5, lr}
   2990a:	4614      	mov	r4, r2
	return net_buf_simple_add(&buf->b, len);
   2990c:	f100 0508 	add.w	r5, r0, #8
   29910:	2102      	movs	r1, #2
   29912:	4628      	mov	r0, r5
   29914:	f7f6 fcf8 	bl	20308 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   29918:	8963      	ldrh	r3, [r4, #10]
	net_buf_simple_add_le16(&buf->b, val);
   2991a:	89a1      	ldrh	r1, [r4, #12]
   2991c:	8003      	strh	r3, [r0, #0]
   2991e:	4628      	mov	r0, r5
   29920:	f000 feb8 	bl	2a694 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   29924:	2104      	movs	r1, #4
   29926:	f104 0010 	add.w	r0, r4, #16
   2992a:	f7ff fefb 	bl	29724 <atomic_or>
}
   2992e:	2000      	movs	r0, #0
   29930:	bd38      	pop	{r3, r4, r5, pc}

00029932 <sc_restore_rsp>:
{
   29932:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   29934:	f7f2 fa42 	bl	1bdbc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   29938:	b140      	cbz	r0, 2994c <sc_restore_rsp+0x1a>
   2993a:	7a03      	ldrb	r3, [r0, #8]
   2993c:	07db      	lsls	r3, r3, #31
   2993e:	d505      	bpl.n	2994c <sc_restore_rsp+0x1a>
}
   29940:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   29944:	2101      	movs	r1, #1
   29946:	300c      	adds	r0, #12
   29948:	f7ff beec 	b.w	29724 <atomic_or>
   2994c:	bd08      	pop	{r3, pc}

0002994e <read_appearance>:
{
   2994e:	b513      	push	{r0, r1, r4, lr}
   29950:	4610      	mov	r0, r2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   29952:	2200      	movs	r2, #0
{
   29954:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   29958:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2995c:	2902      	cmp	r1, #2
   2995e:	d80d      	bhi.n	2997c <read_appearance+0x2e>
	len = MIN(buf_len, value_len - offset);
   29960:	f1c1 0402 	rsb	r4, r1, #2
   29964:	429c      	cmp	r4, r3
   29966:	bfa8      	it	ge
   29968:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2996a:	f10d 0306 	add.w	r3, sp, #6
   2996e:	4622      	mov	r2, r4
   29970:	4419      	add	r1, r3
   29972:	f7fe fe0e 	bl	28592 <memcpy>
}
   29976:	4620      	mov	r0, r4
   29978:	b002      	add	sp, #8
   2997a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2997c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   29980:	e7f9      	b.n	29976 <read_appearance+0x28>

00029982 <read_name>:
{
   29982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29986:	4698      	mov	r8, r3
   29988:	4615      	mov	r5, r2
   2998a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   2998e:	f7ee feed 	bl	1876c <bt_get_name>
   29992:	4607      	mov	r7, r0
				 strlen(name));
   29994:	f7fe fdc2 	bl	2851c <strlen>
	if (offset > value_len) {
   29998:	b283      	uxth	r3, r0
   2999a:	42b3      	cmp	r3, r6
   2999c:	d30c      	bcc.n	299b8 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   2999e:	1b9c      	subs	r4, r3, r6
   299a0:	4544      	cmp	r4, r8
   299a2:	bfa8      	it	ge
   299a4:	4644      	movge	r4, r8
   299a6:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   299a8:	4622      	mov	r2, r4
   299aa:	4628      	mov	r0, r5
   299ac:	19b9      	adds	r1, r7, r6
   299ae:	f7fe fdf0 	bl	28592 <memcpy>
}
   299b2:	4620      	mov	r0, r4
   299b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   299b8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   299bc:	e7f9      	b.n	299b2 <read_name+0x30>

000299be <bt_gatt_attr_read_ccc>:
{
   299be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   299c0:	68c9      	ldr	r1, [r1, #12]
{
   299c2:	4615      	mov	r5, r2
   299c4:	461f      	mov	r7, r3
   299c6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   299ca:	f7ff feb9 	bl	29740 <find_ccc_cfg>
	if (cfg) {
   299ce:	b100      	cbz	r0, 299d2 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   299d0:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   299d2:	2e02      	cmp	r6, #2
   299d4:	f8ad 0006 	strh.w	r0, [sp, #6]
   299d8:	d80e      	bhi.n	299f8 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   299da:	f1c6 0402 	rsb	r4, r6, #2
   299de:	42bc      	cmp	r4, r7
   299e0:	bfa8      	it	ge
   299e2:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   299e4:	f10d 0306 	add.w	r3, sp, #6
   299e8:	4622      	mov	r2, r4
   299ea:	4628      	mov	r0, r5
   299ec:	1999      	adds	r1, r3, r6
   299ee:	f7fe fdd0 	bl	28592 <memcpy>
}
   299f2:	4620      	mov	r0, r4
   299f4:	b003      	add	sp, #12
   299f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   299f8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   299fc:	e7f9      	b.n	299f2 <bt_gatt_attr_read_ccc+0x34>

000299fe <cf_read>:
{
   299fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29a00:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   29a02:	2300      	movs	r3, #0
{
   29a04:	4615      	mov	r5, r2
   29a06:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   29a0a:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   29a0e:	f7f2 f9d5 	bl	1bdbc <find_cf_cfg>
	if (cfg) {
   29a12:	b128      	cbz	r0, 29a20 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   29a14:	f100 0108 	add.w	r1, r0, #8
   29a18:	2201      	movs	r2, #1
   29a1a:	a801      	add	r0, sp, #4
   29a1c:	f7fe fdb9 	bl	28592 <memcpy>
	if (offset > value_len) {
   29a20:	2e01      	cmp	r6, #1
   29a22:	d80d      	bhi.n	29a40 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   29a24:	f1c6 0401 	rsb	r4, r6, #1
   29a28:	42bc      	cmp	r4, r7
   29a2a:	bfa8      	it	ge
   29a2c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   29a2e:	ab01      	add	r3, sp, #4
   29a30:	4622      	mov	r2, r4
   29a32:	4628      	mov	r0, r5
   29a34:	1999      	adds	r1, r3, r6
   29a36:	f7fe fdac 	bl	28592 <memcpy>
}
   29a3a:	4620      	mov	r0, r4
   29a3c:	b003      	add	sp, #12
   29a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29a40:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   29a44:	e7f9      	b.n	29a3a <cf_read+0x3c>

00029a46 <bt_gatt_attr_read_service>:
{
   29a46:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   29a48:	68c9      	ldr	r1, [r1, #12]
{
   29a4a:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   29a4c:	780b      	ldrb	r3, [r1, #0]
{
   29a4e:	4610      	mov	r0, r2
   29a50:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   29a54:	b993      	cbnz	r3, 29a7c <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   29a56:	884b      	ldrh	r3, [r1, #2]
	if (offset > value_len) {
   29a58:	2d02      	cmp	r5, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   29a5a:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   29a5e:	d819      	bhi.n	29a94 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   29a60:	f1c5 0202 	rsb	r2, r5, #2
   29a64:	4294      	cmp	r4, r2
   29a66:	bfa8      	it	ge
   29a68:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   29a6a:	4622      	mov	r2, r4
   29a6c:	f10d 0306 	add.w	r3, sp, #6
   29a70:	1959      	adds	r1, r3, r5
   29a72:	f7fe fd8e 	bl	28592 <memcpy>
}
   29a76:	4620      	mov	r0, r4
   29a78:	b003      	add	sp, #12
   29a7a:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   29a7c:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   29a7e:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   29a82:	d807      	bhi.n	29a94 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   29a84:	f1c5 0210 	rsb	r2, r5, #16
   29a88:	4294      	cmp	r4, r2
   29a8a:	bfa8      	it	ge
   29a8c:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   29a8e:	4429      	add	r1, r5
   29a90:	4622      	mov	r2, r4
   29a92:	e7ee      	b.n	29a72 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29a94:	f06f 0406 	mvn.w	r4, #6
   29a98:	e7ed      	b.n	29a76 <bt_gatt_attr_read_service+0x30>

00029a9a <gatt_sub_remove>:
{
   29a9a:	b538      	push	{r3, r4, r5, lr}
   29a9c:	460c      	mov	r4, r1
	if (params) {
   29a9e:	4619      	mov	r1, r3
   29aa0:	b16b      	cbz	r3, 29abe <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   29aa2:	f103 0514 	add.w	r5, r3, #20
Z_GENLIST_REMOVE(slist, snode)
   29aa6:	695b      	ldr	r3, [r3, #20]
   29aa8:	b982      	cbnz	r2, 29acc <gatt_sub_remove+0x32>
   29aaa:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   29aac:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   29aae:	4295      	cmp	r5, r2
   29ab0:	d100      	bne.n	29ab4 <gatt_sub_remove+0x1a>
	list->tail = node;
   29ab2:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   29ab4:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   29ab6:	680d      	ldr	r5, [r1, #0]
   29ab8:	461a      	mov	r2, r3
   29aba:	614b      	str	r3, [r1, #20]
   29abc:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   29abe:	68a3      	ldr	r3, [r4, #8]
   29ac0:	b953      	cbnz	r3, 29ad8 <gatt_sub_remove+0x3e>
   29ac2:	4620      	mov	r0, r4
}
   29ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29ac8:	f7ff bed3 	b.w	29872 <gatt_sub_remove.part.0>
   29acc:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   29ace:	68e3      	ldr	r3, [r4, #12]
   29ad0:	429d      	cmp	r5, r3
	list->tail = node;
   29ad2:	bf08      	it	eq
   29ad4:	60e2      	streq	r2, [r4, #12]
}
   29ad6:	e7ed      	b.n	29ab4 <gatt_sub_remove+0x1a>
   29ad8:	bd38      	pop	{r3, r4, r5, pc}

00029ada <gatt_write_ccc_rsp>:
{
   29ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29ade:	460e      	mov	r6, r1
   29ae0:	9c06      	ldr	r4, [sp, #24]
   29ae2:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29ae4:	f06f 0104 	mvn.w	r1, #4
   29ae8:	f104 0010 	add.w	r0, r4, #16
   29aec:	f7ff fe5f 	bl	297ae <atomic_and>
	if (err) {
   29af0:	b1e6      	cbz	r6, 29b2c <gatt_write_ccc_rsp+0x52>
		sub = gatt_sub_find(conn);
   29af2:	4628      	mov	r0, r5
   29af4:	f7f2 f9b0 	bl	1be58 <gatt_sub_find>
		if (!sub) {
   29af8:	4601      	mov	r1, r0
   29afa:	b308      	cbz	r0, 29b40 <gatt_write_ccc_rsp+0x66>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   29afc:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   29afe:	b143      	cbz	r3, 29b12 <gatt_write_ccc_rsp+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   29b00:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   29b02:	f104 0014 	add.w	r0, r4, #20
   29b06:	4283      	cmp	r3, r0
   29b08:	d10b      	bne.n	29b22 <gatt_write_ccc_rsp+0x48>
				gatt_sub_remove(conn, sub, tmp, params);
   29b0a:	4623      	mov	r3, r4
   29b0c:	4628      	mov	r0, r5
   29b0e:	f7ff ffc4 	bl	29a9a <gatt_sub_remove>
	if (params->write) {
   29b12:	6863      	ldr	r3, [r4, #4]
   29b14:	b1a3      	cbz	r3, 29b40 <gatt_write_ccc_rsp+0x66>
		params->write(conn, err, NULL);
   29b16:	4631      	mov	r1, r6
   29b18:	4628      	mov	r0, r5
}
   29b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   29b1e:	2200      	movs	r2, #0
   29b20:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   29b22:	2a00      	cmp	r2, #0
   29b24:	d0f5      	beq.n	29b12 <gatt_write_ccc_rsp+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   29b26:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   29b28:	6812      	ldr	r2, [r2, #0]
   29b2a:	e7ec      	b.n	29b06 <gatt_write_ccc_rsp+0x2c>
	} else if (!params->value) {
   29b2c:	89a3      	ldrh	r3, [r4, #12]
   29b2e:	2b00      	cmp	r3, #0
   29b30:	d1ef      	bne.n	29b12 <gatt_write_ccc_rsp+0x38>
		params->notify(conn, params, NULL, 0);
   29b32:	4633      	mov	r3, r6
   29b34:	4632      	mov	r2, r6
   29b36:	4621      	mov	r1, r4
   29b38:	4628      	mov	r0, r5
   29b3a:	6827      	ldr	r7, [r4, #0]
   29b3c:	47b8      	blx	r7
   29b3e:	e7e8      	b.n	29b12 <gatt_write_ccc_rsp+0x38>
}
   29b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029b44 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   29b44:	2a02      	cmp	r2, #2
{
   29b46:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   29b48:	d108      	bne.n	29b5c <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   29b4a:	2300      	movs	r3, #0
   29b4c:	f100 0190 	add.w	r1, r0, #144	; 0x90
   29b50:	461a      	mov	r2, r3
   29b52:	7a00      	ldrb	r0, [r0, #8]
   29b54:	f7f2 fa62 	bl	1c01c <sc_save>
}
   29b58:	2002      	movs	r0, #2
   29b5a:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   29b5c:	f7f2 fcf4 	bl	1c548 <sc_clear>
   29b60:	e7fa      	b.n	29b58 <sc_ccc_cfg_write+0x14>

00029b62 <gatt_req_send>:
{
   29b62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29b66:	4606      	mov	r6, r0
   29b68:	4689      	mov	r9, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   29b6a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   29b6e:	2100      	movs	r1, #0
{
   29b70:	4617      	mov	r7, r2
   29b72:	461d      	mov	r5, r3
   29b74:	f89d a020 	ldrb.w	sl, [sp, #32]
   29b78:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   29b7c:	f7f1 fef0 	bl	1b960 <bt_att_req_alloc>
	if (!req) {
   29b80:	4604      	mov	r4, r0
   29b82:	b920      	cbnz	r0, 29b8e <gatt_req_send+0x2c>
		return -ENOMEM;
   29b84:	f06f 050b 	mvn.w	r5, #11
}
   29b88:	4628      	mov	r0, r5
   29b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->att_op = op;
   29b8e:	f880 a011 	strb.w	sl, [r0, #17]
	req->len = len;
   29b92:	f8c0 8014 	str.w	r8, [r0, #20]
	req->encode = encode;
   29b96:	60c5      	str	r5, [r0, #12]
	req->func = func;
   29b98:	f8c0 9004 	str.w	r9, [r0, #4]
	req->user_data = params;
   29b9c:	6187      	str	r7, [r0, #24]
	buf = bt_att_create_pdu(conn, op, len);
   29b9e:	4642      	mov	r2, r8
   29ba0:	4651      	mov	r1, sl
   29ba2:	4630      	mov	r0, r6
   29ba4:	f7f1 fc4e 	bl	1b444 <bt_att_create_pdu>
	if (!buf) {
   29ba8:	b918      	cbnz	r0, 29bb2 <gatt_req_send+0x50>
		bt_att_req_free(req);
   29baa:	4620      	mov	r0, r4
   29bac:	f7f1 feee 	bl	1b98c <bt_att_req_free>
   29bb0:	e7e8      	b.n	29b84 <gatt_req_send+0x22>
	err = encode(buf, len, params);
   29bb2:	463a      	mov	r2, r7
   29bb4:	4641      	mov	r1, r8
	req->buf = buf;
   29bb6:	60a0      	str	r0, [r4, #8]
	err = encode(buf, len, params);
   29bb8:	47a8      	blx	r5
	if (err) {
   29bba:	4605      	mov	r5, r0
   29bbc:	b118      	cbz	r0, 29bc6 <gatt_req_send+0x64>
		bt_att_req_free(req);
   29bbe:	4620      	mov	r0, r4
   29bc0:	f7f1 fee4 	bl	1b98c <bt_att_req_free>
   29bc4:	e7e0      	b.n	29b88 <gatt_req_send+0x26>
	err = bt_att_req_send(conn, req);
   29bc6:	4621      	mov	r1, r4
   29bc8:	4630      	mov	r0, r6
   29bca:	f7f2 f84d 	bl	1bc68 <bt_att_req_send>
	if (err) {
   29bce:	4605      	mov	r5, r0
   29bd0:	2800      	cmp	r0, #0
   29bd2:	d0d9      	beq.n	29b88 <gatt_req_send+0x26>
   29bd4:	e7f3      	b.n	29bbe <gatt_req_send+0x5c>

00029bd6 <bt_gatt_attr_value_handle>:
{
   29bd6:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   29bd8:	4604      	mov	r4, r0
   29bda:	b910      	cbnz	r0, 29be2 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   29bdc:	2000      	movs	r0, #0
}
   29bde:	b002      	add	sp, #8
   29be0:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   29be2:	2300      	movs	r3, #0
   29be4:	f88d 3004 	strb.w	r3, [sp, #4]
   29be8:	f642 0303 	movw	r3, #10243	; 0x2803
   29bec:	6800      	ldr	r0, [r0, #0]
   29bee:	a901      	add	r1, sp, #4
   29bf0:	f8ad 3006 	strh.w	r3, [sp, #6]
   29bf4:	f7fe fd68 	bl	286c8 <bt_uuid_cmp>
   29bf8:	2800      	cmp	r0, #0
   29bfa:	d1ef      	bne.n	29bdc <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   29bfc:	68e3      	ldr	r3, [r4, #12]
   29bfe:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   29c00:	2800      	cmp	r0, #0
   29c02:	d1ec      	bne.n	29bde <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   29c04:	4620      	mov	r0, r4
   29c06:	f7f2 fd89 	bl	1c71c <bt_gatt_attr_get_handle>
   29c0a:	3001      	adds	r0, #1
   29c0c:	b280      	uxth	r0, r0
	return handle;
   29c0e:	e7e6      	b.n	29bde <bt_gatt_attr_value_handle+0x8>

00029c10 <bt_gatt_attr_read_chrc>:
{
   29c10:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   29c12:	68cf      	ldr	r7, [r1, #12]
{
   29c14:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   29c16:	79bb      	ldrb	r3, [r7, #6]
{
   29c18:	b087      	sub	sp, #28
   29c1a:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   29c1c:	f88d 3004 	strb.w	r3, [sp, #4]
{
   29c20:	4615      	mov	r5, r2
   29c22:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   29c26:	f7ff ffd6 	bl	29bd6 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   29c2a:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   29c2c:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   29c30:	780b      	ldrb	r3, [r1, #0]
   29c32:	b99b      	cbnz	r3, 29c5c <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   29c34:	884b      	ldrh	r3, [r1, #2]
		value_len += 2U;
   29c36:	2105      	movs	r1, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   29c38:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   29c3c:	42b1      	cmp	r1, r6
   29c3e:	d315      	bcc.n	29c6c <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   29c40:	1b89      	subs	r1, r1, r6
   29c42:	42a1      	cmp	r1, r4
   29c44:	bfa8      	it	ge
   29c46:	4621      	movge	r1, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   29c48:	ab01      	add	r3, sp, #4
   29c4a:	b28c      	uxth	r4, r1
   29c4c:	4622      	mov	r2, r4
   29c4e:	4628      	mov	r0, r5
   29c50:	1999      	adds	r1, r3, r6
   29c52:	f7fe fc9e 	bl	28592 <memcpy>
}
   29c56:	4620      	mov	r0, r4
   29c58:	b007      	add	sp, #28
   29c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   29c5c:	3101      	adds	r1, #1
   29c5e:	2210      	movs	r2, #16
   29c60:	f10d 0007 	add.w	r0, sp, #7
   29c64:	f7fe fc95 	bl	28592 <memcpy>
		value_len += 16U;
   29c68:	2113      	movs	r1, #19
   29c6a:	e7e7      	b.n	29c3c <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29c6c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   29c70:	e7f1      	b.n	29c56 <bt_gatt_attr_read_chrc+0x46>

00029c72 <bt_gatt_foreach_attr>:
{
   29c72:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   29c74:	e9cd 2301 	strd	r2, r3, [sp, #4]
   29c78:	2300      	movs	r3, #0
   29c7a:	461a      	mov	r2, r3
   29c7c:	9300      	str	r3, [sp, #0]
   29c7e:	f7f2 fd99 	bl	1c7b4 <bt_gatt_foreach_attr_type>
}
   29c82:	b005      	add	sp, #20
   29c84:	f85d fb04 	ldr.w	pc, [sp], #4

00029c88 <bt_gatt_check_perm>:
{
   29c88:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   29c8a:	07d4      	lsls	r4, r2, #31
{
   29c8c:	4605      	mov	r5, r0
   29c8e:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   29c90:	d504      	bpl.n	29c9c <bt_gatt_check_perm+0x14>
   29c92:	f010 0f15 	tst.w	r0, #21
   29c96:	d01e      	beq.n	29cd6 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   29c98:	684b      	ldr	r3, [r1, #4]
   29c9a:	b1e3      	cbz	r3, 29cd6 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   29c9c:	0793      	lsls	r3, r2, #30
   29c9e:	d504      	bpl.n	29caa <bt_gatt_check_perm+0x22>
   29ca0:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   29ca4:	d019      	beq.n	29cda <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   29ca6:	688b      	ldr	r3, [r1, #8]
   29ca8:	b1bb      	cbz	r3, 29cda <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   29caa:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   29cae:	f014 0f30 	tst.w	r4, #48	; 0x30
   29cb2:	d103      	bne.n	29cbc <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   29cb4:	f014 000c 	ands.w	r0, r4, #12
   29cb8:	d107      	bne.n	29cca <bt_gatt_check_perm+0x42>
}
   29cba:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   29cbc:	4628      	mov	r0, r5
   29cbe:	f7fe ffd5 	bl	28c6c <bt_conn_get_security>
   29cc2:	2802      	cmp	r0, #2
   29cc4:	d8f6      	bhi.n	29cb4 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   29cc6:	2005      	movs	r0, #5
   29cc8:	e7f7      	b.n	29cba <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   29cca:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   29ccc:	2b00      	cmp	r3, #0
   29cce:	bf14      	ite	ne
   29cd0:	2000      	movne	r0, #0
   29cd2:	200f      	moveq	r0, #15
   29cd4:	e7f1      	b.n	29cba <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   29cd6:	2002      	movs	r0, #2
   29cd8:	e7ef      	b.n	29cba <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   29cda:	2003      	movs	r0, #3
   29cdc:	e7ed      	b.n	29cba <bt_gatt_check_perm+0x32>

00029cde <gatt_discover_next>:
{
   29cde:	b570      	push	{r4, r5, r6, lr}
   29ce0:	4605      	mov	r5, r0
   29ce2:	4614      	mov	r4, r2
	if (!last_handle)
   29ce4:	b929      	cbnz	r1, 29cf2 <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   29ce6:	4621      	mov	r1, r4
   29ce8:	4628      	mov	r0, r5
   29cea:	f7f3 fa15 	bl	1d118 <bt_gatt_discover>
   29cee:	b928      	cbnz	r0, 29cfc <gatt_discover_next+0x1e>
}
   29cf0:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   29cf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   29cf6:	4291      	cmp	r1, r2
   29cf8:	d107      	bne.n	29d0a <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   29cfa:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   29cfc:	4622      	mov	r2, r4
   29cfe:	4628      	mov	r0, r5
   29d00:	6863      	ldr	r3, [r4, #4]
   29d02:	2100      	movs	r1, #0
}
   29d04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   29d08:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   29d0a:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   29d0c:	1c4b      	adds	r3, r1, #1
   29d0e:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   29d10:	429a      	cmp	r2, r3
		params->start_handle++;
   29d12:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   29d14:	d2e7      	bcs.n	29ce6 <gatt_discover_next+0x8>
   29d16:	e7f1      	b.n	29cfc <gatt_discover_next+0x1e>

00029d18 <gatt_find_type_rsp>:
{
   29d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29d1c:	b088      	sub	sp, #32
   29d1e:	4607      	mov	r7, r0
   29d20:	4614      	mov	r4, r2
   29d22:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   29d26:	b911      	cbnz	r1, 29d2e <gatt_find_type_rsp+0x16>
   29d28:	f013 0803 	ands.w	r8, r3, #3
   29d2c:	d008      	beq.n	29d40 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   29d2e:	464a      	mov	r2, r9
   29d30:	2100      	movs	r1, #0
   29d32:	4638      	mov	r0, r7
   29d34:	f8d9 3004 	ldr.w	r3, [r9, #4]
   29d38:	4798      	blx	r3
}
   29d3a:	b008      	add	sp, #32
   29d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   29d40:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   29d42:	f642 0a01 	movw	sl, #10241	; 0x2801
   29d46:	f3c3 0387 	ubfx	r3, r3, #2, #8
   29d4a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
	for (uint8_t i = 0U; i < count; i++) {
   29d4e:	42ac      	cmp	r4, r5
   29d50:	d105      	bne.n	29d5e <gatt_find_type_rsp+0x46>
	gatt_discover_next(conn, end_handle, params);
   29d52:	464a      	mov	r2, r9
   29d54:	4641      	mov	r1, r8
   29d56:	4638      	mov	r0, r7
   29d58:	f7ff ffc1 	bl	29cde <gatt_discover_next>
	return;
   29d5c:	e7ed      	b.n	29d3a <gatt_find_type_rsp+0x22>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   29d5e:	f899 1010 	ldrb.w	r1, [r9, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   29d62:	8863      	ldrh	r3, [r4, #2]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   29d64:	2900      	cmp	r1, #0
   29d66:	bf0c      	ite	eq
   29d68:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   29d6c:	4651      	movne	r1, sl
		value.end_handle = end_handle;
   29d6e:	f8ad 3008 	strh.w	r3, [sp, #8]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   29d72:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   29d76:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   29d7a:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   29d7c:	9301      	str	r3, [sp, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   29d7e:	ab01      	add	r3, sp, #4
   29d80:	f8ad 1002 	strh.w	r1, [sp, #2]
   29d84:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   29d86:	f8ad 201c 	strh.w	r2, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   29d8a:	4638      	mov	r0, r7
   29d8c:	464a      	mov	r2, r9
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   29d8e:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   29d92:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   29d96:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   29d9a:	f8cd d00c 	str.w	sp, [sp, #12]
   29d9e:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   29da2:	a903      	add	r1, sp, #12
   29da4:	4798      	blx	r3
   29da6:	3404      	adds	r4, #4
   29da8:	2800      	cmp	r0, #0
   29daa:	d1d0      	bne.n	29d4e <gatt_find_type_rsp+0x36>
   29dac:	e7c5      	b.n	29d3a <gatt_find_type_rsp+0x22>

00029dae <bt_gatt_notification>:
{
   29dae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29db2:	4607      	mov	r7, r0
   29db4:	4688      	mov	r8, r1
   29db6:	4691      	mov	r9, r2
   29db8:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   29dba:	f7f2 f84d 	bl	1be58 <gatt_sub_find>
	if (!sub) {
   29dbe:	b1f8      	cbz	r0, 29e00 <bt_gatt_notification+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   29dc0:	6883      	ldr	r3, [r0, #8]
   29dc2:	b1eb      	cbz	r3, 29e00 <bt_gatt_notification+0x52>
   29dc4:	f1b3 0614 	subs.w	r6, r3, #20
   29dc8:	d01a      	beq.n	29e00 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   29dca:	681c      	ldr	r4, [r3, #0]
   29dcc:	b104      	cbz	r4, 29dd0 <bt_gatt_notification+0x22>
   29dce:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   29dd0:	8933      	ldrh	r3, [r6, #8]
   29dd2:	4543      	cmp	r3, r8
   29dd4:	d10a      	bne.n	29dec <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   29dd6:	4653      	mov	r3, sl
   29dd8:	464a      	mov	r2, r9
   29dda:	4631      	mov	r1, r6
   29ddc:	4638      	mov	r0, r7
   29dde:	6835      	ldr	r5, [r6, #0]
   29de0:	47a8      	blx	r5
   29de2:	b918      	cbnz	r0, 29dec <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   29de4:	4631      	mov	r1, r6
   29de6:	4638      	mov	r0, r7
   29de8:	f7f3 fe5a 	bl	1daa0 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   29dec:	b144      	cbz	r4, 29e00 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   29dee:	f114 0514 	adds.w	r5, r4, #20
   29df2:	d002      	beq.n	29dfa <bt_gatt_notification+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   29df4:	6965      	ldr	r5, [r4, #20]
   29df6:	b105      	cbz	r5, 29dfa <bt_gatt_notification+0x4c>
   29df8:	3d14      	subs	r5, #20
{
   29dfa:	4626      	mov	r6, r4
   29dfc:	462c      	mov	r4, r5
   29dfe:	e7e7      	b.n	29dd0 <bt_gatt_notification+0x22>
}
   29e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00029e04 <bt_gatt_change_aware>:
{
   29e04:	b538      	push	{r3, r4, r5, lr}
   29e06:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   29e08:	f7f1 ffd8 	bl	1bdbc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   29e0c:	b910      	cbnz	r0, 29e14 <bt_gatt_change_aware+0x10>
		return true;
   29e0e:	2501      	movs	r5, #1
}
   29e10:	4628      	mov	r0, r5
   29e12:	bd38      	pop	{r3, r4, r5, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   29e14:	7a03      	ldrb	r3, [r0, #8]
   29e16:	07d9      	lsls	r1, r3, #31
   29e18:	d5f9      	bpl.n	29e0e <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   29e1a:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   29e1e:	4620      	mov	r0, r4
   29e20:	f7ff fc27 	bl	29672 <atomic_get>
   29e24:	07c2      	lsls	r2, r0, #31
   29e26:	d4f2      	bmi.n	29e0e <bt_gatt_change_aware+0xa>
	if (!req) {
   29e28:	2d00      	cmp	r5, #0
   29e2a:	d0f1      	beq.n	29e10 <bt_gatt_change_aware+0xc>
   29e2c:	4620      	mov	r0, r4
   29e2e:	f7ff fc20 	bl	29672 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   29e32:	0783      	lsls	r3, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   29e34:	f3c0 0540 	ubfx	r5, r0, #1, #1
   29e38:	d509      	bpl.n	29e4e <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29e3a:	f06f 0102 	mvn.w	r1, #2
   29e3e:	4620      	mov	r0, r4
   29e40:	f7ff fcb5 	bl	297ae <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   29e44:	2101      	movs	r1, #1
   29e46:	4620      	mov	r0, r4
   29e48:	f7ff fc6c 	bl	29724 <atomic_or>
}
   29e4c:	e7e0      	b.n	29e10 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   29e4e:	2102      	movs	r1, #2
   29e50:	e7f9      	b.n	29e46 <bt_gatt_change_aware+0x42>

00029e52 <smp_pairing_req>:
}
   29e52:	2007      	movs	r0, #7
   29e54:	4770      	bx	lr

00029e56 <bt_smp_aes_cmac>:
{
   29e56:	b570      	push	{r4, r5, r6, lr}
   29e58:	b0c2      	sub	sp, #264	; 0x108
   29e5a:	460d      	mov	r5, r1
   29e5c:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   29e5e:	4601      	mov	r1, r0
   29e60:	aa16      	add	r2, sp, #88	; 0x58
   29e62:	4668      	mov	r0, sp
{
   29e64:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   29e66:	f7fd ffa2 	bl	27dae <tc_cmac_setup>
   29e6a:	b150      	cbz	r0, 29e82 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   29e6c:	4632      	mov	r2, r6
   29e6e:	4629      	mov	r1, r5
   29e70:	4668      	mov	r0, sp
   29e72:	f7fd ffc7 	bl	27e04 <tc_cmac_update>
   29e76:	b120      	cbz	r0, 29e82 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   29e78:	4669      	mov	r1, sp
   29e7a:	4620      	mov	r0, r4
   29e7c:	f7fe f82e 	bl	27edc <tc_cmac_final>
   29e80:	b918      	cbnz	r0, 29e8a <bt_smp_aes_cmac+0x34>
		return -EIO;
   29e82:	f06f 0004 	mvn.w	r0, #4
}
   29e86:	b042      	add	sp, #264	; 0x108
   29e88:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   29e8a:	2000      	movs	r0, #0
   29e8c:	e7fb      	b.n	29e86 <bt_smp_aes_cmac+0x30>

00029e8e <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   29e8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29e90:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   29e92:	2200      	movs	r2, #0
   29e94:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   29e96:	4604      	mov	r4, r0
   29e98:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   29e9a:	460a      	mov	r2, r1
   29e9c:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   29ea0:	2106      	movs	r1, #6
   29ea2:	f7ff f821 	bl	28ee8 <bt_l2cap_send_cb>
   29ea6:	b128      	cbz	r0, 29eb4 <smp_send.isra.0+0x26>
		net_buf_unref(buf);
   29ea8:	4628      	mov	r0, r5
}
   29eaa:	b003      	add	sp, #12
   29eac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   29eb0:	f7f6 b8fa 	b.w	200a8 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   29eb4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   29eb8:	2300      	movs	r3, #0
   29eba:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
}
   29ebe:	b003      	add	sp, #12
   29ec0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   29ec4:	f7f9 bfe6 	b.w	23e94 <k_work_reschedule>

00029ec8 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   29ec8:	b510      	push	{r4, lr}
   29eca:	1e43      	subs	r3, r0, #1
   29ecc:	f100 0210 	add.w	r2, r0, #16
   29ed0:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   29ed2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   29ed6:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   29eda:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   29edc:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   29ede:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   29ee0:	d1f7      	bne.n	29ed2 <sys_mem_swap.constprop.0+0xa>
	}
}
   29ee2:	bd10      	pop	{r4, pc}

00029ee4 <smp_f6>:
{
   29ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
   29ee6:	4616      	mov	r6, r2
   29ee8:	461c      	mov	r4, r3
   29eea:	4605      	mov	r5, r0
   29eec:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, n1, 16);
   29eee:	2210      	movs	r2, #16
   29ef0:	a805      	add	r0, sp, #20
{
   29ef2:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   29ef4:	f7f4 f892 	bl	1e01c <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   29ef8:	2210      	movs	r2, #16
   29efa:	4631      	mov	r1, r6
   29efc:	a809      	add	r0, sp, #36	; 0x24
   29efe:	f7f4 f88d 	bl	1e01c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   29f02:	4621      	mov	r1, r4
   29f04:	2210      	movs	r2, #16
   29f06:	a80d      	add	r0, sp, #52	; 0x34
   29f08:	f7f4 f888 	bl	1e01c <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   29f0c:	2203      	movs	r2, #3
   29f0e:	991c      	ldr	r1, [sp, #112]	; 0x70
   29f10:	a811      	add	r0, sp, #68	; 0x44
   29f12:	f7f4 f883 	bl	1e01c <sys_memcpy_swap>
	m[51] = a1->type;
   29f16:	9c1d      	ldr	r4, [sp, #116]	; 0x74
	memcpy(m + 52, a1->a.val, 6);
   29f18:	2206      	movs	r2, #6
	m[51] = a1->type;
   29f1a:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 52, a1->a.val, 6);
   29f1e:	a812      	add	r0, sp, #72	; 0x48
   29f20:	4621      	mov	r1, r4
	m[51] = a1->type;
   29f22:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   29f26:	f7fe fb34 	bl	28592 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   29f2a:	4621      	mov	r1, r4
   29f2c:	2206      	movs	r2, #6
   29f2e:	a812      	add	r0, sp, #72	; 0x48
   29f30:	f7f4 f874 	bl	1e01c <sys_memcpy_swap>
	m[58] = a2->type;
   29f34:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	memcpy(m + 59, a2->a.val, 6);
   29f36:	2206      	movs	r2, #6
	m[58] = a2->type;
   29f38:	f814 3b01 	ldrb.w	r3, [r4], #1
	memcpy(m + 59, a2->a.val, 6);
   29f3c:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   29f40:	4621      	mov	r1, r4
	m[58] = a2->type;
   29f42:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   29f46:	f7fe fb24 	bl	28592 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   29f4a:	4621      	mov	r1, r4
   29f4c:	2206      	movs	r2, #6
   29f4e:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   29f52:	f7f4 f863 	bl	1e01c <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   29f56:	2210      	movs	r2, #16
   29f58:	4629      	mov	r1, r5
   29f5a:	a801      	add	r0, sp, #4
   29f5c:	f7f4 f85e 	bl	1e01c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   29f60:	463b      	mov	r3, r7
   29f62:	2241      	movs	r2, #65	; 0x41
   29f64:	a905      	add	r1, sp, #20
   29f66:	a801      	add	r0, sp, #4
   29f68:	f7ff ff75 	bl	29e56 <bt_smp_aes_cmac>
	if (err) {
   29f6c:	4604      	mov	r4, r0
   29f6e:	b910      	cbnz	r0, 29f76 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   29f70:	4638      	mov	r0, r7
   29f72:	f7ff ffa9 	bl	29ec8 <sys_mem_swap.constprop.0>
}
   29f76:	4620      	mov	r0, r4
   29f78:	b017      	add	sp, #92	; 0x5c
   29f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029f7c <smp_f4>:
{
   29f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   29f7e:	460e      	mov	r6, r1
   29f80:	4614      	mov	r4, r2
   29f82:	461d      	mov	r5, r3
   29f84:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   29f86:	4601      	mov	r1, r0
   29f88:	2220      	movs	r2, #32
   29f8a:	a805      	add	r0, sp, #20
{
   29f8c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   29f8e:	f7f4 f845 	bl	1e01c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   29f92:	2220      	movs	r2, #32
   29f94:	4631      	mov	r1, r6
   29f96:	a80d      	add	r0, sp, #52	; 0x34
   29f98:	f7f4 f840 	bl	1e01c <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   29f9c:	4621      	mov	r1, r4
   29f9e:	2210      	movs	r2, #16
   29fa0:	a801      	add	r0, sp, #4
	m[64] = z;
   29fa2:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   29fa6:	f7f4 f839 	bl	1e01c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   29faa:	463b      	mov	r3, r7
   29fac:	2241      	movs	r2, #65	; 0x41
   29fae:	a905      	add	r1, sp, #20
   29fb0:	a801      	add	r0, sp, #4
   29fb2:	f7ff ff50 	bl	29e56 <bt_smp_aes_cmac>
	if (err) {
   29fb6:	4604      	mov	r4, r0
   29fb8:	b910      	cbnz	r0, 29fc0 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   29fba:	4638      	mov	r0, r7
   29fbc:	f7ff ff84 	bl	29ec8 <sys_mem_swap.constprop.0>
}
   29fc0:	4620      	mov	r0, r4
   29fc2:	b017      	add	sp, #92	; 0x5c
   29fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029fc6 <smp_signing_info>:
   29fc6:	2007      	movs	r0, #7
   29fc8:	4770      	bx	lr

00029fca <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29fca:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   29fce:	4108      	asrs	r0, r1
}
   29fd0:	f000 0001 	and.w	r0, r0, #1
   29fd4:	4770      	bx	lr

00029fd6 <update_keys_check>:
{
   29fd6:	4603      	mov	r3, r0
   29fd8:	b510      	push	{r4, lr}
	if (!keys ||
   29fda:	b1d9      	cbz	r1, 2a014 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   29fdc:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   29fde:	f010 0f24 	tst.w	r0, #36	; 0x24
   29fe2:	d017      	beq.n	2a014 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   29fe4:	7d1a      	ldrb	r2, [r3, #20]
   29fe6:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   29fe8:	7b09      	ldrb	r1, [r1, #12]
   29fea:	42a2      	cmp	r2, r4
   29fec:	bf28      	it	cs
   29fee:	4622      	movcs	r2, r4
   29ff0:	4291      	cmp	r1, r2
   29ff2:	d901      	bls.n	29ff8 <update_keys_check+0x22>
		return false;
   29ff4:	2000      	movs	r0, #0
}
   29ff6:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   29ff8:	0682      	lsls	r2, r0, #26
   29ffa:	d404      	bmi.n	2a006 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   29ffc:	7a18      	ldrb	r0, [r3, #8]
   29ffe:	3800      	subs	r0, #0
   2a000:	bf18      	it	ne
   2a002:	2001      	movne	r0, #1
   2a004:	e7f7      	b.n	29ff6 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2a006:	2105      	movs	r1, #5
   2a008:	1d18      	adds	r0, r3, #4
   2a00a:	f7ff ffde 	bl	29fca <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2a00e:	2800      	cmp	r0, #0
   2a010:	d1f4      	bne.n	29ffc <update_keys_check+0x26>
   2a012:	e7ef      	b.n	29ff4 <update_keys_check+0x1e>
		return true;
   2a014:	2001      	movs	r0, #1
   2a016:	e7ee      	b.n	29ff6 <update_keys_check+0x20>

0002a018 <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a018:	2301      	movs	r3, #1
   2a01a:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a01e:	43ca      	mvns	r2, r1
{
   2a020:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a022:	e8d0 3fef 	ldaex	r3, [r0]
   2a026:	ea03 0c02 	and.w	ip, r3, r2
   2a02a:	e8c0 cfee 	stlex	lr, ip, [r0]
   2a02e:	f1be 0f00 	cmp.w	lr, #0
   2a032:	d1f6      	bne.n	2a022 <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   2a034:	420b      	tst	r3, r1
}
   2a036:	bf14      	ite	ne
   2a038:	2001      	movne	r0, #1
   2a03a:	2000      	moveq	r0, #0
   2a03c:	f85d fb04 	ldr.w	pc, [sp], #4

0002a040 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a040:	2301      	movs	r3, #1
   2a042:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a044:	e8d0 2fef 	ldaex	r2, [r0]
   2a048:	431a      	orrs	r2, r3
   2a04a:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2a04e:	2900      	cmp	r1, #0
   2a050:	d1f8      	bne.n	2a044 <atomic_set_bit+0x4>
}
   2a052:	4770      	bx	lr

0002a054 <smp_keypress_notif>:
{
   2a054:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2a056:	210e      	movs	r1, #14
   2a058:	f7ff fff2 	bl	2a040 <atomic_set_bit>
}
   2a05c:	2000      	movs	r0, #0
   2a05e:	bd08      	pop	{r3, pc}

0002a060 <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2a060:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2a062:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2a064:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2a066:	4628      	mov	r0, r5
   2a068:	2104      	movs	r1, #4
   2a06a:	f7ff ffae 	bl	29fca <atomic_test_bit>
   2a06e:	b168      	cbz	r0, 2a08c <smp_create_pdu.isra.0+0x2c>
		timeout = K_NO_WAIT;
   2a070:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2a072:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   2a074:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2a076:	4608      	mov	r0, r1
   2a078:	f7fe ff33 	bl	28ee2 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2a07c:	4604      	mov	r4, r0
   2a07e:	b940      	cbnz	r0, 2a092 <smp_create_pdu.isra.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2a080:	2104      	movs	r1, #4
   2a082:	4628      	mov	r0, r5
   2a084:	f7ff ffdc 	bl	2a040 <atomic_set_bit>
}
   2a088:	4620      	mov	r0, r4
   2a08a:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   2a08c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2a090:	e7ef      	b.n	2a072 <smp_create_pdu.isra.0+0x12>
	return net_buf_simple_add(&buf->b, len);
   2a092:	2101      	movs	r1, #1
   2a094:	3008      	adds	r0, #8
   2a096:	f7f6 f937 	bl	20308 <net_buf_simple_add>
	hdr->code = op;
   2a09a:	7006      	strb	r6, [r0, #0]
	return buf;
   2a09c:	e7f4      	b.n	2a088 <smp_create_pdu.isra.0+0x28>

0002a09e <smp_send_pairing_random>:
{
   2a09e:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2a0a0:	2104      	movs	r1, #4
{
   2a0a2:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2a0a4:	f7ff ffdc 	bl	2a060 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   2a0a8:	4604      	mov	r4, r0
   2a0aa:	b178      	cbz	r0, 2a0cc <smp_send_pairing_random+0x2e>
   2a0ac:	2110      	movs	r1, #16
   2a0ae:	3008      	adds	r0, #8
   2a0b0:	f7f6 f92a 	bl	20308 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   2a0b4:	2210      	movs	r2, #16
   2a0b6:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2a0ba:	f7fe fa6a 	bl	28592 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2a0be:	4628      	mov	r0, r5
   2a0c0:	2200      	movs	r2, #0
   2a0c2:	4621      	mov	r1, r4
   2a0c4:	f7ff fee3 	bl	29e8e <smp_send.isra.0>
	return 0;
   2a0c8:	2000      	movs	r0, #0
}
   2a0ca:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2a0cc:	2008      	movs	r0, #8
   2a0ce:	e7fc      	b.n	2a0ca <smp_send_pairing_random+0x2c>

0002a0d0 <smp_pairing_confirm>:
{
   2a0d0:	b510      	push	{r4, lr}
   2a0d2:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   2a0d4:	6889      	ldr	r1, [r1, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a0d6:	1d03      	adds	r3, r0, #4
   2a0d8:	e8d3 2fef 	ldaex	r2, [r3]
   2a0dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   2a0e0:	e8c3 2fe0 	stlex	r0, r2, [r3]
   2a0e4:	2800      	cmp	r0, #0
   2a0e6:	d1f7      	bne.n	2a0d8 <smp_pairing_confirm+0x8>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   2a0e8:	2210      	movs	r2, #16
   2a0ea:	f104 0017 	add.w	r0, r4, #23
   2a0ee:	f7fe fa50 	bl	28592 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   2a0f2:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2a0f6:	78db      	ldrb	r3, [r3, #3]
   2a0f8:	b93b      	cbnz	r3, 2a10a <smp_pairing_confirm+0x3a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   2a0fa:	4620      	mov	r0, r4
   2a0fc:	2104      	movs	r1, #4
   2a0fe:	f7ff ff9f 	bl	2a040 <atomic_set_bit>
}
   2a102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_send_pairing_random(smp);
   2a106:	f7ff bfca 	b.w	2a09e <smp_send_pairing_random>
}
   2a10a:	2000      	movs	r0, #0
   2a10c:	bd10      	pop	{r4, pc}

0002a10e <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a10e:	2301      	movs	r3, #1
   2a110:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a112:	43db      	mvns	r3, r3
   2a114:	e8d0 2fef 	ldaex	r2, [r0]
   2a118:	401a      	ands	r2, r3
   2a11a:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2a11e:	2900      	cmp	r1, #0
   2a120:	d1f8      	bne.n	2a114 <atomic_clear_bit+0x6>
}
   2a122:	4770      	bx	lr

0002a124 <smp_reset>:
{
   2a124:	b570      	push	{r4, r5, r6, lr}
   2a126:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2a128:	2500      	movs	r5, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   2a12a:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
   2a12e:	1d03      	adds	r3, r0, #4
   2a130:	e8d3 2fef 	ldaex	r2, [r3]
   2a134:	e8c3 5fe1 	stlex	r1, r5, [r3]
   2a138:	2900      	cmp	r1, #0
   2a13a:	d1f9      	bne.n	2a130 <smp_reset+0xc>
	(void)k_work_cancel_delayable(&smp->work);
   2a13c:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
   2a140:	f7f9 feae 	bl	23ea0 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2a144:	7225      	strb	r5, [r4, #8]
   2a146:	e8d4 3fef 	ldaex	r3, [r4]
   2a14a:	e8c4 5fe2 	stlex	r2, r5, [r4]
   2a14e:	2a00      	cmp	r2, #0
   2a150:	d1f9      	bne.n	2a146 <smp_reset+0x22>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2a152:	78f3      	ldrb	r3, [r6, #3]
   2a154:	b92b      	cbnz	r3, 2a162 <smp_reset+0x3e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2a156:	4620      	mov	r0, r4
}
   2a158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2a15c:	210b      	movs	r1, #11
   2a15e:	f7ff bf6f 	b.w	2a040 <atomic_set_bit>
}
   2a162:	bd70      	pop	{r4, r5, r6, pc}

0002a164 <smp_c1>:
{
   2a164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a168:	4699      	mov	r9, r3
   2a16a:	b089      	sub	sp, #36	; 0x24
   2a16c:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
	p1[0] = ia->type;
   2a170:	783b      	ldrb	r3, [r7, #0]
{
   2a172:	460c      	mov	r4, r1
	p1[0] = ia->type;
   2a174:	f88d 3000 	strb.w	r3, [sp]
	p1[1] = ra->type;
   2a178:	f898 3000 	ldrb.w	r3, [r8]
{
   2a17c:	4611      	mov	r1, r2
   2a17e:	9d12      	ldr	r5, [sp, #72]	; 0x48
	memcpy(p1 + 2, preq, 7);
   2a180:	2207      	movs	r2, #7
{
   2a182:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   2a184:	f10d 0002 	add.w	r0, sp, #2
	p1[1] = ra->type;
   2a188:	f88d 3001 	strb.w	r3, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   2a18c:	f7fe fa01 	bl	28592 <memcpy>
	memcpy(p1 + 9, pres, 7);
   2a190:	2207      	movs	r2, #7
   2a192:	4649      	mov	r1, r9
   2a194:	f10d 0009 	add.w	r0, sp, #9
   2a198:	f7fe f9fb 	bl	28592 <memcpy>
	while (len--) {
   2a19c:	4629      	mov	r1, r5
   2a19e:	466a      	mov	r2, sp
   2a1a0:	f104 0010 	add.w	r0, r4, #16
   2a1a4:	42a0      	cmp	r0, r4
   2a1a6:	d127      	bne.n	2a1f8 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2a1a8:	462a      	mov	r2, r5
   2a1aa:	4629      	mov	r1, r5
   2a1ac:	4630      	mov	r0, r6
   2a1ae:	f7fe fc7f 	bl	28ab0 <bt_encrypt_le>
	if (err) {
   2a1b2:	4604      	mov	r4, r0
   2a1b4:	b9e0      	cbnz	r0, 2a1f0 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   2a1b6:	2206      	movs	r2, #6
   2a1b8:	f108 0101 	add.w	r1, r8, #1
   2a1bc:	a804      	add	r0, sp, #16
   2a1be:	f7fe f9e8 	bl	28592 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   2a1c2:	2206      	movs	r2, #6
   2a1c4:	1c79      	adds	r1, r7, #1
   2a1c6:	f10d 0016 	add.w	r0, sp, #22
   2a1ca:	f7fe f9e2 	bl	28592 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2a1ce:	2204      	movs	r2, #4
   2a1d0:	4621      	mov	r1, r4
   2a1d2:	a807      	add	r0, sp, #28
   2a1d4:	f7fe fa08 	bl	285e8 <memset>
	while (len--) {
   2a1d8:	462a      	mov	r2, r5
   2a1da:	f105 0010 	add.w	r0, r5, #16
   2a1de:	ab04      	add	r3, sp, #16
   2a1e0:	4282      	cmp	r2, r0
   2a1e2:	d112      	bne.n	2a20a <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   2a1e4:	462a      	mov	r2, r5
   2a1e6:	4629      	mov	r1, r5
   2a1e8:	4630      	mov	r0, r6
   2a1ea:	f7fe fc61 	bl	28ab0 <bt_encrypt_le>
   2a1ee:	4604      	mov	r4, r0
}
   2a1f0:	4620      	mov	r0, r4
   2a1f2:	b009      	add	sp, #36	; 0x24
   2a1f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   2a1f8:	f814 3b01 	ldrb.w	r3, [r4], #1
   2a1fc:	f812 cb01 	ldrb.w	ip, [r2], #1
   2a200:	ea83 030c 	eor.w	r3, r3, ip
   2a204:	f801 3b01 	strb.w	r3, [r1], #1
   2a208:	e7cc      	b.n	2a1a4 <smp_c1+0x40>
   2a20a:	f812 1b01 	ldrb.w	r1, [r2], #1
   2a20e:	f813 4b01 	ldrb.w	r4, [r3], #1
   2a212:	4061      	eors	r1, r4
   2a214:	f802 1c01 	strb.w	r1, [r2, #-1]
   2a218:	e7e2      	b.n	2a1e0 <smp_c1+0x7c>

0002a21a <legacy_send_pairing_confirm>:
{
   2a21a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2a21c:	2103      	movs	r1, #3
{
   2a21e:	4605      	mov	r5, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   2a220:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2a224:	f7ff ff1c 	bl	2a060 <smp_create_pdu.isra.0>
	if (!buf) {
   2a228:	4606      	mov	r6, r0
   2a22a:	b1c0      	cbz	r0, 2a25e <legacy_send_pairing_confirm+0x44>
   2a22c:	2110      	movs	r1, #16
   2a22e:	3008      	adds	r0, #8
   2a230:	f7f6 f86a 	bl	20308 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2a234:	f104 039e 	add.w	r3, r4, #158	; 0x9e
   2a238:	3497      	adds	r4, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2a23a:	9002      	str	r0, [sp, #8]
   2a23c:	9301      	str	r3, [sp, #4]
   2a23e:	9400      	str	r4, [sp, #0]
   2a240:	f105 0310 	add.w	r3, r5, #16
   2a244:	f105 0209 	add.w	r2, r5, #9
   2a248:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2a24c:	f105 0047 	add.w	r0, r5, #71	; 0x47
   2a250:	f7ff ff88 	bl	2a164 <smp_c1>
   2a254:	4604      	mov	r4, r0
   2a256:	b120      	cbz	r0, 2a262 <legacy_send_pairing_confirm+0x48>
		net_buf_unref(buf);
   2a258:	4630      	mov	r0, r6
   2a25a:	f7f5 ff25 	bl	200a8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2a25e:	2008      	movs	r0, #8
   2a260:	e009      	b.n	2a276 <legacy_send_pairing_confirm+0x5c>
	smp_send(smp, buf, NULL, NULL);
   2a262:	4602      	mov	r2, r0
   2a264:	4631      	mov	r1, r6
   2a266:	4628      	mov	r0, r5
   2a268:	f7ff fe11 	bl	29e8e <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2a26c:	1d28      	adds	r0, r5, #4
   2a26e:	4621      	mov	r1, r4
   2a270:	f7ff ff4d 	bl	2a10e <atomic_clear_bit>
	return 0;
   2a274:	4620      	mov	r0, r4
}
   2a276:	b004      	add	sp, #16
   2a278:	bd70      	pop	{r4, r5, r6, pc}

0002a27a <bt_smp_request_ltk>:
{
   2a27a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2a27e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   2a282:	4604      	mov	r4, r0
   2a284:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   2a288:	f7f3 fef6 	bl	1e078 <smp_chan_get>
	if (!smp) {
   2a28c:	4605      	mov	r5, r0
   2a28e:	2800      	cmp	r0, #0
   2a290:	f000 8090 	beq.w	2a3b4 <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   2a294:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   2a298:	1d07      	adds	r7, r0, #4
   2a29a:	f1b9 0f00 	cmp.w	r9, #0
   2a29e:	d12a      	bne.n	2a2f6 <bt_smp_request_ltk+0x7c>
   2a2a0:	e9dd 2300 	ldrd	r2, r3, [sp]
   2a2a4:	4313      	orrs	r3, r2
   2a2a6:	d126      	bne.n	2a2f6 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2a2a8:	2103      	movs	r1, #3
   2a2aa:	4638      	mov	r0, r7
   2a2ac:	f7ff fe8d 	bl	29fca <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2a2b0:	b308      	cbz	r0, 2a2f6 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2a2b2:	2101      	movs	r1, #1
   2a2b4:	4638      	mov	r0, r7
   2a2b6:	f7ff fe88 	bl	29fca <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2a2ba:	4606      	mov	r6, r0
   2a2bc:	b1d8      	cbz	r0, 2a2f6 <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   2a2be:	7d2c      	ldrb	r4, [r5, #20]
   2a2c0:	7b6b      	ldrb	r3, [r5, #13]
		memcpy(ltk, smp->tk, enc_size);
   2a2c2:	4640      	mov	r0, r8
	return MIN(req->max_key_size, rsp->max_key_size);
   2a2c4:	429c      	cmp	r4, r3
   2a2c6:	bf28      	it	cs
   2a2c8:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   2a2ca:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2a2ce:	4622      	mov	r2, r4
   2a2d0:	f7fe f95f 	bl	28592 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2a2d4:	2c0f      	cmp	r4, #15
   2a2d6:	d806      	bhi.n	2a2e6 <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   2a2d8:	4649      	mov	r1, r9
   2a2da:	f1c4 0210 	rsb	r2, r4, #16
   2a2de:	eb08 0004 	add.w	r0, r8, r4
   2a2e2:	f7fe f981 	bl	285e8 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2a2e6:	2101      	movs	r1, #1
   2a2e8:	4638      	mov	r0, r7
   2a2ea:	f7ff fea9 	bl	2a040 <atomic_set_bit>
}
   2a2ee:	4630      	mov	r0, r6
   2a2f0:	b003      	add	sp, #12
   2a2f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   2a2f6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2a2fa:	b983      	cbnz	r3, 2a31e <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   2a2fc:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2a300:	4632      	mov	r2, r6
   2a302:	2020      	movs	r0, #32
   2a304:	7a21      	ldrb	r1, [r4, #8]
   2a306:	f7f5 fbd3 	bl	1fab0 <bt_keys_find>
   2a30a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   2a30e:	b930      	cbnz	r0, 2a31e <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   2a310:	4632      	mov	r2, r6
   2a312:	2001      	movs	r0, #1
   2a314:	7a21      	ldrb	r1, [r4, #8]
   2a316:	f7f5 fbcb 	bl	1fab0 <bt_keys_find>
   2a31a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   2a31e:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   2a322:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   2a326:	b9ee      	cbnz	r6, 2a364 <bt_smp_request_ltk+0xea>
   2a328:	e9dd 2300 	ldrd	r2, r3, [sp]
   2a32c:	4313      	orrs	r3, r2
   2a32e:	d119      	bne.n	2a364 <bt_smp_request_ltk+0xea>
   2a330:	b388      	cbz	r0, 2a396 <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2a332:	89c3      	ldrh	r3, [r0, #14]
   2a334:	069a      	lsls	r2, r3, #26
   2a336:	d516      	bpl.n	2a366 <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   2a338:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2a33a:	f100 011a 	add.w	r1, r0, #26
   2a33e:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   2a340:	4640      	mov	r0, r8
   2a342:	f7fe f926 	bl	28592 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2a346:	2c0f      	cmp	r4, #15
   2a348:	d806      	bhi.n	2a358 <bt_smp_request_ltk+0xde>
			(void)memset(ltk + enc_size, 0,
   2a34a:	4631      	mov	r1, r6
   2a34c:	f1c4 0210 	rsb	r2, r4, #16
   2a350:	eb08 0004 	add.w	r0, r8, r4
   2a354:	f7fe f948 	bl	285e8 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2a358:	2101      	movs	r1, #1
   2a35a:	4638      	mov	r0, r7
   2a35c:	f7ff fe70 	bl	2a040 <atomic_set_bit>
		return true;
   2a360:	2601      	movs	r6, #1
   2a362:	e7c4      	b.n	2a2ee <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   2a364:	b1b8      	cbz	r0, 2a396 <bt_smp_request_ltk+0x11c>
   2a366:	89c3      	ldrh	r3, [r0, #14]
   2a368:	07db      	lsls	r3, r3, #31
   2a36a:	d514      	bpl.n	2a396 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   2a36c:	2208      	movs	r2, #8
   2a36e:	4669      	mov	r1, sp
   2a370:	3040      	adds	r0, #64	; 0x40
   2a372:	f7fe f8fe 	bl	28572 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   2a376:	b970      	cbnz	r0, 2a396 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   2a378:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   2a37c:	2202      	movs	r2, #2
   2a37e:	a90a      	add	r1, sp, #40	; 0x28
   2a380:	3048      	adds	r0, #72	; 0x48
   2a382:	f7fe f8f6 	bl	28572 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   2a386:	4606      	mov	r6, r0
   2a388:	b928      	cbnz	r0, 2a396 <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   2a38a:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   2a38e:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   2a390:	314a      	adds	r1, #74	; 0x4a
   2a392:	4622      	mov	r2, r4
   2a394:	e7d4      	b.n	2a340 <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2a396:	210f      	movs	r1, #15
   2a398:	4638      	mov	r0, r7
   2a39a:	f7ff fe16 	bl	29fca <atomic_test_bit>
   2a39e:	b120      	cbz	r0, 2a3aa <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2a3a0:	2202      	movs	r2, #2
   2a3a2:	2106      	movs	r1, #6
   2a3a4:	4620      	mov	r0, r4
   2a3a6:	f7ef fb29 	bl	199fc <bt_conn_security_changed>
	smp_reset(smp);
   2a3aa:	4628      	mov	r0, r5
   2a3ac:	f7ff feba 	bl	2a124 <smp_reset>
	return false;
   2a3b0:	2600      	movs	r6, #0
   2a3b2:	e79c      	b.n	2a2ee <bt_smp_request_ltk+0x74>
		return false;
   2a3b4:	4606      	mov	r6, r0
   2a3b6:	e79a      	b.n	2a2ee <bt_smp_request_ltk+0x74>

0002a3b8 <bt_smp_sign>:
   2a3b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a3bc:	4770      	bx	lr

0002a3be <bt_smp_start_security>:
{
   2a3be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (conn->role) {
   2a3c0:	78c3      	ldrb	r3, [r0, #3]
{
   2a3c2:	4604      	mov	r4, r0
	switch (conn->role) {
   2a3c4:	2b00      	cmp	r3, #0
   2a3c6:	d157      	bne.n	2a478 <bt_smp_start_security+0xba>
		smp = smp_chan_get(conn);
   2a3c8:	f7f3 fe56 	bl	1e078 <smp_chan_get>
		if (!smp) {
   2a3cc:	4605      	mov	r5, r0
   2a3ce:	2800      	cmp	r0, #0
   2a3d0:	d055      	beq.n	2a47e <bt_smp_start_security+0xc0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2a3d2:	1d06      	adds	r6, r0, #4
   2a3d4:	2103      	movs	r1, #3
   2a3d6:	4630      	mov	r0, r6
   2a3d8:	f7ff fdf7 	bl	29fca <atomic_test_bit>
   2a3dc:	b120      	cbz	r0, 2a3e8 <bt_smp_start_security+0x2a>
			return -EBUSY;
   2a3de:	f06f 040f 	mvn.w	r4, #15
}
   2a3e2:	4620      	mov	r0, r4
   2a3e4:	b003      	add	sp, #12
   2a3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2a3e8:	2101      	movs	r1, #1
   2a3ea:	4630      	mov	r0, r6
   2a3ec:	f7ff fded 	bl	29fca <atomic_test_bit>
   2a3f0:	2800      	cmp	r0, #0
   2a3f2:	d1f4      	bne.n	2a3de <bt_smp_start_security+0x20>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   2a3f4:	210b      	movs	r1, #11
   2a3f6:	1d20      	adds	r0, r4, #4
   2a3f8:	f7ff fde7 	bl	29fca <atomic_test_bit>
   2a3fc:	bb00      	cbnz	r0, 2a440 <bt_smp_start_security+0x82>
	if (!conn->le.keys) {
   2a3fe:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2a402:	b983      	cbnz	r3, 2a426 <bt_smp_start_security+0x68>
						     conn->id, &conn->le.dst);
   2a404:	f104 0790 	add.w	r7, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   2a408:	463a      	mov	r2, r7
   2a40a:	2020      	movs	r0, #32
   2a40c:	7a21      	ldrb	r1, [r4, #8]
   2a40e:	f7f5 fb4f 	bl	1fab0 <bt_keys_find>
   2a412:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   2a416:	b930      	cbnz	r0, 2a426 <bt_smp_start_security+0x68>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   2a418:	463a      	mov	r2, r7
   2a41a:	2004      	movs	r0, #4
   2a41c:	7a21      	ldrb	r1, [r4, #8]
   2a41e:	f7f5 fb47 	bl	1fab0 <bt_keys_find>
   2a422:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys ||
   2a426:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   2a42a:	b149      	cbz	r1, 2a440 <bt_smp_start_security+0x82>
   2a42c:	89cb      	ldrh	r3, [r1, #14]
   2a42e:	f003 0324 	and.w	r3, r3, #36	; 0x24
   2a432:	b12b      	cbz	r3, 2a440 <bt_smp_start_security+0x82>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   2a434:	7aa3      	ldrb	r3, [r4, #10]
   2a436:	2b02      	cmp	r3, #2
   2a438:	d908      	bls.n	2a44c <bt_smp_start_security+0x8e>
   2a43a:	7b4b      	ldrb	r3, [r1, #13]
   2a43c:	07db      	lsls	r3, r3, #31
   2a43e:	d405      	bmi.n	2a44c <bt_smp_start_security+0x8e>
			return smp_send_pairing_req(conn);
   2a440:	4620      	mov	r0, r4
}
   2a442:	b003      	add	sp, #12
   2a444:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			return smp_send_pairing_req(conn);
   2a448:	f7f4 b8a4 	b.w	1e594 <smp_send_pairing_req>
		err = bt_conn_le_start_encryption(conn,
   2a44c:	7b0b      	ldrb	r3, [r1, #12]
   2a44e:	4620      	mov	r0, r4
   2a450:	9300      	str	r3, [sp, #0]
   2a452:	f101 0218 	add.w	r2, r1, #24
   2a456:	f101 031a 	add.w	r3, r1, #26
   2a45a:	3110      	adds	r1, #16
   2a45c:	f7fe fb9c 	bl	28b98 <bt_conn_le_start_encryption>
		if (err) {
   2a460:	4604      	mov	r4, r0
   2a462:	2800      	cmp	r0, #0
   2a464:	d1bd      	bne.n	2a3e2 <bt_smp_start_security+0x24>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2a466:	4628      	mov	r0, r5
   2a468:	210b      	movs	r1, #11
   2a46a:	f7ff fde9 	bl	2a040 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2a46e:	2101      	movs	r1, #1
   2a470:	4630      	mov	r0, r6
   2a472:	f7ff fde5 	bl	2a040 <atomic_set_bit>
		return 0;
   2a476:	e7b4      	b.n	2a3e2 <bt_smp_start_security+0x24>
		return -EINVAL;
   2a478:	f06f 0415 	mvn.w	r4, #21
   2a47c:	e7b1      	b.n	2a3e2 <bt_smp_start_security+0x24>
			return -ENOTCONN;
   2a47e:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2a482:	e7ae      	b.n	2a3e2 <bt_smp_start_security+0x24>

0002a484 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a484:	1d03      	adds	r3, r0, #4
{
   2a486:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2a488:	4605      	mov	r5, r0
   2a48a:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a48c:	4618      	mov	r0, r3
   2a48e:	2103      	movs	r1, #3
   2a490:	f7ff fd9b 	bl	29fca <atomic_test_bit>
   2a494:	b1f0      	cbz	r0, 2a4d4 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   2a496:	4631      	mov	r1, r6
   2a498:	4628      	mov	r0, r5
   2a49a:	f7f4 fee1 	bl	1f260 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   2a49e:	2105      	movs	r1, #5
   2a4a0:	4628      	mov	r0, r5
   2a4a2:	f7ff fddd 	bl	2a060 <smp_create_pdu.isra.0>
	if (!buf) {
   2a4a6:	4604      	mov	r4, r0
   2a4a8:	b308      	cbz	r0, 2a4ee <smp_error+0x6a>
   2a4aa:	2101      	movs	r1, #1
   2a4ac:	3008      	adds	r0, #8
   2a4ae:	f7f5 ff2b 	bl	20308 <net_buf_simple_add>
	rsp->reason = reason;
   2a4b2:	7006      	strb	r6, [r0, #0]
   2a4b4:	2600      	movs	r6, #0
   2a4b6:	4622      	mov	r2, r4
   2a4b8:	4633      	mov	r3, r6
   2a4ba:	2106      	movs	r1, #6
   2a4bc:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   2a4c0:	9600      	str	r6, [sp, #0]
   2a4c2:	f7fe fd11 	bl	28ee8 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   2a4c6:	b118      	cbz	r0, 2a4d0 <smp_error+0x4c>
		net_buf_unref(buf);
   2a4c8:	4620      	mov	r0, r4
   2a4ca:	f7f5 fded 	bl	200a8 <net_buf_unref>
	return 0;
   2a4ce:	4630      	mov	r0, r6
}
   2a4d0:	b002      	add	sp, #8
   2a4d2:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2a4d4:	2101      	movs	r1, #1
   2a4d6:	4618      	mov	r0, r3
   2a4d8:	f7ff fd77 	bl	29fca <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a4dc:	2800      	cmp	r0, #0
   2a4de:	d1da      	bne.n	2a496 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2a4e0:	210f      	movs	r1, #15
   2a4e2:	4618      	mov	r0, r3
   2a4e4:	f7ff fd71 	bl	29fca <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2a4e8:	2800      	cmp	r0, #0
   2a4ea:	d1d4      	bne.n	2a496 <smp_error+0x12>
   2a4ec:	e7d7      	b.n	2a49e <smp_error+0x1a>
		return -ENOBUFS;
   2a4ee:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a4f2:	e7ed      	b.n	2a4d0 <smp_error+0x4c>

0002a4f4 <bt_smp_dhkey_ready>:
{
   2a4f4:	b570      	push	{r4, r5, r6, lr}
   2a4f6:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2a4f8:	2008      	movs	r0, #8
   2a4fa:	f7f3 fdfd 	bl	1e0f8 <smp_find>
	if (smp) {
   2a4fe:	4604      	mov	r4, r0
   2a500:	b1b8      	cbz	r0, 2a532 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2a502:	1d05      	adds	r5, r0, #4
   2a504:	2108      	movs	r1, #8
   2a506:	4628      	mov	r0, r5
   2a508:	f7ff fe01 	bl	2a10e <atomic_clear_bit>
	if (!dhkey) {
   2a50c:	b3b6      	cbz	r6, 2a57c <bt_smp_dhkey_ready+0x88>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2a50e:	2107      	movs	r1, #7
   2a510:	f7ff fdfd 	bl	2a10e <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, 32);
   2a514:	4631      	mov	r1, r6
   2a516:	2220      	movs	r2, #32
   2a518:	f104 0097 	add.w	r0, r4, #151	; 0x97
   2a51c:	f7fe f839 	bl	28592 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2a520:	210a      	movs	r1, #10
   2a522:	4628      	mov	r0, r5
   2a524:	f7ff fd51 	bl	29fca <atomic_test_bit>
   2a528:	b168      	cbz	r0, 2a546 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2a52a:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2a52c:	4628      	mov	r0, r5
   2a52e:	f7ff fd87 	bl	2a040 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2a532:	2007      	movs	r0, #7
   2a534:	f7f3 fde0 	bl	1e0f8 <smp_find>
		if (smp) {
   2a538:	4604      	mov	r4, r0
   2a53a:	b118      	cbz	r0, 2a544 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   2a53c:	f7f4 fa5c 	bl	1e9f8 <smp_dhkey_generate>
			if (err) {
   2a540:	4601      	mov	r1, r0
   2a542:	b9b8      	cbnz	r0, 2a574 <bt_smp_dhkey_ready+0x80>
}
   2a544:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2a546:	2110      	movs	r1, #16
   2a548:	4628      	mov	r0, r5
   2a54a:	f7ff fd3e 	bl	29fca <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2a54e:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2a550:	2800      	cmp	r0, #0
   2a552:	d1eb      	bne.n	2a52c <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2a554:	4628      	mov	r0, r5
   2a556:	f7ff fd38 	bl	29fca <atomic_test_bit>
   2a55a:	2800      	cmp	r0, #0
   2a55c:	d0e9      	beq.n	2a532 <bt_smp_dhkey_ready+0x3e>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
   2a55e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   2a562:	78db      	ldrb	r3, [r3, #3]
   2a564:	2b00      	cmp	r3, #0
   2a566:	d1e4      	bne.n	2a532 <bt_smp_dhkey_ready+0x3e>
			return compute_and_send_master_dhcheck(smp);
   2a568:	4620      	mov	r0, r4
   2a56a:	f7f3 fea9 	bl	1e2c0 <compute_and_send_master_dhcheck>
		if (err) {
   2a56e:	4601      	mov	r1, r0
   2a570:	2800      	cmp	r0, #0
   2a572:	d0de      	beq.n	2a532 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   2a574:	4620      	mov	r0, r4
   2a576:	f7ff ff85 	bl	2a484 <smp_error>
   2a57a:	e7da      	b.n	2a532 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2a57c:	210b      	movs	r1, #11
   2a57e:	e7f9      	b.n	2a574 <bt_smp_dhkey_ready+0x80>

0002a580 <bt_smp_disconnected>:
{
   2a580:	b570      	push	{r4, r5, r6, lr}
   2a582:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2a584:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   2a588:	f850 3bf0 	ldr.w	r3, [r0], #240
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a58c:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2a58e:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
	(void)k_work_cancel_delayable(&smp->work);
   2a592:	f7f9 fc85 	bl	23ea0 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a596:	2103      	movs	r1, #3
   2a598:	4620      	mov	r0, r4
   2a59a:	f7ff fd16 	bl	29fca <atomic_test_bit>
   2a59e:	b1a0      	cbz	r0, 2a5ca <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2a5a0:	2108      	movs	r1, #8
   2a5a2:	4630      	mov	r0, r6
   2a5a4:	f7f4 fe5c 	bl	1f260 <smp_pairing_complete>
	if (keys) {
   2a5a8:	b13d      	cbz	r5, 2a5ba <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2a5aa:	89eb      	ldrh	r3, [r5, #14]
   2a5ac:	b113      	cbz	r3, 2a5b4 <bt_smp_disconnected+0x34>
   2a5ae:	7b6b      	ldrb	r3, [r5, #13]
   2a5b0:	079b      	lsls	r3, r3, #30
   2a5b2:	d502      	bpl.n	2a5ba <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2a5b4:	4628      	mov	r0, r5
   2a5b6:	f7f5 fadb 	bl	1fb70 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   2a5ba:	4630      	mov	r0, r6
}
   2a5bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   2a5c0:	f44f 7204 	mov.w	r2, #528	; 0x210
   2a5c4:	2100      	movs	r1, #0
   2a5c6:	f7fe b80f 	b.w	285e8 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2a5ca:	2101      	movs	r1, #1
   2a5cc:	4620      	mov	r0, r4
   2a5ce:	f7ff fcfc 	bl	29fca <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2a5d2:	2800      	cmp	r0, #0
   2a5d4:	d1e4      	bne.n	2a5a0 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2a5d6:	210f      	movs	r1, #15
   2a5d8:	4620      	mov	r0, r4
   2a5da:	f7ff fcf6 	bl	29fca <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2a5de:	2800      	cmp	r0, #0
   2a5e0:	d1de      	bne.n	2a5a0 <bt_smp_disconnected+0x20>
   2a5e2:	e7e1      	b.n	2a5a8 <bt_smp_disconnected+0x28>

0002a5e4 <id_add>:
	bt_id_add(keys);
   2a5e4:	f7ee b95c 	b.w	188a0 <bt_id_add>

0002a5e8 <bt_keys_get_type>:
{
   2a5e8:	b570      	push	{r4, r5, r6, lr}
   2a5ea:	4604      	mov	r4, r0
   2a5ec:	460d      	mov	r5, r1
   2a5ee:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   2a5f0:	f7f5 fa5e 	bl	1fab0 <bt_keys_find>
	if (keys) {
   2a5f4:	b938      	cbnz	r0, 2a606 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   2a5f6:	4631      	mov	r1, r6
   2a5f8:	4628      	mov	r0, r5
   2a5fa:	f7f5 fa19 	bl	1fa30 <bt_keys_get_addr>
	if (!keys) {
   2a5fe:	b110      	cbz	r0, 2a606 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   2a600:	89c3      	ldrh	r3, [r0, #14]
   2a602:	431c      	orrs	r4, r3
   2a604:	81c4      	strh	r4, [r0, #14]
}
   2a606:	bd70      	pop	{r4, r5, r6, pc}

0002a608 <bt_keys_add_type>:
	keys->keys |= type;
   2a608:	89c3      	ldrh	r3, [r0, #14]
   2a60a:	4319      	orrs	r1, r3
   2a60c:	81c1      	strh	r1, [r0, #14]
}
   2a60e:	4770      	bx	lr

0002a610 <fixed_data_unref>:
}
   2a610:	4770      	bx	lr

0002a612 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2a612:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2a614:	6849      	ldr	r1, [r1, #4]
   2a616:	6809      	ldr	r1, [r1, #0]
   2a618:	f7f5 bbfe 	b.w	1fe18 <net_buf_alloc_len>

0002a61c <net_buf_simple_init_with_data>:
	buf->size  = size;
   2a61c:	b292      	uxth	r2, r2
	buf->__buf = data;
   2a61e:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2a620:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2a622:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2a624:	8082      	strh	r2, [r0, #4]
}
   2a626:	4770      	bx	lr

0002a628 <net_buf_simple_push_u8>:
{
   2a628:	b510      	push	{r4, lr}
   2a62a:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   2a62c:	2101      	movs	r1, #1
   2a62e:	f7f5 fe07 	bl	20240 <net_buf_simple_push>
	*data = val;
   2a632:	7004      	strb	r4, [r0, #0]
}
   2a634:	bd10      	pop	{r4, pc}

0002a636 <net_buf_simple_pull_u8>:
{
   2a636:	b510      	push	{r4, lr}
	val = buf->data[0];
   2a638:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   2a63a:	2101      	movs	r1, #1
	val = buf->data[0];
   2a63c:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2a63e:	f7f5 fe21 	bl	20284 <net_buf_simple_pull>
}
   2a642:	4620      	mov	r0, r4
   2a644:	bd10      	pop	{r4, pc}

0002a646 <net_buf_simple_pull_le16>:
{
   2a646:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2a648:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2a64a:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2a64c:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2a64e:	f7f5 fe19 	bl	20284 <net_buf_simple_pull>
}
   2a652:	4620      	mov	r0, r4
   2a654:	bd10      	pop	{r4, pc}

0002a656 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   2a656:	6802      	ldr	r2, [r0, #0]
   2a658:	6880      	ldr	r0, [r0, #8]
}
   2a65a:	1a10      	subs	r0, r2, r0
   2a65c:	4770      	bx	lr

0002a65e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2a65e:	8883      	ldrh	r3, [r0, #4]
   2a660:	88c2      	ldrh	r2, [r0, #6]
   2a662:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2a664:	6803      	ldr	r3, [r0, #0]
   2a666:	6880      	ldr	r0, [r0, #8]
   2a668:	1a18      	subs	r0, r3, r0
}
   2a66a:	1a10      	subs	r0, r2, r0
   2a66c:	4770      	bx	lr

0002a66e <net_buf_simple_add_mem>:
{
   2a66e:	b538      	push	{r3, r4, r5, lr}
   2a670:	460d      	mov	r5, r1
   2a672:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2a674:	4611      	mov	r1, r2
   2a676:	f7f5 fe47 	bl	20308 <net_buf_simple_add>
   2a67a:	4622      	mov	r2, r4
   2a67c:	4629      	mov	r1, r5
}
   2a67e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2a682:	f7fd bf86 	b.w	28592 <memcpy>

0002a686 <net_buf_simple_add_u8>:
{
   2a686:	b510      	push	{r4, lr}
   2a688:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2a68a:	2101      	movs	r1, #1
   2a68c:	f7f5 fe3c 	bl	20308 <net_buf_simple_add>
	*u8 = val;
   2a690:	7004      	strb	r4, [r0, #0]
}
   2a692:	bd10      	pop	{r4, pc}

0002a694 <net_buf_simple_add_le16>:
{
   2a694:	b510      	push	{r4, lr}
   2a696:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   2a698:	2102      	movs	r1, #2
   2a69a:	f7f5 fe35 	bl	20308 <net_buf_simple_add>
	dst[0] = val;
   2a69e:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   2a6a0:	0a24      	lsrs	r4, r4, #8
   2a6a2:	7044      	strb	r4, [r0, #1]
}
   2a6a4:	bd10      	pop	{r4, pc}

0002a6a6 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a6a6:	6843      	ldr	r3, [r0, #4]
}
   2a6a8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a6aa:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2a6ac:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2a6ae:	600b      	str	r3, [r1, #0]
}
   2a6b0:	4770      	bx	lr

0002a6b2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a6b2:	6843      	ldr	r3, [r0, #4]
   2a6b4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2a6b6:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2a6b8:	4042      	eors	r2, r0
   2a6ba:	400a      	ands	r2, r1
   2a6bc:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2a6be:	605a      	str	r2, [r3, #4]
}
   2a6c0:	2000      	movs	r0, #0
   2a6c2:	4770      	bx	lr

0002a6c4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a6c4:	6843      	ldr	r3, [r0, #4]
}
   2a6c6:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a6c8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2a6ca:	6099      	str	r1, [r3, #8]
}
   2a6cc:	4770      	bx	lr

0002a6ce <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a6ce:	6843      	ldr	r3, [r0, #4]
}
   2a6d0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a6d2:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2a6d4:	60d9      	str	r1, [r3, #12]
}
   2a6d6:	4770      	bx	lr

0002a6d8 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a6d8:	6843      	ldr	r3, [r0, #4]
}
   2a6da:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a6dc:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2a6de:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   2a6e0:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2a6e2:	6053      	str	r3, [r2, #4]
}
   2a6e4:	4770      	bx	lr

0002a6e6 <nrf_gpio_cfg_sense_set>:
{
   2a6e6:	b513      	push	{r0, r1, r4, lr}
   2a6e8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a6ea:	a801      	add	r0, sp, #4
{
   2a6ec:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a6ee:	f7f5 febd 	bl	2046c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   2a6f2:	9b01      	ldr	r3, [sp, #4]
   2a6f4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2a6f8:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   2a6fc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   2a700:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   2a704:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   2a708:	b002      	add	sp, #8
   2a70a:	bd10      	pop	{r4, pc}

0002a70c <check_level_trigger_pins>:
	struct gpio_nrfx_data *data = get_port_data(port);
   2a70c:	6903      	ldr	r3, [r0, #16]
{
   2a70e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t out = data->pin_int_en;
   2a712:	68de      	ldr	r6, [r3, #12]
{
   2a714:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
   2a716:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   2a71a:	430a      	orrs	r2, r1
   2a71c:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t check_pins = level_pins;
   2a720:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
   2a722:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   2a724:	f04f 0a00 	mov.w	sl, #0
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   2a728:	f8d0 b004 	ldr.w	fp, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   2a72c:	691b      	ldr	r3, [r3, #16]
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   2a72e:	f8db 2004 	ldr.w	r2, [fp, #4]
    return p_reg->IN;
   2a732:	6915      	ldr	r5, [r2, #16]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   2a734:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   2a736:	ea26 0505 	bic.w	r5, r6, r5
	while (check_pins) {
   2a73a:	b91f      	cbnz	r7, 2a744 <check_level_trigger_pins+0x38>
}
   2a73c:	4628      	mov	r0, r5
   2a73e:	b003      	add	sp, #12
   2a740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   2a744:	423c      	tst	r4, r7
   2a746:	d01f      	beq.n	2a788 <check_level_trigger_pins+0x7c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2a748:	f89b 3008 	ldrb.w	r3, [fp, #8]
   2a74c:	f00a 091f 	and.w	r9, sl, #31
			if (!(level_pins & bit)) {
   2a750:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2a752:	ea49 1943 	orr.w	r9, r9, r3, lsl #5
			if (!(level_pins & bit)) {
   2a756:	d111      	bne.n	2a77c <check_level_trigger_pins+0x70>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a758:	a801      	add	r0, sp, #4
   2a75a:	f8cd 9004 	str.w	r9, [sp, #4]
   2a75e:	f7f5 fe85 	bl	2046c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2a762:	9b01      	ldr	r3, [sp, #4]
   2a764:	3380      	adds	r3, #128	; 0x80
   2a766:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   2a76a:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
   2a76e:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
   2a770:	bf02      	ittt	eq
   2a772:	f8d8 3000 	ldreq.w	r3, [r8]
   2a776:	4323      	orreq	r3, r4
   2a778:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2a77c:	2100      	movs	r1, #0
   2a77e:	4648      	mov	r0, r9
   2a780:	f7ff ffb1 	bl	2a6e6 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   2a784:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
   2a788:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   2a78c:	0064      	lsls	r4, r4, #1
   2a78e:	e7d4      	b.n	2a73a <check_level_trigger_pins+0x2e>

0002a790 <cfg_level_pins>:
{
   2a790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   2a794:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   2a796:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   2a798:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   2a79a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   2a79e:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   2a7a0:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   2a7a4:	4313      	orrs	r3, r2
   2a7a6:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   2a7aa:	b90c      	cbnz	r4, 2a7b0 <cfg_level_pins+0x20>
}
   2a7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   2a7b0:	4226      	tst	r6, r4
   2a7b2:	d010      	beq.n	2a7d6 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2a7b4:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2a7b6:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2a7ba:	40e9      	lsrs	r1, r5
   2a7bc:	f001 0101 	and.w	r1, r1, #1
   2a7c0:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2a7c4:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2a7c8:	b2c9      	uxtb	r1, r1
   2a7ca:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   2a7ce:	f7ff ff8a 	bl	2a6e6 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2a7d2:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   2a7d6:	3501      	adds	r5, #1
		bit <<= 1;
   2a7d8:	0076      	lsls	r6, r6, #1
   2a7da:	e7e6      	b.n	2a7aa <cfg_level_pins+0x1a>

0002a7dc <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(const struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->max_data_size_get(ipmdev);
   2a7dc:	6883      	ldr	r3, [r0, #8]
   2a7de:	689b      	ldr	r3, [r3, #8]
   2a7e0:	4718      	bx	r3

0002a7e2 <vipm_nrf_max_id_val_get>:
}
   2a7e2:	2000      	movs	r0, #0
   2a7e4:	4770      	bx	lr

0002a7e6 <vipm_nrf_1_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   2a7e6:	b508      	push	{r3, lr}
   2a7e8:	b139      	cbz	r1, 2a7fa <vipm_nrf_1_set_enabled+0x14>
   2a7ea:	202a      	movs	r0, #42	; 0x2a
   2a7ec:	f7eb fcc0 	bl	16170 <arch_irq_enable>
   2a7f0:	2001      	movs	r0, #1
   2a7f2:	f7f7 f89b 	bl	2192c <nrfx_ipc_receive_event_enable>
   2a7f6:	2000      	movs	r0, #0
   2a7f8:	bd08      	pop	{r3, pc}
   2a7fa:	2001      	movs	r0, #1
   2a7fc:	f7f7 f8b8 	bl	21970 <nrfx_ipc_receive_event_disable>
   2a800:	e7f9      	b.n	2a7f6 <vipm_nrf_1_set_enabled+0x10>

0002a802 <is_regular_addr_valid>:
{
   2a802:	b538      	push	{r3, r4, r5, lr}
   2a804:	4604      	mov	r4, r0
   2a806:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   2a808:	f000 fc3b 	bl	2b082 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   2a80c:	4284      	cmp	r4, r0
   2a80e:	d209      	bcs.n	2a824 <is_regular_addr_valid+0x22>
   2a810:	2c00      	cmp	r4, #0
   2a812:	db07      	blt.n	2a824 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   2a814:	42a8      	cmp	r0, r5
   2a816:	d305      	bcc.n	2a824 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   2a818:	442c      	add	r4, r5
	    len > flash_size ||
   2a81a:	4284      	cmp	r4, r0
   2a81c:	bf8c      	ite	hi
   2a81e:	2000      	movhi	r0, #0
   2a820:	2001      	movls	r0, #1
}
   2a822:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   2a824:	2000      	movs	r0, #0
   2a826:	e7fc      	b.n	2a822 <is_regular_addr_valid+0x20>

0002a828 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   2a828:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2a82c:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   2a82e:	6883      	ldr	r3, [r0, #8]
{
   2a830:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   2a832:	695b      	ldr	r3, [r3, #20]
   2a834:	4669      	mov	r1, sp
{
   2a836:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   2a838:	aa01      	add	r2, sp, #4
   2a83a:	4798      	blx	r3

	while (layout_size--) {
   2a83c:	e9dd 1000 	ldrd	r1, r0, [sp]
   2a840:	2300      	movs	r3, #0
	off_t end = 0;
   2a842:	461d      	mov	r5, r3
	off_t group_offs = 0;
   2a844:	469e      	mov	lr, r3
	size_t page_count = 0;
   2a846:	469c      	mov	ip, r3
   2a848:	f100 38ff 	add.w	r8, r0, #4294967295
	while (layout_size--) {
   2a84c:	f1b8 3fff 	cmp.w	r8, #4294967295
   2a850:	d102      	bne.n	2a858 <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   2a852:	f06f 0015 	mvn.w	r0, #21
   2a856:	e018      	b.n	2a88a <flash_get_page_info+0x62>
		if (use_addr) {
   2a858:	680a      	ldr	r2, [r1, #0]
   2a85a:	b1cf      	cbz	r7, 2a890 <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   2a85c:	6848      	ldr	r0, [r1, #4]
   2a85e:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
   2a862:	42a5      	cmp	r5, r4
   2a864:	f108 38ff 	add.w	r8, r8, #4294967295
   2a868:	dd17      	ble.n	2a89a <flash_get_page_info+0x72>
   2a86a:	b103      	cbz	r3, 2a86e <flash_get_page_info+0x46>
   2a86c:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   2a86e:	9b00      	ldr	r3, [sp, #0]
   2a870:	685b      	ldr	r3, [r3, #4]
   2a872:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   2a874:	b177      	cbz	r7, 2a894 <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   2a876:	eba4 040e 	sub.w	r4, r4, lr
   2a87a:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   2a87e:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   2a880:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   2a884:	4464      	add	r4, ip
			info->start_offset = group_offs +
   2a886:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   2a888:	60b4      	str	r4, [r6, #8]
}
   2a88a:	b002      	add	sp, #8
   2a88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   2a890:	4415      	add	r5, r2
   2a892:	e7e6      	b.n	2a862 <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
   2a894:	eba4 040c 	sub.w	r4, r4, ip
   2a898:	e7f1      	b.n	2a87e <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   2a89a:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   2a89c:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   2a89e:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   2a8a2:	3108      	adds	r1, #8
   2a8a4:	2301      	movs	r3, #1
   2a8a6:	e7d1      	b.n	2a84c <flash_get_page_info+0x24>

0002a8a8 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2a8a8:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   2a8aa:	2201      	movs	r2, #1
   2a8ac:	f7ff bfbc 	b.w	2a828 <flash_get_page_info>

0002a8b0 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2a8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   2a8b4:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   2a8b6:	6883      	ldr	r3, [r0, #8]
{
   2a8b8:	b086      	sub	sp, #24
   2a8ba:	4688      	mov	r8, r1
   2a8bc:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   2a8be:	695b      	ldr	r3, [r3, #20]
   2a8c0:	aa02      	add	r2, sp, #8
   2a8c2:	a901      	add	r1, sp, #4
   2a8c4:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   2a8c6:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   2a8c8:	4625      	mov	r5, r4
   2a8ca:	9b02      	ldr	r3, [sp, #8]
   2a8cc:	42ab      	cmp	r3, r5
   2a8ce:	d802      	bhi.n	2a8d6 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2a8d0:	b006      	add	sp, #24
   2a8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   2a8d6:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   2a8d8:	9f01      	ldr	r7, [sp, #4]
   2a8da:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   2a8de:	687b      	ldr	r3, [r7, #4]
   2a8e0:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2a8e2:	683a      	ldr	r2, [r7, #0]
   2a8e4:	eb0a 0306 	add.w	r3, sl, r6
   2a8e8:	42b2      	cmp	r2, r6
   2a8ea:	d802      	bhi.n	2a8f2 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2a8ec:	469a      	mov	sl, r3
   2a8ee:	3501      	adds	r5, #1
   2a8f0:	e7eb      	b.n	2a8ca <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   2a8f2:	4649      	mov	r1, r9
   2a8f4:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   2a8f6:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2a8f8:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2a8fa:	47c0      	blx	r8
   2a8fc:	2800      	cmp	r0, #0
   2a8fe:	d0e7      	beq.n	2a8d0 <flash_page_foreach+0x20>
			off += page_info.size;
   2a900:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2a902:	3601      	adds	r6, #1
			off += page_info.size;
   2a904:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   2a906:	e7ec      	b.n	2a8e2 <flash_page_foreach+0x32>

0002a908 <uarte_nrfx_config_get>:
{
   2a908:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2a90a:	6902      	ldr	r2, [r0, #16]
   2a90c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2a910:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2a914:	2000      	movs	r0, #0
   2a916:	4770      	bx	lr

0002a918 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2a918:	6843      	ldr	r3, [r0, #4]
   2a91a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2a91c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2a920:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2a924:	4770      	bx	lr

0002a926 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   2a926:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2a928:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a92a:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2a92e:	b940      	cbnz	r0, 2a942 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2a930:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2a932:	0712      	lsls	r2, r2, #28
   2a934:	d406      	bmi.n	2a944 <is_tx_ready+0x1e>
   2a936:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   2a93a:	3800      	subs	r0, #0
   2a93c:	bf18      	it	ne
   2a93e:	2001      	movne	r0, #1
   2a940:	4770      	bx	lr
   2a942:	2001      	movs	r0, #1
}
   2a944:	4770      	bx	lr

0002a946 <user_callback>:
	if (data->async->user_callback) {
   2a946:	6903      	ldr	r3, [r0, #16]
   2a948:	68da      	ldr	r2, [r3, #12]
   2a94a:	6813      	ldr	r3, [r2, #0]
   2a94c:	b10b      	cbz	r3, 2a952 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   2a94e:	6852      	ldr	r2, [r2, #4]
   2a950:	4718      	bx	r3
}
   2a952:	4770      	bx	lr

0002a954 <notify_uart_rx_rdy>:
{
   2a954:	b570      	push	{r4, r5, r6, lr}
   2a956:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2a958:	6906      	ldr	r6, [r0, #16]
{
   2a95a:	4604      	mov	r4, r0
   2a95c:	460d      	mov	r5, r1
	struct uart_event evt = {
   2a95e:	2214      	movs	r2, #20
   2a960:	2100      	movs	r1, #0
   2a962:	a801      	add	r0, sp, #4
   2a964:	f7fd fe40 	bl	285e8 <memset>
   2a968:	2302      	movs	r3, #2
   2a96a:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   2a96e:	68f3      	ldr	r3, [r6, #12]
	user_callback(dev, &evt);
   2a970:	4620      	mov	r0, r4
	struct uart_event evt = {
   2a972:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2a974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
	user_callback(dev, &evt);
   2a976:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2a978:	e9cd 3503 	strd	r3, r5, [sp, #12]
   2a97c:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   2a97e:	f7ff ffe2 	bl	2a946 <user_callback>
}
   2a982:	b006      	add	sp, #24
   2a984:	bd70      	pop	{r4, r5, r6, pc}

0002a986 <notify_rx_buf_release>:
{
   2a986:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*buf) {
   2a988:	680f      	ldr	r7, [r1, #0]
{
   2a98a:	4606      	mov	r6, r0
   2a98c:	460c      	mov	r4, r1
   2a98e:	4615      	mov	r5, r2
   2a990:	b087      	sub	sp, #28
	if (*buf) {
   2a992:	b187      	cbz	r7, 2a9b6 <notify_rx_buf_release+0x30>
		struct uart_event evt = {
   2a994:	2100      	movs	r1, #0
   2a996:	2214      	movs	r2, #20
   2a998:	a801      	add	r0, sp, #4
   2a99a:	f7fd fe25 	bl	285e8 <memset>
   2a99e:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   2a9a0:	4630      	mov	r0, r6
   2a9a2:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   2a9a6:	f88d 3004 	strb.w	r3, [sp, #4]
   2a9aa:	9702      	str	r7, [sp, #8]
		user_callback(dev, &evt);
   2a9ac:	f7ff ffcb 	bl	2a946 <user_callback>
		if (clear) {
   2a9b0:	b10d      	cbz	r5, 2a9b6 <notify_rx_buf_release+0x30>
			*buf = NULL;
   2a9b2:	2300      	movs	r3, #0
   2a9b4:	6023      	str	r3, [r4, #0]
}
   2a9b6:	b007      	add	sp, #28
   2a9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a9ba <notify_rx_disable>:
{
   2a9ba:	b510      	push	{r4, lr}
   2a9bc:	b086      	sub	sp, #24
   2a9be:	4604      	mov	r4, r0
	struct uart_event evt = {
   2a9c0:	2214      	movs	r2, #20
   2a9c2:	2100      	movs	r1, #0
   2a9c4:	a801      	add	r0, sp, #4
   2a9c6:	f7fd fe0f 	bl	285e8 <memset>
   2a9ca:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   2a9cc:	4620      	mov	r0, r4
   2a9ce:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2a9d0:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   2a9d4:	f7ff ffb7 	bl	2a946 <user_callback>
}
   2a9d8:	b006      	add	sp, #24
   2a9da:	bd10      	pop	{r4, pc}

0002a9dc <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
   2a9dc:	6843      	ldr	r3, [r0, #4]
{
   2a9de:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
   2a9e0:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2a9e2:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
   2a9e4:	f04f 0020 	mov.w	r0, #32
   2a9e8:	f3ef 8511 	mrs	r5, BASEPRI
   2a9ec:	f380 8811 	msr	BASEPRI, r0
   2a9f0:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   2a9f4:	68e4      	ldr	r4, [r4, #12]
   2a9f6:	6d20      	ldr	r0, [r4, #80]	; 0x50
   2a9f8:	b190      	cbz	r0, 2aa20 <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
   2a9fa:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   2a9fc:	b998      	cbnz	r0, 2aa26 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
   2a9fe:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2aa02:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2aa06:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   2aa0a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2aa0e:	f042 0220 	orr.w	r2, r2, #32
   2aa12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   2aa16:	f385 8811 	msr	BASEPRI, r5
   2aa1a:	f3bf 8f6f 	isb	sy
}
   2aa1e:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
   2aa20:	f06f 000c 	mvn.w	r0, #12
   2aa24:	e7f7      	b.n	2aa16 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
   2aa26:	f06f 000f 	mvn.w	r0, #15
   2aa2a:	e7f4      	b.n	2aa16 <uarte_nrfx_rx_buf_rsp+0x3a>

0002aa2c <uarte_nrfx_callback_set>:
	if (!data->async) {
   2aa2c:	6903      	ldr	r3, [r0, #16]
   2aa2e:	68db      	ldr	r3, [r3, #12]
   2aa30:	b11b      	cbz	r3, 2aa3a <uarte_nrfx_callback_set+0xe>
	return 0;
   2aa32:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   2aa34:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
   2aa38:	4770      	bx	lr
		return -ENOTSUP;
   2aa3a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2aa3e:	4770      	bx	lr

0002aa40 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2aa40:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2aa42:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   2aa44:	68d0      	ldr	r0, [r2, #12]
{
   2aa46:	b510      	push	{r4, lr}
	return config->uarte_regs;
   2aa48:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   2aa4a:	b958      	cbnz	r0, 2aa64 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2aa4c:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2aa50:	b15c      	cbz	r4, 2aa6a <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
   2aa52:	7d52      	ldrb	r2, [r2, #21]
   2aa54:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2aa56:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2aa5a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2aa5e:	2201      	movs	r2, #1
   2aa60:	601a      	str	r2, [r3, #0]
}
   2aa62:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2aa64:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2aa68:	e7fb      	b.n	2aa62 <uarte_nrfx_poll_in+0x22>
		return -1;
   2aa6a:	f04f 30ff 	mov.w	r0, #4294967295
   2aa6e:	e7f8      	b.n	2aa62 <uarte_nrfx_poll_in+0x22>

0002aa70 <rx_timeout>:
{
   2aa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_timer_user_data_get(timer);
   2aa72:	6b46      	ldr	r6, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   2aa74:	68f3      	ldr	r3, [r6, #12]
   2aa76:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
   2aa7a:	f002 07ff 	and.w	r7, r2, #255	; 0xff
   2aa7e:	bb2a      	cbnz	r2, 2aacc <rx_timeout+0x5c>
    p_reg->INTENCLR = mask;
   2aa80:	2110      	movs	r1, #16
	const struct device *dev = data->dev;
   2aa82:	6835      	ldr	r5, [r6, #0]
	return config->uarte_regs;
   2aa84:	686a      	ldr	r2, [r5, #4]
   2aa86:	6812      	ldr	r2, [r2, #0]
   2aa88:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   2aa8c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
	if (read != data->async->rx_total_byte_cnt) {
   2aa90:	6e59      	ldr	r1, [r3, #100]	; 0x64
   2aa92:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   2aa94:	bf1e      	ittt	ne
   2aa96:	665a      	strne	r2, [r3, #100]	; 0x64
		data->async->rx_timeout_left = data->async->rx_timeout;
   2aa98:	6eda      	ldrne	r2, [r3, #108]	; 0x6c
   2aa9a:	675a      	strne	r2, [r3, #116]	; 0x74
		    - data->async->rx_total_user_byte_cnt;
   2aa9c:	e9d3 4219 	ldrd	r4, r2, [r3, #100]	; 0x64
	if (!hw_rx_counting_enabled(data) &&
   2aaa0:	1aa4      	subs	r4, r4, r2
		len = 0;
   2aaa2:	bf44      	itt	mi
   2aaa4:	2400      	movmi	r4, #0
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   2aaa6:	f8c3 20b0 	strmi.w	r2, [r3, #176]	; 0xb0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2aaaa:	e9d3 1215 	ldrd	r1, r2, [r3, #84]	; 0x54
   2aaae:	18a0      	adds	r0, r4, r2
   2aab0:	4288      	cmp	r0, r1
   2aab2:	d90c      	bls.n	2aace <rx_timeout+0x5e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   2aab4:	1a8c      	subs	r4, r1, r2
	if (len > 0) {
   2aab6:	2c00      	cmp	r4, #0
   2aab8:	dd03      	ble.n	2aac2 <rx_timeout+0x52>
		clipped = true;
   2aaba:	2701      	movs	r7, #1
   2aabc:	e00d      	b.n	2aada <rx_timeout+0x6a>
			data->async->rx_timeout_left -=
   2aabe:	1a52      	subs	r2, r2, r1
   2aac0:	675a      	str	r2, [r3, #116]	; 0x74
    p_reg->INTENSET = mask;
   2aac2:	2210      	movs	r2, #16
	return config->uarte_regs;
   2aac4:	686b      	ldr	r3, [r5, #4]
   2aac6:	681b      	ldr	r3, [r3, #0]
   2aac8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2aacc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len > 0) {
   2aace:	2c00      	cmp	r4, #0
   2aad0:	d0f7      	beq.n	2aac2 <rx_timeout+0x52>
				< data->async->rx_timeout_slab)) {
   2aad2:	e9d3 121c 	ldrd	r1, r2, [r3, #112]	; 0x70
		if (clipped ||
   2aad6:	428a      	cmp	r2, r1
   2aad8:	daf1      	bge.n	2aabe <rx_timeout+0x4e>
			notify_uart_rx_rdy(dev, len);
   2aada:	4621      	mov	r1, r4
   2aadc:	4628      	mov	r0, r5
   2aade:	f7ff ff39 	bl	2a954 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   2aae2:	68f0      	ldr	r0, [r6, #12]
   2aae4:	6d83      	ldr	r3, [r0, #88]	; 0x58
			data->async->rx_total_user_byte_cnt += len;
   2aae6:	6e81      	ldr	r1, [r0, #104]	; 0x68
			data->async->rx_offset += len;
   2aae8:	4423      	add	r3, r4
			data->async->rx_total_user_byte_cnt += len;
   2aaea:	4421      	add	r1, r4
			data->async->rx_offset += len;
   2aaec:	6583      	str	r3, [r0, #88]	; 0x58
			data->async->rx_total_user_byte_cnt += len;
   2aaee:	6681      	str	r1, [r0, #104]	; 0x68
		if (clipped) {
   2aaf0:	2f00      	cmp	r7, #0
   2aaf2:	d0e6      	beq.n	2aac2 <rx_timeout+0x52>
	z_impl_k_timer_stop(timer);
   2aaf4:	3078      	adds	r0, #120	; 0x78
   2aaf6:	f001 f846 	bl	2bb86 <z_impl_k_timer_stop>
}
   2aafa:	e7e2      	b.n	2aac2 <rx_timeout+0x52>

0002aafc <rx_flush>:
	return config->uarte_regs;
   2aafc:	6843      	ldr	r3, [r0, #4]
{
   2aafe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   2ab00:	681d      	ldr	r5, [r3, #0]
{
   2ab02:	4616      	mov	r6, r2
	size_t flush_len = buf ? len : sizeof(tmp_buf);
   2ab04:	460c      	mov	r4, r1
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   2ab06:	f8d5 753c 	ldr.w	r7, [r5, #1340]	; 0x53c
   2ab0a:	bb31      	cbnz	r1, 2ab5a <rx_flush+0x5e>
   2ab0c:	2605      	movs	r6, #5
		flush_buf = tmp_buf;
   2ab0e:	466b      	mov	r3, sp
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2ab10:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ab14:	2300      	movs	r3, #0
    p_reg->RXD.MAXCNT = length;
   2ab16:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ab1a:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   2ab1e:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ab22:	2201      	movs	r2, #1
   2ab24:	62ea      	str	r2, [r5, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ab26:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2ab2a:	2a00      	cmp	r2, #0
   2ab2c:	d0fb      	beq.n	2ab26 <rx_flush+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ab2e:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   2ab32:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   2ab36:	f8d5 053c 	ldr.w	r0, [r5, #1340]	; 0x53c
	if (!buf) {
   2ab3a:	b914      	cbnz	r4, 2ab42 <rx_flush+0x46>
			return rx_amount;
   2ab3c:	b2c0      	uxtb	r0, r0
}
   2ab3e:	b003      	add	sp, #12
   2ab40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rx_amount != prev_rx_amount) {
   2ab42:	4287      	cmp	r7, r0
   2ab44:	d1fa      	bne.n	2ab3c <rx_flush+0x40>
   2ab46:	4426      	add	r6, r4
	for (int i = 0; i < flush_len; i++) {
   2ab48:	42b4      	cmp	r4, r6
   2ab4a:	d101      	bne.n	2ab50 <rx_flush+0x54>
	return 0;
   2ab4c:	2000      	movs	r0, #0
   2ab4e:	e7f6      	b.n	2ab3e <rx_flush+0x42>
		if (buf[i] != dirty) {
   2ab50:	f814 3b01 	ldrb.w	r3, [r4], #1
   2ab54:	2b00      	cmp	r3, #0
   2ab56:	d0f7      	beq.n	2ab48 <rx_flush+0x4c>
   2ab58:	e7f0      	b.n	2ab3c <rx_flush+0x40>
		memset(buf, dirty, len);
   2ab5a:	2100      	movs	r1, #0
   2ab5c:	4620      	mov	r0, r4
   2ab5e:	f7fd fd43 	bl	285e8 <memset>
		flush_len = len;
   2ab62:	4623      	mov	r3, r4
   2ab64:	e7d4      	b.n	2ab10 <rx_flush+0x14>

0002ab66 <async_uart_release>:
{
   2ab66:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2ab68:	6903      	ldr	r3, [r0, #16]
{
   2ab6a:	4604      	mov	r4, r0
	__asm__ volatile(
   2ab6c:	f04f 0220 	mov.w	r2, #32
   2ab70:	f3ef 8611 	mrs	r6, BASEPRI
   2ab74:	f382 8811 	msr	BASEPRI, r2
   2ab78:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   2ab7c:	68dd      	ldr	r5, [r3, #12]
   2ab7e:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   2ab82:	ea23 0301 	bic.w	r3, r3, r1
   2ab86:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	if (!data->async->low_power_mask) {
   2ab8a:	b96b      	cbnz	r3, 2aba8 <async_uart_release+0x42>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   2ab8c:	2902      	cmp	r1, #2
   2ab8e:	d106      	bne.n	2ab9e <async_uart_release+0x38>
				rx_flush(dev, data->async->rx_flush_buffer,
   2ab90:	2205      	movs	r2, #5
   2ab92:	f105 01bc 	add.w	r1, r5, #188	; 0xbc
   2ab96:	f7ff ffb1 	bl	2aafc <rx_flush>
			data->async->rx_flush_cnt =
   2ab9a:	f885 00c1 	strb.w	r0, [r5, #193]	; 0xc1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2ab9e:	2200      	movs	r2, #0
	return config->uarte_regs;
   2aba0:	6863      	ldr	r3, [r4, #4]
   2aba2:	681b      	ldr	r3, [r3, #0]
   2aba4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   2aba8:	f386 8811 	msr	BASEPRI, r6
   2abac:	f3bf 8f6f 	isb	sy
}
   2abb0:	bd70      	pop	{r4, r5, r6, pc}

0002abb2 <nrf_gpio_cfg_output>:
{
   2abb2:	b507      	push	{r0, r1, r2, lr}
   2abb4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2abb6:	a801      	add	r0, sp, #4
   2abb8:	f7f6 f978 	bl	20eac <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2abbc:	9b01      	ldr	r3, [sp, #4]
   2abbe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2abc2:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   2abc6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2abca:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
   2abce:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   2abd2:	b003      	add	sp, #12
   2abd4:	f85d fb04 	ldr.w	pc, [sp], #4

0002abd8 <uarte_nrfx_tx_abort>:
	return config->uarte_regs;
   2abd8:	6843      	ldr	r3, [r0, #4]
{
   2abda:	b510      	push	{r4, lr}
	return config->uarte_regs;
   2abdc:	681c      	ldr	r4, [r3, #0]
	if (data->async->tx_buf == NULL) {
   2abde:	6903      	ldr	r3, [r0, #16]
   2abe0:	68d8      	ldr	r0, [r3, #12]
   2abe2:	6883      	ldr	r3, [r0, #8]
   2abe4:	b133      	cbz	r3, 2abf4 <uarte_nrfx_tx_abort+0x1c>
	z_impl_k_timer_stop(timer);
   2abe6:	3018      	adds	r0, #24
   2abe8:	f000 ffcd 	bl	2bb86 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2abec:	2301      	movs	r3, #1
	return 0;
   2abee:	2000      	movs	r0, #0
   2abf0:	60e3      	str	r3, [r4, #12]
}
   2abf2:	bd10      	pop	{r4, pc}
		return -EFAULT;
   2abf4:	f06f 000d 	mvn.w	r0, #13
   2abf8:	e7fb      	b.n	2abf2 <uarte_nrfx_tx_abort+0x1a>

0002abfa <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   2abfa:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2abfc:	6818      	ldr	r0, [r3, #0]
   2abfe:	f7ff bfeb 	b.w	2abd8 <uarte_nrfx_tx_abort>

0002ac02 <uarte_nrfx_rx_disable>:
{
   2ac02:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2ac04:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2ac06:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
   2ac08:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
   2ac0a:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   2ac0c:	6d03      	ldr	r3, [r0, #80]	; 0x50
   2ac0e:	b1b3      	cbz	r3, 2ac3e <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
   2ac10:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   2ac12:	b153      	cbz	r3, 2ac2a <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   2ac14:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   2ac18:	f023 0320 	bic.w	r3, r3, #32
   2ac1c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ac20:	2300      	movs	r3, #0
   2ac22:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2ac26:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   2ac2a:	3078      	adds	r0, #120	; 0x78
   2ac2c:	f000 ffab 	bl	2bb86 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2ac30:	2000      	movs	r0, #0
   2ac32:	68eb      	ldr	r3, [r5, #12]
   2ac34:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ac38:	2301      	movs	r3, #1
   2ac3a:	6063      	str	r3, [r4, #4]
}
   2ac3c:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2ac3e:	f06f 000d 	mvn.w	r0, #13
   2ac42:	e7fb      	b.n	2ac3c <uarte_nrfx_rx_disable+0x3a>

0002ac44 <tx_start>:
{
   2ac44:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   2ac46:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   2ac48:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2ac4a:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2ac4e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ac52:	2200      	movs	r2, #0
   2ac54:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2ac58:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2ac5c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2ac60:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2ac64:	6862      	ldr	r2, [r4, #4]
   2ac66:	06d2      	lsls	r2, r2, #27
   2ac68:	d50f      	bpl.n	2ac8a <tx_start+0x46>
	if (data->async) {
   2ac6a:	6902      	ldr	r2, [r0, #16]
   2ac6c:	68d2      	ldr	r2, [r2, #12]
   2ac6e:	b12a      	cbz	r2, 2ac7c <tx_start+0x38>
		data->async->low_power_mask |= mask;
   2ac70:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
   2ac74:	f041 0101 	orr.w	r1, r1, #1
   2ac78:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2ac7c:	2208      	movs	r2, #8
   2ac7e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2ac82:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2ac86:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ac8a:	2201      	movs	r2, #1
   2ac8c:	609a      	str	r2, [r3, #8]
}
   2ac8e:	bd10      	pop	{r4, pc}

0002ac90 <uarte_nrfx_tx>:
{
   2ac90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2ac94:	461c      	mov	r4, r3
	return config->uarte_regs;
   2ac96:	6843      	ldr	r3, [r0, #4]
{
   2ac98:	4617      	mov	r7, r2
	return config->uarte_regs;
   2ac9a:	681a      	ldr	r2, [r3, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2ac9c:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (!nrfx_is_in_ram(buf)) {
   2aca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
   2aca4:	4605      	mov	r5, r0
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2aca6:	6906      	ldr	r6, [r0, #16]
	if (!nrfx_is_in_ram(buf)) {
   2aca8:	d14e      	bne.n	2ad48 <uarte_nrfx_tx+0xb8>
	__asm__ volatile(
   2acaa:	f04f 0320 	mov.w	r3, #32
   2acae:	f3ef 8811 	mrs	r8, BASEPRI
   2acb2:	f383 8811 	msr	BASEPRI, r3
   2acb6:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   2acba:	68f3      	ldr	r3, [r6, #12]
   2acbc:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   2acc0:	f1bc 0f00 	cmp.w	ip, #0
   2acc4:	d008      	beq.n	2acd8 <uarte_nrfx_tx+0x48>
	__asm__ volatile(
   2acc6:	f388 8811 	msr	BASEPRI, r8
   2acca:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   2acce:	f06f 000f 	mvn.w	r0, #15
}
   2acd2:	b002      	add	sp, #8
   2acd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->async->tx_size = len;
   2acd8:	60df      	str	r7, [r3, #12]
    p_reg->INTENSET = mask;
   2acda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2acde:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	if (!is_tx_ready(dev)) {
   2ace2:	f7ff fe20 	bl	2a926 <is_tx_ready>
   2ace6:	68f3      	ldr	r3, [r6, #12]
   2ace8:	bb20      	cbnz	r0, 2ad34 <uarte_nrfx_tx+0xa4>
		data->async->pend_tx_buf = (uint8_t *)buf;
   2acea:	6119      	str	r1, [r3, #16]
   2acec:	f388 8811 	msr	BASEPRI, r8
   2acf0:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   2acf4:	7af3      	ldrb	r3, [r6, #11]
   2acf6:	2b01      	cmp	r3, #1
   2acf8:	d11a      	bne.n	2ad30 <uarte_nrfx_tx+0xa0>
	    && timeout != SYS_FOREVER_MS) {
   2acfa:	1c63      	adds	r3, r4, #1
   2acfc:	d018      	beq.n	2ad30 <uarte_nrfx_tx+0xa0>
		k_timer_start(&data->async->tx_timeout_timer, K_MSEC(timeout),
   2acfe:	68f5      	ldr	r5, [r6, #12]
   2ad00:	f240 30e7 	movw	r0, #999	; 0x3e7
   2ad04:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2ad08:	2100      	movs	r1, #0
   2ad0a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   2ad0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2ad12:	2300      	movs	r3, #0
   2ad14:	fbc6 0104 	smlal	r0, r1, r6, r4
   2ad18:	f7e5 fa92 	bl	10240 <__aeabi_uldivmod>
   2ad1c:	3518      	adds	r5, #24
   2ad1e:	4602      	mov	r2, r0
   2ad20:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   2ad22:	2000      	movs	r0, #0
   2ad24:	2100      	movs	r1, #0
   2ad26:	e9cd 0100 	strd	r0, r1, [sp]
   2ad2a:	4628      	mov	r0, r5
   2ad2c:	f7fa ff48 	bl	25bc0 <z_impl_k_timer_start>
	return 0;
   2ad30:	2000      	movs	r0, #0
   2ad32:	e7ce      	b.n	2acd2 <uarte_nrfx_tx+0x42>
		data->async->tx_amount = -1;
   2ad34:	f04f 32ff 	mov.w	r2, #4294967295
		tx_start(dev, buf, len);
   2ad38:	4628      	mov	r0, r5
		data->async->tx_amount = -1;
   2ad3a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		data->async->tx_buf = buf;
   2ad3e:	6099      	str	r1, [r3, #8]
		tx_start(dev, buf, len);
   2ad40:	463a      	mov	r2, r7
   2ad42:	f7ff ff7f 	bl	2ac44 <tx_start>
   2ad46:	e7d1      	b.n	2acec <uarte_nrfx_tx+0x5c>
		return -ENOTSUP;
   2ad48:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ad4c:	e7c1      	b.n	2acd2 <uarte_nrfx_tx+0x42>

0002ad4e <uarte_nrfx_isr_async>:
	return config->uarte_regs;
   2ad4e:	6843      	ldr	r3, [r0, #4]
{
   2ad50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return config->uarte_regs;
   2ad54:	681d      	ldr	r5, [r3, #0]
{
   2ad56:	4604      	mov	r4, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ad58:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
   2ad5c:	b089      	sub	sp, #36	; 0x24
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   2ad5e:	b171      	cbz	r1, 2ad7e <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ad60:	2200      	movs	r2, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2ad62:	6903      	ldr	r3, [r0, #16]
   2ad64:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   2ad68:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   2ad6c:	68da      	ldr	r2, [r3, #12]
   2ad6e:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
   2ad72:	3301      	adds	r3, #1
   2ad74:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
}
   2ad78:	b009      	add	sp, #36	; 0x24
   2ad7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ad7e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2ad82:	b313      	cbz	r3, 2adca <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ad84:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   2ad88:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2ad8c:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
   2ad90:	2214      	movs	r2, #20
    p_reg->ERRORSRC = errsrc_mask;
   2ad92:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
   2ad96:	a803      	add	r0, sp, #12
   2ad98:	f7fd fc26 	bl	285e8 <memset>
   2ad9c:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   2ad9e:	07f0      	lsls	r0, r6, #31
	struct uart_event evt = {
   2ada0:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   2ada4:	f100 80f2 	bmi.w	2af8c <uarte_nrfx_isr_async+0x23e>
   2ada8:	07b1      	lsls	r1, r6, #30
   2adaa:	f100 80f1 	bmi.w	2af90 <uarte_nrfx_isr_async+0x242>
   2adae:	0772      	lsls	r2, r6, #29
   2adb0:	f100 80f0 	bmi.w	2af94 <uarte_nrfx_isr_async+0x246>
   2adb4:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   2adb8:	4620      	mov	r0, r4
   2adba:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   2adbc:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   2adc0:	f7ff fdc1 	bl	2a946 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   2adc4:	4620      	mov	r0, r4
   2adc6:	f7ff ff1c 	bl	2ac02 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2adca:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   2adce:	b37b      	cbz	r3, 2ae30 <uarte_nrfx_isr_async+0xe2>
    return p_reg->INTENSET & mask;
   2add0:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   2add4:	06db      	lsls	r3, r3, #27
   2add6:	d52b      	bpl.n	2ae30 <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2add8:	f04f 0800 	mov.w	r8, #0
   2addc:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   2ade0:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   2ade4:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2ade6:	6927      	ldr	r7, [r4, #16]
	return config->uarte_regs;
   2ade8:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
   2adea:	2301      	movs	r3, #1
   2adec:	68f8      	ldr	r0, [r7, #12]
   2adee:	f880 30c4 	strb.w	r3, [r0, #196]	; 0xc4
	z_impl_k_timer_stop(timer);
   2adf2:	3078      	adds	r0, #120	; 0x78
   2adf4:	f000 fec7 	bl	2bb86 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   2adf8:	68fa      	ldr	r2, [r7, #12]
    return p_reg->RXD.AMOUNT;
   2adfa:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
   2adfe:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
	int rx_len = rx_amount - data->async->rx_offset;
   2ae02:	6d90      	ldr	r0, [r2, #88]	; 0x58
	data->async->rx_flush_cnt = 0;
   2ae04:	f882 80c1 	strb.w	r8, [r2, #193]	; 0xc1
	int rx_len = rx_amount - data->async->rx_offset;
   2ae08:	1a1b      	subs	r3, r3, r0
   2ae0a:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   2ae0c:	6e90      	ldr	r0, [r2, #104]	; 0x68
   2ae0e:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   2ae12:	4408      	add	r0, r1
	if (rx_len > 0) {
   2ae14:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   2ae16:	6690      	str	r0, [r2, #104]	; 0x68
	if (rx_len > 0) {
   2ae18:	dd02      	ble.n	2ae20 <uarte_nrfx_isr_async+0xd2>
		notify_uart_rx_rdy(dev, rx_len);
   2ae1a:	4620      	mov	r0, r4
   2ae1c:	f7ff fd9a 	bl	2a954 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   2ae20:	68f9      	ldr	r1, [r7, #12]
   2ae22:	f891 30c2 	ldrb.w	r3, [r1, #194]	; 0xc2
   2ae26:	2b00      	cmp	r3, #0
   2ae28:	f040 80b6 	bne.w	2af98 <uarte_nrfx_isr_async+0x24a>
		data->async->is_in_irq = false;
   2ae2c:	f881 30c4 	strb.w	r3, [r1, #196]	; 0xc4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ae30:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   2ae34:	b37b      	cbz	r3, 2ae96 <uarte_nrfx_isr_async+0x148>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ae36:	2100      	movs	r1, #0
	struct uart_event evt = {
   2ae38:	2214      	movs	r2, #20
   2ae3a:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
   2ae3e:	a803      	add	r0, sp, #12
   2ae40:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2ae44:	6926      	ldr	r6, [r4, #16]
	struct uart_event evt = {
   2ae46:	f7fd fbcf 	bl	285e8 <memset>
   2ae4a:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   2ae4c:	4620      	mov	r0, r4
   2ae4e:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   2ae50:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   2ae54:	f7ff fd77 	bl	2a946 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_MS) {
   2ae58:	68f6      	ldr	r6, [r6, #12]
   2ae5a:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
   2ae5c:	1c5f      	adds	r7, r3, #1
   2ae5e:	d01a      	beq.n	2ae96 <uarte_nrfx_isr_async+0x148>
   2ae60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2ae64:	f240 38e7 	movw	r8, #999	; 0x3e7
   2ae68:	f04f 0900 	mov.w	r9, #0
		data->async->rx_timeout_left = data->async->rx_timeout;
   2ae6c:	6773      	str	r3, [r6, #116]	; 0x74
			      K_MSEC(data->async->rx_timeout_slab),
   2ae6e:	6f33      	ldr	r3, [r6, #112]	; 0x70
   2ae70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2ae74:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   2ae78:	fbc0 8901 	smlal	r8, r9, r0, r1
   2ae7c:	2300      	movs	r3, #0
   2ae7e:	4640      	mov	r0, r8
   2ae80:	4649      	mov	r1, r9
   2ae82:	f7e5 f9dd 	bl	10240 <__aeabi_uldivmod>
   2ae86:	4602      	mov	r2, r0
   2ae88:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   2ae8a:	e9cd 0100 	strd	r0, r1, [sp]
   2ae8e:	f106 0078 	add.w	r0, r6, #120	; 0x78
   2ae92:	f7fa fe95 	bl	25bc0 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ae96:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO)) {
   2ae9a:	b323      	cbz	r3, 2aee6 <uarte_nrfx_isr_async+0x198>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ae9c:	2300      	movs	r3, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2ae9e:	6926      	ldr	r6, [r4, #16]
	notify_rx_buf_release(dev, &data->async->rx_buf, true);
   2aea0:	2201      	movs	r2, #1
   2aea2:	68f1      	ldr	r1, [r6, #12]
   2aea4:	4620      	mov	r0, r4
   2aea6:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
   2aeaa:	3150      	adds	r1, #80	; 0x50
   2aeac:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   2aeb0:	f7ff fd69 	bl	2a986 <notify_rx_buf_release>
	notify_rx_buf_release(dev, &data->async->rx_next_buf, true);
   2aeb4:	68f1      	ldr	r1, [r6, #12]
   2aeb6:	2201      	movs	r2, #1
   2aeb8:	4620      	mov	r0, r4
   2aeba:	315c      	adds	r1, #92	; 0x5c
   2aebc:	f7ff fd63 	bl	2a986 <notify_rx_buf_release>
	if (!data->async->rx_enabled) {
   2aec0:	68f3      	ldr	r3, [r6, #12]
   2aec2:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   2aec6:	b91a      	cbnz	r2, 2aed0 <uarte_nrfx_isr_async+0x182>
		(void)rx_flush(dev, NULL, 0);
   2aec8:	4611      	mov	r1, r2
   2aeca:	4620      	mov	r0, r4
   2aecc:	f7ff fe16 	bl	2aafc <rx_flush>
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2aed0:	6863      	ldr	r3, [r4, #4]
   2aed2:	685b      	ldr	r3, [r3, #4]
   2aed4:	06d8      	lsls	r0, r3, #27
   2aed6:	d503      	bpl.n	2aee0 <uarte_nrfx_isr_async+0x192>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   2aed8:	2102      	movs	r1, #2
   2aeda:	4620      	mov	r0, r4
   2aedc:	f7ff fe43 	bl	2ab66 <async_uart_release>
	notify_rx_disable(dev);
   2aee0:	4620      	mov	r0, r4
   2aee2:	f7ff fd6a 	bl	2a9ba <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2aee6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   2aeea:	b1db      	cbz	r3, 2af24 <uarte_nrfx_isr_async+0x1d6>
    return p_reg->INTENSET & mask;
   2aeec:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   2aef0:	05d9      	lsls	r1, r3, #23
   2aef2:	d517      	bpl.n	2af24 <uarte_nrfx_isr_async+0x1d6>
	return config->uarte_regs;
   2aef4:	6863      	ldr	r3, [r4, #4]
   2aef6:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2aef8:	f04f 0120 	mov.w	r1, #32
   2aefc:	f3ef 8211 	mrs	r2, BASEPRI
   2af00:	f381 8811 	msr	BASEPRI, r1
   2af04:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2af08:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2af0c:	b131      	cbz	r1, 2af1c <uarte_nrfx_isr_async+0x1ce>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2af0e:	2100      	movs	r1, #0
   2af10:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   2af14:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2af18:	2101      	movs	r1, #1
   2af1a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   2af1c:	f382 8811 	msr	BASEPRI, r2
   2af20:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2af24:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   2af28:	2b00      	cmp	r3, #0
   2af2a:	f43f af25 	beq.w	2ad78 <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   2af2e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   2af32:	025a      	lsls	r2, r3, #9
   2af34:	f57f af20 	bpl.w	2ad78 <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   2af38:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2af3a:	6926      	ldr	r6, [r4, #16]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2af3c:	e9d3 7300 	ldrd	r7, r3, [r3]
   2af40:	06db      	lsls	r3, r3, #27
   2af42:	d457      	bmi.n	2aff4 <uarte_nrfx_isr_async+0x2a6>
	if (!data->async->tx_buf) {
   2af44:	68f0      	ldr	r0, [r6, #12]
   2af46:	6882      	ldr	r2, [r0, #8]
   2af48:	2a00      	cmp	r2, #0
   2af4a:	d160      	bne.n	2b00e <uarte_nrfx_isr_async+0x2c0>
		if (data->async->pend_tx_buf) {
   2af4c:	6903      	ldr	r3, [r0, #16]
   2af4e:	2b00      	cmp	r3, #0
   2af50:	f43f af12 	beq.w	2ad78 <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   2af54:	f04f 0320 	mov.w	r3, #32
   2af58:	f3ef 8511 	mrs	r5, BASEPRI
   2af5c:	f383 8811 	msr	BASEPRI, r3
   2af60:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2af64:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
			if (nrf_uarte_event_check(uarte,
   2af68:	b15b      	cbz	r3, 2af82 <uarte_nrfx_isr_async+0x234>
				data->async->tx_buf = data->async->pend_tx_buf;
   2af6a:	68f3      	ldr	r3, [r6, #12]
				tx_start(dev, data->async->tx_buf,
   2af6c:	4620      	mov	r0, r4
				data->async->tx_buf = data->async->pend_tx_buf;
   2af6e:	6919      	ldr	r1, [r3, #16]
				data->async->pend_tx_buf = NULL;
   2af70:	611a      	str	r2, [r3, #16]
				data->async->tx_amount = -1;
   2af72:	f04f 32ff 	mov.w	r2, #4294967295
   2af76:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				tx_start(dev, data->async->tx_buf,
   2af7a:	68da      	ldr	r2, [r3, #12]
				data->async->tx_buf = data->async->pend_tx_buf;
   2af7c:	6099      	str	r1, [r3, #8]
				tx_start(dev, data->async->tx_buf,
   2af7e:	f7ff fe61 	bl	2ac44 <tx_start>
	__asm__ volatile(
   2af82:	f385 8811 	msr	BASEPRI, r5
   2af86:	f3bf 8f6f 	isb	sy
}
   2af8a:	e6f5      	b.n	2ad78 <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   2af8c:	2601      	movs	r6, #1
   2af8e:	e713      	b.n	2adb8 <uarte_nrfx_isr_async+0x6a>
   2af90:	2602      	movs	r6, #2
   2af92:	e711      	b.n	2adb8 <uarte_nrfx_isr_async+0x6a>
   2af94:	2604      	movs	r6, #4
   2af96:	e70f      	b.n	2adb8 <uarte_nrfx_isr_async+0x6a>
	notify_rx_buf_release(dev, &data->async->rx_buf, false);
   2af98:	2200      	movs	r2, #0
   2af9a:	4620      	mov	r0, r4
   2af9c:	3150      	adds	r1, #80	; 0x50
   2af9e:	f7ff fcf2 	bl	2a986 <notify_rx_buf_release>
	__asm__ volatile(
   2afa2:	f04f 0320 	mov.w	r3, #32
   2afa6:	f3ef 8111 	mrs	r1, BASEPRI
   2afaa:	f383 8811 	msr	BASEPRI, r3
   2afae:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   2afb2:	68fb      	ldr	r3, [r7, #12]
   2afb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   2afb6:	b1d2      	cbz	r2, 2afee <uarte_nrfx_isr_async+0x2a0>
		data->async->rx_buf = data->async->rx_next_buf;
   2afb8:	651a      	str	r2, [r3, #80]	; 0x50
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   2afba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   2afbc:	655a      	str	r2, [r3, #84]	; 0x54
		data->async->rx_next_buf = NULL;
   2afbe:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
   2afc0:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
		data->async->rx_offset = 0;
   2afc4:	659a      	str	r2, [r3, #88]	; 0x58
   2afc6:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   2afca:	b90b      	cbnz	r3, 2afd0 <uarte_nrfx_isr_async+0x282>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2afcc:	2301      	movs	r3, #1
   2afce:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
   2afd0:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
   2afd4:	f023 0320 	bic.w	r3, r3, #32
   2afd8:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
   2afdc:	f381 8811 	msr	BASEPRI, r1
   2afe0:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   2afe4:	2200      	movs	r2, #0
   2afe6:	68fb      	ldr	r3, [r7, #12]
   2afe8:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
   2afec:	e720      	b.n	2ae30 <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2afee:	2301      	movs	r3, #1
   2aff0:	6073      	str	r3, [r6, #4]
}
   2aff2:	e7f3      	b.n	2afdc <uarte_nrfx_isr_async+0x28e>
    p_reg->INTENCLR = mask;
   2aff4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   2aff8:	2101      	movs	r1, #1
   2affa:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
   2affe:	4620      	mov	r0, r4
   2b000:	f7ff fdb1 	bl	2ab66 <async_uart_release>
		if (!data->async->tx_size) {
   2b004:	68f3      	ldr	r3, [r6, #12]
   2b006:	68db      	ldr	r3, [r3, #12]
   2b008:	2b00      	cmp	r3, #0
   2b00a:	d19b      	bne.n	2af44 <uarte_nrfx_isr_async+0x1f6>
   2b00c:	e6b4      	b.n	2ad78 <uarte_nrfx_isr_async+0x2a>
	z_impl_k_timer_stop(timer);
   2b00e:	3018      	adds	r0, #24
   2b010:	f000 fdb9 	bl	2bb86 <z_impl_k_timer_stop>
	__asm__ volatile(
   2b014:	f04f 0320 	mov.w	r3, #32
   2b018:	f3ef 8211 	mrs	r2, BASEPRI
   2b01c:	f383 8811 	msr	BASEPRI, r3
   2b020:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   2b024:	68f3      	ldr	r3, [r6, #12]
   2b026:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   2b02a:	2900      	cmp	r1, #0
   2b02c:	bfac      	ite	ge
   2b02e:	f8d3 50b4 	ldrge.w	r5, [r3, #180]	; 0xb4
    return p_reg->TXD.AMOUNT;
   2b032:	f8d7 554c 	ldrlt.w	r5, [r7, #1356]	; 0x54c
	__asm__ volatile(
   2b036:	f382 8811 	msr	BASEPRI, r2
   2b03a:	f3bf 8f6f 	isb	sy
	struct uart_event evt = {
   2b03e:	2214      	movs	r2, #20
   2b040:	2100      	movs	r1, #0
   2b042:	a803      	add	r0, sp, #12
   2b044:	f7fd fad0 	bl	285e8 <memset>
		.data.tx.buf = data->async->tx_buf,
   2b048:	68f3      	ldr	r3, [r6, #12]
	user_callback(dev, &evt);
   2b04a:	4620      	mov	r0, r4
	struct uart_event evt = {
   2b04c:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   2b04e:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   2b050:	e9cd 2504 	strd	r2, r5, [sp, #16]
	if (amount == data->async->tx_size) {
   2b054:	68da      	ldr	r2, [r3, #12]
   2b056:	1aad      	subs	r5, r5, r2
   2b058:	bf18      	it	ne
   2b05a:	2501      	movne	r5, #1
    p_reg->INTENCLR = mask;
   2b05c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2b060:	f88d 500c 	strb.w	r5, [sp, #12]
   2b064:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   2b068:	2200      	movs	r2, #0
   2b06a:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
   2b06c:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
   2b06e:	f7ff fc6a 	bl	2a946 <user_callback>
   2b072:	e681      	b.n	2ad78 <uarte_nrfx_isr_async+0x2a>

0002b074 <entropy_cc3xx_rng_init>:
			return -EINVAL;
		}
	#endif

	return 0;
}
   2b074:	2000      	movs	r0, #0
   2b076:	4770      	bx	lr

0002b078 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   2b078:	f7f6 b978 	b.w	2136c <SystemCoreClockUpdate>

0002b07c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2b07c:	4700      	bx	r0

0002b07e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2b07e:	f000 bd49 	b.w	2bb14 <z_impl_k_busy_wait>

0002b082 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2b082:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   2b086:	4770      	bx	lr

0002b088 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2b088:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   2b08c:	4770      	bx	lr

0002b08e <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2b08e:	f44f 7080 	mov.w	r0, #256	; 0x100
   2b092:	4770      	bx	lr

0002b094 <metal_device_open>:
{
   2b094:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2b096:	460c      	mov	r4, r1
   2b098:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   2b09a:	4606      	mov	r6, r0
   2b09c:	b918      	cbnz	r0, 2b0a6 <metal_device_open+0x12>
		return -EINVAL;
   2b09e:	f06f 0015 	mvn.w	r0, #21
}
   2b0a2:	b002      	add	sp, #8
   2b0a4:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   2b0a6:	f7fd fa39 	bl	2851c <strlen>
   2b0aa:	2800      	cmp	r0, #0
   2b0ac:	d0f7      	beq.n	2b09e <metal_device_open+0xa>
   2b0ae:	2c00      	cmp	r4, #0
   2b0b0:	d0f5      	beq.n	2b09e <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   2b0b2:	4620      	mov	r0, r4
   2b0b4:	f7fd fa32 	bl	2851c <strlen>
   2b0b8:	2800      	cmp	r0, #0
   2b0ba:	d0f0      	beq.n	2b09e <metal_device_open+0xa>
   2b0bc:	2d00      	cmp	r5, #0
   2b0be:	d0ee      	beq.n	2b09e <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   2b0c0:	4630      	mov	r0, r6
   2b0c2:	a901      	add	r1, sp, #4
   2b0c4:	f7f6 fd3c 	bl	21b40 <metal_bus_find>
	if (error)
   2b0c8:	2800      	cmp	r0, #0
   2b0ca:	d1ea      	bne.n	2b0a2 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   2b0cc:	9801      	ldr	r0, [sp, #4]
   2b0ce:	6883      	ldr	r3, [r0, #8]
   2b0d0:	b11b      	cbz	r3, 2b0da <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   2b0d2:	462a      	mov	r2, r5
   2b0d4:	4621      	mov	r1, r4
   2b0d6:	4798      	blx	r3
	if (error)
   2b0d8:	e7e3      	b.n	2b0a2 <metal_device_open+0xe>
		return -ENODEV;
   2b0da:	f06f 0012 	mvn.w	r0, #18
   2b0de:	e7e0      	b.n	2b0a2 <metal_device_open+0xe>

0002b0e0 <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   2b0e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   2b0e2:	6804      	ldr	r4, [r0, #0]
   2b0e4:	6885      	ldr	r5, [r0, #8]
		: NULL);
   2b0e6:	1c66      	adds	r6, r4, #1
   2b0e8:	d00f      	beq.n	2b10a <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2b0ea:	42a9      	cmp	r1, r5
   2b0ec:	d232      	bcs.n	2b154 <metal_io_block_read+0x74>
		: NULL);
   2b0ee:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   2b0f0:	185e      	adds	r6, r3, r1
   2b0f2:	42ae      	cmp	r6, r5
		len = io->size - offset;
   2b0f4:	bf88      	it	hi
   2b0f6:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   2b0f8:	6a05      	ldr	r5, [r0, #32]
   2b0fa:	b155      	cbz	r5, 2b112 <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
   2b0fc:	9300      	str	r3, [sp, #0]
   2b0fe:	2305      	movs	r3, #5
   2b100:	47a8      	blx	r5
   2b102:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   2b104:	4618      	mov	r0, r3
   2b106:	b002      	add	sp, #8
   2b108:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   2b10a:	42a9      	cmp	r1, r5
   2b10c:	d222      	bcs.n	2b154 <metal_io_block_read+0x74>
   2b10e:	2400      	movs	r4, #0
   2b110:	e7ee      	b.n	2b0f0 <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
   2b112:	f3bf 8f5b 	dmb	ish
		while ( len && (
   2b116:	4621      	mov	r1, r4
   2b118:	4618      	mov	r0, r3
   2b11a:	2800      	cmp	r0, #0
   2b11c:	d0f2      	beq.n	2b104 <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
   2b11e:	ea42 0401 	orr.w	r4, r2, r1
   2b122:	07a4      	lsls	r4, r4, #30
   2b124:	d10a      	bne.n	2b13c <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   2b126:	2803      	cmp	r0, #3
   2b128:	dc0e      	bgt.n	2b148 <metal_io_block_read+0x68>
   2b12a:	3901      	subs	r1, #1
   2b12c:	4410      	add	r0, r2
		for (; len != 0; dest++, ptr++, len--)
   2b12e:	4282      	cmp	r2, r0
   2b130:	d0e8      	beq.n	2b104 <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
   2b132:	f811 4f01 	ldrb.w	r4, [r1, #1]!
			*(unsigned char *)dest =
   2b136:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   2b13a:	e7f8      	b.n	2b12e <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
   2b13c:	f811 4b01 	ldrb.w	r4, [r1], #1
			len--;
   2b140:	3801      	subs	r0, #1
			*(unsigned char *)dest =
   2b142:	f802 4b01 	strb.w	r4, [r2], #1
			len--;
   2b146:	e7e8      	b.n	2b11a <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   2b148:	f851 4b04 	ldr.w	r4, [r1], #4
   2b14c:	3804      	subs	r0, #4
   2b14e:	f842 4b04 	str.w	r4, [r2], #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   2b152:	e7e8      	b.n	2b126 <metal_io_block_read+0x46>
		return -ERANGE;
   2b154:	f06f 0321 	mvn.w	r3, #33	; 0x21
   2b158:	e7d4      	b.n	2b104 <metal_io_block_read+0x24>

0002b15a <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   2b15a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   2b15c:	6804      	ldr	r4, [r0, #0]
   2b15e:	6885      	ldr	r5, [r0, #8]
		: NULL);
   2b160:	1c66      	adds	r6, r4, #1
   2b162:	d00e      	beq.n	2b182 <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2b164:	42a9      	cmp	r1, r5
   2b166:	d230      	bcs.n	2b1ca <metal_io_block_write+0x70>
		: NULL);
   2b168:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   2b16a:	185e      	adds	r6, r3, r1
   2b16c:	42ae      	cmp	r6, r5
		len = io->size - offset;
   2b16e:	bf88      	it	hi
   2b170:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   2b172:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2b174:	b94d      	cbnz	r5, 2b18a <metal_io_block_write+0x30>
   2b176:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
   2b178:	b991      	cbnz	r1, 2b1a0 <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
   2b17a:	f3bf 8f5b 	dmb	ish
	retlen = len;
   2b17e:	4618      	mov	r0, r3
   2b180:	e006      	b.n	2b190 <metal_io_block_write+0x36>
	if (offset >= io->size)
   2b182:	42a9      	cmp	r1, r5
   2b184:	d221      	bcs.n	2b1ca <metal_io_block_write+0x70>
   2b186:	2400      	movs	r4, #0
   2b188:	e7ef      	b.n	2b16a <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
   2b18a:	9300      	str	r3, [sp, #0]
   2b18c:	2305      	movs	r3, #5
   2b18e:	47a8      	blx	r5
	}
	return retlen;
}
   2b190:	b002      	add	sp, #8
   2b192:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   2b194:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
   2b198:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   2b19a:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
   2b19e:	e7eb      	b.n	2b178 <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
   2b1a0:	ea44 0002 	orr.w	r0, r4, r2
   2b1a4:	0780      	lsls	r0, r0, #30
   2b1a6:	d1f5      	bne.n	2b194 <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2b1a8:	2903      	cmp	r1, #3
   2b1aa:	dc08      	bgt.n	2b1be <metal_io_block_write+0x64>
   2b1ac:	3a01      	subs	r2, #1
   2b1ae:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
   2b1b0:	428c      	cmp	r4, r1
   2b1b2:	d0e2      	beq.n	2b17a <metal_io_block_write+0x20>
				*(const unsigned char *)source;
   2b1b4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
   2b1b8:	f804 0b01 	strb.w	r0, [r4], #1
		for (; len != 0; ptr++, source++, len--)
   2b1bc:	e7f8      	b.n	2b1b0 <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   2b1be:	f852 0b04 	ldr.w	r0, [r2], #4
   2b1c2:	3904      	subs	r1, #4
   2b1c4:	f844 0b04 	str.w	r0, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2b1c8:	e7ee      	b.n	2b1a8 <metal_io_block_write+0x4e>
		return -ERANGE;
   2b1ca:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2b1ce:	e7df      	b.n	2b190 <metal_io_block_write+0x36>

0002b1d0 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   2b1d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   2b1d2:	6804      	ldr	r4, [r0, #0]
   2b1d4:	461d      	mov	r5, r3
		: NULL);
   2b1d6:	1c66      	adds	r6, r4, #1
   2b1d8:	6883      	ldr	r3, [r0, #8]
   2b1da:	d00e      	beq.n	2b1fa <metal_io_block_set+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2b1dc:	4299      	cmp	r1, r3
   2b1de:	d22d      	bcs.n	2b23c <metal_io_block_set+0x6c>
		: NULL);
   2b1e0:	440c      	add	r4, r1
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   2b1e2:	186e      	adds	r6, r5, r1
   2b1e4:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   2b1e6:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   2b1e8:	bf88      	it	hi
   2b1ea:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   2b1ec:	b186      	cbz	r6, 2b210 <metal_io_block_set+0x40>
		(*io->ops.block_set)(
   2b1ee:	2305      	movs	r3, #5
   2b1f0:	9500      	str	r5, [sp, #0]
   2b1f2:	47b0      	blx	r6
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   2b1f4:	4628      	mov	r0, r5
   2b1f6:	b002      	add	sp, #8
   2b1f8:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   2b1fa:	4299      	cmp	r1, r3
   2b1fc:	d21e      	bcs.n	2b23c <metal_io_block_set+0x6c>
   2b1fe:	2400      	movs	r4, #0
   2b200:	e7ef      	b.n	2b1e2 <metal_io_block_set+0x12>
			*(unsigned char *)ptr = (unsigned char) value;
   2b202:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   2b206:	3b01      	subs	r3, #1
   2b208:	b923      	cbnz	r3, 2b214 <metal_io_block_set+0x44>
		atomic_thread_fence(memory_order_seq_cst);
   2b20a:	f3bf 8f5b 	dmb	ish
   2b20e:	e7f1      	b.n	2b1f4 <metal_io_block_set+0x24>
   2b210:	462b      	mov	r3, r5
   2b212:	e7f9      	b.n	2b208 <metal_io_block_set+0x38>
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   2b214:	07a1      	lsls	r1, r4, #30
   2b216:	d1f4      	bne.n	2b202 <metal_io_block_set+0x32>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   2b218:	0611      	lsls	r1, r2, #24
   2b21a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   2b21e:	4311      	orrs	r1, r2
   2b220:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2b224:	2b03      	cmp	r3, #3
   2b226:	dc05      	bgt.n	2b234 <metal_io_block_set+0x64>
   2b228:	4423      	add	r3, r4
		for (; len != 0; ptr++, len--)
   2b22a:	429c      	cmp	r4, r3
   2b22c:	d0ed      	beq.n	2b20a <metal_io_block_set+0x3a>
			*(unsigned char *)ptr = (unsigned char) value;
   2b22e:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len != 0; ptr++, len--)
   2b232:	e7fa      	b.n	2b22a <metal_io_block_set+0x5a>
			*(unsigned int *)ptr = cint;
   2b234:	f844 1b04 	str.w	r1, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2b238:	3b04      	subs	r3, #4
   2b23a:	e7f3      	b.n	2b224 <metal_io_block_set+0x54>
		return -ERANGE;
   2b23c:	f06f 0521 	mvn.w	r5, #33	; 0x21
   2b240:	e7d8      	b.n	2b1f4 <metal_io_block_set+0x24>

0002b242 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   2b242:	2000      	movs	r0, #0
   2b244:	4770      	bx	lr

0002b246 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   2b246:	b430      	push	{r4, r5}
	if (!io->ops.offset_to_phys) {
   2b248:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   2b24a:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   2b24c:	b984      	cbnz	r4, 2b270 <metal_io_phys+0x2a>
		unsigned long page = (io->page_shift >=
   2b24e:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap && offset < io->size
   2b250:	6845      	ldr	r5, [r0, #4]
				     0 : offset >> io->page_shift);
   2b252:	291f      	cmp	r1, #31
   2b254:	bf98      	it	ls
   2b256:	fa23 f401 	lsrls.w	r4, r3, r1
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   2b25a:	b165      	cbz	r5, 2b276 <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   2b25c:	6881      	ldr	r1, [r0, #8]
   2b25e:	428b      	cmp	r3, r1
   2b260:	d209      	bcs.n	2b276 <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
   2b262:	6900      	ldr	r0, [r0, #16]
   2b264:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
   2b266:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   2b26a:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   2b26c:	bc30      	pop	{r4, r5}
   2b26e:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   2b270:	4623      	mov	r3, r4
}
   2b272:	bc30      	pop	{r4, r5}
	return io->ops.offset_to_phys(io, offset);
   2b274:	4718      	bx	r3
			: METAL_BAD_PHYS);
   2b276:	f04f 30ff 	mov.w	r0, #4294967295
   2b27a:	e7f7      	b.n	2b26c <metal_io_phys+0x26>

0002b27c <virtqueue_create>:
{
   2b27c:	b570      	push	{r4, r5, r6, lr}
   2b27e:	9c06      	ldr	r4, [sp, #24]
		vq->vq_queue_index = id;
   2b280:	8121      	strh	r1, [r4, #8]
		vq->callback = callback;
   2b282:	9904      	ldr	r1, [sp, #16]
		vq->vq_name = name;
   2b284:	e9c4 0200 	strd	r0, r2, [r4]
		vq->vq_nentries = ring->num_descs;
   2b288:	891a      	ldrh	r2, [r3, #8]
		vq->callback = callback;
   2b28a:	60e1      	str	r1, [r4, #12]
		vq->notify = notify;
   2b28c:	9905      	ldr	r1, [sp, #20]
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   2b28e:	1c96      	adds	r6, r2, #2
   2b290:	6121      	str	r1, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   2b292:	e9d3 1500 	ldrd	r1, r5, [r3]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   2b296:	eb01 1302 	add.w	r3, r1, r2, lsl #4
   2b29a:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   2b29c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
	      align - 1) & ~(align - 1));
   2b2a0:	1c6e      	adds	r6, r5, #1
   2b2a2:	4433      	add	r3, r6
   2b2a4:	426d      	negs	r5, r5
   2b2a6:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   2b2a8:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   2b2aa:	6983      	ldr	r3, [r0, #24]
	vr->desc = (struct vring_desc *)p;
   2b2ac:	e9c4 2105 	strd	r2, r1, [r4, #20]
		vq->vq_nentries = ring->num_descs;
   2b2b0:	8162      	strh	r2, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   2b2b2:	84a2      	strh	r2, [r4, #36]	; 0x24
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   2b2b4:	b96b      	cbnz	r3, 2b2d2 <virtqueue_create+0x56>
		int i;

		for (i = 0; i < size - 1; i++)
   2b2b6:	3a01      	subs	r2, #1
   2b2b8:	4293      	cmp	r3, r2
   2b2ba:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   2b2be:	db0a      	blt.n	2b2d6 <virtqueue_create+0x5a>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   2b2c0:	2300      	movs	r3, #0
   2b2c2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   2b2c6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   2b2ca:	7393      	strb	r3, [r2, #14]
   2b2cc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   2b2d0:	73d3      	strb	r3, [r2, #15]
}
   2b2d2:	2000      	movs	r0, #0
   2b2d4:	bd70      	pop	{r4, r5, r6, pc}
			vr->desc[i].next = i + 1;
   2b2d6:	3301      	adds	r3, #1
   2b2d8:	81c3      	strh	r3, [r0, #14]
		for (i = 0; i < size - 1; i++)
   2b2da:	e7ed      	b.n	2b2b8 <virtqueue_create+0x3c>

0002b2dc <virtqueue_add_buffer>:
{
   2b2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2b2e0:	2700      	movs	r7, #0
		head_idx = vq->vq_desc_head_idx;
   2b2e2:	f8b0 b02c 	ldrh.w	fp, [r0, #44]	; 0x2c
{
   2b2e6:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2b2e8:	465d      	mov	r5, fp
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   2b2ea:	46ba      	mov	sl, r7
{
   2b2ec:	b085      	sub	sp, #20
	needed = readable + writable;
   2b2ee:	18d6      	adds	r6, r2, r3
{
   2b2f0:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   2b2f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b2f4:	eb00 03cb 	add.w	r3, r0, fp, lsl #3
   2b2f8:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   2b2fa:	871e      	strh	r6, [r3, #56]	; 0x38
		if (i < needed - 1)
   2b2fc:	1e72      	subs	r2, r6, #1
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   2b2fe:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2b300:	f101 0804 	add.w	r8, r1, #4
		if (i < needed - 1)
   2b304:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2b306:	42be      	cmp	r6, r7
   2b308:	dc19      	bgt.n	2b33e <virtqueue_add_buffer+0x62>
		vq->vq_free_cnt -= needed;
   2b30a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   2b30c:	8962      	ldrh	r2, [r4, #10]
		vq->vq_free_cnt -= needed;
   2b30e:	1b9e      	subs	r6, r3, r6
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   2b310:	69e3      	ldr	r3, [r4, #28]
		vq->vq_desc_head_idx = idx;
   2b312:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   2b314:	84a6      	strh	r6, [r4, #36]	; 0x24
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   2b316:	1e51      	subs	r1, r2, #1
   2b318:	885a      	ldrh	r2, [r3, #2]
}
   2b31a:	2000      	movs	r0, #0
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   2b31c:	400a      	ands	r2, r1
   2b31e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   2b322:	f8a3 b004 	strh.w	fp, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   2b326:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
   2b32a:	69e2      	ldr	r2, [r4, #28]
   2b32c:	8853      	ldrh	r3, [r2, #2]
   2b32e:	3301      	adds	r3, #1
   2b330:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   2b332:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   2b334:	3301      	adds	r3, #1
   2b336:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   2b338:	b005      	add	sp, #20
   2b33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   2b33e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		dp = &desc[idx];
   2b340:	012a      	lsls	r2, r5, #4
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   2b342:	f858 1c04 	ldr.w	r1, [r8, #-4]
   2b346:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   2b34a:	9302      	str	r3, [sp, #8]
   2b34c:	6803      	ldr	r3, [r0, #0]
   2b34e:	9203      	str	r2, [sp, #12]
   2b350:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   2b352:	6883      	ldr	r3, [r0, #8]
   2b354:	f108 0808 	add.w	r8, r8, #8
   2b358:	4299      	cmp	r1, r3
   2b35a:	bf28      	it	cs
   2b35c:	f04f 31ff 	movcs.w	r1, #4294967295
   2b360:	f7ff ff71 	bl	2b246 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   2b364:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2b368:	5098      	str	r0, [r3, r2]
		dp->len = buf_list[i].len;
   2b36a:	f858 2c08 	ldr.w	r2, [r8, #-8]
			dp->flags |= VRING_DESC_F_NEXT;
   2b36e:	f885 a00d 	strb.w	sl, [r5, #13]
		dp->len = buf_list[i].len;
   2b372:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   2b374:	9a01      	ldr	r2, [sp, #4]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   2b376:	f8c5 a004 	str.w	sl, [r5, #4]
		if (i < needed - 1)
   2b37a:	4297      	cmp	r7, r2
			dp->flags |= VRING_DESC_F_NEXT;
   2b37c:	bfb6      	itet	lt
   2b37e:	2201      	movlt	r2, #1
		dp->flags = 0;
   2b380:	f885 a00c 	strbge.w	sl, [r5, #12]
			dp->flags |= VRING_DESC_F_NEXT;
   2b384:	732a      	strblt	r2, [r5, #12]
		if (i >= readable)
   2b386:	45b9      	cmp	r9, r7
			dp->flags |= VRING_DESC_F_WRITE;
   2b388:	bfd8      	it	le
   2b38a:	89aa      	ldrhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2b38c:	f107 0701 	add.w	r7, r7, #1
			dp->flags |= VRING_DESC_F_WRITE;
   2b390:	bfdc      	itt	le
   2b392:	f042 0202 	orrle.w	r2, r2, #2
   2b396:	81aa      	strhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2b398:	89ed      	ldrh	r5, [r5, #14]
   2b39a:	e7b4      	b.n	2b306 <virtqueue_add_buffer+0x2a>

0002b39c <virtqueue_get_buffer>:
{
   2b39c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   2b39e:	b350      	cbz	r0, 2b3f6 <virtqueue_get_buffer+0x5a>
   2b3a0:	6a05      	ldr	r5, [r0, #32]
   2b3a2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   2b3a4:	886c      	ldrh	r4, [r5, #2]
   2b3a6:	429c      	cmp	r4, r3
   2b3a8:	d030      	beq.n	2b40c <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   2b3aa:	1c5c      	adds	r4, r3, #1
   2b3ac:	85c4      	strh	r4, [r0, #46]	; 0x2e
   2b3ae:	8944      	ldrh	r4, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   2b3b0:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   2b3b4:	3c01      	subs	r4, #1
   2b3b6:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   2b3b8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   2b3bc:	686b      	ldr	r3, [r5, #4]
   2b3be:	b29e      	uxth	r6, r3
	if (len)
   2b3c0:	b109      	cbz	r1, 2b3c6 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   2b3c2:	68ad      	ldr	r5, [r5, #8]
   2b3c4:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   2b3c6:	f8d0 c018 	ldr.w	ip, [r0, #24]
   2b3ca:	b29b      	uxth	r3, r3
   2b3cc:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   2b3d0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   2b3d4:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   2b3d6:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   2b3d8:	442f      	add	r7, r5
	dxp->ndescs--;
   2b3da:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   2b3dc:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   2b3de:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   2b3e0:	898d      	ldrh	r5, [r1, #12]
   2b3e2:	076f      	lsls	r7, r5, #29
   2b3e4:	d50e      	bpl.n	2b404 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   2b3e6:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   2b3e8:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   2b3ea:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   2b3ec:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   2b3ee:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   2b3f0:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   2b3f2:	b102      	cbz	r2, 2b3f6 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   2b3f4:	8014      	strh	r4, [r2, #0]
}
   2b3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   2b3f8:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   2b3fa:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   2b3fc:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   2b3fe:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   2b402:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   2b404:	898d      	ldrh	r5, [r1, #12]
   2b406:	07ed      	lsls	r5, r5, #31
   2b408:	d4f6      	bmi.n	2b3f8 <virtqueue_get_buffer+0x5c>
   2b40a:	e7ec      	b.n	2b3e6 <virtqueue_get_buffer+0x4a>
		return NULL;
   2b40c:	2000      	movs	r0, #0
   2b40e:	e7f2      	b.n	2b3f6 <virtqueue_get_buffer+0x5a>

0002b410 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   2b410:	6983      	ldr	r3, [r0, #24]
   2b412:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   2b416:	6898      	ldr	r0, [r3, #8]
   2b418:	4770      	bx	lr

0002b41a <virtqueue_get_available_buffer>:
{
   2b41a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   2b41e:	f3bf 8f5b 	dmb	ish
{
   2b422:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2b424:	69c2      	ldr	r2, [r0, #28]
{
   2b426:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2b428:	8853      	ldrh	r3, [r2, #2]
   2b42a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
{
   2b42c:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2b42e:	428b      	cmp	r3, r1
   2b430:	d046      	beq.n	2b4c0 <virtqueue_get_available_buffer+0xa6>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   2b432:	1c4b      	adds	r3, r1, #1
   2b434:	8603      	strh	r3, [r0, #48]	; 0x30
   2b436:	8943      	ldrh	r3, [r0, #10]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   2b438:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   2b43c:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   2b43e:	400b      	ands	r3, r1
   2b440:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   2b444:	889a      	ldrh	r2, [r3, #4]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   2b446:	6983      	ldr	r3, [r0, #24]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   2b448:	b291      	uxth	r1, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   2b44a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   2b44e:	8032      	strh	r2, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   2b450:	f8d3 9000 	ldr.w	r9, [r3]
	if (!io->ops.phys_to_offset) {
   2b454:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   2b458:	bb5b      	cbnz	r3, 2b4b2 <virtqueue_get_available_buffer+0x98>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   2b45a:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   2b45e:	1c62      	adds	r2, r4, #1
   2b460:	bf09      	itett	eq
   2b462:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   2b466:	ea09 0404 	andne.w	r4, r9, r4
   2b46a:	681c      	ldreq	r4, [r3, #0]
   2b46c:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   2b470:	4621      	mov	r1, r4
   2b472:	4640      	mov	r0, r8
   2b474:	f7ff fee7 	bl	2b246 <metal_io_phys>
   2b478:	4581      	cmp	r9, r0
   2b47a:	d009      	beq.n	2b490 <virtqueue_get_available_buffer+0x76>
			offset += io->page_mask + 1;
   2b47c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2b480:	3301      	adds	r3, #1
   2b482:	441c      	add	r4, r3
		} while (offset < io->size);
   2b484:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2b488:	429c      	cmp	r4, r3
   2b48a:	d3f1      	bcc.n	2b470 <virtqueue_get_available_buffer+0x56>
		return METAL_BAD_OFFSET;
   2b48c:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   2b490:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   2b494:	1c43      	adds	r3, r0, #1
   2b496:	d011      	beq.n	2b4bc <virtqueue_get_available_buffer+0xa2>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2b498:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2b49c:	42a3      	cmp	r3, r4
   2b49e:	d90d      	bls.n	2b4bc <virtqueue_get_available_buffer+0xa2>
		: NULL);
   2b4a0:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   2b4a2:	8832      	ldrh	r2, [r6, #0]
   2b4a4:	69ab      	ldr	r3, [r5, #24]
   2b4a6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2b4aa:	689b      	ldr	r3, [r3, #8]
   2b4ac:	603b      	str	r3, [r7, #0]
}
   2b4ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   2b4b2:	4649      	mov	r1, r9
   2b4b4:	4640      	mov	r0, r8
   2b4b6:	4798      	blx	r3
   2b4b8:	4604      	mov	r4, r0
   2b4ba:	e7e9      	b.n	2b490 <virtqueue_get_available_buffer+0x76>
		: NULL);
   2b4bc:	2000      	movs	r0, #0
   2b4be:	e7f0      	b.n	2b4a2 <virtqueue_get_available_buffer+0x88>
		return NULL;
   2b4c0:	2000      	movs	r0, #0
   2b4c2:	e7f4      	b.n	2b4ae <virtqueue_get_available_buffer+0x94>

0002b4c4 <virtqueue_disable_cb>:
{
   2b4c4:	b530      	push	{r4, r5, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2b4c6:	2500      	movs	r5, #0
   2b4c8:	6802      	ldr	r2, [r0, #0]
   2b4ca:	6993      	ldr	r3, [r2, #24]
   2b4cc:	6912      	ldr	r2, [r2, #16]
   2b4ce:	f002 5400 	and.w	r4, r2, #536870912	; 0x20000000
   2b4d2:	ea54 0205 	orrs.w	r2, r4, r5
   2b4d6:	d014      	beq.n	2b502 <virtqueue_disable_cb+0x3e>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   2b4d8:	b94b      	cbnz	r3, 2b4ee <virtqueue_disable_cb+0x2a>
			vring_used_event(&vq->vq_ring) =
   2b4da:	69c2      	ldr	r2, [r0, #28]
   2b4dc:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2b4de:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   2b4e0:	8940      	ldrh	r0, [r0, #10]
			vring_used_event(&vq->vq_ring) =
   2b4e2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2b4e6:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   2b4e8:	3b01      	subs	r3, #1
   2b4ea:	8093      	strh	r3, [r2, #4]
}
   2b4ec:	bd30      	pop	{r4, r5, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   2b4ee:	2b01      	cmp	r3, #1
   2b4f0:	d1fc      	bne.n	2b4ec <virtqueue_disable_cb+0x28>
			vring_avail_event(&vq->vq_ring) =
   2b4f2:	6a02      	ldr	r2, [r0, #32]
   2b4f4:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   2b4f6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   2b4f8:	8940      	ldrh	r0, [r0, #10]
			vring_avail_event(&vq->vq_ring) =
   2b4fa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
			    vq->vq_available_idx - vq->vq_nentries - 1;
   2b4fe:	1a1b      	subs	r3, r3, r0
   2b500:	e7f2      	b.n	2b4e8 <virtqueue_disable_cb+0x24>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   2b502:	b92b      	cbnz	r3, 2b510 <virtqueue_disable_cb+0x4c>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   2b504:	69c2      	ldr	r2, [r0, #28]
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   2b506:	8813      	ldrh	r3, [r2, #0]
   2b508:	f043 0301 	orr.w	r3, r3, #1
   2b50c:	8013      	strh	r3, [r2, #0]
}
   2b50e:	e7ed      	b.n	2b4ec <virtqueue_disable_cb+0x28>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   2b510:	2b01      	cmp	r3, #1
   2b512:	d1eb      	bne.n	2b4ec <virtqueue_disable_cb+0x28>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   2b514:	6a02      	ldr	r2, [r0, #32]
   2b516:	e7f6      	b.n	2b506 <virtqueue_disable_cb+0x42>

0002b518 <virtqueue_kick>:
{
   2b518:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   2b51a:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2b51e:	2300      	movs	r3, #0
   2b520:	6801      	ldr	r1, [r0, #0]
{
   2b522:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2b524:	6908      	ldr	r0, [r1, #16]
   2b526:	f000 5200 	and.w	r2, r0, #536870912	; 0x20000000
   2b52a:	4313      	orrs	r3, r2
   2b52c:	698b      	ldr	r3, [r1, #24]
   2b52e:	d020      	beq.n	2b572 <virtqueue_kick+0x5a>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   2b530:	b9b3      	cbnz	r3, 2b560 <virtqueue_kick+0x48>
			new_idx = vq->vq_ring.avail->idx;
   2b532:	69e3      	ldr	r3, [r4, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_avail_event(&vq->vq_ring);
   2b534:	6961      	ldr	r1, [r4, #20]
			new_idx = vq->vq_ring.avail->idx;
   2b536:	885a      	ldrh	r2, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   2b538:	6a23      	ldr	r3, [r4, #32]
   2b53a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_used_event(&vq->vq_ring);
   2b53e:	889b      	ldrh	r3, [r3, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   2b540:	1ad2      	subs	r2, r2, r3
   2b542:	3a01      	subs	r2, #1
   2b544:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   2b546:	b292      	uxth	r2, r2
   2b548:	4293      	cmp	r3, r2
   2b54a:	bf94      	ite	ls
   2b54c:	2300      	movls	r3, #0
   2b54e:	2301      	movhi	r3, #1
	if (vq_ring_must_notify(vq))
   2b550:	b11b      	cbz	r3, 2b55a <virtqueue_kick+0x42>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   2b552:	6923      	ldr	r3, [r4, #16]
   2b554:	b10b      	cbz	r3, 2b55a <virtqueue_kick+0x42>
		vq->notify(vq);
   2b556:	4620      	mov	r0, r4
   2b558:	4798      	blx	r3
	vq->vq_queued_cnt = 0;
   2b55a:	2300      	movs	r3, #0
   2b55c:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   2b55e:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   2b560:	2b01      	cmp	r3, #1
   2b562:	d1fa      	bne.n	2b55a <virtqueue_kick+0x42>
			new_idx = vq->vq_ring.used->idx;
   2b564:	6a23      	ldr	r3, [r4, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   2b566:	6961      	ldr	r1, [r4, #20]
			new_idx = vq->vq_ring.used->idx;
   2b568:	885a      	ldrh	r2, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   2b56a:	69e3      	ldr	r3, [r4, #28]
   2b56c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   2b570:	e7e5      	b.n	2b53e <virtqueue_kick+0x26>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   2b572:	b92b      	cbnz	r3, 2b580 <virtqueue_kick+0x68>
			return (vq->vq_ring.used->flags &
   2b574:	6a23      	ldr	r3, [r4, #32]
			return (vq->vq_ring.avail->flags &
   2b576:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   2b578:	43db      	mvns	r3, r3
   2b57a:	f003 0301 	and.w	r3, r3, #1
   2b57e:	e7e7      	b.n	2b550 <virtqueue_kick+0x38>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   2b580:	2b01      	cmp	r3, #1
   2b582:	d1ea      	bne.n	2b55a <virtqueue_kick+0x42>
			return (vq->vq_ring.avail->flags &
   2b584:	69e3      	ldr	r3, [r4, #28]
   2b586:	e7f6      	b.n	2b576 <virtqueue_kick+0x5e>

0002b588 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   2b588:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   2b58c:	68c3      	ldr	r3, [r0, #12]
   2b58e:	b103      	cbz	r3, 2b592 <virtqueue_notification+0xa>
		vq->callback(vq);
   2b590:	4718      	bx	r3
}
   2b592:	4770      	bx	lr

0002b594 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2b594:	f04f 32ff 	mov.w	r2, #4294967295
   2b598:	f04f 33ff 	mov.w	r3, #4294967295
   2b59c:	f7f7 bfc2 	b.w	23524 <z_impl_k_sem_take>

0002b5a0 <rpmsg_unregister_endpoint>:
{
   2b5a0:	b570      	push	{r4, r5, r6, lr}
   2b5a2:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   2b5a4:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   2b5a6:	f105 0658 	add.w	r6, r5, #88	; 0x58
   2b5aa:	4630      	mov	r0, r6
   2b5ac:	f7ff fff2 	bl	2b594 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   2b5b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2b5b2:	1c5a      	adds	r2, r3, #1
   2b5b4:	d010      	beq.n	2b5d8 <rpmsg_unregister_endpoint+0x38>
	addr -= RPMSG_RESERVED_ADDRESSES;
   2b5b6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
	if (addr >= 0 && addr < size)
   2b5ba:	2b7f      	cmp	r3, #127	; 0x7f
   2b5bc:	d80c      	bhi.n	2b5d8 <rpmsg_unregister_endpoint+0x38>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2b5be:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2b5c0:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   2b5c2:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2b5c4:	f003 031f 	and.w	r3, r3, #31
   2b5c8:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2b5cc:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
   2b5d0:	ea22 0203 	bic.w	r2, r2, r3
   2b5d4:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
	metal_list_del(&ept->node);
   2b5d8:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   2b5dc:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   2b5e0:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   2b5e2:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   2b5e4:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   2b5e8:	2300      	movs	r3, #0
   2b5ea:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   2b5ec:	4630      	mov	r0, r6
}
   2b5ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2b5f2:	f7f7 bf53 	b.w	2349c <z_impl_k_sem_give>

0002b5f6 <rpmsg_send_ns_message>:
{
   2b5f6:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
   2b5f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   2b5fa:	b08c      	sub	sp, #48	; 0x30
   2b5fc:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   2b5fe:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2b600:	2220      	movs	r2, #32
   2b602:	4601      	mov	r1, r0
   2b604:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   2b606:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2b608:	f7fc ff75 	bl	284f6 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   2b60c:	2328      	movs	r3, #40	; 0x28
   2b60e:	2201      	movs	r2, #1
   2b610:	4620      	mov	r0, r4
   2b612:	e9cd 3200 	strd	r3, r2, [sp]
   2b616:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2b618:	2235      	movs	r2, #53	; 0x35
   2b61a:	ab02      	add	r3, sp, #8
   2b61c:	f7f6 fbb4 	bl	21d88 <rpmsg_send_offchannel_raw>
}
   2b620:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2b624:	b00c      	add	sp, #48	; 0x30
   2b626:	bd10      	pop	{r4, pc}

0002b628 <rpmsg_get_endpoint>:
{
   2b628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b62c:	4680      	mov	r8, r0
   2b62e:	4689      	mov	r9, r1
   2b630:	4615      	mov	r5, r2
   2b632:	461e      	mov	r6, r3
	metal_list_for_each(&rdev->endpoints, node) {
   2b634:	6807      	ldr	r7, [r0, #0]
   2b636:	45b8      	cmp	r8, r7
   2b638:	d101      	bne.n	2b63e <rpmsg_get_endpoint+0x16>
	return NULL;
   2b63a:	2400      	movs	r4, #0
   2b63c:	e021      	b.n	2b682 <rpmsg_get_endpoint+0x5a>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2b63e:	1c69      	adds	r1, r5, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2b640:	f1a7 0434 	sub.w	r4, r7, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2b644:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2b646:	d006      	beq.n	2b656 <rpmsg_get_endpoint+0x2e>
   2b648:	429d      	cmp	r5, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   2b64a:	d01a      	beq.n	2b682 <rpmsg_get_endpoint+0x5a>
		if (name)
   2b64c:	f1b9 0f00 	cmp.w	r9, #0
   2b650:	d106      	bne.n	2b660 <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
   2b652:	683f      	ldr	r7, [r7, #0]
   2b654:	e7ef      	b.n	2b636 <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   2b656:	3301      	adds	r3, #1
   2b658:	d1f8      	bne.n	2b64c <rpmsg_get_endpoint+0x24>
   2b65a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2b65c:	42b3      	cmp	r3, r6
   2b65e:	e7f4      	b.n	2b64a <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
   2b660:	2220      	movs	r2, #32
   2b662:	4649      	mov	r1, r9
   2b664:	4620      	mov	r0, r4
   2b666:	f7fc ff75 	bl	28554 <strncmp>
		if (!name || !name_match)
   2b66a:	2800      	cmp	r0, #0
   2b66c:	d1f1      	bne.n	2b652 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   2b66e:	1c72      	adds	r2, r6, #1
   2b670:	d002      	beq.n	2b678 <rpmsg_get_endpoint+0x50>
   2b672:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2b674:	42b3      	cmp	r3, r6
   2b676:	d004      	beq.n	2b682 <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   2b678:	1c6b      	adds	r3, r5, #1
   2b67a:	d1ea      	bne.n	2b652 <rpmsg_get_endpoint+0x2a>
   2b67c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2b67e:	3301      	adds	r3, #1
   2b680:	d1e7      	bne.n	2b652 <rpmsg_get_endpoint+0x2a>
}
   2b682:	4620      	mov	r0, r4
   2b684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002b688 <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
   2b688:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   2b68a:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
   2b68e:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
   2b692:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
   2b694:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
   2b696:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   2b698:	6013      	str	r3, [r2, #0]
}
   2b69a:	4770      	bx	lr

0002b69c <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   2b69c:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   2b69e:	4604      	mov	r4, r0
   2b6a0:	b190      	cbz	r0, 2b6c8 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
   2b6a2:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   2b6a4:	b183      	cbz	r3, 2b6c8 <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
   2b6a6:	7802      	ldrb	r2, [r0, #0]
   2b6a8:	b14a      	cbz	r2, 2b6be <rpmsg_destroy_ept+0x22>
   2b6aa:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
   2b6ae:	b133      	cbz	r3, 2b6be <rpmsg_destroy_ept+0x22>
   2b6b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2b6b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2b6b6:	d302      	bcc.n	2b6be <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   2b6b8:	2101      	movs	r1, #1
   2b6ba:	f7ff ff9c 	bl	2b5f6 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   2b6be:	4620      	mov	r0, r4
}
   2b6c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   2b6c4:	f7ff bf6c 	b.w	2b5a0 <rpmsg_unregister_endpoint>
}
   2b6c8:	bd10      	pop	{r4, pc}

0002b6ca <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   2b6ca:	f851 3c08 	ldr.w	r3, [r1, #-8]
   2b6ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2b6d2:	f841 3c08 	str.w	r3, [r1, #-8]
}
   2b6d6:	4770      	bx	lr

0002b6d8 <rpmsg_virtio_tx_callback>:
}
   2b6d8:	4770      	bx	lr

0002b6da <k_sem_give>:
   2b6da:	f7f7 bedf 	b.w	2349c <z_impl_k_sem_give>

0002b6de <rpmsg_virtio_return_buffer>:
{
   2b6de:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2b6e0:	460c      	mov	r4, r1
   2b6e2:	4619      	mov	r1, r3
	return rvdev->vdev->role;
   2b6e4:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
   2b6e8:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_MASTER) {
   2b6ea:	b95d      	cbnz	r5, 2b704 <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2b6ec:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   2b6ee:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2b6f2:	2301      	movs	r3, #1
   2b6f4:	462a      	mov	r2, r5
   2b6f6:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   2b6fa:	a902      	add	r1, sp, #8
   2b6fc:	f7ff fdee 	bl	2b2dc <virtqueue_add_buffer>
}
   2b700:	b004      	add	sp, #16
   2b702:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   2b704:	2d01      	cmp	r5, #1
   2b706:	d1fb      	bne.n	2b700 <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   2b708:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   2b70c:	f7f6 fb20 	bl	21d50 <virtqueue_add_consumed_buffer>
}
   2b710:	e7f6      	b.n	2b700 <rpmsg_virtio_return_buffer+0x22>

0002b712 <rpmsg_virtio_get_rx_buffer>:
{
   2b712:	b430      	push	{r4, r5}
   2b714:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
   2b718:	4613      	mov	r3, r2
   2b71a:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_MASTER) {
   2b71c:	b925      	cbnz	r5, 2b728 <rpmsg_virtio_get_rx_buffer+0x16>
}
   2b71e:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   2b720:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   2b724:	f7ff be3a 	b.w	2b39c <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   2b728:	2d01      	cmp	r5, #1
   2b72a:	d106      	bne.n	2b73a <rpmsg_virtio_get_rx_buffer+0x28>
}
   2b72c:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   2b72e:	460a      	mov	r2, r1
   2b730:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   2b734:	4619      	mov	r1, r3
   2b736:	f7ff be70 	b.w	2b41a <virtqueue_get_available_buffer>
}
   2b73a:	2000      	movs	r0, #0
   2b73c:	bc30      	pop	{r4, r5}
   2b73e:	4770      	bx	lr

0002b740 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2b740:	f04f 32ff 	mov.w	r2, #4294967295
   2b744:	f04f 33ff 	mov.w	r3, #4294967295
   2b748:	f7f7 beec 	b.w	23524 <z_impl_k_sem_take>

0002b74c <rpmsg_virtio_ns_callback>:
{
   2b74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (len != sizeof(*ns_msg))
   2b750:	2a28      	cmp	r2, #40	; 0x28
{
   2b752:	460e      	mov	r6, r1
   2b754:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   2b756:	d12b      	bne.n	2b7b0 <rpmsg_virtio_ns_callback+0x64>
	struct rpmsg_device *rdev = ept->rdev;
   2b758:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
   2b75a:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
   2b75c:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
	metal_io_block_read(io,
   2b760:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   2b762:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   2b764:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   2b766:	1a71      	subs	r1, r6, r1
   2b768:	42a1      	cmp	r1, r4
   2b76a:	bf28      	it	cs
   2b76c:	f04f 31ff 	movcs.w	r1, #4294967295
   2b770:	f7ff fcb6 	bl	2b0e0 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   2b774:	f105 0758 	add.w	r7, r5, #88	; 0x58
	dest = ns_msg->addr;
   2b778:	f8d6 8020 	ldr.w	r8, [r6, #32]
   2b77c:	4638      	mov	r0, r7
   2b77e:	f7ff ffdf 	bl	2b740 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2b782:	4643      	mov	r3, r8
   2b784:	f04f 32ff 	mov.w	r2, #4294967295
   2b788:	4669      	mov	r1, sp
   2b78a:	4628      	mov	r0, r5
   2b78c:	f7ff ff4c 	bl	2b628 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2b790:	6a73      	ldr	r3, [r6, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2b792:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2b794:	07db      	lsls	r3, r3, #31
   2b796:	d50f      	bpl.n	2b7b8 <rpmsg_virtio_ns_callback+0x6c>
		if (_ept)
   2b798:	b110      	cbz	r0, 2b7a0 <rpmsg_virtio_ns_callback+0x54>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   2b79a:	f04f 33ff 	mov.w	r3, #4294967295
   2b79e:	6283      	str	r3, [r0, #40]	; 0x28
   2b7a0:	4638      	mov	r0, r7
   2b7a2:	f7ff ff9a 	bl	2b6da <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   2b7a6:	b11c      	cbz	r4, 2b7b0 <rpmsg_virtio_ns_callback+0x64>
   2b7a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2b7aa:	b10b      	cbz	r3, 2b7b0 <rpmsg_virtio_ns_callback+0x64>
			_ept->ns_unbind_cb(_ept);
   2b7ac:	4620      	mov	r0, r4
   2b7ae:	4798      	blx	r3
}
   2b7b0:	2000      	movs	r0, #0
   2b7b2:	b008      	add	sp, #32
   2b7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!_ept) {
   2b7b8:	b950      	cbnz	r0, 2b7d0 <rpmsg_virtio_ns_callback+0x84>
   2b7ba:	4638      	mov	r0, r7
   2b7bc:	f7ff ff8d 	bl	2b6da <k_sem_give>
			if (rdev->ns_bind_cb)
   2b7c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   2b7c2:	2b00      	cmp	r3, #0
   2b7c4:	d0f4      	beq.n	2b7b0 <rpmsg_virtio_ns_callback+0x64>
				rdev->ns_bind_cb(rdev, name, dest);
   2b7c6:	4642      	mov	r2, r8
   2b7c8:	4669      	mov	r1, sp
   2b7ca:	4628      	mov	r0, r5
   2b7cc:	4798      	blx	r3
   2b7ce:	e7ef      	b.n	2b7b0 <rpmsg_virtio_ns_callback+0x64>
			_ept->dest_addr = dest;
   2b7d0:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   2b7d4:	4638      	mov	r0, r7
   2b7d6:	f7ff ff80 	bl	2b6da <k_sem_give>
}
   2b7da:	e7e9      	b.n	2b7b0 <rpmsg_virtio_ns_callback+0x64>

0002b7dc <rpmsg_virtio_release_rx_buffer>:
{
   2b7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b7de:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   2b7e0:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   2b7e4:	f100 0758 	add.w	r7, r0, #88	; 0x58
	__metal_mutex_acquire(mutex);
   2b7e8:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   2b7ea:	b2b6      	uxth	r6, r6
{
   2b7ec:	460d      	mov	r5, r1
   2b7ee:	f7ff ffa7 	bl	2b740 <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   2b7f2:	4631      	mov	r1, r6
   2b7f4:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
   2b7f8:	f7ff fe0a 	bl	2b410 <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2b7fc:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   2b7fe:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2b800:	f1a5 0110 	sub.w	r1, r5, #16
   2b804:	4620      	mov	r0, r4
   2b806:	f7ff ff6a 	bl	2b6de <rpmsg_virtio_return_buffer>
   2b80a:	4638      	mov	r0, r7
}
   2b80c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2b810:	f7ff bf63 	b.w	2b6da <k_sem_give>

0002b814 <rpmsg_virtio_shm_pool_get_buffer>:
{
   2b814:	4603      	mov	r3, r0
	if (shpool->avail < size)
   2b816:	6842      	ldr	r2, [r0, #4]
{
   2b818:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   2b81a:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   2b81c:	bf29      	itett	cs
   2b81e:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   2b820:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   2b822:	1a84      	subcs	r4, r0, r2
   2b824:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   2b826:	bf22      	ittt	cs
   2b828:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   2b82a:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   2b82c:	605a      	strcs	r2, [r3, #4]
}
   2b82e:	bd10      	pop	{r4, pc}

0002b830 <rpmsg_virtio_get_tx_payload_buffer>:
{
   2b830:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2b834:	4605      	mov	r5, r0
	status = rpmsg_virtio_get_status(rvdev);
   2b836:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
{
   2b83a:	460f      	mov	r7, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   2b83c:	6a03      	ldr	r3, [r0, #32]
   2b83e:	4616      	mov	r6, r2
   2b840:	681b      	ldr	r3, [r3, #0]
   2b842:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   2b844:	0743      	lsls	r3, r0, #29
   2b846:	d53e      	bpl.n	2b8c6 <rpmsg_virtio_get_tx_payload_buffer+0x96>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   2b848:	f643 2398 	movw	r3, #15000	; 0x3a98
   2b84c:	2e00      	cmp	r6, #0
   2b84e:	bf18      	it	ne
   2b850:	461e      	movne	r6, r3
		metal_mutex_acquire(&rdev->lock);
   2b852:	f105 0858 	add.w	r8, r5, #88	; 0x58
   2b856:	4640      	mov	r0, r8
   2b858:	f7ff ff72 	bl	2b740 <__metal_mutex_acquire>
	return rvdev->vdev->role;
   2b85c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
   2b860:	f8d3 9018 	ldr.w	r9, [r3, #24]
	if (role == RPMSG_MASTER) {
   2b864:	f1b9 0f00 	cmp.w	r9, #0
   2b868:	d121      	bne.n	2b8ae <rpmsg_virtio_get_tx_payload_buffer+0x7e>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   2b86a:	4639      	mov	r1, r7
   2b86c:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
   2b870:	f10d 0206 	add.w	r2, sp, #6
   2b874:	f7ff fd92 	bl	2b39c <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   2b878:	4604      	mov	r4, r0
   2b87a:	b920      	cbnz	r0, 2b886 <rpmsg_virtio_get_tx_payload_buffer+0x56>
   2b87c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   2b880:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   2b882:	b93b      	cbnz	r3, 2b894 <rpmsg_virtio_get_tx_payload_buffer+0x64>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   2b884:	2400      	movs	r4, #0
   2b886:	4640      	mov	r0, r8
   2b888:	f7ff ff27 	bl	2b6da <k_sem_give>
		if (rp_hdr || !tick_count)
   2b88c:	b9fc      	cbnz	r4, 2b8ce <rpmsg_virtio_get_tx_payload_buffer+0x9e>
   2b88e:	b1d6      	cbz	r6, 2b8c6 <rpmsg_virtio_get_tx_payload_buffer+0x96>
		tick_count--;
   2b890:	3e01      	subs	r6, #1
		metal_mutex_acquire(&rdev->lock);
   2b892:	e7e0      	b.n	2b856 <rpmsg_virtio_get_tx_payload_buffer+0x26>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   2b894:	f44f 7100 	mov.w	r1, #512	; 0x200
   2b898:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
   2b89c:	f7ff ffba 	bl	2b814 <rpmsg_virtio_shm_pool_get_buffer>
			*len = RPMSG_BUFFER_SIZE;
   2b8a0:	f44f 7300 	mov.w	r3, #512	; 0x200
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   2b8a4:	4604      	mov	r4, r0
			*len = RPMSG_BUFFER_SIZE;
   2b8a6:	603b      	str	r3, [r7, #0]
			*idx = 0;
   2b8a8:	f8ad 9006 	strh.w	r9, [sp, #6]
   2b8ac:	e7eb      	b.n	2b886 <rpmsg_virtio_get_tx_payload_buffer+0x56>
	if (role == RPMSG_REMOTE) {
   2b8ae:	f1b9 0f01 	cmp.w	r9, #1
   2b8b2:	d1e7      	bne.n	2b884 <rpmsg_virtio_get_tx_payload_buffer+0x54>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   2b8b4:	463a      	mov	r2, r7
   2b8b6:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
   2b8ba:	f10d 0106 	add.w	r1, sp, #6
   2b8be:	f7ff fdac 	bl	2b41a <virtqueue_get_available_buffer>
   2b8c2:	4604      	mov	r4, r0
   2b8c4:	e7df      	b.n	2b886 <rpmsg_virtio_get_tx_payload_buffer+0x56>
		return NULL;
   2b8c6:	2000      	movs	r0, #0
}
   2b8c8:	b003      	add	sp, #12
   2b8ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	rp_hdr->reserved = idx;
   2b8ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   2b8d2:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   2b8d6:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   2b8d8:	683b      	ldr	r3, [r7, #0]
   2b8da:	3b10      	subs	r3, #16
   2b8dc:	603b      	str	r3, [r7, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   2b8de:	e7f3      	b.n	2b8c8 <rpmsg_virtio_get_tx_payload_buffer+0x98>

0002b8e0 <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   2b8e0:	b110      	cbz	r0, 2b8e8 <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   2b8e2:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   2b8e6:	6001      	str	r1, [r0, #0]
}
   2b8e8:	4770      	bx	lr

0002b8ea <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2b8ea:	f7f6 bd01 	b.w	222f0 <_DoInit>

0002b8ee <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2b8ee:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2b8f0:	f7ff fffb 	bl	2b8ea <SEGGER_RTT_Init>

	return 0;
}
   2b8f4:	2000      	movs	r0, #0
   2b8f6:	bd08      	pop	{r3, pc}

0002b8f8 <z_device_state_init>:
}
   2b8f8:	4770      	bx	lr

0002b8fa <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
   2b8fa:	68c3      	ldr	r3, [r0, #12]
   2b8fc:	8818      	ldrh	r0, [r3, #0]
   2b8fe:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
   2b902:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2b906:	4258      	negs	r0, r3
   2b908:	4158      	adcs	r0, r3
   2b90a:	4770      	bx	lr

0002b90c <k_heap_init>:
{
   2b90c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2b90e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2b912:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2b916:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2b918:	f7e6 ba28 	b.w	11d6c <sys_heap_init>

0002b91c <k_mem_slab_init>:
{
   2b91c:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2b91e:	2400      	movs	r4, #0
   2b920:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   2b922:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2b924:	ea41 0402 	orr.w	r4, r1, r2
   2b928:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2b92c:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   2b930:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2b932:	d10c      	bne.n	2b94e <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   2b934:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2b936:	42a3      	cmp	r3, r4
   2b938:	d103      	bne.n	2b942 <k_mem_slab_init+0x26>
   2b93a:	e9c0 0000 	strd	r0, r0, [r0]
}
   2b93e:	2000      	movs	r0, #0
}
   2b940:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2b942:	6985      	ldr	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2b944:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   2b946:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   2b948:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   2b94a:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2b94c:	e7f3      	b.n	2b936 <k_mem_slab_init+0x1a>
		return -EINVAL;
   2b94e:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2b952:	e7f5      	b.n	2b940 <k_mem_slab_init+0x24>

0002b954 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2b954:	f3ef 8005 	mrs	r0, IPSR
}
   2b958:	3800      	subs	r0, #0
   2b95a:	bf18      	it	ne
   2b95c:	2001      	movne	r0, #1
   2b95e:	4770      	bx	lr

0002b960 <z_impl_k_thread_name_set>:
}
   2b960:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2b964:	4770      	bx	lr

0002b966 <k_thread_name_get>:
}
   2b966:	2000      	movs	r0, #0
   2b968:	4770      	bx	lr

0002b96a <z_impl_k_thread_start>:
	z_sched_start(thread);
   2b96a:	f7f9 b913 	b.w	24b94 <z_sched_start>

0002b96e <z_pm_save_idle_exit>:
{
   2b96e:	b508      	push	{r3, lr}
	pm_system_resume();
   2b970:	f7e8 fe20 	bl	145b4 <pm_system_resume>
}
   2b974:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2b978:	f7fb bf8b 	b.w	27892 <sys_clock_idle_exit>

0002b97c <z_impl_k_mutex_init>:
{
   2b97c:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2b97e:	2000      	movs	r0, #0
   2b980:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   2b984:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   2b988:	4770      	bx	lr

0002b98a <z_queue_node_peek>:
{
   2b98a:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2b98c:	4604      	mov	r4, r0
   2b98e:	b130      	cbz	r0, 2b99e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b990:	6802      	ldr	r2, [r0, #0]
   2b992:	0793      	lsls	r3, r2, #30
   2b994:	d003      	beq.n	2b99e <z_queue_node_peek+0x14>
		ret = anode->data;
   2b996:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2b998:	b109      	cbz	r1, 2b99e <z_queue_node_peek+0x14>
			k_free(anode);
   2b99a:	f000 f954 	bl	2bc46 <k_free>
}
   2b99e:	4620      	mov	r0, r4
   2b9a0:	bd10      	pop	{r4, pc}

0002b9a2 <z_impl_k_queue_init>:
	list->head = NULL;
   2b9a2:	2300      	movs	r3, #0
	list->tail = NULL;
   2b9a4:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2b9a8:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&w->waitq);
   2b9aa:	f100 030c 	add.w	r3, r0, #12
   2b9ae:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2b9b2:	f100 0314 	add.w	r3, r0, #20
   2b9b6:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2b9ba:	4770      	bx	lr

0002b9bc <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   2b9bc:	2301      	movs	r3, #1
{
   2b9be:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2b9c0:	9300      	str	r3, [sp, #0]
   2b9c2:	2300      	movs	r3, #0
{
   2b9c4:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2b9c6:	4619      	mov	r1, r3
   2b9c8:	f7f7 fc02 	bl	231d0 <queue_insert>
}
   2b9cc:	b003      	add	sp, #12
   2b9ce:	f85d fb04 	ldr.w	pc, [sp], #4

0002b9d2 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   2b9d2:	2300      	movs	r3, #0
{
   2b9d4:	b507      	push	{r0, r1, r2, lr}
   2b9d6:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2b9d8:	9300      	str	r3, [sp, #0]
   2b9da:	4619      	mov	r1, r3
   2b9dc:	f7f7 fbf8 	bl	231d0 <queue_insert>
}
   2b9e0:	b003      	add	sp, #12
   2b9e2:	f85d fb04 	ldr.w	pc, [sp], #4

0002b9e6 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2b9e6:	b15a      	cbz	r2, 2ba00 <z_impl_k_sem_init+0x1a>
   2b9e8:	428a      	cmp	r2, r1
   2b9ea:	d309      	bcc.n	2ba00 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2b9ec:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2b9f0:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2b9f4:	e9c0 0000 	strd	r0, r0, [r0]
   2b9f8:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2b9fc:	2000      	movs	r0, #0
   2b9fe:	4770      	bx	lr
		return -EINVAL;
   2ba00:	f06f 0015 	mvn.w	r0, #21
}
   2ba04:	4770      	bx	lr

0002ba06 <notify_queue_locked>:
	if (queue != NULL) {
   2ba06:	b120      	cbz	r0, 2ba12 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2ba08:	2200      	movs	r2, #0
   2ba0a:	3088      	adds	r0, #136	; 0x88
   2ba0c:	4611      	mov	r1, r2
   2ba0e:	f7f9 bd07 	b.w	25420 <z_sched_wake>
}
   2ba12:	4770      	bx	lr

0002ba14 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   2ba14:	68c3      	ldr	r3, [r0, #12]
{
   2ba16:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   2ba18:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   2ba1c:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2ba20:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   2ba22:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2ba24:	d502      	bpl.n	2ba2c <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2ba26:	3010      	adds	r0, #16
   2ba28:	f7f9 fea2 	bl	25770 <z_abort_timeout>
}
   2ba2c:	4620      	mov	r0, r4
   2ba2e:	bd10      	pop	{r4, pc}

0002ba30 <cancel_async_locked>:
{
   2ba30:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2ba32:	68c0      	ldr	r0, [r0, #12]
{
   2ba34:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2ba36:	0784      	lsls	r4, r0, #30
   2ba38:	f3c0 0140 	ubfx	r1, r0, #1, #1
   2ba3c:	d416      	bmi.n	2ba6c <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   2ba3e:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2ba42:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   2ba44:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   2ba46:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2ba48:	d510      	bpl.n	2ba6c <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ba4a:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   2ba4e:	b168      	cbz	r0, 2ba6c <cancel_async_locked+0x3c>
   2ba50:	4283      	cmp	r3, r0
   2ba52:	d11d      	bne.n	2ba90 <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   2ba54:	6818      	ldr	r0, [r3, #0]
   2ba56:	b999      	cbnz	r1, 2ba80 <cancel_async_locked+0x50>
   2ba58:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   2ba5c:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2ba60:	428b      	cmp	r3, r1
   2ba62:	d101      	bne.n	2ba68 <cancel_async_locked+0x38>
	list->tail = node;
   2ba64:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   2ba68:	2200      	movs	r2, #0
   2ba6a:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   2ba6c:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   2ba6e:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   2ba72:	bf1e      	ittt	ne
   2ba74:	f042 0202 	orrne.w	r2, r2, #2
   2ba78:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2ba7a:	f002 000f 	andne.w	r0, r2, #15
}
   2ba7e:	bd10      	pop	{r4, pc}
   2ba80:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2ba82:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   2ba86:	4283      	cmp	r3, r0
	list->tail = node;
   2ba88:	bf08      	it	eq
   2ba8a:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   2ba8e:	e7eb      	b.n	2ba68 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2ba90:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ba92:	6800      	ldr	r0, [r0, #0]
   2ba94:	e7db      	b.n	2ba4e <cancel_async_locked+0x1e>

0002ba96 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2ba96:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2ba9a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2ba9e:	4283      	cmp	r3, r0
		return b2 - b1;
   2baa0:	bf14      	ite	ne
   2baa2:	1ac0      	subne	r0, r0, r3
	return 0;
   2baa4:	2000      	moveq	r0, #0
}
   2baa6:	4770      	bx	lr

0002baa8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2baa8:	4603      	mov	r3, r0
   2baaa:	b920      	cbnz	r0, 2bab6 <z_reschedule_irqlock+0xe>
   2baac:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2bab0:	b90a      	cbnz	r2, 2bab6 <z_reschedule_irqlock+0xe>
   2bab2:	f7ea bb07 	b.w	160c4 <arch_swap>
   2bab6:	f383 8811 	msr	BASEPRI, r3
   2baba:	f3bf 8f6f 	isb	sy
}
   2babe:	4770      	bx	lr

0002bac0 <z_reschedule_unlocked>:
	__asm__ volatile(
   2bac0:	f04f 0320 	mov.w	r3, #32
   2bac4:	f3ef 8011 	mrs	r0, BASEPRI
   2bac8:	f383 8811 	msr	BASEPRI, r3
   2bacc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2bad0:	f7ff bfea 	b.w	2baa8 <z_reschedule_irqlock>

0002bad4 <z_priq_dumb_best>:
{
   2bad4:	4603      	mov	r3, r0
	return list->head == list;
   2bad6:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bad8:	4283      	cmp	r3, r0
   2bada:	d003      	beq.n	2bae4 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   2badc:	2800      	cmp	r0, #0
   2bade:	bf38      	it	cc
   2bae0:	2000      	movcc	r0, #0
   2bae2:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2bae4:	2000      	movs	r0, #0
}
   2bae6:	4770      	bx	lr

0002bae8 <z_unpend_all>:
{
   2bae8:	b538      	push	{r3, r4, r5, lr}
   2baea:	4605      	mov	r5, r0
	int need_sched = 0;
   2baec:	2000      	movs	r0, #0
	return list->head == list;
   2baee:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2baf0:	42a5      	cmp	r5, r4
   2baf2:	d000      	beq.n	2baf6 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2baf4:	b904      	cbnz	r4, 2baf8 <z_unpend_all+0x10>
}
   2baf6:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2baf8:	4620      	mov	r0, r4
   2bafa:	f7f8 fc87 	bl	2440c <z_unpend_thread>
		z_ready_thread(thread);
   2bafe:	4620      	mov	r0, r4
   2bb00:	f7f9 f800 	bl	24b04 <z_ready_thread>
		need_sched = 1;
   2bb04:	2001      	movs	r0, #1
   2bb06:	e7f2      	b.n	2baee <z_unpend_all+0x6>

0002bb08 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2bb08:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2bb0a:	f7f9 ffe1 	bl	25ad0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2bb0e:	bd08      	pop	{r3, pc}

0002bb10 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2bb10:	f7f9 bfde 	b.w	25ad0 <sys_clock_tick_get>

0002bb14 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2bb14:	b108      	cbz	r0, 2bb1a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2bb16:	f7e6 bd87 	b.w	12628 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2bb1a:	4770      	bx	lr

0002bb1c <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   2bb1c:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2bb1e:	1c4b      	adds	r3, r1, #1
   2bb20:	bf08      	it	eq
   2bb22:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2bb26:	4604      	mov	r4, r0
   2bb28:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2bb2a:	d013      	beq.n	2bb54 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2bb2c:	ea54 0105 	orrs.w	r1, r4, r5
   2bb30:	d103      	bne.n	2bb3a <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2bb32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2bb36:	f7f9 bfcb 	b.w	25ad0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2bb3a:	f06f 0101 	mvn.w	r1, #1
   2bb3e:	1a0a      	subs	r2, r1, r0
   2bb40:	f04f 31ff 	mov.w	r1, #4294967295
   2bb44:	eb61 0305 	sbc.w	r3, r1, r5
   2bb48:	2a00      	cmp	r2, #0
   2bb4a:	f173 0100 	sbcs.w	r1, r3, #0
   2bb4e:	db02      	blt.n	2bb56 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   2bb50:	4610      	mov	r0, r2
   2bb52:	4619      	mov	r1, r3
}
   2bb54:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   2bb56:	f7f9 ffbb 	bl	25ad0 <sys_clock_tick_get>
   2bb5a:	2c01      	cmp	r4, #1
   2bb5c:	f175 0300 	sbcs.w	r3, r5, #0
   2bb60:	bfbc      	itt	lt
   2bb62:	2401      	movlt	r4, #1
   2bb64:	2500      	movlt	r5, #0
   2bb66:	1820      	adds	r0, r4, r0
   2bb68:	eb45 0101 	adc.w	r1, r5, r1
   2bb6c:	e7f2      	b.n	2bb54 <sys_clock_timeout_end_calc+0x38>

0002bb6e <k_timer_init>:
	timer->status = 0U;
   2bb6e:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2bb70:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2bb74:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2bb78:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2bb7c:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2bb80:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2bb82:	6343      	str	r3, [r0, #52]	; 0x34
}
   2bb84:	4770      	bx	lr

0002bb86 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2bb86:	b510      	push	{r4, lr}
   2bb88:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2bb8a:	f7f9 fdf1 	bl	25770 <z_abort_timeout>

	if (inactive) {
   2bb8e:	b9b0      	cbnz	r0, 2bbbe <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2bb90:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2bb92:	b10b      	cbz	r3, 2bb98 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2bb94:	4620      	mov	r0, r4
   2bb96:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2bb98:	f104 0018 	add.w	r0, r4, #24
   2bb9c:	f7f9 f946 	bl	24e2c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2bba0:	b168      	cbz	r0, 2bbbe <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2bba2:	f7f8 ffaf 	bl	24b04 <z_ready_thread>
   2bba6:	f04f 0320 	mov.w	r3, #32
   2bbaa:	f3ef 8011 	mrs	r0, BASEPRI
   2bbae:	f383 8811 	msr	BASEPRI, r3
   2bbb2:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2bbb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2bbba:	f7ff bf75 	b.w	2baa8 <z_reschedule_irqlock>
   2bbbe:	bd10      	pop	{r4, pc}

0002bbc0 <add_event>:
{
   2bbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bbc2:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2bbc4:	e9d0 2300 	ldrd	r2, r3, [r0]
   2bbc8:	4290      	cmp	r0, r2
   2bbca:	4604      	mov	r4, r0
   2bbcc:	460d      	mov	r5, r1
   2bbce:	d105      	bne.n	2bbdc <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   2bbd0:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2bbd2:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2bbd6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2bbd8:	6065      	str	r5, [r4, #4]
}
   2bbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2bbdc:	2b00      	cmp	r3, #0
   2bbde:	d0f7      	beq.n	2bbd0 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2bbe0:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2bbe2:	b100      	cbz	r0, 2bbe6 <add_event+0x26>
   2bbe4:	3860      	subs	r0, #96	; 0x60
   2bbe6:	b107      	cbz	r7, 2bbea <add_event+0x2a>
   2bbe8:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2bbea:	4639      	mov	r1, r7
   2bbec:	f7ff ff53 	bl	2ba96 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2bbf0:	2800      	cmp	r0, #0
   2bbf2:	dced      	bgt.n	2bbd0 <add_event+0x10>
	return list->head == list;
   2bbf4:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bbf6:	42b4      	cmp	r4, r6
   2bbf8:	d0ea      	beq.n	2bbd0 <add_event+0x10>
   2bbfa:	2e00      	cmp	r6, #0
   2bbfc:	bf38      	it	cc
   2bbfe:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2bc00:	2e00      	cmp	r6, #0
   2bc02:	d0e5      	beq.n	2bbd0 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   2bc04:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2bc06:	b101      	cbz	r1, 2bc0a <add_event+0x4a>
   2bc08:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2bc0a:	4638      	mov	r0, r7
   2bc0c:	f7ff ff43 	bl	2ba96 <z_sched_prio_cmp>
   2bc10:	2800      	cmp	r0, #0
   2bc12:	dd05      	ble.n	2bc20 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   2bc14:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2bc16:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2bc1a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2bc1c:	6075      	str	r5, [r6, #4]
			return;
   2bc1e:	e7dc      	b.n	2bbda <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   2bc20:	6863      	ldr	r3, [r4, #4]
   2bc22:	42b3      	cmp	r3, r6
   2bc24:	d0d4      	beq.n	2bbd0 <add_event+0x10>
   2bc26:	6836      	ldr	r6, [r6, #0]
   2bc28:	e7ea      	b.n	2bc00 <add_event+0x40>

0002bc2a <z_handle_obj_poll_events>:
{
   2bc2a:	4603      	mov	r3, r0
	return list->head == list;
   2bc2c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2bc2e:	4283      	cmp	r3, r0
   2bc30:	d008      	beq.n	2bc44 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2bc32:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2bc36:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2bc38:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2bc3a:	2300      	movs	r3, #0
	node->prev = NULL;
   2bc3c:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2bc40:	f7fa ba0e 	b.w	26060 <signal_poll_event>
}
   2bc44:	4770      	bx	lr

0002bc46 <k_free>:
	if (ptr != NULL) {
   2bc46:	b120      	cbz	r0, 2bc52 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2bc48:	1f01      	subs	r1, r0, #4
   2bc4a:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2bc4e:	f7f6 be25 	b.w	2289c <k_heap_free>
}
   2bc52:	4770      	bx	lr

0002bc54 <k_malloc>:
{
   2bc54:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2bc56:	2004      	movs	r0, #4
   2bc58:	f7fa bc66 	b.w	26528 <k_aligned_alloc>

0002bc5c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2bc5c:	4770      	bx	lr
